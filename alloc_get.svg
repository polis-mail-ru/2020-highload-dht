<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (2,495 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,495 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (3 samples, 0.12%)</title><rect x="10.0" y="467.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (3 samples, 0.12%)</title><rect x="10.0" y="451.0" width="1.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,492 samples, 99.88%)</title><rect x="11.4" y="467.0" width="1178.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.4" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,492 samples, 99.88%)</title><rect x="11.4" y="451.0" width="1178.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.4" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,492 samples, 99.88%)</title><rect x="11.4" y="435.0" width="1178.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.4" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,473 samples, 99.12%)</title><rect x="11.4" y="419.0" width="1169.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.4" y="430.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,473 samples, 99.12%)</title><rect x="11.4" y="403.0" width="1169.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.4" y="414.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,468 samples, 98.92%)</title><rect x="11.4" y="387.0" width="1167.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="14.4" y="398.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (11 samples, 0.44%)</title><rect x="11.4" y="371.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="14.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (11 samples, 0.44%)</title><rect x="11.4" y="355.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.36%)</title><rect x="11.4" y="339.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.4" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (9 samples, 0.36%)</title><rect x="11.4" y="323.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.4" y="334.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.36%)</title><rect x="11.4" y="307.0" width="4.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="14.4" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.08%)</title><rect x="15.7" y="339.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.7" y="350.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (2 samples, 0.08%)</title><rect x="15.7" y="323.0" width="0.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="18.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.08%)</title><rect x="16.6" y="371.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.08%)</title><rect x="16.6" y="355.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.6" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.08%)</title><rect x="16.6" y="339.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.6" y="350.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.04%)</title><rect x="16.6" y="323.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="19.6" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="17.1" y="323.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.1" y="334.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.04%)</title><rect x="17.1" y="307.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="20.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/shakirov/MyHttpServer.entity (2,455 samples, 98.40%)</title><rect x="17.6" y="371.0" width="1161.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.6" y="382.0">ru/mail/polis/service/shakirov/MyHttpServer.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.04%)</title><rect x="17.6" y="355.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.6" y="366.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.04%)</title><rect x="17.6" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.04%)</title><rect x="17.6" y="323.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.6" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="17.6" y="307.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.6" y="318.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.04%)</title><rect x="17.6" y="291.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="20.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.16%)</title><rect x="18.0" y="355.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.16%)</title><rect x="18.0" y="339.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.0" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.16%)</title><rect x="18.0" y="323.0" width="1.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="21.0" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (3 samples, 0.12%)</title><rect x="19.9" y="355.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.9" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.12%)</title><rect x="19.9" y="339.0" width="1.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="22.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.28%)</title><rect x="21.4" y="355.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.4" y="366.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.12%)</title><rect x="21.4" y="339.0" width="1.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="24.4" y="350.0"></text>
</g>
<g>
<title>java.lang.String[] (2 samples, 0.08%)</title><rect x="22.8" y="339.0" width="0.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="25.8" y="350.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.08%)</title><rect x="23.7" y="339.0" width="1.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="26.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (2,440 samples, 97.80%)</title><rect x="24.7" y="355.0" width="1153.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.7" y="366.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (34 samples, 1.36%)</title><rect x="24.7" y="339.0" width="16.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.7" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (34 samples, 1.36%)</title><rect x="24.7" y="323.0" width="16.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.7" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (34 samples, 1.36%)</title><rect x="24.7" y="307.0" width="16.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.7" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (34 samples, 1.36%)</title><rect x="24.7" y="291.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (34 samples, 1.36%)</title><rect x="24.7" y="275.0" width="16.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.7" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (34 samples, 1.36%)</title><rect x="24.7" y="259.0" width="16.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.7" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (34 samples, 1.36%)</title><rect x="24.7" y="243.0" width="16.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.7" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (34 samples, 1.36%)</title><rect x="24.7" y="227.0" width="16.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.7" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (34 samples, 1.36%)</title><rect x="24.7" y="211.0" width="16.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.7" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (34 samples, 1.36%)</title><rect x="24.7" y="195.0" width="16.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.7" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (34 samples, 1.36%)</title><rect x="24.7" y="179.0" width="16.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.7" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (34 samples, 1.36%)</title><rect x="24.7" y="163.0" width="16.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.7" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (34 samples, 1.36%)</title><rect x="24.7" y="147.0" width="16.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable$1.next (34 samples, 1.36%)</title><rect x="24.7" y="131.0" width="16.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable$1.next (34 samples, 1.36%)</title><rect x="24.7" y="115.0" width="16.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.keyAt (13 samples, 0.52%)</title><rect x="24.7" y="99.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.7" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (10 samples, 0.40%)</title><rect x="24.7" y="83.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.7" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5 samples, 0.20%)</title><rect x="24.7" y="67.0" width="2.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="27.7" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.20%)</title><rect x="27.0" y="67.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.0" y="78.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.20%)</title><rect x="27.0" y="51.0" width="2.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="30.0" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.getOffset (3 samples, 0.12%)</title><rect x="29.4" y="83.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.4" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.12%)</title><rect x="29.4" y="67.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.4" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.08%)</title><rect x="29.4" y="51.0" width="0.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="32.4" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="30.3" y="51.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.3" y="62.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.04%)</title><rect x="30.3" y="35.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="33.3" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.valueAt (21 samples, 0.84%)</title><rect x="30.8" y="99.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="33.8" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (17 samples, 0.68%)</title><rect x="30.8" y="83.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11 samples, 0.44%)</title><rect x="30.8" y="67.0" width="5.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="33.8" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.24%)</title><rect x="36.0" y="67.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="39.0" y="78.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.24%)</title><rect x="36.0" y="51.0" width="2.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="39.0" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Value (1 samples, 0.04%)</title><rect x="38.8" y="83.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="41.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.getOffset (3 samples, 0.12%)</title><rect x="39.3" y="83.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.3" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.12%)</title><rect x="39.3" y="67.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.08%)</title><rect x="39.3" y="51.0" width="1.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="42.3" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="40.3" y="51.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.3" y="62.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.04%)</title><rect x="40.3" y="35.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="43.3" y="46.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (4 samples, 0.16%)</title><rect x="40.7" y="339.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.7" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (4 samples, 0.16%)</title><rect x="40.7" y="323.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/LsmDao$$Lambda$64/1477375578.apply (4 samples, 0.16%)</title><rect x="40.7" y="307.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/LsmDao.lambda$iterator$3 (4 samples, 0.16%)</title><rect x="40.7" y="291.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (1 samples, 0.04%)</title><rect x="40.7" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.7" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (1 samples, 0.04%)</title><rect x="40.7" y="259.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="43.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Value.getData (3 samples, 0.12%)</title><rect x="41.2" y="275.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.2" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.12%)</title><rect x="41.2" y="259.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.2" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.12%)</title><rect x="41.2" y="243.0" width="1.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="44.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (2 samples, 0.08%)</title><rect x="42.6" y="339.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.6" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.08%)</title><rect x="42.6" y="323.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.6" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2 samples, 0.08%)</title><rect x="42.6" y="307.0" width="1.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="45.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (3 samples, 0.12%)</title><rect x="43.6" y="339.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="46.6" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (3 samples, 0.12%)</title><rect x="43.6" y="323.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="46.6" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (3 samples, 0.12%)</title><rect x="43.6" y="307.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.6" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.12%)</title><rect x="43.6" y="291.0" width="1.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="46.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/LsmDao.iterator (2,397 samples, 96.07%)</title><rect x="45.0" y="339.0" width="1133.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="48.0" y="350.0">ru/mail/polis/dao/LsmDao.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (169 samples, 6.77%)</title><rect x="45.0" y="323.0" width="79.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.0" y="334.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (169 samples, 6.77%)</title><rect x="45.0" y="307.0" width="79.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="48.0" y="318.0">com/googl..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (4 samples, 0.16%)</title><rect x="45.0" y="291.0" width="1.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="48.0" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (5 samples, 0.20%)</title><rect x="46.9" y="291.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.9" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (5 samples, 0.20%)</title><rect x="46.9" y="275.0" width="2.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="49.9" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (160 samples, 6.41%)</title><rect x="49.3" y="291.0" width="75.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.3" y="302.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (160 samples, 6.41%)</title><rect x="49.3" y="275.0" width="75.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.3" y="286.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (4 samples, 0.16%)</title><rect x="49.3" y="259.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="52.3" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.16%)</title><rect x="49.3" y="243.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.3" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (4 samples, 0.16%)</title><rect x="49.3" y="227.0" width="1.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="52.3" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (156 samples, 6.25%)</title><rect x="51.1" y="259.0" width="73.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.1" y="270.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (156 samples, 6.25%)</title><rect x="51.1" y="243.0" width="73.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.1" y="254.0">java/uti..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (156 samples, 6.25%)</title><rect x="51.1" y="227.0" width="73.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.1" y="238.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (156 samples, 6.25%)</title><rect x="51.1" y="211.0" width="73.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.1" y="222.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (156 samples, 6.25%)</title><rect x="51.1" y="195.0" width="73.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.1" y="206.0">com/goog..</text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable$1.next (156 samples, 6.25%)</title><rect x="51.1" y="179.0" width="73.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.1" y="190.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable$1.next (156 samples, 6.25%)</title><rect x="51.1" y="163.0" width="73.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.1" y="174.0">ru/mail/..</text>
</g>
<g>
<title>ru.mail.polis.dao.Cell (8 samples, 0.32%)</title><rect x="51.1" y="147.0" width="3.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="54.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.keyAt (54 samples, 2.16%)</title><rect x="54.9" y="147.0" width="25.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="57.9" y="158.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (39 samples, 1.56%)</title><rect x="54.9" y="131.0" width="18.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.9" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (28 samples, 1.12%)</title><rect x="54.9" y="115.0" width="13.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="57.9" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.44%)</title><rect x="68.2" y="115.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.2" y="126.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.44%)</title><rect x="68.2" y="99.0" width="5.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="71.2" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.getOffset (15 samples, 0.60%)</title><rect x="73.4" y="131.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (15 samples, 0.60%)</title><rect x="73.4" y="115.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="76.4" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8 samples, 0.32%)</title><rect x="73.4" y="99.0" width="3.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="76.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.28%)</title><rect x="77.2" y="99.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.2" y="110.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.28%)</title><rect x="77.2" y="83.0" width="3.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="80.2" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.valueAt (94 samples, 3.77%)</title><rect x="80.5" y="147.0" width="44.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="83.5" y="158.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (73 samples, 2.93%)</title><rect x="80.5" y="131.0" width="34.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.5" y="142.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (49 samples, 1.96%)</title><rect x="80.5" y="115.0" width="23.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="83.5" y="126.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (24 samples, 0.96%)</title><rect x="103.6" y="115.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.6" y="126.0"></text>
</g>
<g>
<title>byte[] (24 samples, 0.96%)</title><rect x="103.6" y="99.0" width="11.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="106.6" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Value (6 samples, 0.24%)</title><rect x="115.0" y="131.0" width="2.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="118.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.getOffset (15 samples, 0.60%)</title><rect x="117.8" y="131.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="120.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (15 samples, 0.60%)</title><rect x="117.8" y="115.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="120.8" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10 samples, 0.40%)</title><rect x="117.8" y="99.0" width="4.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="120.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.20%)</title><rect x="122.6" y="99.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="125.6" y="110.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.20%)</title><rect x="122.6" y="83.0" width="2.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="125.6" y="94.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (1 samples, 0.04%)</title><rect x="124.9" y="323.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="127.9" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (1 samples, 0.04%)</title><rect x="124.9" y="307.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="127.9" y="318.0"></text>
</g>
<g>
<title>java.util.ArrayList (1 samples, 0.04%)</title><rect x="125.4" y="323.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="128.4" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 0.08%)</title><rect x="125.9" y="323.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="128.9" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2 samples, 0.08%)</title><rect x="125.9" y="307.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.9" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (2 samples, 0.08%)</title><rect x="125.9" y="291.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="128.9" y="302.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (2 samples, 0.08%)</title><rect x="125.9" y="275.0" width="0.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="128.9" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.12%)</title><rect x="126.8" y="323.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="129.8" y="334.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.12%)</title><rect x="126.8" y="307.0" width="1.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="129.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (43 samples, 1.72%)</title><rect x="128.2" y="323.0" width="20.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.2" y="334.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (2 samples, 0.08%)</title><rect x="128.2" y="307.0" width="1.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="131.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (41 samples, 1.64%)</title><rect x="129.2" y="307.0" width="19.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.2" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (41 samples, 1.64%)</title><rect x="129.2" y="291.0" width="19.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.2" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (41 samples, 1.64%)</title><rect x="129.2" y="275.0" width="19.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.2" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (41 samples, 1.64%)</title><rect x="129.2" y="259.0" width="19.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.2" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (41 samples, 1.64%)</title><rect x="129.2" y="243.0" width="19.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.2" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (41 samples, 1.64%)</title><rect x="129.2" y="227.0" width="19.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.2" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (41 samples, 1.64%)</title><rect x="129.2" y="211.0" width="19.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (41 samples, 1.64%)</title><rect x="129.2" y="195.0" width="19.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="132.2" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (41 samples, 1.64%)</title><rect x="129.2" y="179.0" width="19.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable$1.next (41 samples, 1.64%)</title><rect x="129.2" y="163.0" width="19.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable$1.next (41 samples, 1.64%)</title><rect x="129.2" y="147.0" width="19.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.2" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Cell (1 samples, 0.04%)</title><rect x="129.2" y="131.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="132.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.keyAt (16 samples, 0.64%)</title><rect x="129.7" y="131.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (9 samples, 0.36%)</title><rect x="129.7" y="115.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.7" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.16%)</title><rect x="129.7" y="99.0" width="1.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="132.7" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.20%)</title><rect x="131.5" y="99.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.5" y="110.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.20%)</title><rect x="131.5" y="83.0" width="2.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="134.5" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.getOffset (7 samples, 0.28%)</title><rect x="133.9" y="115.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="136.9" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.28%)</title><rect x="133.9" y="99.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.9" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.16%)</title><rect x="133.9" y="83.0" width="1.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="136.9" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="135.8" y="83.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.8" y="94.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.12%)</title><rect x="135.8" y="67.0" width="1.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="138.8" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.valueAt (24 samples, 0.96%)</title><rect x="137.2" y="131.0" width="11.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.2" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (13 samples, 0.52%)</title><rect x="137.2" y="115.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.2" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 0.28%)</title><rect x="137.2" y="99.0" width="3.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="140.2" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.24%)</title><rect x="140.5" y="99.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.5" y="110.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.24%)</title><rect x="140.5" y="83.0" width="2.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="143.5" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Value (3 samples, 0.12%)</title><rect x="143.4" y="115.0" width="1.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="146.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.getOffset (8 samples, 0.32%)</title><rect x="144.8" y="115.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8 samples, 0.32%)</title><rect x="144.8" y="99.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.8" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8 samples, 0.32%)</title><rect x="144.8" y="83.0" width="3.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="147.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MemTable.iterator (6 samples, 0.24%)</title><rect x="148.6" y="323.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="151.6" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (3 samples, 0.12%)</title><rect x="148.6" y="307.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.6" y="318.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (3 samples, 0.12%)</title><rect x="148.6" y="291.0" width="1.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="151.6" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (2 samples, 0.08%)</title><rect x="150.0" y="307.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.0" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (2 samples, 0.08%)</title><rect x="150.0" y="291.0" width="0.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="153.0" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.04%)</title><rect x="150.9" y="307.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.9" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (1 samples, 0.04%)</title><rect x="150.9" y="291.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="153.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.iterator (2,172 samples, 87.05%)</title><rect x="151.4" y="323.0" width="1027.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="154.4" y="334.0">ru/mail/polis/dao/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.SSTable$1 (10 samples, 0.40%)</title><rect x="151.4" y="307.0" width="4.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="154.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable$1.&lt;init&gt; (2,162 samples, 86.65%)</title><rect x="156.1" y="307.0" width="1022.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="159.1" y="318.0">ru/mail/polis/dao/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.binarySearch (2,162 samples, 86.65%)</title><rect x="156.1" y="291.0" width="1022.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.1" y="302.0">ru/mail/polis/dao/SSTable.binarySearch</text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.keyAt (2,162 samples, 86.65%)</title><rect x="156.1" y="275.0" width="1022.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.1" y="286.0">ru/mail/polis/dao/SSTable.keyAt</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,498 samples, 60.04%)</title><rect x="156.1" y="259.0" width="708.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.1" y="270.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (935 samples, 37.47%)</title><rect x="156.1" y="243.0" width="442.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="159.1" y="254.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (563 samples, 22.57%)</title><rect x="598.3" y="243.0" width="266.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="601.3" y="254.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (563 samples, 22.57%)</title><rect x="598.3" y="227.0" width="266.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="601.3" y="238.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/SSTable.getOffset (664 samples, 26.61%)</title><rect x="864.6" y="259.0" width="314.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="867.6" y="270.0">ru/mail/polis/dao/SSTable.getOffset</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (664 samples, 26.61%)</title><rect x="864.6" y="243.0" width="314.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="867.6" y="254.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (430 samples, 17.23%)</title><rect x="864.6" y="227.0" width="203.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="867.6" y="238.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (234 samples, 9.38%)</title><rect x="1068.0" y="227.0" width="110.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1071.0" y="238.0">java/nio/Heap..</text>
</g>
<g>
<title>byte[] (234 samples, 9.38%)</title><rect x="1068.0" y="211.0" width="110.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1071.0" y="222.0">byte[]</text>
</g>
<g>
<title>one/nio/http/Request.getPath (5 samples, 0.20%)</title><rect x="1178.6" y="387.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1181.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.20%)</title><rect x="1178.6" y="371.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1181.6" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.20%)</title><rect x="1178.6" y="355.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1181.6" y="366.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.12%)</title><rect x="1178.6" y="339.0" width="1.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.08%)</title><rect x="1180.1" y="339.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1183.1" y="350.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.08%)</title><rect x="1180.1" y="323.0" width="0.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1183.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (15 samples, 0.60%)</title><rect x="1181.0" y="419.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>one.nio.http.Request (1 samples, 0.04%)</title><rect x="1181.0" y="403.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.20%)</title><rect x="1181.5" y="403.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1184.5" y="414.0"></text>
</g>
<g>
<title>java.lang.String[] (5 samples, 0.20%)</title><rect x="1181.5" y="387.0" width="2.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1184.5" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.36%)</title><rect x="1183.9" y="403.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1186.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.36%)</title><rect x="1183.9" y="387.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1186.9" y="398.0"></text>
</g>
<g>
<title>char[] (6 samples, 0.24%)</title><rect x="1183.9" y="371.0" width="2.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1186.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.12%)</title><rect x="1186.7" y="371.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1189.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.12%)</title><rect x="1186.7" y="355.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1189.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.12%)</title><rect x="1186.7" y="339.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1189.7" y="350.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.12%)</title><rect x="1186.7" y="323.0" width="1.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1189.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.16%)</title><rect x="1188.1" y="419.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1191.1" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.16%)</title><rect x="1188.1" y="403.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1191.1" y="414.0"></text>
</g>
<g>
<title>char[] (3 samples, 0.12%)</title><rect x="1188.1" y="387.0" width="1.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1191.1" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1189.5" y="387.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1192.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1189.5" y="371.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1192.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.04%)</title><rect x="1189.5" y="355.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1192.5" y="366.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.04%)</title><rect x="1189.5" y="339.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1192.5" y="350.0"></text>
</g>
</g>
</svg>
