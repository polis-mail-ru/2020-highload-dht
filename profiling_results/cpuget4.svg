<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="469"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="469"> </text>
<g id="frames">
<g>
<title>all (1,191 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="446.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.17%)</title><rect x="10.0" y="419.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.17%)</title><rect x="10.0" y="403.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.17%)</title><rect x="10.0" y="387.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.08%)</title><rect x="11.0" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.08%)</title><rect x="11.0" y="355.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="14.0" y="366.0"></text>
</g>
<g>
<title>[thread_exit] (1 samples, 0.08%)</title><rect x="12.0" y="419.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="15.0" y="430.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.08%)</title><rect x="12.0" y="403.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="15.0" y="414.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.08%)</title><rect x="12.0" y="387.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="15.0" y="398.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.08%)</title><rect x="12.0" y="371.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="15.0" y="382.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.08%)</title><rect x="12.0" y="355.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.0" y="366.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.08%)</title><rect x="12.0" y="339.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.0" y="350.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.08%)</title><rect x="12.0" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.0" y="334.0"></text>
</g>
<g>
<title>JavaThread::exit(bool, JavaThread::ExitType) (1 samples, 0.08%)</title><rect x="12.0" y="307.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.0" y="318.0"></text>
</g>
<g>
<title>JavaThread::remove_stack_guard_pages() (1 samples, 0.08%)</title><rect x="12.0" y="291.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.0" y="302.0"></text>
</g>
<g>
<title>bsd_mprotect(char*, unsigned long, int) (1 samples, 0.08%)</title><rect x="12.0" y="275.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="15.0" y="286.0"></text>
</g>
<g>
<title>Events::log(Thread*, char const*, ...) (1 samples, 0.08%)</title><rect x="12.0" y="259.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.0" y="270.0"></text>
</g>
<g>
<title>FormatStringEventLog&lt;256ul&gt;::logv(Thread*, char const*, __va_list_tag*) (1 samples, 0.08%)</title><rect x="12.0" y="243.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.0" y="254.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.08%)</title><rect x="12.0" y="227.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="15.0" y="238.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.08%)</title><rect x="12.0" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.0" y="222.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.08%)</title><rect x="12.0" y="195.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="15.0" y="206.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.08%)</title><rect x="12.0" y="179.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="15.0" y="190.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.08%)</title><rect x="12.0" y="163.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="15.0" y="174.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.08%)</title><rect x="12.0" y="147.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="15.0" y="158.0"></text>
</g>
<g>
<title>java/lang/Thread.run (614 samples, 51.55%)</title><rect x="13.0" y="419.0" width="608.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.0" y="430.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (614 samples, 51.55%)</title><rect x="13.0" y="403.0" width="608.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.0" y="414.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (614 samples, 51.55%)</title><rect x="13.0" y="387.0" width="608.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.0" y="398.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.08%)</title><rect x="14.0" y="371.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="17.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="14.0" y="355.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="14.0" y="339.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="14.0" y="323.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (281 samples, 23.59%)</title><rect x="15.0" y="371.0" width="278.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.0" y="382.0">java/util/concurrent/ThreadPoolExecut..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (281 samples, 23.59%)</title><rect x="15.0" y="355.0" width="278.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.0" y="366.0">java/util/concurrent/ArrayBlockingQue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (261 samples, 21.91%)</title><rect x="15.0" y="339.0" width="258.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.0" y="350.0">java/util/concurrent/locks/Abstrac..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.59%)</title><rect x="15.0" y="323.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.59%)</title><rect x="15.0" y="307.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.59%)</title><rect x="15.0" y="291.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.59%)</title><rect x="15.0" y="275.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.59%)</title><rect x="15.0" y="259.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.0" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.50%)</title><rect x="15.9" y="243.0" width="6.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="18.9" y="254.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="15.9" y="227.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.9" y="238.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.08%)</title><rect x="15.9" y="211.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.9" y="222.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.08%)</title><rect x="16.9" y="227.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.9" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.25%)</title><rect x="17.9" y="227.0" width="3.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="20.9" y="238.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.08%)</title><rect x="20.9" y="227.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="23.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (254 samples, 21.33%)</title><rect x="21.9" y="323.0" width="251.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.9" y="334.0">java/util/concurrent/locks/LockSu..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (252 samples, 21.16%)</title><rect x="22.9" y="307.0" width="249.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="25.9" y="318.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.17%)</title><rect x="27.8" y="291.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="30.8" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (245 samples, 20.57%)</title><rect x="29.8" y="291.0" width="242.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="32.8" y="302.0">Unsafe_Park(JNIEnv_*, _jobject*,..</text>
</g>
<g>
<title>Parker::park(bool, long) (236 samples, 19.82%)</title><rect x="32.8" y="275.0" width="233.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="35.8" y="286.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.08%)</title><rect x="32.8" y="259.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="35.8" y="270.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.08%)</title><rect x="33.8" y="259.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="36.8" y="270.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="33.8" y="243.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="36.8" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (231 samples, 19.40%)</title><rect x="34.8" y="259.0" width="228.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="37.8" y="270.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.25%)</title><rect x="263.6" y="259.0" width="3.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="266.6" y="270.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.08%)</title><rect x="266.6" y="275.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="269.6" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.08%)</title><rect x="267.6" y="275.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="270.6" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.08%)</title><rect x="267.6" y="259.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="270.6" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.08%)</title><rect x="268.6" y="275.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="271.6" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="269.6" y="275.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="272.6" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="270.6" y="275.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="273.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.08%)</title><rect x="272.6" y="307.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 0.42%)</title><rect x="273.5" y="339.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.42%)</title><rect x="273.5" y="323.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (5 samples, 0.42%)</title><rect x="273.5" y="307.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.25%)</title><rect x="275.5" y="291.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.25%)</title><rect x="275.5" y="275.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.25%)</title><rect x="275.5" y="259.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.5" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.25%)</title><rect x="275.5" y="243.0" width="3.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="278.5" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.25%)</title><rect x="275.5" y="227.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="278.5" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.25%)</title><rect x="275.5" y="211.0" width="3.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="278.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.26%)</title><rect x="278.5" y="339.0" width="14.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.26%)</title><rect x="278.5" y="323.0" width="14.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.26%)</title><rect x="278.5" y="307.0" width="14.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.26%)</title><rect x="278.5" y="291.0" width="14.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 1.09%)</title><rect x="280.5" y="275.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.5" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (13 samples, 1.09%)</title><rect x="280.5" y="259.0" width="12.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="283.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="280.5" y="243.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="283.5" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.08%)</title><rect x="280.5" y="227.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="283.5" y="238.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.08%)</title><rect x="280.5" y="211.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="283.5" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.08%)</title><rect x="280.5" y="195.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="283.5" y="206.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.08%)</title><rect x="280.5" y="179.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="283.5" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.84%)</title><rect x="281.5" y="243.0" width="9.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="284.5" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="291.4" y="243.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="294.4" y="254.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.08%)</title><rect x="292.4" y="243.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="295.4" y="254.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.08%)</title><rect x="292.4" y="227.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="295.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$115/1539902124.run (331 samples, 27.79%)</title><rect x="293.4" y="371.0" width="327.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.4" y="382.0">ru/mail/polis/service/suhova/MoribundService..</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (331 samples, 27.79%)</title><rect x="293.4" y="355.0" width="327.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.4" y="366.0">ru/mail/polis/service/suhova/MoribundService..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (167 samples, 14.02%)</title><rect x="293.4" y="339.0" width="165.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.4" y="350.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.34%)</title><rect x="295.3" y="323.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="298.3" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.34%)</title><rect x="295.3" y="307.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="298.3" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.34%)</title><rect x="295.3" y="291.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="298.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (160 samples, 13.43%)</title><rect x="299.3" y="323.0" width="158.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="302.3" y="334.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 1.01%)</title><rect x="299.3" y="307.0" width="11.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="303.3" y="291.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="306.3" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="303.3" y="275.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="306.3" y="286.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="303.3" y="259.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="306.3" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="303.3" y="243.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="306.3" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="303.3" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="306.3" y="238.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="303.3" y="211.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="306.3" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="303.3" y="195.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="306.3" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.08%)</title><rect x="303.3" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="306.3" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.08%)</title><rect x="303.3" y="163.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="306.3" y="174.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="303.3" y="147.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="306.3" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="303.3" y="131.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="306.3" y="142.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.59%)</title><rect x="304.3" y="291.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.3" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.59%)</title><rect x="304.3" y="275.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="307.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.59%)</title><rect x="304.3" y="259.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="307.3" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (148 samples, 12.43%)</title><rect x="311.2" y="307.0" width="146.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="314.2" y="318.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session.write (148 samples, 12.43%)</title><rect x="311.2" y="291.0" width="146.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.2" y="302.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (148 samples, 12.43%)</title><rect x="311.2" y="275.0" width="146.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.2" y="286.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (148 samples, 12.43%)</title><rect x="311.2" y="259.0" width="146.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.2" y="270.0">one/nio/net/JavaSo..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.42%)</title><rect x="311.2" y="243.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.42%)</title><rect x="311.2" y="227.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.42%)</title><rect x="311.2" y="211.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.2" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.42%)</title><rect x="311.2" y="195.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.2" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.34%)</title><rect x="311.2" y="179.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.2" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.17%)</title><rect x="313.2" y="163.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="316.2" y="174.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="314.2" y="147.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="317.2" y="158.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.08%)</title><rect x="314.2" y="131.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="317.2" y="142.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.08%)</title><rect x="314.2" y="115.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="317.2" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.08%)</title><rect x="315.2" y="179.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="318.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.08%)</title><rect x="315.2" y="163.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (143 samples, 12.01%)</title><rect x="316.1" y="243.0" width="141.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.1" y="254.0">sun/nio/ch/SocketC..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.34%)</title><rect x="319.1" y="227.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.34%)</title><rect x="319.1" y="211.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.34%)</title><rect x="319.1" y="195.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.34%)</title><rect x="319.1" y="179.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="322.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="322.1" y="163.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (136 samples, 11.42%)</title><rect x="323.1" y="227.0" width="134.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="326.1" y="238.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (136 samples, 11.42%)</title><rect x="323.1" y="211.0" width="134.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="326.1" y="222.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (135 samples, 11.34%)</title><rect x="323.1" y="195.0" width="133.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="326.1" y="206.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (135 samples, 11.34%)</title><rect x="323.1" y="179.0" width="133.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.1" y="190.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="325.1" y="163.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="328.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (132 samples, 11.08%)</title><rect x="326.1" y="163.0" width="130.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="329.1" y="174.0">sun/nio/ch/FileD..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.08%)</title><rect x="330.0" y="147.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="333.0" y="158.0"></text>
</g>
<g>
<title>write (127 samples, 10.66%)</title><rect x="331.0" y="147.0" width="125.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="334.0" y="158.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.08%)</title><rect x="456.8" y="195.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="459.8" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="456.8" y="179.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.8" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="456.8" y="163.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="459.8" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.08%)</title><rect x="457.8" y="323.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="460.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (4 samples, 0.34%)</title><rect x="458.8" y="339.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (4 samples, 0.34%)</title><rect x="458.8" y="323.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="461.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.25%)</title><rect x="458.8" y="307.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="461.8" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.25%)</title><rect x="458.8" y="291.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="461.8" y="302.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="459.8" y="275.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="462.8" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="460.8" y="275.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="463.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.08%)</title><rect x="461.8" y="307.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.8" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1254344205.invoke (1 samples, 0.08%)</title><rect x="461.8" y="291.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.8" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.08%)</title><rect x="461.8" y="275.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.08%)</title><rect x="461.8" y="259.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.08%)</title><rect x="461.8" y="243.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="464.8" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="461.8" y="227.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="464.8" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="461.8" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="464.8" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="461.8" y="195.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="464.8" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="461.8" y="179.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="464.8" y="190.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="461.8" y="163.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="464.8" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="461.8" y="147.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="464.8" y="158.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.08%)</title><rect x="461.8" y="131.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="464.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.get (90 samples, 7.56%)</title><rect x="462.8" y="339.0" width="89.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="465.8" y="350.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (88 samples, 7.39%)</title><rect x="462.8" y="323.0" width="87.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.8" y="334.0">ru/mail/po..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (9 samples, 0.76%)</title><rect x="462.8" y="307.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="465.8" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (9 samples, 0.76%)</title><rect x="462.8" y="291.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="465.8" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (7 samples, 0.59%)</title><rect x="464.8" y="275.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="467.8" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (7 samples, 0.59%)</title><rect x="464.8" y="259.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="467.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.34%)</title><rect x="467.7" y="243.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.7" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.17%)</title><rect x="467.7" y="227.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.7" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.17%)</title><rect x="467.7" y="211.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.7" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (2 samples, 0.17%)</title><rect x="467.7" y="195.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="470.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.17%)</title><rect x="467.7" y="179.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.17%)</title><rect x="467.7" y="163.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="470.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.08%)</title><rect x="468.7" y="147.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.08%)</title><rect x="468.7" y="131.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="471.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$126/1686312256.apply (1 samples, 0.08%)</title><rect x="469.7" y="227.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.7" y="238.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="470.7" y="227.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="473.7" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (3 samples, 0.25%)</title><rect x="471.7" y="307.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="474.7" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (1 samples, 0.08%)</title><rect x="471.7" y="291.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="474.7" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.08%)</title><rect x="471.7" y="275.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="474.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.17%)</title><rect x="472.7" y="291.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.17%)</title><rect x="472.7" y="275.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.17%)</title><rect x="472.7" y="259.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.17%)</title><rect x="472.7" y="243.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="475.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooHigh (2 samples, 0.17%)</title><rect x="472.7" y="227.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="475.7" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="472.7" y="211.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.7" y="222.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="473.7" y="211.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="476.7" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.25%)</title><rect x="474.7" y="307.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="477.7" y="318.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.17%)</title><rect x="475.7" y="291.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="478.7" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.08%)</title><rect x="475.7" y="275.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="478.7" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="475.7" y="259.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="478.7" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="475.7" y="243.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="478.7" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.08%)</title><rect x="475.7" y="227.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="478.7" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.08%)</title><rect x="475.7" y="211.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="478.7" y="222.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.08%)</title><rect x="475.7" y="195.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="478.7" y="206.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.08%)</title><rect x="475.7" y="179.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="478.7" y="190.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle const&amp;, Klass*, Handle, Klass*, bool, Thread*) (1 samples, 0.08%)</title><rect x="475.7" y="163.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="478.7" y="174.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.08%)</title><rect x="475.7" y="147.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="478.7" y="158.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.08%)</title><rect x="475.7" y="131.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="478.7" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.08%)</title><rect x="476.6" y="275.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="479.6" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.08%)</title><rect x="476.6" y="259.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Record.getKey (1 samples, 0.08%)</title><rect x="477.6" y="307.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="480.6" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1 samples, 0.08%)</title><rect x="477.6" y="291.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.6" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.08%)</title><rect x="477.6" y="275.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.08%)</title><rect x="477.6" y="259.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.6" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="477.6" y="243.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="477.6" y="227.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="477.6" y="211.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="480.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.08%)</title><rect x="477.6" y="195.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.08%)</title><rect x="477.6" y="179.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.iterator (72 samples, 6.05%)</title><rect x="478.6" y="307.0" width="71.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.6" y="318.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock (38 samples, 3.19%)</title><rect x="478.6" y="291.0" width="37.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="481.6" y="302.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (38 samples, 3.19%)</title><rect x="478.6" y="275.0" width="37.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.6" y="286.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.08%)</title><rect x="478.6" y="259.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="481.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (35 samples, 2.94%)</title><rect x="479.6" y="259.0" width="34.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="482.6" y="270.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (35 samples, 2.94%)</title><rect x="479.6" y="243.0" width="34.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.6" y="254.0">ja..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="479.6" y="227.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="482.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (34 samples, 2.85%)</title><rect x="480.6" y="227.0" width="33.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="483.6" y="238.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (34 samples, 2.85%)</title><rect x="480.6" y="211.0" width="33.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.6" y="222.0">jd..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (31 samples, 2.60%)</title><rect x="483.6" y="195.0" width="30.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="486.6" y="206.0">Un..</text>
</g>
<g>
<title>Parker::park(bool, long) (30 samples, 2.52%)</title><rect x="483.6" y="179.0" width="29.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="486.6" y="190.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.08%)</title><rect x="483.6" y="163.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="486.6" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.08%)</title><rect x="483.6" y="147.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="486.6" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (29 samples, 2.43%)</title><rect x="484.6" y="163.0" width="28.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="487.6" y="174.0">__..</text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="513.3" y="179.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="516.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquire (2 samples, 0.17%)</title><rect x="514.3" y="259.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="517.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.17%)</title><rect x="514.3" y="243.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="517.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock (6 samples, 0.50%)</title><rect x="516.3" y="291.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.50%)</title><rect x="516.3" y="275.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="519.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.50%)</title><rect x="516.3" y="259.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="519.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.50%)</title><rect x="516.3" y="243.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.50%)</title><rect x="516.3" y="227.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="519.3" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.50%)</title><rect x="516.3" y="211.0" width="5.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="519.3" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.50%)</title><rect x="516.3" y="195.0" width="5.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="519.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (28 samples, 2.35%)</title><rect x="522.2" y="291.0" width="27.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="525.2" y="302.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (3 samples, 0.25%)</title><rect x="522.2" y="275.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="525.2" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (3 samples, 0.25%)</title><rect x="522.2" y="259.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.2" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.08%)</title><rect x="522.2" y="243.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="525.2" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (2 samples, 0.17%)</title><rect x="523.2" y="243.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="526.2" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.&lt;init&gt; (2 samples, 0.17%)</title><rect x="523.2" y="227.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="526.2" y="238.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="525.2" y="275.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="528.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (1 samples, 0.08%)</title><rect x="525.2" y="259.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="525.2" y="243.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="528.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (1 samples, 0.08%)</title><rect x="525.2" y="227.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (1 samples, 0.08%)</title><rect x="525.2" y="211.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="528.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findLast (1 samples, 0.08%)</title><rect x="525.2" y="195.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="528.2" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.08%)</title><rect x="526.2" y="275.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.2" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.17%)</title><rect x="527.2" y="275.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="530.2" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (2 samples, 0.17%)</title><rect x="527.2" y="259.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="530.2" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (2 samples, 0.17%)</title><rect x="527.2" y="243.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="530.2" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.17%)</title><rect x="527.2" y="227.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="530.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (13 samples, 1.09%)</title><rect x="529.2" y="275.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="532.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (13 samples, 1.09%)</title><rect x="529.2" y="259.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (13 samples, 1.09%)</title><rect x="529.2" y="243.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="532.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.08%)</title><rect x="529.2" y="227.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="532.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (1 samples, 0.08%)</title><rect x="529.2" y="211.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="532.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooHigh (1 samples, 0.08%)</title><rect x="529.2" y="195.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (12 samples, 1.01%)</title><rect x="530.2" y="227.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.2" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.17%)</title><rect x="530.2" y="211.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="533.2" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="532.1" y="211.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.1" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="532.1" y="195.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="535.1" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.08%)</title><rect x="533.1" y="211.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="536.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (8 samples, 0.67%)</title><rect x="534.1" y="211.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="537.1" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.42%)</title><rect x="537.1" y="195.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="540.1" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.08%)</title><rect x="540.1" y="179.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.08%)</title><rect x="540.1" y="163.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="543.1" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.08%)</title><rect x="541.0" y="179.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="544.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="541.0" y="163.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="544.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (2 samples, 0.17%)</title><rect x="542.0" y="275.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="545.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (2 samples, 0.17%)</title><rect x="542.0" y="259.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="545.0" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.17%)</title><rect x="542.0" y="243.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="545.0" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.08%)</title><rect x="542.0" y="227.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.0" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.08%)</title><rect x="542.0" y="211.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.0" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.08%)</title><rect x="543.0" y="227.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="546.0" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.08%)</title><rect x="543.0" y="211.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.08%)</title><rect x="543.0" y="195.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="546.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.08%)</title><rect x="543.0" y="179.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="546.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.08%)</title><rect x="543.0" y="163.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="546.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.08%)</title><rect x="543.0" y="147.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="546.0" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.08%)</title><rect x="543.0" y="131.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="546.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (6 samples, 0.50%)</title><rect x="544.0" y="275.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="547.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (6 samples, 0.50%)</title><rect x="544.0" y="259.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="547.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (6 samples, 0.50%)</title><rect x="544.0" y="243.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="547.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (6 samples, 0.50%)</title><rect x="544.0" y="227.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="547.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (6 samples, 0.50%)</title><rect x="544.0" y="211.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="547.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (6 samples, 0.50%)</title><rect x="544.0" y="195.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.17%)</title><rect x="544.0" y="179.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="547.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.17%)</title><rect x="544.0" y="163.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="547.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.17%)</title><rect x="544.0" y="147.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="547.0" y="158.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.08%)</title><rect x="545.0" y="131.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.0" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.08%)</title><rect x="545.0" y="115.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="548.0" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.08%)</title><rect x="545.0" y="99.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="548.0" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (4 samples, 0.34%)</title><rect x="546.0" y="179.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="549.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.34%)</title><rect x="546.0" y="163.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="549.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.34%)</title><rect x="546.0" y="147.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="549.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.34%)</title><rect x="546.0" y="131.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="549.0" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.08%)</title><rect x="546.0" y="115.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="549.0" y="126.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.08%)</title><rect x="547.0" y="115.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="550.0" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.17%)</title><rect x="548.0" y="115.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="551.0" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.17%)</title><rect x="548.0" y="99.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="551.0" y="110.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.17%)</title><rect x="548.0" y="83.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="551.0" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteBuffer (2 samples, 0.17%)</title><rect x="550.0" y="323.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="553.0" y="334.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.17%)</title><rect x="550.0" y="307.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="553.0" y="318.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.17%)</title><rect x="550.0" y="291.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="553.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.17%)</title><rect x="550.0" y="275.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="553.0" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.17%)</title><rect x="550.0" y="259.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="553.0" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="551.0" y="243.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="554.0" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="551.0" y="227.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="554.0" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="551.0" y="211.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="554.0" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="551.0" y="195.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="554.0" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="551.0" y="179.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="554.0" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="551.0" y="163.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="554.0" y="174.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.08%)</title><rect x="551.0" y="147.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="554.0" y="158.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.08%)</title><rect x="551.0" y="131.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="554.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.proxy (70 samples, 5.88%)</title><rect x="551.9" y="339.0" width="69.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="554.9" y="350.0">ru/mail..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (70 samples, 5.88%)</title><rect x="551.9" y="323.0" width="69.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="554.9" y="334.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (70 samples, 5.88%)</title><rect x="551.9" y="307.0" width="69.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="554.9" y="318.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (40 samples, 3.36%)</title><rect x="552.9" y="291.0" width="39.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.9" y="302.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (40 samples, 3.36%)</title><rect x="552.9" y="275.0" width="39.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="555.9" y="286.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (40 samples, 3.36%)</title><rect x="552.9" y="259.0" width="39.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="555.9" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (40 samples, 3.36%)</title><rect x="552.9" y="243.0" width="39.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="555.9" y="254.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (40 samples, 3.36%)</title><rect x="552.9" y="227.0" width="39.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="555.9" y="238.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (40 samples, 3.36%)</title><rect x="552.9" y="211.0" width="39.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="555.9" y="222.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (40 samples, 3.36%)</title><rect x="552.9" y="195.0" width="39.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="555.9" y="206.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (40 samples, 3.36%)</title><rect x="552.9" y="179.0" width="39.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="555.9" y="190.0">sun..</text>
</g>
<g>
<title>rpc_errlist (38 samples, 3.19%)</title><rect x="554.9" y="163.0" width="37.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="557.9" y="174.0">rpc..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (6 samples, 0.50%)</title><rect x="592.6" y="291.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="595.6" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2 samples, 0.17%)</title><rect x="592.6" y="275.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="595.6" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.17%)</title><rect x="592.6" y="259.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="595.6" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.17%)</title><rect x="592.6" y="243.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="595.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.34%)</title><rect x="594.6" y="275.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="597.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.25%)</title><rect x="594.6" y="259.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="597.6" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.25%)</title><rect x="594.6" y="243.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="597.6" y="254.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.25%)</title><rect x="594.6" y="227.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="597.6" y="238.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.25%)</title><rect x="594.6" y="211.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="597.6" y="222.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.25%)</title><rect x="594.6" y="195.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="597.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.08%)</title><rect x="597.5" y="259.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="600.5" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.08%)</title><rect x="597.5" y="243.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="600.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.17%)</title><rect x="598.5" y="291.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="601.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.08%)</title><rect x="599.5" y="275.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="602.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.08%)</title><rect x="599.5" y="259.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="602.5" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (21 samples, 1.76%)</title><rect x="600.5" y="291.0" width="20.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="603.5" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (18 samples, 1.51%)</title><rect x="600.5" y="275.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.5" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (18 samples, 1.51%)</title><rect x="600.5" y="259.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.5" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (18 samples, 1.51%)</title><rect x="600.5" y="243.0" width="17.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (18 samples, 1.51%)</title><rect x="600.5" y="227.0" width="17.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 1.43%)</title><rect x="600.5" y="211.0" width="16.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="603.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 1.43%)</title><rect x="600.5" y="195.0" width="16.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="603.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (17 samples, 1.43%)</title><rect x="600.5" y="179.0" width="16.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="603.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (17 samples, 1.43%)</title><rect x="600.5" y="163.0" width="16.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="603.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (17 samples, 1.43%)</title><rect x="600.5" y="147.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="603.5" y="158.0"></text>
</g>
<g>
<title>write (16 samples, 1.34%)</title><rect x="601.5" y="131.0" width="15.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="604.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (1 samples, 0.08%)</title><rect x="617.3" y="211.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="620.3" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.08%)</title><rect x="617.3" y="195.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="620.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (3 samples, 0.25%)</title><rect x="618.3" y="275.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="621.3" y="286.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3 samples, 0.25%)</title><rect x="618.3" y="259.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="621.3" y="270.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (1 samples, 0.08%)</title><rect x="619.3" y="243.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="622.3" y="254.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="619.3" y="227.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="622.3" y="238.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.08%)</title><rect x="619.3" y="211.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="622.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (1 samples, 0.08%)</title><rect x="620.3" y="243.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.3" y="254.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (568 samples, 47.69%)</title><rect x="621.3" y="419.0" width="562.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="624.3" y="430.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.17%)</title><rect x="624.3" y="403.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="627.3" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (367 samples, 30.81%)</title><rect x="626.3" y="403.0" width="363.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="629.3" y="414.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.08%)</title><rect x="626.3" y="387.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.3" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.25%)</title><rect x="627.2" y="387.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="630.2" y="398.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.17%)</title><rect x="628.2" y="371.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="631.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (362 samples, 30.39%)</title><rect x="630.2" y="387.0" width="358.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="633.2" y="398.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (361 samples, 30.31%)</title><rect x="631.2" y="371.0" width="357.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="634.2" y="382.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (361 samples, 30.31%)</title><rect x="631.2" y="355.0" width="357.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.2" y="366.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (342 samples, 28.72%)</title><rect x="632.2" y="339.0" width="338.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="635.2" y="350.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.17%)</title><rect x="644.1" y="323.0" width="2.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="647.1" y="334.0"></text>
</g>
<g>
<title>kevent (328 samples, 27.54%)</title><rect x="646.1" y="323.0" width="324.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="649.1" y="334.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (9 samples, 0.76%)</title><rect x="971.0" y="339.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="974.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="971.0" y="323.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="974.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="971.0" y="307.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="974.0" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (1 samples, 0.08%)</title><rect x="972.0" y="291.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="975.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (7 samples, 0.59%)</title><rect x="973.0" y="323.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="976.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.50%)</title><rect x="974.0" y="307.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="977.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.50%)</title><rect x="974.0" y="291.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="977.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.34%)</title><rect x="976.0" y="275.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="979.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.17%)</title><rect x="977.0" y="259.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="980.0" y="270.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="979.0" y="259.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="982.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.17%)</title><rect x="980.0" y="339.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="983.0" y="350.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.08%)</title><rect x="980.9" y="323.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="983.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.08%)</title><rect x="981.9" y="339.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="984.9" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.08%)</title><rect x="981.9" y="323.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="984.9" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.08%)</title><rect x="981.9" y="307.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="984.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (6 samples, 0.50%)</title><rect x="982.9" y="339.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="985.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (1 samples, 0.08%)</title><rect x="983.9" y="323.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="986.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.remove (4 samples, 0.34%)</title><rect x="984.9" y="323.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="987.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 0.34%)</title><rect x="984.9" y="307.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="987.9" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.34%)</title><rect x="984.9" y="291.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="987.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.08%)</title><rect x="988.9" y="387.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="991.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.08%)</title><rect x="988.9" y="371.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="991.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.08%)</title><rect x="988.9" y="355.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="991.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (193 samples, 16.20%)</title><rect x="989.9" y="403.0" width="191.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="992.9" y="414.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (193 samples, 16.20%)</title><rect x="989.9" y="387.0" width="191.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="992.9" y="398.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (118 samples, 9.91%)</title><rect x="989.9" y="371.0" width="116.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="992.9" y="382.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (102 samples, 8.56%)</title><rect x="991.8" y="355.0" width="101.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="994.8" y="366.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (101 samples, 8.48%)</title><rect x="992.8" y="339.0" width="100.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="995.8" y="350.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (96 samples, 8.06%)</title><rect x="993.8" y="323.0" width="95.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="996.8" y="334.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (4 samples, 0.34%)</title><rect x="993.8" y="307.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="996.8" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.34%)</title><rect x="993.8" y="291.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="996.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="994.8" y="275.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="997.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.08%)</title><rect x="994.8" y="259.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="997.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.08%)</title><rect x="995.8" y="275.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="998.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.08%)</title><rect x="995.8" y="259.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="998.8" y="270.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.08%)</title><rect x="995.8" y="243.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="998.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.08%)</title><rect x="996.8" y="275.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="999.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="996.8" y="259.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="999.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="996.8" y="243.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="999.8" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.08%)</title><rect x="996.8" y="227.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="999.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (92 samples, 7.72%)</title><rect x="997.8" y="307.0" width="91.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1000.8" y="318.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (92 samples, 7.72%)</title><rect x="997.8" y="291.0" width="91.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1000.8" y="302.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (84 samples, 7.05%)</title><rect x="1000.8" y="275.0" width="83.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1003.8" y="286.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (5 samples, 0.42%)</title><rect x="1002.7" y="259.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1005.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="1006.7" y="243.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1009.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.08%)</title><rect x="1006.7" y="227.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1009.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.08%)</title><rect x="1006.7" y="211.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1009.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.08%)</title><rect x="1006.7" y="195.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1009.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (36 samples, 3.02%)</title><rect x="1007.7" y="259.0" width="35.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1010.7" y="270.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (36 samples, 3.02%)</title><rect x="1007.7" y="243.0" width="35.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1010.7" y="254.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (36 samples, 3.02%)</title><rect x="1007.7" y="227.0" width="35.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1010.7" y="238.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (36 samples, 3.02%)</title><rect x="1007.7" y="211.0" width="35.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1010.7" y="222.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (36 samples, 3.02%)</title><rect x="1007.7" y="195.0" width="35.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1010.7" y="206.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (36 samples, 3.02%)</title><rect x="1007.7" y="179.0" width="35.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1010.7" y="190.0">jdk..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="1007.7" y="163.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1010.7" y="174.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.08%)</title><rect x="1008.7" y="163.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.7" y="174.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (34 samples, 2.85%)</title><rect x="1009.7" y="163.0" width="33.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1012.7" y="174.0">Un..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="1009.7" y="147.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1012.7" y="158.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.08%)</title><rect x="1010.7" y="147.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.7" y="158.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1011.7" y="147.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1014.7" y="158.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.08%)</title><rect x="1011.7" y="131.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.7" y="142.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 2.43%)</title><rect x="1012.7" y="147.0" width="28.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1015.7" y="158.0">Pa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="1012.7" y="131.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1015.7" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (25 samples, 2.10%)</title><rect x="1013.6" y="131.0" width="24.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1016.6" y="142.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.25%)</title><rect x="1038.4" y="131.0" width="3.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1041.4" y="142.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.08%)</title><rect x="1040.4" y="115.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1043.4" y="126.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.08%)</title><rect x="1041.4" y="147.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1044.4" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.08%)</title><rect x="1042.4" y="147.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1045.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (41 samples, 3.44%)</title><rect x="1043.4" y="259.0" width="40.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1046.4" y="270.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (41 samples, 3.44%)</title><rect x="1043.4" y="243.0" width="40.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.4" y="254.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (41 samples, 3.44%)</title><rect x="1043.4" y="227.0" width="40.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1046.4" y="238.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (41 samples, 3.44%)</title><rect x="1043.4" y="211.0" width="40.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1046.4" y="222.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (41 samples, 3.44%)</title><rect x="1043.4" y="195.0" width="40.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1046.4" y="206.0">jdk..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="1043.4" y="179.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1046.4" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.08%)</title><rect x="1044.4" y="179.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1047.4" y="190.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (39 samples, 3.27%)</title><rect x="1045.3" y="179.0" width="38.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1048.3" y="190.0">Uns..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="1045.3" y="163.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1048.3" y="174.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.08%)</title><rect x="1046.3" y="163.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1049.3" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="1047.3" y="163.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.3" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.08%)</title><rect x="1047.3" y="147.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1050.3" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.08%)</title><rect x="1047.3" y="131.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1050.3" y="142.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.17%)</title><rect x="1048.3" y="163.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.3" y="174.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.08%)</title><rect x="1049.3" y="147.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.3" y="158.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.08%)</title><rect x="1049.3" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1052.3" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (29 samples, 2.43%)</title><rect x="1050.3" y="163.0" width="28.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1053.3" y="174.0">__..</text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.08%)</title><rect x="1079.0" y="163.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.0" y="174.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.25%)</title><rect x="1080.0" y="163.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1083.0" y="174.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np.cold.3 (1 samples, 0.08%)</title><rect x="1083.0" y="163.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1086.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (3 samples, 0.25%)</title><rect x="1084.0" y="275.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1087.0" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.start (1 samples, 0.08%)</title><rect x="1084.0" y="259.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1087.0" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.start0 (1 samples, 0.08%)</title><rect x="1084.0" y="243.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1087.0" y="254.0"></text>
</g>
<g>
<title>JVM_StartThread (1 samples, 0.08%)</title><rect x="1084.0" y="227.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1087.0" y="238.0"></text>
</g>
<g>
<title>os::create_thread(Thread*, os::ThreadType, unsigned long) (1 samples, 0.08%)</title><rect x="1084.0" y="211.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.0" y="222.0"></text>
</g>
<g>
<title>OSThread::OSThread(int (*)(void*), void*) (1 samples, 0.08%)</title><rect x="1084.0" y="195.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.0" y="206.0"></text>
</g>
<g>
<title>OSThread::pd_initialize() (1 samples, 0.08%)</title><rect x="1084.0" y="179.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.0" y="190.0"></text>
</g>
<g>
<title>_platform_strncpy (1 samples, 0.08%)</title><rect x="1084.0" y="163.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1087.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.&lt;init&gt; (2 samples, 0.17%)</title><rect x="1085.0" y="259.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1088.0" y="270.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder$1.newThread (2 samples, 0.17%)</title><rect x="1085.0" y="243.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1088.0" y="254.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder.access$000 (2 samples, 0.17%)</title><rect x="1085.0" y="227.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1088.0" y="238.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder.format (2 samples, 0.17%)</title><rect x="1085.0" y="211.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1088.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String.format (2 samples, 0.17%)</title><rect x="1085.0" y="195.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1088.0" y="206.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1085.0" y="179.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1088.0" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1085.0" y="163.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1088.0" y="174.0"></text>
</g>
<g>
<title>java/util/Formatter.getZero (1 samples, 0.08%)</title><rect x="1085.0" y="147.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1088.0" y="158.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.getInstance (1 samples, 0.08%)</title><rect x="1085.0" y="131.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1088.0" y="142.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DecimalFormatSymbolsProviderImpl.getInstance (1 samples, 0.08%)</title><rect x="1085.0" y="115.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1088.0" y="126.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1085.0" y="99.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1088.0" y="110.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.initialize (1 samples, 0.08%)</title><rect x="1085.0" y="83.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1088.0" y="94.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.08%)</title><rect x="1086.0" y="179.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1089.0" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.08%)</title><rect x="1086.0" y="163.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1089.0" y="174.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.08%)</title><rect x="1086.0" y="147.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1089.0" y="158.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printInteger (1 samples, 0.08%)</title><rect x="1086.0" y="131.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1089.0" y="142.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.08%)</title><rect x="1086.0" y="115.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1089.0" y="126.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (1 samples, 0.08%)</title><rect x="1086.0" y="99.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1089.0" y="110.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="1086.0" y="83.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1089.0" y="94.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="1086.0" y="67.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1089.0" y="78.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="1086.0" y="51.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1089.0" y="62.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="1086.0" y="35.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1089.0" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 0.17%)</title><rect x="1087.0" y="275.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1090.0" y="286.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.34%)</title><rect x="1088.9" y="323.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1091.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.34%)</title><rect x="1088.9" y="307.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1091.9" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="1088.9" y="291.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1091.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.17%)</title><rect x="1090.9" y="291.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1093.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.17%)</title><rect x="1090.9" y="275.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1093.9" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.17%)</title><rect x="1090.9" y="259.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1093.9" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9 samples, 0.76%)</title><rect x="1092.9" y="355.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1095.9" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.50%)</title><rect x="1093.9" y="339.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1096.9" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.42%)</title><rect x="1094.9" y="323.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1097.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.17%)</title><rect x="1099.8" y="339.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1102.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.34%)</title><rect x="1101.8" y="355.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1104.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.34%)</title><rect x="1101.8" y="339.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1104.8" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.34%)</title><rect x="1101.8" y="323.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1104.8" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.08%)</title><rect x="1104.8" y="307.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1107.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.08%)</title><rect x="1105.8" y="355.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1108.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (75 samples, 6.30%)</title><rect x="1106.8" y="371.0" width="74.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1109.8" y="382.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (75 samples, 6.30%)</title><rect x="1106.8" y="355.0" width="74.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1109.8" y="366.0">one/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="1106.8" y="339.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1109.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (74 samples, 6.21%)</title><rect x="1107.8" y="339.0" width="73.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1110.8" y="350.0">sun/nio/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.17%)</title><rect x="1107.8" y="323.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1110.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="1107.8" y="307.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1110.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="1107.8" y="291.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1110.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="1107.8" y="275.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1110.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (72 samples, 6.05%)</title><rect x="1109.7" y="323.0" width="71.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1112.7" y="334.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (71 samples, 5.96%)</title><rect x="1110.7" y="307.0" width="70.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1113.7" y="318.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (62 samples, 5.21%)</title><rect x="1110.7" y="291.0" width="61.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1113.7" y="302.0">sun/ni..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.34%)</title><rect x="1110.7" y="275.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1113.7" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.34%)</title><rect x="1110.7" y="259.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1113.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.34%)</title><rect x="1110.7" y="243.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1113.7" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.08%)</title><rect x="1113.7" y="227.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1116.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (58 samples, 4.87%)</title><rect x="1114.7" y="275.0" width="57.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1117.7" y="286.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (58 samples, 4.87%)</title><rect x="1114.7" y="259.0" width="57.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.7" y="270.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.25%)</title><rect x="1119.7" y="243.0" width="2.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1122.7" y="254.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.08%)</title><rect x="1121.6" y="227.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1124.6" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (50 samples, 4.20%)</title><rect x="1122.6" y="243.0" width="49.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1125.6" y="254.0">rpc_e..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.76%)</title><rect x="1172.2" y="291.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1175.2" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="1172.2" y="275.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1175.2" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="1172.2" y="259.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1175.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (8 samples, 0.67%)</title><rect x="1173.2" y="275.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1176.2" y="286.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="1179.1" y="259.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1182.1" y="270.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="1180.1" y="259.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1183.1" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.25%)</title><rect x="1181.1" y="403.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="414.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.25%)</title><rect x="1181.1" y="387.0" width="3.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1184.1" y="398.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (3 samples, 0.25%)</title><rect x="1181.1" y="371.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1184.1" y="382.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.17%)</title><rect x="1182.1" y="355.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1185.1" y="366.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.50%)</title><rect x="1184.1" y="419.0" width="5.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.50%)</title><rect x="1184.1" y="403.0" width="5.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.50%)</title><rect x="1184.1" y="387.0" width="5.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.50%)</title><rect x="1184.1" y="371.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.08%)</title><rect x="1184.1" y="355.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.08%)</title><rect x="1184.1" y="339.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="350.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.08%)</title><rect x="1184.1" y="323.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="334.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.08%)</title><rect x="1184.1" y="307.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.1" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.08%)</title><rect x="1184.1" y="291.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="302.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="1184.1" y="275.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="286.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.42%)</title><rect x="1185.0" y="355.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.0" y="366.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 0.42%)</title><rect x="1185.0" y="339.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.0" y="350.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (4 samples, 0.34%)</title><rect x="1185.0" y="323.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.0" y="334.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (4 samples, 0.34%)</title><rect x="1185.0" y="307.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.0" y="318.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 0.34%)</title><rect x="1185.0" y="291.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.0" y="302.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (4 samples, 0.34%)</title><rect x="1185.0" y="275.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.0" y="286.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.25%)</title><rect x="1185.0" y="259.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.0" y="270.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.08%)</title><rect x="1185.0" y="243.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.0" y="254.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.08%)</title><rect x="1185.0" y="227.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.0" y="238.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1185.0" y="211.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.0" y="222.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1185.0" y="195.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.0" y="206.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.08%)</title><rect x="1185.0" y="179.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="190.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (2 samples, 0.17%)</title><rect x="1186.0" y="243.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.08%)</title><rect x="1186.0" y="227.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.0" y="238.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1186.0" y="211.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="222.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.08%)</title><rect x="1186.0" y="195.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="206.0"></text>
</g>
<g>
<title>ciEnv::compiler_data() (1 samples, 0.08%)</title><rect x="1186.0" y="179.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="190.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.08%)</title><rect x="1187.0" y="227.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="238.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1187.0" y="211.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.0" y="222.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.08%)</title><rect x="1187.0" y="195.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.0" y="206.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.08%)</title><rect x="1188.0" y="259.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.0" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.08%)</title><rect x="1188.0" y="243.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.0" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.08%)</title><rect x="1188.0" y="227.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.0" y="238.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1189.0" y="323.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1192.0" y="334.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.08%)</title><rect x="1189.0" y="307.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1192.0" y="318.0"></text>
</g>
</g>
</svg>
