<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="373"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="373"> </text>
<g id="frames">
<g>
<title>all (15,027 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="350.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (10,317 samples, 68.66%)</title><rect x="10.0" y="323.0" width="810.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (10,317 samples, 68.66%)</title><rect x="10.0" y="307.0" width="810.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (10,317 samples, 68.66%)</title><rect x="10.0" y="291.0" width="810.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (98 samples, 0.65%)</title><rect x="10.0" y="275.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (98 samples, 0.65%)</title><rect x="10.0" y="259.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (96 samples, 0.64%)</title><rect x="10.0" y="243.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (96 samples, 0.64%)</title><rect x="10.0" y="227.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (96 samples, 0.64%)</title><rect x="10.0" y="211.0" width="7.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$115/1539902124.run (10,219 samples, 68.00%)</title><rect x="17.7" y="275.0" width="802.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.7" y="286.0">ru/mail/polis/service/suhova/MoribundService$$Lambda$115/1539902124.run</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (10,219 samples, 68.00%)</title><rect x="17.7" y="259.0" width="802.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.7" y="270.0">ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (519 samples, 3.45%)</title><rect x="17.7" y="243.0" width="40.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.7" y="254.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (519 samples, 3.45%)</title><rect x="17.7" y="227.0" width="40.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="238.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (287 samples, 1.91%)</title><rect x="17.7" y="211.0" width="22.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.7" y="222.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (287 samples, 1.91%)</title><rect x="17.7" y="195.0" width="22.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.7" y="206.0">o..</text>
</g>
<g>
<title>byte[] (287 samples, 1.91%)</title><rect x="17.7" y="179.0" width="22.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="20.7" y="190.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.write (232 samples, 1.54%)</title><rect x="40.2" y="211.0" width="18.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.2" y="222.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (93 samples, 0.62%)</title><rect x="40.2" y="195.0" width="7.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="43.2" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (139 samples, 0.93%)</title><rect x="47.5" y="195.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.5" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (139 samples, 0.93%)</title><rect x="47.5" y="179.0" width="11.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.5" y="190.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (139 samples, 0.93%)</title><rect x="47.5" y="163.0" width="11.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (139 samples, 0.93%)</title><rect x="47.5" y="147.0" width="11.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.5" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (139 samples, 0.93%)</title><rect x="47.5" y="131.0" width="11.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="50.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (434 samples, 2.89%)</title><rect x="58.5" y="243.0" width="34.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.5" y="254.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (434 samples, 2.89%)</title><rect x="58.5" y="227.0" width="34.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="61.5" y="238.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (434 samples, 2.89%)</title><rect x="58.5" y="211.0" width="34.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.5" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1254344205.invoke (434 samples, 2.89%)</title><rect x="58.5" y="195.0" width="34.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="61.5" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (434 samples, 2.89%)</title><rect x="58.5" y="179.0" width="34.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.5" y="190.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (434 samples, 2.89%)</title><rect x="58.5" y="163.0" width="34.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.5" y="174.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (434 samples, 2.89%)</title><rect x="58.5" y="147.0" width="34.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.5" y="158.0">jd..</text>
</g>
<g>
<title>byte[] (434 samples, 2.89%)</title><rect x="58.5" y="131.0" width="34.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="61.5" y="142.0">by..</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.get (2,071 samples, 13.78%)</title><rect x="92.5" y="243.0" width="162.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.5" y="254.0">ru/mail/polis/service..</text>
</g>
<g>
<title>one.nio.http.Response (42 samples, 0.28%)</title><rect x="92.5" y="227.0" width="3.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="95.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (202 samples, 1.34%)</title><rect x="95.8" y="227.0" width="15.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.8" y="238.0"></text>
</g>
<g>
<title>byte[] (89 samples, 0.59%)</title><rect x="95.8" y="211.0" width="7.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="98.8" y="222.0"></text>
</g>
<g>
<title>java.lang.String[] (59 samples, 0.39%)</title><rect x="102.8" y="211.0" width="4.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="105.8" y="222.0"></text>
</g>
<g>
<title>java.lang.String (54 samples, 0.36%)</title><rect x="107.4" y="211.0" width="4.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="110.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,626 samples, 10.82%)</title><rect x="111.7" y="227.0" width="127.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="114.7" y="238.0">ru/mail/polis/da..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (281 samples, 1.87%)</title><rect x="111.7" y="211.0" width="22.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="114.7" y="222.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (281 samples, 1.87%)</title><rect x="111.7" y="195.0" width="22.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.7" y="206.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (281 samples, 1.87%)</title><rect x="111.7" y="179.0" width="22.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.7" y="190.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (281 samples, 1.87%)</title><rect x="111.7" y="163.0" width="22.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="114.7" y="174.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (281 samples, 1.87%)</title><rect x="111.7" y="147.0" width="22.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="114.7" y="158.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (91 samples, 0.61%)</title><rect x="111.7" y="131.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.7" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (91 samples, 0.61%)</title><rect x="111.7" y="115.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.7" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (91 samples, 0.61%)</title><rect x="111.7" y="99.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.7" y="110.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (45 samples, 0.30%)</title><rect x="111.7" y="83.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.7" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$123/674171164.apply (45 samples, 0.30%)</title><rect x="111.7" y="67.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.7" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (45 samples, 0.30%)</title><rect x="111.7" y="51.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="114.7" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Cell (45 samples, 0.30%)</title><rect x="111.7" y="35.0" width="3.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="114.7" y="46.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (46 samples, 0.31%)</title><rect x="115.2" y="83.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="118.2" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (46 samples, 0.31%)</title><rect x="115.2" y="67.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="118.2" y="78.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (46 samples, 0.31%)</title><rect x="115.2" y="51.0" width="3.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="118.2" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$126/1686312256.apply (190 samples, 1.26%)</title><rect x="118.8" y="131.0" width="15.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (190 samples, 1.26%)</title><rect x="118.8" y="115.0" width="15.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="121.8" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (190 samples, 1.26%)</title><rect x="118.8" y="99.0" width="15.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="121.8" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (190 samples, 1.26%)</title><rect x="118.8" y="83.0" width="15.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="121.8" y="94.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (225 samples, 1.50%)</title><rect x="133.8" y="211.0" width="17.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.8" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (225 samples, 1.50%)</title><rect x="133.8" y="195.0" width="17.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="136.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$128/1834823713.apply (225 samples, 1.50%)</title><rect x="133.8" y="179.0" width="17.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="136.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.lambda$iterator$4 (225 samples, 1.50%)</title><rect x="133.8" y="163.0" width="17.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Record.of (39 samples, 0.26%)</title><rect x="133.8" y="147.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="136.8" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (39 samples, 0.26%)</title><rect x="133.8" y="131.0" width="3.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="136.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (84 samples, 0.56%)</title><rect x="136.8" y="147.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.8" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (84 samples, 0.56%)</title><rect x="136.8" y="131.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="139.8" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (84 samples, 0.56%)</title><rect x="136.8" y="115.0" width="6.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="139.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.getData (102 samples, 0.68%)</title><rect x="143.4" y="147.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="146.4" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (102 samples, 0.68%)</title><rect x="143.4" y="131.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.4" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (102 samples, 0.68%)</title><rect x="143.4" y="115.0" width="8.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="146.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Record.getKey (85 samples, 0.57%)</title><rect x="151.4" y="211.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.4" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (85 samples, 0.57%)</title><rect x="151.4" y="195.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.4" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (85 samples, 0.57%)</title><rect x="151.4" y="179.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="154.4" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (85 samples, 0.57%)</title><rect x="151.4" y="163.0" width="6.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="154.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.iterator (1,035 samples, 6.89%)</title><rect x="158.1" y="211.0" width="81.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.1" y="222.0">ru/mail/p..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (57 samples, 0.38%)</title><rect x="158.1" y="195.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="161.1" y="206.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (57 samples, 0.38%)</title><rect x="158.1" y="179.0" width="4.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="161.1" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (45 samples, 0.30%)</title><rect x="162.6" y="195.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.6" y="206.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (45 samples, 0.30%)</title><rect x="162.6" y="179.0" width="3.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="165.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock (11 samples, 0.07%)</title><rect x="166.1" y="195.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (11 samples, 0.07%)</title><rect x="166.1" y="179.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="169.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (11 samples, 0.07%)</title><rect x="166.1" y="163.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="169.1" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (11 samples, 0.07%)</title><rect x="166.1" y="147.0" width="0.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="169.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (922 samples, 6.14%)</title><rect x="167.0" y="195.0" width="72.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.0" y="206.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (264 samples, 1.76%)</title><rect x="167.0" y="179.0" width="20.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="170.0" y="190.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (46 samples, 0.31%)</title><rect x="167.0" y="163.0" width="3.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="170.0" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (218 samples, 1.45%)</title><rect x="170.6" y="163.0" width="17.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.6" y="174.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (38 samples, 0.25%)</title><rect x="170.6" y="147.0" width="3.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="173.6" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (51 samples, 0.34%)</title><rect x="173.6" y="147.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.6" y="158.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (51 samples, 0.34%)</title><rect x="173.6" y="131.0" width="4.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="176.6" y="142.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (69 samples, 0.46%)</title><rect x="177.6" y="147.0" width="5.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="180.6" y="158.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (60 samples, 0.40%)</title><rect x="183.0" y="147.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="186.0" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (60 samples, 0.40%)</title><rect x="183.0" y="131.0" width="4.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="186.0" y="142.0"></text>
</g>
<g>
<title>java.util.ArrayList (43 samples, 0.29%)</title><rect x="187.7" y="179.0" width="3.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="190.7" y="190.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (150 samples, 1.00%)</title><rect x="191.1" y="179.0" width="11.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="194.1" y="190.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (83 samples, 0.55%)</title><rect x="191.1" y="163.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.1" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (83 samples, 0.55%)</title><rect x="191.1" y="147.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="194.1" y="158.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (83 samples, 0.55%)</title><rect x="191.1" y="131.0" width="6.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="194.1" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (67 samples, 0.45%)</title><rect x="197.6" y="163.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.6" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (67 samples, 0.45%)</title><rect x="197.6" y="147.0" width="5.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="200.6" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (63 samples, 0.42%)</title><rect x="202.9" y="179.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (63 samples, 0.42%)</title><rect x="202.9" y="163.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$124/946118232.get$Lambda (34 samples, 0.23%)</title><rect x="202.9" y="147.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.9" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.TurboDAO$$Lambda$124 (34 samples, 0.23%)</title><rect x="202.9" y="131.0" width="2.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="205.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$125/903372708.get$Lambda (29 samples, 0.19%)</title><rect x="205.5" y="147.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.5" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.TurboDAO$$Lambda$125 (29 samples, 0.19%)</title><rect x="205.5" y="131.0" width="2.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="208.5" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (39 samples, 0.26%)</title><rect x="207.8" y="179.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.8" y="190.0"></text>
</g>
<g>
<title>java.lang.Object[] (39 samples, 0.26%)</title><rect x="207.8" y="163.0" width="3.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="210.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (120 samples, 0.80%)</title><rect x="210.9" y="179.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.9" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (37 samples, 0.25%)</title><rect x="210.9" y="163.0" width="2.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="213.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (83 samples, 0.55%)</title><rect x="213.8" y="163.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="216.8" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (83 samples, 0.55%)</title><rect x="213.8" y="147.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.8" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (83 samples, 0.55%)</title><rect x="213.8" y="131.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.8" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (83 samples, 0.55%)</title><rect x="213.8" y="115.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.8" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (36 samples, 0.24%)</title><rect x="213.8" y="99.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$123/674171164.apply (36 samples, 0.24%)</title><rect x="213.8" y="83.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (36 samples, 0.24%)</title><rect x="213.8" y="67.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.8" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Cell (36 samples, 0.24%)</title><rect x="213.8" y="51.0" width="2.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="216.8" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (47 samples, 0.31%)</title><rect x="216.6" y="99.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.6" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (47 samples, 0.31%)</title><rect x="216.6" y="83.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.6" y="94.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (47 samples, 0.31%)</title><rect x="216.6" y="67.0" width="3.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="219.6" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (243 samples, 1.62%)</title><rect x="220.3" y="179.0" width="19.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.3" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (49 samples, 0.33%)</title><rect x="220.3" y="163.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.3" y="174.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (49 samples, 0.33%)</title><rect x="220.3" y="147.0" width="3.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="223.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (67 samples, 0.45%)</title><rect x="224.1" y="163.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.1" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (67 samples, 0.45%)</title><rect x="224.1" y="147.0" width="5.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="227.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (26 samples, 0.17%)</title><rect x="229.4" y="163.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.4" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (26 samples, 0.17%)</title><rect x="229.4" y="147.0" width="2.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="232.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (101 samples, 0.67%)</title><rect x="231.4" y="163.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (101 samples, 0.67%)</title><rect x="231.4" y="147.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (101 samples, 0.67%)</title><rect x="231.4" y="131.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.4" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (101 samples, 0.67%)</title><rect x="231.4" y="115.0" width="8.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="234.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteArray (67 samples, 0.45%)</title><rect x="239.4" y="227.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.4" y="238.0"></text>
</g>
<g>
<title>byte[] (67 samples, 0.45%)</title><rect x="239.4" y="211.0" width="5.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="242.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteBuffer (134 samples, 0.89%)</title><rect x="244.6" y="227.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.6" y="238.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (47 samples, 0.31%)</title><rect x="244.6" y="211.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.6" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (47 samples, 0.31%)</title><rect x="244.6" y="195.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.6" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (47 samples, 0.31%)</title><rect x="244.6" y="179.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.6" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (47 samples, 0.31%)</title><rect x="244.6" y="163.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.6" y="174.0"></text>
</g>
<g>
<title>byte[] (47 samples, 0.31%)</title><rect x="244.6" y="147.0" width="3.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="247.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (87 samples, 0.58%)</title><rect x="248.3" y="211.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (87 samples, 0.58%)</title><rect x="248.3" y="195.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.3" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (87 samples, 0.58%)</title><rect x="248.3" y="179.0" width="6.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="251.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.proxy (7,195 samples, 47.88%)</title><rect x="255.2" y="243.0" width="564.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.2" y="254.0">ru/mail/polis/service/suhova/MoribundService.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (7,195 samples, 47.88%)</title><rect x="255.2" y="227.0" width="564.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.2" y="238.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (7,195 samples, 47.88%)</title><rect x="255.2" y="211.0" width="564.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.2" y="222.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (10 samples, 0.07%)</title><rect x="255.2" y="195.0" width="0.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="258.2" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (6,809 samples, 45.31%)</title><rect x="255.9" y="195.0" width="534.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.9" y="206.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (2,864 samples, 19.06%)</title><rect x="255.9" y="179.0" width="224.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="258.9" y="190.0">byte[]</text>
</g>
<g>
<title>byte[] (3,742 samples, 24.90%)</title><rect x="480.8" y="179.0" width="293.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="483.8" y="190.0">byte[]</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (203 samples, 1.35%)</title><rect x="774.7" y="179.0" width="15.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="777.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (203 samples, 1.35%)</title><rect x="774.7" y="163.0" width="15.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="777.7" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (203 samples, 1.35%)</title><rect x="774.7" y="147.0" width="15.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="777.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (264 samples, 1.76%)</title><rect x="790.6" y="195.0" width="20.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="793.6" y="206.0"></text>
</g>
<g>
<title>byte[] (29 samples, 0.19%)</title><rect x="790.6" y="179.0" width="2.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="793.6" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (16 samples, 0.11%)</title><rect x="792.9" y="179.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.9" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (16 samples, 0.11%)</title><rect x="792.9" y="163.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.9" y="174.0"></text>
</g>
<g>
<title>java.lang.String (7 samples, 0.05%)</title><rect x="792.9" y="147.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="795.9" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.06%)</title><rect x="793.4" y="147.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.4" y="158.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.06%)</title><rect x="793.4" y="131.0" width="0.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="796.4" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (176 samples, 1.17%)</title><rect x="794.4" y="179.0" width="13.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.4" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (176 samples, 1.17%)</title><rect x="794.4" y="163.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.4" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (176 samples, 1.17%)</title><rect x="794.4" y="147.0" width="13.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="797.4" y="158.0"></text>
</g>
<g>
<title>char[] (94 samples, 0.63%)</title><rect x="794.4" y="131.0" width="7.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="797.4" y="142.0"></text>
</g>
<g>
<title>java.lang.String (31 samples, 0.21%)</title><rect x="801.8" y="131.0" width="2.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="804.8" y="142.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (51 samples, 0.34%)</title><rect x="804.2" y="131.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="807.2" y="142.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (51 samples, 0.34%)</title><rect x="804.2" y="115.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.2" y="126.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (51 samples, 0.34%)</title><rect x="804.2" y="99.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="807.2" y="110.0"></text>
</g>
<g>
<title>byte[] (51 samples, 0.34%)</title><rect x="804.2" y="83.0" width="4.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="807.2" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (13 samples, 0.09%)</title><rect x="808.2" y="179.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="811.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (13 samples, 0.09%)</title><rect x="808.2" y="163.0" width="1.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="811.2" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (27 samples, 0.18%)</title><rect x="809.2" y="179.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="812.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (27 samples, 0.18%)</title><rect x="809.2" y="163.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.2" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (27 samples, 0.18%)</title><rect x="809.2" y="147.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="812.2" y="158.0"></text>
</g>
<g>
<title>java.lang.String (13 samples, 0.09%)</title><rect x="809.2" y="131.0" width="1.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="812.2" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (14 samples, 0.09%)</title><rect x="810.3" y="131.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="813.3" y="142.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.09%)</title><rect x="810.3" y="115.0" width="1.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="813.3" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (26 samples, 0.17%)</title><rect x="811.4" y="195.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="814.4" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (26 samples, 0.17%)</title><rect x="811.4" y="179.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="814.4" y="190.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.17%)</title><rect x="811.4" y="163.0" width="2.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="814.4" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (32 samples, 0.21%)</title><rect x="813.4" y="195.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="816.4" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (32 samples, 0.21%)</title><rect x="813.4" y="179.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.4" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (32 samples, 0.21%)</title><rect x="813.4" y="163.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="816.4" y="174.0"></text>
</g>
<g>
<title>java.lang.String (6 samples, 0.04%)</title><rect x="813.4" y="147.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="816.4" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (26 samples, 0.17%)</title><rect x="813.9" y="147.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="816.9" y="158.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.17%)</title><rect x="813.9" y="131.0" width="2.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="816.9" y="142.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (30 samples, 0.20%)</title><rect x="815.9" y="195.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="818.9" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (15 samples, 0.10%)</title><rect x="815.9" y="179.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="818.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.09%)</title><rect x="815.9" y="163.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="818.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.09%)</title><rect x="815.9" y="147.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.9" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (14 samples, 0.09%)</title><rect x="815.9" y="131.0" width="1.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="818.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (15 samples, 0.10%)</title><rect x="817.1" y="179.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="820.1" y="190.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (12 samples, 0.08%)</title><rect x="817.1" y="163.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="820.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (12 samples, 0.08%)</title><rect x="817.1" y="147.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="820.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (12 samples, 0.08%)</title><rect x="817.1" y="131.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="820.1" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (12 samples, 0.08%)</title><rect x="817.1" y="115.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="820.1" y="126.0"></text>
</g>
<g>
<title>java.nio.channels.Channels$1 (12 samples, 0.08%)</title><rect x="817.1" y="99.0" width="0.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="820.1" y="110.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (24 samples, 0.16%)</title><rect x="818.3" y="195.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="821.3" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (24 samples, 0.16%)</title><rect x="818.3" y="179.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="821.3" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (24 samples, 0.16%)</title><rect x="818.3" y="163.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="821.3" y="174.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (24 samples, 0.16%)</title><rect x="818.3" y="147.0" width="1.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="821.3" y="158.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (4,710 samples, 31.34%)</title><rect x="820.1" y="323.0" width="369.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="823.1" y="334.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (712 samples, 4.74%)</title><rect x="820.1" y="307.0" width="56.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="823.1" y="318.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (329 samples, 2.19%)</title><rect x="820.1" y="291.0" width="25.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="823.1" y="302.0">o..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (172 samples, 1.14%)</title><rect x="820.1" y="275.0" width="13.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="823.1" y="286.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (157 samples, 1.04%)</title><rect x="833.7" y="275.0" width="12.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="836.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (383 samples, 2.55%)</title><rect x="846.0" y="291.0" width="30.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="849.0" y="302.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (383 samples, 2.55%)</title><rect x="846.0" y="275.0" width="30.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="849.0" y="286.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (383 samples, 2.55%)</title><rect x="846.0" y="259.0" width="30.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="849.0" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (383 samples, 2.55%)</title><rect x="846.0" y="243.0" width="30.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="849.0" y="254.0">su..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (154 samples, 1.02%)</title><rect x="846.0" y="227.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="849.0" y="238.0"></text>
</g>
<g>
<title>java.lang.Integer (154 samples, 1.02%)</title><rect x="846.0" y="211.0" width="12.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="849.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (229 samples, 1.52%)</title><rect x="858.1" y="227.0" width="18.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="861.1" y="238.0"></text>
</g>
<g>
<title>java/util/HashSet.add (229 samples, 1.52%)</title><rect x="858.1" y="211.0" width="18.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="861.1" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.put (229 samples, 1.52%)</title><rect x="858.1" y="195.0" width="18.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="861.1" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (229 samples, 1.52%)</title><rect x="858.1" y="179.0" width="18.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="861.1" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (229 samples, 1.52%)</title><rect x="858.1" y="163.0" width="18.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="861.1" y="174.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (229 samples, 1.52%)</title><rect x="858.1" y="147.0" width="18.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="861.1" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (3,998 samples, 26.61%)</title><rect x="876.1" y="307.0" width="313.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="879.1" y="318.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,998 samples, 26.61%)</title><rect x="876.1" y="291.0" width="313.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="879.1" y="302.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,629 samples, 24.15%)</title><rect x="876.1" y="275.0" width="284.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="879.1" y="286.0">one/nio/http/HttpSession.processHttpBu..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (974 samples, 6.48%)</title><rect x="876.1" y="259.0" width="76.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="879.1" y="270.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (974 samples, 6.48%)</title><rect x="876.1" y="243.0" width="76.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="879.1" y="254.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (588 samples, 3.91%)</title><rect x="876.1" y="227.0" width="46.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="879.1" y="238.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (342 samples, 2.28%)</title><rect x="876.1" y="211.0" width="26.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="879.1" y="222.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (342 samples, 2.28%)</title><rect x="876.1" y="195.0" width="26.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="879.1" y="206.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (342 samples, 2.28%)</title><rect x="876.1" y="179.0" width="26.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="879.1" y="190.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (342 samples, 2.28%)</title><rect x="876.1" y="163.0" width="26.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="879.1" y="174.0">j..</text>
</g>
<g>
<title>java.lang.String (178 samples, 1.18%)</title><rect x="876.1" y="147.0" width="13.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="879.1" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (164 samples, 1.09%)</title><rect x="890.0" y="147.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="893.0" y="158.0"></text>
</g>
<g>
<title>byte[] (164 samples, 1.09%)</title><rect x="890.0" y="131.0" width="12.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="893.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (246 samples, 1.64%)</title><rect x="902.9" y="211.0" width="19.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="905.9" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (235 samples, 1.56%)</title><rect x="902.9" y="195.0" width="18.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="905.9" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (235 samples, 1.56%)</title><rect x="902.9" y="179.0" width="18.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="905.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$115/1539902124.get$Lambda (235 samples, 1.56%)</title><rect x="902.9" y="163.0" width="18.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="905.9" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.service.suhova.MoribundService$$Lambda$115 (235 samples, 1.56%)</title><rect x="902.9" y="147.0" width="18.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="905.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 0.07%)</title><rect x="921.4" y="195.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="924.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (11 samples, 0.07%)</title><rect x="921.4" y="179.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="924.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.07%)</title><rect x="921.4" y="163.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="924.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (11 samples, 0.07%)</title><rect x="921.4" y="147.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="924.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (11 samples, 0.07%)</title><rect x="921.4" y="131.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="924.4" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (11 samples, 0.07%)</title><rect x="921.4" y="115.0" width="0.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="924.4" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (386 samples, 2.57%)</title><rect x="922.2" y="227.0" width="30.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="925.2" y="238.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (386 samples, 2.57%)</title><rect x="922.2" y="211.0" width="30.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="925.2" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (386 samples, 2.57%)</title><rect x="922.2" y="195.0" width="30.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="925.2" y="206.0">ja..</text>
</g>
<g>
<title>java.lang.String (161 samples, 1.07%)</title><rect x="922.2" y="179.0" width="12.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="925.2" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (225 samples, 1.50%)</title><rect x="934.9" y="179.0" width="17.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="937.9" y="190.0"></text>
</g>
<g>
<title>byte[] (225 samples, 1.50%)</title><rect x="934.9" y="163.0" width="17.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="937.9" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1,770 samples, 11.78%)</title><rect x="952.5" y="259.0" width="139.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="955.5" y="270.0">one/nio/http/Http..</text>
</g>
<g>
<title>one.nio.http.Request (269 samples, 1.79%)</title><rect x="952.5" y="243.0" width="21.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="955.5" y="254.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (562 samples, 3.74%)</title><rect x="973.7" y="243.0" width="44.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="976.7" y="254.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (562 samples, 3.74%)</title><rect x="973.7" y="227.0" width="44.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="976.7" y="238.0">java..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (939 samples, 6.25%)</title><rect x="1017.8" y="243.0" width="73.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1020.8" y="254.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (939 samples, 6.25%)</title><rect x="1017.8" y="227.0" width="73.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1020.8" y="238.0">one/nio/..</text>
</g>
<g>
<title>char[] (460 samples, 3.06%)</title><rect x="1017.8" y="211.0" width="36.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1020.8" y="222.0">cha..</text>
</g>
<g>
<title>java.lang.String (169 samples, 1.12%)</title><rect x="1053.9" y="211.0" width="13.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1056.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (310 samples, 2.06%)</title><rect x="1067.2" y="211.0" width="24.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1070.2" y="222.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (310 samples, 2.06%)</title><rect x="1067.2" y="195.0" width="24.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1070.2" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (310 samples, 2.06%)</title><rect x="1067.2" y="179.0" width="24.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1070.2" y="190.0">j..</text>
</g>
<g>
<title>byte[] (310 samples, 2.06%)</title><rect x="1067.2" y="163.0" width="24.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1070.2" y="174.0">b..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (885 samples, 5.89%)</title><rect x="1091.5" y="259.0" width="69.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1094.5" y="270.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (885 samples, 5.89%)</title><rect x="1091.5" y="243.0" width="69.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1094.5" y="254.0">one/nio..</text>
</g>
<g>
<title>char[] (417 samples, 2.78%)</title><rect x="1091.5" y="227.0" width="32.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1094.5" y="238.0">ch..</text>
</g>
<g>
<title>java.lang.String (169 samples, 1.12%)</title><rect x="1124.3" y="227.0" width="13.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1127.3" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (299 samples, 1.99%)</title><rect x="1137.5" y="227.0" width="23.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1140.5" y="238.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (299 samples, 1.99%)</title><rect x="1137.5" y="211.0" width="23.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1140.5" y="222.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (299 samples, 1.99%)</title><rect x="1137.5" y="195.0" width="23.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1140.5" y="206.0">j..</text>
</g>
<g>
<title>byte[] (299 samples, 1.99%)</title><rect x="1137.5" y="179.0" width="23.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1140.5" y="190.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.read (369 samples, 2.46%)</title><rect x="1161.0" y="275.0" width="29.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1164.0" y="286.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (369 samples, 2.46%)</title><rect x="1161.0" y="259.0" width="29.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1164.0" y="270.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (369 samples, 2.46%)</title><rect x="1161.0" y="243.0" width="29.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1164.0" y="254.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (369 samples, 2.46%)</title><rect x="1161.0" y="227.0" width="29.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1164.0" y="238.0">ja..</text>
</g>
</g>
</svg>
