<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="437"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="437"> </text>
<g id="frames">
<g>
<title>all (852 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="13.0" y="414.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (249 samples, 29.23%)</title><rect x="10.0" y="387.0" width="344.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (249 samples, 29.23%)</title><rect x="10.0" y="371.0" width="344.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="382.0">java/util/concurrent/ThreadPoolExecutor$Worker...</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (249 samples, 29.23%)</title><rect x="10.0" y="355.0" width="344.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="366.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (187 samples, 21.95%)</title><rect x="12.8" y="339.0" width="259.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.8" y="350.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (187 samples, 21.95%)</title><rect x="12.8" y="323.0" width="259.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.8" y="334.0">java/util/concurrent/ArrayBlocking..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (166 samples, 19.48%)</title><rect x="12.8" y="307.0" width="229.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.8" y="318.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (22 samples, 2.58%)</title><rect x="12.8" y="291.0" width="30.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.8" y="302.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 2.58%)</title><rect x="12.8" y="275.0" width="30.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.8" y="286.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 2.35%)</title><rect x="15.5" y="259.0" width="27.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.5" y="270.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 2.35%)</title><rect x="15.5" y="243.0" width="27.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.5" y="254.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 2.35%)</title><rect x="15.5" y="227.0" width="27.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.5" y="238.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (15 samples, 1.76%)</title><rect x="21.1" y="211.0" width="20.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="24.1" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.12%)</title><rect x="21.1" y="195.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.1" y="206.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="21.1" y="179.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="24.1" y="190.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.12%)</title><rect x="21.1" y="163.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="24.1" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.12%)</title><rect x="22.5" y="195.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="25.5" y="206.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.12%)</title><rect x="22.5" y="179.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="25.5" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 1.29%)</title><rect x="23.8" y="195.0" width="15.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="26.8" y="206.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.23%)</title><rect x="39.1" y="195.0" width="2.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="42.1" y="206.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.12%)</title><rect x="41.9" y="211.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="44.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (144 samples, 16.90%)</title><rect x="43.2" y="291.0" width="199.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.2" y="302.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (144 samples, 16.90%)</title><rect x="43.2" y="275.0" width="199.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.2" y="286.0">jdk/internal/misc/Unsafe.p..</text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.12%)</title><rect x="48.8" y="259.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="51.8" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (139 samples, 16.31%)</title><rect x="50.2" y="259.0" width="192.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="53.2" y="270.0">Unsafe_Park(JNIEnv_*, _jo..</text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.12%)</title><rect x="51.5" y="243.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="54.5" y="254.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.23%)</title><rect x="52.9" y="243.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="55.9" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.23%)</title><rect x="52.9" y="227.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="55.9" y="238.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.12%)</title><rect x="54.3" y="211.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="57.3" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.12%)</title><rect x="54.3" y="195.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="57.3" y="206.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.12%)</title><rect x="54.3" y="179.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="57.3" y="190.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.12%)</title><rect x="55.7" y="243.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="58.7" y="254.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.12%)</title><rect x="55.7" y="227.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="58.7" y="238.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.12%)</title><rect x="55.7" y="211.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="58.7" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (131 samples, 15.38%)</title><rect x="57.1" y="243.0" width="181.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="60.1" y="254.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.12%)</title><rect x="58.5" y="227.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="61.5" y="238.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.12%)</title><rect x="58.5" y="211.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="61.5" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (124 samples, 14.55%)</title><rect x="59.9" y="227.0" width="171.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="62.9" y="238.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.47%)</title><rect x="231.6" y="227.0" width="5.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="234.6" y="238.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.23%)</title><rect x="234.4" y="211.0" width="2.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="237.4" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.12%)</title><rect x="237.1" y="227.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="240.1" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.12%)</title><rect x="238.5" y="243.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="241.5" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.12%)</title><rect x="238.5" y="227.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="241.5" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.12%)</title><rect x="238.5" y="211.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="241.5" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.12%)</title><rect x="238.5" y="195.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="241.5" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.12%)</title><rect x="238.5" y="179.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="241.5" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.12%)</title><rect x="238.5" y="163.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="241.5" y="174.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.12%)</title><rect x="238.5" y="147.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="241.5" y="158.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.12%)</title><rect x="238.5" y="131.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="241.5" y="142.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.23%)</title><rect x="239.9" y="243.0" width="2.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="242.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (7 samples, 0.82%)</title><rect x="242.7" y="307.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (7 samples, 0.82%)</title><rect x="242.7" y="291.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (7 samples, 0.82%)</title><rect x="242.7" y="275.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.59%)</title><rect x="245.4" y="259.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.59%)</title><rect x="245.4" y="243.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="248.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.59%)</title><rect x="245.4" y="227.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.4" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.59%)</title><rect x="245.4" y="211.0" width="7.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="248.4" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.59%)</title><rect x="245.4" y="195.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="248.4" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.59%)</title><rect x="245.4" y="179.0" width="7.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="248.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.64%)</title><rect x="252.4" y="307.0" width="19.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.64%)</title><rect x="252.4" y="291.0" width="19.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.64%)</title><rect x="252.4" y="275.0" width="19.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.64%)</title><rect x="252.4" y="259.0" width="19.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="255.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 1.64%)</title><rect x="252.4" y="243.0" width="19.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.4" y="254.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.12%)</title><rect x="252.4" y="227.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="255.4" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.12%)</title><rect x="253.8" y="227.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="256.8" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (12 samples, 1.41%)</title><rect x="255.1" y="227.0" width="16.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="258.1" y="238.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.12%)</title><rect x="255.1" y="211.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="258.1" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.12%)</title><rect x="256.5" y="211.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="259.5" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.12%)</title><rect x="256.5" y="195.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="259.5" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.12%)</title><rect x="257.9" y="211.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="260.9" y="222.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.12%)</title><rect x="257.9" y="195.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="260.9" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 1.06%)</title><rect x="259.3" y="211.0" width="12.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="262.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$115/1539902124.run (60 samples, 7.04%)</title><rect x="271.8" y="339.0" width="83.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.8" y="350.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (59 samples, 6.92%)</title><rect x="273.1" y="323.0" width="81.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="276.1" y="334.0">ru/mail/p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (46 samples, 5.40%)</title><rect x="274.5" y="307.0" width="63.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.5" y="318.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (45 samples, 5.28%)</title><rect x="275.9" y="291.0" width="62.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.9" y="302.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.12%)</title><rect x="275.9" y="275.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.9" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.12%)</title><rect x="275.9" y="259.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.12%)</title><rect x="275.9" y="243.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.9" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.12%)</title><rect x="275.9" y="227.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="278.9" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (44 samples, 5.16%)</title><rect x="277.3" y="275.0" width="60.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.3" y="286.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session.write (44 samples, 5.16%)</title><rect x="277.3" y="259.0" width="60.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.3" y="270.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (44 samples, 5.16%)</title><rect x="277.3" y="243.0" width="60.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.3" y="254.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (44 samples, 5.16%)</title><rect x="277.3" y="227.0" width="60.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.3" y="238.0">one/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (44 samples, 5.16%)</title><rect x="277.3" y="211.0" width="60.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.3" y="222.0">sun/ni..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.12%)</title><rect x="277.3" y="195.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.12%)</title><rect x="277.3" y="179.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.12%)</title><rect x="277.3" y="163.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.12%)</title><rect x="277.3" y="147.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.3" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.12%)</title><rect x="278.7" y="195.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (39 samples, 4.58%)</title><rect x="280.1" y="195.0" width="54.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.1" y="206.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (39 samples, 4.58%)</title><rect x="280.1" y="179.0" width="54.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.1" y="190.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (38 samples, 4.46%)</title><rect x="280.1" y="163.0" width="52.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.1" y="174.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (38 samples, 4.46%)</title><rect x="280.1" y="147.0" width="52.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.1" y="158.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (36 samples, 4.23%)</title><rect x="282.8" y="131.0" width="49.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.8" y="142.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.12%)</title><rect x="284.2" y="115.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="287.2" y="126.0"></text>
</g>
<g>
<title>write (34 samples, 3.99%)</title><rect x="285.6" y="115.0" width="47.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="288.6" y="126.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.12%)</title><rect x="332.7" y="163.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="335.7" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="332.7" y="147.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="335.7" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.12%)</title><rect x="332.7" y="131.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (3 samples, 0.35%)</title><rect x="334.1" y="195.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="337.1" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.35%)</title><rect x="334.1" y="179.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.1" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.35%)</title><rect x="334.1" y="163.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.1" y="174.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.35%)</title><rect x="334.1" y="147.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.12%)</title><rect x="336.9" y="131.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (1 samples, 0.12%)</title><rect x="338.2" y="307.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.put (11 samples, 1.29%)</title><rect x="339.6" y="307.0" width="15.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (10 samples, 1.17%)</title><rect x="339.6" y="291.0" width="13.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.upsert (10 samples, 1.17%)</title><rect x="339.6" y="275.0" width="13.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.12%)</title><rect x="339.6" y="259.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.6" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="339.6" y="243.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="342.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="339.6" y="227.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="342.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="339.6" y="211.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.12%)</title><rect x="339.6" y="195.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.12%)</title><rect x="339.6" y="179.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (6 samples, 0.70%)</title><rect x="341.0" y="259.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="344.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (6 samples, 0.70%)</title><rect x="341.0" y="243.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.0" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.35%)</title><rect x="341.0" y="227.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.0" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (3 samples, 0.35%)</title><rect x="341.0" y="211.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="344.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.12%)</title><rect x="343.8" y="195.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (1 samples, 0.12%)</title><rect x="345.2" y="227.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.23%)</title><rect x="346.5" y="227.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.23%)</title><rect x="346.5" y="211.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.23%)</title><rect x="346.5" y="195.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="349.5" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.12%)</title><rect x="346.5" y="179.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="349.5" y="190.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.12%)</title><rect x="347.9" y="179.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.&lt;init&gt; (2 samples, 0.23%)</title><rect x="349.3" y="259.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="352.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.23%)</title><rect x="349.3" y="243.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="352.3" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="349.3" y="227.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="349.3" y="211.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.3" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="349.3" y="195.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="352.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.23%)</title><rect x="349.3" y="179.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="352.3" y="190.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.12%)</title><rect x="349.3" y="163.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="352.3" y="174.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.12%)</title><rect x="350.7" y="163.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="353.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.getData (1 samples, 0.12%)</title><rect x="352.1" y="259.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.1" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.12%)</title><rect x="352.1" y="243.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="355.1" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="352.1" y="227.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="355.1" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="352.1" y="211.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.1" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="352.1" y="195.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.1" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.12%)</title><rect x="352.1" y="179.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.12%)</title><rect x="352.1" y="163.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="355.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteBuffer (1 samples, 0.12%)</title><rect x="353.5" y="291.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="356.5" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.12%)</title><rect x="353.5" y="275.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="356.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.12%)</title><rect x="353.5" y="259.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="356.5" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="353.5" y="243.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="353.5" y="227.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="356.5" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="353.5" y="211.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="356.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.12%)</title><rect x="353.5" y="195.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.5" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.12%)</title><rect x="353.5" y="179.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.5" y="190.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (601 samples, 70.54%)</title><rect x="354.9" y="387.0" width="832.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.9" y="398.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.23%)</title><rect x="361.8" y="371.0" width="2.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="364.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.12%)</title><rect x="364.6" y="371.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="367.6" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.12%)</title><rect x="364.6" y="355.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="367.6" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (364 samples, 42.72%)</title><rect x="365.9" y="371.0" width="504.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.9" y="382.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.23%)</title><rect x="374.2" y="355.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.12%)</title><rect x="375.6" y="339.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (355 samples, 41.67%)</title><rect x="377.0" y="355.0" width="491.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="380.0" y="366.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (354 samples, 41.55%)</title><rect x="378.4" y="339.0" width="490.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="381.4" y="350.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (354 samples, 41.55%)</title><rect x="378.4" y="323.0" width="490.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="381.4" y="334.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (331 samples, 38.85%)</title><rect x="385.3" y="307.0" width="458.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.3" y="318.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.12%)</title><rect x="404.7" y="291.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="407.7" y="302.0"></text>
</g>
<g>
<title>kevent (316 samples, 37.09%)</title><rect x="406.1" y="291.0" width="437.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="409.1" y="302.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (10 samples, 1.17%)</title><rect x="843.8" y="307.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="846.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.59%)</title><rect x="843.8" y="291.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="846.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.59%)</title><rect x="843.8" y="275.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="846.8" y="286.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (1 samples, 0.12%)</title><rect x="849.3" y="259.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.59%)</title><rect x="850.7" y="291.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="853.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.47%)</title><rect x="852.1" y="275.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.47%)</title><rect x="852.1" y="259.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="855.1" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.23%)</title><rect x="854.8" y="243.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="857.8" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.23%)</title><rect x="854.8" y="227.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="857.8" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.12%)</title><rect x="857.6" y="307.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="860.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (7 samples, 0.82%)</title><rect x="859.0" y="307.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="862.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.12%)</title><rect x="865.9" y="291.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="868.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.remove (1 samples, 0.12%)</title><rect x="867.3" y="291.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="870.3" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.12%)</title><rect x="867.3" y="275.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="870.3" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.12%)</title><rect x="867.3" y="259.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="870.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.12%)</title><rect x="868.7" y="355.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="871.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.12%)</title><rect x="868.7" y="339.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="871.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.12%)</title><rect x="868.7" y="323.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="871.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (224 samples, 26.29%)</title><rect x="870.1" y="371.0" width="310.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="873.1" y="382.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (222 samples, 26.06%)</title><rect x="872.8" y="355.0" width="307.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="875.8" y="366.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (128 samples, 15.02%)</title><rect x="874.2" y="339.0" width="177.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="877.2" y="350.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.12%)</title><rect x="877.0" y="323.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="880.0" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="878.4" y="323.0" width="1.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="881.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (105 samples, 12.32%)</title><rect x="879.8" y="323.0" width="145.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="882.8" y="334.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (105 samples, 12.32%)</title><rect x="879.8" y="307.0" width="145.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="882.8" y="318.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (103 samples, 12.09%)</title><rect x="879.8" y="291.0" width="142.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="882.8" y="302.0">RequestHandler0_se..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.12%)</title><rect x="879.8" y="275.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="882.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.12%)</title><rect x="879.8" y="259.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="882.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (102 samples, 11.97%)</title><rect x="881.2" y="275.0" width="141.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="884.2" y="286.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (102 samples, 11.97%)</title><rect x="881.2" y="259.0" width="141.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="884.2" y="270.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (94 samples, 11.03%)</title><rect x="883.9" y="243.0" width="130.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="886.9" y="254.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (7 samples, 0.82%)</title><rect x="886.7" y="227.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="889.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.82%)</title><rect x="886.7" y="211.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="889.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.82%)</title><rect x="886.7" y="195.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="889.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.82%)</title><rect x="886.7" y="179.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="889.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (43 samples, 5.05%)</title><rect x="896.4" y="227.0" width="59.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="899.4" y="238.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (43 samples, 5.05%)</title><rect x="896.4" y="211.0" width="59.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="899.4" y="222.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (41 samples, 4.81%)</title><rect x="899.2" y="195.0" width="56.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="902.2" y="206.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (41 samples, 4.81%)</title><rect x="899.2" y="179.0" width="56.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="902.2" y="190.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (41 samples, 4.81%)</title><rect x="899.2" y="163.0" width="56.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="902.2" y="174.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (41 samples, 4.81%)</title><rect x="899.2" y="147.0" width="56.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="902.2" y="158.0">jdk/in..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.12%)</title><rect x="903.3" y="131.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="906.3" y="142.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (37 samples, 4.34%)</title><rect x="904.7" y="131.0" width="51.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="907.7" y="142.0">Unsaf..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="906.1" y="115.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="909.1" y="126.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.12%)</title><rect x="906.1" y="99.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="909.1" y="110.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.12%)</title><rect x="906.1" y="83.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="909.1" y="94.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.12%)</title><rect x="906.1" y="67.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="909.1" y="78.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (33 samples, 3.87%)</title><rect x="907.5" y="115.0" width="45.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="910.5" y="126.0">Park..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.12%)</title><rect x="907.5" y="99.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="910.5" y="110.0"></text>
</g>
<g>
<title>__psynch_cvwait (31 samples, 3.64%)</title><rect x="908.8" y="99.0" width="43.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="911.8" y="110.0">__ps..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.12%)</title><rect x="951.8" y="99.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="954.8" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.12%)</title><rect x="953.2" y="115.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.2" y="126.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="953.2" y="99.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="956.2" y="110.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.12%)</title><rect x="953.2" y="83.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="956.2" y="94.0"></text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.12%)</title><rect x="954.6" y="115.0" width="1.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="957.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (42 samples, 4.93%)</title><rect x="955.9" y="227.0" width="58.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="958.9" y="238.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (42 samples, 4.93%)</title><rect x="955.9" y="211.0" width="58.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="958.9" y="222.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (42 samples, 4.93%)</title><rect x="955.9" y="195.0" width="58.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="958.9" y="206.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (42 samples, 4.93%)</title><rect x="955.9" y="179.0" width="58.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="958.9" y="190.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (42 samples, 4.93%)</title><rect x="955.9" y="163.0" width="58.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="958.9" y="174.0">jdk/in..</text>
</g>
<g>
<title>Thread::current() (1 samples, 0.12%)</title><rect x="958.7" y="147.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.7" y="158.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.12%)</title><rect x="960.1" y="147.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="963.1" y="158.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (38 samples, 4.46%)</title><rect x="961.5" y="147.0" width="52.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="964.5" y="158.0">Unsaf..</text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.12%)</title><rect x="962.9" y="131.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.9" y="142.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.12%)</title><rect x="964.2" y="131.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="967.2" y="142.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.12%)</title><rect x="964.2" y="115.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="967.2" y="126.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.12%)</title><rect x="964.2" y="99.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.2" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.12%)</title><rect x="964.2" y="83.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.2" y="94.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.12%)</title><rect x="964.2" y="67.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="967.2" y="78.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.23%)</title><rect x="965.6" y="131.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="968.6" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.23%)</title><rect x="965.6" y="115.0" width="2.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="968.6" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.23%)</title><rect x="965.6" y="99.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="968.6" y="110.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.12%)</title><rect x="968.4" y="131.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.4" y="142.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.12%)</title><rect x="969.8" y="131.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="972.8" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.12%)</title><rect x="969.8" y="115.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="972.8" y="126.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.23%)</title><rect x="971.2" y="131.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.2" y="142.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.12%)</title><rect x="972.6" y="115.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.6" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (27 samples, 3.17%)</title><rect x="973.9" y="131.0" width="37.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="976.9" y="142.0">__p..</text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.12%)</title><rect x="1011.3" y="131.0" width="1.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1014.3" y="142.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.12%)</title><rect x="1012.7" y="131.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1015.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (5 samples, 0.59%)</title><rect x="1014.1" y="243.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1017.1" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.start (2 samples, 0.23%)</title><rect x="1014.1" y="227.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1017.1" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.start0 (2 samples, 0.23%)</title><rect x="1014.1" y="211.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1017.1" y="222.0"></text>
</g>
<g>
<title>JVM_StartThread (2 samples, 0.23%)</title><rect x="1014.1" y="195.0" width="2.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1017.1" y="206.0"></text>
</g>
<g>
<title>JavaThread::JavaThread(void (*)(JavaThread*, Thread*), unsigned long) (1 samples, 0.12%)</title><rect x="1014.1" y="179.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1017.1" y="190.0"></text>
</g>
<g>
<title>G1BarrierSet::on_thread_create(Thread*) (1 samples, 0.12%)</title><rect x="1014.1" y="163.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1017.1" y="174.0"></text>
</g>
<g>
<title>PtrQueue::PtrQueue(PtrQueueSet*, bool, bool) (1 samples, 0.12%)</title><rect x="1014.1" y="147.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1017.1" y="158.0"></text>
</g>
<g>
<title>os::create_thread(Thread*, os::ThreadType, unsigned long) (1 samples, 0.12%)</title><rect x="1015.5" y="179.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1018.5" y="190.0"></text>
</g>
<g>
<title>_pthread_create (1 samples, 0.12%)</title><rect x="1015.5" y="163.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1018.5" y="174.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.12%)</title><rect x="1015.5" y="147.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1018.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.&lt;init&gt; (2 samples, 0.23%)</title><rect x="1016.9" y="227.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1019.9" y="238.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder$1.newThread (2 samples, 0.23%)</title><rect x="1016.9" y="211.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1019.9" y="222.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder.access$000 (1 samples, 0.12%)</title><rect x="1016.9" y="195.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1019.9" y="206.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder.format (1 samples, 0.12%)</title><rect x="1016.9" y="179.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1019.9" y="190.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.12%)</title><rect x="1016.9" y="163.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1019.9" y="174.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.12%)</title><rect x="1016.9" y="147.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1019.9" y="158.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.12%)</title><rect x="1016.9" y="131.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.9" y="142.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.12%)</title><rect x="1016.9" y="115.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1019.9" y="126.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printHashCode (1 samples, 0.12%)</title><rect x="1016.9" y="99.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1019.9" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DefaultThreadFactory.newThread (1 samples, 0.12%)</title><rect x="1018.3" y="195.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1021.3" y="206.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1018.3" y="179.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1021.3" y="190.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1018.3" y="163.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1021.3" y="174.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.12%)</title><rect x="1018.3" y="147.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1021.3" y="158.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.12%)</title><rect x="1018.3" y="131.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1021.3" y="142.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.12%)</title><rect x="1018.3" y="115.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1021.3" y="126.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.12%)</title><rect x="1018.3" y="99.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.3" y="110.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.12%)</title><rect x="1018.3" y="83.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1021.3" y="94.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.12%)</title><rect x="1018.3" y="67.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.3" y="78.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.12%)</title><rect x="1018.3" y="51.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1021.3" y="62.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.12%)</title><rect x="1018.3" y="35.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.3" y="46.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.12%)</title><rect x="1019.6" y="227.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1022.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.12%)</title><rect x="1019.6" y="211.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1022.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.12%)</title><rect x="1019.6" y="195.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1022.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.12%)</title><rect x="1019.6" y="179.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1022.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.12%)</title><rect x="1019.6" y="163.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1022.6" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.12%)</title><rect x="1019.6" y="147.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1022.6" y="158.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.12%)</title><rect x="1019.6" y="131.0" width="1.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1022.6" y="142.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.12%)</title><rect x="1019.6" y="115.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1022.6" y="126.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.12%)</title><rect x="1019.6" y="99.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1022.6" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.12%)</title><rect x="1021.0" y="243.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1024.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.23%)</title><rect x="1022.4" y="291.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1025.4" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.23%)</title><rect x="1022.4" y="275.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1025.4" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="1022.4" y="259.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1025.4" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="1023.8" y="259.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1026.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="1023.8" y="243.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1026.8" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="1023.8" y="227.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1026.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.59%)</title><rect x="1025.2" y="323.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1028.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.35%)</title><rect x="1028.0" y="307.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1031.0" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.35%)</title><rect x="1028.0" y="291.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1031.0" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.70%)</title><rect x="1032.1" y="323.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1035.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.47%)</title><rect x="1034.9" y="307.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1037.9" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.47%)</title><rect x="1034.9" y="291.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1037.9" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.94%)</title><rect x="1040.4" y="323.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1043.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.35%)</title><rect x="1047.3" y="307.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1050.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (93 samples, 10.92%)</title><rect x="1051.5" y="339.0" width="128.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1054.5" y="350.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (91 samples, 10.68%)</title><rect x="1054.3" y="323.0" width="126.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1057.3" y="334.0">one/nio/net/Java..</text>
</g>
<g>
<title>one/nio/net/SocketClosedException.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1054.3" y="307.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1057.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.12%)</title><rect x="1054.3" y="291.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1057.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (90 samples, 10.56%)</title><rect x="1055.7" y="307.0" width="124.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1058.7" y="318.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.12%)</title><rect x="1058.4" y="291.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1061.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.12%)</title><rect x="1058.4" y="275.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1061.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.12%)</title><rect x="1058.4" y="259.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1061.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.12%)</title><rect x="1058.4" y="243.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1061.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (87 samples, 10.21%)</title><rect x="1059.8" y="291.0" width="120.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1062.8" y="302.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (86 samples, 10.09%)</title><rect x="1061.2" y="275.0" width="119.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1064.2" y="286.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (79 samples, 9.27%)</title><rect x="1061.2" y="259.0" width="109.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1064.2" y="270.0">sun/nio/ch/IO..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (79 samples, 9.27%)</title><rect x="1061.2" y="243.0" width="109.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1064.2" y="254.0">sun/nio/ch/So..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (76 samples, 8.92%)</title><rect x="1065.4" y="227.0" width="105.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1068.4" y="238.0">sun/nio/ch/Fi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.23%)</title><rect x="1070.9" y="211.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1073.9" y="222.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.23%)</title><rect x="1070.9" y="195.0" width="2.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1073.9" y="206.0"></text>
</g>
<g>
<title>rpc_errlist (70 samples, 8.22%)</title><rect x="1073.7" y="211.0" width="96.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1076.7" y="222.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.82%)</title><rect x="1170.6" y="259.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1173.6" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.82%)</title><rect x="1170.6" y="243.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1173.6" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.82%)</title><rect x="1170.6" y="227.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1173.6" y="238.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.23%)</title><rect x="1177.5" y="211.0" width="2.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1180.5" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.59%)</title><rect x="1180.3" y="371.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="382.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.12%)</title><rect x="1180.3" y="355.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1183.3" y="366.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.47%)</title><rect x="1181.7" y="355.0" width="5.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (3 samples, 0.35%)</title><rect x="1183.1" y="339.0" width="4.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1186.1" y="350.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.23%)</title><rect x="1184.5" y="323.0" width="2.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1187.5" y="334.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.23%)</title><rect x="1187.2" y="387.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1190.2" y="398.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.23%)</title><rect x="1187.2" y="371.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1190.2" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.23%)</title><rect x="1187.2" y="355.0" width="2.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1190.2" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.23%)</title><rect x="1187.2" y="339.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="350.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.12%)</title><rect x="1187.2" y="323.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.2" y="334.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.12%)</title><rect x="1187.2" y="307.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.2" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.12%)</title><rect x="1187.2" y="291.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="302.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.12%)</title><rect x="1187.2" y="275.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.2" y="286.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.12%)</title><rect x="1187.2" y="259.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.2" y="270.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.12%)</title><rect x="1187.2" y="243.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="254.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.12%)</title><rect x="1187.2" y="227.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.2" y="238.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.12%)</title><rect x="1187.2" y="211.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.2" y="222.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.12%)</title><rect x="1188.6" y="323.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.6" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.12%)</title><rect x="1188.6" y="307.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.6" y="318.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.12%)</title><rect x="1188.6" y="291.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1191.6" y="302.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.12%)</title><rect x="1188.6" y="275.0" width="1.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1191.6" y="286.0"></text>
</g>
</g>
</svg>
