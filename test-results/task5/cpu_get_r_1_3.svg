<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="821"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="821"> </text>
<g id="frames">
<g>
<title>all (24,511 samples, 100.00%)</title><rect x="10.0" y="787.0" width="1180.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="13.0" y="798.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (362 samples, 1.48%)</title><rect x="10.0" y="771.0" width="17.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (353 samples, 1.44%)</title><rect x="10.3" y="755.0" width="17.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.3" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (288 samples, 1.17%)</title><rect x="13.1" y="739.0" width="13.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="16.1" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (176 samples, 0.72%)</title><rect x="16.3" y="723.0" width="8.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.3" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (13 samples, 0.05%)</title><rect x="24.2" y="707.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="27.2" y="718.0"></text>
</g>
<g>
<title>SpinPause (38 samples, 0.16%)</title><rect x="24.9" y="723.0" width="1.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="27.9" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.02%)</title><rect x="27.0" y="739.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="30.0" y="750.0"></text>
</g>
<g>
<title>[no_Java_frame] (59 samples, 0.24%)</title><rect x="27.5" y="771.0" width="2.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="30.5" y="782.0"></text>
</g>
<g>
<title>[not_walkable_Java] (24 samples, 0.10%)</title><rect x="30.3" y="771.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="33.3" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (16 samples, 0.07%)</title><rect x="30.7" y="755.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="33.7" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (8 samples, 0.03%)</title><rect x="31.0" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="34.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (59 samples, 0.24%)</title><rect x="31.5" y="771.0" width="2.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="34.5" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (37 samples, 0.15%)</title><rect x="31.5" y="755.0" width="1.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="34.5" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (34 samples, 0.14%)</title><rect x="31.6" y="739.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="34.6" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (34 samples, 0.14%)</title><rect x="31.6" y="723.0" width="1.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="34.6" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (32 samples, 0.13%)</title><rect x="31.7" y="707.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="34.7" y="718.0"></text>
</g>
<g>
<title>do_futex (24 samples, 0.10%)</title><rect x="31.9" y="691.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="34.9" y="702.0"></text>
</g>
<g>
<title>futex_wait (24 samples, 0.10%)</title><rect x="31.9" y="675.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="34.9" y="686.0"></text>
</g>
<g>
<title>futex_wait_queue_me (13 samples, 0.05%)</title><rect x="32.0" y="659.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="35.0" y="670.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (7 samples, 0.03%)</title><rect x="32.0" y="643.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="35.0" y="654.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (6 samples, 0.02%)</title><rect x="32.0" y="627.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="35.0" y="638.0"></text>
</g>
<g>
<title>futex_wait_setup (9 samples, 0.04%)</title><rect x="32.6" y="659.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="35.6" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_wait (21 samples, 0.09%)</title><rect x="33.3" y="755.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="36.3" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (21 samples, 0.09%)</title><rect x="33.3" y="739.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="36.3" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (21 samples, 0.09%)</title><rect x="33.3" y="723.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="36.3" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (19 samples, 0.08%)</title><rect x="33.3" y="707.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="36.3" y="718.0"></text>
</g>
<g>
<title>do_futex (19 samples, 0.08%)</title><rect x="33.3" y="691.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="36.3" y="702.0"></text>
</g>
<g>
<title>futex_wait (18 samples, 0.07%)</title><rect x="33.4" y="675.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="36.4" y="686.0"></text>
</g>
<g>
<title>futex_wait_setup (12 samples, 0.05%)</title><rect x="33.7" y="659.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="36.7" y="670.0"></text>
</g>
<g>
<title>[unknown_Java] (349 samples, 1.42%)</title><rect x="34.3" y="771.0" width="16.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="37.3" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (88 samples, 0.36%)</title><rect x="34.6" y="755.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="37.6" y="766.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (12 samples, 0.05%)</title><rect x="34.6" y="739.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="37.6" y="750.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (73 samples, 0.30%)</title><rect x="35.1" y="739.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="38.1" y="750.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (256 samples, 1.04%)</title><rect x="38.8" y="755.0" width="12.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="41.8" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (246 samples, 1.00%)</title><rect x="39.3" y="739.0" width="11.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="42.3" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (246 samples, 1.00%)</title><rect x="39.3" y="723.0" width="11.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="42.3" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (235 samples, 0.96%)</title><rect x="39.8" y="707.0" width="11.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="42.8" y="718.0"></text>
</g>
<g>
<title>do_futex (235 samples, 0.96%)</title><rect x="39.8" y="691.0" width="11.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="42.8" y="702.0"></text>
</g>
<g>
<title>futex_wake (233 samples, 0.95%)</title><rect x="39.9" y="675.0" width="11.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="42.9" y="686.0"></text>
</g>
<g>
<title>mark_wake_futex (20 samples, 0.08%)</title><rect x="41.6" y="659.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="44.6" y="670.0"></text>
</g>
<g>
<title>wake_up_q (172 samples, 0.70%)</title><rect x="42.8" y="659.0" width="8.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="45.8" y="670.0"></text>
</g>
<g>
<title>try_to_wake_up (170 samples, 0.69%)</title><rect x="42.9" y="643.0" width="8.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="45.9" y="654.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (169 samples, 0.69%)</title><rect x="43.0" y="627.0" width="8.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="46.0" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (21,777 samples, 88.85%)</title><rect x="51.3" y="771.0" width="1048.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.3" y="782.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (21,777 samples, 88.85%)</title><rect x="51.3" y="755.0" width="1048.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="54.3" y="766.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (21,777 samples, 88.85%)</title><rect x="51.3" y="739.0" width="1048.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.3" y="750.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (21,709 samples, 88.57%)</title><rect x="51.3" y="723.0" width="1045.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="54.3" y="734.0">java/util/concurrent/CompletableFuture$AsyncSupply.run</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (272 samples, 1.11%)</title><rect x="51.4" y="707.0" width="13.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (269 samples, 1.10%)</title><rect x="51.5" y="691.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (269 samples, 1.10%)</title><rect x="51.5" y="675.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.5" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$104/1056165277.accept (269 samples, 1.10%)</title><rect x="51.5" y="659.0" width="13.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$entity$1 (269 samples, 1.10%)</title><rect x="51.5" y="643.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Utility.sendResponse (269 samples, 1.10%)</title><rect x="51.5" y="627.0" width="13.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.5" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (269 samples, 1.10%)</title><rect x="51.5" y="611.0" width="13.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (255 samples, 1.04%)</title><rect x="52.0" y="595.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 0.06%)</title><rect x="52.0" y="579.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.0" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (241 samples, 0.98%)</title><rect x="52.7" y="579.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.7" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (241 samples, 0.98%)</title><rect x="52.7" y="563.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.7" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (239 samples, 0.98%)</title><rect x="52.7" y="547.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (239 samples, 0.98%)</title><rect x="52.7" y="531.0" width="11.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.7" y="542.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (13 samples, 0.05%)</title><rect x="52.7" y="515.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="55.7" y="526.0"></text>
</g>
<g>
<title>__libc_send (223 samples, 0.91%)</title><rect x="53.4" y="515.0" width="10.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="56.4" y="526.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (222 samples, 0.91%)</title><rect x="53.4" y="499.0" width="10.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="56.4" y="510.0"></text>
</g>
<g>
<title>do_syscall_64 (222 samples, 0.91%)</title><rect x="53.4" y="483.0" width="10.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="56.4" y="494.0"></text>
</g>
<g>
<title>__x64_sys_sendto (221 samples, 0.90%)</title><rect x="53.5" y="467.0" width="10.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="56.5" y="478.0"></text>
</g>
<g>
<title>__sys_sendto (221 samples, 0.90%)</title><rect x="53.5" y="451.0" width="10.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="56.5" y="462.0"></text>
</g>
<g>
<title>sock_sendmsg (206 samples, 0.84%)</title><rect x="53.8" y="435.0" width="9.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="56.8" y="446.0"></text>
</g>
<g>
<title>tcp_sendmsg (203 samples, 0.83%)</title><rect x="53.9" y="419.0" width="9.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="56.9" y="430.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (199 samples, 0.81%)</title><rect x="54.1" y="403.0" width="9.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="57.1" y="414.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (165 samples, 0.67%)</title><rect x="54.4" y="387.0" width="7.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="57.4" y="398.0"></text>
</g>
<g>
<title>tcp_write_xmit (165 samples, 0.67%)</title><rect x="54.4" y="371.0" width="7.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="57.4" y="382.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (155 samples, 0.63%)</title><rect x="54.6" y="355.0" width="7.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="57.6" y="366.0"></text>
</g>
<g>
<title>__ip_queue_xmit (146 samples, 0.60%)</title><rect x="54.8" y="339.0" width="7.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="57.8" y="350.0"></text>
</g>
<g>
<title>ip_output (143 samples, 0.58%)</title><rect x="54.9" y="323.0" width="6.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="57.9" y="334.0"></text>
</g>
<g>
<title>ip_finish_output2 (137 samples, 0.56%)</title><rect x="54.9" y="307.0" width="6.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="57.9" y="318.0"></text>
</g>
<g>
<title>__dev_queue_xmit (7 samples, 0.03%)</title><rect x="55.2" y="291.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="58.2" y="302.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (125 samples, 0.51%)</title><rect x="55.5" y="291.0" width="6.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="58.5" y="302.0"></text>
</g>
<g>
<title>do_softirq.part.0 (124 samples, 0.51%)</title><rect x="55.5" y="275.0" width="6.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="58.5" y="286.0"></text>
</g>
<g>
<title>do_softirq_own_stack (123 samples, 0.50%)</title><rect x="55.6" y="259.0" width="5.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="58.6" y="270.0"></text>
</g>
<g>
<title>__softirqentry_text_start (123 samples, 0.50%)</title><rect x="55.6" y="243.0" width="5.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="58.6" y="254.0"></text>
</g>
<g>
<title>net_rx_action (119 samples, 0.49%)</title><rect x="55.8" y="227.0" width="5.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="58.8" y="238.0"></text>
</g>
<g>
<title>process_backlog (117 samples, 0.48%)</title><rect x="55.9" y="211.0" width="5.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="58.9" y="222.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (115 samples, 0.47%)</title><rect x="56.0" y="195.0" width="5.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="59.0" y="206.0"></text>
</g>
<g>
<title>ip_rcv (112 samples, 0.46%)</title><rect x="56.1" y="179.0" width="5.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="59.1" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver (110 samples, 0.45%)</title><rect x="56.2" y="163.0" width="5.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="59.2" y="174.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (109 samples, 0.44%)</title><rect x="56.2" y="147.0" width="5.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="59.2" y="158.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (108 samples, 0.44%)</title><rect x="56.3" y="131.0" width="5.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="59.3" y="142.0"></text>
</g>
<g>
<title>tcp_v4_rcv (108 samples, 0.44%)</title><rect x="56.3" y="115.0" width="5.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="59.3" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (99 samples, 0.40%)</title><rect x="56.6" y="99.0" width="4.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="59.6" y="110.0"></text>
</g>
<g>
<title>tcp_rcv_established (98 samples, 0.40%)</title><rect x="56.7" y="83.0" width="4.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="59.7" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (56 samples, 0.23%)</title><rect x="56.8" y="67.0" width="2.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="59.8" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (55 samples, 0.22%)</title><rect x="56.9" y="51.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="59.9" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (54 samples, 0.22%)</title><rect x="56.9" y="35.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="59.9" y="46.0"></text>
</g>
<g>
<title>tcp_ack (34 samples, 0.14%)</title><rect x="59.5" y="67.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="62.5" y="78.0"></text>
</g>
<g>
<title>__kfree_skb (10 samples, 0.04%)</title><rect x="60.1" y="51.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="63.1" y="62.0"></text>
</g>
<g>
<title>kmem_cache_free (6 samples, 0.02%)</title><rect x="60.6" y="51.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="63.6" y="62.0"></text>
</g>
<g>
<title>nf_hook_slow (6 samples, 0.02%)</title><rect x="61.5" y="307.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="64.5" y="318.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (16 samples, 0.07%)</title><rect x="62.6" y="387.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="65.6" y="398.0"></text>
</g>
<g>
<title>__alloc_skb (14 samples, 0.06%)</title><rect x="62.7" y="371.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="65.7" y="382.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (7 samples, 0.03%)</title><rect x="62.8" y="355.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="65.8" y="366.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (6 samples, 0.02%)</title><rect x="62.8" y="339.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="65.8" y="350.0"></text>
</g>
<g>
<title>sockfd_lookup_light (9 samples, 0.04%)</title><rect x="63.7" y="435.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="66.7" y="446.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.04%)</title><rect x="63.7" y="419.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="66.7" y="430.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.04%)</title><rect x="63.7" y="403.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="66.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$170/426943754.get (21,435 samples, 87.45%)</title><rect x="64.5" y="707.0" width="1031.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.5" y="718.0">ru/mail/polis/service/s3ponia/AsyncService$$Lambda$170/426943754.get</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$getAsync$6 (21,434 samples, 87.45%)</title><rect x="64.5" y="691.0" width="1031.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.5" y="702.0">ru/mail/polis/service/s3ponia/AsyncService.lambda$getAsync$6</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/DaoService.get (21,434 samples, 87.45%)</title><rect x="64.5" y="675.0" width="1031.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="67.5" y="686.0">ru/mail/polis/service/s3ponia/DaoService.get</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (21,423 samples, 87.40%)</title><rect x="64.9" y="659.0" width="1031.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.9" y="670.0">ru/mail/polis/dao/DAO.getValue</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (723 samples, 2.95%)</title><rect x="65.1" y="643.0" width="34.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.1" y="654.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (713 samples, 2.91%)</title><rect x="65.1" y="627.0" width="34.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.1" y="638.0">co..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (64 samples, 0.26%)</title><rect x="65.2" y="611.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.2" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (64 samples, 0.26%)</title><rect x="65.2" y="595.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.2" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (62 samples, 0.25%)</title><rect x="65.3" y="579.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.3" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (60 samples, 0.24%)</title><rect x="65.4" y="563.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (59 samples, 0.24%)</title><rect x="65.5" y="547.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="68.5" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (6 samples, 0.02%)</title><rect x="65.8" y="531.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$178/1664825914.compare (45 samples, 0.18%)</title><rect x="66.1" y="531.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell.compareTo (44 samples, 0.18%)</title><rect x="66.2" y="515.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.2" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$205/1688686519.compare (36 samples, 0.15%)</title><rect x="66.2" y="499.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.2" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (36 samples, 0.15%)</title><rect x="66.2" y="483.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.2" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$189/630867340.compare (35 samples, 0.14%)</title><rect x="66.2" y="467.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.2" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (35 samples, 0.14%)</title><rect x="66.2" y="451.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (26 samples, 0.11%)</title><rect x="66.2" y="435.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (23 samples, 0.09%)</title><rect x="66.4" y="419.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.4" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (21 samples, 0.09%)</title><rect x="66.5" y="403.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.compareTo (9 samples, 0.04%)</title><rect x="67.5" y="435.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.compareTo (9 samples, 0.04%)</title><rect x="67.5" y="419.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.5" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (646 samples, 2.64%)</title><rect x="68.3" y="611.0" width="31.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.3" y="622.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (646 samples, 2.64%)</title><rect x="68.3" y="595.0" width="31.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.3" y="606.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (646 samples, 2.64%)</title><rect x="68.3" y="579.0" width="31.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.3" y="590.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (646 samples, 2.64%)</title><rect x="68.3" y="563.0" width="31.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.3" y="574.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (646 samples, 2.64%)</title><rect x="68.3" y="547.0" width="31.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.3" y="558.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (646 samples, 2.64%)</title><rect x="68.3" y="531.0" width="31.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.3" y="542.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (635 samples, 2.59%)</title><rect x="68.3" y="515.0" width="30.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.3" y="526.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (633 samples, 2.58%)</title><rect x="68.4" y="499.0" width="30.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.4" y="510.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (633 samples, 2.58%)</title><rect x="68.4" y="483.0" width="30.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.4" y="494.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (633 samples, 2.58%)</title><rect x="68.4" y="467.0" width="30.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.4" y="478.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (633 samples, 2.58%)</title><rect x="68.4" y="451.0" width="30.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.4" y="462.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.&lt;init&gt; (633 samples, 2.58%)</title><rect x="68.4" y="435.0" width="30.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.4" y="446.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readKey (241 samples, 0.98%)</title><rect x="68.4" y="419.0" width="11.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (239 samples, 0.98%)</title><rect x="68.5" y="403.0" width="11.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (239 samples, 0.98%)</title><rect x="68.5" y="387.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (152 samples, 0.62%)</title><rect x="69.0" y="371.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (14 samples, 0.06%)</title><rect x="69.1" y="355.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.1" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (14 samples, 0.06%)</title><rect x="69.1" y="339.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="72.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (13 samples, 0.05%)</title><rect x="69.1" y="323.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="72.1" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.03%)</title><rect x="69.4" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (6 samples, 0.02%)</title><rect x="69.4" y="291.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (127 samples, 0.52%)</title><rect x="69.7" y="355.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="72.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (125 samples, 0.51%)</title><rect x="69.8" y="339.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (124 samples, 0.51%)</title><rect x="69.9" y="323.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="72.9" y="334.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (13 samples, 0.05%)</title><rect x="70.1" y="307.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="73.1" y="318.0"></text>
</g>
<g>
<title>jni_GetIntField (6 samples, 0.02%)</title><rect x="70.5" y="291.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="73.5" y="302.0"></text>
</g>
<g>
<title>__pread64 (103 samples, 0.42%)</title><rect x="70.8" y="307.0" width="4.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="73.8" y="318.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (98 samples, 0.40%)</title><rect x="71.0" y="291.0" width="4.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="74.0" y="302.0"></text>
</g>
<g>
<title>do_syscall_64 (98 samples, 0.40%)</title><rect x="71.0" y="275.0" width="4.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="74.0" y="286.0"></text>
</g>
<g>
<title>ksys_pread64 (87 samples, 0.35%)</title><rect x="71.5" y="259.0" width="4.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="74.5" y="270.0"></text>
</g>
<g>
<title>__fget_light (19 samples, 0.08%)</title><rect x="71.5" y="243.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="74.5" y="254.0"></text>
</g>
<g>
<title>__fget (17 samples, 0.07%)</title><rect x="71.6" y="227.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="74.6" y="238.0"></text>
</g>
<g>
<title>vfs_read (66 samples, 0.27%)</title><rect x="72.5" y="243.0" width="3.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="75.5" y="254.0"></text>
</g>
<g>
<title>new_sync_read (53 samples, 0.22%)</title><rect x="72.8" y="227.0" width="2.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="75.8" y="238.0"></text>
</g>
<g>
<title>generic_file_read_iter (47 samples, 0.19%)</title><rect x="73.1" y="211.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="76.1" y="222.0"></text>
</g>
<g>
<title>copy_page_to_iter (19 samples, 0.08%)</title><rect x="73.4" y="195.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="76.4" y="206.0"></text>
</g>
<g>
<title>copyout (13 samples, 0.05%)</title><rect x="73.7" y="179.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="76.7" y="190.0"></text>
</g>
<g>
<title>copy_user_generic_string (12 samples, 0.05%)</title><rect x="73.7" y="163.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="76.7" y="174.0"></text>
</g>
<g>
<title>pagecache_get_page (14 samples, 0.06%)</title><rect x="74.4" y="195.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="77.4" y="206.0"></text>
</g>
<g>
<title>find_get_entry (13 samples, 0.05%)</title><rect x="74.4" y="179.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="77.4" y="190.0"></text>
</g>
<g>
<title>touch_atime (7 samples, 0.03%)</title><rect x="75.0" y="195.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="78.0" y="206.0"></text>
</g>
<g>
<title>security_file_permission (7 samples, 0.03%)</title><rect x="75.4" y="227.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="78.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.03%)</title><rect x="75.9" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (51 samples, 0.21%)</title><rect x="76.3" y="371.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.3" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (15 samples, 0.06%)</title><rect x="77.5" y="355.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="80.5" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (13 samples, 0.05%)</title><rect x="77.5" y="339.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="80.5" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (8 samples, 0.03%)</title><rect x="77.8" y="323.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="80.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (11 samples, 0.04%)</title><rect x="78.3" y="355.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="81.3" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.04%)</title><rect x="78.3" y="339.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="81.3" y="350.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (9 samples, 0.04%)</title><rect x="78.4" y="323.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="81.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (25 samples, 0.10%)</title><rect x="78.8" y="371.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.8" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (12 samples, 0.05%)</title><rect x="79.4" y="355.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="82.4" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (10 samples, 0.04%)</title><rect x="79.4" y="339.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="82.4" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.02%)</title><rect x="79.5" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="82.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readValue (392 samples, 1.60%)</title><rect x="80.0" y="419.0" width="18.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (391 samples, 1.60%)</title><rect x="80.0" y="403.0" width="18.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (391 samples, 1.60%)</title><rect x="80.0" y="387.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (270 samples, 1.10%)</title><rect x="80.1" y="371.0" width="13.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.1" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (112 samples, 0.46%)</title><rect x="80.3" y="355.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="83.3" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (112 samples, 0.46%)</title><rect x="80.3" y="339.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="83.3" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (88 samples, 0.36%)</title><rect x="80.3" y="323.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.3" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (88 samples, 0.36%)</title><rect x="80.3" y="307.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="83.3" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (24 samples, 0.10%)</title><rect x="84.5" y="323.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (24 samples, 0.10%)</title><rect x="84.5" y="307.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="87.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (142 samples, 0.58%)</title><rect x="85.7" y="355.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (140 samples, 0.57%)</title><rect x="85.8" y="339.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (140 samples, 0.57%)</title><rect x="85.8" y="323.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.8" y="334.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (6 samples, 0.02%)</title><rect x="85.9" y="307.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="88.9" y="318.0"></text>
</g>
<g>
<title>__pread64 (129 samples, 0.53%)</title><rect x="86.2" y="307.0" width="6.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="89.2" y="318.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (119 samples, 0.49%)</title><rect x="86.7" y="291.0" width="5.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="89.7" y="302.0"></text>
</g>
<g>
<title>do_syscall_64 (119 samples, 0.49%)</title><rect x="86.7" y="275.0" width="5.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="89.7" y="286.0"></text>
</g>
<g>
<title>ksys_pread64 (101 samples, 0.41%)</title><rect x="87.6" y="259.0" width="4.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="90.6" y="270.0"></text>
</g>
<g>
<title>__fget_light (18 samples, 0.07%)</title><rect x="87.7" y="243.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="90.7" y="254.0"></text>
</g>
<g>
<title>__fget (17 samples, 0.07%)</title><rect x="87.7" y="227.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="90.7" y="238.0"></text>
</g>
<g>
<title>vfs_read (80 samples, 0.33%)</title><rect x="88.6" y="243.0" width="3.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="91.6" y="254.0"></text>
</g>
<g>
<title>new_sync_read (59 samples, 0.24%)</title><rect x="88.9" y="227.0" width="2.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="91.9" y="238.0"></text>
</g>
<g>
<title>generic_file_read_iter (51 samples, 0.21%)</title><rect x="89.3" y="211.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="92.3" y="222.0"></text>
</g>
<g>
<title>copy_page_to_iter (17 samples, 0.07%)</title><rect x="89.7" y="195.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="92.7" y="206.0"></text>
</g>
<g>
<title>copyout (14 samples, 0.06%)</title><rect x="89.8" y="179.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="92.8" y="190.0"></text>
</g>
<g>
<title>copy_user_generic_string (14 samples, 0.06%)</title><rect x="89.8" y="163.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="92.8" y="174.0"></text>
</g>
<g>
<title>pagecache_get_page (19 samples, 0.08%)</title><rect x="90.6" y="195.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="93.6" y="206.0"></text>
</g>
<g>
<title>find_get_entry (19 samples, 0.08%)</title><rect x="90.6" y="179.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="93.6" y="190.0"></text>
</g>
<g>
<title>security_file_permission (13 samples, 0.05%)</title><rect x="91.8" y="227.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="94.8" y="238.0"></text>
</g>
<g>
<title>selinux_file_permission (9 samples, 0.04%)</title><rect x="92.0" y="211.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="95.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.04%)</title><rect x="92.5" y="355.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (6 samples, 0.02%)</title><rect x="92.7" y="339.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="95.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (77 samples, 0.31%)</title><rect x="93.1" y="371.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.1" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (16 samples, 0.07%)</title><rect x="95.0" y="355.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="98.0" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (13 samples, 0.05%)</title><rect x="95.1" y="339.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="98.1" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (9 samples, 0.04%)</title><rect x="95.2" y="323.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="98.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (21 samples, 0.09%)</title><rect x="95.8" y="355.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.8" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.04%)</title><rect x="96.4" y="339.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="99.4" y="350.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (8 samples, 0.03%)</title><rect x="96.4" y="323.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="99.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (42 samples, 0.17%)</title><rect x="96.8" y="371.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.8" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (30 samples, 0.12%)</title><rect x="96.8" y="355.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="99.8" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (25 samples, 0.10%)</title><rect x="96.9" y="339.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="99.9" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (17 samples, 0.07%)</title><rect x="97.1" y="323.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="100.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (12 samples, 0.05%)</title><rect x="98.3" y="355.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.3" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (11 samples, 0.04%)</title><rect x="98.3" y="339.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="101.3" y="350.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (7 samples, 0.03%)</title><rect x="98.5" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="101.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$178/1664825914.compare (11 samples, 0.04%)</title><rect x="98.9" y="515.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell.compareTo (11 samples, 0.04%)</title><rect x="98.9" y="499.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="101.9" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$205/1688686519.compare (9 samples, 0.04%)</title><rect x="99.0" y="483.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.0" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.04%)</title><rect x="99.0" y="467.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.0" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$189/630867340.compare (9 samples, 0.04%)</title><rect x="99.0" y="451.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.0" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (9 samples, 0.04%)</title><rect x="99.0" y="435.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (10 samples, 0.04%)</title><rect x="99.4" y="627.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="102.4" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.04%)</title><rect x="99.4" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.cellsIterator (20,697 samples, 84.44%)</title><rect x="99.9" y="643.0" width="996.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.9" y="654.0">ru/mail/polis/dao/s3ponia/PersistenceDAO.cellsIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (1,549 samples, 6.32%)</title><rect x="100.1" y="627.0" width="74.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.1" y="638.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1,548 samples, 6.32%)</title><rect x="100.1" y="611.0" width="74.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="103.1" y="622.0">com/goog..</text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (6 samples, 0.02%)</title><rect x="101.5" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="104.5" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,482 samples, 6.05%)</title><rect x="101.8" y="595.0" width="71.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.8" y="606.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,482 samples, 6.05%)</title><rect x="101.8" y="579.0" width="71.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="104.8" y="590.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,482 samples, 6.05%)</title><rect x="101.8" y="563.0" width="71.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="104.8" y="574.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,482 samples, 6.05%)</title><rect x="101.8" y="547.0" width="71.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.8" y="558.0">java/uti..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,479 samples, 6.03%)</title><rect x="101.9" y="531.0" width="71.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.9" y="542.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,476 samples, 6.02%)</title><rect x="102.0" y="515.0" width="71.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.0" y="526.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,420 samples, 5.79%)</title><rect x="102.3" y="499.0" width="68.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="105.3" y="510.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (1,413 samples, 5.76%)</title><rect x="102.6" y="483.0" width="68.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.6" y="494.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (1,410 samples, 5.75%)</title><rect x="102.8" y="467.0" width="67.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.8" y="478.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (1,409 samples, 5.75%)</title><rect x="102.8" y="451.0" width="67.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.8" y="462.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (1,408 samples, 5.74%)</title><rect x="102.9" y="435.0" width="67.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.9" y="446.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.&lt;init&gt; (1,408 samples, 5.74%)</title><rect x="102.9" y="419.0" width="67.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.9" y="430.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readKey (498 samples, 2.03%)</title><rect x="102.9" y="403.0" width="23.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.9" y="414.0">r..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (493 samples, 2.01%)</title><rect x="103.1" y="387.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.1" y="398.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (493 samples, 2.01%)</title><rect x="103.1" y="371.0" width="23.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.1" y="382.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (9 samples, 0.04%)</title><rect x="103.2" y="355.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.2" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (9 samples, 0.04%)</title><rect x="103.2" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="106.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (12 samples, 0.05%)</title><rect x="103.6" y="355.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.6" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (12 samples, 0.05%)</title><rect x="103.6" y="339.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.6" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (8 samples, 0.03%)</title><rect x="103.8" y="323.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (341 samples, 1.39%)</title><rect x="104.2" y="355.0" width="16.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.2" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (31 samples, 0.13%)</title><rect x="104.3" y="339.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.3" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (30 samples, 0.12%)</title><rect x="104.4" y="323.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (25 samples, 0.10%)</title><rect x="104.5" y="307.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.5" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (13 samples, 0.05%)</title><rect x="105.0" y="291.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.0" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (10 samples, 0.04%)</title><rect x="105.2" y="275.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (275 samples, 1.12%)</title><rect x="105.8" y="339.0" width="13.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (269 samples, 1.10%)</title><rect x="106.1" y="323.0" width="12.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (267 samples, 1.09%)</title><rect x="106.2" y="307.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.2" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (19 samples, 0.08%)</title><rect x="106.7" y="291.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="109.7" y="302.0"></text>
</g>
<g>
<title>jni_GetIntField (10 samples, 0.04%)</title><rect x="107.1" y="275.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="110.1" y="286.0"></text>
</g>
<g>
<title>__pread64 (231 samples, 0.94%)</title><rect x="107.6" y="291.0" width="11.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="110.6" y="302.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (213 samples, 0.87%)</title><rect x="108.4" y="275.0" width="10.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="111.4" y="286.0"></text>
</g>
<g>
<title>do_syscall_64 (213 samples, 0.87%)</title><rect x="108.4" y="259.0" width="10.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="111.4" y="270.0"></text>
</g>
<g>
<title>ksys_pread64 (185 samples, 0.75%)</title><rect x="109.8" y="243.0" width="8.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="112.8" y="254.0"></text>
</g>
<g>
<title>__fget_light (30 samples, 0.12%)</title><rect x="109.9" y="227.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="112.9" y="238.0"></text>
</g>
<g>
<title>__fget (30 samples, 0.12%)</title><rect x="109.9" y="211.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="112.9" y="222.0"></text>
</g>
<g>
<title>vfs_read (150 samples, 0.61%)</title><rect x="111.5" y="227.0" width="7.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="114.5" y="238.0"></text>
</g>
<g>
<title>fsnotify (9 samples, 0.04%)</title><rect x="112.0" y="211.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="115.0" y="222.0"></text>
</g>
<g>
<title>new_sync_read (108 samples, 0.44%)</title><rect x="112.4" y="211.0" width="5.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="115.4" y="222.0"></text>
</g>
<g>
<title>ext4_file_read_iter?[ext4] (9 samples, 0.04%)</title><rect x="112.9" y="195.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="115.9" y="206.0"></text>
</g>
<g>
<title>generic_file_read_iter (88 samples, 0.36%)</title><rect x="113.3" y="195.0" width="4.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="116.3" y="206.0"></text>
</g>
<g>
<title>copy_page_to_iter (22 samples, 0.09%)</title><rect x="114.7" y="179.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="117.7" y="190.0"></text>
</g>
<g>
<title>copyout (12 samples, 0.05%)</title><rect x="115.2" y="163.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="118.2" y="174.0"></text>
</g>
<g>
<title>copy_user_generic_string (10 samples, 0.04%)</title><rect x="115.3" y="147.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="118.3" y="158.0"></text>
</g>
<g>
<title>pagecache_get_page (26 samples, 0.11%)</title><rect x="115.8" y="179.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="118.8" y="190.0"></text>
</g>
<g>
<title>find_get_entry (24 samples, 0.10%)</title><rect x="115.9" y="163.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="118.9" y="174.0"></text>
</g>
<g>
<title>xas_load (7 samples, 0.03%)</title><rect x="116.7" y="147.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="119.7" y="158.0"></text>
</g>
<g>
<title>touch_atime (10 samples, 0.04%)</title><rect x="117.1" y="179.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="120.1" y="190.0"></text>
</g>
<g>
<title>security_file_permission (21 samples, 0.09%)</title><rect x="117.7" y="211.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="120.7" y="222.0"></text>
</g>
<g>
<title>selinux_file_permission (16 samples, 0.07%)</title><rect x="117.9" y="195.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="120.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (15 samples, 0.06%)</title><rect x="119.0" y="339.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.0" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.03%)</title><rect x="119.2" y="323.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.2" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.03%)</title><rect x="119.3" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="122.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (18 samples, 0.07%)</title><rect x="119.8" y="339.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.8" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.03%)</title><rect x="120.2" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.2" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (7 samples, 0.03%)</title><rect x="120.2" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (6 samples, 0.02%)</title><rect x="120.2" y="291.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (91 samples, 0.37%)</title><rect x="120.6" y="355.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="123.6" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (24 samples, 0.10%)</title><rect x="122.2" y="339.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="125.2" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (19 samples, 0.08%)</title><rect x="122.3" y="323.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="125.3" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (15 samples, 0.06%)</title><rect x="122.5" y="307.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="125.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (32 samples, 0.13%)</title><rect x="123.5" y="339.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.5" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (19 samples, 0.08%)</title><rect x="124.1" y="323.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="127.1" y="334.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (19 samples, 0.08%)</title><rect x="124.1" y="307.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="127.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (38 samples, 0.16%)</title><rect x="125.0" y="355.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="128.0" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (13 samples, 0.05%)</title><rect x="126.0" y="339.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="129.0" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (13 samples, 0.05%)</title><rect x="126.0" y="323.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="129.0" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (7 samples, 0.03%)</title><rect x="126.3" y="307.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="129.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readValue (910 samples, 3.71%)</title><rect x="126.8" y="403.0" width="43.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="129.8" y="414.0">ru/m..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (904 samples, 3.69%)</title><rect x="127.1" y="387.0" width="43.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="130.1" y="398.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (904 samples, 3.69%)</title><rect x="127.1" y="371.0" width="43.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="130.1" y="382.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (13 samples, 0.05%)</title><rect x="127.1" y="355.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="130.1" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (11 samples, 0.04%)</title><rect x="127.2" y="339.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="130.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (661 samples, 2.70%)</title><rect x="127.8" y="355.0" width="31.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.8" y="366.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (222 samples, 0.91%)</title><rect x="128.1" y="339.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="131.1" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (221 samples, 0.90%)</title><rect x="128.2" y="323.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="131.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (184 samples, 0.75%)</title><rect x="128.2" y="307.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="131.2" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (184 samples, 0.75%)</title><rect x="128.2" y="291.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (33 samples, 0.13%)</title><rect x="137.2" y="307.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (33 samples, 0.13%)</title><rect x="137.2" y="291.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="140.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (407 samples, 1.66%)</title><rect x="138.8" y="339.0" width="19.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="141.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (406 samples, 1.66%)</title><rect x="138.9" y="323.0" width="19.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="141.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (406 samples, 1.66%)</title><rect x="138.9" y="307.0" width="19.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="141.9" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (27 samples, 0.11%)</title><rect x="139.5" y="291.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="142.5" y="302.0"></text>
</g>
<g>
<title>jni_GetIntField (12 samples, 0.05%)</title><rect x="140.3" y="275.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="143.3" y="286.0"></text>
</g>
<g>
<title>__pread64 (354 samples, 1.44%)</title><rect x="140.8" y="291.0" width="17.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="143.8" y="302.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (331 samples, 1.35%)</title><rect x="142.0" y="275.0" width="15.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="145.0" y="286.0"></text>
</g>
<g>
<title>do_syscall_64 (331 samples, 1.35%)</title><rect x="142.0" y="259.0" width="15.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="145.0" y="270.0"></text>
</g>
<g>
<title>ksys_pread64 (291 samples, 1.19%)</title><rect x="143.9" y="243.0" width="14.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="146.9" y="254.0"></text>
</g>
<g>
<title>__fget_light (53 samples, 0.22%)</title><rect x="144.0" y="227.0" width="2.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="147.0" y="238.0"></text>
</g>
<g>
<title>__fget (46 samples, 0.19%)</title><rect x="144.3" y="211.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="147.3" y="222.0"></text>
</g>
<g>
<title>vfs_read (235 samples, 0.96%)</title><rect x="146.6" y="227.0" width="11.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="149.6" y="238.0"></text>
</g>
<g>
<title>fsnotify (21 samples, 0.09%)</title><rect x="147.2" y="211.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="150.2" y="222.0"></text>
</g>
<g>
<title>new_sync_read (158 samples, 0.64%)</title><rect x="148.2" y="211.0" width="7.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="151.2" y="222.0"></text>
</g>
<g>
<title>ext4_file_read_iter?[ext4] (7 samples, 0.03%)</title><rect x="148.6" y="195.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="151.6" y="206.0"></text>
</g>
<g>
<title>generic_file_read_iter (141 samples, 0.58%)</title><rect x="148.9" y="195.0" width="6.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="151.9" y="206.0"></text>
</g>
<g>
<title>copy_page_to_iter (40 samples, 0.16%)</title><rect x="150.4" y="179.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="153.4" y="190.0"></text>
</g>
<g>
<title>copyout (26 samples, 0.11%)</title><rect x="151.1" y="163.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="154.1" y="174.0"></text>
</g>
<g>
<title>copy_user_generic_string (24 samples, 0.10%)</title><rect x="151.2" y="147.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="154.2" y="158.0"></text>
</g>
<g>
<title>pagecache_get_page (51 samples, 0.21%)</title><rect x="152.5" y="179.0" width="2.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="155.5" y="190.0"></text>
</g>
<g>
<title>find_get_entry (45 samples, 0.18%)</title><rect x="152.8" y="163.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="155.8" y="174.0"></text>
</g>
<g>
<title>xas_load (13 samples, 0.05%)</title><rect x="154.3" y="147.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="157.3" y="158.0"></text>
</g>
<g>
<title>xas_start (7 samples, 0.03%)</title><rect x="154.6" y="131.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="157.6" y="142.0"></text>
</g>
<g>
<title>touch_atime (16 samples, 0.07%)</title><rect x="155.0" y="179.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="158.0" y="190.0"></text>
</g>
<g>
<title>security_file_permission (43 samples, 0.18%)</title><rect x="155.8" y="211.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="158.8" y="222.0"></text>
</g>
<g>
<title>__fsnotify_parent (6 samples, 0.02%)</title><rect x="156.1" y="195.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="159.1" y="206.0"></text>
</g>
<g>
<title>selinux_file_permission (32 samples, 0.13%)</title><rect x="156.4" y="195.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="159.4" y="206.0"></text>
</g>
<g>
<title>__inode_security_revalidate (9 samples, 0.04%)</title><rect x="157.5" y="179.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="160.5" y="190.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.02%)</title><rect x="157.9" y="291.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="160.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (20 samples, 0.08%)</title><rect x="158.4" y="339.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (12 samples, 0.05%)</title><rect x="158.8" y="323.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (163 samples, 0.67%)</title><rect x="159.6" y="355.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="162.6" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (40 samples, 0.16%)</title><rect x="163.8" y="339.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="166.8" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (31 samples, 0.13%)</title><rect x="164.1" y="323.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="167.1" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (14 samples, 0.06%)</title><rect x="164.5" y="307.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="167.5" y="318.0"></text>
</g>
<g>
<title>SpinPause (8 samples, 0.03%)</title><rect x="165.2" y="307.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="168.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (32 samples, 0.13%)</title><rect x="165.9" y="339.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.9" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (24 samples, 0.10%)</title><rect x="166.3" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="169.3" y="334.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (21 samples, 0.09%)</title><rect x="166.3" y="307.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="169.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (67 samples, 0.27%)</title><rect x="167.4" y="355.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="170.4" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (41 samples, 0.17%)</title><rect x="167.8" y="339.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="170.8" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (34 samples, 0.14%)</title><rect x="167.8" y="323.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="170.8" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (21 samples, 0.09%)</title><rect x="168.3" y="307.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="171.3" y="318.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (6 samples, 0.02%)</title><rect x="169.4" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="172.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (19 samples, 0.08%)</title><rect x="169.7" y="339.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.7" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (19 samples, 0.08%)</title><rect x="169.7" y="323.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="172.7" y="334.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (17 samples, 0.07%)</title><rect x="169.8" y="307.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="172.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$178/1664825914.compare (51 samples, 0.21%)</title><rect x="170.6" y="499.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell.compareTo (46 samples, 0.19%)</title><rect x="170.9" y="483.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.9" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$205/1688686519.compare (33 samples, 0.13%)</title><rect x="170.9" y="467.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="173.9" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (33 samples, 0.13%)</title><rect x="170.9" y="451.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.9" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$189/630867340.compare (33 samples, 0.13%)</title><rect x="170.9" y="435.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.9" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (33 samples, 0.13%)</title><rect x="170.9" y="419.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (24 samples, 0.10%)</title><rect x="170.9" y="403.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (22 samples, 0.09%)</title><rect x="171.0" y="387.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="174.0" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (17 samples, 0.07%)</title><rect x="171.1" y="371.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.compareTo (8 samples, 0.03%)</title><rect x="172.1" y="403.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.compareTo (8 samples, 0.03%)</title><rect x="172.1" y="387.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.1" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (11 samples, 0.04%)</title><rect x="172.6" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.6" y="478.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (30 samples, 0.12%)</title><rect x="173.1" y="595.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (28 samples, 0.11%)</title><rect x="173.2" y="579.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (27 samples, 0.11%)</title><rect x="173.2" y="563.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (19 samples, 0.08%)</title><rect x="173.3" y="547.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$165/1407830340.getAsBoolean (16 samples, 0.07%)</title><rect x="173.4" y="531.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (16 samples, 0.07%)</title><rect x="173.4" y="515.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (15 samples, 0.06%)</title><rect x="173.5" y="499.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="176.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (12 samples, 0.05%)</title><rect x="173.6" y="483.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="176.6" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (7 samples, 0.03%)</title><rect x="173.6" y="467.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$12/242355057.accept (7 samples, 0.03%)</title><rect x="173.6" y="451.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.6" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (7 samples, 0.03%)</title><rect x="173.6" y="435.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.6" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (7 samples, 0.03%)</title><rect x="173.6" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.6" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (7 samples, 0.03%)</title><rect x="173.6" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.6" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (7 samples, 0.03%)</title><rect x="173.6" y="387.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.6" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.03%)</title><rect x="173.6" y="371.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.6" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (6 samples, 0.02%)</title><rect x="174.2" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.2" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (18,826 samples, 76.81%)</title><rect x="175.0" y="627.0" width="906.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.0" y="638.0">java/util/Collections$UnmodifiableMap.forEach</text>
</g>
<g>
<title>java/util/TreeMap.forEach (18,826 samples, 76.81%)</title><rect x="175.0" y="611.0" width="906.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.0" y="622.0">java/util/TreeMap.forEach</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$175/1915527538.accept (18,817 samples, 76.77%)</title><rect x="175.4" y="595.0" width="905.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.4" y="606.0">ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$175/1915527538.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.lambda$cellsIterator$2 (18,812 samples, 76.75%)</title><rect x="175.7" y="579.0" width="905.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="178.7" y="590.0">ru/mail/polis/dao/s3ponia/PersistenceDAO.lambda$cellsIterator$2</text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.02%)</title><rect x="175.8" y="563.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="178.8" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.02%)</title><rect x="175.8" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="178.8" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (6 samples, 0.02%)</title><rect x="175.8" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.iterator (18,802 samples, 76.71%)</title><rect x="176.1" y="563.0" width="905.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.1" y="574.0">ru/mail/polis/dao/s3ponia/DiskTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.&lt;init&gt; (18,802 samples, 76.71%)</title><rect x="176.1" y="547.0" width="905.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.1" y="558.0">ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getElementIndex (18,801 samples, 76.70%)</title><rect x="176.2" y="531.0" width="905.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.2" y="542.0">ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getElementIndex</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (163 samples, 0.67%)</title><rect x="179.1" y="515.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.1" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.02%)</title><rect x="181.6" y="499.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.6" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (100 samples, 0.41%)</title><rect x="181.9" y="499.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.9" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (22 samples, 0.09%)</title><rect x="185.6" y="483.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.6" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.02%)</title><rect x="186.7" y="499.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.7" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.02%)</title><rect x="186.7" y="483.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.7" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (18,575 samples, 75.78%)</title><rect x="187.0" y="515.0" width="894.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.0" y="526.0">ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (18,570 samples, 75.76%)</title><rect x="187.2" y="499.0" width="894.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.2" y="510.0">ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.&lt;init&gt; (18,569 samples, 75.76%)</title><rect x="187.3" y="483.0" width="893.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.3" y="494.0">ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readKey (6,875 samples, 28.05%)</title><rect x="187.3" y="467.0" width="330.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.3" y="478.0">ru/mail/polis/dao/s3ponia/DiskTable$LazyCell...</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (41 samples, 0.17%)</title><rect x="187.5" y="451.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (7 samples, 0.03%)</title><rect x="189.5" y="451.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (6,818 samples, 27.82%)</title><rect x="190.0" y="451.0" width="328.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.0" y="462.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (6,807 samples, 27.77%)</title><rect x="190.5" y="435.0" width="327.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.5" y="446.0">sun/nio/ch/FileChannelImpl.readInternal</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (245 samples, 1.00%)</title><rect x="195.8" y="419.0" width="11.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="198.8" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (242 samples, 0.99%)</title><rect x="195.9" y="403.0" width="11.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.9" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (12 samples, 0.05%)</title><rect x="201.1" y="387.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.1" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (117 samples, 0.48%)</title><rect x="201.7" y="387.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.7" y="398.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (81 samples, 0.33%)</title><rect x="202.8" y="371.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.8" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (81 samples, 0.33%)</title><rect x="202.8" y="355.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.8" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.03%)</title><rect x="205.7" y="339.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="208.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/SharedSecrets.getJavaLangAccess (14 samples, 0.06%)</title><rect x="206.7" y="371.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="209.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (164 samples, 0.67%)</title><rect x="207.6" y="419.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="210.6" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (163 samples, 0.67%)</title><rect x="207.6" y="403.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.6" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (98 samples, 0.40%)</title><rect x="210.8" y="387.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.8" y="398.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (62 samples, 0.25%)</title><rect x="212.4" y="371.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (62 samples, 0.25%)</title><rect x="212.4" y="355.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="215.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4,302 samples, 17.55%)</title><rect x="215.6" y="419.0" width="207.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.6" y="430.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (425 samples, 1.73%)</title><rect x="216.9" y="403.0" width="20.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.9" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (395 samples, 1.61%)</title><rect x="218.4" y="387.0" width="19.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (360 samples, 1.47%)</title><rect x="219.7" y="371.0" width="17.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.7" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (222 samples, 0.91%)</title><rect x="226.3" y="355.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.3" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (55 samples, 0.22%)</title><rect x="226.3" y="339.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.3" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (7 samples, 0.03%)</title><rect x="229.0" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (160 samples, 0.65%)</title><rect x="229.3" y="339.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3,451 samples, 14.08%)</title><rect x="237.5" y="403.0" width="166.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.5" y="414.0">sun/nio/ch/IOUtil.rea..</text>
</g>
<g>
<title>java/nio/Buffer.position (17 samples, 0.07%)</title><rect x="239.8" y="387.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.8" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (14 samples, 0.06%)</title><rect x="240.6" y="387.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.6" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (13 samples, 0.05%)</title><rect x="240.6" y="371.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (13 samples, 0.05%)</title><rect x="240.6" y="355.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.6" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (13 samples, 0.05%)</title><rect x="240.6" y="339.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (3,372 samples, 13.76%)</title><rect x="241.3" y="387.0" width="162.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.3" y="398.0">sun/nio/ch/FileDispat..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (3,365 samples, 13.73%)</title><rect x="241.6" y="371.0" width="162.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.6" y="382.0">sun/nio/ch/FileDispat..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (220 samples, 0.90%)</title><rect x="247.3" y="355.0" width="10.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="250.3" y="366.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.02%)</title><rect x="249.1" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="252.1" y="350.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (8 samples, 0.03%)</title><rect x="249.4" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="252.4" y="350.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (15 samples, 0.06%)</title><rect x="249.7" y="339.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="252.7" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (23 samples, 0.09%)</title><rect x="250.5" y="339.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="253.5" y="350.0"></text>
</g>
<g>
<title>jni_GetIntField (120 samples, 0.49%)</title><rect x="251.8" y="339.0" width="5.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="254.8" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (48 samples, 0.20%)</title><rect x="255.3" y="323.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="258.3" y="334.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (7 samples, 0.03%)</title><rect x="257.6" y="339.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="260.6" y="350.0"></text>
</g>
<g>
<title>__pread64 (2,911 samples, 11.88%)</title><rect x="257.9" y="355.0" width="140.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="260.9" y="366.0">__pread64</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2,674 samples, 10.91%)</title><rect x="269.3" y="339.0" width="128.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="272.3" y="350.0">entry_SYSCALL_64..</text>
</g>
<g>
<title>do_syscall_64 (2,674 samples, 10.91%)</title><rect x="269.3" y="323.0" width="128.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="272.3" y="334.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_pread64 (45 samples, 0.18%)</title><rect x="283.4" y="307.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="286.4" y="318.0"></text>
</g>
<g>
<title>ksys_pread64 (2,336 samples, 9.53%)</title><rect x="285.6" y="307.0" width="112.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="288.6" y="318.0">ksys_pread64</text>
</g>
<g>
<title>__fget_light (360 samples, 1.47%)</title><rect x="286.4" y="291.0" width="17.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="289.4" y="302.0"></text>
</g>
<g>
<title>__fget (324 samples, 1.32%)</title><rect x="288.2" y="275.0" width="15.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="291.2" y="286.0"></text>
</g>
<g>
<title>fput_many (52 samples, 0.21%)</title><rect x="304.0" y="291.0" width="2.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="307.0" y="302.0"></text>
</g>
<g>
<title>vfs_read (1,903 samples, 7.76%)</title><rect x="306.5" y="291.0" width="91.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="309.5" y="302.0">vfs_read</text>
</g>
<g>
<title>__fsnotify_parent (38 samples, 0.16%)</title><rect x="308.9" y="275.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="311.9" y="286.0"></text>
</g>
<g>
<title>__vfs_read (46 samples, 0.19%)</title><rect x="310.7" y="275.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="313.7" y="286.0"></text>
</g>
<g>
<title>fsnotify (179 samples, 0.73%)</title><rect x="313.0" y="275.0" width="8.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="316.0" y="286.0"></text>
</g>
<g>
<title>new_sync_read (1,307 samples, 5.33%)</title><rect x="321.6" y="275.0" width="62.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="324.6" y="286.0">new_sy..</text>
</g>
<g>
<title>ext4_file_read_iter?[ext4] (111 samples, 0.45%)</title><rect x="327.0" y="259.0" width="5.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="330.0" y="270.0"></text>
</g>
<g>
<title>generic_file_read_iter (1,067 samples, 4.35%)</title><rect x="332.4" y="259.0" width="51.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="335.4" y="270.0">gener..</text>
</g>
<g>
<title>_cond_resched (10 samples, 0.04%)</title><rect x="347.4" y="243.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="350.4" y="254.0"></text>
</g>
<g>
<title>copy_page_to_iter (340 samples, 1.39%)</title><rect x="347.9" y="243.0" width="16.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="350.9" y="254.0"></text>
</g>
<g>
<title>_cond_resched (14 samples, 0.06%)</title><rect x="351.2" y="227.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="354.2" y="238.0"></text>
</g>
<g>
<title>copyout (257 samples, 1.05%)</title><rect x="351.9" y="227.0" width="12.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="354.9" y="238.0"></text>
</g>
<g>
<title>copy_user_generic_string (240 samples, 0.98%)</title><rect x="352.7" y="211.0" width="11.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="355.7" y="222.0"></text>
</g>
<g>
<title>mark_page_accessed (23 samples, 0.09%)</title><rect x="364.3" y="243.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="367.3" y="254.0"></text>
</g>
<g>
<title>pagecache_get_page (262 samples, 1.07%)</title><rect x="365.4" y="243.0" width="12.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="368.4" y="254.0"></text>
</g>
<g>
<title>find_get_entry (229 samples, 0.93%)</title><rect x="367.0" y="227.0" width="11.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="370.0" y="238.0"></text>
</g>
<g>
<title>xas_load (97 samples, 0.40%)</title><rect x="373.3" y="211.0" width="4.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="376.3" y="222.0"></text>
</g>
<g>
<title>xas_start (40 samples, 0.16%)</title><rect x="376.1" y="195.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="379.1" y="206.0"></text>
</g>
<g>
<title>touch_atime (119 samples, 0.49%)</title><rect x="378.0" y="243.0" width="5.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="381.0" y="254.0"></text>
</g>
<g>
<title>atime_needs_update (25 samples, 0.10%)</title><rect x="382.5" y="227.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="385.5" y="238.0"></text>
</g>
<g>
<title>iov_iter_init (16 samples, 0.07%)</title><rect x="383.7" y="259.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="386.7" y="270.0"></text>
</g>
<g>
<title>security_file_permission (279 samples, 1.14%)</title><rect x="384.6" y="275.0" width="13.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="387.6" y="286.0"></text>
</g>
<g>
<title>__fsnotify_parent (47 samples, 0.19%)</title><rect x="387.4" y="259.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="390.4" y="270.0"></text>
</g>
<g>
<title>selinux_file_permission (175 samples, 0.71%)</title><rect x="389.6" y="259.0" width="8.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="392.6" y="270.0"></text>
</g>
<g>
<title>__inode_security_revalidate (19 samples, 0.08%)</title><rect x="396.8" y="243.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="399.8" y="254.0"></text>
</g>
<g>
<title>avc_policy_seqno (7 samples, 0.03%)</title><rect x="397.7" y="243.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="400.7" y="254.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (38 samples, 0.16%)</title><rect x="398.1" y="355.0" width="1.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="401.1" y="366.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (31 samples, 0.13%)</title><rect x="399.9" y="355.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="402.9" y="366.0"></text>
</g>
<g>
<title>convertReturnVal (23 samples, 0.09%)</title><rect x="401.4" y="355.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="404.4" y="366.0"></text>
</g>
<g>
<title>fdval (18 samples, 0.07%)</title><rect x="402.5" y="355.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="405.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (113 samples, 0.46%)</title><rect x="403.6" y="403.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.6" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (51 samples, 0.21%)</title><rect x="404.7" y="387.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="407.7" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (34 samples, 0.14%)</title><rect x="405.5" y="371.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="408.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (39 samples, 0.16%)</title><rect x="407.2" y="387.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="410.2" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.02%)</title><rect x="408.8" y="371.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.8" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.02%)</title><rect x="408.8" y="355.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.02%)</title><rect x="408.8" y="339.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.8" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (6 samples, 0.02%)</title><rect x="408.8" y="323.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (283 samples, 1.15%)</title><rect x="409.0" y="403.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="412.0" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (17 samples, 0.07%)</title><rect x="417.0" y="387.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="420.0" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (13 samples, 0.05%)</title><rect x="417.0" y="371.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="420.0" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (84 samples, 0.34%)</title><rect x="417.8" y="387.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="420.8" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (84 samples, 0.34%)</title><rect x="417.8" y="371.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (48 samples, 0.20%)</title><rect x="419.5" y="355.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="422.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.isBufferTooLarge (17 samples, 0.07%)</title><rect x="421.9" y="387.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="424.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1,218 samples, 4.97%)</title><rect x="422.7" y="419.0" width="58.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="425.7" y="430.0">sun/ni..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (288 samples, 1.17%)</title><rect x="452.6" y="403.0" width="13.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="455.6" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (249 samples, 1.02%)</title><rect x="453.0" y="387.0" width="11.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="456.0" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (167 samples, 0.68%)</title><rect x="455.8" y="371.0" width="8.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="458.8" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (7 samples, 0.03%)</title><rect x="463.5" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="466.5" y="366.0"></text>
</g>
<g>
<title>SpinPause (23 samples, 0.09%)</title><rect x="463.8" y="371.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="466.8" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (28 samples, 0.11%)</title><rect x="464.9" y="387.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="467.9" y="398.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (21 samples, 0.09%)</title><rect x="465.0" y="371.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="468.0" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (29 samples, 0.12%)</title><rect x="466.5" y="403.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="469.5" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (22 samples, 0.09%)</title><rect x="466.6" y="387.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="469.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (275 samples, 1.12%)</title><rect x="468.1" y="403.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.1" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (177 samples, 0.72%)</title><rect x="472.5" y="387.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="475.5" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (167 samples, 0.68%)</title><rect x="472.9" y="371.0" width="8.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="475.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (761 samples, 3.10%)</title><rect x="481.3" y="419.0" width="36.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="484.3" y="430.0">sun..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (294 samples, 1.20%)</title><rect x="499.8" y="403.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="502.8" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (10 samples, 0.04%)</title><rect x="500.1" y="387.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="503.1" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (258 samples, 1.05%)</title><rect x="500.6" y="387.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="503.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (163 samples, 0.67%)</title><rect x="503.2" y="371.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="506.2" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (9 samples, 0.04%)</title><rect x="510.6" y="355.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="513.6" y="366.0"></text>
</g>
<g>
<title>SpinPause (41 samples, 0.17%)</title><rect x="511.0" y="371.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="514.0" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (19 samples, 0.08%)</title><rect x="513.0" y="387.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="516.0" y="398.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (7 samples, 0.03%)</title><rect x="513.1" y="371.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="516.1" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (9 samples, 0.04%)</title><rect x="513.5" y="371.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="516.5" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.02%)</title><rect x="514.0" y="403.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="517.0" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (6 samples, 0.02%)</title><rect x="514.0" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="517.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (74 samples, 0.30%)</title><rect x="514.4" y="403.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="517.4" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (74 samples, 0.30%)</title><rect x="514.4" y="387.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="517.4" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (67 samples, 0.27%)</title><rect x="514.7" y="371.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="517.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.02%)</title><rect x="517.9" y="419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readValue (11,694 samples, 47.71%)</title><rect x="518.2" y="467.0" width="563.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="521.2" y="478.0">ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readValue</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (75 samples, 0.31%)</title><rect x="518.5" y="451.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="521.5" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (7 samples, 0.03%)</title><rect x="518.5" y="435.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="521.5" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (7 samples, 0.03%)</title><rect x="518.5" y="419.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="521.5" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (7 samples, 0.03%)</title><rect x="518.5" y="403.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="521.5" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.03%)</title><rect x="518.5" y="387.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="521.5" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (7 samples, 0.03%)</title><rect x="518.5" y="371.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="521.5" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (6 samples, 0.02%)</title><rect x="518.6" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="521.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (68 samples, 0.28%)</title><rect x="518.9" y="435.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="521.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (62 samples, 0.25%)</title><rect x="519.1" y="419.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.1" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (16 samples, 0.07%)</title><rect x="521.3" y="403.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="524.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.03%)</title><rect x="521.7" y="387.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="524.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.02%)</title><rect x="521.8" y="371.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (11,611 samples, 47.37%)</title><rect x="522.2" y="451.0" width="559.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="525.2" y="462.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (11,589 samples, 47.28%)</title><rect x="523.3" y="435.0" width="557.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.3" y="446.0">sun/nio/ch/FileChannelImpl.readInternal</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (77 samples, 0.31%)</title><rect x="523.8" y="419.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="526.8" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (65 samples, 0.27%)</title><rect x="524.3" y="403.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.3" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (39 samples, 0.16%)</title><rect x="525.6" y="387.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.6" y="398.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (20 samples, 0.08%)</title><rect x="526.5" y="371.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="529.5" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (19 samples, 0.08%)</title><rect x="526.5" y="355.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="529.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8,983 samples, 36.65%)</title><rect x="527.5" y="419.0" width="432.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="530.5" y="430.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3,376 samples, 13.77%)</title><rect x="530.9" y="403.0" width="162.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="533.9" y="414.0">java/nio/HeapByteBuff..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3,372 samples, 13.76%)</title><rect x="531.1" y="387.0" width="162.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="534.1" y="398.0">java/nio/DirectByteBu..</text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2,691 samples, 10.98%)</title><rect x="531.2" y="371.0" width="129.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="534.2" y="382.0">java/nio/ByteBuf..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2,691 samples, 10.98%)</title><rect x="531.2" y="355.0" width="129.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.2" y="366.0">java/nio/DirectB..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (28 samples, 0.11%)</title><rect x="647.9" y="339.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="650.9" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (20 samples, 0.08%)</title><rect x="648.1" y="323.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="651.1" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (27 samples, 0.11%)</title><rect x="649.4" y="339.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="652.4" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (71 samples, 0.29%)</title><rect x="650.7" y="339.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (8 samples, 0.03%)</title><rect x="654.4" y="339.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="657.4" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (9 samples, 0.04%)</title><rect x="655.0" y="339.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="658.0" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (16 samples, 0.07%)</title><rect x="655.6" y="339.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="658.6" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (10 samples, 0.04%)</title><rect x="656.3" y="339.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.3" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (18 samples, 0.07%)</title><rect x="656.8" y="339.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="659.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (16 samples, 0.07%)</title><rect x="658.5" y="339.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="661.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (20 samples, 0.08%)</title><rect x="659.4" y="339.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="662.4" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (28 samples, 0.11%)</title><rect x="660.8" y="371.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="663.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (28 samples, 0.11%)</title><rect x="660.8" y="355.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.8" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.03%)</title><rect x="660.9" y="339.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.9" y="350.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.03%)</title><rect x="661.6" y="339.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="664.6" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (651 samples, 2.66%)</title><rect x="662.1" y="371.0" width="31.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="665.1" y="382.0">jd..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (648 samples, 2.64%)</title><rect x="662.3" y="355.0" width="31.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.3" y="366.0">jd..</text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (9 samples, 0.04%)</title><rect x="689.5" y="339.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="692.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (72 samples, 0.29%)</title><rect x="690.0" y="339.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="693.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (67 samples, 0.27%)</title><rect x="690.2" y="323.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.2" y="334.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (22 samples, 0.09%)</title><rect x="692.4" y="307.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="695.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (5,278 samples, 21.53%)</title><rect x="693.5" y="403.0" width="254.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="696.5" y="414.0">sun/nio/ch/IOUtil.readIntoNativeBu..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (30 samples, 0.12%)</title><rect x="694.1" y="387.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="697.1" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (30 samples, 0.12%)</title><rect x="694.1" y="371.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="697.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (30 samples, 0.12%)</title><rect x="694.1" y="355.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.1" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (24 samples, 0.10%)</title><rect x="694.3" y="339.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="697.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (5,235 samples, 21.36%)</title><rect x="695.5" y="387.0" width="252.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="698.5" y="398.0">sun/nio/ch/FileDispatcherImpl.pread</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (5,227 samples, 21.33%)</title><rect x="695.9" y="371.0" width="251.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="698.9" y="382.0">sun/nio/ch/FileDispatcherImpl.pre..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (357 samples, 1.46%)</title><rect x="703.8" y="355.0" width="17.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="706.8" y="366.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (9 samples, 0.04%)</title><rect x="705.8" y="339.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="708.8" y="350.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (15 samples, 0.06%)</title><rect x="706.3" y="339.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="709.3" y="350.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (32 samples, 0.13%)</title><rect x="707.0" y="339.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="710.0" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (36 samples, 0.15%)</title><rect x="708.5" y="339.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="711.5" y="350.0"></text>
</g>
<g>
<title>fdval (11 samples, 0.04%)</title><rect x="710.3" y="339.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="713.3" y="350.0"></text>
</g>
<g>
<title>jni_GetIntField (189 samples, 0.77%)</title><rect x="710.8" y="339.0" width="9.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="713.8" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (76 samples, 0.31%)</title><rect x="716.2" y="323.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="719.2" y="334.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;0ul, false&gt;(_jobject*) (22 samples, 0.09%)</title><rect x="719.9" y="339.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="722.9" y="350.0"></text>
</g>
<g>
<title>__pread64 (4,533 samples, 18.49%)</title><rect x="721.0" y="355.0" width="218.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="724.0" y="366.0">__pread64</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4,200 samples, 17.14%)</title><rect x="737.0" y="339.0" width="202.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="740.0" y="350.0">entry_SYSCALL_64_after_hwf..</text>
</g>
<g>
<title>do_syscall_64 (4,200 samples, 17.14%)</title><rect x="737.0" y="323.0" width="202.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="740.0" y="334.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_pread64 (66 samples, 0.27%)</title><rect x="759.9" y="307.0" width="3.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="762.9" y="318.0"></text>
</g>
<g>
<title>ksys_pread64 (3,657 samples, 14.92%)</title><rect x="763.1" y="307.0" width="176.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="766.1" y="318.0">ksys_pread64</text>
</g>
<g>
<title>__fget_light (606 samples, 2.47%)</title><rect x="764.6" y="291.0" width="29.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="767.6" y="302.0">__..</text>
</g>
<g>
<title>__fget (550 samples, 2.24%)</title><rect x="767.3" y="275.0" width="26.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="770.3" y="286.0">_..</text>
</g>
<g>
<title>fput_many (87 samples, 0.35%)</title><rect x="793.8" y="291.0" width="4.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="796.8" y="302.0"></text>
</g>
<g>
<title>vfs_read (2,932 samples, 11.96%)</title><rect x="798.0" y="291.0" width="141.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="801.0" y="302.0">vfs_read</text>
</g>
<g>
<title>__fsnotify_parent (43 samples, 0.18%)</title><rect x="802.5" y="275.0" width="2.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="805.5" y="286.0"></text>
</g>
<g>
<title>__vfs_read (72 samples, 0.29%)</title><rect x="804.5" y="275.0" width="3.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="807.5" y="286.0"></text>
</g>
<g>
<title>fsnotify (233 samples, 0.95%)</title><rect x="808.0" y="275.0" width="11.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="811.0" y="286.0"></text>
</g>
<g>
<title>new_sync_read (2,067 samples, 8.43%)</title><rect x="819.2" y="275.0" width="99.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="822.2" y="286.0">new_sync_read</text>
</g>
<g>
<title>ext4_file_read_iter?[ext4] (161 samples, 0.66%)</title><rect x="825.2" y="259.0" width="7.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="828.2" y="270.0"></text>
</g>
<g>
<title>generic_file_read_iter (1,758 samples, 7.17%)</title><rect x="832.9" y="259.0" width="84.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="835.9" y="270.0">generic_fi..</text>
</g>
<g>
<title>_cond_resched (11 samples, 0.04%)</title><rect x="855.7" y="243.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="858.7" y="254.0"></text>
</g>
<g>
<title>copy_page_to_iter (512 samples, 2.09%)</title><rect x="856.2" y="243.0" width="24.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="859.2" y="254.0">c..</text>
</g>
<g>
<title>_cond_resched (23 samples, 0.09%)</title><rect x="862.7" y="227.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="865.7" y="238.0"></text>
</g>
<g>
<title>copyout (353 samples, 1.44%)</title><rect x="863.8" y="227.0" width="17.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="866.8" y="238.0"></text>
</g>
<g>
<title>copy_user_generic_string (332 samples, 1.35%)</title><rect x="864.9" y="211.0" width="15.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="867.9" y="222.0"></text>
</g>
<g>
<title>mark_page_accessed (31 samples, 0.13%)</title><rect x="880.8" y="243.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="883.8" y="254.0"></text>
</g>
<g>
<title>pagecache_get_page (523 samples, 2.13%)</title><rect x="882.3" y="243.0" width="25.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="885.3" y="254.0">p..</text>
</g>
<g>
<title>find_get_entry (495 samples, 2.02%)</title><rect x="883.7" y="227.0" width="23.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="886.7" y="238.0">f..</text>
</g>
<g>
<title>xas_load (176 samples, 0.72%)</title><rect x="899.0" y="211.0" width="8.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="902.0" y="222.0"></text>
</g>
<g>
<title>xas_start (64 samples, 0.26%)</title><rect x="904.4" y="195.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="907.4" y="206.0"></text>
</g>
<g>
<title>touch_atime (209 samples, 0.85%)</title><rect x="907.5" y="243.0" width="10.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="910.5" y="254.0"></text>
</g>
<g>
<title>atime_needs_update (40 samples, 0.16%)</title><rect x="915.6" y="227.0" width="2.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="918.6" y="238.0"></text>
</g>
<g>
<title>iov_iter_init (24 samples, 0.10%)</title><rect x="917.6" y="259.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="920.6" y="270.0"></text>
</g>
<g>
<title>rw_verify_area (11 samples, 0.04%)</title><rect x="918.7" y="275.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="921.7" y="286.0"></text>
</g>
<g>
<title>security_file_permission (414 samples, 1.69%)</title><rect x="919.3" y="275.0" width="19.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="922.3" y="286.0"></text>
</g>
<g>
<title>__fsnotify_parent (66 samples, 0.27%)</title><rect x="922.6" y="259.0" width="3.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="925.6" y="270.0"></text>
</g>
<g>
<title>selinux_file_permission (277 samples, 1.13%)</title><rect x="925.8" y="259.0" width="13.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="928.8" y="270.0"></text>
</g>
<g>
<title>__inode_security_revalidate (51 samples, 0.21%)</title><rect x="936.7" y="243.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="939.7" y="254.0"></text>
</g>
<g>
<title>_cond_resched (22 samples, 0.09%)</title><rect x="938.1" y="227.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="941.1" y="238.0"></text>
</g>
<g>
<title>rcu_all_qs (17 samples, 0.07%)</title><rect x="938.3" y="211.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="941.3" y="222.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (53 samples, 0.22%)</title><rect x="939.2" y="355.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="942.2" y="366.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (66 samples, 0.27%)</title><rect x="941.7" y="355.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="944.7" y="366.0"></text>
</g>
<g>
<title>convertReturnVal (30 samples, 0.12%)</title><rect x="944.9" y="355.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="947.9" y="366.0"></text>
</g>
<g>
<title>fdval (18 samples, 0.07%)</title><rect x="946.4" y="355.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="949.4" y="366.0"></text>
</g>
<g>
<title>pread64@plt (6 samples, 0.02%)</title><rect x="947.3" y="355.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="950.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (186 samples, 0.76%)</title><rect x="947.6" y="403.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="950.6" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (61 samples, 0.25%)</title><rect x="950.2" y="387.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="953.2" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (43 samples, 0.18%)</title><rect x="951.0" y="371.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="954.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (71 samples, 0.29%)</title><rect x="953.1" y="387.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="956.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (71 samples, 0.29%)</title><rect x="956.5" y="403.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="959.5" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (65 samples, 0.27%)</title><rect x="956.5" y="387.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="959.5" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (65 samples, 0.27%)</title><rect x="956.5" y="371.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="959.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1,895 samples, 7.73%)</title><rect x="959.9" y="419.0" width="91.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="962.9" y="430.0">sun/nio/ch/..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (497 samples, 2.03%)</title><rect x="1005.5" y="403.0" width="23.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1008.5" y="414.0">S..</text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (16 samples, 0.07%)</title><rect x="1005.8" y="387.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.8" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (432 samples, 1.76%)</title><rect x="1006.6" y="387.0" width="20.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1009.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (285 samples, 1.16%)</title><rect x="1011.0" y="371.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.0" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (20 samples, 0.08%)</title><rect x="1023.7" y="355.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1026.7" y="366.0"></text>
</g>
<g>
<title>SpinPause (56 samples, 0.23%)</title><rect x="1024.7" y="371.0" width="2.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1027.7" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (37 samples, 0.15%)</title><rect x="1027.4" y="387.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1030.4" y="398.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (29 samples, 0.12%)</title><rect x="1027.4" y="371.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.4" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (8 samples, 0.03%)</title><rect x="1028.8" y="371.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1031.8" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (34 samples, 0.14%)</title><rect x="1029.4" y="403.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1032.4" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (27 samples, 0.11%)</title><rect x="1029.6" y="387.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (415 samples, 1.69%)</title><rect x="1031.2" y="403.0" width="20.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1034.2" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (257 samples, 1.05%)</title><rect x="1038.6" y="387.0" width="12.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1041.6" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (234 samples, 0.95%)</title><rect x="1039.6" y="371.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (624 samples, 2.55%)</title><rect x="1051.2" y="419.0" width="30.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1054.2" y="430.0">su..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (394 samples, 1.61%)</title><rect x="1053.7" y="403.0" width="18.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.7" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (12 samples, 0.05%)</title><rect x="1053.9" y="387.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.9" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (333 samples, 1.36%)</title><rect x="1054.5" y="387.0" width="16.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.5" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (209 samples, 0.85%)</title><rect x="1058.9" y="371.0" width="10.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.9" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (15 samples, 0.06%)</title><rect x="1068.2" y="355.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.2" y="366.0"></text>
</g>
<g>
<title>SpinPause (31 samples, 0.13%)</title><rect x="1068.9" y="371.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1071.9" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (34 samples, 0.14%)</title><rect x="1070.6" y="387.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.6" y="398.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (31 samples, 0.13%)</title><rect x="1070.7" y="371.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.7" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (8 samples, 0.03%)</title><rect x="1072.2" y="387.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (177 samples, 0.72%)</title><rect x="1072.7" y="403.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1075.7" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (172 samples, 0.70%)</title><rect x="1072.9" y="387.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.9" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (164 samples, 0.67%)</title><rect x="1073.2" y="371.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (23 samples, 0.09%)</title><rect x="1081.4" y="627.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1084.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (23 samples, 0.09%)</title><rect x="1081.4" y="611.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1084.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (9 samples, 0.04%)</title><rect x="1081.5" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1084.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (7 samples, 0.03%)</title><rect x="1081.6" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1084.6" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (7 samples, 0.03%)</title><rect x="1081.6" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1084.6" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (7 samples, 0.03%)</title><rect x="1081.6" y="547.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1084.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (13 samples, 0.05%)</title><rect x="1081.9" y="595.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1084.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (212 samples, 0.86%)</title><rect x="1082.5" y="627.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1085.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (212 samples, 0.86%)</title><rect x="1082.5" y="611.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1085.5" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (212 samples, 0.86%)</title><rect x="1082.5" y="595.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1085.5" y="606.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (28 samples, 0.11%)</title><rect x="1082.6" y="579.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1085.6" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (28 samples, 0.11%)</title><rect x="1082.6" y="563.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1085.6" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (26 samples, 0.11%)</title><rect x="1082.7" y="547.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1085.7" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (26 samples, 0.11%)</title><rect x="1082.7" y="531.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1085.7" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (26 samples, 0.11%)</title><rect x="1082.7" y="515.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1085.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$178/1664825914.compare (22 samples, 0.09%)</title><rect x="1082.9" y="499.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1085.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell.compareTo (22 samples, 0.09%)</title><rect x="1082.9" y="483.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1085.9" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$205/1688686519.compare (18 samples, 0.07%)</title><rect x="1082.9" y="467.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1085.9" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (18 samples, 0.07%)</title><rect x="1082.9" y="451.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1085.9" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$189/630867340.compare (17 samples, 0.07%)</title><rect x="1082.9" y="435.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1085.9" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (17 samples, 0.07%)</title><rect x="1082.9" y="419.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1085.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.04%)</title><rect x="1082.9" y="403.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1085.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.04%)</title><rect x="1083.0" y="387.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.0" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.03%)</title><rect x="1083.0" y="371.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1086.0" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (183 samples, 0.75%)</title><rect x="1083.9" y="579.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1086.9" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (183 samples, 0.75%)</title><rect x="1083.9" y="563.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1086.9" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (183 samples, 0.75%)</title><rect x="1083.9" y="547.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1086.9" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (183 samples, 0.75%)</title><rect x="1083.9" y="531.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.9" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (183 samples, 0.75%)</title><rect x="1083.9" y="515.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1086.9" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (183 samples, 0.75%)</title><rect x="1083.9" y="499.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1086.9" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (180 samples, 0.73%)</title><rect x="1083.9" y="483.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1086.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (176 samples, 0.72%)</title><rect x="1084.1" y="467.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1087.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (176 samples, 0.72%)</title><rect x="1084.1" y="451.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1087.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (176 samples, 0.72%)</title><rect x="1084.1" y="435.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1087.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (176 samples, 0.72%)</title><rect x="1084.1" y="419.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1087.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.&lt;init&gt; (176 samples, 0.72%)</title><rect x="1084.1" y="403.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1087.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readKey (68 samples, 0.28%)</title><rect x="1084.1" y="387.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1087.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (67 samples, 0.27%)</title><rect x="1084.2" y="371.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1087.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (67 samples, 0.27%)</title><rect x="1084.2" y="355.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1087.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 0.17%)</title><rect x="1084.4" y="339.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1087.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 0.15%)</title><rect x="1084.5" y="323.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1087.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (35 samples, 0.14%)</title><rect x="1084.5" y="307.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1087.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (35 samples, 0.14%)</title><rect x="1084.5" y="291.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1087.5" y="302.0"></text>
</g>
<g>
<title>__pread64 (30 samples, 0.12%)</title><rect x="1084.7" y="275.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1087.7" y="286.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (29 samples, 0.12%)</title><rect x="1084.8" y="259.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1087.8" y="270.0"></text>
</g>
<g>
<title>do_syscall_64 (29 samples, 0.12%)</title><rect x="1084.8" y="243.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1087.8" y="254.0"></text>
</g>
<g>
<title>ksys_pread64 (25 samples, 0.10%)</title><rect x="1085.0" y="227.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1088.0" y="238.0"></text>
</g>
<g>
<title>vfs_read (20 samples, 0.08%)</title><rect x="1085.2" y="211.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1088.2" y="222.0"></text>
</g>
<g>
<title>new_sync_read (17 samples, 0.07%)</title><rect x="1085.2" y="195.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1088.2" y="206.0"></text>
</g>
<g>
<title>generic_file_read_iter (14 samples, 0.06%)</title><rect x="1085.4" y="179.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1088.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (14 samples, 0.06%)</title><rect x="1086.4" y="339.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1089.4" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.03%)</title><rect x="1086.6" y="323.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (8 samples, 0.03%)</title><rect x="1087.0" y="339.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1090.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readValue (108 samples, 0.44%)</title><rect x="1087.4" y="387.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1090.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (107 samples, 0.44%)</title><rect x="1087.5" y="371.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1090.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (106 samples, 0.43%)</title><rect x="1087.5" y="355.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1090.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (79 samples, 0.32%)</title><rect x="1087.7" y="339.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1090.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (33 samples, 0.13%)</title><rect x="1087.7" y="323.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1090.7" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (33 samples, 0.13%)</title><rect x="1087.7" y="307.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1090.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (28 samples, 0.11%)</title><rect x="1087.7" y="291.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1090.7" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (28 samples, 0.11%)</title><rect x="1087.7" y="275.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1090.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (43 samples, 0.18%)</title><rect x="1089.2" y="323.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1092.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (43 samples, 0.18%)</title><rect x="1089.2" y="307.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1092.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (43 samples, 0.18%)</title><rect x="1089.2" y="291.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1092.2" y="302.0"></text>
</g>
<g>
<title>__pread64 (37 samples, 0.15%)</title><rect x="1089.4" y="275.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1092.4" y="286.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (33 samples, 0.13%)</title><rect x="1089.6" y="259.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1092.6" y="270.0"></text>
</g>
<g>
<title>do_syscall_64 (33 samples, 0.13%)</title><rect x="1089.6" y="243.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1092.6" y="254.0"></text>
</g>
<g>
<title>ksys_pread64 (32 samples, 0.13%)</title><rect x="1089.7" y="227.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1092.7" y="238.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.03%)</title><rect x="1089.7" y="211.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1092.7" y="222.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.02%)</title><rect x="1089.8" y="195.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1092.8" y="206.0"></text>
</g>
<g>
<title>vfs_read (23 samples, 0.09%)</title><rect x="1090.1" y="211.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1093.1" y="222.0"></text>
</g>
<g>
<title>new_sync_read (19 samples, 0.08%)</title><rect x="1090.2" y="195.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1093.2" y="206.0"></text>
</g>
<g>
<title>generic_file_read_iter (17 samples, 0.07%)</title><rect x="1090.3" y="179.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1093.3" y="190.0"></text>
</g>
<g>
<title>copy_page_to_iter (7 samples, 0.03%)</title><rect x="1090.4" y="163.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1093.4" y="174.0"></text>
</g>
<g>
<title>copyout (6 samples, 0.02%)</title><rect x="1090.5" y="147.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1093.5" y="158.0"></text>
</g>
<g>
<title>copy_user_generic_string (6 samples, 0.02%)</title><rect x="1090.5" y="131.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1093.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (19 samples, 0.08%)</title><rect x="1091.5" y="339.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1094.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.iterator (73 samples, 0.30%)</title><rect x="1092.8" y="627.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1095.8" y="638.0"></text>
</g>
<g>
<title>java/util/Collection.stream (59 samples, 0.24%)</title><rect x="1092.8" y="611.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1095.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (58 samples, 0.24%)</title><rect x="1092.8" y="595.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1095.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (58 samples, 0.24%)</title><rect x="1092.8" y="579.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1095.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (58 samples, 0.24%)</title><rect x="1092.8" y="563.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1095.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (57 samples, 0.23%)</title><rect x="1092.8" y="547.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1095.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (54 samples, 0.22%)</title><rect x="1092.9" y="531.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1095.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6 samples, 0.02%)</title><rect x="1093.0" y="515.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1096.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (47 samples, 0.19%)</title><rect x="1093.3" y="515.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1096.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (23 samples, 0.09%)</title><rect x="1094.4" y="499.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1097.4" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (23 samples, 0.09%)</title><rect x="1094.4" y="483.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1097.4" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (19 samples, 0.08%)</title><rect x="1094.6" y="467.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1097.6" y="478.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 0.06%)</title><rect x="1094.7" y="451.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1097.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (11 samples, 0.04%)</title><rect x="1096.4" y="723.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1099.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.04%)</title><rect x="1096.4" y="707.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1099.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.04%)</title><rect x="1096.4" y="691.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1099.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.04%)</title><rect x="1096.5" y="675.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1099.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (51 samples, 0.21%)</title><rect x="1096.9" y="723.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1099.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (50 samples, 0.20%)</title><rect x="1097.0" y="707.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1100.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (35 samples, 0.14%)</title><rect x="1097.0" y="691.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1100.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 0.06%)</title><rect x="1097.0" y="675.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1100.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.06%)</title><rect x="1097.0" y="659.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1100.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.04%)</title><rect x="1097.2" y="643.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1100.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.04%)</title><rect x="1097.2" y="627.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1100.2" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.03%)</title><rect x="1097.3" y="611.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1100.3" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (7 samples, 0.03%)</title><rect x="1097.3" y="595.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1100.3" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.03%)</title><rect x="1097.3" y="579.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1100.3" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.03%)</title><rect x="1097.3" y="563.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1100.3" y="574.0"></text>
</g>
<g>
<title>__x64_sys_futex (7 samples, 0.03%)</title><rect x="1097.3" y="547.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1100.3" y="558.0"></text>
</g>
<g>
<title>do_futex (7 samples, 0.03%)</title><rect x="1097.3" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1100.3" y="542.0"></text>
</g>
<g>
<title>futex_wake (7 samples, 0.03%)</title><rect x="1097.3" y="515.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1100.3" y="526.0"></text>
</g>
<g>
<title>wake_up_q (7 samples, 0.03%)</title><rect x="1097.3" y="499.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1100.3" y="510.0"></text>
</g>
<g>
<title>try_to_wake_up (7 samples, 0.03%)</title><rect x="1097.3" y="483.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1100.3" y="494.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (7 samples, 0.03%)</title><rect x="1097.3" y="467.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1100.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (18 samples, 0.07%)</title><rect x="1097.8" y="675.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1100.8" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (18 samples, 0.07%)</title><rect x="1097.8" y="659.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1100.8" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (6 samples, 0.02%)</title><rect x="1097.8" y="643.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1100.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.05%)</title><rect x="1098.0" y="643.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1101.0" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_wait (11 samples, 0.04%)</title><rect x="1098.1" y="627.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1101.1" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.04%)</title><rect x="1098.1" y="611.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1101.1" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 0.04%)</title><rect x="1098.1" y="595.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1101.1" y="606.0"></text>
</g>
<g>
<title>__x64_sys_futex (9 samples, 0.04%)</title><rect x="1098.2" y="579.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1101.2" y="590.0"></text>
</g>
<g>
<title>do_futex (9 samples, 0.04%)</title><rect x="1098.2" y="563.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1101.2" y="574.0"></text>
</g>
<g>
<title>futex_wait (9 samples, 0.04%)</title><rect x="1098.2" y="547.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1101.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 0.06%)</title><rect x="1098.7" y="691.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1101.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.06%)</title><rect x="1098.7" y="675.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1101.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.06%)</title><rect x="1098.7" y="659.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1101.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.06%)</title><rect x="1098.7" y="643.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1101.7" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 0.05%)</title><rect x="1098.8" y="627.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1101.8" y="638.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (11 samples, 0.04%)</title><rect x="1098.9" y="611.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1101.9" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.04%)</title><rect x="1098.9" y="595.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1101.9" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 0.04%)</title><rect x="1098.9" y="579.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1101.9" y="590.0"></text>
</g>
<g>
<title>__x64_sys_futex (10 samples, 0.04%)</title><rect x="1098.9" y="563.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1101.9" y="574.0"></text>
</g>
<g>
<title>do_futex (10 samples, 0.04%)</title><rect x="1098.9" y="547.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1101.9" y="558.0"></text>
</g>
<g>
<title>futex_wake (10 samples, 0.04%)</title><rect x="1098.9" y="531.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1101.9" y="542.0"></text>
</g>
<g>
<title>wake_up_q (8 samples, 0.03%)</title><rect x="1099.0" y="515.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1102.0" y="526.0"></text>
</g>
<g>
<title>try_to_wake_up (7 samples, 0.03%)</title><rect x="1099.1" y="499.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1102.1" y="510.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (7 samples, 0.03%)</title><rect x="1099.1" y="483.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1102.1" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (6 samples, 0.02%)</title><rect x="1099.4" y="723.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1102.4" y="734.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (6 samples, 0.02%)</title><rect x="1099.4" y="707.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1102.4" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$146/1420162154.run (6 samples, 0.02%)</title><rect x="1099.4" y="691.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1102.4" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (6 samples, 0.02%)</title><rect x="1099.4" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1102.4" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (6 samples, 0.02%)</title><rect x="1099.4" y="659.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1102.4" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (6 samples, 0.02%)</title><rect x="1099.4" y="643.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1102.4" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (6 samples, 0.02%)</title><rect x="1099.4" y="627.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1102.4" y="638.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (6 samples, 0.02%)</title><rect x="1099.4" y="611.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1102.4" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (6 samples, 0.02%)</title><rect x="1099.4" y="595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1102.4" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (6 samples, 0.02%)</title><rect x="1099.4" y="579.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1102.4" y="590.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (6 samples, 0.02%)</title><rect x="1099.4" y="563.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1102.4" y="574.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,438 samples, 5.87%)</title><rect x="1099.7" y="771.0" width="69.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1102.7" y="782.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (32 samples, 0.13%)</title><rect x="1100.1" y="755.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1103.1" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (31 samples, 0.13%)</title><rect x="1100.1" y="739.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1103.1" y="750.0"></text>
</g>
<g>
<title>epoll_wait (30 samples, 0.12%)</title><rect x="1100.2" y="723.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1103.2" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (27 samples, 0.11%)</title><rect x="1100.3" y="707.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1103.3" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (27 samples, 0.11%)</title><rect x="1100.3" y="691.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1103.3" y="702.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (23 samples, 0.09%)</title><rect x="1100.5" y="675.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1103.5" y="686.0"></text>
</g>
<g>
<title>do_epoll_wait (23 samples, 0.09%)</title><rect x="1100.5" y="659.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1103.5" y="670.0"></text>
</g>
<g>
<title>ep_poll (22 samples, 0.09%)</title><rect x="1100.6" y="643.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1103.6" y="654.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (15 samples, 0.06%)</title><rect x="1100.7" y="627.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1103.7" y="638.0"></text>
</g>
<g>
<title>ep_send_events_proc (15 samples, 0.06%)</title><rect x="1100.7" y="611.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1103.7" y="622.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (12 samples, 0.05%)</title><rect x="1100.8" y="595.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1103.8" y="606.0"></text>
</g>
<g>
<title>sock_poll (11 samples, 0.04%)</title><rect x="1100.9" y="579.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1103.9" y="590.0"></text>
</g>
<g>
<title>tcp_poll (6 samples, 0.02%)</title><rect x="1101.1" y="563.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1104.1" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,393 samples, 5.68%)</title><rect x="1101.6" y="755.0" width="67.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1104.6" y="766.0">one/nio..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.04%)</title><rect x="1101.9" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.9" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (9 samples, 0.04%)</title><rect x="1101.9" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1104.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,377 samples, 5.62%)</title><rect x="1102.4" y="739.0" width="66.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1105.4" y="750.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,234 samples, 5.03%)</title><rect x="1102.4" y="723.0" width="59.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1105.4" y="734.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,124 samples, 4.59%)</title><rect x="1102.8" y="707.0" width="54.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1105.8" y="718.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,120 samples, 4.57%)</title><rect x="1103.0" y="691.0" width="53.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1106.0" y="702.0">one/n..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1,116 samples, 4.55%)</title><rect x="1103.0" y="675.0" width="53.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1106.0" y="686.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.03%)</title><rect x="1103.0" y="659.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1106.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6 samples, 0.02%)</title><rect x="1103.3" y="659.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1106.3" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.02%)</title><rect x="1103.3" y="643.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1106.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/HttpService.entity (1,103 samples, 4.50%)</title><rect x="1103.6" y="659.0" width="53.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1106.6" y="670.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicatedService.entity (1,103 samples, 4.50%)</title><rect x="1103.6" y="643.0" width="53.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1106.6" y="654.0">ru/ma..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (23 samples, 0.09%)</title><rect x="1103.8" y="627.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1106.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (21 samples, 0.09%)</title><rect x="1103.8" y="611.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1106.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (19 samples, 0.08%)</title><rect x="1103.9" y="595.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1106.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (19 samples, 0.08%)</title><rect x="1103.9" y="579.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1106.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (14 samples, 0.06%)</title><rect x="1104.0" y="563.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1107.0" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators$ArraySpliterator.forEachRemaining (13 samples, 0.05%)</title><rect x="1104.0" y="547.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1107.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (12 samples, 0.05%)</title><rect x="1104.0" y="531.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1107.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (12 samples, 0.05%)</title><rect x="1104.0" y="515.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1107.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicatedService$$Lambda$88/1090963215.apply (12 samples, 0.05%)</title><rect x="1104.0" y="499.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1107.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.05%)</title><rect x="1104.0" y="483.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1107.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.03%)</title><rect x="1104.0" y="467.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1107.0" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (295 samples, 1.20%)</title><rect x="1104.9" y="627.0" width="14.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1107.9" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (280 samples, 1.14%)</title><rect x="1105.3" y="611.0" width="13.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1108.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.04%)</title><rect x="1105.3" y="595.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1108.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (271 samples, 1.11%)</title><rect x="1105.7" y="595.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1108.7" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (270 samples, 1.10%)</title><rect x="1105.8" y="579.0" width="13.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1108.8" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (269 samples, 1.10%)</title><rect x="1105.8" y="563.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1108.8" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (267 samples, 1.09%)</title><rect x="1105.9" y="547.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1108.9" y="558.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 0.02%)</title><rect x="1106.0" y="531.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1109.0" y="542.0"></text>
</g>
<g>
<title>__libc_send (258 samples, 1.05%)</title><rect x="1106.3" y="531.0" width="12.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1109.3" y="542.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (255 samples, 1.04%)</title><rect x="1106.4" y="515.0" width="12.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1109.4" y="526.0"></text>
</g>
<g>
<title>do_syscall_64 (255 samples, 1.04%)</title><rect x="1106.4" y="499.0" width="12.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1109.4" y="510.0"></text>
</g>
<g>
<title>__x64_sys_sendto (249 samples, 1.02%)</title><rect x="1106.6" y="483.0" width="12.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1109.6" y="494.0"></text>
</g>
<g>
<title>__sys_sendto (248 samples, 1.01%)</title><rect x="1106.7" y="467.0" width="11.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1109.7" y="478.0"></text>
</g>
<g>
<title>sock_sendmsg (241 samples, 0.98%)</title><rect x="1106.7" y="451.0" width="11.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1109.7" y="462.0"></text>
</g>
<g>
<title>tcp_sendmsg (238 samples, 0.97%)</title><rect x="1106.9" y="435.0" width="11.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1109.9" y="446.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (232 samples, 0.95%)</title><rect x="1107.1" y="419.0" width="11.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1110.1" y="430.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (196 samples, 0.80%)</title><rect x="1107.6" y="403.0" width="9.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1110.6" y="414.0"></text>
</g>
<g>
<title>tcp_write_xmit (195 samples, 0.80%)</title><rect x="1107.6" y="387.0" width="9.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1110.6" y="398.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (180 samples, 0.73%)</title><rect x="1107.7" y="371.0" width="8.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1110.7" y="382.0"></text>
</g>
<g>
<title>__ip_queue_xmit (167 samples, 0.68%)</title><rect x="1108.0" y="355.0" width="8.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1111.0" y="366.0"></text>
</g>
<g>
<title>ip_local_out (7 samples, 0.03%)</title><rect x="1108.2" y="339.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1111.2" y="350.0"></text>
</g>
<g>
<title>__ip_local_out (7 samples, 0.03%)</title><rect x="1108.2" y="323.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1111.2" y="334.0"></text>
</g>
<g>
<title>ip_output (157 samples, 0.64%)</title><rect x="1108.5" y="339.0" width="7.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1111.5" y="350.0"></text>
</g>
<g>
<title>ip_finish_output2 (148 samples, 0.60%)</title><rect x="1108.5" y="323.0" width="7.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1111.5" y="334.0"></text>
</g>
<g>
<title>__dev_queue_xmit (7 samples, 0.03%)</title><rect x="1108.7" y="307.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1111.7" y="318.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (138 samples, 0.56%)</title><rect x="1109.0" y="307.0" width="6.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1112.0" y="318.0"></text>
</g>
<g>
<title>do_softirq.part.0 (137 samples, 0.56%)</title><rect x="1109.1" y="291.0" width="6.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1112.1" y="302.0"></text>
</g>
<g>
<title>do_softirq_own_stack (136 samples, 0.55%)</title><rect x="1109.1" y="275.0" width="6.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1112.1" y="286.0"></text>
</g>
<g>
<title>__softirqentry_text_start (136 samples, 0.55%)</title><rect x="1109.1" y="259.0" width="6.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1112.1" y="270.0"></text>
</g>
<g>
<title>net_rx_action (135 samples, 0.55%)</title><rect x="1109.2" y="243.0" width="6.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1112.2" y="254.0"></text>
</g>
<g>
<title>process_backlog (133 samples, 0.54%)</title><rect x="1109.3" y="227.0" width="6.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1112.3" y="238.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (133 samples, 0.54%)</title><rect x="1109.3" y="211.0" width="6.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1112.3" y="222.0"></text>
</g>
<g>
<title>ip_rcv (131 samples, 0.53%)</title><rect x="1109.4" y="195.0" width="6.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1112.4" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver (126 samples, 0.51%)</title><rect x="1109.5" y="179.0" width="6.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1112.5" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (126 samples, 0.51%)</title><rect x="1109.5" y="163.0" width="6.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1112.5" y="174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (126 samples, 0.51%)</title><rect x="1109.5" y="147.0" width="6.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1112.5" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (123 samples, 0.50%)</title><rect x="1109.6" y="131.0" width="5.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1112.6" y="142.0"></text>
</g>
<g>
<title>__inet_lookup_established (8 samples, 0.03%)</title><rect x="1110.0" y="115.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1113.0" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (100 samples, 0.41%)</title><rect x="1110.7" y="115.0" width="4.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1113.7" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (100 samples, 0.41%)</title><rect x="1110.7" y="99.0" width="4.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1113.7" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (7 samples, 0.03%)</title><rect x="1110.9" y="83.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1113.9" y="94.0"></text>
</g>
<g>
<title>mod_timer (7 samples, 0.03%)</title><rect x="1110.9" y="67.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1113.9" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (7 samples, 0.03%)</title><rect x="1110.9" y="51.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1113.9" y="62.0"></text>
</g>
<g>
<title>sock_def_readable (63 samples, 0.26%)</title><rect x="1111.2" y="83.0" width="3.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1114.2" y="94.0"></text>
</g>
<g>
<title>__wake_up_common_lock (62 samples, 0.25%)</title><rect x="1111.2" y="67.0" width="3.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1114.2" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (61 samples, 0.25%)</title><rect x="1111.3" y="51.0" width="2.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1114.3" y="62.0"></text>
</g>
<g>
<title>tcp_ack (23 samples, 0.09%)</title><rect x="1114.2" y="83.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1117.2" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (11 samples, 0.04%)</title><rect x="1114.6" y="67.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1117.6" y="78.0"></text>
</g>
<g>
<title>skb_release_data (6 samples, 0.02%)</title><rect x="1114.8" y="51.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1117.8" y="62.0"></text>
</g>
<g>
<title>nf_hook_slow (7 samples, 0.03%)</title><rect x="1115.7" y="323.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1118.7" y="334.0"></text>
</g>
<g>
<title>selinux_ip_postroute (7 samples, 0.03%)</title><rect x="1115.7" y="307.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1118.7" y="318.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (6 samples, 0.02%)</title><rect x="1116.5" y="371.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1119.5" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (9 samples, 0.04%)</title><rect x="1117.2" y="403.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1120.2" y="414.0"></text>
</g>
<g>
<title>__alloc_skb (8 samples, 0.03%)</title><rect x="1117.2" y="387.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1120.2" y="398.0"></text>
</g>
<g>
<title>tcp_send_mss (8 samples, 0.03%)</title><rect x="1117.9" y="403.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1120.9" y="414.0"></text>
</g>
<g>
<title>tcp_current_mss (7 samples, 0.03%)</title><rect x="1118.0" y="387.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1121.0" y="398.0"></text>
</g>
<g>
<title>sockfd_lookup_light (6 samples, 0.02%)</title><rect x="1118.3" y="451.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1121.3" y="462.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.02%)</title><rect x="1118.3" y="435.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1121.3" y="446.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.02%)</title><rect x="1118.3" y="419.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1121.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.entity (58 samples, 0.24%)</title><rect x="1119.1" y="627.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1122.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.getAsync (38 samples, 0.16%)</title><rect x="1119.3" y="611.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1122.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (38 samples, 0.16%)</title><rect x="1119.3" y="595.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1122.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (38 samples, 0.16%)</title><rect x="1119.3" y="579.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1122.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (37 samples, 0.15%)</title><rect x="1119.4" y="563.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1122.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (37 samples, 0.15%)</title><rect x="1119.4" y="547.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1122.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 0.11%)</title><rect x="1119.8" y="531.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1122.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 0.11%)</title><rect x="1119.8" y="515.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1122.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 0.11%)</title><rect x="1119.8" y="499.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1122.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 0.11%)</title><rect x="1119.8" y="483.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1122.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (28 samples, 0.11%)</title><rect x="1119.8" y="467.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1122.8" y="478.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (23 samples, 0.09%)</title><rect x="1120.1" y="451.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1123.1" y="462.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (20 samples, 0.08%)</title><rect x="1120.2" y="435.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1123.2" y="446.0"></text>
</g>
<g>
<title>do_syscall_64 (20 samples, 0.08%)</title><rect x="1120.2" y="419.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1123.2" y="430.0"></text>
</g>
<g>
<title>__x64_sys_futex (20 samples, 0.08%)</title><rect x="1120.2" y="403.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1123.2" y="414.0"></text>
</g>
<g>
<title>do_futex (19 samples, 0.08%)</title><rect x="1120.2" y="387.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1123.2" y="398.0"></text>
</g>
<g>
<title>futex_wake (19 samples, 0.08%)</title><rect x="1120.2" y="371.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1123.2" y="382.0"></text>
</g>
<g>
<title>wake_up_q (11 samples, 0.04%)</title><rect x="1120.6" y="355.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1123.6" y="366.0"></text>
</g>
<g>
<title>try_to_wake_up (11 samples, 0.04%)</title><rect x="1120.6" y="339.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1123.6" y="350.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (11 samples, 0.04%)</title><rect x="1120.6" y="323.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1123.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (6 samples, 0.02%)</title><rect x="1121.3" y="611.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1124.3" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (6 samples, 0.02%)</title><rect x="1121.3" y="595.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1124.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Utility.byteBufferFromString (6 samples, 0.02%)</title><rect x="1121.6" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1124.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (11 samples, 0.04%)</title><rect x="1121.9" y="627.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1124.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (11 samples, 0.04%)</title><rect x="1121.9" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1124.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicatedService.resolveGetProxyResult (101 samples, 0.41%)</title><rect x="1122.6" y="627.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1125.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (42 samples, 0.17%)</title><rect x="1124.6" y="611.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1127.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (37 samples, 0.15%)</title><rect x="1124.8" y="595.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1127.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (35 samples, 0.14%)</title><rect x="1124.9" y="579.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1127.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (35 samples, 0.14%)</title><rect x="1124.9" y="563.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1127.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (31 samples, 0.13%)</title><rect x="1125.1" y="547.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1128.1" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (28 samples, 0.11%)</title><rect x="1125.1" y="531.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1128.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (27 samples, 0.11%)</title><rect x="1125.1" y="515.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1128.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicatedService$$Lambda$230/1347301794.apply (17 samples, 0.07%)</title><rect x="1125.5" y="499.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1128.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.fromResponse (17 samples, 0.07%)</title><rect x="1125.5" y="483.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1128.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.getDeadFlagTimeStampFromResponse (17 samples, 0.07%)</title><rect x="1125.5" y="467.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1128.5" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (6 samples, 0.02%)</title><rect x="1125.5" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1128.5" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (6 samples, 0.02%)</title><rect x="1125.5" y="435.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1128.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (11 samples, 0.04%)</title><rect x="1125.8" y="451.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1128.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (10 samples, 0.04%)</title><rect x="1125.8" y="435.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1128.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (7 samples, 0.03%)</title><rect x="1126.7" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1129.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicationConfiguration.parseOrDefault (11 samples, 0.04%)</title><rect x="1127.5" y="627.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1130.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicationConfiguration.parse (11 samples, 0.04%)</title><rect x="1127.5" y="611.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1130.5" y="622.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (8 samples, 0.03%)</title><rect x="1127.6" y="595.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1130.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Proxy.proxyReplicas (597 samples, 2.44%)</title><rect x="1128.0" y="627.0" width="28.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1131.0" y="638.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/util/Proxy.proxy (595 samples, 2.43%)</title><rect x="1128.1" y="611.0" width="28.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1131.1" y="622.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (595 samples, 2.43%)</title><rect x="1128.1" y="595.0" width="28.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1131.1" y="606.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (595 samples, 2.43%)</title><rect x="1128.1" y="579.0" width="28.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1131.1" y="590.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (90 samples, 0.37%)</title><rect x="1128.8" y="563.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1131.8" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (7 samples, 0.03%)</title><rect x="1130.6" y="547.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.6" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.03%)</title><rect x="1130.6" y="531.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.6" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.03%)</title><rect x="1130.6" y="515.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.6" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.03%)</title><rect x="1130.6" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.6" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (45 samples, 0.18%)</title><rect x="1131.0" y="547.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1134.0" y="558.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (20 samples, 0.08%)</title><rect x="1131.2" y="531.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1134.2" y="542.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (12 samples, 0.05%)</title><rect x="1131.5" y="515.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1134.5" y="526.0"></text>
</g>
<g>
<title>__libc_recv (17 samples, 0.07%)</title><rect x="1132.1" y="531.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1135.1" y="542.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.04%)</title><rect x="1132.4" y="515.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1135.4" y="526.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 0.04%)</title><rect x="1132.4" y="499.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1135.4" y="510.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (10 samples, 0.04%)</title><rect x="1132.5" y="483.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1135.5" y="494.0"></text>
</g>
<g>
<title>__sys_recvfrom (10 samples, 0.04%)</title><rect x="1132.5" y="467.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1135.5" y="478.0"></text>
</g>
<g>
<title>inet6_recvmsg?[ipv6] (6 samples, 0.02%)</title><rect x="1132.6" y="451.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1135.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (75 samples, 0.31%)</title><rect x="1133.1" y="563.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1136.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.03%)</title><rect x="1133.5" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1136.5" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (38 samples, 0.16%)</title><rect x="1133.9" y="547.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1136.9" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (27 samples, 0.11%)</title><rect x="1134.4" y="531.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1137.4" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (25 samples, 0.10%)</title><rect x="1134.5" y="515.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1137.5" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (11 samples, 0.04%)</title><rect x="1136.1" y="547.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1139.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.03%)</title><rect x="1136.3" y="531.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1139.3" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.03%)</title><rect x="1136.3" y="515.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1139.3" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (19 samples, 0.08%)</title><rect x="1136.8" y="563.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1139.8" y="574.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.05%)</title><rect x="1137.0" y="547.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1140.0" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (32 samples, 0.13%)</title><rect x="1137.7" y="563.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1140.7" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.03%)</title><rect x="1138.4" y="547.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.4" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (47 samples, 0.19%)</title><rect x="1139.3" y="563.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1142.3" y="574.0"></text>
</g>
<g>
<title>setsockopt (42 samples, 0.17%)</title><rect x="1139.5" y="547.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1142.5" y="558.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (38 samples, 0.16%)</title><rect x="1139.7" y="531.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1142.7" y="542.0"></text>
</g>
<g>
<title>do_syscall_64 (38 samples, 0.16%)</title><rect x="1139.7" y="515.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1142.7" y="526.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (35 samples, 0.14%)</title><rect x="1139.9" y="499.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1142.9" y="510.0"></text>
</g>
<g>
<title>__sys_setsockopt (35 samples, 0.14%)</title><rect x="1139.9" y="483.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1142.9" y="494.0"></text>
</g>
<g>
<title>sock_setsockopt (26 samples, 0.11%)</title><rect x="1140.1" y="467.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1143.1" y="478.0"></text>
</g>
<g>
<title>lock_sock_nested (6 samples, 0.02%)</title><rect x="1140.4" y="451.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1143.4" y="462.0"></text>
</g>
<g>
<title>release_sock (7 samples, 0.03%)</title><rect x="1140.7" y="451.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1143.7" y="462.0"></text>
</g>
<g>
<title>sock_set_timeout (7 samples, 0.03%)</title><rect x="1141.0" y="451.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1144.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (231 samples, 0.94%)</title><rect x="1141.6" y="563.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1144.6" y="574.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (11 samples, 0.04%)</title><rect x="1141.7" y="547.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1144.7" y="558.0"></text>
</g>
<g>
<title>__libc_send (216 samples, 0.88%)</title><rect x="1142.2" y="547.0" width="10.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1145.2" y="558.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (215 samples, 0.88%)</title><rect x="1142.3" y="531.0" width="10.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1145.3" y="542.0"></text>
</g>
<g>
<title>do_syscall_64 (215 samples, 0.88%)</title><rect x="1142.3" y="515.0" width="10.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1145.3" y="526.0"></text>
</g>
<g>
<title>__x64_sys_sendto (213 samples, 0.87%)</title><rect x="1142.4" y="499.0" width="10.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1145.4" y="510.0"></text>
</g>
<g>
<title>__sys_sendto (213 samples, 0.87%)</title><rect x="1142.4" y="483.0" width="10.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1145.4" y="494.0"></text>
</g>
<g>
<title>sock_sendmsg (209 samples, 0.85%)</title><rect x="1142.4" y="467.0" width="10.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1145.4" y="478.0"></text>
</g>
<g>
<title>tcp_sendmsg (204 samples, 0.83%)</title><rect x="1142.7" y="451.0" width="9.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1145.7" y="462.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (203 samples, 0.83%)</title><rect x="1142.7" y="435.0" width="9.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1145.7" y="446.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (175 samples, 0.71%)</title><rect x="1142.8" y="419.0" width="8.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1145.8" y="430.0"></text>
</g>
<g>
<title>tcp_write_xmit (175 samples, 0.71%)</title><rect x="1142.8" y="403.0" width="8.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1145.8" y="414.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (165 samples, 0.67%)</title><rect x="1143.0" y="387.0" width="8.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1146.0" y="398.0"></text>
</g>
<g>
<title>__ip_queue_xmit (156 samples, 0.64%)</title><rect x="1143.3" y="371.0" width="7.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1146.3" y="382.0"></text>
</g>
<g>
<title>ip_output (148 samples, 0.60%)</title><rect x="1143.7" y="355.0" width="7.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1146.7" y="366.0"></text>
</g>
<g>
<title>ip_finish_output2 (146 samples, 0.60%)</title><rect x="1143.7" y="339.0" width="7.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1146.7" y="350.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (137 samples, 0.56%)</title><rect x="1144.2" y="323.0" width="6.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1147.2" y="334.0"></text>
</g>
<g>
<title>do_softirq.part.0 (137 samples, 0.56%)</title><rect x="1144.2" y="307.0" width="6.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1147.2" y="318.0"></text>
</g>
<g>
<title>do_softirq_own_stack (134 samples, 0.55%)</title><rect x="1144.3" y="291.0" width="6.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1147.3" y="302.0"></text>
</g>
<g>
<title>__softirqentry_text_start (134 samples, 0.55%)</title><rect x="1144.3" y="275.0" width="6.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1147.3" y="286.0"></text>
</g>
<g>
<title>net_rx_action (133 samples, 0.54%)</title><rect x="1144.4" y="259.0" width="6.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1147.4" y="270.0"></text>
</g>
<g>
<title>process_backlog (131 samples, 0.53%)</title><rect x="1144.5" y="243.0" width="6.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1147.5" y="254.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (129 samples, 0.53%)</title><rect x="1144.6" y="227.0" width="6.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1147.6" y="238.0"></text>
</g>
<g>
<title>ip_rcv (127 samples, 0.52%)</title><rect x="1144.7" y="211.0" width="6.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1147.7" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver (125 samples, 0.51%)</title><rect x="1144.7" y="195.0" width="6.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1147.7" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (124 samples, 0.51%)</title><rect x="1144.7" y="179.0" width="6.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1147.7" y="190.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (124 samples, 0.51%)</title><rect x="1144.7" y="163.0" width="6.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1147.7" y="174.0"></text>
</g>
<g>
<title>tcp_v4_rcv (123 samples, 0.50%)</title><rect x="1144.8" y="147.0" width="5.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1147.8" y="158.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (109 samples, 0.44%)</title><rect x="1145.4" y="131.0" width="5.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1148.4" y="142.0"></text>
</g>
<g>
<title>tcp_rcv_established (108 samples, 0.44%)</title><rect x="1145.5" y="115.0" width="5.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1148.5" y="126.0"></text>
</g>
<g>
<title>sock_def_readable (74 samples, 0.30%)</title><rect x="1145.8" y="99.0" width="3.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1148.8" y="110.0"></text>
</g>
<g>
<title>__wake_up_common_lock (72 samples, 0.29%)</title><rect x="1145.9" y="83.0" width="3.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1148.9" y="94.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (72 samples, 0.29%)</title><rect x="1145.9" y="67.0" width="3.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1148.9" y="78.0"></text>
</g>
<g>
<title>tcp_ack (21 samples, 0.09%)</title><rect x="1149.3" y="99.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1152.3" y="110.0"></text>
</g>
<g>
<title>__kfree_skb (10 samples, 0.04%)</title><rect x="1149.5" y="83.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1152.5" y="94.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (10 samples, 0.04%)</title><rect x="1151.5" y="419.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1154.5" y="430.0"></text>
</g>
<g>
<title>__alloc_skb (8 samples, 0.03%)</title><rect x="1151.6" y="403.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1154.6" y="414.0"></text>
</g>
<g>
<title>tcp_send_mss (8 samples, 0.03%)</title><rect x="1152.1" y="419.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1155.1" y="430.0"></text>
</g>
<g>
<title>tcp_current_mss (6 samples, 0.02%)</title><rect x="1152.2" y="403.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1155.2" y="414.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (59 samples, 0.24%)</title><rect x="1152.7" y="563.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1155.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Object.wait (49 samples, 0.20%)</title><rect x="1153.1" y="547.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1156.1" y="558.0"></text>
</g>
<g>
<title>JVM_MonitorWait (21 samples, 0.09%)</title><rect x="1153.1" y="531.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1156.1" y="542.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (17 samples, 0.07%)</title><rect x="1153.2" y="515.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.2" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (15 samples, 0.06%)</title><rect x="1153.3" y="499.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.3" y="510.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.10%)</title><rect x="1154.2" y="531.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1157.2" y="542.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (25 samples, 0.10%)</title><rect x="1154.2" y="515.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1157.2" y="526.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (25 samples, 0.10%)</title><rect x="1154.2" y="499.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1157.2" y="510.0"></text>
</g>
<g>
<title>do_syscall_64 (25 samples, 0.10%)</title><rect x="1154.2" y="483.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1157.2" y="494.0"></text>
</g>
<g>
<title>__x64_sys_futex (22 samples, 0.09%)</title><rect x="1154.3" y="467.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1157.3" y="478.0"></text>
</g>
<g>
<title>do_futex (17 samples, 0.07%)</title><rect x="1154.4" y="451.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1157.4" y="462.0"></text>
</g>
<g>
<title>futex_wait (17 samples, 0.07%)</title><rect x="1154.4" y="435.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1157.4" y="446.0"></text>
</g>
<g>
<title>futex_wait_queue_me (14 samples, 0.06%)</title><rect x="1154.4" y="419.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1157.4" y="430.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (10 samples, 0.04%)</title><rect x="1154.5" y="403.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1157.5" y="414.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (6 samples, 0.02%)</title><rect x="1154.5" y="387.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1157.5" y="398.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (24 samples, 0.10%)</title><rect x="1155.5" y="563.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1158.5" y="574.0"></text>
</g>
<g>
<title>java/lang/Object.notify (19 samples, 0.08%)</title><rect x="1155.7" y="547.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1158.7" y="558.0"></text>
</g>
<g>
<title>JVM_MonitorNotify (18 samples, 0.07%)</title><rect x="1155.8" y="531.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1158.8" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::notify(Thread*) (13 samples, 0.05%)</title><rect x="1155.8" y="515.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.8" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::INotify(Thread*) (11 samples, 0.04%)</title><rect x="1155.9" y="499.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.9" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (33 samples, 0.13%)</title><rect x="1156.9" y="707.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1159.9" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.09%)</title><rect x="1157.2" y="691.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1160.2" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (20 samples, 0.08%)</title><rect x="1157.3" y="675.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1160.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (6 samples, 0.02%)</title><rect x="1158.2" y="691.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1161.2" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (37 samples, 0.15%)</title><rect x="1158.5" y="707.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1161.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (29 samples, 0.12%)</title><rect x="1158.9" y="691.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1161.9" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (29 samples, 0.12%)</title><rect x="1158.9" y="675.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1161.9" y="686.0"></text>
</g>
<g>
<title>java/lang/Character.digit (16 samples, 0.07%)</title><rect x="1158.9" y="659.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1161.9" y="670.0"></text>
</g>
<g>
<title>java/lang/Character.digit (16 samples, 0.07%)</title><rect x="1158.9" y="643.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1161.9" y="654.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (9 samples, 0.04%)</title><rect x="1159.1" y="627.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1162.1" y="638.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.02%)</title><rect x="1159.2" y="611.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1162.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.charAt (9 samples, 0.04%)</title><rect x="1159.6" y="659.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1162.6" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (6 samples, 0.02%)</title><rect x="1159.7" y="643.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1162.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (7 samples, 0.03%)</title><rect x="1160.3" y="707.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1163.3" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.08%)</title><rect x="1160.9" y="707.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.08%)</title><rect x="1160.9" y="691.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (143 samples, 0.58%)</title><rect x="1161.8" y="723.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1164.8" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (140 samples, 0.57%)</title><rect x="1161.9" y="707.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1164.9" y="718.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (28 samples, 0.11%)</title><rect x="1161.9" y="691.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1164.9" y="702.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (13 samples, 0.05%)</title><rect x="1162.6" y="675.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1165.6" y="686.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.03%)</title><rect x="1162.8" y="659.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1165.8" y="670.0"></text>
</g>
<g>
<title>__libc_recv (109 samples, 0.44%)</title><rect x="1163.2" y="691.0" width="5.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1166.2" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (108 samples, 0.44%)</title><rect x="1163.3" y="675.0" width="5.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1166.3" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (108 samples, 0.44%)</title><rect x="1163.3" y="659.0" width="5.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1166.3" y="670.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (103 samples, 0.42%)</title><rect x="1163.5" y="643.0" width="5.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1166.5" y="654.0"></text>
</g>
<g>
<title>__sys_recvfrom (103 samples, 0.42%)</title><rect x="1163.5" y="627.0" width="5.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1166.5" y="638.0"></text>
</g>
<g>
<title>inet6_recvmsg?[ipv6] (85 samples, 0.35%)</title><rect x="1163.8" y="611.0" width="4.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1166.8" y="622.0"></text>
</g>
<g>
<title>tcp_recvmsg (82 samples, 0.33%)</title><rect x="1163.9" y="595.0" width="4.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1166.9" y="606.0"></text>
</g>
<g>
<title>__kfree_skb (11 samples, 0.04%)</title><rect x="1164.4" y="579.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1167.4" y="590.0"></text>
</g>
<g>
<title>skb_release_all (10 samples, 0.04%)</title><rect x="1164.4" y="563.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1167.4" y="574.0"></text>
</g>
<g>
<title>skb_release_head_state (10 samples, 0.04%)</title><rect x="1164.4" y="547.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1167.4" y="558.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (32 samples, 0.13%)</title><rect x="1165.4" y="579.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1168.4" y="590.0"></text>
</g>
<g>
<title>__skb_datagram_iter (31 samples, 0.13%)</title><rect x="1165.5" y="563.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1168.5" y="574.0"></text>
</g>
<g>
<title>_copy_to_iter (13 samples, 0.05%)</title><rect x="1166.0" y="547.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1169.0" y="558.0"></text>
</g>
<g>
<title>copyout (12 samples, 0.05%)</title><rect x="1166.0" y="531.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1169.0" y="542.0"></text>
</g>
<g>
<title>copy_user_generic_string (12 samples, 0.05%)</title><rect x="1166.0" y="515.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1169.0" y="526.0"></text>
</g>
<g>
<title>simple_copy_to_iter (8 samples, 0.03%)</title><rect x="1166.6" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1169.6" y="558.0"></text>
</g>
<g>
<title>__check_object_size (8 samples, 0.03%)</title><rect x="1166.6" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1169.6" y="542.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (13 samples, 0.05%)</title><rect x="1167.2" y="579.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1170.2" y="590.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.04%)</title><rect x="1168.0" y="611.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1171.0" y="622.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.04%)</title><rect x="1168.0" y="595.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1171.0" y="606.0"></text>
</g>
<g>
<title>__fget (10 samples, 0.04%)</title><rect x="1168.0" y="579.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1171.0" y="590.0"></text>
</g>
<g>
<title>start_thread (435 samples, 1.77%)</title><rect x="1169.1" y="771.0" width="20.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1172.1" y="782.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (435 samples, 1.77%)</title><rect x="1169.1" y="755.0" width="20.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1172.1" y="766.0"></text>
</g>
<g>
<title>Thread::call_run() (435 samples, 1.77%)</title><rect x="1169.1" y="739.0" width="20.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.1" y="750.0"></text>
</g>
<g>
<title>GangWorker::loop() (382 samples, 1.56%)</title><rect x="1169.1" y="723.0" width="18.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.1" y="734.0"></text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (166 samples, 0.68%)</title><rect x="1169.1" y="707.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.1" y="718.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (166 samples, 0.68%)</title><rect x="1169.1" y="691.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.1" y="702.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) (139 samples, 0.57%)</title><rect x="1169.3" y="675.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.3" y="686.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (109 samples, 0.44%)</title><rect x="1170.7" y="659.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.7" y="670.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1CMOopClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1CMOopClosure, OopClosure, G1CMOopClosure&gt;(void (G1CMOopClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1CMOopClosure*, unsigned int*) (97 samples, 0.40%)</title><rect x="1171.3" y="643.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.3" y="654.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (9 samples, 0.04%)</title><rect x="1176.4" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (59 samples, 0.24%)</title><rect x="1177.4" y="707.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (33 samples, 0.13%)</title><rect x="1177.4" y="691.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>SpinPause (29 samples, 0.12%)</title><rect x="1177.6" y="675.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1180.6" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (20 samples, 0.08%)</title><rect x="1179.3" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (14 samples, 0.06%)</title><rect x="1179.4" y="675.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="686.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (13 samples, 0.05%)</title><rect x="1179.4" y="659.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (13 samples, 0.05%)</title><rect x="1179.4" y="643.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.4" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (12 samples, 0.05%)</title><rect x="1179.5" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="638.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (7 samples, 0.03%)</title><rect x="1179.5" y="611.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="622.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (7 samples, 0.03%)</title><rect x="1179.5" y="595.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.5" y="606.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (6 samples, 0.02%)</title><rect x="1179.6" y="579.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="590.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (43 samples, 0.18%)</title><rect x="1180.3" y="707.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (26 samples, 0.11%)</title><rect x="1181.0" y="691.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.0" y="702.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (90 samples, 0.37%)</title><rect x="1182.3" y="707.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (90 samples, 0.37%)</title><rect x="1182.3" y="691.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="702.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (85 samples, 0.35%)</title><rect x="1182.3" y="675.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="686.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (28 samples, 0.11%)</title><rect x="1184.9" y="659.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="670.0"></text>
</g>
<g>
<title>EnableIf&lt;!IsSame&lt;G1RebuildRemSetClosure, OopClosure&gt;::value, void&gt;::type call_do_oop&lt;unsigned int, G1RebuildRemSetClosure, OopClosure, G1RebuildRemSetClosure&gt;(void (G1RebuildRemSetClosure::*)(unsigned int*), void (OopClosure::*)(unsigned int*), G1RebuildRemSetClosure*, unsigned int*) (12 samples, 0.05%)</title><rect x="1185.4" y="643.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.4" y="654.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (6 samples, 0.02%)</title><rect x="1186.0" y="643.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.0" y="654.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (11 samples, 0.04%)</title><rect x="1186.9" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.9" y="718.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (11 samples, 0.04%)</title><rect x="1186.9" y="691.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="702.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (39 samples, 0.16%)</title><rect x="1187.4" y="723.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.4" y="734.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (39 samples, 0.16%)</title><rect x="1187.4" y="707.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="718.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (39 samples, 0.16%)</title><rect x="1187.4" y="691.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.4" y="702.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (39 samples, 0.16%)</title><rect x="1187.4" y="675.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.4" y="686.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (39 samples, 0.16%)</title><rect x="1187.4" y="659.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.4" y="670.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (24 samples, 0.10%)</title><rect x="1187.4" y="643.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.4" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (20 samples, 0.08%)</title><rect x="1187.6" y="627.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.6" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 0.03%)</title><rect x="1188.6" y="643.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.02%)</title><rect x="1189.0" y="643.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.02%)</title><rect x="1189.0" y="627.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.02%)</title><rect x="1189.0" y="611.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.02%)</title><rect x="1189.0" y="595.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.02%)</title><rect x="1189.0" y="579.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.02%)</title><rect x="1189.0" y="563.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.0" y="574.0"></text>
</g>
<g>
<title>VMThread::run() (14 samples, 0.06%)</title><rect x="1189.3" y="723.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.3" y="734.0"></text>
</g>
<g>
<title>VMThread::loop() (14 samples, 0.06%)</title><rect x="1189.3" y="707.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.3" y="718.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (8 samples, 0.03%)</title><rect x="1189.6" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.6" y="702.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (8 samples, 0.03%)</title><rect x="1189.6" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.6" y="686.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (7 samples, 0.03%)</title><rect x="1189.6" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.6" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (7 samples, 0.03%)</title><rect x="1189.6" y="643.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.6" y="654.0"></text>
</g>
</g>
</svg>
