<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (214,290 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (73,066 samples, 34.10%)</title><rect x="10.0" y="739.0" width="402.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (73,036 samples, 34.08%)</title><rect x="10.2" y="723.0" width="402.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.2" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (73,036 samples, 34.08%)</title><rect x="10.2" y="707.0" width="402.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.2" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (726 samples, 0.34%)</title><rect x="10.2" y="691.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (726 samples, 0.34%)</title><rect x="10.2" y="675.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (716 samples, 0.33%)</title><rect x="10.2" y="659.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (716 samples, 0.33%)</title><rect x="10.2" y="643.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.2" y="654.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (716 samples, 0.33%)</title><rect x="10.2" y="627.0" width="3.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="13.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$131/981956415.run (70,267 samples, 32.79%)</title><rect x="14.2" y="691.0" width="386.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="702.0">ru/mail/polis/service/s3ponia/AsyncService$$Lambda$13..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$get$2 (70,267 samples, 32.79%)</title><rect x="14.2" y="675.0" width="386.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.2" y="686.0">ru/mail/polis/service/s3ponia/AsyncService.lambda$get$2</text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getRaw (70,267 samples, 32.79%)</title><rect x="14.2" y="659.0" width="386.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.2" y="670.0">ru/mail/polis/s3ponia/AsyncServiceUtility.getRaw</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1512015112.linkToTargetMethod (1,017 samples, 0.47%)</title><rect x="14.2" y="643.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.2" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1847542244.invoke (1,017 samples, 0.47%)</title><rect x="14.2" y="627.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.2" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,017 samples, 0.47%)</title><rect x="14.2" y="611.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (260 samples, 0.12%)</title><rect x="14.2" y="595.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.2" y="606.0"></text>
</g>
<g>
<title>java.lang.String (260 samples, 0.12%)</title><rect x="14.2" y="579.0" width="1.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="17.2" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (757 samples, 0.35%)</title><rect x="15.6" y="595.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (757 samples, 0.35%)</title><rect x="15.6" y="579.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.6" y="590.0"></text>
</g>
<g>
<title>byte[] (757 samples, 0.35%)</title><rect x="15.6" y="563.0" width="4.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="18.6" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,378 samples, 1.11%)</title><rect x="19.8" y="643.0" width="13.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.8" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,378 samples, 1.11%)</title><rect x="19.8" y="627.0" width="13.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.8" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,872 samples, 0.87%)</title><rect x="19.8" y="611.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.8" y="622.0"></text>
</g>
<g>
<title>one.nio.util.ByteArrayBuilder (311 samples, 0.15%)</title><rect x="19.8" y="595.0" width="1.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="22.8" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,561 samples, 0.73%)</title><rect x="21.5" y="595.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.5" y="606.0"></text>
</g>
<g>
<title>byte[] (1,561 samples, 0.73%)</title><rect x="21.5" y="579.0" width="8.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="24.5" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (506 samples, 0.24%)</title><rect x="30.1" y="611.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.1" y="622.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (506 samples, 0.24%)</title><rect x="30.1" y="595.0" width="2.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="33.1" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2,923 samples, 1.36%)</title><rect x="32.9" y="643.0" width="16.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.9" y="654.0"></text>
</g>
<g>
<title>one.nio.http.Response (331 samples, 0.15%)</title><rect x="32.9" y="627.0" width="1.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="35.9" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2,592 samples, 1.21%)</title><rect x="34.7" y="627.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.7" y="638.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (283 samples, 0.13%)</title><rect x="34.7" y="611.0" width="1.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="37.7" y="622.0"></text>
</g>
<g>
<title>java.lang.String[] (392 samples, 0.18%)</title><rect x="36.2" y="611.0" width="2.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="39.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (401 samples, 0.19%)</title><rect x="38.4" y="611.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.4" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (401 samples, 0.19%)</title><rect x="38.4" y="595.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="41.4" y="606.0"></text>
</g>
<g>
<title>byte[] (401 samples, 0.19%)</title><rect x="38.4" y="579.0" width="2.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="41.4" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (708 samples, 0.33%)</title><rect x="40.6" y="611.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.6" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (708 samples, 0.33%)</title><rect x="40.6" y="595.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.6" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (708 samples, 0.33%)</title><rect x="40.6" y="579.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.6" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (708 samples, 0.33%)</title><rect x="40.6" y="563.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.6" y="574.0"></text>
</g>
<g>
<title>byte[] (708 samples, 0.33%)</title><rect x="40.6" y="547.0" width="3.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="43.6" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (808 samples, 0.38%)</title><rect x="44.5" y="611.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.5" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (808 samples, 0.38%)</title><rect x="44.5" y="595.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.5" y="606.0"></text>
</g>
<g>
<title>java.lang.String (280 samples, 0.13%)</title><rect x="44.5" y="579.0" width="1.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="47.5" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (528 samples, 0.25%)</title><rect x="46.0" y="579.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="49.0" y="590.0"></text>
</g>
<g>
<title>byte[] (528 samples, 0.25%)</title><rect x="46.0" y="563.0" width="3.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="49.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getRaw (63,063 samples, 29.43%)</title><rect x="49.0" y="643.0" width="347.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="52.0" y="654.0">ru/mail/polis/dao/DAO.getRaw</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,636 samples, 1.70%)</title><rect x="49.0" y="627.0" width="20.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.0" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,636 samples, 1.70%)</title><rect x="49.0" y="611.0" width="20.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="52.0" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,636 samples, 1.70%)</title><rect x="49.0" y="595.0" width="20.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.0" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,636 samples, 1.70%)</title><rect x="49.0" y="579.0" width="20.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.0" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,636 samples, 1.70%)</title><rect x="49.0" y="563.0" width="20.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.0" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,636 samples, 1.70%)</title><rect x="49.0" y="547.0" width="20.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.0" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,636 samples, 1.70%)</title><rect x="49.0" y="531.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.0" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,636 samples, 1.70%)</title><rect x="49.0" y="515.0" width="20.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.0" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (543 samples, 0.25%)</title><rect x="49.0" y="499.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (543 samples, 0.25%)</title><rect x="49.0" y="483.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (543 samples, 0.25%)</title><rect x="49.0" y="467.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (543 samples, 0.25%)</title><rect x="49.0" y="451.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (543 samples, 0.25%)</title><rect x="49.0" y="435.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.0" y="446.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (543 samples, 0.25%)</title><rect x="49.0" y="419.0" width="2.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="52.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$141/694046326.compare (3,093 samples, 1.44%)</title><rect x="51.9" y="499.0" width="17.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (3,093 samples, 1.44%)</title><rect x="51.9" y="483.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (3,093 samples, 1.44%)</title><rect x="51.9" y="467.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.9" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (2,385 samples, 1.11%)</title><rect x="51.9" y="451.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.9" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,385 samples, 1.11%)</title><rect x="51.9" y="435.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.9" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (2,385 samples, 1.11%)</title><rect x="51.9" y="419.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.9" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,385 samples, 1.11%)</title><rect x="51.9" y="403.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$146/320381112.apply (2,385 samples, 1.11%)</title><rect x="51.9" y="387.0" width="13.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="54.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (1,778 samples, 0.83%)</title><rect x="51.9" y="371.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,778 samples, 0.83%)</title><rect x="51.9" y="355.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="54.9" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,231 samples, 0.57%)</title><rect x="51.9" y="339.0" width="6.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="54.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (547 samples, 0.26%)</title><rect x="58.7" y="339.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.7" y="350.0"></text>
</g>
<g>
<title>byte[] (547 samples, 0.26%)</title><rect x="58.7" y="323.0" width="3.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="61.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (607 samples, 0.28%)</title><rect x="61.7" y="371.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.7" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (607 samples, 0.28%)</title><rect x="61.7" y="355.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.7" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (607 samples, 0.28%)</title><rect x="61.7" y="339.0" width="3.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="64.7" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (182 samples, 0.08%)</title><rect x="65.1" y="451.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.1" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (182 samples, 0.08%)</title><rect x="65.1" y="435.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.1" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (182 samples, 0.08%)</title><rect x="65.1" y="419.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.1" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (182 samples, 0.08%)</title><rect x="65.1" y="403.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="68.1" y="414.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (182 samples, 0.08%)</title><rect x="65.1" y="387.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="68.1" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (526 samples, 0.25%)</title><rect x="66.1" y="451.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.1" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (221 samples, 0.10%)</title><rect x="66.1" y="435.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.1" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (221 samples, 0.10%)</title><rect x="66.1" y="419.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.1" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (221 samples, 0.10%)</title><rect x="66.1" y="403.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.1" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (221 samples, 0.10%)</title><rect x="66.1" y="387.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.1" y="398.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (221 samples, 0.10%)</title><rect x="66.1" y="371.0" width="1.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="69.1" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (305 samples, 0.14%)</title><rect x="67.3" y="435.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.3" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (305 samples, 0.14%)</title><rect x="67.3" y="419.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.3" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (305 samples, 0.14%)</title><rect x="67.3" y="403.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.3" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (305 samples, 0.14%)</title><rect x="67.3" y="387.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.3" y="398.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (305 samples, 0.14%)</title><rect x="67.3" y="371.0" width="1.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="70.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getValue (3,171 samples, 1.48%)</title><rect x="69.0" y="627.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.0" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,746 samples, 1.28%)</title><rect x="69.0" y="611.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.0" y="622.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,799 samples, 0.84%)</title><rect x="69.0" y="595.0" width="9.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="72.0" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (947 samples, 0.44%)</title><rect x="78.9" y="595.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.9" y="606.0"></text>
</g>
<g>
<title>byte[] (947 samples, 0.44%)</title><rect x="78.9" y="579.0" width="5.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="81.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.of (425 samples, 0.20%)</title><rect x="84.1" y="611.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.1" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Value (425 samples, 0.20%)</title><rect x="84.1" y="595.0" width="2.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="87.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.iteratorRaw (56,256 samples, 26.25%)</title><rect x="86.4" y="627.0" width="309.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.4" y="638.0">ru/mail/polis/dao/s3ponia/PersistenceDAO.i..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (9,046 samples, 4.22%)</title><rect x="86.4" y="611.0" width="49.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.4" y="622.0">com/g..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (205 samples, 0.10%)</title><rect x="86.4" y="595.0" width="1.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="89.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (8,841 samples, 4.13%)</title><rect x="87.6" y="595.0" width="48.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.6" y="606.0">com/..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (306 samples, 0.14%)</title><rect x="87.6" y="579.0" width="1.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="90.6" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (643 samples, 0.30%)</title><rect x="89.3" y="579.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.3" y="590.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (643 samples, 0.30%)</title><rect x="89.3" y="563.0" width="3.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="92.3" y="574.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (453 samples, 0.21%)</title><rect x="92.8" y="579.0" width="2.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="95.8" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (434 samples, 0.20%)</title><rect x="95.3" y="579.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.3" y="590.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (434 samples, 0.20%)</title><rect x="95.3" y="563.0" width="2.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="98.3" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (310 samples, 0.14%)</title><rect x="97.7" y="579.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.7" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (310 samples, 0.14%)</title><rect x="97.7" y="563.0" width="1.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="100.7" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,563 samples, 1.66%)</title><rect x="99.4" y="579.0" width="19.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.4" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,563 samples, 1.66%)</title><rect x="99.4" y="563.0" width="19.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.4" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,563 samples, 1.66%)</title><rect x="99.4" y="547.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.4" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,563 samples, 1.66%)</title><rect x="99.4" y="531.0" width="19.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="102.4" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,563 samples, 1.66%)</title><rect x="99.4" y="515.0" width="19.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.4" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,563 samples, 1.66%)</title><rect x="99.4" y="499.0" width="19.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.4" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (474 samples, 0.22%)</title><rect x="99.4" y="483.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (474 samples, 0.22%)</title><rect x="99.4" y="467.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (474 samples, 0.22%)</title><rect x="99.4" y="451.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (474 samples, 0.22%)</title><rect x="99.4" y="435.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (474 samples, 0.22%)</title><rect x="99.4" y="419.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.4" y="430.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (474 samples, 0.22%)</title><rect x="99.4" y="403.0" width="2.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="102.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$141/694046326.compare (3,089 samples, 1.44%)</title><rect x="102.0" y="483.0" width="17.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (3,089 samples, 1.44%)</title><rect x="102.0" y="467.0" width="17.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (3,089 samples, 1.44%)</title><rect x="102.0" y="451.0" width="17.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.0" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (2,374 samples, 1.11%)</title><rect x="102.0" y="435.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.0" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,374 samples, 1.11%)</title><rect x="102.0" y="419.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.0" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (2,374 samples, 1.11%)</title><rect x="102.0" y="403.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.0" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,374 samples, 1.11%)</title><rect x="102.0" y="387.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$146/320381112.apply (2,374 samples, 1.11%)</title><rect x="102.0" y="371.0" width="13.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (1,820 samples, 0.85%)</title><rect x="102.0" y="355.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,820 samples, 0.85%)</title><rect x="102.0" y="339.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.0" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,203 samples, 0.56%)</title><rect x="102.0" y="323.0" width="6.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="105.0" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (617 samples, 0.29%)</title><rect x="108.6" y="323.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.6" y="334.0"></text>
</g>
<g>
<title>byte[] (617 samples, 0.29%)</title><rect x="108.6" y="307.0" width="3.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="111.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (554 samples, 0.26%)</title><rect x="112.0" y="355.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="115.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (554 samples, 0.26%)</title><rect x="112.0" y="339.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="115.0" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (554 samples, 0.26%)</title><rect x="112.0" y="323.0" width="3.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="115.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (222 samples, 0.10%)</title><rect x="115.1" y="435.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="118.1" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (222 samples, 0.10%)</title><rect x="115.1" y="419.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="118.1" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (222 samples, 0.10%)</title><rect x="115.1" y="403.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.1" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (222 samples, 0.10%)</title><rect x="115.1" y="387.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.1" y="398.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (222 samples, 0.10%)</title><rect x="115.1" y="371.0" width="1.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="118.1" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (493 samples, 0.23%)</title><rect x="116.3" y="435.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="119.3" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (222 samples, 0.10%)</title><rect x="116.3" y="419.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.3" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (222 samples, 0.10%)</title><rect x="116.3" y="403.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.3" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (222 samples, 0.10%)</title><rect x="116.3" y="387.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.3" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (222 samples, 0.10%)</title><rect x="116.3" y="371.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.3" y="382.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (222 samples, 0.10%)</title><rect x="116.3" y="355.0" width="1.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="119.3" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (271 samples, 0.13%)</title><rect x="117.5" y="419.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="120.5" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (271 samples, 0.13%)</title><rect x="117.5" y="403.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.5" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (271 samples, 0.13%)</title><rect x="117.5" y="387.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="120.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (271 samples, 0.13%)</title><rect x="117.5" y="371.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.5" y="382.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (271 samples, 0.13%)</title><rect x="117.5" y="355.0" width="1.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="120.5" y="366.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (3,132 samples, 1.46%)</title><rect x="119.0" y="579.0" width="17.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="122.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (3,132 samples, 1.46%)</title><rect x="119.0" y="563.0" width="17.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (3,132 samples, 1.46%)</title><rect x="119.0" y="547.0" width="17.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (598 samples, 0.28%)</title><rect x="119.0" y="531.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$130/1700048193.getAsBoolean (598 samples, 0.28%)</title><rect x="119.0" y="515.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (598 samples, 0.28%)</title><rect x="119.0" y="499.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (598 samples, 0.28%)</title><rect x="119.0" y="483.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="122.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (345 samples, 0.16%)</title><rect x="119.0" y="467.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="122.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (345 samples, 0.16%)</title><rect x="119.0" y="451.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.0" y="462.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (345 samples, 0.16%)</title><rect x="119.0" y="435.0" width="1.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="122.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (253 samples, 0.12%)</title><rect x="120.9" y="467.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="123.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable$$Lambda$126/1756771783.apply (253 samples, 0.12%)</title><rect x="120.9" y="451.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.lambda$iterator$2 (253 samples, 0.12%)</title><rect x="120.9" y="435.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.of (253 samples, 0.12%)</title><rect x="120.9" y="419.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.9" y="430.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Cell (253 samples, 0.12%)</title><rect x="120.9" y="403.0" width="1.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="123.9" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (2,534 samples, 1.18%)</title><rect x="122.3" y="531.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="125.3" y="542.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (499 samples, 0.23%)</title><rect x="122.3" y="515.0" width="2.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="125.3" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (364 samples, 0.17%)</title><rect x="125.0" y="515.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="128.0" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (364 samples, 0.17%)</title><rect x="125.0" y="499.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$129/360318989.get$Lambda (183 samples, 0.09%)</title><rect x="125.0" y="483.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="128.0" y="494.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$129 (183 samples, 0.09%)</title><rect x="125.0" y="467.0" width="1.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="128.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$130/1700048193.get$Lambda (181 samples, 0.08%)</title><rect x="126.1" y="483.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.1" y="494.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$130 (181 samples, 0.08%)</title><rect x="126.1" y="467.0" width="0.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="129.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (631 samples, 0.29%)</title><rect x="127.0" y="515.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (631 samples, 0.29%)</title><rect x="127.0" y="499.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="130.0" y="510.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (631 samples, 0.29%)</title><rect x="127.0" y="483.0" width="3.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="130.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (1,040 samples, 0.49%)</title><rect x="130.5" y="515.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="133.5" y="526.0"></text>
</g>
<g>
<title>java.lang.Object[] (1,040 samples, 0.49%)</title><rect x="130.5" y="499.0" width="5.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="133.5" y="510.0"></text>
</g>
<g>
<title>java.util.ArrayList (1,106 samples, 0.52%)</title><rect x="136.2" y="611.0" width="6.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="139.2" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (623 samples, 0.29%)</title><rect x="142.3" y="611.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.3" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (623 samples, 0.29%)</title><rect x="142.3" y="595.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="145.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$137/1873546051.get$Lambda (306 samples, 0.14%)</title><rect x="142.3" y="579.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="145.3" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.PersistenceDAO$$Lambda$137 (306 samples, 0.14%)</title><rect x="142.3" y="563.0" width="1.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="145.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$138/1559159104.get$Lambda (317 samples, 0.15%)</title><rect x="144.0" y="579.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="147.0" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.PersistenceDAO$$Lambda$138 (317 samples, 0.15%)</title><rect x="144.0" y="563.0" width="1.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="147.0" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (764 samples, 0.36%)</title><rect x="145.8" y="611.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.8" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (764 samples, 0.36%)</title><rect x="145.8" y="595.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.8" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (764 samples, 0.36%)</title><rect x="145.8" y="579.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.8" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (764 samples, 0.36%)</title><rect x="145.8" y="563.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.8" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (764 samples, 0.36%)</title><rect x="145.8" y="547.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.8" y="558.0"></text>
</g>
<g>
<title>java.lang.Object[] (764 samples, 0.36%)</title><rect x="145.8" y="531.0" width="4.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="148.8" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (506 samples, 0.24%)</title><rect x="150.0" y="611.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (506 samples, 0.24%)</title><rect x="150.0" y="595.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="153.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (506 samples, 0.24%)</title><rect x="150.0" y="579.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="153.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (506 samples, 0.24%)</title><rect x="150.0" y="563.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="153.0" y="574.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (506 samples, 0.24%)</title><rect x="150.0" y="547.0" width="2.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="153.0" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (35,652 samples, 16.64%)</title><rect x="152.8" y="611.0" width="196.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="155.8" y="622.0">java/util/Collections$Unmo..</text>
</g>
<g>
<title>java/util/TreeMap.forEach (35,652 samples, 16.64%)</title><rect x="152.8" y="595.0" width="196.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.8" y="606.0">java/util/TreeMap.forEach</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$137/1873546051.accept (35,652 samples, 16.64%)</title><rect x="152.8" y="579.0" width="196.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.8" y="590.0">ru/mail/polis/dao/s3ponia/..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.lambda$iteratorRaw$2 (35,652 samples, 16.64%)</title><rect x="152.8" y="563.0" width="196.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.8" y="574.0">ru/mail/polis/dao/s3ponia/..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.iterator (35,652 samples, 16.64%)</title><rect x="152.8" y="547.0" width="196.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.8" y="558.0">ru/mail/polis/dao/s3ponia/..</text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$DiskTableIterator (281 samples, 0.13%)</title><rect x="152.8" y="531.0" width="1.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="155.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.&lt;init&gt; (35,371 samples, 16.51%)</title><rect x="154.3" y="531.0" width="194.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.3" y="542.0">ru/mail/polis/dao/s3ponia..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getElementIndex (35,371 samples, 16.51%)</title><rect x="154.3" y="515.0" width="194.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.3" y="526.0">ru/mail/polis/dao/s3ponia..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (7,786 samples, 3.63%)</title><rect x="154.3" y="499.0" width="42.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="157.3" y="510.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (7,786 samples, 3.63%)</title><rect x="154.3" y="483.0" width="42.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="157.3" y="494.0">ru/m..</text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (7,786 samples, 3.63%)</title><rect x="154.3" y="467.0" width="42.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="157.3" y="478.0">ru.m..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (27,585 samples, 12.87%)</title><rect x="197.2" y="499.0" width="151.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.2" y="510.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (27,585 samples, 12.87%)</title><rect x="197.2" y="483.0" width="151.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.2" y="494.0">java/nio/ByteBuffer..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (18,496 samples, 8.63%)</title><rect x="197.2" y="467.0" width="101.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="200.2" y="478.0">java.nio.Hea..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9,089 samples, 4.24%)</title><rect x="299.0" y="467.0" width="50.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.0" y="478.0">java/..</text>
</g>
<g>
<title>byte[] (9,089 samples, 4.24%)</title><rect x="299.0" y="451.0" width="50.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="302.0" y="462.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (3,933 samples, 1.84%)</title><rect x="349.1" y="611.0" width="21.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="352.1" y="622.0">r..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (309 samples, 0.14%)</title><rect x="349.1" y="595.0" width="1.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="352.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (3,624 samples, 1.69%)</title><rect x="350.8" y="595.0" width="19.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.8" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,624 samples, 1.69%)</title><rect x="350.8" y="579.0" width="19.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.8" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,624 samples, 1.69%)</title><rect x="350.8" y="563.0" width="19.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.8" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,624 samples, 1.69%)</title><rect x="350.8" y="547.0" width="19.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="353.8" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,624 samples, 1.69%)</title><rect x="350.8" y="531.0" width="19.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.8" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,624 samples, 1.69%)</title><rect x="350.8" y="515.0" width="19.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.8" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,624 samples, 1.69%)</title><rect x="350.8" y="499.0" width="19.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.8" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,624 samples, 1.69%)</title><rect x="350.8" y="483.0" width="19.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.8" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (481 samples, 0.22%)</title><rect x="350.8" y="467.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (481 samples, 0.22%)</title><rect x="350.8" y="451.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (481 samples, 0.22%)</title><rect x="350.8" y="435.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (481 samples, 0.22%)</title><rect x="350.8" y="419.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (481 samples, 0.22%)</title><rect x="350.8" y="403.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.8" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (481 samples, 0.22%)</title><rect x="350.8" y="387.0" width="2.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="353.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$141/694046326.compare (3,143 samples, 1.47%)</title><rect x="353.4" y="467.0" width="17.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (3,143 samples, 1.47%)</title><rect x="353.4" y="451.0" width="17.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (3,143 samples, 1.47%)</title><rect x="353.4" y="435.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.4" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (2,469 samples, 1.15%)</title><rect x="353.4" y="419.0" width="13.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="356.4" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,469 samples, 1.15%)</title><rect x="353.4" y="403.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="356.4" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (2,469 samples, 1.15%)</title><rect x="353.4" y="387.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.4" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,469 samples, 1.15%)</title><rect x="353.4" y="371.0" width="13.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="356.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$146/320381112.apply (2,469 samples, 1.15%)</title><rect x="353.4" y="355.0" width="13.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="356.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (1,857 samples, 0.87%)</title><rect x="353.4" y="339.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="356.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,857 samples, 0.87%)</title><rect x="353.4" y="323.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="356.4" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,184 samples, 0.55%)</title><rect x="353.4" y="307.0" width="6.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="356.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (673 samples, 0.31%)</title><rect x="360.0" y="307.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.0" y="318.0"></text>
</g>
<g>
<title>byte[] (673 samples, 0.31%)</title><rect x="360.0" y="291.0" width="3.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="363.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (612 samples, 0.29%)</title><rect x="363.7" y="339.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (612 samples, 0.29%)</title><rect x="363.7" y="323.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="366.7" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (612 samples, 0.29%)</title><rect x="363.7" y="307.0" width="3.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="366.7" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (230 samples, 0.11%)</title><rect x="367.0" y="419.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.0" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (230 samples, 0.11%)</title><rect x="367.0" y="403.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.0" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (230 samples, 0.11%)</title><rect x="367.0" y="387.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.0" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (230 samples, 0.11%)</title><rect x="367.0" y="371.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.0" y="382.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (230 samples, 0.11%)</title><rect x="367.0" y="355.0" width="1.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="370.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (444 samples, 0.21%)</title><rect x="368.3" y="419.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="371.3" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (165 samples, 0.08%)</title><rect x="368.3" y="403.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="371.3" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (165 samples, 0.08%)</title><rect x="368.3" y="387.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.3" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (165 samples, 0.08%)</title><rect x="368.3" y="371.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="371.3" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (165 samples, 0.08%)</title><rect x="368.3" y="355.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.3" y="366.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (165 samples, 0.08%)</title><rect x="368.3" y="339.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="371.3" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (279 samples, 0.13%)</title><rect x="369.2" y="403.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="372.2" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (279 samples, 0.13%)</title><rect x="369.2" y="387.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.2" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (279 samples, 0.13%)</title><rect x="369.2" y="371.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="372.2" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (279 samples, 0.13%)</title><rect x="369.2" y="355.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="372.2" y="366.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (279 samples, 0.13%)</title><rect x="369.2" y="339.0" width="1.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="372.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.iterator (4,626 samples, 2.16%)</title><rect x="370.7" y="611.0" width="25.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.7" y="622.0">r..</text>
</g>
<g>
<title>java/util/Collection.stream (1,104 samples, 0.52%)</title><rect x="370.7" y="595.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="373.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (373 samples, 0.17%)</title><rect x="370.7" y="579.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="373.7" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (373 samples, 0.17%)</title><rect x="370.7" y="563.0" width="2.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="373.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (731 samples, 0.34%)</title><rect x="372.8" y="579.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.8" y="590.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (731 samples, 0.34%)</title><rect x="372.8" y="563.0" width="4.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="375.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (187 samples, 0.09%)</title><rect x="376.8" y="595.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.8" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (187 samples, 0.09%)</title><rect x="376.8" y="579.0" width="1.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="379.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (594 samples, 0.28%)</title><rect x="377.8" y="595.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (594 samples, 0.28%)</title><rect x="377.8" y="579.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (594 samples, 0.28%)</title><rect x="377.8" y="563.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.8" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (594 samples, 0.28%)</title><rect x="377.8" y="547.0" width="3.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="380.8" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (1,072 samples, 0.50%)</title><rect x="381.1" y="595.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.1" y="606.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (269 samples, 0.13%)</title><rect x="381.1" y="579.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="384.1" y="590.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (269 samples, 0.13%)</title><rect x="381.1" y="563.0" width="1.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="384.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (803 samples, 0.37%)</title><rect x="382.6" y="579.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.6" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (185 samples, 0.09%)</title><rect x="382.6" y="563.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.6" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (185 samples, 0.09%)</title><rect x="382.6" y="547.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="385.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$128/1526367760.get$Lambda (185 samples, 0.09%)</title><rect x="382.6" y="531.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.6" y="542.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$128 (185 samples, 0.09%)</title><rect x="382.6" y="515.0" width="1.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="385.6" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (618 samples, 0.29%)</title><rect x="383.6" y="563.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="386.6" y="574.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (618 samples, 0.29%)</title><rect x="383.6" y="547.0" width="3.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="386.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1,669 samples, 0.78%)</title><rect x="387.0" y="595.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.0" y="606.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (1,669 samples, 0.78%)</title><rect x="387.0" y="579.0" width="9.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="390.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.getValue (613 samples, 0.29%)</title><rect x="396.2" y="643.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.2" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (613 samples, 0.29%)</title><rect x="396.2" y="627.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="399.2" y="638.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (613 samples, 0.29%)</title><rect x="396.2" y="611.0" width="3.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="399.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.fromByteBuffer (273 samples, 0.13%)</title><rect x="399.6" y="643.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.6" y="654.0"></text>
</g>
<g>
<title>byte[] (273 samples, 0.13%)</title><rect x="399.6" y="627.0" width="1.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="402.6" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (2,043 samples, 0.95%)</title><rect x="401.1" y="691.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="404.1" y="702.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2,043 samples, 0.95%)</title><rect x="401.1" y="675.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.1" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$113/320434687.run (2,043 samples, 0.95%)</title><rect x="401.1" y="659.0" width="11.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="404.1" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (2,043 samples, 0.95%)</title><rect x="401.1" y="643.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.1" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (2,043 samples, 0.95%)</title><rect x="401.1" y="627.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.1" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (2,043 samples, 0.95%)</title><rect x="401.1" y="611.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.1" y="622.0"></text>
</g>
<g>
<title>java.io.DataOutputStream (60 samples, 0.03%)</title><rect x="401.1" y="595.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="404.1" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (1,983 samples, 0.93%)</title><rect x="401.4" y="595.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="404.4" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1,838 samples, 0.86%)</title><rect x="401.4" y="579.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="404.4" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1,838 samples, 0.86%)</title><rect x="401.4" y="563.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="404.4" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1,838 samples, 0.86%)</title><rect x="401.4" y="547.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="404.4" y="558.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (1,838 samples, 0.86%)</title><rect x="401.4" y="531.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="404.4" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,118 samples, 0.52%)</title><rect x="401.4" y="515.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="404.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,118 samples, 0.52%)</title><rect x="401.4" y="499.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (1,112 samples, 0.52%)</title><rect x="401.4" y="483.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.4" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (1,112 samples, 0.52%)</title><rect x="401.4" y="467.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.4" y="478.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1,063 samples, 0.50%)</title><rect x="401.5" y="451.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.5" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1,063 samples, 0.50%)</title><rect x="401.5" y="435.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="404.5" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1,063 samples, 0.50%)</title><rect x="401.5" y="419.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.5" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (1,063 samples, 0.50%)</title><rect x="401.5" y="403.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.5" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (1,063 samples, 0.50%)</title><rect x="401.5" y="387.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.5" y="398.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (1,063 samples, 0.50%)</title><rect x="401.5" y="371.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.5" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (1,063 samples, 0.50%)</title><rect x="401.5" y="355.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.5" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (1,063 samples, 0.50%)</title><rect x="401.5" y="339.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="404.5" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1,063 samples, 0.50%)</title><rect x="401.5" y="323.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="404.5" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,063 samples, 0.50%)</title><rect x="401.5" y="307.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="404.5" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,063 samples, 0.50%)</title><rect x="401.5" y="291.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.5" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,063 samples, 0.50%)</title><rect x="401.5" y="275.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="404.5" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,063 samples, 0.50%)</title><rect x="401.5" y="259.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.5" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (964 samples, 0.45%)</title><rect x="401.5" y="243.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="404.5" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (964 samples, 0.45%)</title><rect x="401.5" y="227.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="404.5" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (964 samples, 0.45%)</title><rect x="401.5" y="211.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.5" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (964 samples, 0.45%)</title><rect x="401.5" y="195.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.5" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (350 samples, 0.16%)</title><rect x="401.5" y="179.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="404.5" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (293 samples, 0.14%)</title><rect x="401.5" y="163.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.5" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (271 samples, 0.13%)</title><rect x="401.5" y="147.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.5" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (271 samples, 0.13%)</title><rect x="401.5" y="131.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.5" y="142.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (144 samples, 0.07%)</title><rect x="401.6" y="115.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="404.6" y="126.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (108 samples, 0.05%)</title><rect x="401.8" y="99.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.8" y="110.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (96 samples, 0.04%)</title><rect x="401.9" y="83.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.9" y="94.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (96 samples, 0.04%)</title><rect x="401.9" y="67.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="404.9" y="78.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (95 samples, 0.04%)</title><rect x="402.4" y="115.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="405.4" y="126.0"></text>
</g>
<g>
<title>java.lang.Object[] (95 samples, 0.04%)</title><rect x="402.4" y="99.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="405.4" y="110.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (57 samples, 0.03%)</title><rect x="403.1" y="163.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.1" y="174.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (323 samples, 0.15%)</title><rect x="403.7" y="179.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.7" y="190.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (281 samples, 0.13%)</title><rect x="403.9" y="163.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.9" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (259 samples, 0.12%)</title><rect x="404.0" y="147.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.0" y="158.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (259 samples, 0.12%)</title><rect x="404.0" y="131.0" width="1.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="407.0" y="142.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (237 samples, 0.11%)</title><rect x="405.5" y="179.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.5" y="190.0"></text>
</g>
<g>
<title>java.lang.Object[] (209 samples, 0.10%)</title><rect x="405.5" y="163.0" width="1.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="408.5" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (99 samples, 0.05%)</title><rect x="406.8" y="243.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="409.8" y="254.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (99 samples, 0.05%)</title><rect x="406.8" y="227.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (99 samples, 0.05%)</title><rect x="406.8" y="211.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.8" y="222.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (99 samples, 0.05%)</title><rect x="406.8" y="195.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.8" y="206.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (99 samples, 0.05%)</title><rect x="406.8" y="179.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.8" y="190.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (99 samples, 0.05%)</title><rect x="406.8" y="163.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.8" y="174.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (99 samples, 0.05%)</title><rect x="406.8" y="147.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.8" y="158.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (99 samples, 0.05%)</title><rect x="406.8" y="131.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.8" y="142.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (99 samples, 0.05%)</title><rect x="406.8" y="115.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.8" y="126.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (98 samples, 0.05%)</title><rect x="406.8" y="99.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.8" y="110.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (460 samples, 0.21%)</title><rect x="407.6" y="515.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.6" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (460 samples, 0.21%)</title><rect x="407.6" y="499.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="410.6" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (460 samples, 0.21%)</title><rect x="407.6" y="483.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.6" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (454 samples, 0.21%)</title><rect x="407.6" y="467.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.6" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (454 samples, 0.21%)</title><rect x="407.6" y="451.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.6" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (445 samples, 0.21%)</title><rect x="407.6" y="435.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="410.6" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (442 samples, 0.21%)</title><rect x="407.6" y="419.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.6" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (442 samples, 0.21%)</title><rect x="407.6" y="403.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.6" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (427 samples, 0.20%)</title><rect x="407.7" y="387.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="410.7" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (415 samples, 0.19%)</title><rect x="407.7" y="371.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="410.7" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (404 samples, 0.19%)</title><rect x="407.7" y="355.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="410.7" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (377 samples, 0.18%)</title><rect x="407.9" y="339.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.9" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (368 samples, 0.17%)</title><rect x="407.9" y="323.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (368 samples, 0.17%)</title><rect x="407.9" y="307.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (368 samples, 0.17%)</title><rect x="407.9" y="291.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.9" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (368 samples, 0.17%)</title><rect x="407.9" y="275.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.9" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (332 samples, 0.15%)</title><rect x="408.0" y="259.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="411.0" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (332 samples, 0.15%)</title><rect x="408.0" y="243.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="411.0" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (149 samples, 0.07%)</title><rect x="408.0" y="227.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="411.0" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (123 samples, 0.06%)</title><rect x="408.2" y="211.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="411.2" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (110 samples, 0.05%)</title><rect x="408.2" y="195.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="411.2" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (102 samples, 0.05%)</title><rect x="408.2" y="179.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.2" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (102 samples, 0.05%)</title><rect x="408.2" y="163.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="411.2" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (95 samples, 0.04%)</title><rect x="408.3" y="147.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.3" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (84 samples, 0.04%)</title><rect x="408.3" y="131.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="411.3" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (77 samples, 0.04%)</title><rect x="408.3" y="115.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="411.3" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (63 samples, 0.03%)</title><rect x="408.4" y="99.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="411.4" y="110.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (55 samples, 0.03%)</title><rect x="408.4" y="83.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="411.4" y="94.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (55 samples, 0.03%)</title><rect x="408.4" y="67.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.4" y="78.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (55 samples, 0.03%)</title><rect x="408.4" y="51.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.4" y="62.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (55 samples, 0.03%)</title><rect x="408.4" y="35.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="411.4" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (75 samples, 0.03%)</title><rect x="408.9" y="227.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="411.9" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (99 samples, 0.05%)</title><rect x="409.3" y="227.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="412.3" y="238.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (99 samples, 0.05%)</title><rect x="409.3" y="211.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="412.3" y="222.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (115 samples, 0.05%)</title><rect x="410.1" y="515.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="413.1" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (115 samples, 0.05%)</title><rect x="410.1" y="499.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="413.1" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (115 samples, 0.05%)</title><rect x="410.1" y="483.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="413.1" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (115 samples, 0.05%)</title><rect x="410.1" y="467.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="413.1" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (104 samples, 0.05%)</title><rect x="410.2" y="451.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="413.2" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (90 samples, 0.04%)</title><rect x="410.3" y="435.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="413.3" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (81 samples, 0.04%)</title><rect x="410.3" y="419.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="413.3" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (81 samples, 0.04%)</title><rect x="410.3" y="403.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (81 samples, 0.04%)</title><rect x="410.3" y="387.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="413.3" y="398.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor2.invoke (72 samples, 0.03%)</title><rect x="410.3" y="371.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.3" y="382.0"></text>
</g>
<g>
<title>javax/management/ObjectName.readObject (72 samples, 0.03%)</title><rect x="410.3" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.3" y="366.0"></text>
</g>
<g>
<title>javax/management/ObjectName.construct (71 samples, 0.03%)</title><rect x="410.3" y="339.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.3" y="350.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (143 samples, 0.07%)</title><rect x="410.8" y="515.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="413.8" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (142 samples, 0.07%)</title><rect x="410.8" y="499.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="413.8" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (141 samples, 0.07%)</title><rect x="410.8" y="483.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.8" y="494.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (141 samples, 0.07%)</title><rect x="410.8" y="467.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.8" y="478.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (141 samples, 0.07%)</title><rect x="410.8" y="451.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="413.8" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (139 samples, 0.06%)</title><rect x="410.8" y="435.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="413.8" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (80 samples, 0.04%)</title><rect x="410.8" y="419.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="413.8" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (144 samples, 0.07%)</title><rect x="411.5" y="579.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.5" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (143 samples, 0.07%)</title><rect x="411.6" y="563.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="414.6" y="574.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (142 samples, 0.07%)</title><rect x="411.6" y="547.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="414.6" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (142 samples, 0.07%)</title><rect x="411.6" y="531.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="414.6" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (105 samples, 0.05%)</title><rect x="411.6" y="515.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="414.6" y="526.0"></text>
</g>
<g>
<title>java/io/DataInputStream.&lt;init&gt; (53 samples, 0.02%)</title><rect x="411.9" y="499.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="414.9" y="510.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (141,224 samples, 65.90%)</title><rect x="412.3" y="739.0" width="777.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="415.3" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (4,110 samples, 1.92%)</title><rect x="412.3" y="723.0" width="22.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.3" y="734.0">o..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (4,110 samples, 1.92%)</title><rect x="412.3" y="707.0" width="22.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="415.3" y="718.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.process (137,114 samples, 63.99%)</title><rect x="435.0" y="723.0" width="755.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.0" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (137,114 samples, 63.99%)</title><rect x="435.0" y="707.0" width="755.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="438.0" y="718.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (137,114 samples, 63.99%)</title><rect x="435.0" y="691.0" width="755.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.0" y="702.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (102,647 samples, 47.90%)</title><rect x="435.0" y="675.0" width="565.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.0" y="686.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (102,647 samples, 47.90%)</title><rect x="435.0" y="659.0" width="565.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="438.0" y="670.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (99,348 samples, 46.36%)</title><rect x="435.0" y="643.0" width="547.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.0" y="654.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3,128 samples, 1.46%)</title><rect x="435.0" y="627.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (3,128 samples, 1.46%)</title><rect x="435.0" y="611.0" width="17.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,128 samples, 1.46%)</title><rect x="435.0" y="595.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="438.0" y="606.0"></text>
</g>
<g>
<title>java.lang.String (1,726 samples, 0.81%)</title><rect x="435.0" y="579.0" width="9.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="438.0" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,402 samples, 0.65%)</title><rect x="444.5" y="579.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.5" y="590.0"></text>
</g>
<g>
<title>byte[] (1,402 samples, 0.65%)</title><rect x="444.5" y="563.0" width="7.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="447.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2,673 samples, 1.25%)</title><rect x="452.2" y="627.0" width="14.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.2" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2,673 samples, 1.25%)</title><rect x="452.2" y="611.0" width="14.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (2,673 samples, 1.25%)</title><rect x="452.2" y="595.0" width="14.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="455.2" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,673 samples, 1.25%)</title><rect x="452.2" y="579.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.2" y="590.0"></text>
</g>
<g>
<title>java.lang.String (1,390 samples, 0.65%)</title><rect x="452.2" y="563.0" width="7.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="455.2" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,283 samples, 0.60%)</title><rect x="459.9" y="563.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.9" y="574.0"></text>
</g>
<g>
<title>byte[] (1,283 samples, 0.60%)</title><rect x="459.9" y="547.0" width="7.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="462.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.get (93,547 samples, 43.65%)</title><rect x="466.9" y="627.0" width="515.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="469.9" y="638.0">ru/mail/polis/service/s3ponia/AsyncService.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,174 samples, 0.55%)</title><rect x="466.9" y="611.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="469.9" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,174 samples, 0.55%)</title><rect x="466.9" y="595.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="469.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$131/981956415.get$Lambda (1,174 samples, 0.55%)</title><rect x="466.9" y="579.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="469.9" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.AsyncService$$Lambda$131 (1,174 samples, 0.55%)</title><rect x="466.9" y="563.0" width="6.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="469.9" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.sort (116 samples, 0.05%)</title><rect x="473.4" y="611.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.4" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.sort (116 samples, 0.05%)</title><rect x="473.4" y="595.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.4" y="606.0"></text>
</g>
<g>
<title>java/util/TimSort.sort (116 samples, 0.05%)</title><rect x="473.4" y="579.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.4" y="590.0"></text>
</g>
<g>
<title>java/util/TimSort.countRunAndMakeAscending (116 samples, 0.05%)</title><rect x="473.4" y="563.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="476.4" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (116 samples, 0.05%)</title><rect x="473.4" y="547.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="476.4" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (116 samples, 0.05%)</title><rect x="473.4" y="531.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="476.4" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$ReverseComparator2.compare (116 samples, 0.05%)</title><rect x="473.4" y="515.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.4" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (116 samples, 0.05%)</title><rect x="473.4" y="499.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.4" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (116 samples, 0.05%)</title><rect x="473.4" y="483.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="476.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$$Lambda$198/1206678816.apply (116 samples, 0.05%)</title><rect x="473.4" y="467.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="476.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (116 samples, 0.05%)</title><rect x="473.4" y="451.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.4" y="462.0"></text>
</g>
<g>
<title>java.lang.Long (116 samples, 0.05%)</title><rect x="473.4" y="435.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="476.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (317 samples, 0.15%)</title><rect x="474.2" y="611.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="477.2" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (317 samples, 0.15%)</title><rect x="474.2" y="595.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="477.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (226 samples, 0.11%)</title><rect x="474.2" y="579.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.2" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (187 samples, 0.09%)</title><rect x="474.4" y="563.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="477.4" y="574.0"></text>
</g>
<g>
<title>byte[] (187 samples, 0.09%)</title><rect x="474.4" y="547.0" width="1.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="477.4" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (91 samples, 0.04%)</title><rect x="475.4" y="579.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="478.4" y="590.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (91 samples, 0.04%)</title><rect x="475.4" y="563.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="478.4" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4,024 samples, 1.88%)</title><rect x="475.9" y="611.0" width="22.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="478.9" y="622.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (4,024 samples, 1.88%)</title><rect x="475.9" y="595.0" width="22.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.9" y="606.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,024 samples, 1.88%)</title><rect x="475.9" y="579.0" width="22.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="478.9" y="590.0">j..</text>
</g>
<g>
<title>java.lang.String (1,189 samples, 0.55%)</title><rect x="475.9" y="563.0" width="6.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="478.9" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,835 samples, 1.32%)</title><rect x="482.5" y="563.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.5" y="574.0"></text>
</g>
<g>
<title>byte[] (2,835 samples, 1.32%)</title><rect x="482.5" y="547.0" width="15.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="485.5" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (495 samples, 0.23%)</title><rect x="498.1" y="611.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="501.1" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (459 samples, 0.21%)</title><rect x="498.3" y="595.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.3" y="606.0"></text>
</g>
<g>
<title>java.lang.String[] (83 samples, 0.04%)</title><rect x="498.5" y="579.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="501.5" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (75 samples, 0.03%)</title><rect x="498.9" y="579.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="501.9" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (75 samples, 0.03%)</title><rect x="498.9" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="501.9" y="574.0"></text>
</g>
<g>
<title>byte[] (75 samples, 0.03%)</title><rect x="498.9" y="547.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="501.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (122 samples, 0.06%)</title><rect x="499.3" y="579.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.3" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (122 samples, 0.06%)</title><rect x="499.3" y="563.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="502.3" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (122 samples, 0.06%)</title><rect x="499.3" y="547.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="502.3" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (122 samples, 0.06%)</title><rect x="499.3" y="531.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.3" y="542.0"></text>
</g>
<g>
<title>byte[] (122 samples, 0.06%)</title><rect x="499.3" y="515.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="502.3" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (146 samples, 0.07%)</title><rect x="500.0" y="579.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (146 samples, 0.07%)</title><rect x="500.0" y="563.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.0" y="574.0"></text>
</g>
<g>
<title>java.lang.String (67 samples, 0.03%)</title><rect x="500.0" y="547.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="503.0" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (79 samples, 0.04%)</title><rect x="500.4" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.4" y="558.0"></text>
</g>
<g>
<title>byte[] (79 samples, 0.04%)</title><rect x="500.4" y="531.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="503.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getRaw (39,256 samples, 18.32%)</title><rect x="500.8" y="611.0" width="216.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.8" y="622.0">ru/mail/polis/dao/DAO.getRaw</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2,934 samples, 1.37%)</title><rect x="500.8" y="595.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="503.8" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,934 samples, 1.37%)</title><rect x="500.8" y="579.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="503.8" y="590.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (519 samples, 0.24%)</title><rect x="500.8" y="563.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="503.8" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (519 samples, 0.24%)</title><rect x="500.8" y="547.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.8" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (519 samples, 0.24%)</title><rect x="500.8" y="531.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.8" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (519 samples, 0.24%)</title><rect x="500.8" y="515.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.8" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (519 samples, 0.24%)</title><rect x="500.8" y="499.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.8" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$141/694046326.compare (519 samples, 0.24%)</title><rect x="500.8" y="483.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="503.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (519 samples, 0.24%)</title><rect x="500.8" y="467.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="503.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (519 samples, 0.24%)</title><rect x="500.8" y="451.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="503.8" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (234 samples, 0.11%)</title><rect x="500.8" y="435.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="503.8" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (234 samples, 0.11%)</title><rect x="500.8" y="419.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.8" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (234 samples, 0.11%)</title><rect x="500.8" y="403.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="503.8" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (234 samples, 0.11%)</title><rect x="500.8" y="387.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$146/320381112.apply (234 samples, 0.11%)</title><rect x="500.8" y="371.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="503.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (234 samples, 0.11%)</title><rect x="500.8" y="355.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="503.8" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (234 samples, 0.11%)</title><rect x="500.8" y="339.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="503.8" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (234 samples, 0.11%)</title><rect x="500.8" y="323.0" width="1.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="503.8" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (88 samples, 0.04%)</title><rect x="502.1" y="435.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.1" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (88 samples, 0.04%)</title><rect x="502.1" y="419.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.1" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (88 samples, 0.04%)</title><rect x="502.1" y="403.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="505.1" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (88 samples, 0.04%)</title><rect x="502.1" y="387.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="505.1" y="398.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (88 samples, 0.04%)</title><rect x="502.1" y="371.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="505.1" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (197 samples, 0.09%)</title><rect x="502.6" y="435.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="505.6" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (76 samples, 0.04%)</title><rect x="502.6" y="419.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="505.6" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (76 samples, 0.04%)</title><rect x="502.6" y="403.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="505.6" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (76 samples, 0.04%)</title><rect x="502.6" y="387.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="505.6" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (76 samples, 0.04%)</title><rect x="502.6" y="371.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.6" y="382.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (76 samples, 0.04%)</title><rect x="502.6" y="355.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="505.6" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (121 samples, 0.06%)</title><rect x="503.0" y="419.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="506.0" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (121 samples, 0.06%)</title><rect x="503.0" y="403.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.0" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (121 samples, 0.06%)</title><rect x="503.0" y="387.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="506.0" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (121 samples, 0.06%)</title><rect x="503.0" y="371.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="506.0" y="382.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (121 samples, 0.06%)</title><rect x="503.0" y="355.0" width="0.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="506.0" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,415 samples, 1.13%)</title><rect x="503.7" y="563.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="506.7" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,415 samples, 1.13%)</title><rect x="503.7" y="547.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="506.7" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,415 samples, 1.13%)</title><rect x="503.7" y="531.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="506.7" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,415 samples, 1.13%)</title><rect x="503.7" y="515.0" width="13.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="506.7" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,415 samples, 1.13%)</title><rect x="503.7" y="499.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="506.7" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,415 samples, 1.13%)</title><rect x="503.7" y="483.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.7" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (213 samples, 0.10%)</title><rect x="503.7" y="467.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="506.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (213 samples, 0.10%)</title><rect x="503.7" y="451.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="506.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (213 samples, 0.10%)</title><rect x="503.7" y="435.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="506.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (213 samples, 0.10%)</title><rect x="503.7" y="419.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="506.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (213 samples, 0.10%)</title><rect x="503.7" y="403.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="506.7" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (213 samples, 0.10%)</title><rect x="503.7" y="387.0" width="1.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="506.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$141/694046326.compare (2,202 samples, 1.03%)</title><rect x="504.8" y="467.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (2,202 samples, 1.03%)</title><rect x="504.8" y="451.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="507.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (2,202 samples, 1.03%)</title><rect x="504.8" y="435.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.8" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (1,932 samples, 0.90%)</title><rect x="504.8" y="419.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="507.8" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,932 samples, 0.90%)</title><rect x="504.8" y="403.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="507.8" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (1,932 samples, 0.90%)</title><rect x="504.8" y="387.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.8" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,932 samples, 0.90%)</title><rect x="504.8" y="371.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$146/320381112.apply (645 samples, 0.30%)</title><rect x="504.8" y="355.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (645 samples, 0.30%)</title><rect x="504.8" y="339.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="507.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (645 samples, 0.30%)</title><rect x="504.8" y="323.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="507.8" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (451 samples, 0.21%)</title><rect x="504.8" y="307.0" width="2.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="507.8" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (194 samples, 0.09%)</title><rect x="507.3" y="307.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="510.3" y="318.0"></text>
</g>
<g>
<title>byte[] (194 samples, 0.09%)</title><rect x="507.3" y="291.0" width="1.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="510.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$158/1581500053.apply (1,058 samples, 0.49%)</title><rect x="508.4" y="355.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="511.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getValue (1,058 samples, 0.49%)</title><rect x="508.4" y="339.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="511.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (931 samples, 0.43%)</title><rect x="508.4" y="323.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="511.4" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (656 samples, 0.31%)</title><rect x="508.4" y="307.0" width="3.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="511.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (275 samples, 0.13%)</title><rect x="512.0" y="307.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="515.0" y="318.0"></text>
</g>
<g>
<title>byte[] (275 samples, 0.13%)</title><rect x="512.0" y="291.0" width="1.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="515.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.of (127 samples, 0.06%)</title><rect x="513.5" y="323.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.5" y="334.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Value (127 samples, 0.06%)</title><rect x="513.5" y="307.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="516.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.compareTo (229 samples, 0.11%)</title><rect x="514.2" y="355.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="517.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.compareTo (229 samples, 0.11%)</title><rect x="514.2" y="339.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="517.2" y="350.0"></text>
</g>
<g>
<title>java/util/Collections$ReverseComparator2.compare (84 samples, 0.04%)</title><rect x="514.2" y="323.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.2" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (84 samples, 0.04%)</title><rect x="514.2" y="307.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="517.2" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (84 samples, 0.04%)</title><rect x="514.2" y="291.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="517.2" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (84 samples, 0.04%)</title><rect x="514.2" y="275.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="517.2" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (84 samples, 0.04%)</title><rect x="514.2" y="259.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="517.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value$$Lambda$187/2092749713.apply (84 samples, 0.04%)</title><rect x="514.2" y="243.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="517.2" y="254.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (84 samples, 0.04%)</title><rect x="514.2" y="227.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="517.2" y="238.0"></text>
</g>
<g>
<title>java.lang.Long (84 samples, 0.04%)</title><rect x="514.2" y="211.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="517.2" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (94 samples, 0.04%)</title><rect x="515.0" y="323.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (62 samples, 0.03%)</title><rect x="515.1" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="518.1" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (62 samples, 0.03%)</title><rect x="515.1" y="291.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="518.1" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (62 samples, 0.03%)</title><rect x="515.1" y="275.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.1" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (62 samples, 0.03%)</title><rect x="515.1" y="259.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="518.1" y="270.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (62 samples, 0.03%)</title><rect x="515.1" y="243.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="518.1" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (55 samples, 0.03%)</title><rect x="515.5" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="518.5" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (55 samples, 0.03%)</title><rect x="515.5" y="403.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="518.5" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (55 samples, 0.03%)</title><rect x="515.5" y="387.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (55 samples, 0.03%)</title><rect x="515.5" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.5" y="382.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (55 samples, 0.03%)</title><rect x="515.5" y="355.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="518.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (215 samples, 0.10%)</title><rect x="515.8" y="419.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="518.8" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (101 samples, 0.05%)</title><rect x="515.8" y="403.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="518.8" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (101 samples, 0.05%)</title><rect x="515.8" y="387.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="518.8" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (101 samples, 0.05%)</title><rect x="515.8" y="371.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.8" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (101 samples, 0.05%)</title><rect x="515.8" y="355.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="518.8" y="366.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (101 samples, 0.05%)</title><rect x="515.8" y="339.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="518.8" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (114 samples, 0.05%)</title><rect x="516.3" y="403.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.3" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (114 samples, 0.05%)</title><rect x="516.3" y="387.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="519.3" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (114 samples, 0.05%)</title><rect x="516.3" y="371.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="519.3" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (114 samples, 0.05%)</title><rect x="516.3" y="355.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="519.3" y="366.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (114 samples, 0.05%)</title><rect x="516.3" y="339.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="519.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.iteratorRaw (36,322 samples, 16.95%)</title><rect x="517.0" y="595.0" width="200.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.0" y="606.0">ru/mail/polis/dao/s3ponia/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (6,280 samples, 2.93%)</title><rect x="517.0" y="579.0" width="34.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="520.0" y="590.0">co..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (86 samples, 0.04%)</title><rect x="517.0" y="563.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="520.0" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (6,194 samples, 2.89%)</title><rect x="517.4" y="563.0" width="34.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="520.4" y="574.0">co..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (108 samples, 0.05%)</title><rect x="517.4" y="547.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="520.4" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (404 samples, 0.19%)</title><rect x="518.0" y="547.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="521.0" y="558.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (404 samples, 0.19%)</title><rect x="518.0" y="531.0" width="2.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="521.0" y="542.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (151 samples, 0.07%)</title><rect x="520.2" y="547.0" width="0.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="523.2" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (175 samples, 0.08%)</title><rect x="521.1" y="547.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="524.1" y="558.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (175 samples, 0.08%)</title><rect x="521.1" y="531.0" width="0.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="524.1" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (139 samples, 0.06%)</title><rect x="522.0" y="547.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="525.0" y="558.0"></text>
</g>
<g>
<title>java.lang.Object[] (139 samples, 0.06%)</title><rect x="522.0" y="531.0" width="0.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="525.0" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,891 samples, 1.82%)</title><rect x="522.8" y="547.0" width="21.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="525.8" y="558.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,891 samples, 1.82%)</title><rect x="522.8" y="531.0" width="21.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="525.8" y="542.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (196 samples, 0.09%)</title><rect x="522.8" y="515.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.8" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (196 samples, 0.09%)</title><rect x="522.8" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="525.8" y="510.0"></text>
</g>
<g>
<title>java.lang.Object[] (196 samples, 0.09%)</title><rect x="522.8" y="483.0" width="1.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="525.8" y="494.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,695 samples, 1.72%)</title><rect x="523.9" y="515.0" width="20.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.9" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,695 samples, 1.72%)</title><rect x="523.9" y="499.0" width="20.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="526.9" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,695 samples, 1.72%)</title><rect x="523.9" y="483.0" width="20.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="526.9" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,695 samples, 1.72%)</title><rect x="523.9" y="467.0" width="20.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="526.9" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (331 samples, 0.15%)</title><rect x="523.9" y="451.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (331 samples, 0.15%)</title><rect x="523.9" y="435.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="526.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (331 samples, 0.15%)</title><rect x="523.9" y="419.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="526.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (331 samples, 0.15%)</title><rect x="523.9" y="403.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="526.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (331 samples, 0.15%)</title><rect x="523.9" y="387.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.9" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (331 samples, 0.15%)</title><rect x="523.9" y="371.0" width="1.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="526.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$141/694046326.compare (3,364 samples, 1.57%)</title><rect x="525.7" y="451.0" width="18.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="528.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (3,364 samples, 1.57%)</title><rect x="525.7" y="435.0" width="18.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="528.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (3,364 samples, 1.57%)</title><rect x="525.7" y="419.0" width="18.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="528.7" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (2,950 samples, 1.38%)</title><rect x="525.7" y="403.0" width="16.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="528.7" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (2,950 samples, 1.38%)</title><rect x="525.7" y="387.0" width="16.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="528.7" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (2,950 samples, 1.38%)</title><rect x="525.7" y="371.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="528.7" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2,950 samples, 1.38%)</title><rect x="525.7" y="355.0" width="16.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="528.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$146/320381112.apply (1,333 samples, 0.62%)</title><rect x="525.7" y="339.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="528.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (1,073 samples, 0.50%)</title><rect x="525.7" y="323.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="528.7" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,073 samples, 0.50%)</title><rect x="525.7" y="307.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="528.7" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (727 samples, 0.34%)</title><rect x="525.7" y="291.0" width="4.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="528.7" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (346 samples, 0.16%)</title><rect x="529.7" y="291.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="532.7" y="302.0"></text>
</g>
<g>
<title>byte[] (346 samples, 0.16%)</title><rect x="529.7" y="275.0" width="1.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="532.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (260 samples, 0.12%)</title><rect x="531.6" y="323.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="534.6" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (260 samples, 0.12%)</title><rect x="531.6" y="307.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="534.6" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (260 samples, 0.12%)</title><rect x="531.6" y="291.0" width="1.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="534.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$158/1581500053.apply (1,295 samples, 0.60%)</title><rect x="533.1" y="339.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="536.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getValue (1,295 samples, 0.60%)</title><rect x="533.1" y="323.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="536.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,147 samples, 0.54%)</title><rect x="533.1" y="307.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.1" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (723 samples, 0.34%)</title><rect x="533.1" y="291.0" width="3.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="536.1" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (424 samples, 0.20%)</title><rect x="537.0" y="291.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="540.0" y="302.0"></text>
</g>
<g>
<title>byte[] (424 samples, 0.20%)</title><rect x="537.0" y="275.0" width="2.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="540.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.of (148 samples, 0.07%)</title><rect x="539.4" y="307.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="542.4" y="318.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Value (148 samples, 0.07%)</title><rect x="539.4" y="291.0" width="0.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="542.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.compareTo (322 samples, 0.15%)</title><rect x="540.2" y="339.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="543.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.compareTo (322 samples, 0.15%)</title><rect x="540.2" y="323.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="543.2" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$ReverseComparator2.compare (141 samples, 0.07%)</title><rect x="540.2" y="307.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.2" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (141 samples, 0.07%)</title><rect x="540.2" y="291.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="543.2" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (141 samples, 0.07%)</title><rect x="540.2" y="275.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="543.2" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (141 samples, 0.07%)</title><rect x="540.2" y="259.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="543.2" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (141 samples, 0.07%)</title><rect x="540.2" y="243.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value$$Lambda$187/2092749713.apply (141 samples, 0.07%)</title><rect x="540.2" y="227.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="543.2" y="238.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (141 samples, 0.07%)</title><rect x="540.2" y="211.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="543.2" y="222.0"></text>
</g>
<g>
<title>java.lang.Long (141 samples, 0.07%)</title><rect x="540.2" y="195.0" width="0.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="543.2" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (101 samples, 0.05%)</title><rect x="541.4" y="307.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.4" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (51 samples, 0.02%)</title><rect x="541.4" y="291.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.4" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (51 samples, 0.02%)</title><rect x="541.4" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="544.4" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (51 samples, 0.02%)</title><rect x="541.4" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="544.4" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (51 samples, 0.02%)</title><rect x="541.4" y="243.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="544.4" y="254.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (51 samples, 0.02%)</title><rect x="541.4" y="227.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="544.4" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (50 samples, 0.02%)</title><rect x="541.7" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="544.7" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (50 samples, 0.02%)</title><rect x="541.7" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.7" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (50 samples, 0.02%)</title><rect x="541.7" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="544.7" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (50 samples, 0.02%)</title><rect x="541.7" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="544.7" y="254.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (50 samples, 0.02%)</title><rect x="541.7" y="227.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="544.7" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (117 samples, 0.05%)</title><rect x="542.0" y="403.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.0" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (117 samples, 0.05%)</title><rect x="542.0" y="387.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="545.0" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (117 samples, 0.05%)</title><rect x="542.0" y="371.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="545.0" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (117 samples, 0.05%)</title><rect x="542.0" y="355.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="545.0" y="366.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (117 samples, 0.05%)</title><rect x="542.0" y="339.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="545.0" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (297 samples, 0.14%)</title><rect x="542.6" y="403.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="545.6" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (126 samples, 0.06%)</title><rect x="542.6" y="387.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="545.6" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (126 samples, 0.06%)</title><rect x="542.6" y="371.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="545.6" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (126 samples, 0.06%)</title><rect x="542.6" y="355.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.6" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.get$Lambda (126 samples, 0.06%)</title><rect x="542.6" y="339.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="545.6" y="350.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$153 (126 samples, 0.06%)</title><rect x="542.6" y="323.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="545.6" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (171 samples, 0.08%)</title><rect x="543.3" y="387.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="546.3" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (171 samples, 0.08%)</title><rect x="543.3" y="371.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="546.3" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (171 samples, 0.08%)</title><rect x="543.3" y="355.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="546.3" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (171 samples, 0.08%)</title><rect x="543.3" y="339.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.3" y="350.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (171 samples, 0.08%)</title><rect x="543.3" y="323.0" width="0.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="546.3" y="334.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1,326 samples, 0.62%)</title><rect x="544.2" y="547.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.2" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1,326 samples, 0.62%)</title><rect x="544.2" y="531.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="547.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1,326 samples, 0.62%)</title><rect x="544.2" y="515.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="547.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (229 samples, 0.11%)</title><rect x="544.2" y="499.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="547.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$130/1700048193.getAsBoolean (229 samples, 0.11%)</title><rect x="544.2" y="483.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.2" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (229 samples, 0.11%)</title><rect x="544.2" y="467.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="547.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (229 samples, 0.11%)</title><rect x="544.2" y="451.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (123 samples, 0.06%)</title><rect x="544.2" y="435.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (123 samples, 0.06%)</title><rect x="544.2" y="419.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="547.2" y="430.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (123 samples, 0.06%)</title><rect x="544.2" y="403.0" width="0.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="547.2" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (106 samples, 0.05%)</title><rect x="544.9" y="435.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="547.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable$$Lambda$126/1756771783.apply (106 samples, 0.05%)</title><rect x="544.9" y="419.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.lambda$iterator$2 (106 samples, 0.05%)</title><rect x="544.9" y="403.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="547.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.of (106 samples, 0.05%)</title><rect x="544.9" y="387.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="547.9" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Cell (106 samples, 0.05%)</title><rect x="544.9" y="371.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="547.9" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (1,097 samples, 0.51%)</title><rect x="545.5" y="499.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="548.5" y="510.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (220 samples, 0.10%)</title><rect x="545.5" y="483.0" width="1.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="548.5" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (157 samples, 0.07%)</title><rect x="546.7" y="483.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="549.7" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (157 samples, 0.07%)</title><rect x="546.7" y="467.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="549.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$129/360318989.get$Lambda (75 samples, 0.03%)</title><rect x="546.7" y="451.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="549.7" y="462.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$129 (75 samples, 0.03%)</title><rect x="546.7" y="435.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="549.7" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$130/1700048193.get$Lambda (82 samples, 0.04%)</title><rect x="547.1" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="550.1" y="462.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$130 (82 samples, 0.04%)</title><rect x="547.1" y="435.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="550.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (264 samples, 0.12%)</title><rect x="547.6" y="483.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="550.6" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (264 samples, 0.12%)</title><rect x="547.6" y="467.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="550.6" y="478.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (264 samples, 0.12%)</title><rect x="547.6" y="451.0" width="1.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="550.6" y="462.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (456 samples, 0.21%)</title><rect x="549.0" y="483.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.0" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (456 samples, 0.21%)</title><rect x="549.0" y="467.0" width="2.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="552.0" y="478.0"></text>
</g>
<g>
<title>java.util.ArrayList (66 samples, 0.03%)</title><rect x="551.5" y="579.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="554.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (189 samples, 0.09%)</title><rect x="551.9" y="579.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="554.9" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (189 samples, 0.09%)</title><rect x="551.9" y="563.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="554.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$137/1873546051.get$Lambda (60 samples, 0.03%)</title><rect x="551.9" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="554.9" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.PersistenceDAO$$Lambda$137 (60 samples, 0.03%)</title><rect x="551.9" y="531.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="554.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$138/1559159104.get$Lambda (129 samples, 0.06%)</title><rect x="552.2" y="547.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="555.2" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.PersistenceDAO$$Lambda$138 (129 samples, 0.06%)</title><rect x="552.2" y="531.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="555.2" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (176 samples, 0.08%)</title><rect x="552.9" y="579.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="555.9" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (176 samples, 0.08%)</title><rect x="552.9" y="563.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="555.9" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (176 samples, 0.08%)</title><rect x="552.9" y="547.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.9" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (176 samples, 0.08%)</title><rect x="552.9" y="531.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="555.9" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (176 samples, 0.08%)</title><rect x="552.9" y="515.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.9" y="526.0"></text>
</g>
<g>
<title>java.lang.Object[] (176 samples, 0.08%)</title><rect x="552.9" y="499.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="555.9" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.forEach (224 samples, 0.10%)</title><rect x="553.9" y="579.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="556.9" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (224 samples, 0.10%)</title><rect x="553.9" y="563.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="556.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (224 samples, 0.10%)</title><rect x="553.9" y="547.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="556.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (224 samples, 0.10%)</title><rect x="553.9" y="531.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="556.9" y="542.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (224 samples, 0.10%)</title><rect x="553.9" y="515.0" width="1.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="556.9" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (27,339 samples, 12.76%)</title><rect x="555.1" y="579.0" width="150.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="558.1" y="590.0">java/util/Collectio..</text>
</g>
<g>
<title>java/util/TreeMap.forEach (27,339 samples, 12.76%)</title><rect x="555.1" y="563.0" width="150.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="558.1" y="574.0">java/util/TreeMap.f..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$137/1873546051.accept (27,339 samples, 12.76%)</title><rect x="555.1" y="547.0" width="150.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="558.1" y="558.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.lambda$iteratorRaw$2 (27,339 samples, 12.76%)</title><rect x="555.1" y="531.0" width="150.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="558.1" y="542.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.iterator (27,339 samples, 12.76%)</title><rect x="555.1" y="515.0" width="150.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="558.1" y="526.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$DiskTableIterator (211 samples, 0.10%)</title><rect x="555.1" y="499.0" width="1.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="558.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.&lt;init&gt; (27,128 samples, 12.66%)</title><rect x="556.3" y="499.0" width="149.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="559.3" y="510.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getElementIndex (27,128 samples, 12.66%)</title><rect x="556.3" y="483.0" width="149.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="559.3" y="494.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (5,956 samples, 2.78%)</title><rect x="556.3" y="467.0" width="32.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="559.3" y="478.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (5,956 samples, 2.78%)</title><rect x="556.3" y="451.0" width="32.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.3" y="462.0">ru..</text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (5,956 samples, 2.78%)</title><rect x="556.3" y="435.0" width="32.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="559.3" y="446.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (21,172 samples, 9.88%)</title><rect x="589.1" y="467.0" width="116.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.1" y="478.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (21,172 samples, 9.88%)</title><rect x="589.1" y="451.0" width="116.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="592.1" y="462.0">java/nio/ByteB..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (13,987 samples, 6.53%)</title><rect x="589.1" y="435.0" width="77.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="592.1" y="446.0">java.nio...</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7,185 samples, 3.35%)</title><rect x="666.1" y="435.0" width="39.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="669.1" y="446.0">jav..</text>
</g>
<g>
<title>byte[] (7,185 samples, 3.35%)</title><rect x="666.1" y="419.0" width="39.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="669.1" y="430.0">byt..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1,029 samples, 0.48%)</title><rect x="705.7" y="579.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.7" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (85 samples, 0.04%)</title><rect x="705.7" y="563.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="708.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (944 samples, 0.44%)</title><rect x="706.2" y="563.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.2" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (944 samples, 0.44%)</title><rect x="706.2" y="547.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="709.2" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (261 samples, 0.12%)</title><rect x="706.2" y="531.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="709.2" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (261 samples, 0.12%)</title><rect x="706.2" y="515.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="709.2" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (261 samples, 0.12%)</title><rect x="706.2" y="499.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="709.2" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (261 samples, 0.12%)</title><rect x="706.2" y="483.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.2" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (261 samples, 0.12%)</title><rect x="706.2" y="467.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="709.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$141/694046326.compare (261 samples, 0.12%)</title><rect x="706.2" y="451.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="709.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (261 samples, 0.12%)</title><rect x="706.2" y="435.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (261 samples, 0.12%)</title><rect x="706.2" y="419.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="709.2" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (124 samples, 0.06%)</title><rect x="706.2" y="403.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.2" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (124 samples, 0.06%)</title><rect x="706.2" y="387.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="709.2" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (124 samples, 0.06%)</title><rect x="706.2" y="371.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="709.2" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (124 samples, 0.06%)</title><rect x="706.2" y="355.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="709.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$146/320381112.apply (124 samples, 0.06%)</title><rect x="706.2" y="339.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (124 samples, 0.06%)</title><rect x="706.2" y="323.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="709.2" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (124 samples, 0.06%)</title><rect x="706.2" y="307.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.2" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (124 samples, 0.06%)</title><rect x="706.2" y="291.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="709.2" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (98 samples, 0.05%)</title><rect x="707.1" y="403.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="710.1" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (68 samples, 0.03%)</title><rect x="707.2" y="387.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.2" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (68 samples, 0.03%)</title><rect x="707.2" y="371.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="710.2" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (68 samples, 0.03%)</title><rect x="707.2" y="355.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.2" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (68 samples, 0.03%)</title><rect x="707.2" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.2" y="350.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (68 samples, 0.03%)</title><rect x="707.2" y="323.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="710.2" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (683 samples, 0.32%)</title><rect x="707.6" y="531.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="710.6" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (683 samples, 0.32%)</title><rect x="707.6" y="515.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.6" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (683 samples, 0.32%)</title><rect x="707.6" y="499.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="710.6" y="510.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (683 samples, 0.32%)</title><rect x="707.6" y="483.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.6" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (683 samples, 0.32%)</title><rect x="707.6" y="467.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.6" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (683 samples, 0.32%)</title><rect x="707.6" y="451.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (158 samples, 0.07%)</title><rect x="707.6" y="435.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="710.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (158 samples, 0.07%)</title><rect x="707.6" y="419.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="710.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (158 samples, 0.07%)</title><rect x="707.6" y="403.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (158 samples, 0.07%)</title><rect x="707.6" y="387.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (158 samples, 0.07%)</title><rect x="707.6" y="371.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.6" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (158 samples, 0.07%)</title><rect x="707.6" y="355.0" width="0.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="710.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$141/694046326.compare (525 samples, 0.24%)</title><rect x="708.5" y="435.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="711.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (525 samples, 0.24%)</title><rect x="708.5" y="419.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (525 samples, 0.24%)</title><rect x="708.5" y="403.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="711.5" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.compare (392 samples, 0.18%)</title><rect x="708.5" y="387.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="711.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (392 samples, 0.18%)</title><rect x="708.5" y="371.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="711.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$153/1591265260.compare (392 samples, 0.18%)</title><rect x="708.5" y="355.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="711.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (392 samples, 0.18%)</title><rect x="708.5" y="339.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="711.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$146/320381112.apply (392 samples, 0.18%)</title><rect x="708.5" y="323.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="711.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (392 samples, 0.18%)</title><rect x="708.5" y="307.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (392 samples, 0.18%)</title><rect x="708.5" y="291.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="711.5" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (263 samples, 0.12%)</title><rect x="708.5" y="275.0" width="1.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="711.5" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (129 samples, 0.06%)</title><rect x="709.9" y="275.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.9" y="286.0"></text>
</g>
<g>
<title>byte[] (129 samples, 0.06%)</title><rect x="709.9" y="259.0" width="0.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="712.9" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (99 samples, 0.05%)</title><rect x="710.8" y="387.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.8" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (64 samples, 0.03%)</title><rect x="711.0" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="714.0" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (64 samples, 0.03%)</title><rect x="711.0" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="714.0" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (64 samples, 0.03%)</title><rect x="711.0" y="339.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="714.0" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (64 samples, 0.03%)</title><rect x="711.0" y="323.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.0" y="334.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (64 samples, 0.03%)</title><rect x="711.0" y="307.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="714.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.iterator (1,019 samples, 0.48%)</title><rect x="711.4" y="579.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="714.4" y="590.0"></text>
</g>
<g>
<title>java/util/Collection.stream (250 samples, 0.12%)</title><rect x="711.4" y="563.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="714.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (82 samples, 0.04%)</title><rect x="711.4" y="547.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="714.4" y="558.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (82 samples, 0.04%)</title><rect x="711.4" y="531.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="714.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (168 samples, 0.08%)</title><rect x="711.8" y="547.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="714.8" y="558.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (168 samples, 0.08%)</title><rect x="711.8" y="531.0" width="0.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="714.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (46 samples, 0.02%)</title><rect x="712.7" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="715.7" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (46 samples, 0.02%)</title><rect x="712.7" y="547.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="715.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (112 samples, 0.05%)</title><rect x="713.0" y="563.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="716.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (112 samples, 0.05%)</title><rect x="713.0" y="547.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (112 samples, 0.05%)</title><rect x="713.0" y="531.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="716.0" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (112 samples, 0.05%)</title><rect x="713.0" y="515.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="716.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (281 samples, 0.13%)</title><rect x="713.6" y="563.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="716.6" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (69 samples, 0.03%)</title><rect x="713.6" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="716.6" y="558.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (69 samples, 0.03%)</title><rect x="713.6" y="531.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="716.6" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (212 samples, 0.10%)</title><rect x="714.0" y="547.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="717.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (169 samples, 0.08%)</title><rect x="714.2" y="531.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="717.2" y="542.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (169 samples, 0.08%)</title><rect x="714.2" y="515.0" width="0.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="717.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (330 samples, 0.15%)</title><rect x="715.1" y="563.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="718.1" y="574.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (330 samples, 0.15%)</title><rect x="715.1" y="547.0" width="1.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="718.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.getValue (97 samples, 0.05%)</title><rect x="717.0" y="611.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="720.0" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (97 samples, 0.05%)</title><rect x="717.0" y="595.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="720.0" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (97 samples, 0.05%)</title><rect x="717.0" y="579.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="720.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getReplicationConfiguration (709 samples, 0.33%)</title><rect x="717.5" y="611.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="720.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.parseAndValidateReplicas (709 samples, 0.33%)</title><rect x="717.5" y="595.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="720.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$ReplicationConfiguration.parse (657 samples, 0.31%)</title><rect x="717.5" y="579.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="720.5" y="590.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (120 samples, 0.06%)</title><rect x="717.5" y="563.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="720.5" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (83 samples, 0.04%)</title><rect x="717.7" y="547.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="720.7" y="558.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter (48 samples, 0.02%)</title><rect x="717.9" y="531.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="720.9" y="542.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (486 samples, 0.23%)</title><rect x="718.2" y="563.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="721.2" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (183 samples, 0.09%)</title><rect x="718.2" y="547.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.2" y="558.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (183 samples, 0.09%)</title><rect x="718.2" y="531.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="721.2" y="542.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (183 samples, 0.09%)</title><rect x="718.2" y="515.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="721.2" y="526.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (183 samples, 0.09%)</title><rect x="718.2" y="499.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="721.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (183 samples, 0.09%)</title><rect x="718.2" y="483.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="721.2" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (183 samples, 0.09%)</title><rect x="718.2" y="467.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.2" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (183 samples, 0.09%)</title><rect x="718.2" y="451.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="721.2" y="462.0"></text>
</g>
<g>
<title>java.lang.String (102 samples, 0.05%)</title><rect x="718.2" y="435.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="721.2" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (81 samples, 0.04%)</title><rect x="718.7" y="435.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="721.7" y="446.0"></text>
</g>
<g>
<title>byte[] (81 samples, 0.04%)</title><rect x="718.7" y="419.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="721.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (103 samples, 0.05%)</title><rect x="719.2" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="722.2" y="558.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (103 samples, 0.05%)</title><rect x="719.2" y="531.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="722.2" y="542.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (103 samples, 0.05%)</title><rect x="719.2" y="515.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="722.2" y="526.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1$1 (103 samples, 0.05%)</title><rect x="719.2" y="499.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="722.2" y="510.0"></text>
</g>
<g>
<title>java.util.ArrayList (60 samples, 0.03%)</title><rect x="719.7" y="547.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="722.7" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (84 samples, 0.04%)</title><rect x="720.1" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.1" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (84 samples, 0.04%)</title><rect x="720.1" y="531.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="723.1" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (84 samples, 0.04%)</title><rect x="720.1" y="515.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="723.1" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (84 samples, 0.04%)</title><rect x="720.1" y="499.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="723.1" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (84 samples, 0.04%)</title><rect x="720.1" y="483.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="723.1" y="494.0"></text>
</g>
<g>
<title>java.lang.Object[] (84 samples, 0.04%)</title><rect x="720.1" y="467.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="723.1" y="478.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (56 samples, 0.03%)</title><rect x="720.5" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="723.5" y="558.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableRandomAccessList (56 samples, 0.03%)</title><rect x="720.5" y="531.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="723.5" y="542.0"></text>
</g>
<g>
<title>ru.mail.polis.s3ponia.Utility$ReplicationConfiguration (51 samples, 0.02%)</title><rect x="720.8" y="563.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="723.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.all (52 samples, 0.02%)</title><rect x="721.1" y="579.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="724.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.all (52 samples, 0.02%)</title><rect x="721.1" y="563.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.1" y="574.0"></text>
</g>
<g>
<title>java.lang.String[] (52 samples, 0.02%)</title><rect x="721.1" y="547.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="724.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getValues (42,191 samples, 19.69%)</title><rect x="721.4" y="611.0" width="232.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.4" y="622.0">ru/mail/polis/s3ponia/AsyncServ..</text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getFutures (41,345 samples, 19.29%)</title><rect x="721.4" y="595.0" width="227.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="724.4" y="606.0">ru/mail/polis/s3ponia/AsyncSer..</text>
</g>
<g>
<title>java.util.ArrayList (53 samples, 0.02%)</title><rect x="721.4" y="579.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="724.4" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (70 samples, 0.03%)</title><rect x="721.7" y="579.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.7" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (70 samples, 0.03%)</title><rect x="721.7" y="563.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="724.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.proxy (41,222 samples, 19.24%)</title><rect x="722.1" y="579.0" width="227.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="725.1" y="590.0">ru/mail/polis/s3ponia/AsyncSer..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (145 samples, 0.07%)</title><rect x="722.1" y="563.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="725.1" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1472465.invoke (145 samples, 0.07%)</title><rect x="722.1" y="547.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.1" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (145 samples, 0.07%)</title><rect x="722.1" y="531.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="725.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (47 samples, 0.02%)</title><rect x="722.1" y="515.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="725.1" y="526.0"></text>
</g>
<g>
<title>java.lang.String (47 samples, 0.02%)</title><rect x="722.1" y="499.0" width="0.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="725.1" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (98 samples, 0.05%)</title><rect x="722.3" y="515.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="725.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (98 samples, 0.05%)</title><rect x="722.3" y="499.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="725.3" y="510.0"></text>
</g>
<g>
<title>byte[] (98 samples, 0.05%)</title><rect x="722.3" y="483.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="725.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (41,077 samples, 19.17%)</title><rect x="722.9" y="563.0" width="226.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="725.9" y="574.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (41,077 samples, 19.17%)</title><rect x="722.9" y="547.0" width="226.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="725.9" y="558.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (85 samples, 0.04%)</title><rect x="722.9" y="531.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="725.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (36,437 samples, 17.00%)</title><rect x="723.3" y="531.0" width="200.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="726.3" y="542.0">one/nio/http/HttpClient$Re..</text>
</g>
<g>
<title>byte[] (20,699 samples, 9.66%)</title><rect x="723.3" y="515.0" width="114.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="726.3" y="526.0">byte[]</text>
</g>
<g>
<title>byte[] (15,738 samples, 7.34%)</title><rect x="837.3" y="515.0" width="86.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="840.3" y="526.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (3,951 samples, 1.84%)</title><rect x="924.0" y="531.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.0" y="542.0">o..</text>
</g>
<g>
<title>byte[] (78 samples, 0.04%)</title><rect x="924.0" y="515.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="927.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (156 samples, 0.07%)</title><rect x="924.4" y="515.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="927.4" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (156 samples, 0.07%)</title><rect x="924.4" y="499.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.4" y="510.0"></text>
</g>
<g>
<title>java.lang.String (71 samples, 0.03%)</title><rect x="924.4" y="483.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="927.4" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (85 samples, 0.04%)</title><rect x="924.8" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="927.8" y="494.0"></text>
</g>
<g>
<title>byte[] (85 samples, 0.04%)</title><rect x="924.8" y="467.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="927.8" y="478.0"></text>
</g>
<g>
<title>one.nio.http.Response (75 samples, 0.03%)</title><rect x="925.3" y="515.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="928.3" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (3,401 samples, 1.59%)</title><rect x="925.7" y="515.0" width="18.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="928.7" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,401 samples, 1.59%)</title><rect x="925.7" y="499.0" width="18.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="928.7" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,401 samples, 1.59%)</title><rect x="925.7" y="483.0" width="18.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="928.7" y="494.0"></text>
</g>
<g>
<title>char[] (2,400 samples, 1.12%)</title><rect x="925.7" y="467.0" width="13.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="928.7" y="478.0"></text>
</g>
<g>
<title>java.lang.String (415 samples, 0.19%)</title><rect x="938.9" y="467.0" width="2.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="941.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (586 samples, 0.27%)</title><rect x="941.2" y="467.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="944.2" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (586 samples, 0.27%)</title><rect x="941.2" y="451.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="944.2" y="462.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (586 samples, 0.27%)</title><rect x="941.2" y="435.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="944.2" y="446.0"></text>
</g>
<g>
<title>byte[] (586 samples, 0.27%)</title><rect x="941.2" y="419.0" width="3.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="944.2" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (99 samples, 0.05%)</title><rect x="944.4" y="515.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="947.4" y="526.0"></text>
</g>
<g>
<title>java.lang.String[] (99 samples, 0.05%)</title><rect x="944.4" y="499.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="947.4" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (142 samples, 0.07%)</title><rect x="945.0" y="515.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="948.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (142 samples, 0.07%)</title><rect x="945.0" y="499.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="948.0" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (142 samples, 0.07%)</title><rect x="945.0" y="483.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="948.0" y="494.0"></text>
</g>
<g>
<title>java.lang.String (70 samples, 0.03%)</title><rect x="945.0" y="467.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="948.0" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (72 samples, 0.03%)</title><rect x="945.3" y="467.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="948.3" y="478.0"></text>
</g>
<g>
<title>byte[] (72 samples, 0.03%)</title><rect x="945.3" y="451.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="948.3" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (370 samples, 0.17%)</title><rect x="945.7" y="531.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="948.7" y="542.0"></text>
</g>
<g>
<title>one.nio.util.ByteArrayBuilder (62 samples, 0.03%)</title><rect x="945.7" y="515.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="948.7" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (308 samples, 0.14%)</title><rect x="946.1" y="515.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="949.1" y="526.0"></text>
</g>
<g>
<title>byte[] (308 samples, 0.14%)</title><rect x="946.1" y="499.0" width="1.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="949.1" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (147 samples, 0.07%)</title><rect x="947.8" y="531.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.8" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (147 samples, 0.07%)</title><rect x="947.8" y="515.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="950.8" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (147 samples, 0.07%)</title><rect x="947.8" y="499.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="950.8" y="510.0"></text>
</g>
<g>
<title>java.lang.String (56 samples, 0.03%)</title><rect x="947.8" y="483.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="950.8" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (91 samples, 0.04%)</title><rect x="948.1" y="483.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="951.1" y="494.0"></text>
</g>
<g>
<title>byte[] (91 samples, 0.04%)</title><rect x="948.1" y="467.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="951.1" y="478.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (87 samples, 0.04%)</title><rect x="948.6" y="531.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="951.6" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (87 samples, 0.04%)</title><rect x="948.6" y="515.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="951.6" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (87 samples, 0.04%)</title><rect x="948.6" y="499.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="951.6" y="510.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (87 samples, 0.04%)</title><rect x="948.6" y="483.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="951.6" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.getValuesFromFutures (846 samples, 0.39%)</title><rect x="949.1" y="595.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="952.1" y="606.0"></text>
</g>
<g>
<title>java.util.ArrayList (72 samples, 0.03%)</title><rect x="949.1" y="579.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="952.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (144 samples, 0.07%)</title><rect x="949.5" y="579.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="952.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (144 samples, 0.07%)</title><rect x="949.5" y="563.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="952.5" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (144 samples, 0.07%)</title><rect x="949.5" y="547.0" width="0.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="952.5" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (87 samples, 0.04%)</title><rect x="950.3" y="579.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="953.3" y="590.0"></text>
</g>
<g>
<title>java.lang.Object[] (87 samples, 0.04%)</title><rect x="950.3" y="563.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="953.3" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (87 samples, 0.04%)</title><rect x="950.7" y="579.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="953.7" y="590.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (87 samples, 0.04%)</title><rect x="950.7" y="563.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="953.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.of (94 samples, 0.04%)</title><rect x="951.2" y="579.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="954.2" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Value (94 samples, 0.04%)</title><rect x="951.2" y="563.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="954.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.getDeadFlagTimeStamp (362 samples, 0.17%)</title><rect x="951.7" y="579.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="954.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$Header.getHeader (362 samples, 0.17%)</title><rect x="951.7" y="563.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="954.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$Header.getHeader (362 samples, 0.17%)</title><rect x="951.7" y="547.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="954.7" y="558.0"></text>
</g>
<g>
<title>java/lang/String.stripLeading (144 samples, 0.07%)</title><rect x="951.7" y="531.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="954.7" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.stripLeading (144 samples, 0.07%)</title><rect x="951.7" y="515.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="954.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (144 samples, 0.07%)</title><rect x="951.7" y="499.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="954.7" y="510.0"></text>
</g>
<g>
<title>java.lang.String (71 samples, 0.03%)</title><rect x="951.7" y="483.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="954.7" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (73 samples, 0.03%)</title><rect x="952.1" y="483.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="955.1" y="494.0"></text>
</g>
<g>
<title>byte[] (73 samples, 0.03%)</title><rect x="952.1" y="467.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="955.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (153 samples, 0.07%)</title><rect x="952.5" y="531.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="955.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (153 samples, 0.07%)</title><rect x="952.5" y="515.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.5" y="526.0"></text>
</g>
<g>
<title>java.lang.String (72 samples, 0.03%)</title><rect x="952.5" y="499.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="955.5" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (81 samples, 0.04%)</title><rect x="952.9" y="499.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="955.9" y="510.0"></text>
</g>
<g>
<title>byte[] (81 samples, 0.04%)</title><rect x="952.9" y="483.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="955.9" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.s3ponia.Utility$Header (65 samples, 0.03%)</title><rect x="953.4" y="531.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="956.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.byteBufferFromString (4,871 samples, 2.27%)</title><rect x="953.7" y="611.0" width="26.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="956.7" y="622.0">r..</text>
</g>
<g>
<title>java/lang/String.getBytes (1,551 samples, 0.72%)</title><rect x="953.7" y="595.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="956.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,551 samples, 0.72%)</title><rect x="953.7" y="579.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="956.7" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,551 samples, 0.72%)</title><rect x="953.7" y="563.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.7" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,551 samples, 0.72%)</title><rect x="953.7" y="547.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="956.7" y="558.0"></text>
</g>
<g>
<title>byte[] (1,551 samples, 0.72%)</title><rect x="953.7" y="531.0" width="8.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="956.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,320 samples, 1.55%)</title><rect x="962.3" y="595.0" width="18.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="965.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,320 samples, 1.55%)</title><rect x="962.3" y="579.0" width="18.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="965.3" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,320 samples, 1.55%)</title><rect x="962.3" y="563.0" width="18.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="965.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.fromByteBuffer (50 samples, 0.02%)</title><rect x="980.6" y="611.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="983.6" y="622.0"></text>
</g>
<g>
<title>byte[] (50 samples, 0.02%)</title><rect x="980.6" y="595.0" width="0.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="983.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.valueResponseComparator (114 samples, 0.05%)</title><rect x="980.8" y="611.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="983.8" y="622.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (54 samples, 0.03%)</title><rect x="981.2" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="984.2" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (54 samples, 0.03%)</title><rect x="981.2" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="984.2" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (54 samples, 0.03%)</title><rect x="981.2" y="563.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="984.2" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$170/1571037823.get$Lambda (54 samples, 0.03%)</title><rect x="981.2" y="547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="984.2" y="558.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$170 (54 samples, 0.03%)</title><rect x="981.2" y="531.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="984.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNodeReplicas (106 samples, 0.05%)</title><rect x="981.5" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="984.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNodeReplicas (106 samples, 0.05%)</title><rect x="981.5" y="595.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="984.5" y="606.0"></text>
</g>
<g>
<title>java.lang.String[] (93 samples, 0.04%)</title><rect x="981.5" y="579.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="984.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3,299 samples, 1.54%)</title><rect x="982.0" y="643.0" width="18.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="985.0" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (3,299 samples, 1.54%)</title><rect x="982.0" y="627.0" width="18.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="985.0" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,299 samples, 1.54%)</title><rect x="982.0" y="611.0" width="18.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="985.0" y="622.0"></text>
</g>
<g>
<title>java.lang.String (1,678 samples, 0.78%)</title><rect x="982.0" y="595.0" width="9.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="985.0" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,621 samples, 0.76%)</title><rect x="991.3" y="595.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="994.3" y="606.0"></text>
</g>
<g>
<title>byte[] (1,621 samples, 0.76%)</title><rect x="991.3" y="579.0" width="8.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="994.3" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16,677 samples, 7.78%)</title><rect x="1000.2" y="675.0" width="91.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1003.2" y="686.0">one/nio/htt..</text>
</g>
<g>
<title>one.nio.http.Request (2,432 samples, 1.13%)</title><rect x="1000.2" y="659.0" width="13.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1003.2" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4,818 samples, 2.25%)</title><rect x="1013.6" y="659.0" width="26.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1016.6" y="670.0">o..</text>
</g>
<g>
<title>java.lang.String[] (4,813 samples, 2.25%)</title><rect x="1013.6" y="643.0" width="26.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1016.6" y="654.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (9,427 samples, 4.40%)</title><rect x="1040.1" y="659.0" width="51.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1043.1" y="670.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (9,427 samples, 4.40%)</title><rect x="1040.1" y="643.0" width="51.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1043.1" y="654.0">one/n..</text>
</g>
<g>
<title>char[] (5,263 samples, 2.46%)</title><rect x="1040.1" y="627.0" width="29.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1043.1" y="638.0">ch..</text>
</g>
<g>
<title>java.lang.String (1,389 samples, 0.65%)</title><rect x="1069.1" y="627.0" width="7.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1072.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,774 samples, 1.29%)</title><rect x="1076.8" y="627.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1079.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,774 samples, 1.29%)</title><rect x="1076.8" y="611.0" width="15.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1079.8" y="622.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,774 samples, 1.29%)</title><rect x="1076.8" y="595.0" width="15.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1079.8" y="606.0"></text>
</g>
<g>
<title>byte[] (2,774 samples, 1.29%)</title><rect x="1076.8" y="579.0" width="15.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1079.8" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17,790 samples, 8.30%)</title><rect x="1092.0" y="675.0" width="98.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1095.0" y="686.0">one/nio/uti..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (17,790 samples, 8.30%)</title><rect x="1092.0" y="659.0" width="98.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1095.0" y="670.0">one/nio/uti..</text>
</g>
<g>
<title>char[] (8,603 samples, 4.01%)</title><rect x="1092.0" y="643.0" width="47.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1095.0" y="654.0">char[]</text>
</g>
<g>
<title>java.lang.String (2,795 samples, 1.30%)</title><rect x="1139.5" y="643.0" width="15.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1142.5" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6,374 samples, 2.97%)</title><rect x="1154.9" y="643.0" width="35.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1157.9" y="654.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6,374 samples, 2.97%)</title><rect x="1154.9" y="627.0" width="35.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1157.9" y="638.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (6,374 samples, 2.97%)</title><rect x="1154.9" y="611.0" width="35.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1157.9" y="622.0">jav..</text>
</g>
<g>
<title>byte[] (6,374 samples, 2.97%)</title><rect x="1154.9" y="595.0" width="35.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1157.9" y="606.0">byt..</text>
</g>
</g>
</svg>
