<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (10,956,651 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (35,966 samples, 0.33%)</title><rect x="10.4" y="739.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.4" y="750.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (35,918 samples, 0.33%)</title><rect x="10.4" y="723.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.4" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.94] (35,598 samples, 0.32%)</title><rect x="10.4" y="707.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.4" y="718.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (34,752 samples, 0.32%)</title><rect x="10.5" y="691.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.5" y="702.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.72] (32,670 samples, 0.30%)</title><rect x="10.5" y="675.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.5" y="686.0"></text>
</g>
<g>
<title>[no_Java_frame] (17,774 samples, 0.16%)</title><rect x="14.3" y="739.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="17.3" y="750.0"></text>
</g>
<g>
<title>[not_walkable_Java] (11,473 samples, 0.10%)</title><rect x="16.2" y="739.0" width="1.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="19.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6,167 samples, 0.06%)</title><rect x="16.4" y="723.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="19.4" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5,383 samples, 0.05%)</title><rect x="16.4" y="707.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="19.4" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3,564 samples, 0.03%)</title><rect x="16.6" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="19.6" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2,530 samples, 0.02%)</title><rect x="17.1" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="20.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (7,282 samples, 0.07%)</title><rect x="17.5" y="739.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="20.5" y="750.0"></text>
</g>
<g>
<title>/lib64/ld-2.30.so (3,060 samples, 0.03%)</title><rect x="17.5" y="723.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="20.5" y="734.0"></text>
</g>
<g>
<title>[unknown_Java] (15,104 samples, 0.14%)</title><rect x="18.3" y="739.0" width="1.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="21.3" y="750.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (6,482 samples, 0.06%)</title><rect x="19.2" y="723.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="22.2" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6,177 samples, 0.06%)</title><rect x="19.2" y="707.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="22.2" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (6,177 samples, 0.06%)</title><rect x="19.2" y="691.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="22.2" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (5,986 samples, 0.05%)</title><rect x="19.2" y="675.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="22.2" y="686.0"></text>
</g>
<g>
<title>do_futex (5,885 samples, 0.05%)</title><rect x="19.3" y="659.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="22.3" y="670.0"></text>
</g>
<g>
<title>futex_wake (5,855 samples, 0.05%)</title><rect x="19.3" y="643.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="22.3" y="654.0"></text>
</g>
<g>
<title>wake_up_q (4,381 samples, 0.04%)</title><rect x="19.4" y="627.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="22.4" y="638.0"></text>
</g>
<g>
<title>try_to_wake_up (4,354 samples, 0.04%)</title><rect x="19.4" y="611.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="22.4" y="622.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4,318 samples, 0.04%)</title><rect x="19.4" y="595.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="22.4" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,224,640 samples, 29.43%)</title><rect x="20.1" y="739.0" width="347.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.1" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,224,455 samples, 29.43%)</title><rect x="20.1" y="723.0" width="347.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.1" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker...</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,224,455 samples, 29.43%)</title><rect x="20.1" y="707.0" width="347.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.1" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3,405 samples, 0.03%)</title><rect x="20.5" y="691.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3,352 samples, 0.03%)</title><rect x="20.5" y="675.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3,352 samples, 0.03%)</title><rect x="20.5" y="659.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3,307 samples, 0.03%)</title><rect x="20.5" y="643.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.5" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3,307 samples, 0.03%)</title><rect x="20.5" y="627.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.5" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3,307 samples, 0.03%)</title><rect x="20.5" y="611.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2,479 samples, 0.02%)</title><rect x="20.8" y="691.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2,473 samples, 0.02%)</title><rect x="20.8" y="675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (693,873 samples, 6.33%)</title><rect x="21.1" y="691.0" width="74.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.1" y="702.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (657,746 samples, 6.00%)</title><rect x="24.7" y="675.0" width="70.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.7" y="686.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (436,027 samples, 3.98%)</title><rect x="25.0" y="659.0" width="47.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.0" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (259,458 samples, 2.37%)</title><rect x="25.3" y="643.0" width="27.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.3" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (259,458 samples, 2.37%)</title><rect x="25.3" y="627.0" width="27.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.3" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (247,001 samples, 2.25%)</title><rect x="26.5" y="611.0" width="26.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.5" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (247,000 samples, 2.25%)</title><rect x="26.5" y="595.0" width="26.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.5" y="606.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (244,819 samples, 2.23%)</title><rect x="26.7" y="579.0" width="26.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.7" y="590.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (14,675 samples, 0.13%)</title><rect x="27.4" y="563.0" width="1.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="30.4" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2,584 samples, 0.02%)</title><rect x="28.2" y="547.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="31.2" y="558.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (2,727 samples, 0.02%)</title><rect x="28.6" y="547.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="31.6" y="558.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (223,550 samples, 2.04%)</title><rect x="29.0" y="563.0" width="24.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="32.0" y="574.0">p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (207,306 samples, 1.89%)</title><rect x="30.8" y="547.0" width="22.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="33.8" y="558.0">e..</text>
</g>
<g>
<title>do_syscall_64 (207,306 samples, 1.89%)</title><rect x="30.8" y="531.0" width="22.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="33.8" y="542.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (202,465 samples, 1.85%)</title><rect x="31.3" y="515.0" width="21.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="34.3" y="526.0">_..</text>
</g>
<g>
<title>do_futex (199,837 samples, 1.82%)</title><rect x="31.6" y="499.0" width="21.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="34.6" y="510.0">d..</text>
</g>
<g>
<title>futex_wake (198,655 samples, 1.81%)</title><rect x="31.7" y="483.0" width="21.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="34.7" y="494.0">f..</text>
</g>
<g>
<title>mark_wake_futex (4,526 samples, 0.04%)</title><rect x="32.6" y="467.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="35.6" y="478.0"></text>
</g>
<g>
<title>wake_up_q (184,193 samples, 1.68%)</title><rect x="33.2" y="467.0" width="19.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="36.2" y="478.0"></text>
</g>
<g>
<title>try_to_wake_up (182,236 samples, 1.66%)</title><rect x="33.5" y="451.0" width="19.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="36.5" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (179,881 samples, 1.64%)</title><rect x="33.7" y="435.0" width="19.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="36.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5,076 samples, 0.05%)</title><rect x="53.2" y="643.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5,076 samples, 0.05%)</title><rect x="53.2" y="627.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (168,223 samples, 1.54%)</title><rect x="53.8" y="643.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (164,936 samples, 1.51%)</title><rect x="54.1" y="627.0" width="17.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.1" y="638.0"></text>
</g>
<g>
<title>Unsafe_Park (49,005 samples, 0.45%)</title><rect x="54.8" y="611.0" width="5.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="57.8" y="622.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (6,186 samples, 0.06%)</title><rect x="55.8" y="595.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="58.8" y="606.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11,297 samples, 0.10%)</title><rect x="56.5" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="59.5" y="606.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2,611 samples, 0.02%)</title><rect x="57.7" y="595.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="60.7" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (3,976 samples, 0.04%)</title><rect x="58.0" y="595.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="61.0" y="606.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3,292 samples, 0.03%)</title><rect x="58.4" y="595.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="61.4" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2,721 samples, 0.02%)</title><rect x="58.8" y="595.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="61.8" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2,549 samples, 0.02%)</title><rect x="59.6" y="595.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="62.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (109,183 samples, 1.00%)</title><rect x="60.1" y="611.0" width="11.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="63.1" y="622.0"></text>
</g>
<g>
<title>/lib64/ld-2.30.so (2,329 samples, 0.02%)</title><rect x="60.1" y="595.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="63.1" y="606.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (6,589 samples, 0.06%)</title><rect x="60.3" y="595.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="63.3" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_wait (95,546 samples, 0.87%)</title><rect x="61.1" y="595.0" width="10.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="64.1" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (88,307 samples, 0.81%)</title><rect x="61.8" y="579.0" width="9.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="64.8" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (88,307 samples, 0.81%)</title><rect x="61.8" y="563.0" width="9.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="64.8" y="574.0"></text>
</g>
<g>
<title>__x64_sys_futex (76,910 samples, 0.70%)</title><rect x="63.1" y="547.0" width="8.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="66.1" y="558.0"></text>
</g>
<g>
<title>do_futex (73,532 samples, 0.67%)</title><rect x="63.4" y="531.0" width="8.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="66.4" y="542.0"></text>
</g>
<g>
<title>futex_wait (71,465 samples, 0.65%)</title><rect x="63.7" y="515.0" width="7.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="66.7" y="526.0"></text>
</g>
<g>
<title>futex_wait_queue_me (35,294 samples, 0.32%)</title><rect x="64.7" y="499.0" width="3.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="67.7" y="510.0"></text>
</g>
<g>
<title>plist_add (3,449 samples, 0.03%)</title><rect x="65.1" y="483.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="68.1" y="494.0"></text>
</g>
<g>
<title>schedule (28,098 samples, 0.26%)</title><rect x="65.4" y="483.0" width="3.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="68.4" y="494.0"></text>
</g>
<g>
<title>__schedule (24,650 samples, 0.22%)</title><rect x="65.8" y="467.0" width="2.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="68.8" y="478.0"></text>
</g>
<g>
<title>finish_task_switch (13,944 samples, 0.13%)</title><rect x="67.0" y="451.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="70.0" y="462.0"></text>
</g>
<g>
<title>futex_wait_setup (26,914 samples, 0.25%)</title><rect x="68.5" y="499.0" width="2.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="71.5" y="510.0"></text>
</g>
<g>
<title>get_futex_key (3,651 samples, 0.03%)</title><rect x="69.9" y="483.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="72.9" y="494.0"></text>
</g>
<g>
<title>get_futex_value_locked (6,272 samples, 0.06%)</title><rect x="70.3" y="483.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="73.3" y="494.0"></text>
</g>
<g>
<title>hash_futex (3,936 samples, 0.04%)</title><rect x="70.9" y="483.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="73.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4,135 samples, 0.04%)</title><rect x="72.0" y="659.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4,135 samples, 0.04%)</title><rect x="72.0" y="643.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (4,135 samples, 0.04%)</title><rect x="72.0" y="627.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (214,258 samples, 1.96%)</title><rect x="72.4" y="659.0" width="23.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (214,258 samples, 1.96%)</title><rect x="72.4" y="643.0" width="23.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.4" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (214,258 samples, 1.96%)</title><rect x="72.4" y="627.0" width="23.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="75.4" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (214,258 samples, 1.96%)</title><rect x="72.4" y="611.0" width="23.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.4" y="622.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (210,797 samples, 1.92%)</title><rect x="72.8" y="595.0" width="22.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.8" y="606.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (12,170 samples, 0.11%)</title><rect x="73.3" y="579.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="76.3" y="590.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (2,334 samples, 0.02%)</title><rect x="74.3" y="563.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="77.3" y="574.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (193,450 samples, 1.77%)</title><rect x="74.7" y="579.0" width="20.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="77.7" y="590.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (181,436 samples, 1.66%)</title><rect x="76.0" y="563.0" width="19.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="79.0" y="574.0"></text>
</g>
<g>
<title>do_syscall_64 (181,436 samples, 1.66%)</title><rect x="76.0" y="547.0" width="19.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="79.0" y="558.0"></text>
</g>
<g>
<title>__x64_sys_futex (177,575 samples, 1.62%)</title><rect x="76.4" y="531.0" width="19.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="79.4" y="542.0"></text>
</g>
<g>
<title>do_futex (175,497 samples, 1.60%)</title><rect x="76.6" y="515.0" width="18.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="79.6" y="526.0"></text>
</g>
<g>
<title>futex_wake (174,443 samples, 1.59%)</title><rect x="76.7" y="499.0" width="18.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="79.7" y="510.0"></text>
</g>
<g>
<title>mark_wake_futex (4,059 samples, 0.04%)</title><rect x="77.6" y="483.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="80.6" y="494.0"></text>
</g>
<g>
<title>wake_up_q (161,345 samples, 1.47%)</title><rect x="78.1" y="483.0" width="17.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="81.1" y="494.0"></text>
</g>
<g>
<title>try_to_wake_up (159,747 samples, 1.46%)</title><rect x="78.3" y="467.0" width="17.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="81.3" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (157,829 samples, 1.44%)</title><rect x="78.5" y="451.0" width="17.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="81.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$135/1762020635.run (2,512,903 samples, 22.93%)</title><rect x="95.9" y="691.0" width="270.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.9" y="702.0">ru/mail/polis/service/s3ponia/AsyncS..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$get$2 (2,507,454 samples, 22.89%)</title><rect x="96.4" y="675.0" width="270.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="99.4" y="686.0">ru/mail/polis/service/s3ponia/AsyncS..</text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getRaw (2,506,865 samples, 22.88%)</title><rect x="96.5" y="659.0" width="270.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="99.5" y="670.0">ru/mail/polis/s3ponia/AsyncServiceUt..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1320382178.linkToTargetMethod (7,486 samples, 0.07%)</title><rect x="96.6" y="643.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.6" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/487139582.invoke (7,459 samples, 0.07%)</title><rect x="96.6" y="627.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/193981742.invokeStatic (2,786 samples, 0.03%)</title><rect x="96.8" y="611.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.8" y="622.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (2,713 samples, 0.02%)</title><rect x="96.8" y="595.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.8" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,026,113 samples, 18.49%)</title><rect x="97.7" y="643.0" width="218.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.7" y="654.0">one/nio/http/HttpSession.send..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (14,070 samples, 0.13%)</title><rect x="99.9" y="627.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="102.9" y="638.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (13,501 samples, 0.12%)</title><rect x="99.9" y="611.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="102.9" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (12,393 samples, 0.11%)</title><rect x="100.0" y="595.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="103.0" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.72] (10,757 samples, 0.10%)</title><rect x="100.0" y="579.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="103.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8,179 samples, 0.07%)</title><rect x="101.4" y="627.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="104.4" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8,027 samples, 0.07%)</title><rect x="101.4" y="611.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.4" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8,009 samples, 0.07%)</title><rect x="101.4" y="595.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="104.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,959,387 samples, 17.88%)</title><rect x="102.3" y="627.0" width="211.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.3" y="638.0">one/nio/http/HttpSession.wri..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (46,241 samples, 0.42%)</title><rect x="102.4" y="611.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.4" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (23,361 samples, 0.21%)</title><rect x="104.8" y="595.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.8" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (23,361 samples, 0.21%)</title><rect x="104.8" y="579.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="107.8" y="590.0"></text>
</g>
<g>
<title>java/lang/String.charAt (23,279 samples, 0.21%)</title><rect x="104.8" y="563.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.8" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2,774 samples, 0.03%)</title><rect x="107.1" y="547.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="110.1" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,912,323 samples, 17.45%)</title><rect x="107.4" y="611.0" width="205.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.4" y="622.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,909,448 samples, 17.43%)</title><rect x="107.7" y="595.0" width="205.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.7" y="606.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,897,736 samples, 17.32%)</title><rect x="108.1" y="579.0" width="204.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.1" y="590.0">one/nio/net/Session$ArrayQu..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,892,556 samples, 17.27%)</title><rect x="108.6" y="563.0" width="203.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.6" y="574.0">one/nio/net/NativeSocket.wr..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (24,201 samples, 0.22%)</title><rect x="109.8" y="547.0" width="2.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="112.8" y="558.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (11,378 samples, 0.10%)</title><rect x="111.1" y="531.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="114.1" y="542.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5,415 samples, 0.05%)</title><rect x="111.8" y="515.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="114.8" y="526.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3,365 samples, 0.03%)</title><rect x="112.0" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="115.0" y="510.0"></text>
</g>
<g>
<title>__libc_send (1,854,412 samples, 16.92%)</title><rect x="112.4" y="547.0" width="199.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="115.4" y="558.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,838,542 samples, 16.78%)</title><rect x="114.1" y="531.0" width="198.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="117.1" y="542.0">entry_SYSCALL_64_after_hwf..</text>
</g>
<g>
<title>do_syscall_64 (1,838,542 samples, 16.78%)</title><rect x="114.1" y="515.0" width="198.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="117.1" y="526.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,827,907 samples, 16.68%)</title><rect x="115.2" y="499.0" width="196.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="118.2" y="510.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,825,499 samples, 16.66%)</title><rect x="115.5" y="483.0" width="196.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="118.5" y="494.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (1,803,529 samples, 16.46%)</title><rect x="116.6" y="467.0" width="194.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="119.6" y="478.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg?[ipv6] (4,846 samples, 0.04%)</title><rect x="116.9" y="451.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="119.9" y="462.0"></text>
</g>
<g>
<title>security_socket_sendmsg (7,166 samples, 0.07%)</title><rect x="117.4" y="451.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="120.4" y="462.0"></text>
</g>
<g>
<title>sock_has_perm (5,771 samples, 0.05%)</title><rect x="117.6" y="435.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="120.6" y="446.0"></text>
</g>
<g>
<title>tcp_sendmsg (1,788,307 samples, 16.32%)</title><rect x="118.2" y="451.0" width="192.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="121.2" y="462.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (5,223 samples, 0.05%)</title><rect x="118.5" y="435.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="121.5" y="446.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4,742 samples, 0.04%)</title><rect x="118.5" y="419.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="121.5" y="430.0"></text>
</g>
<g>
<title>release_sock (5,522 samples, 0.05%)</title><rect x="119.0" y="435.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="122.0" y="446.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,774,999 samples, 16.20%)</title><rect x="119.6" y="435.0" width="191.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="122.6" y="446.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (6,717 samples, 0.06%)</title><rect x="123.2" y="419.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="126.2" y="430.0"></text>
</g>
<g>
<title>__virt_addr_valid (5,089 samples, 0.05%)</title><rect x="123.3" y="403.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="126.3" y="414.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (1,611,844 samples, 14.71%)</title><rect x="123.9" y="419.0" width="173.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="126.9" y="430.0">__tcp_push_pending_fra..</text>
</g>
<g>
<title>tcp_write_xmit (1,609,959 samples, 14.69%)</title><rect x="124.1" y="403.0" width="173.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="127.1" y="414.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (1,552,397 samples, 14.17%)</title><rect x="126.2" y="387.0" width="167.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="129.2" y="398.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (1,480,985 samples, 13.52%)</title><rect x="129.2" y="371.0" width="159.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="132.2" y="382.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (8,149 samples, 0.07%)</title><rect x="130.2" y="355.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="133.2" y="366.0"></text>
</g>
<g>
<title>ipv4_dst_check (6,069 samples, 0.06%)</title><rect x="130.4" y="339.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="133.4" y="350.0"></text>
</g>
<g>
<title>ip_local_out (28,561 samples, 0.26%)</title><rect x="131.1" y="355.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="134.1" y="366.0"></text>
</g>
<g>
<title>__ip_local_out (27,614 samples, 0.25%)</title><rect x="131.2" y="339.0" width="3.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="134.2" y="350.0"></text>
</g>
<g>
<title>ip_send_check (16,921 samples, 0.15%)</title><rect x="131.6" y="323.0" width="1.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="134.6" y="334.0"></text>
</g>
<g>
<title>nf_hook_slow (6,919 samples, 0.06%)</title><rect x="133.5" y="323.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="136.5" y="334.0"></text>
</g>
<g>
<title>selinux_ipv4_output (4,578 samples, 0.04%)</title><rect x="133.7" y="307.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="136.7" y="318.0"></text>
</g>
<g>
<title>netlbl_enabled (2,608 samples, 0.02%)</title><rect x="133.9" y="291.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="136.9" y="302.0"></text>
</g>
<g>
<title>ip_output (1,434,075 samples, 13.09%)</title><rect x="134.2" y="355.0" width="154.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="137.2" y="366.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (6,168 samples, 0.06%)</title><rect x="135.1" y="339.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="138.1" y="350.0"></text>
</g>
<g>
<title>ipv4_mtu (2,920 samples, 0.03%)</title><rect x="135.4" y="323.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="138.4" y="334.0"></text>
</g>
<g>
<title>ip_finish_output2 (1,392,300 samples, 12.71%)</title><rect x="135.7" y="339.0" width="150.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="138.7" y="350.0">ip_finish_output2</text>
</g>
<g>
<title>__dev_queue_xmit (80,300 samples, 0.73%)</title><rect x="138.7" y="323.0" width="8.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="141.7" y="334.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (42,466 samples, 0.39%)</title><rect x="140.6" y="307.0" width="4.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="143.6" y="318.0"></text>
</g>
<g>
<title>loopback_xmit (36,579 samples, 0.33%)</title><rect x="141.2" y="291.0" width="4.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="144.2" y="302.0"></text>
</g>
<g>
<title>eth_type_trans (5,615 samples, 0.05%)</title><rect x="142.0" y="275.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="145.0" y="286.0"></text>
</g>
<g>
<title>netif_rx (16,481 samples, 0.15%)</title><rect x="142.7" y="275.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="145.7" y="286.0"></text>
</g>
<g>
<title>netif_rx_internal (15,918 samples, 0.15%)</title><rect x="142.7" y="259.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="145.7" y="270.0"></text>
</g>
<g>
<title>enqueue_to_backlog (14,625 samples, 0.13%)</title><rect x="142.9" y="243.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="145.9" y="254.0"></text>
</g>
<g>
<title>tcp_wfree (4,214 samples, 0.04%)</title><rect x="144.7" y="275.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="147.7" y="286.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (6,141 samples, 0.06%)</title><rect x="145.2" y="307.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="148.2" y="318.0"></text>
</g>
<g>
<title>validate_xmit_skb (12,388 samples, 0.11%)</title><rect x="145.8" y="307.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="148.8" y="318.0"></text>
</g>
<g>
<title>netif_skb_features (8,122 samples, 0.07%)</title><rect x="146.2" y="291.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="149.2" y="302.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1,284,143 samples, 11.72%)</title><rect x="147.4" y="323.0" width="138.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="150.4" y="334.0">__local_bh_enable..</text>
</g>
<g>
<title>do_softirq.part.0 (1,280,904 samples, 11.69%)</title><rect x="147.7" y="307.0" width="138.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="150.7" y="318.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (1,265,563 samples, 11.55%)</title><rect x="149.4" y="291.0" width="136.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="152.4" y="302.0">do_softirq_own_st..</text>
</g>
<g>
<title>__softirqentry_text_start (1,265,563 samples, 11.55%)</title><rect x="149.4" y="275.0" width="136.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="152.4" y="286.0">__softirqentry_te..</text>
</g>
<g>
<title>net_rx_action (1,237,149 samples, 11.29%)</title><rect x="152.4" y="259.0" width="133.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="155.4" y="270.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (3,744 samples, 0.03%)</title><rect x="153.8" y="243.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="156.8" y="254.0"></text>
</g>
<g>
<title>process_backlog (1,219,538 samples, 11.13%)</title><rect x="154.3" y="243.0" width="131.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="157.3" y="254.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb_one_core (1,202,492 samples, 10.97%)</title><rect x="156.2" y="227.0" width="129.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="159.2" y="238.0">__netif_receive_..</text>
</g>
<g>
<title>__netif_receive_skb_core (22,660 samples, 0.21%)</title><rect x="156.8" y="211.0" width="2.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="159.8" y="222.0"></text>
</g>
<g>
<title>ip_rcv (1,173,575 samples, 10.71%)</title><rect x="159.3" y="211.0" width="126.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="162.3" y="222.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (1,153,608 samples, 10.53%)</title><rect x="159.7" y="195.0" width="124.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="162.7" y="206.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (1,146,939 samples, 10.47%)</title><rect x="160.4" y="179.0" width="123.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="163.4" y="190.0">ip_local_delive..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1,143,770 samples, 10.44%)</title><rect x="160.7" y="163.0" width="123.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="163.7" y="174.0">ip_protocol_del..</text>
</g>
<g>
<title>raw_local_deliver (5,344 samples, 0.05%)</title><rect x="162.7" y="147.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="165.7" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1,120,018 samples, 10.22%)</title><rect x="163.3" y="147.0" width="120.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="166.3" y="158.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (44,001 samples, 0.40%)</title><rect x="170.3" y="131.0" width="4.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="173.3" y="142.0"></text>
</g>
<g>
<title>inet_ehashfn (5,001 samples, 0.05%)</title><rect x="174.5" y="115.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="177.5" y="126.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (50,325 samples, 0.46%)</title><rect x="175.2" y="131.0" width="5.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="178.2" y="142.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (48,572 samples, 0.44%)</title><rect x="175.4" y="115.0" width="5.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="178.4" y="126.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (41,860 samples, 0.38%)</title><rect x="176.1" y="99.0" width="4.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="179.1" y="110.0"></text>
</g>
<g>
<title>selinux_sock_rcv_skb_compat (25,446 samples, 0.23%)</title><rect x="177.9" y="83.0" width="2.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="180.9" y="94.0"></text>
</g>
<g>
<title>avc_has_perm (6,610 samples, 0.06%)</title><rect x="178.5" y="67.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="181.5" y="78.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (6,343 samples, 0.06%)</title><rect x="179.2" y="67.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="182.2" y="78.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.0 (6,654 samples, 0.06%)</title><rect x="179.9" y="67.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="182.9" y="78.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (949,348 samples, 8.66%)</title><rect x="180.8" y="131.0" width="102.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="183.8" y="142.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>ipv4_dst_check (5,341 samples, 0.05%)</title><rect x="181.2" y="115.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="184.2" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (941,066 samples, 8.59%)</title><rect x="181.7" y="115.0" width="101.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="184.7" y="126.0">tcp_rcv_esta..</text>
</g>
<g>
<title>sk_reset_timer (9,062 samples, 0.08%)</title><rect x="186.7" y="99.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="189.7" y="110.0"></text>
</g>
<g>
<title>mod_timer (8,171 samples, 0.07%)</title><rect x="186.8" y="83.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="189.8" y="94.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4,373 samples, 0.04%)</title><rect x="187.1" y="67.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="190.1" y="78.0"></text>
</g>
<g>
<title>sock_def_readable (403,679 samples, 3.68%)</title><rect x="187.7" y="99.0" width="43.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="190.7" y="110.0">sock..</text>
</g>
<g>
<title>__wake_up_common_lock (382,433 samples, 3.49%)</title><rect x="189.9" y="83.0" width="41.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="192.9" y="94.0">__w..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (379,031 samples, 3.46%)</title><rect x="190.2" y="67.0" width="40.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="193.2" y="78.0">_ra..</text>
</g>
<g>
<title>tcp_ack (393,016 samples, 3.59%)</title><rect x="231.2" y="99.0" width="42.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="234.2" y="110.0">tcp_..</text>
</g>
<g>
<title>__kfree_skb (141,283 samples, 1.29%)</title><rect x="242.4" y="83.0" width="15.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="245.4" y="94.0"></text>
</g>
<g>
<title>__slab_free (39,140 samples, 0.36%)</title><rect x="242.4" y="67.0" width="4.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="245.4" y="78.0"></text>
</g>
<g>
<title>kfree (21,571 samples, 0.20%)</title><rect x="246.6" y="67.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="249.6" y="78.0"></text>
</g>
<g>
<title>skb_release_all (2,891 samples, 0.03%)</title><rect x="249.0" y="67.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="252.0" y="78.0"></text>
</g>
<g>
<title>skb_release_data (76,996 samples, 0.70%)</title><rect x="249.3" y="67.0" width="8.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="252.3" y="78.0"></text>
</g>
<g>
<title>bictcp_acked (27,843 samples, 0.25%)</title><rect x="257.7" y="83.0" width="3.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="260.7" y="94.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (4,532 samples, 0.04%)</title><rect x="260.7" y="83.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="263.7" y="94.0"></text>
</g>
<g>
<title>kfree_skbmem (3,462 samples, 0.03%)</title><rect x="261.2" y="83.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="264.2" y="94.0"></text>
</g>
<g>
<title>kmem_cache_free (38,190 samples, 0.35%)</title><rect x="261.6" y="83.0" width="4.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="264.6" y="94.0"></text>
</g>
<g>
<title>__slab_free (14,626 samples, 0.13%)</title><rect x="264.1" y="67.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="267.1" y="78.0"></text>
</g>
<g>
<title>rb_first (22,348 samples, 0.20%)</title><rect x="265.9" y="83.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="268.9" y="94.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (16,352 samples, 0.15%)</title><rect x="268.3" y="83.0" width="1.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="271.3" y="94.0"></text>
</g>
<g>
<title>tcp_newly_delivered (5,247 samples, 0.05%)</title><rect x="270.2" y="83.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="273.2" y="94.0"></text>
</g>
<g>
<title>tcp_rate_gen (4,380 samples, 0.04%)</title><rect x="271.1" y="83.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="274.1" y="94.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (3,241 samples, 0.03%)</title><rect x="271.6" y="83.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="274.6" y="94.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2,354 samples, 0.02%)</title><rect x="272.2" y="83.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="275.2" y="94.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (10,080 samples, 0.09%)</title><rect x="272.4" y="83.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="275.4" y="94.0"></text>
</g>
<g>
<title>tcp_check_space (22,256 samples, 0.20%)</title><rect x="273.5" y="99.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="276.5" y="110.0"></text>
</g>
<g>
<title>tcp_event_data_recv (19,398 samples, 0.18%)</title><rect x="276.1" y="99.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="279.1" y="110.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (32,873 samples, 0.30%)</title><rect x="278.2" y="99.0" width="3.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="281.2" y="110.0"></text>
</g>
<g>
<title>ktime_get (17,629 samples, 0.16%)</title><rect x="279.9" y="83.0" width="1.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="282.9" y="94.0"></text>
</g>
<g>
<title>read_tsc (12,172 samples, 0.11%)</title><rect x="280.4" y="67.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="283.4" y="78.0"></text>
</g>
<g>
<title>tcp_queue_rcv (10,448 samples, 0.10%)</title><rect x="281.8" y="99.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="284.8" y="110.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (4,757 samples, 0.04%)</title><rect x="283.1" y="131.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="286.1" y="142.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (3,050 samples, 0.03%)</title><rect x="283.6" y="131.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="286.6" y="142.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (7,249 samples, 0.07%)</title><rect x="283.9" y="195.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="286.9" y="206.0"></text>
</g>
<g>
<title>ip_rcv_finish (9,031 samples, 0.08%)</title><rect x="284.7" y="195.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="287.7" y="206.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (6,547 samples, 0.06%)</title><rect x="285.0" y="179.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="288.0" y="190.0"></text>
</g>
<g>
<title>nf_hook_slow (26,769 samples, 0.24%)</title><rect x="285.8" y="339.0" width="2.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="288.8" y="350.0"></text>
</g>
<g>
<title>selinux_ip_postroute (23,800 samples, 0.22%)</title><rect x="285.9" y="323.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="288.9" y="334.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (19,602 samples, 0.18%)</title><rect x="286.4" y="307.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="289.4" y="318.0"></text>
</g>
<g>
<title>avc_has_perm (8,314 samples, 0.08%)</title><rect x="287.0" y="291.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="290.0" y="302.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.0 (4,501 samples, 0.04%)</title><rect x="287.9" y="291.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="290.9" y="302.0"></text>
</g>
<g>
<title>__skb_clone (18,980 samples, 0.17%)</title><rect x="288.7" y="371.0" width="2.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="291.7" y="382.0"></text>
</g>
<g>
<title>__copy_skb_header (2,869 samples, 0.03%)</title><rect x="290.4" y="355.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="293.4" y="366.0"></text>
</g>
<g>
<title>__tcp_select_window (5,044 samples, 0.05%)</title><rect x="290.7" y="371.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="293.7" y="382.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3,388 samples, 0.03%)</title><rect x="291.4" y="371.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="294.4" y="382.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (2,714 samples, 0.02%)</title><rect x="292.5" y="371.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="295.5" y="382.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (4,271 samples, 0.04%)</title><rect x="292.8" y="371.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="295.8" y="382.0"></text>
</g>
<g>
<title>ktime_get (7,731 samples, 0.07%)</title><rect x="293.4" y="387.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="296.4" y="398.0"></text>
</g>
<g>
<title>read_tsc (5,471 samples, 0.05%)</title><rect x="293.6" y="371.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="296.6" y="382.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (20,799 samples, 0.19%)</title><rect x="294.3" y="387.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="297.3" y="398.0"></text>
</g>
<g>
<title>sk_reset_timer (6,906 samples, 0.06%)</title><rect x="295.2" y="371.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="298.2" y="382.0"></text>
</g>
<g>
<title>mod_timer (6,677 samples, 0.06%)</title><rect x="295.2" y="355.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="298.2" y="366.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (2,376 samples, 0.02%)</title><rect x="295.9" y="371.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="298.9" y="382.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2,934 samples, 0.03%)</title><rect x="296.2" y="371.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="299.2" y="382.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (8,000 samples, 0.07%)</title><rect x="296.5" y="387.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="299.5" y="398.0"></text>
</g>
<g>
<title>_copy_from_iter_full (26,620 samples, 0.24%)</title><rect x="297.5" y="419.0" width="2.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="300.5" y="430.0"></text>
</g>
<g>
<title>copyin (9,718 samples, 0.09%)</title><rect x="297.9" y="403.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="300.9" y="414.0"></text>
</g>
<g>
<title>copy_user_generic_string (9,361 samples, 0.09%)</title><rect x="298.0" y="387.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="301.0" y="398.0"></text>
</g>
<g>
<title>iov_iter_advance (12,815 samples, 0.12%)</title><rect x="299.0" y="403.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="302.0" y="414.0"></text>
</g>
<g>
<title>sk_page_frag_refill (13,311 samples, 0.12%)</title><rect x="300.4" y="419.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="303.4" y="430.0"></text>
</g>
<g>
<title>skb_page_frag_refill (12,869 samples, 0.12%)</title><rect x="300.4" y="403.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="303.4" y="414.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (46,107 samples, 0.42%)</title><rect x="301.8" y="419.0" width="4.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="304.8" y="430.0"></text>
</g>
<g>
<title>__alloc_skb (37,219 samples, 0.34%)</title><rect x="302.7" y="403.0" width="4.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="305.7" y="414.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (11,640 samples, 0.11%)</title><rect x="303.8" y="387.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="306.8" y="398.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (11,357 samples, 0.10%)</title><rect x="303.8" y="371.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="306.8" y="382.0"></text>
</g>
<g>
<title>__ksize (6,389 samples, 0.06%)</title><rect x="305.1" y="387.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="308.1" y="398.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (8,622 samples, 0.08%)</title><rect x="305.8" y="387.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="308.8" y="398.0"></text>
</g>
<g>
<title>skb_entail (10,400 samples, 0.09%)</title><rect x="306.7" y="419.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="309.7" y="430.0"></text>
</g>
<g>
<title>tcp_chrono_start (2,894 samples, 0.03%)</title><rect x="307.6" y="403.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="310.6" y="414.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3,406 samples, 0.03%)</title><rect x="308.2" y="419.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="311.2" y="430.0"></text>
</g>
<g>
<title>tcp_send_mss (17,816 samples, 0.16%)</title><rect x="308.5" y="419.0" width="2.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="311.5" y="430.0"></text>
</g>
<g>
<title>tcp_current_mss (16,340 samples, 0.15%)</title><rect x="308.7" y="403.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="311.7" y="414.0"></text>
</g>
<g>
<title>ipv4_mtu (6,838 samples, 0.06%)</title><rect x="309.7" y="387.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="312.7" y="398.0"></text>
</g>
<g>
<title>sockfd_lookup_light (12,186 samples, 0.11%)</title><rect x="310.8" y="467.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="313.8" y="478.0"></text>
</g>
<g>
<title>__fget_light (11,626 samples, 0.11%)</title><rect x="310.8" y="451.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="313.8" y="462.0"></text>
</g>
<g>
<title>__fget (10,052 samples, 0.09%)</title><rect x="311.0" y="435.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="314.0" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7,885 samples, 0.07%)</title><rect x="312.5" y="579.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="315.5" y="590.0"></text>
</g>
<g>
<title>gettimeofday (7,187 samples, 0.07%)</title><rect x="312.5" y="563.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="315.5" y="574.0"></text>
</g>
<g>
<title>[vdso] (6,428 samples, 0.06%)</title><rect x="312.6" y="547.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="315.6" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (22,610 samples, 0.21%)</title><rect x="313.3" y="627.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (17,198 samples, 0.16%)</title><rect x="313.9" y="611.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.9" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17,198 samples, 0.16%)</title><rect x="313.9" y="595.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (10,056 samples, 0.09%)</title><rect x="316.0" y="643.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.0" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9,483 samples, 0.09%)</title><rect x="316.1" y="627.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getRaw (440,540 samples, 4.02%)</title><rect x="317.1" y="643.0" width="47.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.1" y="654.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4,995 samples, 0.05%)</title><rect x="317.2" y="627.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="320.2" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4,773 samples, 0.04%)</title><rect x="317.2" y="611.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="320.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (32,968 samples, 0.30%)</title><rect x="317.7" y="627.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="320.7" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19,647 samples, 0.18%)</title><rect x="317.9" y="611.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="320.9" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (12,015 samples, 0.11%)</title><rect x="318.1" y="595.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.1" y="606.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (11,244 samples, 0.10%)</title><rect x="318.2" y="579.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="321.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (11,220 samples, 0.10%)</title><rect x="318.2" y="563.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (11,110 samples, 0.10%)</title><rect x="318.2" y="547.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="321.2" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (3,310 samples, 0.03%)</title><rect x="318.2" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="321.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$178/901280301.getAsBoolean (3,202 samples, 0.03%)</title><rect x="318.2" y="515.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (3,187 samples, 0.03%)</title><rect x="318.2" y="499.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="321.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (3,095 samples, 0.03%)</title><rect x="318.3" y="483.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.3" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (7,123 samples, 0.07%)</title><rect x="318.6" y="531.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.6" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,895 samples, 0.03%)</title><rect x="318.9" y="515.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.9" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,894 samples, 0.03%)</title><rect x="318.9" y="499.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$173/1018935559.get$Lambda (2,436 samples, 0.02%)</title><rect x="319.0" y="483.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.0" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2,576 samples, 0.02%)</title><rect x="319.4" y="595.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.4" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,629 samples, 0.03%)</title><rect x="319.7" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.7" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,613 samples, 0.03%)</title><rect x="319.7" y="579.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.7" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,456 samples, 0.03%)</title><rect x="319.7" y="563.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="322.7" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,238 samples, 0.03%)</title><rect x="319.7" y="547.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (8,371 samples, 0.08%)</title><rect x="320.1" y="611.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="323.1" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8,222 samples, 0.08%)</title><rect x="320.1" y="595.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.1" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2,595 samples, 0.02%)</title><rect x="320.7" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="323.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$184/274352872.apply (3,069 samples, 0.03%)</title><rect x="321.0" y="611.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="324.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (2,926 samples, 0.03%)</title><rect x="321.0" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.0" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2,835 samples, 0.03%)</title><rect x="321.0" y="579.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.iteratorRaw (400,809 samples, 3.66%)</title><rect x="321.3" y="627.0" width="43.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="324.3" y="638.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (59,720 samples, 0.55%)</title><rect x="321.9" y="611.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.9" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (59,102 samples, 0.54%)</title><rect x="322.0" y="595.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.0" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (2,781 samples, 0.03%)</title><rect x="322.3" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.3" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (7,322 samples, 0.07%)</title><rect x="322.8" y="579.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.8" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (2,874 samples, 0.03%)</title><rect x="323.2" y="563.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="326.2" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (44,585 samples, 0.41%)</title><rect x="323.6" y="579.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="326.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (44,504 samples, 0.41%)</title><rect x="323.6" y="563.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (43,983 samples, 0.40%)</title><rect x="323.6" y="547.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="326.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (15,399 samples, 0.14%)</title><rect x="324.0" y="531.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="327.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$178/901280301.getAsBoolean (10,715 samples, 0.10%)</title><rect x="324.5" y="515.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (10,614 samples, 0.10%)</title><rect x="324.5" y="499.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (10,581 samples, 0.10%)</title><rect x="324.5" y="483.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (6,550 samples, 0.06%)</title><rect x="325.0" y="467.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2,621 samples, 0.02%)</title><rect x="325.2" y="451.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.2" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (22,945 samples, 0.21%)</title><rect x="325.9" y="531.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.9" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (3,299 samples, 0.03%)</title><rect x="327.2" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (7,960 samples, 0.07%)</title><rect x="327.5" y="515.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.5" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (8,012 samples, 0.07%)</title><rect x="328.4" y="611.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.4" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (7,753 samples, 0.07%)</title><rect x="328.4" y="595.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$156/636743593.get$Lambda (7,171 samples, 0.07%)</title><rect x="328.5" y="579.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$156/636743593.&lt;init&gt; (6,511 samples, 0.06%)</title><rect x="328.5" y="563.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.5" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5,874 samples, 0.05%)</title><rect x="329.4" y="611.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.4" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (10,277 samples, 0.09%)</title><rect x="330.0" y="611.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.0" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (10,206 samples, 0.09%)</title><rect x="330.0" y="595.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.0" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5,511 samples, 0.05%)</title><rect x="330.5" y="579.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.5" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5,231 samples, 0.05%)</title><rect x="330.6" y="563.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="333.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (6,644 samples, 0.06%)</title><rect x="331.2" y="611.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (6,318 samples, 0.06%)</title><rect x="331.3" y="595.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (6,264 samples, 0.06%)</title><rect x="331.3" y="579.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="334.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (9,487 samples, 0.09%)</title><rect x="331.9" y="611.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (9,416 samples, 0.09%)</title><rect x="332.0" y="595.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="335.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (4,846 samples, 0.04%)</title><rect x="332.2" y="579.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="335.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (21,622 samples, 0.20%)</title><rect x="333.0" y="611.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="336.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (20,985 samples, 0.19%)</title><rect x="333.0" y="595.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.0" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19,978 samples, 0.18%)</title><rect x="333.1" y="579.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="336.1" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (15,481 samples, 0.14%)</title><rect x="333.2" y="563.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.2" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (15,391 samples, 0.14%)</title><rect x="333.2" y="547.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.2" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (15,364 samples, 0.14%)</title><rect x="333.2" y="531.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="336.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (15,250 samples, 0.14%)</title><rect x="333.2" y="515.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (5,246 samples, 0.05%)</title><rect x="333.3" y="499.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$178/901280301.getAsBoolean (5,117 samples, 0.05%)</title><rect x="333.3" y="483.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="336.3" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (5,093 samples, 0.05%)</title><rect x="333.3" y="467.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (4,981 samples, 0.05%)</title><rect x="333.3" y="451.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.3" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (3,251 samples, 0.03%)</title><rect x="333.5" y="435.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="336.5" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (9,223 samples, 0.08%)</title><rect x="333.8" y="499.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="336.8" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,413 samples, 0.02%)</title><rect x="334.3" y="483.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.3" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,407 samples, 0.02%)</title><rect x="334.3" y="467.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="337.3" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (3,941 samples, 0.04%)</title><rect x="334.9" y="563.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.9" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (3,719 samples, 0.03%)</title><rect x="334.9" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.iterator (270,715 samples, 2.47%)</title><rect x="335.3" y="611.0" width="29.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.3" y="622.0">ru..</text>
</g>
<g>
<title>java/util/Collection.stream (164,794 samples, 1.50%)</title><rect x="335.5" y="595.0" width="17.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="338.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (148,615 samples, 1.36%)</title><rect x="335.6" y="579.0" width="16.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="338.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (143,973 samples, 1.31%)</title><rect x="336.1" y="563.0" width="15.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="339.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (143,552 samples, 1.31%)</title><rect x="336.1" y="547.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="339.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (12,774 samples, 0.12%)</title><rect x="340.0" y="531.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="343.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (11,243 samples, 0.10%)</title><rect x="340.2" y="515.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="343.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (11,073 samples, 0.10%)</title><rect x="340.2" y="499.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="343.2" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10,475 samples, 0.10%)</title><rect x="340.2" y="483.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="343.2" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5,147 samples, 0.05%)</title><rect x="340.8" y="467.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="343.8" y="478.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5,145 samples, 0.05%)</title><rect x="340.8" y="451.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="343.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (94,825 samples, 0.87%)</title><rect x="341.4" y="531.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="344.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (93,077 samples, 0.85%)</title><rect x="341.6" y="515.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6,080 samples, 0.06%)</title><rect x="341.7" y="499.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="344.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5,427 samples, 0.05%)</title><rect x="341.8" y="483.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="344.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5,324 samples, 0.05%)</title><rect x="341.8" y="467.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="344.8" y="478.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5,323 samples, 0.05%)</title><rect x="341.8" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="344.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (85,754 samples, 0.78%)</title><rect x="342.3" y="499.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (80,621 samples, 0.74%)</title><rect x="342.9" y="483.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (79,292 samples, 0.72%)</title><rect x="343.0" y="467.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (78,890 samples, 0.72%)</title><rect x="343.1" y="451.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="346.1" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (78,888 samples, 0.72%)</title><rect x="343.1" y="435.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="346.1" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (25,319 samples, 0.23%)</title><rect x="348.9" y="419.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.9" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (25,319 samples, 0.23%)</title><rect x="348.9" y="403.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="351.9" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (15,700 samples, 0.14%)</title><rect x="351.6" y="579.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (6,009 samples, 0.05%)</title><rect x="352.0" y="563.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (5,748 samples, 0.05%)</title><rect x="352.0" y="547.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (5,603 samples, 0.05%)</title><rect x="352.0" y="531.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (5,969 samples, 0.05%)</title><rect x="352.6" y="563.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="355.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (42,701 samples, 0.39%)</title><rect x="353.3" y="595.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4,062 samples, 0.04%)</title><rect x="353.7" y="579.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.&lt;init&gt; (35,006 samples, 0.32%)</title><rect x="354.1" y="579.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="357.1" y="590.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (2,609 samples, 0.02%)</title><rect x="357.6" y="563.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.6" y="574.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (2,599 samples, 0.02%)</title><rect x="357.6" y="547.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.6" y="558.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2,599 samples, 0.02%)</title><rect x="357.6" y="531.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="360.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (56,192 samples, 0.51%)</title><rect x="357.9" y="595.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (56,120 samples, 0.51%)</title><rect x="357.9" y="579.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (56,057 samples, 0.51%)</title><rect x="357.9" y="563.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (54,856 samples, 0.50%)</title><rect x="358.0" y="547.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (2,431 samples, 0.02%)</title><rect x="363.9" y="595.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="366.9" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (2,549 samples, 0.02%)</title><rect x="364.2" y="595.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="367.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.getValue (11,934 samples, 0.11%)</title><rect x="364.6" y="643.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="367.6" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (11,221 samples, 0.10%)</title><rect x="364.7" y="627.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.7" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (7,387 samples, 0.07%)</title><rect x="365.1" y="611.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.1" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6,705 samples, 0.06%)</title><rect x="365.1" y="595.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.1" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5,203 samples, 0.05%)</title><rect x="365.2" y="579.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="368.2" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4,986 samples, 0.05%)</title><rect x="365.3" y="563.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.fromByteBuffer (5,828 samples, 0.05%)</title><rect x="365.9" y="643.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.9" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4,989 samples, 0.05%)</title><rect x="366.0" y="627.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="369.0" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4,741 samples, 0.04%)</title><rect x="366.0" y="611.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.0" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (8,099 samples, 0.07%)</title><rect x="366.5" y="691.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.5" y="702.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (8,099 samples, 0.07%)</title><rect x="366.5" y="675.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.5" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$116/1674053202.run (8,099 samples, 0.07%)</title><rect x="366.5" y="659.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.5" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (8,099 samples, 0.07%)</title><rect x="366.5" y="643.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.5" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (8,099 samples, 0.07%)</title><rect x="366.5" y="627.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="369.5" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (8,097 samples, 0.07%)</title><rect x="366.5" y="611.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.5" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (7,546 samples, 0.07%)</title><rect x="366.5" y="595.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.5" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (7,315 samples, 0.07%)</title><rect x="366.5" y="579.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.5" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (7,282 samples, 0.07%)</title><rect x="366.5" y="563.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.5" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (7,278 samples, 0.07%)</title><rect x="366.5" y="547.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.5" y="558.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (7,278 samples, 0.07%)</title><rect x="366.5" y="531.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.5" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3,430 samples, 0.03%)</title><rect x="366.5" y="515.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3,429 samples, 0.03%)</title><rect x="366.5" y="499.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (3,107 samples, 0.03%)</title><rect x="366.6" y="483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="369.6" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (3,105 samples, 0.03%)</title><rect x="366.6" y="467.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="369.6" y="478.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (2,736 samples, 0.02%)</title><rect x="366.6" y="451.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="369.6" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (2,728 samples, 0.02%)</title><rect x="366.6" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="369.6" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (2,726 samples, 0.02%)</title><rect x="366.6" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="369.6" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (2,726 samples, 0.02%)</title><rect x="366.6" y="403.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="369.6" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (2,726 samples, 0.02%)</title><rect x="366.6" y="387.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.6" y="398.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (2,723 samples, 0.02%)</title><rect x="366.6" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.6" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (2,723 samples, 0.02%)</title><rect x="366.6" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="369.6" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (2,722 samples, 0.02%)</title><rect x="366.6" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="369.6" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (2,715 samples, 0.02%)</title><rect x="366.6" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.6" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (2,715 samples, 0.02%)</title><rect x="366.6" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="369.6" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (2,715 samples, 0.02%)</title><rect x="366.6" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.6" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (2,715 samples, 0.02%)</title><rect x="366.6" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.6" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (2,712 samples, 0.02%)</title><rect x="366.6" y="259.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.6" y="270.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (2,947 samples, 0.03%)</title><rect x="366.9" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="369.9" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2,947 samples, 0.03%)</title><rect x="366.9" y="499.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="369.9" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2,941 samples, 0.03%)</title><rect x="366.9" y="483.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.9" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2,753 samples, 0.03%)</title><rect x="366.9" y="467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.9" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2,744 samples, 0.03%)</title><rect x="366.9" y="451.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.9" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2,645 samples, 0.02%)</title><rect x="366.9" y="435.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.9" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2,608 samples, 0.02%)</title><rect x="366.9" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="369.9" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2,602 samples, 0.02%)</title><rect x="366.9" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="369.9" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2,589 samples, 0.02%)</title><rect x="366.9" y="387.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.9" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2,507 samples, 0.02%)</title><rect x="366.9" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.9" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2,461 samples, 0.02%)</title><rect x="366.9" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="369.9" y="366.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (7,444,021 samples, 67.94%)</title><rect x="367.5" y="739.0" width="801.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.5" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5,520 samples, 0.05%)</title><rect x="369.5" y="723.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="372.5" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2,528 samples, 0.02%)</title><rect x="370.1" y="723.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="373.1" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2,512 samples, 0.02%)</title><rect x="370.1" y="707.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="373.1" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2,512 samples, 0.02%)</title><rect x="370.1" y="691.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.1" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (161,072 samples, 1.47%)</title><rect x="370.3" y="723.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.3" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (155,213 samples, 1.42%)</title><rect x="371.0" y="707.0" width="16.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.0" y="718.0"></text>
</g>
<g>
<title>/lib64/libc-2.30.so (3,301 samples, 0.03%)</title><rect x="371.3" y="691.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="374.3" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (2,475 samples, 0.02%)</title><rect x="371.8" y="691.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="374.8" y="702.0"></text>
</g>
<g>
<title>epoll_wait (144,547 samples, 1.32%)</title><rect x="372.1" y="691.0" width="15.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="375.1" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (133,480 samples, 1.22%)</title><rect x="373.3" y="675.0" width="14.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="376.3" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (133,480 samples, 1.22%)</title><rect x="373.3" y="659.0" width="14.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="376.3" y="670.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (116,799 samples, 1.07%)</title><rect x="375.1" y="643.0" width="12.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="378.1" y="654.0"></text>
</g>
<g>
<title>do_epoll_wait (114,317 samples, 1.04%)</title><rect x="375.3" y="627.0" width="12.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="378.3" y="638.0"></text>
</g>
<g>
<title>__fget_light (11,744 samples, 0.11%)</title><rect x="375.7" y="611.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="378.7" y="622.0"></text>
</g>
<g>
<title>__fget (9,277 samples, 0.08%)</title><rect x="376.0" y="595.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="379.0" y="606.0"></text>
</g>
<g>
<title>ep_poll (98,653 samples, 0.90%)</title><rect x="377.0" y="611.0" width="10.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="380.0" y="622.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (51,757 samples, 0.47%)</title><rect x="378.4" y="595.0" width="5.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="381.4" y="606.0"></text>
</g>
<g>
<title>ep_send_events_proc (37,349 samples, 0.34%)</title><rect x="379.3" y="579.0" width="4.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="382.3" y="590.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (28,352 samples, 0.26%)</title><rect x="380.3" y="563.0" width="3.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="383.3" y="574.0"></text>
</g>
<g>
<title>sock_poll (23,961 samples, 0.22%)</title><rect x="380.7" y="547.0" width="2.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="383.7" y="558.0"></text>
</g>
<g>
<title>tcp_poll (14,735 samples, 0.13%)</title><rect x="381.7" y="531.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="384.7" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free?[ipv6] (6,019 samples, 0.05%)</title><rect x="382.7" y="515.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="385.7" y="526.0"></text>
</g>
<g>
<title>mutex_lock (3,859 samples, 0.04%)</title><rect x="383.3" y="579.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="386.3" y="590.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (33,046 samples, 0.30%)</title><rect x="384.0" y="595.0" width="3.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="387.0" y="606.0"></text>
</g>
<g>
<title>schedule (31,192 samples, 0.28%)</title><rect x="384.2" y="579.0" width="3.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="387.2" y="590.0"></text>
</g>
<g>
<title>__schedule (24,939 samples, 0.23%)</title><rect x="384.9" y="563.0" width="2.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="387.9" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (12,112 samples, 0.11%)</title><rect x="386.3" y="547.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="389.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (7,239,688 samples, 66.08%)</title><rect x="387.7" y="723.0" width="779.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.7" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (7,235,374 samples, 66.04%)</title><rect x="388.2" y="707.0" width="779.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="391.2" y="718.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (6,671,956 samples, 60.89%)</title><rect x="389.0" y="691.0" width="718.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="392.0" y="702.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6,205,753 samples, 56.64%)</title><rect x="401.7" y="675.0" width="668.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.7" y="686.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (16,831 samples, 0.15%)</title><rect x="403.9" y="659.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.9" y="670.0"></text>
</g>
<g>
<title>itable stub (18,424 samples, 0.17%)</title><rect x="405.7" y="659.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="408.7" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3,280 samples, 0.03%)</title><rect x="407.7" y="659.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="410.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6,146,599 samples, 56.10%)</title><rect x="408.1" y="659.0" width="661.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.1" y="670.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (6,098,381 samples, 55.66%)</title><rect x="408.1" y="643.0" width="656.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.1" y="654.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (60,524 samples, 0.55%)</title><rect x="408.6" y="627.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10,723 samples, 0.10%)</title><rect x="411.6" y="611.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.6" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (10,723 samples, 0.10%)</title><rect x="411.6" y="595.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (7,769 samples, 0.07%)</title><rect x="412.8" y="611.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.8" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7,769 samples, 0.07%)</title><rect x="412.8" y="595.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="415.8" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3,037 samples, 0.03%)</title><rect x="413.7" y="611.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="416.7" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (9,875 samples, 0.09%)</title><rect x="414.1" y="611.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3,971 samples, 0.04%)</title><rect x="414.7" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="417.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3,971 samples, 0.04%)</title><rect x="414.7" y="579.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.7" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3,971 samples, 0.04%)</title><rect x="414.7" y="563.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (61,006 samples, 0.56%)</title><rect x="415.1" y="627.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="418.1" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (60,308 samples, 0.55%)</title><rect x="415.2" y="611.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="418.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3,579 samples, 0.03%)</title><rect x="418.1" y="595.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="421.1" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3,579 samples, 0.03%)</title><rect x="418.1" y="579.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="421.1" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (2,624 samples, 0.02%)</title><rect x="418.5" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="421.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,624 samples, 0.02%)</title><rect x="418.5" y="579.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="421.5" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3,841 samples, 0.04%)</title><rect x="418.9" y="595.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="421.9" y="606.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (21,901 samples, 0.20%)</title><rect x="419.3" y="595.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5,526 samples, 0.05%)</title><rect x="421.1" y="579.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="424.1" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5,526 samples, 0.05%)</title><rect x="421.1" y="563.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.1" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5,526 samples, 0.05%)</title><rect x="421.1" y="547.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="424.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.get (5,971,846 samples, 54.50%)</title><rect x="421.7" y="627.0" width="643.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="424.7" y="638.0">ru/mail/polis/service/s3ponia/AsyncService.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (16,111 samples, 0.15%)</title><rect x="422.5" y="611.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.5" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (16,014 samples, 0.15%)</title><rect x="422.5" y="595.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="425.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$135/1762020635.get$Lambda (15,953 samples, 0.15%)</title><rect x="422.5" y="579.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$135/1762020635.&lt;init&gt; (13,874 samples, 0.13%)</title><rect x="422.7" y="563.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="425.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.getValuesFromFutures (9,451 samples, 0.09%)</title><rect x="423.2" y="547.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="426.2" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.sort (14,183 samples, 0.13%)</title><rect x="424.5" y="611.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.5" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.sort (13,944 samples, 0.13%)</title><rect x="424.5" y="595.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="427.5" y="606.0"></text>
</g>
<g>
<title>java/util/TimSort.sort (13,248 samples, 0.12%)</title><rect x="424.6" y="579.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="427.6" y="590.0"></text>
</g>
<g>
<title>java/util/TimSort.countRunAndMakeAscending (12,524 samples, 0.11%)</title><rect x="424.7" y="563.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="427.7" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$203/146023350.compare (11,573 samples, 0.11%)</title><rect x="424.8" y="547.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.8" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9,893 samples, 0.09%)</title><rect x="425.0" y="531.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.0" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$ReverseComparator2.compare (9,043 samples, 0.08%)</title><rect x="425.0" y="515.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.0" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$194/20631510.compare (8,831 samples, 0.08%)</title><rect x="425.0" y="499.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="428.0" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (8,737 samples, 0.08%)</title><rect x="425.0" y="483.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="428.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$$Lambda$190/1897268520.apply (7,034 samples, 0.06%)</title><rect x="425.2" y="467.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="428.2" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5,500 samples, 0.05%)</title><rect x="425.4" y="451.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="428.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3,468 samples, 0.03%)</title><rect x="426.0" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (204,508 samples, 1.87%)</title><rect x="426.4" y="611.0" width="22.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.4" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (190,910 samples, 1.74%)</title><rect x="426.7" y="595.0" width="20.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="429.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (61,881 samples, 0.56%)</title><rect x="426.7" y="579.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="429.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (61,881 samples, 0.56%)</title><rect x="426.7" y="563.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="429.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (61,881 samples, 0.56%)</title><rect x="426.7" y="547.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="429.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (61,881 samples, 0.56%)</title><rect x="426.7" y="531.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="429.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (61,871 samples, 0.56%)</title><rect x="426.7" y="515.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8,288 samples, 0.08%)</title><rect x="433.3" y="579.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="436.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8,288 samples, 0.08%)</title><rect x="433.3" y="563.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="436.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7,596 samples, 0.07%)</title><rect x="433.4" y="547.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7,530 samples, 0.07%)</title><rect x="433.4" y="531.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="436.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7,530 samples, 0.07%)</title><rect x="433.4" y="515.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="436.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6,022 samples, 0.05%)</title><rect x="433.5" y="499.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="436.5" y="510.0"></text>
</g>
<g>
<title>[unknown] (3,553 samples, 0.03%)</title><rect x="433.8" y="483.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="436.8" y="494.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2,858 samples, 0.03%)</title><rect x="433.8" y="467.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="436.8" y="478.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2,569 samples, 0.02%)</title><rect x="433.9" y="451.0" width="0.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="436.9" y="462.0"></text>
</g>
<g>
<title>do_syscall_64 (2,569 samples, 0.02%)</title><rect x="433.9" y="435.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="436.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (120,703 samples, 1.10%)</title><rect x="434.2" y="579.0" width="13.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (120,703 samples, 1.10%)</title><rect x="434.2" y="563.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="437.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (120,703 samples, 1.10%)</title><rect x="434.2" y="547.0" width="13.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="437.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (120,696 samples, 1.10%)</title><rect x="434.2" y="531.0" width="13.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="437.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (109,216 samples, 1.00%)</title><rect x="435.5" y="515.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="438.5" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark (20,274 samples, 0.19%)</title><rect x="435.9" y="499.0" width="2.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="438.9" y="510.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5,764 samples, 0.05%)</title><rect x="436.5" y="483.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="439.5" y="494.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (4,057 samples, 0.04%)</title><rect x="437.2" y="483.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="440.2" y="494.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (83,160 samples, 0.76%)</title><rect x="438.3" y="499.0" width="8.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="441.3" y="510.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (76,942 samples, 0.70%)</title><rect x="438.9" y="483.0" width="8.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="441.9" y="494.0"></text>
</g>
<g>
<title>do_syscall_64 (76,942 samples, 0.70%)</title><rect x="438.9" y="467.0" width="8.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="441.9" y="478.0"></text>
</g>
<g>
<title>__x64_sys_futex (73,948 samples, 0.67%)</title><rect x="439.3" y="451.0" width="7.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="442.3" y="462.0"></text>
</g>
<g>
<title>do_futex (72,609 samples, 0.66%)</title><rect x="439.4" y="435.0" width="7.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="442.4" y="446.0"></text>
</g>
<g>
<title>futex_wake (71,605 samples, 0.65%)</title><rect x="439.5" y="419.0" width="7.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="442.5" y="430.0"></text>
</g>
<g>
<title>mark_wake_futex (3,949 samples, 0.04%)</title><rect x="440.5" y="403.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="443.5" y="414.0"></text>
</g>
<g>
<title>wake_up_q (57,196 samples, 0.52%)</title><rect x="441.1" y="403.0" width="6.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="444.1" y="414.0"></text>
</g>
<g>
<title>try_to_wake_up (56,723 samples, 0.52%)</title><rect x="441.1" y="387.0" width="6.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="444.1" y="398.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (56,112 samples, 0.51%)</title><rect x="441.2" y="371.0" width="6.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="444.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.isRunning (10,127 samples, 0.09%)</title><rect x="447.2" y="595.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,078,766 samples, 9.85%)</title><rect x="448.4" y="611.0" width="116.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="451.4" y="622.0">one/nio/http/H..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5,456 samples, 0.05%)</title><rect x="449.6" y="595.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="452.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5,280 samples, 0.05%)</title><rect x="449.6" y="579.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.6" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5,193 samples, 0.05%)</title><rect x="449.6" y="563.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="452.6" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,053,161 samples, 9.61%)</title><rect x="450.2" y="595.0" width="113.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="453.2" y="606.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (25,734 samples, 0.23%)</title><rect x="450.3" y="579.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (13,687 samples, 0.12%)</title><rect x="451.5" y="563.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="454.5" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (13,687 samples, 0.12%)</title><rect x="451.5" y="547.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.charAt (13,684 samples, 0.12%)</title><rect x="451.5" y="531.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.5" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2,492 samples, 0.02%)</title><rect x="452.7" y="515.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="455.7" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,026,896 samples, 9.37%)</title><rect x="453.0" y="579.0" width="110.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.0" y="590.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session.write (1,024,850 samples, 9.35%)</title><rect x="453.2" y="563.0" width="110.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="456.2" y="574.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,020,553 samples, 9.31%)</title><rect x="453.4" y="547.0" width="109.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.4" y="558.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,018,329 samples, 9.29%)</title><rect x="453.6" y="531.0" width="109.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.6" y="542.0">one/nio/net/N..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (15,035 samples, 0.14%)</title><rect x="454.4" y="515.0" width="1.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="457.4" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7,529 samples, 0.07%)</title><rect x="455.2" y="499.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="458.2" y="510.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3,023 samples, 0.03%)</title><rect x="455.7" y="483.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="458.7" y="494.0"></text>
</g>
<g>
<title>__libc_send (993,946 samples, 9.07%)</title><rect x="456.0" y="515.0" width="107.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="459.0" y="526.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (987,040 samples, 9.01%)</title><rect x="456.8" y="499.0" width="106.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="459.8" y="510.0">entry_SYSCALL..</text>
</g>
<g>
<title>do_syscall_64 (987,040 samples, 9.01%)</title><rect x="456.8" y="483.0" width="106.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="459.8" y="494.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (980,049 samples, 8.94%)</title><rect x="457.5" y="467.0" width="105.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="460.5" y="478.0">__x64_sys_sen..</text>
</g>
<g>
<title>__sys_sendto (978,542 samples, 8.93%)</title><rect x="457.6" y="451.0" width="105.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="460.6" y="462.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (963,248 samples, 8.79%)</title><rect x="458.3" y="435.0" width="103.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="461.3" y="446.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg?[ipv6] (3,623 samples, 0.03%)</title><rect x="458.4" y="419.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="461.4" y="430.0"></text>
</g>
<g>
<title>security_socket_sendmsg (5,182 samples, 0.05%)</title><rect x="458.8" y="419.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="461.8" y="430.0"></text>
</g>
<g>
<title>sock_has_perm (4,144 samples, 0.04%)</title><rect x="458.9" y="403.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="461.9" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg (953,090 samples, 8.70%)</title><rect x="459.4" y="419.0" width="102.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="462.4" y="430.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (2,522 samples, 0.02%)</title><rect x="459.5" y="403.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="462.5" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (947,609 samples, 8.65%)</title><rect x="460.0" y="403.0" width="102.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="463.0" y="414.0">tcp_sendmsg_..</text>
</g>
<g>
<title>__check_object_size (4,838 samples, 0.04%)</title><rect x="462.5" y="387.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="465.5" y="398.0"></text>
</g>
<g>
<title>__virt_addr_valid (3,852 samples, 0.04%)</title><rect x="462.5" y="371.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="465.5" y="382.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (828,702 samples, 7.56%)</title><rect x="463.0" y="387.0" width="89.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="466.0" y="398.0">__tcp_push..</text>
</g>
<g>
<title>tcp_write_xmit (827,810 samples, 7.56%)</title><rect x="463.1" y="371.0" width="89.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="466.1" y="382.0">tcp_write_..</text>
</g>
<g>
<title>__tcp_transmit_skb (798,986 samples, 7.29%)</title><rect x="464.2" y="355.0" width="86.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="467.2" y="366.0">__tcp_tran..</text>
</g>
<g>
<title>__ip_queue_xmit (753,722 samples, 6.88%)</title><rect x="466.2" y="339.0" width="81.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="469.2" y="350.0">__ip_queu..</text>
</g>
<g>
<title>__sk_dst_check (5,698 samples, 0.05%)</title><rect x="466.7" y="323.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="469.7" y="334.0"></text>
</g>
<g>
<title>ipv4_dst_check (4,271 samples, 0.04%)</title><rect x="466.8" y="307.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="469.8" y="318.0"></text>
</g>
<g>
<title>ip_local_out (15,608 samples, 0.14%)</title><rect x="467.4" y="323.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="470.4" y="334.0"></text>
</g>
<g>
<title>__ip_local_out (14,885 samples, 0.14%)</title><rect x="467.4" y="307.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="470.4" y="318.0"></text>
</g>
<g>
<title>ip_send_check (6,759 samples, 0.06%)</title><rect x="467.8" y="291.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="470.8" y="302.0"></text>
</g>
<g>
<title>nf_hook_slow (5,003 samples, 0.05%)</title><rect x="468.5" y="291.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="471.5" y="302.0"></text>
</g>
<g>
<title>selinux_ipv4_output (3,186 samples, 0.03%)</title><rect x="468.7" y="275.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="471.7" y="286.0"></text>
</g>
<g>
<title>ip_output (727,580 samples, 6.64%)</title><rect x="469.0" y="323.0" width="78.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="472.0" y="334.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (3,921 samples, 0.04%)</title><rect x="469.6" y="307.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="472.6" y="318.0"></text>
</g>
<g>
<title>ip_finish_output2 (700,200 samples, 6.39%)</title><rect x="470.0" y="307.0" width="75.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="473.0" y="318.0">ip_finis..</text>
</g>
<g>
<title>__dev_queue_xmit (49,016 samples, 0.45%)</title><rect x="471.9" y="291.0" width="5.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="474.9" y="302.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (25,703 samples, 0.23%)</title><rect x="473.1" y="275.0" width="2.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="476.1" y="286.0"></text>
</g>
<g>
<title>loopback_xmit (22,000 samples, 0.20%)</title><rect x="473.5" y="259.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="476.5" y="270.0"></text>
</g>
<g>
<title>eth_type_trans (3,535 samples, 0.03%)</title><rect x="474.0" y="243.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="477.0" y="254.0"></text>
</g>
<g>
<title>netif_rx (10,364 samples, 0.09%)</title><rect x="474.4" y="243.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="477.4" y="254.0"></text>
</g>
<g>
<title>netif_rx_internal (10,018 samples, 0.09%)</title><rect x="474.4" y="227.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="477.4" y="238.0"></text>
</g>
<g>
<title>enqueue_to_backlog (9,356 samples, 0.09%)</title><rect x="474.5" y="211.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="477.5" y="222.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (2,978 samples, 0.03%)</title><rect x="475.9" y="275.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="478.9" y="286.0"></text>
</g>
<g>
<title>validate_xmit_skb (7,570 samples, 0.07%)</title><rect x="476.2" y="275.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="479.2" y="286.0"></text>
</g>
<g>
<title>netif_skb_features (4,450 samples, 0.04%)</title><rect x="476.5" y="259.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="479.5" y="270.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (633,341 samples, 5.78%)</title><rect x="477.2" y="291.0" width="68.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="480.2" y="302.0">__local..</text>
</g>
<g>
<title>do_softirq.part.0 (631,946 samples, 5.77%)</title><rect x="477.3" y="275.0" width="68.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="480.3" y="286.0">do_soft..</text>
</g>
<g>
<title>do_softirq_own_stack (626,270 samples, 5.72%)</title><rect x="477.9" y="259.0" width="67.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="480.9" y="270.0">do_soft..</text>
</g>
<g>
<title>__softirqentry_text_start (626,270 samples, 5.72%)</title><rect x="477.9" y="243.0" width="67.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="480.9" y="254.0">__softi..</text>
</g>
<g>
<title>net_rx_action (610,779 samples, 5.57%)</title><rect x="479.6" y="227.0" width="65.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="482.6" y="238.0">net_rx_..</text>
</g>
<g>
<title>process_backlog (601,424 samples, 5.49%)</title><rect x="480.6" y="211.0" width="64.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="483.6" y="222.0">process..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (593,475 samples, 5.42%)</title><rect x="481.5" y="195.0" width="63.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="484.5" y="206.0">__netif..</text>
</g>
<g>
<title>__netif_receive_skb_core (12,800 samples, 0.12%)</title><rect x="481.8" y="179.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="484.8" y="190.0"></text>
</g>
<g>
<title>ip_rcv (577,533 samples, 5.27%)</title><rect x="483.2" y="179.0" width="62.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="486.2" y="190.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (566,604 samples, 5.17%)</title><rect x="483.4" y="163.0" width="61.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="486.4" y="174.0">ip_loc..</text>
</g>
<g>
<title>ip_local_deliver_finish (563,424 samples, 5.14%)</title><rect x="483.7" y="147.0" width="60.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="486.7" y="158.0">ip_loc..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (562,154 samples, 5.13%)</title><rect x="483.9" y="131.0" width="60.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="486.9" y="142.0">ip_pro..</text>
</g>
<g>
<title>raw_local_deliver (3,301 samples, 0.03%)</title><rect x="484.8" y="115.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="487.8" y="126.0"></text>
</g>
<g>
<title>tcp_v4_rcv (550,036 samples, 5.02%)</title><rect x="485.2" y="115.0" width="59.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="488.2" y="126.0">tcp_v4..</text>
</g>
<g>
<title>__inet_lookup_established (24,364 samples, 0.22%)</title><rect x="487.9" y="99.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="490.9" y="110.0"></text>
</g>
<g>
<title>inet_ehashfn (2,654 samples, 0.02%)</title><rect x="490.3" y="83.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="493.3" y="94.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (25,106 samples, 0.23%)</title><rect x="490.6" y="99.0" width="2.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="493.6" y="110.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (24,333 samples, 0.22%)</title><rect x="490.7" y="83.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="493.7" y="94.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (20,883 samples, 0.19%)</title><rect x="491.1" y="67.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="494.1" y="78.0"></text>
</g>
<g>
<title>selinux_sock_rcv_skb_compat (13,195 samples, 0.12%)</title><rect x="491.9" y="51.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="494.9" y="62.0"></text>
</g>
<g>
<title>avc_has_perm (3,061 samples, 0.03%)</title><rect x="492.2" y="35.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="495.2" y="46.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (3,343 samples, 0.03%)</title><rect x="492.6" y="35.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="495.6" y="46.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.0 (3,373 samples, 0.03%)</title><rect x="492.9" y="35.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="495.9" y="46.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (469,363 samples, 4.28%)</title><rect x="493.4" y="99.0" width="50.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="496.4" y="110.0">tcp_v..</text>
</g>
<g>
<title>ipv4_dst_check (2,412 samples, 0.02%)</title><rect x="493.6" y="83.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="496.6" y="94.0"></text>
</g>
<g>
<title>tcp_rcv_established (465,383 samples, 4.25%)</title><rect x="493.8" y="83.0" width="50.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="496.8" y="94.0">tcp_r..</text>
</g>
<g>
<title>sk_reset_timer (17,359 samples, 0.16%)</title><rect x="495.7" y="67.0" width="1.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="498.7" y="78.0"></text>
</g>
<g>
<title>mod_timer (16,790 samples, 0.15%)</title><rect x="495.7" y="51.0" width="1.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="498.7" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (13,044 samples, 0.12%)</title><rect x="495.9" y="35.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="498.9" y="46.0"></text>
</g>
<g>
<title>sock_def_readable (269,632 samples, 2.46%)</title><rect x="497.6" y="67.0" width="29.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="500.6" y="78.0">so..</text>
</g>
<g>
<title>__wake_up_common_lock (263,464 samples, 2.40%)</title><rect x="498.2" y="51.0" width="28.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="501.2" y="62.0">__..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (260,985 samples, 2.38%)</title><rect x="498.4" y="35.0" width="28.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="501.4" y="46.0">_r..</text>
</g>
<g>
<title>tcp_ack (130,455 samples, 1.19%)</title><rect x="526.6" y="67.0" width="14.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="529.6" y="78.0"></text>
</g>
<g>
<title>__kfree_skb (36,077 samples, 0.33%)</title><rect x="530.8" y="51.0" width="3.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="533.8" y="62.0"></text>
</g>
<g>
<title>__slab_free (9,628 samples, 0.09%)</title><rect x="530.8" y="35.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="533.8" y="46.0"></text>
</g>
<g>
<title>kfree (8,220 samples, 0.08%)</title><rect x="531.9" y="35.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="534.9" y="46.0"></text>
</g>
<g>
<title>skb_release_data (16,744 samples, 0.15%)</title><rect x="532.9" y="35.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="535.9" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (6,037 samples, 0.06%)</title><rect x="534.8" y="51.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="537.8" y="62.0"></text>
</g>
<g>
<title>kmem_cache_free (21,611 samples, 0.20%)</title><rect x="535.7" y="51.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="538.7" y="62.0"></text>
</g>
<g>
<title>__slab_free (10,813 samples, 0.10%)</title><rect x="536.9" y="35.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="539.9" y="46.0"></text>
</g>
<g>
<title>rb_first (2,808 samples, 0.03%)</title><rect x="538.1" y="51.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="541.1" y="62.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (6,868 samples, 0.06%)</title><rect x="538.4" y="51.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="541.4" y="62.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3,125 samples, 0.03%)</title><rect x="540.3" y="51.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="543.3" y="62.0"></text>
</g>
<g>
<title>tcp_check_space (5,742 samples, 0.05%)</title><rect x="540.6" y="67.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="543.6" y="78.0"></text>
</g>
<g>
<title>tcp_event_data_recv (4,353 samples, 0.04%)</title><rect x="541.4" y="67.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="544.4" y="78.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (9,669 samples, 0.09%)</title><rect x="541.9" y="67.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="544.9" y="78.0"></text>
</g>
<g>
<title>ktime_get (6,720 samples, 0.06%)</title><rect x="542.2" y="51.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="545.2" y="62.0"></text>
</g>
<g>
<title>read_tsc (4,962 samples, 0.05%)</title><rect x="542.4" y="35.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="545.4" y="46.0"></text>
</g>
<g>
<title>tcp_queue_rcv (8,228 samples, 0.08%)</title><rect x="542.9" y="67.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="545.9" y="78.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (2,351 samples, 0.02%)</title><rect x="544.2" y="99.0" width="0.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="547.2" y="110.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (3,896 samples, 0.04%)</title><rect x="544.4" y="163.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="547.4" y="174.0"></text>
</g>
<g>
<title>ip_rcv_finish (5,223 samples, 0.05%)</title><rect x="544.8" y="163.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="547.8" y="174.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (3,694 samples, 0.03%)</title><rect x="545.0" y="147.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="548.0" y="158.0"></text>
</g>
<g>
<title>nf_hook_slow (18,142 samples, 0.17%)</title><rect x="545.5" y="307.0" width="1.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="548.5" y="318.0"></text>
</g>
<g>
<title>selinux_ip_postroute (16,315 samples, 0.15%)</title><rect x="545.5" y="291.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="548.5" y="302.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (13,427 samples, 0.12%)</title><rect x="545.9" y="275.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="548.9" y="286.0"></text>
</g>
<g>
<title>avc_has_perm (5,569 samples, 0.05%)</title><rect x="546.2" y="259.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="549.2" y="270.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.0 (3,222 samples, 0.03%)</title><rect x="546.8" y="259.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="549.8" y="270.0"></text>
</g>
<g>
<title>__skb_clone (12,436 samples, 0.11%)</title><rect x="547.4" y="339.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="550.4" y="350.0"></text>
</g>
<g>
<title>ktime_get (5,138 samples, 0.05%)</title><rect x="550.2" y="355.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="553.2" y="366.0"></text>
</g>
<g>
<title>read_tsc (3,666 samples, 0.03%)</title><rect x="550.4" y="339.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="553.4" y="350.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (9,541 samples, 0.09%)</title><rect x="550.8" y="355.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="553.8" y="366.0"></text>
</g>
<g>
<title>sk_reset_timer (4,693 samples, 0.04%)</title><rect x="551.1" y="339.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="554.1" y="350.0"></text>
</g>
<g>
<title>mod_timer (4,604 samples, 0.04%)</title><rect x="551.1" y="323.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="554.1" y="334.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3,029 samples, 0.03%)</title><rect x="551.3" y="307.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="554.3" y="318.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2,689 samples, 0.02%)</title><rect x="551.8" y="355.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="554.8" y="366.0"></text>
</g>
<g>
<title>_copy_from_iter_full (13,894 samples, 0.13%)</title><rect x="552.2" y="387.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="555.2" y="398.0"></text>
</g>
<g>
<title>copyin (5,938 samples, 0.05%)</title><rect x="552.4" y="371.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="555.4" y="382.0"></text>
</g>
<g>
<title>copy_user_generic_string (5,649 samples, 0.05%)</title><rect x="552.4" y="355.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="555.4" y="366.0"></text>
</g>
<g>
<title>iov_iter_advance (6,508 samples, 0.06%)</title><rect x="553.0" y="371.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="556.0" y="382.0"></text>
</g>
<g>
<title>sk_page_frag_refill (11,995 samples, 0.11%)</title><rect x="553.7" y="387.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="556.7" y="398.0"></text>
</g>
<g>
<title>skb_page_frag_refill (11,662 samples, 0.11%)</title><rect x="553.8" y="371.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="556.8" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (36,697 samples, 0.33%)</title><rect x="555.0" y="387.0" width="4.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="558.0" y="398.0"></text>
</g>
<g>
<title>__alloc_skb (29,887 samples, 0.27%)</title><rect x="555.7" y="371.0" width="3.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="558.7" y="382.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (9,353 samples, 0.09%)</title><rect x="556.5" y="355.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="559.5" y="366.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (9,140 samples, 0.08%)</title><rect x="556.5" y="339.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="559.5" y="350.0"></text>
</g>
<g>
<title>__ksize (6,066 samples, 0.06%)</title><rect x="557.5" y="355.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="560.5" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (7,121 samples, 0.06%)</title><rect x="558.1" y="355.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="561.1" y="366.0"></text>
</g>
<g>
<title>skb_entail (7,831 samples, 0.07%)</title><rect x="559.0" y="387.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="562.0" y="398.0"></text>
</g>
<g>
<title>tcp_send_mss (13,549 samples, 0.12%)</title><rect x="560.2" y="387.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="563.2" y="398.0"></text>
</g>
<g>
<title>tcp_current_mss (12,539 samples, 0.11%)</title><rect x="560.3" y="371.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="563.3" y="382.0"></text>
</g>
<g>
<title>ipv4_mtu (5,884 samples, 0.05%)</title><rect x="561.0" y="355.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="564.0" y="366.0"></text>
</g>
<g>
<title>sockfd_lookup_light (9,464 samples, 0.09%)</title><rect x="562.0" y="435.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="565.0" y="446.0"></text>
</g>
<g>
<title>__fget_light (8,951 samples, 0.08%)</title><rect x="562.1" y="419.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="565.1" y="430.0"></text>
</g>
<g>
<title>__fget (7,749 samples, 0.07%)</title><rect x="562.2" y="403.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="565.2" y="414.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2,746 samples, 0.03%)</title><rect x="563.3" y="547.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="566.3" y="558.0"></text>
</g>
<g>
<title>gettimeofday (2,505 samples, 0.02%)</title><rect x="563.3" y="531.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="566.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7,613 samples, 0.07%)</title><rect x="563.6" y="595.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="566.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5,717 samples, 0.05%)</title><rect x="563.8" y="579.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="566.8" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5,717 samples, 0.05%)</title><rect x="563.8" y="563.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="566.8" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (40,466 samples, 0.37%)</title><rect x="564.6" y="611.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="567.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (29,050 samples, 0.27%)</title><rect x="565.6" y="595.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="568.6" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (29,050 samples, 0.27%)</title><rect x="565.6" y="579.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="568.6" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4,014 samples, 0.04%)</title><rect x="568.3" y="563.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="571.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getRaw (283,270 samples, 2.59%)</title><rect x="569.1" y="611.0" width="30.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="572.1" y="622.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3,095 samples, 0.03%)</title><rect x="569.1" y="595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="572.1" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3,048 samples, 0.03%)</title><rect x="569.1" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="572.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (18,719 samples, 0.17%)</title><rect x="569.4" y="595.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="572.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (11,037 samples, 0.10%)</title><rect x="569.5" y="579.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="572.5" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (6,556 samples, 0.06%)</title><rect x="569.6" y="563.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="572.6" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (6,114 samples, 0.06%)</title><rect x="569.7" y="547.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="572.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (6,104 samples, 0.06%)</title><rect x="569.7" y="531.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="572.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (6,064 samples, 0.06%)</title><rect x="569.7" y="515.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (2,565 samples, 0.02%)</title><rect x="569.7" y="499.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="572.7" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$178/901280301.getAsBoolean (2,510 samples, 0.02%)</title><rect x="569.7" y="483.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (2,503 samples, 0.02%)</title><rect x="569.7" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="572.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (2,463 samples, 0.02%)</title><rect x="569.7" y="451.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.7" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (3,161 samples, 0.03%)</title><rect x="570.0" y="499.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.0" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (5,542 samples, 0.05%)</title><rect x="570.7" y="579.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="573.7" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5,471 samples, 0.05%)</title><rect x="570.7" y="563.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="573.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.iteratorRaw (260,857 samples, 2.38%)</title><rect x="571.5" y="595.0" width="28.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.5" y="606.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (32,022 samples, 0.29%)</title><rect x="571.9" y="579.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="574.9" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (31,876 samples, 0.29%)</title><rect x="571.9" y="563.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="574.9" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (4,061 samples, 0.04%)</title><rect x="572.3" y="547.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="575.3" y="558.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (24,213 samples, 0.22%)</title><rect x="572.8" y="547.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="575.8" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (24,169 samples, 0.22%)</title><rect x="572.8" y="531.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.8" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (23,908 samples, 0.22%)</title><rect x="572.8" y="515.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="575.8" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (9,293 samples, 0.08%)</title><rect x="573.0" y="499.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="576.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$178/901280301.getAsBoolean (6,514 samples, 0.06%)</title><rect x="573.3" y="483.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.3" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (6,442 samples, 0.06%)</title><rect x="573.4" y="467.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="576.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (6,433 samples, 0.06%)</title><rect x="573.4" y="451.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="576.4" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (3,756 samples, 0.03%)</title><rect x="573.6" y="435.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="576.6" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (11,358 samples, 0.10%)</title><rect x="574.2" y="499.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="577.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (3,856 samples, 0.04%)</title><rect x="575.0" y="483.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="578.0" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3,117 samples, 0.03%)</title><rect x="575.4" y="579.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.4" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,984 samples, 0.03%)</title><rect x="575.4" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="578.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$156/636743593.get$Lambda (2,660 samples, 0.02%)</title><rect x="575.4" y="547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="578.4" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5,275 samples, 0.05%)</title><rect x="575.7" y="579.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="578.7" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6,317 samples, 0.06%)</title><rect x="576.3" y="579.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="579.3" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6,276 samples, 0.06%)</title><rect x="576.3" y="563.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.3" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3,144 samples, 0.03%)</title><rect x="576.6" y="547.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.6" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3,020 samples, 0.03%)</title><rect x="576.6" y="531.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (13,804 samples, 0.13%)</title><rect x="577.1" y="579.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="580.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (13,770 samples, 0.13%)</title><rect x="577.1" y="563.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="580.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (13,746 samples, 0.13%)</title><rect x="577.1" y="547.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="580.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (11,162 samples, 0.10%)</title><rect x="577.3" y="531.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="580.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (5,930 samples, 0.05%)</title><rect x="578.5" y="579.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (5,886 samples, 0.05%)</title><rect x="578.6" y="563.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (2,760 samples, 0.03%)</title><rect x="578.7" y="547.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="581.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (10,675 samples, 0.10%)</title><rect x="579.2" y="579.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="582.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (10,510 samples, 0.10%)</title><rect x="579.2" y="563.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.2" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (9,981 samples, 0.09%)</title><rect x="579.3" y="547.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.3" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (9,011 samples, 0.08%)</title><rect x="579.3" y="531.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="582.3" y="542.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (8,952 samples, 0.08%)</title><rect x="579.3" y="515.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="582.3" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (8,943 samples, 0.08%)</title><rect x="579.3" y="499.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="582.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (8,876 samples, 0.08%)</title><rect x="579.3" y="483.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="582.3" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (2,502 samples, 0.02%)</title><rect x="579.3" y="467.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.3" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$178/901280301.getAsBoolean (2,439 samples, 0.02%)</title><rect x="579.3" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.3" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (2,434 samples, 0.02%)</title><rect x="579.3" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (2,372 samples, 0.02%)</title><rect x="579.3" y="419.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="582.3" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (5,961 samples, 0.05%)</title><rect x="579.6" y="467.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="582.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.iterator (178,208 samples, 1.63%)</title><rect x="580.3" y="579.0" width="19.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="583.3" y="590.0"></text>
</g>
<g>
<title>java/util/Collection.stream (105,359 samples, 0.96%)</title><rect x="580.4" y="563.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="583.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (93,387 samples, 0.85%)</title><rect x="580.4" y="547.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="583.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (90,900 samples, 0.83%)</title><rect x="580.7" y="531.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="583.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (90,730 samples, 0.83%)</title><rect x="580.7" y="515.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="583.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (6,179 samples, 0.06%)</title><rect x="583.5" y="499.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="586.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (5,416 samples, 0.05%)</title><rect x="583.5" y="483.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="586.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (5,299 samples, 0.05%)</title><rect x="583.5" y="467.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="586.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5,129 samples, 0.05%)</title><rect x="583.6" y="451.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="586.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3,216 samples, 0.03%)</title><rect x="583.8" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="586.8" y="446.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3,215 samples, 0.03%)</title><rect x="583.8" y="419.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="586.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (59,023 samples, 0.54%)</title><rect x="584.1" y="499.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="587.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (57,894 samples, 0.53%)</title><rect x="584.2" y="483.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="587.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3,017 samples, 0.03%)</title><rect x="584.3" y="467.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="587.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2,762 samples, 0.03%)</title><rect x="584.3" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2,728 samples, 0.02%)</title><rect x="584.3" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="587.3" y="446.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2,726 samples, 0.02%)</title><rect x="584.3" y="419.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="587.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (54,361 samples, 0.50%)</title><rect x="584.6" y="467.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="587.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (51,572 samples, 0.47%)</title><rect x="584.9" y="451.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="587.9" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (51,038 samples, 0.47%)</title><rect x="585.0" y="435.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="588.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (50,688 samples, 0.46%)</title><rect x="585.0" y="419.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.0" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (50,684 samples, 0.46%)</title><rect x="585.0" y="403.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="588.0" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (17,169 samples, 0.16%)</title><rect x="588.6" y="387.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="591.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (17,169 samples, 0.16%)</title><rect x="588.6" y="371.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="591.6" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (11,623 samples, 0.11%)</title><rect x="590.5" y="547.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (3,682 samples, 0.03%)</title><rect x="590.7" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (3,591 samples, 0.03%)</title><rect x="590.7" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (3,540 samples, 0.03%)</title><rect x="590.7" y="499.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="593.7" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (6,386 samples, 0.06%)</title><rect x="591.1" y="531.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="594.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (30,491 samples, 0.28%)</title><rect x="591.8" y="563.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="594.8" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2,759 samples, 0.03%)</title><rect x="592.0" y="547.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="595.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.&lt;init&gt; (25,681 samples, 0.23%)</title><rect x="592.3" y="547.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="595.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (40,866 samples, 0.37%)</title><rect x="595.0" y="563.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="598.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (40,808 samples, 0.37%)</title><rect x="595.0" y="547.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="598.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (40,790 samples, 0.37%)</title><rect x="595.0" y="531.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="598.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (40,677 samples, 0.37%)</title><rect x="595.1" y="515.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="598.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.getValue (23,403 samples, 0.21%)</title><rect x="599.6" y="611.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="602.6" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (21,303 samples, 0.19%)</title><rect x="599.8" y="595.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="602.8" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (15,697 samples, 0.14%)</title><rect x="600.4" y="579.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="603.4" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15,681 samples, 0.14%)</title><rect x="600.4" y="563.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="603.4" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5,002 samples, 0.05%)</title><rect x="601.2" y="547.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="604.2" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4,217 samples, 0.04%)</title><rect x="601.2" y="531.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="604.2" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3,127 samples, 0.03%)</title><rect x="601.4" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="604.4" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3,680 samples, 0.03%)</title><rect x="601.7" y="547.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="604.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getReplicationConfiguration (51,982 samples, 0.47%)</title><rect x="602.2" y="611.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="605.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.parseAndValidateReplicas (51,873 samples, 0.47%)</title><rect x="602.2" y="595.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="605.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$ReplicationConfiguration.parse (49,615 samples, 0.45%)</title><rect x="602.3" y="579.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="605.3" y="590.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (4,538 samples, 0.04%)</title><rect x="602.7" y="563.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="605.7" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (4,389 samples, 0.04%)</title><rect x="602.7" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="605.7" y="558.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (42,082 samples, 0.38%)</title><rect x="603.1" y="563.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="606.1" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (22,020 samples, 0.20%)</title><rect x="603.7" y="547.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="606.7" y="558.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (21,263 samples, 0.19%)</title><rect x="603.8" y="531.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="606.8" y="542.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (21,263 samples, 0.19%)</title><rect x="603.8" y="515.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="606.8" y="526.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (21,263 samples, 0.19%)</title><rect x="603.8" y="499.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="606.8" y="510.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (21,258 samples, 0.19%)</title><rect x="603.8" y="483.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="606.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (21,258 samples, 0.19%)</title><rect x="603.8" y="467.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="606.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (21,258 samples, 0.19%)</title><rect x="603.8" y="451.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="606.8" y="462.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.next (7,054 samples, 0.06%)</title><rect x="606.1" y="547.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="609.1" y="558.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (3,057 samples, 0.03%)</title><rect x="606.5" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="609.5" y="542.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (2,461 samples, 0.02%)</title><rect x="606.5" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="609.5" y="526.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2,461 samples, 0.02%)</title><rect x="606.5" y="499.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="609.5" y="510.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (2,461 samples, 0.02%)</title><rect x="606.5" y="483.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="609.5" y="494.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (2,461 samples, 0.02%)</title><rect x="606.5" y="467.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="609.5" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (2,461 samples, 0.02%)</title><rect x="606.5" y="451.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.5" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,461 samples, 0.02%)</title><rect x="606.5" y="435.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.5" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (7,349 samples, 0.07%)</title><rect x="606.9" y="547.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="609.9" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (7,349 samples, 0.07%)</title><rect x="606.9" y="531.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="609.9" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (7,344 samples, 0.07%)</title><rect x="606.9" y="515.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.9" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (7,344 samples, 0.07%)</title><rect x="606.9" y="499.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="609.9" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7,344 samples, 0.07%)</title><rect x="606.9" y="483.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="609.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getValues (4,174,752 samples, 38.10%)</title><rect x="607.8" y="611.0" width="449.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="610.8" y="622.0">ru/mail/polis/s3ponia/AsyncServiceUtility.getValues</text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getFutures (3,951,620 samples, 36.07%)</title><rect x="608.9" y="595.0" width="425.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="611.9" y="606.0">ru/mail/polis/s3ponia/AsyncServiceUtility.getFutures</text>
</g>
<g>
<title>java/lang/String.equals (14,736 samples, 0.13%)</title><rect x="611.3" y="579.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="614.3" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4,124 samples, 0.04%)</title><rect x="612.9" y="579.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="615.9" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (37,803 samples, 0.35%)</title><rect x="613.3" y="579.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.3" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (22,271 samples, 0.20%)</title><rect x="617.4" y="579.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="620.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5,580 samples, 0.05%)</title><rect x="618.7" y="563.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="621.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3,498 samples, 0.03%)</title><rect x="618.9" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="621.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.proxy (4,328 samples, 0.04%)</title><rect x="619.3" y="563.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.proxy (3,849,583 samples, 35.13%)</title><rect x="619.8" y="579.0" width="414.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.8" y="590.0">ru/mail/polis/s3ponia/AsyncServiceUtility.proxy</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (15,438 samples, 0.14%)</title><rect x="619.9" y="563.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="622.9" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/665726928.invoke (15,438 samples, 0.14%)</title><rect x="619.9" y="547.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="622.9" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (15,208 samples, 0.14%)</title><rect x="619.9" y="531.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="622.9" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (14,031 samples, 0.13%)</title><rect x="620.0" y="515.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="623.0" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (13,893 samples, 0.13%)</title><rect x="620.0" y="499.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="623.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (41,449 samples, 0.38%)</title><rect x="621.5" y="563.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="624.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3,856 samples, 0.04%)</title><rect x="621.5" y="547.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (37,579 samples, 0.34%)</title><rect x="621.9" y="547.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="624.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (37,576 samples, 0.34%)</title><rect x="621.9" y="531.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.9" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (37,576 samples, 0.34%)</title><rect x="621.9" y="515.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="624.9" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (9,114 samples, 0.08%)</title><rect x="625.0" y="499.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="628.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,792,415 samples, 34.61%)</title><rect x="626.0" y="563.0" width="408.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="629.0" y="574.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,778,924 samples, 34.49%)</title><rect x="627.3" y="547.0" width="407.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="630.3" y="558.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (124,725 samples, 1.14%)</title><rect x="628.6" y="531.0" width="13.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="631.6" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (124,445 samples, 1.14%)</title><rect x="628.7" y="515.0" width="13.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="631.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (121,083 samples, 1.11%)</title><rect x="629.0" y="499.0" width="13.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="632.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (119,952 samples, 1.09%)</title><rect x="629.1" y="483.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.1" y="494.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (59,255 samples, 0.54%)</title><rect x="635.6" y="467.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.6" y="478.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (57,046 samples, 0.52%)</title><rect x="635.8" y="451.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.8" y="462.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (50,869 samples, 0.46%)</title><rect x="636.2" y="435.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.2" y="446.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (2,701 samples, 0.02%)</title><rect x="641.7" y="435.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="644.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (374,468 samples, 3.42%)</title><rect x="642.1" y="531.0" width="40.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="645.1" y="542.0">one..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (17,890 samples, 0.16%)</title><rect x="659.6" y="515.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="662.6" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (16,750 samples, 0.15%)</title><rect x="659.7" y="499.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="662.7" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (16,308 samples, 0.15%)</title><rect x="659.8" y="483.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="662.8" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (15,466 samples, 0.14%)</title><rect x="659.8" y="467.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="662.8" y="478.0"></text>
</g>
<g>
<title>/lib64/libc-2.30.so (6,655 samples, 0.06%)</title><rect x="659.9" y="451.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="662.9" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3,709 samples, 0.03%)</title><rect x="660.9" y="451.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="663.9" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (191,009 samples, 1.74%)</title><rect x="661.6" y="515.0" width="20.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="664.6" y="526.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (28,212 samples, 0.26%)</title><rect x="663.1" y="499.0" width="3.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="666.1" y="510.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (16,541 samples, 0.15%)</title><rect x="664.3" y="483.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="667.3" y="494.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3,093 samples, 0.03%)</title><rect x="665.1" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="668.1" y="478.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3,146 samples, 0.03%)</title><rect x="665.7" y="467.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="668.7" y="478.0"></text>
</g>
<g>
<title>__libc_recv (144,668 samples, 1.32%)</title><rect x="666.1" y="499.0" width="15.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="669.1" y="510.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (134,471 samples, 1.23%)</title><rect x="667.2" y="483.0" width="14.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="670.2" y="494.0"></text>
</g>
<g>
<title>do_syscall_64 (134,471 samples, 1.23%)</title><rect x="667.2" y="467.0" width="14.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="670.2" y="478.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (127,502 samples, 1.16%)</title><rect x="667.8" y="451.0" width="13.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="670.8" y="462.0"></text>
</g>
<g>
<title>__sys_recvfrom (126,476 samples, 1.15%)</title><rect x="667.9" y="435.0" width="13.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="670.9" y="446.0"></text>
</g>
<g>
<title>inet6_recvmsg?[ipv6] (113,001 samples, 1.03%)</title><rect x="668.4" y="419.0" width="12.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="671.4" y="430.0"></text>
</g>
<g>
<title>tcp_recvmsg (110,508 samples, 1.01%)</title><rect x="668.6" y="403.0" width="11.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="671.6" y="414.0"></text>
</g>
<g>
<title>__kfree_skb (4,392 samples, 0.04%)</title><rect x="669.7" y="387.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="672.7" y="398.0"></text>
</g>
<g>
<title>skb_release_all (3,413 samples, 0.03%)</title><rect x="669.7" y="371.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="672.7" y="382.0"></text>
</g>
<g>
<title>skb_release_head_state (3,398 samples, 0.03%)</title><rect x="669.7" y="355.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="672.7" y="366.0"></text>
</g>
<g>
<title>lock_sock_nested (4,138 samples, 0.04%)</title><rect x="670.4" y="387.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="673.4" y="398.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3,329 samples, 0.03%)</title><rect x="670.5" y="371.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="673.5" y="382.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (2,961 samples, 0.03%)</title><rect x="670.5" y="355.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="673.5" y="366.0"></text>
</g>
<g>
<title>sk_wait_data (66,423 samples, 0.61%)</title><rect x="671.0" y="387.0" width="7.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="674.0" y="398.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3,465 samples, 0.03%)</title><rect x="671.2" y="371.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="674.2" y="382.0"></text>
</g>
<g>
<title>lock_sock_nested (35,380 samples, 0.32%)</title><rect x="671.7" y="371.0" width="3.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="674.7" y="382.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (35,066 samples, 0.32%)</title><rect x="671.8" y="355.0" width="3.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="674.8" y="366.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (34,923 samples, 0.32%)</title><rect x="671.8" y="339.0" width="3.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="674.8" y="350.0"></text>
</g>
<g>
<title>wait_woken (21,911 samples, 0.20%)</title><rect x="675.8" y="371.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="678.8" y="382.0"></text>
</g>
<g>
<title>schedule_timeout (21,127 samples, 0.19%)</title><rect x="675.9" y="355.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="678.9" y="366.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (9,543 samples, 0.09%)</title><rect x="676.0" y="339.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="679.0" y="350.0"></text>
</g>
<g>
<title>schedule (8,682 samples, 0.08%)</title><rect x="677.2" y="339.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="680.2" y="350.0"></text>
</g>
<g>
<title>__schedule (7,326 samples, 0.07%)</title><rect x="677.4" y="323.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="680.4" y="334.0"></text>
</g>
<g>
<title>finish_task_switch (4,816 samples, 0.04%)</title><rect x="677.6" y="307.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="680.6" y="318.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (14,795 samples, 0.14%)</title><rect x="678.1" y="387.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="681.1" y="398.0"></text>
</g>
<g>
<title>__skb_datagram_iter (14,508 samples, 0.13%)</title><rect x="678.2" y="371.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="681.2" y="382.0"></text>
</g>
<g>
<title>_copy_to_iter (5,899 samples, 0.05%)</title><rect x="678.7" y="355.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="681.7" y="366.0"></text>
</g>
<g>
<title>copyout (5,254 samples, 0.05%)</title><rect x="678.8" y="339.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="681.8" y="350.0"></text>
</g>
<g>
<title>copy_user_generic_string (5,041 samples, 0.05%)</title><rect x="678.8" y="323.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="681.8" y="334.0"></text>
</g>
<g>
<title>simple_copy_to_iter (3,908 samples, 0.04%)</title><rect x="679.3" y="355.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="682.3" y="366.0"></text>
</g>
<g>
<title>__check_object_size (3,764 samples, 0.03%)</title><rect x="679.3" y="339.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="682.3" y="350.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3,063 samples, 0.03%)</title><rect x="679.7" y="387.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="682.7" y="398.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (4,412 samples, 0.04%)</title><rect x="680.1" y="387.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="683.1" y="398.0"></text>
</g>
<g>
<title>sock_recvmsg (4,594 samples, 0.04%)</title><rect x="680.5" y="419.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="683.5" y="430.0"></text>
</g>
<g>
<title>security_socket_recvmsg (3,865 samples, 0.04%)</title><rect x="680.6" y="403.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="683.6" y="414.0"></text>
</g>
<g>
<title>sock_has_perm (2,460 samples, 0.02%)</title><rect x="680.8" y="387.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="683.8" y="398.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4,692 samples, 0.04%)</title><rect x="681.0" y="419.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="684.0" y="430.0"></text>
</g>
<g>
<title>__fget_light (4,299 samples, 0.04%)</title><rect x="681.1" y="403.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="684.1" y="414.0"></text>
</g>
<g>
<title>__fget (3,068 samples, 0.03%)</title><rect x="681.2" y="387.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="684.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (451,375 samples, 4.12%)</title><rect x="682.4" y="531.0" width="48.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="685.4" y="542.0">one/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (10,930 samples, 0.10%)</title><rect x="685.6" y="515.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="688.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10,913 samples, 0.10%)</title><rect x="685.6" y="499.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="688.6" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10,913 samples, 0.10%)</title><rect x="685.6" y="483.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="688.6" y="494.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3,031 samples, 0.03%)</title><rect x="685.7" y="467.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.7" y="478.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (7,147 samples, 0.07%)</title><rect x="686.0" y="467.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="689.0" y="478.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6,716 samples, 0.06%)</title><rect x="686.1" y="451.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="689.1" y="462.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (5,571 samples, 0.05%)</title><rect x="686.2" y="435.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="689.2" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (53,237 samples, 0.49%)</title><rect x="687.0" y="515.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="690.0" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (40,845 samples, 0.37%)</title><rect x="688.3" y="499.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="691.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (21,176 samples, 0.19%)</title><rect x="688.9" y="483.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="691.9" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (14,146 samples, 0.13%)</title><rect x="691.2" y="483.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="694.2" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,975 samples, 0.04%)</title><rect x="692.2" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="695.2" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5,293 samples, 0.05%)</title><rect x="692.7" y="515.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="695.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (178,165 samples, 1.63%)</title><rect x="693.3" y="515.0" width="19.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="696.3" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (7,674 samples, 0.07%)</title><rect x="696.9" y="499.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="699.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (135,325 samples, 1.24%)</title><rect x="697.9" y="499.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (134,362 samples, 1.23%)</title><rect x="698.0" y="483.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="701.0" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2,481 samples, 0.02%)</title><rect x="712.2" y="467.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="715.2" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2,481 samples, 0.02%)</title><rect x="712.2" y="451.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="715.2" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2,481 samples, 0.02%)</title><rect x="712.2" y="435.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="715.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (31,018 samples, 0.28%)</title><rect x="712.5" y="515.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="715.5" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2,378 samples, 0.02%)</title><rect x="715.5" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="718.5" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (21,910 samples, 0.20%)</title><rect x="715.8" y="515.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="718.8" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,370 samples, 0.05%)</title><rect x="717.6" y="499.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="720.6" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (117,621 samples, 1.07%)</title><rect x="718.2" y="515.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="721.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (53,070 samples, 0.48%)</title><rect x="725.0" y="499.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="728.0" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (53,070 samples, 0.48%)</title><rect x="725.0" y="483.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="728.0" y="494.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2,969 samples, 0.03%)</title><rect x="729.7" y="467.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="732.7" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5,942 samples, 0.05%)</title><rect x="730.1" y="467.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="733.1" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (243,545 samples, 2.22%)</title><rect x="731.0" y="531.0" width="26.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="734.0" y="542.0">o..</text>
</g>
<g>
<title>java/lang/String.length (7,793 samples, 0.07%)</title><rect x="733.4" y="515.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.coder (7,706 samples, 0.07%)</title><rect x="733.4" y="499.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="736.4" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (24,685 samples, 0.23%)</title><rect x="734.2" y="515.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="737.2" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (165,961 samples, 1.51%)</title><rect x="736.9" y="515.0" width="17.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.9" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (30,152 samples, 0.28%)</title><rect x="740.3" y="499.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="743.3" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (7,657 samples, 0.07%)</title><rect x="742.7" y="483.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="745.7" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (23,508 samples, 0.21%)</title><rect x="743.6" y="499.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="746.6" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7,843 samples, 0.07%)</title><rect x="744.4" y="483.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="747.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (5,175 samples, 0.05%)</title><rect x="744.5" y="467.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="747.5" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4,966 samples, 0.05%)</title><rect x="745.6" y="483.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="748.6" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (79,562 samples, 0.73%)</title><rect x="746.1" y="499.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="749.1" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (77,068 samples, 0.70%)</title><rect x="746.4" y="483.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="749.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.length (7,339 samples, 0.07%)</title><rect x="746.7" y="467.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="749.7" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (67,068 samples, 0.61%)</title><rect x="747.5" y="467.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="750.5" y="478.0"></text>
</g>
<g>
<title>java/lang/String.length (40,664 samples, 0.37%)</title><rect x="750.2" y="451.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="753.2" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (22,659 samples, 0.21%)</title><rect x="754.8" y="515.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="757.8" y="526.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8,120 samples, 0.07%)</title><rect x="756.1" y="499.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="759.1" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (82,206 samples, 0.75%)</title><rect x="757.2" y="531.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="760.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (50,150 samples, 0.46%)</title><rect x="760.6" y="515.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="763.6" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (50,150 samples, 0.46%)</title><rect x="760.6" y="499.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="763.6" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6,494 samples, 0.06%)</title><rect x="765.3" y="483.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="768.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (360,351 samples, 3.29%)</title><rect x="766.1" y="531.0" width="38.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="769.1" y="542.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (7,781 samples, 0.07%)</title><rect x="767.7" y="515.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="770.7" y="526.0"></text>
</g>
<g>
<title>setsockopt (336,890 samples, 3.07%)</title><rect x="768.5" y="515.0" width="36.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="771.5" y="526.0">set..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (309,956 samples, 2.83%)</title><rect x="771.4" y="499.0" width="33.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="774.4" y="510.0">en..</text>
</g>
<g>
<title>do_syscall_64 (309,956 samples, 2.83%)</title><rect x="771.4" y="483.0" width="33.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="774.4" y="494.0">do..</text>
</g>
<g>
<title>__x64_sys_setsockopt (263,942 samples, 2.41%)</title><rect x="776.3" y="467.0" width="28.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="779.3" y="478.0">__..</text>
</g>
<g>
<title>__sys_setsockopt (258,357 samples, 2.36%)</title><rect x="776.9" y="451.0" width="27.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="779.9" y="462.0">_..</text>
</g>
<g>
<title>fput_many (24,932 samples, 0.23%)</title><rect x="778.2" y="435.0" width="2.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="781.2" y="446.0"></text>
</g>
<g>
<title>security_socket_setsockopt (41,633 samples, 0.38%)</title><rect x="780.9" y="435.0" width="4.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="783.9" y="446.0"></text>
</g>
<g>
<title>selinux_socket_setsockopt (37,502 samples, 0.34%)</title><rect x="781.3" y="419.0" width="4.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="784.3" y="430.0"></text>
</g>
<g>
<title>sock_has_perm (20,915 samples, 0.19%)</title><rect x="783.1" y="403.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="786.1" y="414.0"></text>
</g>
<g>
<title>sock_setsockopt (132,700 samples, 1.21%)</title><rect x="785.3" y="435.0" width="14.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="788.3" y="446.0"></text>
</g>
<g>
<title>__get_user_4 (12,752 samples, 0.12%)</title><rect x="786.4" y="419.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="789.4" y="430.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2,543 samples, 0.02%)</title><rect x="787.7" y="419.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="790.7" y="430.0"></text>
</g>
<g>
<title>lock_sock_nested (32,797 samples, 0.30%)</title><rect x="788.1" y="419.0" width="3.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="791.1" y="430.0"></text>
</g>
<g>
<title>_cond_resched (4,746 samples, 0.04%)</title><rect x="788.4" y="403.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="791.4" y="414.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (24,776 samples, 0.23%)</title><rect x="788.9" y="403.0" width="2.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="791.9" y="414.0"></text>
</g>
<g>
<title>release_sock (39,679 samples, 0.36%)</title><rect x="791.6" y="419.0" width="4.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="794.6" y="430.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2,346 samples, 0.02%)</title><rect x="793.8" y="403.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="796.8" y="414.0"></text>
</g>
<g>
<title>tcp_release_cb (16,585 samples, 0.15%)</title><rect x="794.1" y="403.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="797.1" y="414.0"></text>
</g>
<g>
<title>sock_set_timeout (35,042 samples, 0.32%)</title><rect x="795.9" y="419.0" width="3.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="798.9" y="430.0"></text>
</g>
<g>
<title>_copy_from_user (24,051 samples, 0.22%)</title><rect x="797.0" y="403.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="800.0" y="414.0"></text>
</g>
<g>
<title>copy_user_generic_string (21,971 samples, 0.20%)</title><rect x="797.3" y="387.0" width="2.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="800.3" y="398.0"></text>
</g>
<g>
<title>sockfd_lookup_light (47,374 samples, 0.43%)</title><rect x="799.6" y="435.0" width="5.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="802.6" y="446.0"></text>
</g>
<g>
<title>__fget_light (45,525 samples, 0.42%)</title><rect x="799.8" y="419.0" width="4.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="802.8" y="430.0"></text>
</g>
<g>
<title>__fget (39,422 samples, 0.36%)</title><rect x="800.5" y="403.0" width="4.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="803.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1,817,568 samples, 16.59%)</title><rect x="804.9" y="531.0" width="195.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="807.9" y="542.0">one/nio/net/NativeSocket...</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (39,865 samples, 0.36%)</title><rect x="806.6" y="515.0" width="4.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="809.6" y="526.0"></text>
</g>
<g>
<title>/lib64/libc-2.30.so (4,904 samples, 0.04%)</title><rect x="807.7" y="499.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="810.7" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3,209 samples, 0.03%)</title><rect x="808.3" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="811.3" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (18,753 samples, 0.17%)</title><rect x="808.8" y="499.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="811.8" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.221] (3,078 samples, 0.03%)</title><rect x="809.8" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="812.8" y="494.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6,479 samples, 0.06%)</title><rect x="810.1" y="483.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="813.1" y="494.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2,998 samples, 0.03%)</title><rect x="810.5" y="467.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="813.5" y="478.0"></text>
</g>
<g>
<title>__libc_send (1,755,255 samples, 16.02%)</title><rect x="810.9" y="515.0" width="189.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="813.9" y="526.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,732,479 samples, 15.81%)</title><rect x="813.4" y="499.0" width="186.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="816.4" y="510.0">entry_SYSCALL_64_after_h..</text>
</g>
<g>
<title>do_syscall_64 (1,732,479 samples, 15.81%)</title><rect x="813.4" y="483.0" width="186.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="816.4" y="494.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,711,057 samples, 15.62%)</title><rect x="815.2" y="467.0" width="184.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="818.2" y="478.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,705,917 samples, 15.57%)</title><rect x="815.7" y="451.0" width="183.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="818.7" y="462.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (3,564 samples, 0.03%)</title><rect x="816.8" y="435.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="819.8" y="446.0"></text>
</g>
<g>
<title>sock_sendmsg (1,683,498 samples, 15.37%)</title><rect x="817.4" y="435.0" width="181.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="820.4" y="446.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg?[ipv6] (6,021 samples, 0.05%)</title><rect x="818.3" y="419.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="821.3" y="430.0"></text>
</g>
<g>
<title>security_socket_sendmsg (10,151 samples, 0.09%)</title><rect x="818.9" y="419.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="821.9" y="430.0"></text>
</g>
<g>
<title>sock_has_perm (4,374 samples, 0.04%)</title><rect x="819.5" y="403.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="822.5" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg (1,659,007 samples, 15.14%)</title><rect x="820.0" y="419.0" width="178.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="823.0" y="430.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (2,628 samples, 0.02%)</title><rect x="820.5" y="403.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="823.5" y="414.0"></text>
</g>
<g>
<title>release_sock (7,816 samples, 0.07%)</title><rect x="820.8" y="403.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="823.8" y="414.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2,518 samples, 0.02%)</title><rect x="821.1" y="387.0" width="0.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="824.1" y="398.0"></text>
</g>
<g>
<title>tcp_release_cb (2,335 samples, 0.02%)</title><rect x="821.3" y="387.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="824.3" y="398.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,644,193 samples, 15.01%)</title><rect x="821.6" y="403.0" width="177.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="824.6" y="414.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (11,200 samples, 0.10%)</title><rect x="827.6" y="387.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="830.6" y="398.0"></text>
</g>
<g>
<title>__virt_addr_valid (6,615 samples, 0.06%)</title><rect x="828.0" y="371.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="831.0" y="382.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (1,335,031 samples, 12.18%)</title><rect x="828.8" y="387.0" width="143.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="831.8" y="398.0">__tcp_push_pending..</text>
</g>
<g>
<title>tcp_write_xmit (1,331,932 samples, 12.16%)</title><rect x="829.1" y="371.0" width="143.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="832.1" y="382.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (1,234,667 samples, 11.27%)</title><rect x="832.1" y="355.0" width="133.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="835.1" y="366.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (1,152,560 samples, 10.52%)</title><rect x="835.8" y="339.0" width="124.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="838.8" y="350.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (8,150 samples, 0.07%)</title><rect x="837.1" y="323.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="840.1" y="334.0"></text>
</g>
<g>
<title>ipv4_dst_check (5,882 samples, 0.05%)</title><rect x="837.4" y="307.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="840.4" y="318.0"></text>
</g>
<g>
<title>ip_local_out (28,635 samples, 0.26%)</title><rect x="838.1" y="323.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="841.1" y="334.0"></text>
</g>
<g>
<title>__ip_local_out (27,649 samples, 0.25%)</title><rect x="838.2" y="307.0" width="3.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="841.2" y="318.0"></text>
</g>
<g>
<title>ip_send_check (17,487 samples, 0.16%)</title><rect x="838.6" y="291.0" width="1.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="841.6" y="302.0"></text>
</g>
<g>
<title>nf_hook_slow (6,232 samples, 0.06%)</title><rect x="840.5" y="291.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="843.5" y="302.0"></text>
</g>
<g>
<title>selinux_ipv4_output (4,259 samples, 0.04%)</title><rect x="840.7" y="275.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="843.7" y="286.0"></text>
</g>
<g>
<title>netlbl_enabled (2,343 samples, 0.02%)</title><rect x="840.9" y="259.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="843.9" y="270.0"></text>
</g>
<g>
<title>ip_output (1,102,963 samples, 10.07%)</title><rect x="841.2" y="323.0" width="118.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="844.2" y="334.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (5,218 samples, 0.05%)</title><rect x="842.2" y="307.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="845.2" y="318.0"></text>
</g>
<g>
<title>ipv4_mtu (2,414 samples, 0.02%)</title><rect x="842.5" y="291.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="845.5" y="302.0"></text>
</g>
<g>
<title>ip_finish_output2 (1,064,486 samples, 9.72%)</title><rect x="842.7" y="307.0" width="114.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="845.7" y="318.0">ip_finish_outp..</text>
</g>
<g>
<title>__dev_queue_xmit (56,460 samples, 0.52%)</title><rect x="845.3" y="291.0" width="6.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="848.3" y="302.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (30,729 samples, 0.28%)</title><rect x="846.7" y="275.0" width="3.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="849.7" y="286.0"></text>
</g>
<g>
<title>loopback_xmit (26,327 samples, 0.24%)</title><rect x="847.1" y="259.0" width="2.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="850.1" y="270.0"></text>
</g>
<g>
<title>eth_type_trans (3,875 samples, 0.04%)</title><rect x="847.7" y="243.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="850.7" y="254.0"></text>
</g>
<g>
<title>netif_rx (12,465 samples, 0.11%)</title><rect x="848.1" y="243.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="851.1" y="254.0"></text>
</g>
<g>
<title>netif_rx_internal (12,058 samples, 0.11%)</title><rect x="848.2" y="227.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="851.2" y="238.0"></text>
</g>
<g>
<title>enqueue_to_backlog (11,237 samples, 0.10%)</title><rect x="848.3" y="211.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="851.3" y="222.0"></text>
</g>
<g>
<title>tcp_wfree (2,775 samples, 0.03%)</title><rect x="849.7" y="243.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="852.7" y="254.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (2,586 samples, 0.02%)</title><rect x="850.0" y="275.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="853.0" y="286.0"></text>
</g>
<g>
<title>validate_xmit_skb (9,117 samples, 0.08%)</title><rect x="850.3" y="275.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="853.3" y="286.0"></text>
</g>
<g>
<title>netif_skb_features (5,531 samples, 0.05%)</title><rect x="850.6" y="259.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="853.6" y="270.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (983,930 samples, 8.98%)</title><rect x="851.4" y="291.0" width="105.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="854.4" y="302.0">__local_bh_en..</text>
</g>
<g>
<title>do_softirq.part.0 (980,113 samples, 8.95%)</title><rect x="851.8" y="275.0" width="105.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="854.8" y="286.0">do_softirq.pa..</text>
</g>
<g>
<title>do_softirq_own_stack (960,435 samples, 8.77%)</title><rect x="853.9" y="259.0" width="103.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="856.9" y="270.0">do_softirq_o..</text>
</g>
<g>
<title>__softirqentry_text_start (960,435 samples, 8.77%)</title><rect x="853.9" y="243.0" width="103.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="856.9" y="254.0">__softirqent..</text>
</g>
<g>
<title>net_rx_action (939,786 samples, 8.58%)</title><rect x="856.1" y="227.0" width="101.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="859.1" y="238.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (5,719 samples, 0.05%)</title><rect x="857.4" y="211.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="860.4" y="222.0"></text>
</g>
<g>
<title>process_backlog (921,230 samples, 8.41%)</title><rect x="858.1" y="211.0" width="99.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="861.1" y="222.0">process_back..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (906,711 samples, 8.28%)</title><rect x="859.7" y="195.0" width="97.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="862.7" y="206.0">__netif_rec..</text>
</g>
<g>
<title>__netif_receive_skb_core (13,183 samples, 0.12%)</title><rect x="860.3" y="179.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="863.3" y="190.0"></text>
</g>
<g>
<title>ip_rcv (887,673 samples, 8.10%)</title><rect x="861.7" y="179.0" width="95.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="864.7" y="190.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (873,472 samples, 7.97%)</title><rect x="862.3" y="163.0" width="94.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="865.3" y="174.0">ip_local_de..</text>
</g>
<g>
<title>ip_local_deliver_finish (866,751 samples, 7.91%)</title><rect x="863.0" y="147.0" width="93.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="866.0" y="158.0">ip_local_de..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (864,100 samples, 7.89%)</title><rect x="863.3" y="131.0" width="93.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="866.3" y="142.0">ip_protocol..</text>
</g>
<g>
<title>raw_local_deliver (3,022 samples, 0.03%)</title><rect x="864.7" y="115.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="867.7" y="126.0"></text>
</g>
<g>
<title>tcp_v4_rcv (847,550 samples, 7.74%)</title><rect x="865.0" y="115.0" width="91.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="868.0" y="126.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (22,188 samples, 0.20%)</title><rect x="868.8" y="99.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="871.8" y="110.0"></text>
</g>
<g>
<title>inet_ehashfn (2,584 samples, 0.02%)</title><rect x="870.9" y="83.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="873.9" y="94.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (25,182 samples, 0.23%)</title><rect x="871.2" y="99.0" width="2.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="874.2" y="110.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (24,230 samples, 0.22%)</title><rect x="871.3" y="83.0" width="2.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="874.3" y="94.0"></text>
</g>
<g>
<title>selinux_socket_sock_rcv_skb (21,628 samples, 0.20%)</title><rect x="871.6" y="67.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="874.6" y="78.0"></text>
</g>
<g>
<title>selinux_sock_rcv_skb_compat (13,105 samples, 0.12%)</title><rect x="872.5" y="51.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="875.5" y="62.0"></text>
</g>
<g>
<title>avc_has_perm (3,266 samples, 0.03%)</title><rect x="872.8" y="35.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="875.8" y="46.0"></text>
</g>
<g>
<title>selinux_netlbl_sock_rcv_skb (3,412 samples, 0.03%)</title><rect x="873.2" y="35.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="876.2" y="46.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.0 (3,381 samples, 0.03%)</title><rect x="873.6" y="35.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="876.6" y="46.0"></text>
</g>
<g>
<title>sock_put (2,781 samples, 0.03%)</title><rect x="874.0" y="99.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="877.0" y="110.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (758,143 samples, 6.92%)</title><rect x="874.3" y="99.0" width="81.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="877.3" y="110.0">tcp_v4_do..</text>
</g>
<g>
<title>ipv4_dst_check (2,360 samples, 0.02%)</title><rect x="874.7" y="83.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="877.7" y="94.0"></text>
</g>
<g>
<title>tcp_rcv_established (752,072 samples, 6.86%)</title><rect x="874.9" y="83.0" width="81.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="877.9" y="94.0">tcp_rcv_e..</text>
</g>
<g>
<title>sk_reset_timer (6,885 samples, 0.06%)</title><rect x="877.6" y="67.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="880.6" y="78.0"></text>
</g>
<g>
<title>mod_timer (6,045 samples, 0.06%)</title><rect x="877.7" y="51.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="880.7" y="62.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3,219 samples, 0.03%)</title><rect x="877.9" y="35.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="880.9" y="46.0"></text>
</g>
<g>
<title>sock_def_readable (488,882 samples, 4.46%)</title><rect x="878.4" y="67.0" width="52.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="881.4" y="78.0">sock_..</text>
</g>
<g>
<title>__wake_up_common_lock (473,868 samples, 4.32%)</title><rect x="879.9" y="51.0" width="51.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="882.9" y="62.0">__wak..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (470,833 samples, 4.30%)</title><rect x="880.2" y="35.0" width="50.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="883.2" y="46.0">_raw_..</text>
</g>
<g>
<title>tcp_ack (190,864 samples, 1.74%)</title><rect x="931.0" y="67.0" width="20.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="934.0" y="78.0"></text>
</g>
<g>
<title>__kfree_skb (68,933 samples, 0.63%)</title><rect x="936.4" y="51.0" width="7.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="939.4" y="62.0"></text>
</g>
<g>
<title>__slab_free (17,071 samples, 0.16%)</title><rect x="936.4" y="35.0" width="1.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="939.4" y="46.0"></text>
</g>
<g>
<title>kfree (9,843 samples, 0.09%)</title><rect x="938.2" y="35.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="941.2" y="46.0"></text>
</g>
<g>
<title>skb_release_data (40,746 samples, 0.37%)</title><rect x="939.4" y="35.0" width="4.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="942.4" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (13,144 samples, 0.12%)</title><rect x="943.9" y="51.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="946.9" y="62.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2,611 samples, 0.02%)</title><rect x="945.3" y="51.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="948.3" y="62.0"></text>
</g>
<g>
<title>kfree_skbmem (3,188 samples, 0.03%)</title><rect x="945.6" y="51.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="948.6" y="62.0"></text>
</g>
<g>
<title>kmem_cache_free (18,339 samples, 0.17%)</title><rect x="945.9" y="51.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="948.9" y="62.0"></text>
</g>
<g>
<title>__slab_free (7,292 samples, 0.07%)</title><rect x="947.1" y="35.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="950.1" y="46.0"></text>
</g>
<g>
<title>rb_first (7,761 samples, 0.07%)</title><rect x="947.9" y="51.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="950.9" y="62.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (7,859 samples, 0.07%)</title><rect x="948.8" y="51.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="951.8" y="62.0"></text>
</g>
<g>
<title>tcp_newly_delivered (2,917 samples, 0.03%)</title><rect x="949.7" y="51.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="952.7" y="62.0"></text>
</g>
<g>
<title>tcp_rate_gen (2,524 samples, 0.02%)</title><rect x="950.2" y="51.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="953.2" y="62.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (5,972 samples, 0.05%)</title><rect x="950.9" y="51.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="953.9" y="62.0"></text>
</g>
<g>
<title>tcp_check_space (7,001 samples, 0.06%)</title><rect x="951.6" y="67.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="954.6" y="78.0"></text>
</g>
<g>
<title>tcp_event_data_recv (7,982 samples, 0.07%)</title><rect x="952.5" y="67.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="955.5" y="78.0"></text>
</g>
<g>
<title>tcp_grow_window.isra.0 (5,343 samples, 0.05%)</title><rect x="953.3" y="67.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="956.3" y="78.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (13,123 samples, 0.12%)</title><rect x="953.9" y="67.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="956.9" y="78.0"></text>
</g>
<g>
<title>ktime_get (7,842 samples, 0.07%)</title><rect x="954.5" y="51.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="957.5" y="62.0"></text>
</g>
<g>
<title>read_tsc (5,505 samples, 0.05%)</title><rect x="954.7" y="35.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="957.7" y="46.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3,192 samples, 0.03%)</title><rect x="955.3" y="67.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="958.3" y="78.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4,263 samples, 0.04%)</title><rect x="956.3" y="163.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="959.3" y="174.0"></text>
</g>
<g>
<title>ip_rcv_finish (5,173 samples, 0.05%)</title><rect x="956.8" y="163.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="959.8" y="174.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (3,906 samples, 0.04%)</title><rect x="956.9" y="147.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="959.9" y="158.0"></text>
</g>
<g>
<title>nf_hook_slow (23,480 samples, 0.21%)</title><rect x="957.4" y="307.0" width="2.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="960.4" y="318.0"></text>
</g>
<g>
<title>selinux_ip_postroute (21,042 samples, 0.19%)</title><rect x="957.5" y="291.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="960.5" y="302.0"></text>
</g>
<g>
<title>selinux_ip_postroute_compat (17,196 samples, 0.16%)</title><rect x="957.9" y="275.0" width="1.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="960.9" y="286.0"></text>
</g>
<g>
<title>avc_has_perm (7,365 samples, 0.07%)</title><rect x="958.4" y="259.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="961.4" y="270.0"></text>
</g>
<g>
<title>selinux_parse_skb.constprop.0 (4,151 samples, 0.04%)</title><rect x="959.2" y="259.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="962.2" y="270.0"></text>
</g>
<g>
<title>__skb_clone (21,059 samples, 0.19%)</title><rect x="960.0" y="339.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="963.0" y="350.0"></text>
</g>
<g>
<title>__copy_skb_header (3,712 samples, 0.03%)</title><rect x="961.8" y="323.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="964.8" y="334.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3,525 samples, 0.03%)</title><rect x="962.6" y="339.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="965.6" y="350.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (4,111 samples, 0.04%)</title><rect x="963.8" y="339.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="966.8" y="350.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (6,160 samples, 0.06%)</title><rect x="964.2" y="339.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="967.2" y="350.0"></text>
</g>
<g>
<title>ktime_get (10,876 samples, 0.10%)</title><rect x="965.1" y="355.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="968.1" y="366.0"></text>
</g>
<g>
<title>read_tsc (7,944 samples, 0.07%)</title><rect x="965.4" y="339.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="968.4" y="350.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (43,439 samples, 0.40%)</title><rect x="966.3" y="355.0" width="4.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="969.3" y="366.0"></text>
</g>
<g>
<title>sk_reset_timer (16,718 samples, 0.15%)</title><rect x="967.7" y="339.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="970.7" y="350.0"></text>
</g>
<g>
<title>mod_timer (16,298 samples, 0.15%)</title><rect x="967.7" y="323.0" width="1.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="970.7" y="334.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2,408 samples, 0.02%)</title><rect x="969.2" y="307.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="972.2" y="318.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (9,615 samples, 0.09%)</title><rect x="969.5" y="339.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="972.5" y="350.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4,244 samples, 0.04%)</title><rect x="970.5" y="339.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="973.5" y="350.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (13,202 samples, 0.12%)</title><rect x="971.0" y="355.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="974.0" y="366.0"></text>
</g>
<g>
<title>_copy_from_iter_full (43,539 samples, 0.40%)</title><rect x="972.6" y="387.0" width="4.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="975.6" y="398.0"></text>
</g>
<g>
<title>copyin (18,625 samples, 0.17%)</title><rect x="973.0" y="371.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="976.0" y="382.0"></text>
</g>
<g>
<title>copy_user_generic_string (18,047 samples, 0.16%)</title><rect x="973.0" y="355.0" width="2.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="976.0" y="366.0"></text>
</g>
<g>
<title>iov_iter_advance (21,024 samples, 0.19%)</title><rect x="975.0" y="371.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="978.0" y="382.0"></text>
</g>
<g>
<title>sk_page_frag_refill (15,466 samples, 0.14%)</title><rect x="977.3" y="387.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="980.3" y="398.0"></text>
</g>
<g>
<title>skb_page_frag_refill (14,758 samples, 0.13%)</title><rect x="977.3" y="371.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="980.3" y="382.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (90,599 samples, 0.83%)</title><rect x="978.9" y="387.0" width="9.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="981.9" y="398.0"></text>
</g>
<g>
<title>__alloc_skb (72,533 samples, 0.66%)</title><rect x="980.8" y="371.0" width="7.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="983.8" y="382.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (22,757 samples, 0.21%)</title><rect x="983.0" y="355.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="986.0" y="366.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (22,204 samples, 0.20%)</title><rect x="983.0" y="339.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="986.0" y="350.0"></text>
</g>
<g>
<title>__slab_alloc (2,687 samples, 0.02%)</title><rect x="984.8" y="323.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="987.8" y="334.0"></text>
</g>
<g>
<title>kmalloc_slab (2,648 samples, 0.02%)</title><rect x="985.1" y="323.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="988.1" y="334.0"></text>
</g>
<g>
<title>__ksize (11,075 samples, 0.10%)</title><rect x="985.4" y="355.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="988.4" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (18,165 samples, 0.17%)</title><rect x="986.6" y="355.0" width="2.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="989.6" y="366.0"></text>
</g>
<g>
<title>skb_entail (18,000 samples, 0.16%)</title><rect x="988.7" y="387.0" width="1.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="991.7" y="398.0"></text>
</g>
<g>
<title>tcp_chrono_start (4,734 samples, 0.04%)</title><rect x="990.1" y="371.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="993.1" y="382.0"></text>
</g>
<g>
<title>tcp_push (2,933 samples, 0.03%)</title><rect x="990.7" y="387.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="993.7" y="398.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (22,558 samples, 0.21%)</title><rect x="991.0" y="387.0" width="2.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="994.0" y="398.0"></text>
</g>
<g>
<title>tcp_send_mss (41,739 samples, 0.38%)</title><rect x="993.5" y="387.0" width="4.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="996.5" y="398.0"></text>
</g>
<g>
<title>tcp_current_mss (38,653 samples, 0.35%)</title><rect x="993.8" y="371.0" width="4.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="996.8" y="382.0"></text>
</g>
<g>
<title>ipv4_mtu (16,039 samples, 0.15%)</title><rect x="996.1" y="355.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="999.1" y="366.0"></text>
</g>
<g>
<title>tcp_stream_memory_free?[ipv6] (4,548 samples, 0.04%)</title><rect x="998.0" y="387.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1001.0" y="398.0"></text>
</g>
<g>
<title>sockfd_lookup_light (7,020 samples, 0.06%)</title><rect x="998.7" y="435.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1001.7" y="446.0"></text>
</g>
<g>
<title>__fget_light (5,797 samples, 0.05%)</title><rect x="998.8" y="419.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1001.8" y="430.0"></text>
</g>
<g>
<title>__fget (4,019 samples, 0.04%)</title><rect x="999.0" y="403.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1002.0" y="414.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4,644 samples, 0.04%)</title><rect x="999.4" y="467.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1002.4" y="478.0"></text>
</g>
<g>
<title>schedule (3,768 samples, 0.03%)</title><rect x="999.5" y="451.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1002.5" y="462.0"></text>
</g>
<g>
<title>__schedule (3,325 samples, 0.03%)</title><rect x="999.6" y="435.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1002.6" y="446.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (168,049 samples, 1.53%)</title><rect x="1000.6" y="531.0" width="18.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1003.6" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (68,265 samples, 0.62%)</title><rect x="1004.8" y="515.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1007.8" y="526.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (67,007 samples, 0.61%)</title><rect x="1005.0" y="499.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.0" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (64,878 samples, 0.59%)</title><rect x="1005.1" y="483.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1008.1" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.72] (59,953 samples, 0.55%)</title><rect x="1005.3" y="467.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1008.3" y="478.0"></text>
</g>
<g>
<title>SpinPause (3,471 samples, 0.03%)</title><rect x="1011.7" y="467.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1014.7" y="478.0"></text>
</g>
<g>
<title>java/lang/Object.wait (2,876 samples, 0.03%)</title><rect x="1012.2" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1015.2" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (44,660 samples, 0.41%)</title><rect x="1012.5" y="515.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1015.5" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (44,254 samples, 0.40%)</title><rect x="1012.5" y="499.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1015.5" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (4,724 samples, 0.04%)</title><rect x="1016.5" y="483.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1019.5" y="494.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (9,817 samples, 0.09%)</title><rect x="1017.7" y="515.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1020.7" y="526.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (144,600 samples, 1.32%)</title><rect x="1018.7" y="531.0" width="15.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1021.7" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (63,246 samples, 0.58%)</title><rect x="1026.8" y="515.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.8" y="526.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (61,474 samples, 0.56%)</title><rect x="1027.0" y="499.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.0" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (58,456 samples, 0.53%)</title><rect x="1027.3" y="483.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.3" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.72] (51,893 samples, 0.47%)</title><rect x="1027.5" y="467.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.5" y="478.0"></text>
</g>
<g>
<title>SpinPause (4,704 samples, 0.04%)</title><rect x="1033.1" y="467.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1036.1" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (2,408 samples, 0.02%)</title><rect x="1034.0" y="515.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1037.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.getValuesFromFutures (212,680 samples, 1.94%)</title><rect x="1034.5" y="595.0" width="22.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1037.5" y="606.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5,213 samples, 0.05%)</title><rect x="1036.8" y="579.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1039.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5,128 samples, 0.05%)</title><rect x="1036.8" y="563.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1039.8" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4,902 samples, 0.04%)</title><rect x="1036.9" y="547.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1039.9" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4,889 samples, 0.04%)</title><rect x="1036.9" y="531.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1039.9" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4,887 samples, 0.04%)</title><rect x="1036.9" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.9" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2,985 samples, 0.03%)</title><rect x="1036.9" y="499.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1039.9" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (3,290 samples, 0.03%)</title><rect x="1037.4" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1040.4" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7,358 samples, 0.07%)</title><rect x="1037.7" y="579.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1040.7" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (13,613 samples, 0.12%)</title><rect x="1038.5" y="579.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1041.5" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (8,918 samples, 0.08%)</title><rect x="1039.0" y="563.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1042.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (33,082 samples, 0.30%)</title><rect x="1040.0" y="579.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1043.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.charAt (32,167 samples, 0.29%)</title><rect x="1040.1" y="563.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1043.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (21,068 samples, 0.19%)</title><rect x="1041.2" y="547.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1044.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.getDeadFlagTimeStamp (127,564 samples, 1.16%)</title><rect x="1043.6" y="579.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1046.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (21,163 samples, 0.19%)</title><rect x="1043.6" y="563.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1046.6" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (21,020 samples, 0.19%)</title><rect x="1043.6" y="547.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1046.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5,307 samples, 0.05%)</title><rect x="1045.2" y="531.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1048.2" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (4,933 samples, 0.05%)</title><rect x="1045.2" y="515.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1048.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$Header.getHeader (106,268 samples, 0.97%)</title><rect x="1045.9" y="563.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1048.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$Header.getHeader (105,926 samples, 0.97%)</title><rect x="1045.9" y="547.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1048.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (55,644 samples, 0.51%)</title><rect x="1046.5" y="531.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1049.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (55,644 samples, 0.51%)</title><rect x="1046.5" y="515.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1049.5" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (55,644 samples, 0.51%)</title><rect x="1046.5" y="499.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1049.5" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7,418 samples, 0.07%)</title><rect x="1051.6" y="483.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1054.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (45,059 samples, 0.41%)</title><rect x="1052.5" y="531.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1055.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (45,059 samples, 0.41%)</title><rect x="1052.5" y="515.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1055.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.byteBufferFromString (40,875 samples, 0.37%)</title><rect x="1057.4" y="611.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1060.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (15,414 samples, 0.14%)</title><rect x="1057.4" y="595.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1060.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (15,070 samples, 0.14%)</title><rect x="1057.4" y="579.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1060.4" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (15,046 samples, 0.14%)</title><rect x="1057.4" y="563.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1060.4" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15,031 samples, 0.14%)</title><rect x="1057.4" y="547.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1060.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (25,373 samples, 0.23%)</title><rect x="1059.0" y="595.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1062.0" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (24,912 samples, 0.23%)</title><rect x="1059.1" y="579.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1062.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (20,120 samples, 0.18%)</title><rect x="1059.6" y="563.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1062.6" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (19,928 samples, 0.18%)</title><rect x="1059.6" y="547.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1062.6" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (13,191 samples, 0.12%)</title><rect x="1060.3" y="531.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1063.3" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9,326 samples, 0.09%)</title><rect x="1060.7" y="515.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1063.7" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8,225 samples, 0.08%)</title><rect x="1060.8" y="499.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1063.8" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3,262 samples, 0.03%)</title><rect x="1061.3" y="483.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1064.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.valueResponseComparator (8,768 samples, 0.08%)</title><rect x="1061.9" y="611.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1064.9" y="622.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (5,419 samples, 0.05%)</title><rect x="1062.0" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1065.0" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4,900 samples, 0.04%)</title><rect x="1062.0" y="579.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1065.0" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4,839 samples, 0.04%)</title><rect x="1062.0" y="563.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1065.0" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$194/20631510.get$Lambda (4,837 samples, 0.04%)</title><rect x="1062.0" y="547.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1065.0" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$194/20631510.&lt;init&gt; (4,670 samples, 0.04%)</title><rect x="1062.0" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1065.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3,215 samples, 0.03%)</title><rect x="1062.2" y="515.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1065.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNodeReplicas (18,612 samples, 0.17%)</title><rect x="1062.8" y="611.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1065.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNodeReplicas (18,369 samples, 0.17%)</title><rect x="1062.9" y="595.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1065.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceFactory$$Lambda$23/513700442.apply (17,177 samples, 0.16%)</title><rect x="1063.0" y="579.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1066.0" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (2,593 samples, 0.02%)</title><rect x="1063.0" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1066.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (14,509 samples, 0.13%)</title><rect x="1063.3" y="563.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1066.3" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (12,269 samples, 0.11%)</title><rect x="1064.9" y="643.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1067.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (30,085 samples, 0.27%)</title><rect x="1066.2" y="643.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1069.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (29,386 samples, 0.27%)</title><rect x="1066.3" y="627.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1069.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (16,348 samples, 0.15%)</title><rect x="1066.3" y="611.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1069.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.equals (10,393 samples, 0.09%)</title><rect x="1066.9" y="595.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1069.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (12,942 samples, 0.12%)</title><rect x="1068.0" y="611.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1071.0" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (11,810 samples, 0.11%)</title><rect x="1068.2" y="595.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1071.2" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4,370 samples, 0.04%)</title><rect x="1069.0" y="579.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1072.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4,630 samples, 0.04%)</title><rect x="1069.5" y="643.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1072.5" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (3,994 samples, 0.04%)</title><rect x="1069.5" y="627.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1072.5" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,583 samples, 0.03%)</title><rect x="1069.6" y="611.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1072.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (189,738 samples, 1.73%)</title><rect x="1070.0" y="675.0" width="20.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1073.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (16,579 samples, 0.15%)</title><rect x="1073.8" y="659.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1076.8" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4,334 samples, 0.04%)</title><rect x="1073.8" y="643.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.8" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (3,530 samples, 0.03%)</title><rect x="1073.9" y="627.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2,933 samples, 0.03%)</title><rect x="1073.9" y="611.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1076.9" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2,708 samples, 0.02%)</title><rect x="1073.9" y="595.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1076.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11,472 samples, 0.10%)</title><rect x="1074.3" y="643.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1077.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11,472 samples, 0.10%)</title><rect x="1074.3" y="627.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1077.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7,906 samples, 0.07%)</title><rect x="1074.7" y="611.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1077.7" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (88,523 samples, 0.81%)</title><rect x="1075.6" y="659.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1078.6" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (88,236 samples, 0.81%)</title><rect x="1075.6" y="643.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1078.6" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4,719 samples, 0.04%)</title><rect x="1084.1" y="627.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.1" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4,275 samples, 0.04%)</title><rect x="1084.1" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1087.1" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4,118 samples, 0.04%)</title><rect x="1084.2" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.2" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3,884 samples, 0.04%)</title><rect x="1084.2" y="579.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,553 samples, 0.02%)</title><rect x="1084.8" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1087.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,553 samples, 0.02%)</title><rect x="1084.8" y="611.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1087.8" y="622.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,553 samples, 0.02%)</title><rect x="1084.8" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1087.8" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (49,828 samples, 0.45%)</title><rect x="1085.1" y="659.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1088.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6,174 samples, 0.06%)</title><rect x="1089.3" y="643.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1092.3" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,144 samples, 0.04%)</title><rect x="1090.0" y="643.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1093.0" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (6,929 samples, 0.06%)</title><rect x="1090.5" y="675.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1093.5" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,025 samples, 0.04%)</title><rect x="1090.8" y="659.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1093.8" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (34,710 samples, 0.32%)</title><rect x="1091.3" y="675.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1094.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11,308 samples, 0.10%)</title><rect x="1093.8" y="659.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1096.8" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11,308 samples, 0.10%)</title><rect x="1093.8" y="643.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1096.8" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (115,923 samples, 1.06%)</title><rect x="1095.0" y="675.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1098.0" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (114,316 samples, 1.04%)</title><rect x="1095.2" y="659.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1098.2" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (8,101 samples, 0.07%)</title><rect x="1105.6" y="643.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.6" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7,304 samples, 0.07%)</title><rect x="1105.7" y="627.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6,988 samples, 0.06%)</title><rect x="1105.7" y="611.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.7" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6,605 samples, 0.06%)</title><rect x="1105.7" y="595.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.7" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3,369 samples, 0.03%)</title><rect x="1105.9" y="579.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.9" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2,528 samples, 0.02%)</title><rect x="1106.5" y="643.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.5" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5,604 samples, 0.05%)</title><rect x="1106.9" y="643.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1109.9" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5,604 samples, 0.05%)</title><rect x="1106.9" y="627.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1109.9" y="638.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (5,604 samples, 0.05%)</title><rect x="1106.9" y="611.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1109.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4,922 samples, 0.04%)</title><rect x="1106.9" y="595.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.9" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4,398 samples, 0.04%)</title><rect x="1106.9" y="579.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.9" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4,181 samples, 0.04%)</title><rect x="1107.0" y="563.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.0" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3,872 samples, 0.04%)</title><rect x="1107.0" y="547.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.0" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (555,517 samples, 5.07%)</title><rect x="1107.6" y="691.0" width="59.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1110.6" y="702.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (551,163 samples, 5.03%)</title><rect x="1108.0" y="675.0" width="59.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1111.0" y="686.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (76,746 samples, 0.70%)</title><rect x="1109.3" y="659.0" width="8.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1112.3" y="670.0"></text>
</g>
<g>
<title>/lib64/libc-2.30.so (8,013 samples, 0.07%)</title><rect x="1110.2" y="643.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1113.2" y="654.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6,145 samples, 0.06%)</title><rect x="1111.0" y="643.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.0" y="654.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (48,866 samples, 0.45%)</title><rect x="1112.2" y="643.0" width="5.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1115.2" y="654.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (6,351 samples, 0.06%)</title><rect x="1113.3" y="627.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.3" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.221] (9,039 samples, 0.08%)</title><rect x="1114.2" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.2" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (20,787 samples, 0.19%)</title><rect x="1115.2" y="627.0" width="2.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1118.2" y="638.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (10,224 samples, 0.09%)</title><rect x="1116.3" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.3" y="622.0"></text>
</g>
<g>
<title>__libc_recv (452,137 samples, 4.13%)</title><rect x="1117.6" y="659.0" width="48.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1120.6" y="670.0">__li..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (436,704 samples, 3.99%)</title><rect x="1119.3" y="643.0" width="47.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1122.3" y="654.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (436,704 samples, 3.99%)</title><rect x="1119.3" y="627.0" width="47.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1122.3" y="638.0">do_s..</text>
</g>
<g>
<title>__x64_sys_recvfrom (430,113 samples, 3.93%)</title><rect x="1120.0" y="611.0" width="46.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1123.0" y="622.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (428,862 samples, 3.91%)</title><rect x="1120.1" y="595.0" width="46.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1123.1" y="606.0">__sy..</text>
</g>
<g>
<title>fput_many (2,831 samples, 0.03%)</title><rect x="1120.6" y="579.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1123.6" y="590.0"></text>
</g>
<g>
<title>inet6_recvmsg?[ipv6] (409,258 samples, 3.74%)</title><rect x="1121.0" y="579.0" width="44.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1124.0" y="590.0">inet..</text>
</g>
<g>
<title>tcp_recvmsg (406,267 samples, 3.71%)</title><rect x="1121.3" y="563.0" width="43.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1124.3" y="574.0">tcp_..</text>
</g>
<g>
<title>__kfree_skb (45,619 samples, 0.42%)</title><rect x="1125.9" y="547.0" width="4.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1128.9" y="558.0"></text>
</g>
<g>
<title>skb_release_all (38,234 samples, 0.35%)</title><rect x="1126.0" y="531.0" width="4.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1129.0" y="542.0"></text>
</g>
<g>
<title>skb_release_head_state (37,910 samples, 0.35%)</title><rect x="1126.0" y="515.0" width="4.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1129.0" y="526.0"></text>
</g>
<g>
<title>dst_release (28,062 samples, 0.26%)</title><rect x="1126.1" y="499.0" width="3.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1129.1" y="510.0"></text>
</g>
<g>
<title>sock_rfree (8,950 samples, 0.08%)</title><rect x="1129.1" y="499.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1132.1" y="510.0"></text>
</g>
<g>
<title>skb_release_data (6,776 samples, 0.06%)</title><rect x="1130.1" y="531.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1133.1" y="542.0"></text>
</g>
<g>
<title>kfree_skbmem (6,428 samples, 0.06%)</title><rect x="1131.2" y="547.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1134.2" y="558.0"></text>
</g>
<g>
<title>lock_sock_nested (48,501 samples, 0.44%)</title><rect x="1131.9" y="547.0" width="5.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1134.9" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (47,625 samples, 0.43%)</title><rect x="1132.0" y="531.0" width="5.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1135.0" y="542.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (45,853 samples, 0.42%)</title><rect x="1132.1" y="515.0" width="5.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1135.1" y="526.0"></text>
</g>
<g>
<title>release_sock (7,962 samples, 0.07%)</title><rect x="1137.1" y="547.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1140.1" y="558.0"></text>
</g>
<g>
<title>tcp_release_cb (4,849 samples, 0.04%)</title><rect x="1137.4" y="531.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1140.4" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (165,583 samples, 1.51%)</title><rect x="1137.9" y="547.0" width="17.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1140.9" y="558.0"></text>
</g>
<g>
<title>__skb_datagram_iter (163,645 samples, 1.49%)</title><rect x="1138.1" y="531.0" width="17.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1141.1" y="542.0"></text>
</g>
<g>
<title>_copy_to_iter (66,401 samples, 0.61%)</title><rect x="1143.5" y="515.0" width="7.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1146.5" y="526.0"></text>
</g>
<g>
<title>copyout (62,264 samples, 0.57%)</title><rect x="1144.0" y="499.0" width="6.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1147.0" y="510.0"></text>
</g>
<g>
<title>copy_user_generic_string (61,447 samples, 0.56%)</title><rect x="1144.1" y="483.0" width="6.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1147.1" y="494.0"></text>
</g>
<g>
<title>simple_copy_to_iter (47,265 samples, 0.43%)</title><rect x="1150.7" y="515.0" width="5.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1153.7" y="526.0"></text>
</g>
<g>
<title>__check_object_size (45,941 samples, 0.42%)</title><rect x="1150.8" y="499.0" width="5.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1153.8" y="510.0"></text>
</g>
<g>
<title>__virt_addr_valid (10,075 samples, 0.09%)</title><rect x="1154.6" y="483.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1157.6" y="494.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (38,927 samples, 0.36%)</title><rect x="1155.8" y="547.0" width="4.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1158.8" y="558.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (47,013 samples, 0.43%)</title><rect x="1160.0" y="547.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1163.0" y="558.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (20,730 samples, 0.19%)</title><rect x="1162.8" y="531.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1165.8" y="542.0"></text>
</g>
<g>
<title>ktime_get (18,829 samples, 0.17%)</title><rect x="1163.0" y="515.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1166.0" y="526.0"></text>
</g>
<g>
<title>read_tsc (13,451 samples, 0.12%)</title><rect x="1163.6" y="499.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1166.6" y="510.0"></text>
</g>
<g>
<title>sock_recvmsg (5,356 samples, 0.05%)</title><rect x="1165.0" y="579.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1168.0" y="590.0"></text>
</g>
<g>
<title>security_socket_recvmsg (5,065 samples, 0.05%)</title><rect x="1165.1" y="563.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1168.1" y="574.0"></text>
</g>
<g>
<title>sock_has_perm (3,959 samples, 0.04%)</title><rect x="1165.2" y="547.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1168.2" y="558.0"></text>
</g>
<g>
<title>sockfd_lookup_light (6,363 samples, 0.06%)</title><rect x="1165.6" y="579.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1168.6" y="590.0"></text>
</g>
<g>
<title>__fget_light (6,087 samples, 0.06%)</title><rect x="1165.6" y="563.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1168.6" y="574.0"></text>
</g>
<g>
<title>__fget (4,829 samples, 0.04%)</title><rect x="1165.8" y="547.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1168.8" y="558.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2,946 samples, 0.03%)</title><rect x="1166.3" y="659.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1169.3" y="670.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6,577 samples, 0.06%)</title><rect x="1166.7" y="659.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1169.7" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (16,343 samples, 0.15%)</title><rect x="1167.4" y="723.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.4" y="734.0"></text>
</g>
<g>
<title>gettimeofday (13,317 samples, 0.12%)</title><rect x="1167.7" y="707.0" width="1.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1170.7" y="718.0"></text>
</g>
<g>
<title>[vdso] (11,065 samples, 0.10%)</title><rect x="1168.0" y="691.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1171.0" y="702.0"></text>
</g>
<g>
<title>start_thread (191,683 samples, 1.75%)</title><rect x="1169.4" y="739.0" width="20.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1172.4" y="750.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (191,683 samples, 1.75%)</title><rect x="1169.4" y="723.0" width="20.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1172.4" y="734.0"></text>
</g>
<g>
<title>Thread::call_run() (191,683 samples, 1.75%)</title><rect x="1169.4" y="707.0" width="20.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.4" y="718.0"></text>
</g>
<g>
<title>GangWorker::loop() (114,291 samples, 1.04%)</title><rect x="1169.4" y="691.0" width="12.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.4" y="702.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (103,374 samples, 0.94%)</title><rect x="1169.6" y="675.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.6" y="686.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (72,490 samples, 0.66%)</title><rect x="1169.7" y="659.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.7" y="670.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (5,090 samples, 0.05%)</title><rect x="1169.9" y="643.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="654.0"></text>
</g>
<g>
<title>SpinPause (64,643 samples, 0.59%)</title><rect x="1170.5" y="643.0" width="6.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1173.5" y="654.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (5,795 samples, 0.05%)</title><rect x="1177.5" y="659.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (5,752 samples, 0.05%)</title><rect x="1177.5" y="643.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (5,503 samples, 0.05%)</title><rect x="1177.5" y="627.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="638.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (5,457 samples, 0.05%)</title><rect x="1177.5" y="611.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="622.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4,560 samples, 0.04%)</title><rect x="1177.6" y="595.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="606.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (3,847 samples, 0.04%)</title><rect x="1177.6" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="590.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3,071 samples, 0.03%)</title><rect x="1177.6" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="574.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (3,982 samples, 0.04%)</title><rect x="1178.1" y="659.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="670.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3,886 samples, 0.04%)</title><rect x="1178.1" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="654.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (3,764 samples, 0.03%)</title><rect x="1178.2" y="627.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="638.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (2,361 samples, 0.02%)</title><rect x="1178.3" y="611.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (20,308 samples, 0.19%)</title><rect x="1178.6" y="659.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (16,203 samples, 0.15%)</title><rect x="1178.8" y="643.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="654.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2,678 samples, 0.02%)</title><rect x="1178.8" y="627.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="638.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (13,381 samples, 0.12%)</title><rect x="1179.1" y="627.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="638.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (12,292 samples, 0.11%)</title><rect x="1179.2" y="611.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.2" y="622.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2,537 samples, 0.02%)</title><rect x="1179.3" y="595.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="606.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (3,732 samples, 0.03%)</title><rect x="1179.7" y="595.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="606.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (3,205 samples, 0.03%)</title><rect x="1179.7" y="579.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="590.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (6,955 samples, 0.06%)</title><rect x="1180.9" y="675.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (6,719 samples, 0.06%)</title><rect x="1181.0" y="659.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="670.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.66] (4,324 samples, 0.04%)</title><rect x="1181.1" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="654.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3,602 samples, 0.03%)</title><rect x="1181.1" y="627.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="638.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (65,943 samples, 0.60%)</title><rect x="1181.7" y="691.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (62,283 samples, 0.57%)</title><rect x="1181.7" y="675.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="686.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (61,983 samples, 0.57%)</title><rect x="1181.7" y="659.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (49,952 samples, 0.46%)</title><rect x="1181.7" y="643.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (49,932 samples, 0.46%)</title><rect x="1181.7" y="627.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (28,670 samples, 0.26%)</title><rect x="1181.7" y="611.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (2,596 samples, 0.02%)</title><rect x="1182.0" y="595.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3,171 samples, 0.03%)</title><rect x="1182.3" y="595.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3,036 samples, 0.03%)</title><rect x="1182.3" y="579.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (20,383 samples, 0.19%)</title><rect x="1182.6" y="595.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4,996 samples, 0.05%)</title><rect x="1183.2" y="579.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2,481 samples, 0.02%)</title><rect x="1184.1" y="579.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (13,719 samples, 0.13%)</title><rect x="1184.8" y="611.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="622.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (4,263 samples, 0.04%)</title><rect x="1184.9" y="595.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4,244 samples, 0.04%)</title><rect x="1184.9" y="579.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4,458 samples, 0.04%)</title><rect x="1185.5" y="595.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6,495 samples, 0.06%)</title><rect x="1186.4" y="611.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6,492 samples, 0.06%)</title><rect x="1186.4" y="595.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6,446 samples, 0.06%)</title><rect x="1186.4" y="579.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6,421 samples, 0.06%)</title><rect x="1186.4" y="563.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6,369 samples, 0.06%)</title><rect x="1186.4" y="547.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (6,091 samples, 0.06%)</title><rect x="1186.4" y="531.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5,285 samples, 0.05%)</title><rect x="1186.4" y="515.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5,285 samples, 0.05%)</title><rect x="1186.4" y="499.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5,189 samples, 0.05%)</title><rect x="1186.4" y="483.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5,166 samples, 0.05%)</title><rect x="1186.4" y="467.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5,104 samples, 0.05%)</title><rect x="1186.4" y="451.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (4,736 samples, 0.04%)</title><rect x="1186.4" y="435.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3,353 samples, 0.03%)</title><rect x="1186.5" y="419.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3,353 samples, 0.03%)</title><rect x="1186.5" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3,264 samples, 0.03%)</title><rect x="1186.5" y="387.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3,252 samples, 0.03%)</title><rect x="1186.5" y="371.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3,201 samples, 0.03%)</title><rect x="1186.5" y="355.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (3,014 samples, 0.03%)</title><rect x="1186.5" y="339.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2,425 samples, 0.02%)</title><rect x="1186.5" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2,421 samples, 0.02%)</title><rect x="1186.5" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2,346 samples, 0.02%)</title><rect x="1186.5" y="291.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2,335 samples, 0.02%)</title><rect x="1186.5" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="286.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (11,561 samples, 0.11%)</title><rect x="1187.1" y="643.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.1" y="654.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (11,545 samples, 0.11%)</title><rect x="1187.1" y="627.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_method() (11,531 samples, 0.11%)</title><rect x="1187.1" y="611.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (10,853 samples, 0.10%)</title><rect x="1187.1" y="595.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="606.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (4,778 samples, 0.04%)</title><rect x="1187.1" y="579.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="590.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3,867 samples, 0.04%)</title><rect x="1187.2" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.2" y="574.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3,862 samples, 0.04%)</title><rect x="1187.2" y="547.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3,828 samples, 0.03%)</title><rect x="1187.2" y="531.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.2" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3,520 samples, 0.03%)</title><rect x="1187.2" y="515.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.2" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3,474 samples, 0.03%)</title><rect x="1187.2" y="499.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.2" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2,927 samples, 0.03%)</title><rect x="1187.2" y="483.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.2" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2,350 samples, 0.02%)</title><rect x="1187.2" y="467.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.2" y="478.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4,339 samples, 0.04%)</title><rect x="1187.8" y="579.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="590.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3,121 samples, 0.03%)</title><rect x="1187.9" y="563.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.9" y="574.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2,655 samples, 0.02%)</title><rect x="1188.5" y="675.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.5" y="686.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2,604 samples, 0.02%)</title><rect x="1188.5" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.5" y="670.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2,584 samples, 0.02%)</title><rect x="1188.5" y="643.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.5" y="654.0"></text>
</g>
<g>
<title>VMThread::run() (10,436 samples, 0.10%)</title><rect x="1188.8" y="691.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="702.0"></text>
</g>
<g>
<title>VMThread::loop() (10,408 samples, 0.09%)</title><rect x="1188.8" y="675.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.8" y="686.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (4,428 samples, 0.04%)</title><rect x="1188.8" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.8" y="670.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.65] (4,894 samples, 0.04%)</title><rect x="1189.3" y="659.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.3" y="670.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (4,874 samples, 0.04%)</title><rect x="1189.3" y="643.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.3" y="654.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (4,156 samples, 0.04%)</title><rect x="1189.3" y="627.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.3" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3,912 samples, 0.04%)</title><rect x="1189.4" y="611.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.4" y="622.0"></text>
</g>
</g>
</svg>
