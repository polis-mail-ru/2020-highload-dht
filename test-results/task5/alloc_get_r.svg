<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="821"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="821"> </text>
<g id="frames">
<g>
<title>all (129,789 samples, 100.00%)</title><rect x="10.0" y="787.0" width="1180.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="13.0" y="798.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (40,842 samples, 31.47%)</title><rect x="10.0" y="771.0" width="371.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="782.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (29 samples, 0.02%)</title><rect x="10.0" y="755.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (29 samples, 0.02%)</title><rect x="10.0" y="739.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1159993801.linkToTargetMethod (29 samples, 0.02%)</title><rect x="10.0" y="723.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/353100953.invoke (29 samples, 0.02%)</title><rect x="10.0" y="707.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (29 samples, 0.02%)</title><rect x="10.0" y="691.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (29 samples, 0.02%)</title><rect x="10.0" y="675.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (29 samples, 0.02%)</title><rect x="10.0" y="659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>byte[] (29 samples, 0.02%)</title><rect x="10.0" y="643.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (40,813 samples, 31.45%)</title><rect x="10.3" y="755.0" width="371.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.3" y="766.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (40,813 samples, 31.45%)</title><rect x="10.3" y="739.0" width="371.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.3" y="750.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (38,978 samples, 30.03%)</title><rect x="10.3" y="723.0" width="354.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.3" y="734.0">java/util/concurrent/CompletableFuture$AsyncSupp..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (335 samples, 0.26%)</title><rect x="10.3" y="707.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (335 samples, 0.26%)</title><rect x="10.3" y="691.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (335 samples, 0.26%)</title><rect x="10.3" y="675.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$132/1969245623.accept (335 samples, 0.26%)</title><rect x="10.3" y="659.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$entity$1 (335 samples, 0.26%)</title><rect x="10.3" y="643.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Utility.sendResponse (335 samples, 0.26%)</title><rect x="10.3" y="627.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (335 samples, 0.26%)</title><rect x="10.3" y="611.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (335 samples, 0.26%)</title><rect x="10.3" y="595.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (247 samples, 0.19%)</title><rect x="10.3" y="579.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (247 samples, 0.19%)</title><rect x="10.3" y="563.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.3" y="574.0"></text>
</g>
<g>
<title>byte[] (247 samples, 0.19%)</title><rect x="10.3" y="547.0" width="2.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="13.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (88 samples, 0.07%)</title><rect x="12.5" y="579.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.5" y="590.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (88 samples, 0.07%)</title><rect x="12.5" y="563.0" width="0.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="15.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$140/13936958.get (38,643 samples, 29.77%)</title><rect x="13.3" y="707.0" width="351.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.3" y="718.0">ru/mail/polis/service/s3ponia/AsyncService$$Lamb..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$getAsync$6 (38,643 samples, 29.77%)</title><rect x="13.3" y="691.0" width="351.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.3" y="702.0">ru/mail/polis/service/s3ponia/AsyncService.lambd..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/DaoService.get (38,643 samples, 29.77%)</title><rect x="13.3" y="675.0" width="351.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.3" y="686.0">ru/mail/polis/service/s3ponia/DaoService.get</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1451999517.linkToTargetMethod (160 samples, 0.12%)</title><rect x="13.3" y="659.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.3" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2057114726.invoke (160 samples, 0.12%)</title><rect x="13.3" y="643.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (160 samples, 0.12%)</title><rect x="13.3" y="627.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (43 samples, 0.03%)</title><rect x="13.3" y="611.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.3" y="622.0"></text>
</g>
<g>
<title>java.lang.String (43 samples, 0.03%)</title><rect x="13.3" y="595.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="16.3" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (117 samples, 0.09%)</title><rect x="13.7" y="611.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (117 samples, 0.09%)</title><rect x="13.7" y="595.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.7" y="606.0"></text>
</g>
<g>
<title>byte[] (117 samples, 0.09%)</title><rect x="13.7" y="579.0" width="1.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="16.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (237 samples, 0.18%)</title><rect x="14.8" y="659.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.8" y="670.0"></text>
</g>
<g>
<title>one.nio.http.Response (56 samples, 0.04%)</title><rect x="14.8" y="643.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="17.8" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (181 samples, 0.14%)</title><rect x="15.3" y="643.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.3" y="654.0"></text>
</g>
<g>
<title>byte[] (54 samples, 0.04%)</title><rect x="15.3" y="627.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="18.3" y="638.0"></text>
</g>
<g>
<title>java.lang.String[] (74 samples, 0.06%)</title><rect x="15.8" y="627.0" width="0.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="18.8" y="638.0"></text>
</g>
<g>
<title>java.lang.String (53 samples, 0.04%)</title><rect x="16.4" y="627.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="19.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (38,210 samples, 29.44%)</title><rect x="16.9" y="659.0" width="347.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="670.0">ru/mail/polis/dao/DAO.getValue</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2,724 samples, 2.10%)</title><rect x="16.9" y="643.0" width="24.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.9" y="654.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,724 samples, 2.10%)</title><rect x="16.9" y="627.0" width="24.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.9" y="638.0">c..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (448 samples, 0.35%)</title><rect x="16.9" y="611.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.9" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (448 samples, 0.35%)</title><rect x="16.9" y="595.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.9" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (448 samples, 0.35%)</title><rect x="16.9" y="579.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.9" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (448 samples, 0.35%)</title><rect x="16.9" y="563.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (448 samples, 0.35%)</title><rect x="16.9" y="547.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$176/590961537.compare (448 samples, 0.35%)</title><rect x="16.9" y="531.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell.compareTo (448 samples, 0.35%)</title><rect x="16.9" y="515.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.9" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$246/1020616468.compare (180 samples, 0.14%)</title><rect x="16.9" y="499.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.9" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (180 samples, 0.14%)</title><rect x="16.9" y="483.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.9" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.compare (180 samples, 0.14%)</title><rect x="16.9" y="467.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (180 samples, 0.14%)</title><rect x="16.9" y="451.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell$$Lambda$257/1173731588.apply (180 samples, 0.14%)</title><rect x="16.9" y="435.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (180 samples, 0.14%)</title><rect x="16.9" y="419.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.9" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (180 samples, 0.14%)</title><rect x="16.9" y="403.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.9" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (180 samples, 0.14%)</title><rect x="16.9" y="387.0" width="1.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="19.9" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (152 samples, 0.12%)</title><rect x="18.6" y="499.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.6" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (152 samples, 0.12%)</title><rect x="18.6" y="483.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.6" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (152 samples, 0.12%)</title><rect x="18.6" y="467.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.6" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (152 samples, 0.12%)</title><rect x="18.6" y="451.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.6" y="462.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (152 samples, 0.12%)</title><rect x="18.6" y="435.0" width="1.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="21.6" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (116 samples, 0.09%)</title><rect x="19.9" y="499.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.9" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (116 samples, 0.09%)</title><rect x="19.9" y="483.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.9" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (116 samples, 0.09%)</title><rect x="19.9" y="467.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.9" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (116 samples, 0.09%)</title><rect x="19.9" y="451.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.9" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (116 samples, 0.09%)</title><rect x="19.9" y="435.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.9" y="446.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (116 samples, 0.09%)</title><rect x="19.9" y="419.0" width="1.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="22.9" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,276 samples, 1.75%)</title><rect x="21.0" y="611.0" width="20.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.0" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,276 samples, 1.75%)</title><rect x="21.0" y="595.0" width="20.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.0" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,276 samples, 1.75%)</title><rect x="21.0" y="579.0" width="20.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.0" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,276 samples, 1.75%)</title><rect x="21.0" y="563.0" width="20.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.0" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,276 samples, 1.75%)</title><rect x="21.0" y="547.0" width="20.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.0" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,276 samples, 1.75%)</title><rect x="21.0" y="531.0" width="20.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.0" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,728 samples, 1.33%)</title><rect x="21.0" y="515.0" width="15.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (1,728 samples, 1.33%)</title><rect x="21.0" y="499.0" width="15.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (1,728 samples, 1.33%)</title><rect x="21.0" y="483.0" width="15.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (1,728 samples, 1.33%)</title><rect x="21.0" y="467.0" width="15.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (1,728 samples, 1.33%)</title><rect x="21.0" y="451.0" width="15.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.0" y="462.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (158 samples, 0.12%)</title><rect x="21.0" y="435.0" width="1.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="24.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.&lt;init&gt; (1,570 samples, 1.21%)</title><rect x="22.4" y="435.0" width="14.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readKey (574 samples, 0.44%)</title><rect x="22.4" y="419.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (574 samples, 0.44%)</title><rect x="22.4" y="403.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.4" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (364 samples, 0.28%)</title><rect x="22.4" y="387.0" width="3.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="25.4" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (210 samples, 0.16%)</title><rect x="25.7" y="387.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.7" y="398.0"></text>
</g>
<g>
<title>byte[] (210 samples, 0.16%)</title><rect x="25.7" y="371.0" width="1.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="28.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readValue (996 samples, 0.77%)</title><rect x="27.6" y="419.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="30.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (863 samples, 0.66%)</title><rect x="27.6" y="403.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.6" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (556 samples, 0.43%)</title><rect x="27.6" y="387.0" width="5.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="30.6" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (307 samples, 0.24%)</title><rect x="32.7" y="387.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.7" y="398.0"></text>
</g>
<g>
<title>byte[] (307 samples, 0.24%)</title><rect x="32.7" y="371.0" width="2.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="35.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.of (133 samples, 0.10%)</title><rect x="35.5" y="403.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.5" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Value (133 samples, 0.10%)</title><rect x="35.5" y="387.0" width="1.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="38.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$176/590961537.compare (548 samples, 0.42%)</title><rect x="36.7" y="515.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="39.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell.compareTo (548 samples, 0.42%)</title><rect x="36.7" y="499.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="39.7" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$246/1020616468.compare (418 samples, 0.32%)</title><rect x="36.7" y="483.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.7" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (418 samples, 0.32%)</title><rect x="36.7" y="467.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.7" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.compare (418 samples, 0.32%)</title><rect x="36.7" y="451.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.7" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (418 samples, 0.32%)</title><rect x="36.7" y="435.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell$$Lambda$257/1173731588.apply (197 samples, 0.15%)</title><rect x="36.7" y="419.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (197 samples, 0.15%)</title><rect x="36.7" y="403.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.7" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (197 samples, 0.15%)</title><rect x="36.7" y="387.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.7" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (197 samples, 0.15%)</title><rect x="36.7" y="371.0" width="1.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="39.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.compareTo (221 samples, 0.17%)</title><rect x="38.5" y="419.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.compareTo (221 samples, 0.17%)</title><rect x="38.5" y="403.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.5" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$ReverseComparator2.compare (110 samples, 0.08%)</title><rect x="38.5" y="387.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$246/1020616468.compare (110 samples, 0.08%)</title><rect x="38.5" y="371.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.5" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (110 samples, 0.08%)</title><rect x="38.5" y="355.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.5" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.compare (110 samples, 0.08%)</title><rect x="38.5" y="339.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="41.5" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (110 samples, 0.08%)</title><rect x="38.5" y="323.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value$$Lambda$264/1973353751.apply (110 samples, 0.08%)</title><rect x="38.5" y="307.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.5" y="318.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (110 samples, 0.08%)</title><rect x="38.5" y="291.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.5" y="302.0"></text>
</g>
<g>
<title>java.lang.Long (110 samples, 0.08%)</title><rect x="38.5" y="275.0" width="1.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="41.5" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (86 samples, 0.07%)</title><rect x="39.7" y="387.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.7" y="398.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (34 samples, 0.03%)</title><rect x="39.7" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.7" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (34 samples, 0.03%)</title><rect x="39.7" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.7" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (34 samples, 0.03%)</title><rect x="39.7" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.7" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (34 samples, 0.03%)</title><rect x="39.7" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.7" y="334.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (34 samples, 0.03%)</title><rect x="39.7" y="307.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="42.7" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (52 samples, 0.04%)</title><rect x="40.0" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.0" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (52 samples, 0.04%)</title><rect x="40.0" y="355.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.0" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (52 samples, 0.04%)</title><rect x="40.0" y="339.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="43.0" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$246/1020616468.get$Lambda (52 samples, 0.04%)</title><rect x="40.0" y="323.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.0" y="334.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$246 (52 samples, 0.04%)</title><rect x="40.0" y="307.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="43.0" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (130 samples, 0.10%)</title><rect x="40.5" y="483.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.5" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (130 samples, 0.10%)</title><rect x="40.5" y="467.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (130 samples, 0.10%)</title><rect x="40.5" y="451.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.5" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (130 samples, 0.10%)</title><rect x="40.5" y="435.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.5" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (130 samples, 0.10%)</title><rect x="40.5" y="419.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.5" y="430.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (130 samples, 0.10%)</title><rect x="40.5" y="403.0" width="1.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="43.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.cellsIterator (35,486 samples, 27.34%)</title><rect x="41.7" y="643.0" width="322.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.7" y="654.0">ru/mail/polis/dao/s3ponia/PersistenceDAO.cel..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (4,254 samples, 3.28%)</title><rect x="41.7" y="627.0" width="38.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.7" y="638.0">com..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (28 samples, 0.02%)</title><rect x="41.7" y="611.0" width="0.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="44.7" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (4,226 samples, 3.26%)</title><rect x="41.9" y="611.0" width="38.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.9" y="622.0">com..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (57 samples, 0.04%)</title><rect x="41.9" y="595.0" width="0.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="44.9" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (219 samples, 0.17%)</title><rect x="42.5" y="595.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.5" y="606.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (219 samples, 0.17%)</title><rect x="42.5" y="579.0" width="1.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="45.5" y="590.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (61 samples, 0.05%)</title><rect x="44.4" y="595.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="47.4" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (56 samples, 0.04%)</title><rect x="45.0" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.0" y="606.0"></text>
</g>
<g>
<title>java.lang.Object[] (56 samples, 0.04%)</title><rect x="45.0" y="579.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="48.0" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (3,330 samples, 2.57%)</title><rect x="45.5" y="595.0" width="30.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.5" y="606.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (3,330 samples, 2.57%)</title><rect x="45.5" y="579.0" width="30.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="48.5" y="590.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (85 samples, 0.07%)</title><rect x="45.5" y="563.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.5" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (85 samples, 0.07%)</title><rect x="45.5" y="547.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.5" y="558.0"></text>
</g>
<g>
<title>java.lang.Object[] (85 samples, 0.07%)</title><rect x="45.5" y="531.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="48.5" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (3,245 samples, 2.50%)</title><rect x="46.3" y="563.0" width="29.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.3" y="574.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (3,245 samples, 2.50%)</title><rect x="46.3" y="547.0" width="29.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.3" y="558.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,245 samples, 2.50%)</title><rect x="46.3" y="531.0" width="29.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.3" y="542.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3,245 samples, 2.50%)</title><rect x="46.3" y="515.0" width="29.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="49.3" y="526.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,743 samples, 2.11%)</title><rect x="46.3" y="499.0" width="24.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.3" y="510.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (2,743 samples, 2.11%)</title><rect x="46.3" y="483.0" width="24.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.3" y="494.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (2,743 samples, 2.11%)</title><rect x="46.3" y="467.0" width="24.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.3" y="478.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (2,743 samples, 2.11%)</title><rect x="46.3" y="451.0" width="24.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="49.3" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (2,743 samples, 2.11%)</title><rect x="46.3" y="435.0" width="24.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="49.3" y="446.0">r..</text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (243 samples, 0.19%)</title><rect x="46.3" y="419.0" width="2.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="49.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.&lt;init&gt; (2,500 samples, 1.93%)</title><rect x="48.5" y="419.0" width="22.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.5" y="430.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readKey (940 samples, 0.72%)</title><rect x="48.5" y="403.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (940 samples, 0.72%)</title><rect x="48.5" y="387.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.5" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (635 samples, 0.49%)</title><rect x="48.5" y="371.0" width="5.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="51.5" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (305 samples, 0.23%)</title><rect x="54.3" y="371.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="57.3" y="382.0"></text>
</g>
<g>
<title>byte[] (305 samples, 0.23%)</title><rect x="54.3" y="355.0" width="2.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="57.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readValue (1,560 samples, 1.20%)</title><rect x="57.0" y="403.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,359 samples, 1.05%)</title><rect x="57.0" y="387.0" width="12.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.0" y="398.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (912 samples, 0.70%)</title><rect x="57.0" y="371.0" width="8.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="60.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (447 samples, 0.34%)</title><rect x="65.3" y="371.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.3" y="382.0"></text>
</g>
<g>
<title>byte[] (447 samples, 0.34%)</title><rect x="65.3" y="355.0" width="4.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="68.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.of (201 samples, 0.15%)</title><rect x="69.4" y="387.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.4" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Value (201 samples, 0.15%)</title><rect x="69.4" y="371.0" width="1.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="72.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$176/590961537.compare (502 samples, 0.39%)</title><rect x="71.2" y="499.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell.compareTo (502 samples, 0.39%)</title><rect x="71.2" y="483.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.2" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$246/1020616468.compare (386 samples, 0.30%)</title><rect x="71.2" y="467.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.2" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (386 samples, 0.30%)</title><rect x="71.2" y="451.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.2" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.compare (386 samples, 0.30%)</title><rect x="71.2" y="435.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.2" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (386 samples, 0.30%)</title><rect x="71.2" y="419.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell$$Lambda$257/1173731588.apply (190 samples, 0.15%)</title><rect x="71.2" y="403.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (190 samples, 0.15%)</title><rect x="71.2" y="387.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.2" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (190 samples, 0.15%)</title><rect x="71.2" y="371.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.2" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (190 samples, 0.15%)</title><rect x="71.2" y="355.0" width="1.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="74.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.compareTo (196 samples, 0.15%)</title><rect x="73.0" y="403.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="76.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.compareTo (196 samples, 0.15%)</title><rect x="73.0" y="387.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.0" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$ReverseComparator2.compare (88 samples, 0.07%)</title><rect x="73.0" y="371.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.0" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$246/1020616468.compare (88 samples, 0.07%)</title><rect x="73.0" y="355.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.0" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (88 samples, 0.07%)</title><rect x="73.0" y="339.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.0" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.compare (88 samples, 0.07%)</title><rect x="73.0" y="323.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.0" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (88 samples, 0.07%)</title><rect x="73.0" y="307.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value$$Lambda$264/1973353751.apply (88 samples, 0.07%)</title><rect x="73.0" y="291.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.0" y="302.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (88 samples, 0.07%)</title><rect x="73.0" y="275.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.0" y="286.0"></text>
</g>
<g>
<title>java.lang.Long (88 samples, 0.07%)</title><rect x="73.0" y="259.0" width="0.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="76.0" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (42 samples, 0.03%)</title><rect x="73.8" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="76.8" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (42 samples, 0.03%)</title><rect x="73.8" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="76.8" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (42 samples, 0.03%)</title><rect x="73.8" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="76.8" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (42 samples, 0.03%)</title><rect x="73.8" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.8" y="334.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (42 samples, 0.03%)</title><rect x="73.8" y="307.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="76.8" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (66 samples, 0.05%)</title><rect x="74.1" y="371.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.1" y="382.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (31 samples, 0.02%)</title><rect x="74.1" y="355.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.1" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (31 samples, 0.02%)</title><rect x="74.1" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="77.1" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (31 samples, 0.02%)</title><rect x="74.1" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="77.1" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (31 samples, 0.02%)</title><rect x="74.1" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.1" y="318.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (31 samples, 0.02%)</title><rect x="74.1" y="291.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="77.1" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (35 samples, 0.03%)</title><rect x="74.4" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="77.4" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (35 samples, 0.03%)</title><rect x="74.4" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.4" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (35 samples, 0.03%)</title><rect x="74.4" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="77.4" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$246/1020616468.get$Lambda (35 samples, 0.03%)</title><rect x="74.4" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.4" y="318.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$246 (35 samples, 0.03%)</title><rect x="74.4" y="291.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="77.4" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (116 samples, 0.09%)</title><rect x="74.7" y="467.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.7" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (116 samples, 0.09%)</title><rect x="74.7" y="451.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.7" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (116 samples, 0.09%)</title><rect x="74.7" y="435.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.7" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (116 samples, 0.09%)</title><rect x="74.7" y="419.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.7" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (116 samples, 0.09%)</title><rect x="74.7" y="403.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="77.7" y="414.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (116 samples, 0.09%)</title><rect x="74.7" y="387.0" width="1.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="77.7" y="398.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (503 samples, 0.39%)</title><rect x="75.8" y="595.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (503 samples, 0.39%)</title><rect x="75.8" y="579.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.8" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (503 samples, 0.39%)</title><rect x="75.8" y="563.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.8" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (105 samples, 0.08%)</title><rect x="75.8" y="547.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.8" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$194/846354847.getAsBoolean (105 samples, 0.08%)</title><rect x="75.8" y="531.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.8" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (105 samples, 0.08%)</title><rect x="75.8" y="515.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (105 samples, 0.08%)</title><rect x="75.8" y="499.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (50 samples, 0.04%)</title><rect x="75.8" y="483.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (50 samples, 0.04%)</title><rect x="75.8" y="467.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.8" y="478.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (50 samples, 0.04%)</title><rect x="75.8" y="451.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="78.8" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (55 samples, 0.04%)</title><rect x="76.2" y="483.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.2" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable$$Lambda$147/1552249633.apply (55 samples, 0.04%)</title><rect x="76.2" y="467.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.lambda$iterator$2 (55 samples, 0.04%)</title><rect x="76.2" y="451.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.of (55 samples, 0.04%)</title><rect x="76.2" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.2" y="446.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Cell (55 samples, 0.04%)</title><rect x="76.2" y="419.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="79.2" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (398 samples, 0.31%)</title><rect x="76.7" y="547.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="79.7" y="558.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (79 samples, 0.06%)</title><rect x="76.7" y="531.0" width="0.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="79.7" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (65 samples, 0.05%)</title><rect x="77.5" y="531.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.5" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (65 samples, 0.05%)</title><rect x="77.5" y="515.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$194/846354847.get$Lambda (41 samples, 0.03%)</title><rect x="77.7" y="499.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.7" y="510.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$194 (41 samples, 0.03%)</title><rect x="77.7" y="483.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="80.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (82 samples, 0.06%)</title><rect x="78.1" y="531.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (82 samples, 0.06%)</title><rect x="78.1" y="515.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.1" y="526.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (82 samples, 0.06%)</title><rect x="78.1" y="499.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="81.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (172 samples, 0.13%)</title><rect x="78.8" y="531.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.8" y="542.0"></text>
</g>
<g>
<title>java.lang.Object[] (172 samples, 0.13%)</title><rect x="78.8" y="515.0" width="1.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="81.8" y="526.0"></text>
</g>
<g>
<title>java.util.ArrayList (524 samples, 0.40%)</title><rect x="80.4" y="627.0" width="4.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="83.4" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (49 samples, 0.04%)</title><rect x="85.1" y="627.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.1" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (49 samples, 0.04%)</title><rect x="85.1" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$159/1641664638.get$Lambda (49 samples, 0.04%)</title><rect x="85.1" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.1" y="606.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.PersistenceDAO$$Lambda$159 (49 samples, 0.04%)</title><rect x="85.1" y="579.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="88.1" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (122 samples, 0.09%)</title><rect x="85.6" y="627.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="88.6" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (122 samples, 0.09%)</title><rect x="85.6" y="611.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.6" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (122 samples, 0.09%)</title><rect x="85.6" y="595.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.6" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (122 samples, 0.09%)</title><rect x="85.6" y="579.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.6" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (122 samples, 0.09%)</title><rect x="85.6" y="563.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="88.6" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (122 samples, 0.09%)</title><rect x="85.6" y="547.0" width="1.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="88.6" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (28,438 samples, 21.91%)</title><rect x="86.7" y="627.0" width="258.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.7" y="638.0">java/util/Collections$Unmodifiable..</text>
</g>
<g>
<title>java/util/TreeMap.forEach (28,438 samples, 21.91%)</title><rect x="86.7" y="611.0" width="258.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.7" y="622.0">java/util/TreeMap.forEach</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$159/1641664638.accept (28,438 samples, 21.91%)</title><rect x="86.7" y="595.0" width="258.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.7" y="606.0">ru/mail/polis/dao/s3ponia/Persiste..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.lambda$cellsIterator$2 (28,438 samples, 21.91%)</title><rect x="86.7" y="579.0" width="258.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.7" y="590.0">ru/mail/polis/dao/s3ponia/Persiste..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.iterator (28,438 samples, 21.91%)</title><rect x="86.7" y="563.0" width="258.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.7" y="574.0">ru/mail/polis/dao/s3ponia/DiskTabl..</text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$DiskTableIterator (163 samples, 0.13%)</title><rect x="86.7" y="547.0" width="1.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="89.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.&lt;init&gt; (28,275 samples, 21.79%)</title><rect x="88.2" y="547.0" width="257.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.2" y="558.0">ru/mail/polis/dao/s3ponia/DiskTabl..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getElementIndex (28,275 samples, 21.79%)</title><rect x="88.2" y="531.0" width="257.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.2" y="542.0">ru/mail/polis/dao/s3ponia/DiskTabl..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (28,275 samples, 21.79%)</title><rect x="88.2" y="515.0" width="257.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.2" y="526.0">ru/mail/polis/dao/s3ponia/DiskTabl..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (28,275 samples, 21.79%)</title><rect x="88.2" y="499.0" width="257.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.2" y="510.0">ru/mail/polis/dao/s3ponia/DiskTabl..</text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (2,634 samples, 2.03%)</title><rect x="88.2" y="483.0" width="23.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="91.2" y="494.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.&lt;init&gt; (25,641 samples, 19.76%)</title><rect x="112.1" y="483.0" width="233.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.1" y="494.0">ru/mail/polis/dao/s3ponia/DiskT..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readKey (9,236 samples, 7.12%)</title><rect x="112.1" y="467.0" width="84.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.1" y="478.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (9,236 samples, 7.12%)</title><rect x="112.1" y="451.0" width="84.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.1" y="462.0">java/nio/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,227 samples, 4.80%)</title><rect x="112.1" y="435.0" width="56.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="115.1" y="446.0">java.n..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3,009 samples, 2.32%)</title><rect x="168.7" y="435.0" width="27.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="171.7" y="446.0">j..</text>
</g>
<g>
<title>byte[] (3,009 samples, 2.32%)</title><rect x="168.7" y="419.0" width="27.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="171.7" y="430.0">b..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readValue (16,405 samples, 12.64%)</title><rect x="196.1" y="467.0" width="149.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.1" y="478.0">ru/mail/polis/dao/s..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (14,234 samples, 10.97%)</title><rect x="196.1" y="451.0" width="129.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.1" y="462.0">java/nio/ByteBuf..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9,312 samples, 7.17%)</title><rect x="196.1" y="435.0" width="84.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="199.1" y="446.0">java.nio.H..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4,922 samples, 3.79%)</title><rect x="280.7" y="435.0" width="44.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.7" y="446.0">java..</text>
</g>
<g>
<title>byte[] (4,922 samples, 3.79%)</title><rect x="280.7" y="419.0" width="44.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="283.7" y="430.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.of (2,171 samples, 1.67%)</title><rect x="325.5" y="451.0" width="19.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.5" y="462.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Value (2,171 samples, 1.67%)</title><rect x="325.5" y="435.0" width="19.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="328.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1,370 samples, 1.06%)</title><rect x="345.2" y="627.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.2" y="638.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (48 samples, 0.04%)</title><rect x="345.2" y="611.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="348.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1,322 samples, 1.02%)</title><rect x="345.7" y="611.0" width="12.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="348.7" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,322 samples, 1.02%)</title><rect x="345.7" y="595.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.7" y="606.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (237 samples, 0.18%)</title><rect x="345.7" y="579.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="348.7" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (237 samples, 0.18%)</title><rect x="345.7" y="563.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="348.7" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (237 samples, 0.18%)</title><rect x="345.7" y="547.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.7" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (237 samples, 0.18%)</title><rect x="345.7" y="531.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="348.7" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (237 samples, 0.18%)</title><rect x="345.7" y="515.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$176/590961537.compare (237 samples, 0.18%)</title><rect x="345.7" y="499.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell.compareTo (237 samples, 0.18%)</title><rect x="345.7" y="483.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="348.7" y="494.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$246/1020616468.compare (95 samples, 0.07%)</title><rect x="345.7" y="467.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.7" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (95 samples, 0.07%)</title><rect x="345.7" y="451.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.7" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.compare (95 samples, 0.07%)</title><rect x="345.7" y="435.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="348.7" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (95 samples, 0.07%)</title><rect x="345.7" y="419.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell$$Lambda$257/1173731588.apply (95 samples, 0.07%)</title><rect x="345.7" y="403.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="348.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (95 samples, 0.07%)</title><rect x="345.7" y="387.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="348.7" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (95 samples, 0.07%)</title><rect x="345.7" y="371.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="348.7" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (95 samples, 0.07%)</title><rect x="345.7" y="355.0" width="0.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="348.7" y="366.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (74 samples, 0.06%)</title><rect x="346.5" y="467.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (74 samples, 0.06%)</title><rect x="346.5" y="451.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.5" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (74 samples, 0.06%)</title><rect x="346.5" y="435.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.5" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (74 samples, 0.06%)</title><rect x="346.5" y="419.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="349.5" y="430.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (74 samples, 0.06%)</title><rect x="346.5" y="403.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="349.5" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (68 samples, 0.05%)</title><rect x="347.2" y="467.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.2" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (68 samples, 0.05%)</title><rect x="347.2" y="451.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="350.2" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (68 samples, 0.05%)</title><rect x="347.2" y="435.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.2" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (68 samples, 0.05%)</title><rect x="347.2" y="419.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.2" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (68 samples, 0.05%)</title><rect x="347.2" y="403.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.2" y="414.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (68 samples, 0.05%)</title><rect x="347.2" y="387.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="350.2" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,085 samples, 0.84%)</title><rect x="347.8" y="579.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.8" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,085 samples, 0.84%)</title><rect x="347.8" y="563.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.8" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,085 samples, 0.84%)</title><rect x="347.8" y="547.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="350.8" y="558.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,085 samples, 0.84%)</title><rect x="347.8" y="531.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="350.8" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,085 samples, 0.84%)</title><rect x="347.8" y="515.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.8" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,085 samples, 0.84%)</title><rect x="347.8" y="499.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="350.8" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (911 samples, 0.70%)</title><rect x="347.8" y="483.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (911 samples, 0.70%)</title><rect x="347.8" y="467.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (911 samples, 0.70%)</title><rect x="347.8" y="451.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (911 samples, 0.70%)</title><rect x="347.8" y="435.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (911 samples, 0.70%)</title><rect x="347.8" y="419.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="350.8" y="430.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (91 samples, 0.07%)</title><rect x="347.8" y="403.0" width="0.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="350.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.&lt;init&gt; (820 samples, 0.63%)</title><rect x="348.6" y="403.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="351.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readKey (301 samples, 0.23%)</title><rect x="348.6" y="387.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (301 samples, 0.23%)</title><rect x="348.6" y="371.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (201 samples, 0.15%)</title><rect x="348.6" y="355.0" width="1.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="351.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (100 samples, 0.08%)</title><rect x="350.5" y="355.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="353.5" y="366.0"></text>
</g>
<g>
<title>byte[] (100 samples, 0.08%)</title><rect x="350.5" y="339.0" width="0.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="353.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.readValue (519 samples, 0.40%)</title><rect x="351.4" y="387.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="354.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (467 samples, 0.36%)</title><rect x="351.4" y="371.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="354.4" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (321 samples, 0.25%)</title><rect x="351.4" y="355.0" width="2.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="354.4" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (146 samples, 0.11%)</title><rect x="354.3" y="355.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.3" y="366.0"></text>
</g>
<g>
<title>byte[] (146 samples, 0.11%)</title><rect x="354.3" y="339.0" width="1.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="357.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.of (52 samples, 0.04%)</title><rect x="355.6" y="371.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="358.6" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Value (52 samples, 0.04%)</title><rect x="355.6" y="355.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="358.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$176/590961537.compare (174 samples, 0.13%)</title><rect x="356.1" y="483.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell.compareTo (174 samples, 0.13%)</title><rect x="356.1" y="467.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.1" y="478.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$246/1020616468.compare (105 samples, 0.08%)</title><rect x="356.1" y="451.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="359.1" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (105 samples, 0.08%)</title><rect x="356.1" y="435.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.1" y="446.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.compare (105 samples, 0.08%)</title><rect x="356.1" y="419.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.1" y="430.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (105 samples, 0.08%)</title><rect x="356.1" y="403.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/ICell$$Lambda$257/1173731588.apply (105 samples, 0.08%)</title><rect x="356.1" y="387.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="359.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (105 samples, 0.08%)</title><rect x="356.1" y="371.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="359.1" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (105 samples, 0.08%)</title><rect x="356.1" y="355.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.1" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (105 samples, 0.08%)</title><rect x="356.1" y="339.0" width="1.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="359.1" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (69 samples, 0.05%)</title><rect x="357.1" y="451.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="360.1" y="462.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (69 samples, 0.05%)</title><rect x="357.1" y="435.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.1" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (69 samples, 0.05%)</title><rect x="357.1" y="419.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.1" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (69 samples, 0.05%)</title><rect x="357.1" y="403.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="360.1" y="414.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (69 samples, 0.05%)</title><rect x="357.1" y="387.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="360.1" y="398.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (69 samples, 0.05%)</title><rect x="357.1" y="371.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="360.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.iterator (729 samples, 0.56%)</title><rect x="357.7" y="627.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="360.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collection.stream (176 samples, 0.14%)</title><rect x="357.7" y="611.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="360.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (67 samples, 0.05%)</title><rect x="357.7" y="595.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="360.7" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (67 samples, 0.05%)</title><rect x="357.7" y="579.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="360.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (109 samples, 0.08%)</title><rect x="358.3" y="595.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="361.3" y="606.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (109 samples, 0.08%)</title><rect x="358.3" y="579.0" width="1.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="361.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (40 samples, 0.03%)</title><rect x="359.3" y="611.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="362.3" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (40 samples, 0.03%)</title><rect x="359.3" y="595.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="362.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (79 samples, 0.06%)</title><rect x="359.6" y="611.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (79 samples, 0.06%)</title><rect x="359.6" y="595.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="362.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (79 samples, 0.06%)</title><rect x="359.6" y="579.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.6" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (79 samples, 0.06%)</title><rect x="359.6" y="563.0" width="0.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="362.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (190 samples, 0.15%)</title><rect x="360.4" y="611.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.4" y="622.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (45 samples, 0.03%)</title><rect x="360.4" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.4" y="606.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (45 samples, 0.03%)</title><rect x="360.4" y="579.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="363.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (145 samples, 0.11%)</title><rect x="360.8" y="595.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="363.8" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (34 samples, 0.03%)</title><rect x="360.8" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.8" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (34 samples, 0.03%)</title><rect x="360.8" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.8" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$154/692530350.get$Lambda (34 samples, 0.03%)</title><rect x="360.8" y="547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="363.8" y="558.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$154 (34 samples, 0.03%)</title><rect x="360.8" y="531.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="363.8" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (111 samples, 0.09%)</title><rect x="361.1" y="579.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="364.1" y="590.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (111 samples, 0.09%)</title><rect x="361.1" y="563.0" width="1.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="364.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (244 samples, 0.19%)</title><rect x="362.1" y="611.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.1" y="622.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (244 samples, 0.19%)</title><rect x="362.1" y="595.0" width="2.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="365.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Utility.fromByteBuffer (36 samples, 0.03%)</title><rect x="364.3" y="659.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.3" y="670.0"></text>
</g>
<g>
<title>byte[] (36 samples, 0.03%)</title><rect x="364.3" y="643.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="367.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (101 samples, 0.08%)</title><rect x="364.6" y="723.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (101 samples, 0.08%)</title><rect x="364.6" y="707.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (99 samples, 0.08%)</title><rect x="364.6" y="691.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (99 samples, 0.08%)</title><rect x="364.6" y="675.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.6" y="686.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (99 samples, 0.08%)</title><rect x="364.6" y="659.0" width="0.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="367.6" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (1,733 samples, 1.34%)</title><rect x="365.6" y="723.0" width="15.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.6" y="734.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1,733 samples, 1.34%)</title><rect x="365.6" y="707.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="368.6" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$108/2055343363.run (1,733 samples, 1.34%)</title><rect x="365.6" y="691.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.6" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (1,733 samples, 1.34%)</title><rect x="365.6" y="675.0" width="15.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.6" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (1,733 samples, 1.34%)</title><rect x="365.6" y="659.0" width="15.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.6" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (1,733 samples, 1.34%)</title><rect x="365.6" y="643.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.6" y="654.0"></text>
</g>
<g>
<title>java.io.DataOutputStream (29 samples, 0.02%)</title><rect x="365.6" y="627.0" width="0.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="368.6" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (1,700 samples, 1.31%)</title><rect x="365.9" y="627.0" width="15.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.9" y="638.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1,622 samples, 1.25%)</title><rect x="365.9" y="611.0" width="14.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="368.9" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1,622 samples, 1.25%)</title><rect x="365.9" y="595.0" width="14.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="368.9" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1,622 samples, 1.25%)</title><rect x="365.9" y="579.0" width="14.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="368.9" y="590.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (1,622 samples, 1.25%)</title><rect x="365.9" y="563.0" width="14.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.9" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (992 samples, 0.76%)</title><rect x="365.9" y="547.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.9" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (992 samples, 0.76%)</title><rect x="365.9" y="531.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (990 samples, 0.76%)</title><rect x="365.9" y="515.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.9" y="526.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (990 samples, 0.76%)</title><rect x="365.9" y="499.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.9" y="510.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (926 samples, 0.71%)</title><rect x="365.9" y="483.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.9" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (926 samples, 0.71%)</title><rect x="365.9" y="467.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.9" y="478.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (926 samples, 0.71%)</title><rect x="365.9" y="451.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.9" y="462.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (926 samples, 0.71%)</title><rect x="365.9" y="435.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.9" y="446.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (926 samples, 0.71%)</title><rect x="365.9" y="419.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="368.9" y="430.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (925 samples, 0.71%)</title><rect x="365.9" y="403.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.9" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (925 samples, 0.71%)</title><rect x="365.9" y="387.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.9" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (925 samples, 0.71%)</title><rect x="365.9" y="371.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.9" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (925 samples, 0.71%)</title><rect x="365.9" y="355.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.9" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (925 samples, 0.71%)</title><rect x="365.9" y="339.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.9" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (925 samples, 0.71%)</title><rect x="365.9" y="323.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.9" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (925 samples, 0.71%)</title><rect x="365.9" y="307.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.9" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (925 samples, 0.71%)</title><rect x="365.9" y="291.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.9" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (842 samples, 0.65%)</title><rect x="365.9" y="275.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.9" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (842 samples, 0.65%)</title><rect x="365.9" y="259.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.9" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (842 samples, 0.65%)</title><rect x="365.9" y="243.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.9" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (842 samples, 0.65%)</title><rect x="365.9" y="227.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.9" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (304 samples, 0.23%)</title><rect x="365.9" y="211.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.9" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (263 samples, 0.20%)</title><rect x="365.9" y="195.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.9" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (241 samples, 0.19%)</title><rect x="365.9" y="179.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="368.9" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (241 samples, 0.19%)</title><rect x="365.9" y="163.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.9" y="174.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (126 samples, 0.10%)</title><rect x="366.1" y="147.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.1" y="158.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (114 samples, 0.09%)</title><rect x="366.2" y="131.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.2" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (96 samples, 0.07%)</title><rect x="366.4" y="115.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.4" y="126.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (96 samples, 0.07%)</title><rect x="366.4" y="99.0" width="0.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="369.4" y="110.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (92 samples, 0.07%)</title><rect x="367.2" y="147.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.2" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (92 samples, 0.07%)</title><rect x="367.2" y="131.0" width="0.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="370.2" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (41 samples, 0.03%)</title><rect x="368.3" y="195.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="371.3" y="206.0"></text>
</g>
<g>
<title>java.lang.Object[] (35 samples, 0.03%)</title><rect x="368.6" y="211.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="371.6" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (291 samples, 0.22%)</title><rect x="369.0" y="211.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.0" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (278 samples, 0.21%)</title><rect x="369.2" y="195.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.2" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (254 samples, 0.20%)</title><rect x="369.4" y="179.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.4" y="190.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (254 samples, 0.20%)</title><rect x="369.4" y="163.0" width="2.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="372.4" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (204 samples, 0.16%)</title><rect x="371.7" y="211.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.7" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (175 samples, 0.13%)</title><rect x="371.7" y="195.0" width="1.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="374.7" y="206.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (29 samples, 0.02%)</title><rect x="373.3" y="195.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="376.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (29 samples, 0.02%)</title><rect x="373.3" y="179.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="376.3" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (29 samples, 0.02%)</title><rect x="373.3" y="163.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="376.3" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (29 samples, 0.02%)</title><rect x="373.3" y="147.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.3" y="158.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (29 samples, 0.02%)</title><rect x="373.3" y="131.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="376.3" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (29 samples, 0.02%)</title><rect x="373.3" y="115.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.3" y="126.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (83 samples, 0.06%)</title><rect x="373.5" y="275.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="376.5" y="286.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (83 samples, 0.06%)</title><rect x="373.5" y="259.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (83 samples, 0.06%)</title><rect x="373.5" y="243.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="376.5" y="254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (83 samples, 0.06%)</title><rect x="373.5" y="227.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.5" y="238.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (83 samples, 0.06%)</title><rect x="373.5" y="211.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="376.5" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (83 samples, 0.06%)</title><rect x="373.5" y="195.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="376.5" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (83 samples, 0.06%)</title><rect x="373.5" y="179.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="376.5" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (83 samples, 0.06%)</title><rect x="373.5" y="163.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.5" y="174.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (83 samples, 0.06%)</title><rect x="373.5" y="147.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="376.5" y="158.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (81 samples, 0.06%)</title><rect x="373.6" y="131.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="376.6" y="142.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (47 samples, 0.04%)</title><rect x="373.7" y="115.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="376.7" y="126.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (63 samples, 0.05%)</title><rect x="374.3" y="483.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.3" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (58 samples, 0.04%)</title><rect x="374.3" y="467.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.3" y="478.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.get (58 samples, 0.04%)</title><rect x="374.3" y="451.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.3" y="462.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject$MarshalledObjectInputStream.&lt;init&gt; (49 samples, 0.04%)</title><rect x="374.4" y="435.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="377.4" y="446.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (49 samples, 0.04%)</title><rect x="374.4" y="419.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="377.4" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (49 samples, 0.04%)</title><rect x="374.4" y="403.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="377.4" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (45 samples, 0.03%)</title><rect x="374.4" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="377.4" y="398.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (404 samples, 0.31%)</title><rect x="374.9" y="547.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.9" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (404 samples, 0.31%)</title><rect x="374.9" y="531.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="377.9" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (404 samples, 0.31%)</title><rect x="374.9" y="515.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.9" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (398 samples, 0.31%)</title><rect x="374.9" y="499.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="377.9" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (398 samples, 0.31%)</title><rect x="374.9" y="483.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.9" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (392 samples, 0.30%)</title><rect x="374.9" y="467.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="377.9" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (375 samples, 0.29%)</title><rect x="375.0" y="451.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="378.0" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (375 samples, 0.29%)</title><rect x="375.0" y="435.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.0" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (368 samples, 0.28%)</title><rect x="375.1" y="419.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.1" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (356 samples, 0.27%)</title><rect x="375.1" y="403.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.1" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (347 samples, 0.27%)</title><rect x="375.2" y="387.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.2" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (320 samples, 0.25%)</title><rect x="375.4" y="371.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="378.4" y="382.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (311 samples, 0.24%)</title><rect x="375.5" y="355.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="378.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (311 samples, 0.24%)</title><rect x="375.5" y="339.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="378.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (311 samples, 0.24%)</title><rect x="375.5" y="323.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.5" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (311 samples, 0.24%)</title><rect x="375.5" y="307.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="378.5" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (293 samples, 0.23%)</title><rect x="375.6" y="291.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.6" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (293 samples, 0.23%)</title><rect x="375.6" y="275.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.6" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (137 samples, 0.11%)</title><rect x="375.6" y="259.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="378.6" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (116 samples, 0.09%)</title><rect x="375.8" y="243.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="378.8" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (103 samples, 0.08%)</title><rect x="375.8" y="227.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="378.8" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (93 samples, 0.07%)</title><rect x="375.9" y="211.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="378.9" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (93 samples, 0.07%)</title><rect x="375.9" y="195.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.9" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (82 samples, 0.06%)</title><rect x="376.0" y="179.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.0" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (63 samples, 0.05%)</title><rect x="376.0" y="163.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.0" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (63 samples, 0.05%)</title><rect x="376.0" y="147.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="379.0" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (54 samples, 0.04%)</title><rect x="376.1" y="131.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.1" y="142.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (48 samples, 0.04%)</title><rect x="376.1" y="115.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.1" y="126.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (48 samples, 0.04%)</title><rect x="376.1" y="99.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.1" y="110.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (48 samples, 0.04%)</title><rect x="376.1" y="83.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="379.1" y="94.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (48 samples, 0.04%)</title><rect x="376.1" y="67.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="379.1" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (33 samples, 0.03%)</title><rect x="376.2" y="51.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.2" y="62.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (33 samples, 0.03%)</title><rect x="376.2" y="35.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="379.2" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (55 samples, 0.04%)</title><rect x="376.9" y="259.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.9" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (29 samples, 0.02%)</title><rect x="376.9" y="243.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.9" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (101 samples, 0.08%)</title><rect x="377.4" y="259.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.4" y="270.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (101 samples, 0.08%)</title><rect x="377.4" y="243.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="380.4" y="254.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (42 samples, 0.03%)</title><rect x="378.6" y="547.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.6" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (42 samples, 0.03%)</title><rect x="378.6" y="531.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.6" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (42 samples, 0.03%)</title><rect x="378.6" y="515.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.6" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (42 samples, 0.03%)</title><rect x="378.6" y="499.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="381.6" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (38 samples, 0.03%)</title><rect x="378.6" y="483.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.6" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (183 samples, 0.14%)</title><rect x="378.9" y="547.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="381.9" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (183 samples, 0.14%)</title><rect x="378.9" y="531.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="381.9" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (183 samples, 0.14%)</title><rect x="378.9" y="515.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.9" y="526.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (183 samples, 0.14%)</title><rect x="378.9" y="499.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="381.9" y="510.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (183 samples, 0.14%)</title><rect x="378.9" y="483.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="381.9" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (183 samples, 0.14%)</title><rect x="378.9" y="467.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="381.9" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (95 samples, 0.07%)</title><rect x="379.0" y="451.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="382.0" y="462.0"></text>
</g>
<g>
<title>byte[] (49 samples, 0.04%)</title><rect x="379.1" y="435.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="382.1" y="446.0"></text>
</g>
<g>
<title>char[] (29 samples, 0.02%)</title><rect x="379.5" y="435.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="382.5" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.&lt;init&gt; (39 samples, 0.03%)</title><rect x="379.9" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.9" y="462.0"></text>
</g>
<g>
<title>int[] (29 samples, 0.02%)</title><rect x="379.9" y="435.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="382.9" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$ReplaceTable.&lt;init&gt; (39 samples, 0.03%)</title><rect x="380.3" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="383.3" y="462.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (78 samples, 0.06%)</title><rect x="380.6" y="611.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="383.6" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (78 samples, 0.06%)</title><rect x="380.6" y="595.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.6" y="606.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (78 samples, 0.06%)</title><rect x="380.6" y="579.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="383.6" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (78 samples, 0.06%)</title><rect x="380.6" y="563.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.6" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (66 samples, 0.05%)</title><rect x="380.7" y="547.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.7" y="558.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (88,947 samples, 68.53%)</title><rect x="381.3" y="771.0" width="808.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.3" y="782.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,310 samples, 1.01%)</title><rect x="381.3" y="755.0" width="11.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.3" y="766.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,310 samples, 1.01%)</title><rect x="381.3" y="739.0" width="11.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="384.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (87,637 samples, 67.52%)</title><rect x="393.2" y="755.0" width="796.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="396.2" y="766.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (87,637 samples, 67.52%)</title><rect x="393.2" y="739.0" width="796.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.2" y="750.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (87,637 samples, 67.52%)</title><rect x="393.2" y="723.0" width="796.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.2" y="734.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (71,035 samples, 54.73%)</title><rect x="393.2" y="707.0" width="645.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="396.2" y="718.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (71,035 samples, 54.73%)</title><rect x="393.2" y="691.0" width="645.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.2" y="702.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (69,523 samples, 53.57%)</title><rect x="393.2" y="675.0" width="632.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="396.2" y="686.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,281 samples, 0.99%)</title><rect x="393.2" y="659.0" width="11.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="396.2" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,281 samples, 0.99%)</title><rect x="393.2" y="643.0" width="11.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="396.2" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,281 samples, 0.99%)</title><rect x="393.2" y="627.0" width="11.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="396.2" y="638.0"></text>
</g>
<g>
<title>java.lang.String (565 samples, 0.44%)</title><rect x="393.2" y="611.0" width="5.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="396.2" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (716 samples, 0.55%)</title><rect x="398.4" y="611.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="401.4" y="622.0"></text>
</g>
<g>
<title>byte[] (716 samples, 0.55%)</title><rect x="398.4" y="595.0" width="6.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="401.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1,152 samples, 0.89%)</title><rect x="404.9" y="659.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.9" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,152 samples, 0.89%)</title><rect x="404.9" y="643.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.9" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,152 samples, 0.89%)</title><rect x="404.9" y="627.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.9" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,152 samples, 0.89%)</title><rect x="404.9" y="611.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="407.9" y="622.0"></text>
</g>
<g>
<title>java.lang.String (475 samples, 0.37%)</title><rect x="404.9" y="595.0" width="4.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="407.9" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (677 samples, 0.52%)</title><rect x="409.2" y="595.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.2" y="606.0"></text>
</g>
<g>
<title>byte[] (677 samples, 0.52%)</title><rect x="409.2" y="579.0" width="6.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="412.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/HttpService.entity (67,090 samples, 51.69%)</title><rect x="415.4" y="659.0" width="609.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="418.4" y="670.0">ru/mail/polis/service/s3ponia/HttpService.entity</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicatedService.entity (67,090 samples, 51.69%)</title><rect x="415.4" y="643.0" width="609.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="418.4" y="654.0">ru/mail/polis/service/s3ponia/ReplicatedService.entity</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1451999517.linkToTargetMethod (342 samples, 0.26%)</title><rect x="415.4" y="627.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.4" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2057114726.invoke (342 samples, 0.26%)</title><rect x="415.4" y="611.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="418.4" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (342 samples, 0.26%)</title><rect x="415.4" y="595.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (104 samples, 0.08%)</title><rect x="415.4" y="579.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.4" y="590.0"></text>
</g>
<g>
<title>java.lang.String (104 samples, 0.08%)</title><rect x="415.4" y="563.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="418.4" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (238 samples, 0.18%)</title><rect x="416.3" y="579.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (238 samples, 0.18%)</title><rect x="416.3" y="563.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.3" y="574.0"></text>
</g>
<g>
<title>byte[] (238 samples, 0.18%)</title><rect x="416.3" y="547.0" width="2.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="419.3" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (455 samples, 0.35%)</title><rect x="418.5" y="627.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.5" y="638.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (349 samples, 0.27%)</title><rect x="418.5" y="611.0" width="3.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="421.5" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (106 samples, 0.08%)</title><rect x="421.6" y="611.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="424.6" y="622.0"></text>
</g>
<g>
<title>byte[] (106 samples, 0.08%)</title><rect x="421.6" y="595.0" width="1.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="424.6" y="606.0"></text>
</g>
<g>
<title>java/util/Collection.stream (800 samples, 0.62%)</title><rect x="422.6" y="627.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (338 samples, 0.26%)</title><rect x="422.6" y="611.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.6" y="622.0"></text>
</g>
<g>
<title>java.util.HashMap$ValueSpliterator (338 samples, 0.26%)</title><rect x="422.6" y="595.0" width="3.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="425.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (462 samples, 0.36%)</title><rect x="425.7" y="611.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="428.7" y="622.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (462 samples, 0.36%)</title><rect x="425.7" y="595.0" width="4.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="428.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (264 samples, 0.20%)</title><rect x="429.9" y="627.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="432.9" y="638.0"></text>
</g>
<g>
<title>java.util.stream.Collectors$CollectorImpl (264 samples, 0.20%)</title><rect x="429.9" y="611.0" width="2.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="432.9" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1,381 samples, 1.06%)</title><rect x="432.3" y="627.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1,381 samples, 1.06%)</title><rect x="432.3" y="611.0" width="12.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1,381 samples, 1.06%)</title><rect x="432.3" y="595.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="435.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1,129 samples, 0.87%)</title><rect x="432.3" y="579.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="435.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (778 samples, 0.60%)</title><rect x="432.3" y="563.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (778 samples, 0.60%)</title><rect x="432.3" y="547.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (465 samples, 0.36%)</title><rect x="432.3" y="531.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.tryAdvance (465 samples, 0.36%)</title><rect x="432.3" y="515.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="435.3" y="526.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1$1.accept (465 samples, 0.36%)</title><rect x="432.3" y="499.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="435.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (465 samples, 0.36%)</title><rect x="432.3" y="483.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="435.3" y="494.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$12/292917034.accept (465 samples, 0.36%)</title><rect x="432.3" y="467.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="435.3" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (465 samples, 0.36%)</title><rect x="432.3" y="451.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.3" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (465 samples, 0.36%)</title><rect x="432.3" y="435.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="435.3" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (465 samples, 0.36%)</title><rect x="432.3" y="419.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="435.3" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (465 samples, 0.36%)</title><rect x="432.3" y="403.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="435.3" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (465 samples, 0.36%)</title><rect x="432.3" y="387.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="435.3" y="398.0"></text>
</g>
<g>
<title>java.lang.Object[] (465 samples, 0.36%)</title><rect x="432.3" y="371.0" width="4.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="435.3" y="382.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1$1.begin (313 samples, 0.24%)</title><rect x="436.5" y="531.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="439.5" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (313 samples, 0.24%)</title><rect x="436.5" y="515.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="439.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$11/1630521067.get (313 samples, 0.24%)</title><rect x="436.5" y="499.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="439.5" y="510.0"></text>
</g>
<g>
<title>java.util.ArrayList (313 samples, 0.24%)</title><rect x="436.5" y="483.0" width="2.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="439.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (351 samples, 0.27%)</title><rect x="439.3" y="563.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1.opWrapSink (351 samples, 0.27%)</title><rect x="439.3" y="547.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="442.3" y="558.0"></text>
</g>
<g>
<title>java.util.stream.SliceOps$1$1 (351 samples, 0.27%)</title><rect x="439.3" y="531.0" width="3.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="442.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (252 samples, 0.19%)</title><rect x="442.5" y="579.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.5" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (252 samples, 0.19%)</title><rect x="442.5" y="563.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.5" y="574.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3ReducingSink (252 samples, 0.19%)</title><rect x="442.5" y="547.0" width="2.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="445.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.limit (696 samples, 0.54%)</title><rect x="444.8" y="627.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps.makeRef (696 samples, 0.54%)</title><rect x="444.8" y="611.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="447.8" y="622.0"></text>
</g>
<g>
<title>java.util.stream.SliceOps$1 (696 samples, 0.54%)</title><rect x="444.8" y="595.0" width="6.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="447.8" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (967 samples, 0.75%)</title><rect x="451.2" y="627.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="454.2" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (967 samples, 0.75%)</title><rect x="451.2" y="611.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="454.2" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (581 samples, 0.45%)</title><rect x="451.2" y="595.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="454.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (581 samples, 0.45%)</title><rect x="451.2" y="579.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="454.2" y="590.0"></text>
</g>
<g>
<title>byte[] (581 samples, 0.45%)</title><rect x="451.2" y="563.0" width="5.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="454.2" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (386 samples, 0.30%)</title><rect x="456.4" y="595.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.4" y="606.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (386 samples, 0.30%)</title><rect x="456.4" y="579.0" width="3.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="459.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.entity (6,952 samples, 5.36%)</title><rect x="459.9" y="627.0" width="63.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.9" y="638.0">ru/mail..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (300 samples, 0.23%)</title><rect x="459.9" y="611.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.9" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (300 samples, 0.23%)</title><rect x="459.9" y="595.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$132/1969245623.get$Lambda (300 samples, 0.23%)</title><rect x="459.9" y="579.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.9" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.AsyncService$$Lambda$132 (300 samples, 0.23%)</title><rect x="459.9" y="563.0" width="2.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="462.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1,280 samples, 0.99%)</title><rect x="462.7" y="611.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1,280 samples, 0.99%)</title><rect x="462.7" y="595.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="465.7" y="606.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (759 samples, 0.58%)</title><rect x="462.7" y="579.0" width="6.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="465.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (521 samples, 0.40%)</title><rect x="469.6" y="579.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.6" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture (521 samples, 0.40%)</title><rect x="469.6" y="563.0" width="4.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="472.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.getAsync (1,319 samples, 1.02%)</title><rect x="474.3" y="611.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="477.3" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (426 samples, 0.33%)</title><rect x="474.3" y="595.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="477.3" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (426 samples, 0.33%)</title><rect x="474.3" y="579.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$140/13936958.get$Lambda (426 samples, 0.33%)</title><rect x="474.3" y="563.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="477.3" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.AsyncService$$Lambda$140 (426 samples, 0.33%)</title><rect x="474.3" y="547.0" width="3.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="477.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (893 samples, 0.69%)</title><rect x="478.2" y="595.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="481.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (893 samples, 0.69%)</title><rect x="478.2" y="579.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="481.2" y="590.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$AsyncSupply (457 samples, 0.35%)</title><rect x="478.2" y="563.0" width="4.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="481.2" y="574.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture (424 samples, 0.33%)</title><rect x="482.3" y="563.0" width="3.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="485.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (2,562 samples, 1.97%)</title><rect x="486.3" y="611.0" width="23.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="489.3" y="622.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (2,562 samples, 1.97%)</title><rect x="486.3" y="595.0" width="23.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.3" y="606.0">r..</text>
</g>
<g>
<title>java/lang/String.stripLeading (1,067 samples, 0.82%)</title><rect x="486.3" y="579.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="489.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.stripLeading (1,067 samples, 0.82%)</title><rect x="486.3" y="563.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.3" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,067 samples, 0.82%)</title><rect x="486.3" y="547.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.3" y="558.0"></text>
</g>
<g>
<title>java.lang.String (474 samples, 0.37%)</title><rect x="486.3" y="531.0" width="4.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="489.3" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (593 samples, 0.46%)</title><rect x="490.6" y="531.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="493.6" y="542.0"></text>
</g>
<g>
<title>byte[] (593 samples, 0.46%)</title><rect x="490.6" y="515.0" width="5.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="493.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,002 samples, 0.77%)</title><rect x="496.0" y="579.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,002 samples, 0.77%)</title><rect x="496.0" y="563.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.0" y="574.0"></text>
</g>
<g>
<title>java.lang.String (497 samples, 0.38%)</title><rect x="496.0" y="547.0" width="4.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="499.0" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (505 samples, 0.39%)</title><rect x="500.5" y="547.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="503.5" y="558.0"></text>
</g>
<g>
<title>byte[] (505 samples, 0.39%)</title><rect x="500.5" y="531.0" width="4.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="503.5" y="542.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.Header (493 samples, 0.38%)</title><rect x="505.1" y="579.0" width="4.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="508.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Utility.byteBufferFromString (1,491 samples, 1.15%)</title><rect x="509.6" y="611.0" width="13.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="512.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (443 samples, 0.34%)</title><rect x="509.6" y="595.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.6" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (443 samples, 0.34%)</title><rect x="509.6" y="579.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="512.6" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (443 samples, 0.34%)</title><rect x="509.6" y="563.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.6" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (443 samples, 0.34%)</title><rect x="509.6" y="547.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="512.6" y="558.0"></text>
</g>
<g>
<title>byte[] (443 samples, 0.34%)</title><rect x="509.6" y="531.0" width="4.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="512.6" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,048 samples, 0.81%)</title><rect x="513.6" y="595.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="516.6" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,048 samples, 0.81%)</title><rect x="513.6" y="579.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="516.6" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,048 samples, 0.81%)</title><rect x="513.6" y="563.0" width="9.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="516.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (1,470 samples, 1.13%)</title><rect x="523.2" y="627.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="526.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (1,470 samples, 1.13%)</title><rect x="523.2" y="611.0" width="13.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (931 samples, 0.72%)</title><rect x="523.2" y="595.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="526.2" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (931 samples, 0.72%)</title><rect x="523.2" y="579.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="526.2" y="590.0"></text>
</g>
<g>
<title>java.lang.String (533 samples, 0.41%)</title><rect x="523.2" y="563.0" width="4.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="526.2" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (398 samples, 0.31%)</title><rect x="528.0" y="563.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="531.0" y="574.0"></text>
</g>
<g>
<title>byte[] (398 samples, 0.31%)</title><rect x="528.0" y="547.0" width="3.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="531.0" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.Header (539 samples, 0.42%)</title><rect x="531.6" y="595.0" width="4.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="534.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.all (218 samples, 0.17%)</title><rect x="536.5" y="627.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="539.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.all (218 samples, 0.17%)</title><rect x="536.5" y="611.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="539.5" y="622.0"></text>
</g>
<g>
<title>java.lang.String[] (218 samples, 0.17%)</title><rect x="536.5" y="595.0" width="2.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="539.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNodeReplicas (428 samples, 0.33%)</title><rect x="538.5" y="627.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNodeReplicas (428 samples, 0.33%)</title><rect x="538.5" y="611.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="541.5" y="622.0"></text>
</g>
<g>
<title>java.lang.String[] (243 samples, 0.19%)</title><rect x="538.5" y="595.0" width="2.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="541.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceFactory$$Lambda$29/2011482127.apply (185 samples, 0.14%)</title><rect x="540.7" y="595.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.7" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (185 samples, 0.14%)</title><rect x="540.7" y="579.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="543.7" y="590.0"></text>
</g>
<g>
<title>java.lang.Integer (185 samples, 0.14%)</title><rect x="540.7" y="563.0" width="1.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="543.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicatedService.resolveGetProxyResult (1,318 samples, 1.02%)</title><rect x="542.4" y="627.0" width="12.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="545.4" y="638.0"></text>
</g>
<g>
<title>java/util/Collection.stream (42 samples, 0.03%)</title><rect x="542.4" y="611.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="545.4" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (276 samples, 0.21%)</title><rect x="543.0" y="611.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (276 samples, 0.21%)</title><rect x="543.0" y="595.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="546.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (276 samples, 0.21%)</title><rect x="543.0" y="579.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="546.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (262 samples, 0.20%)</title><rect x="543.0" y="563.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="546.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (254 samples, 0.20%)</title><rect x="543.0" y="547.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.0" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (229 samples, 0.18%)</title><rect x="543.0" y="531.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="546.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (229 samples, 0.18%)</title><rect x="543.0" y="515.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (72 samples, 0.06%)</title><rect x="543.0" y="499.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$12/292917034.accept (72 samples, 0.06%)</title><rect x="543.0" y="483.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.0" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (72 samples, 0.06%)</title><rect x="543.0" y="467.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="546.0" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (72 samples, 0.06%)</title><rect x="543.0" y="451.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="546.0" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (72 samples, 0.06%)</title><rect x="543.0" y="435.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="546.0" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (72 samples, 0.06%)</title><rect x="543.0" y="419.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="546.0" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (72 samples, 0.06%)</title><rect x="543.0" y="403.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="546.0" y="414.0"></text>
</g>
<g>
<title>java.lang.Object[] (72 samples, 0.06%)</title><rect x="543.0" y="387.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="546.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicatedService$$Lambda$214/292882704.apply (157 samples, 0.12%)</title><rect x="543.6" y="499.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="546.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.fromResponse (157 samples, 0.12%)</title><rect x="543.6" y="483.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (35 samples, 0.03%)</title><rect x="543.6" y="467.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="546.6" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (35 samples, 0.03%)</title><rect x="543.6" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.6" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (35 samples, 0.03%)</title><rect x="543.6" y="435.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="546.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.getDeadFlagTimeStampFromResponse (112 samples, 0.09%)</title><rect x="543.9" y="467.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="546.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (97 samples, 0.07%)</title><rect x="544.1" y="451.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (97 samples, 0.07%)</title><rect x="544.1" y="435.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="547.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.stripLeading (43 samples, 0.03%)</title><rect x="544.1" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="547.1" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.stripLeading (43 samples, 0.03%)</title><rect x="544.1" y="403.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="547.1" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (43 samples, 0.03%)</title><rect x="544.1" y="387.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="547.1" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (44 samples, 0.03%)</title><rect x="544.5" y="419.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="547.5" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (44 samples, 0.03%)</title><rect x="544.5" y="403.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="547.5" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (78 samples, 0.06%)</title><rect x="545.5" y="611.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.5" y="622.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (78 samples, 0.06%)</title><rect x="545.5" y="595.0" width="0.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="548.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (478 samples, 0.37%)</title><rect x="546.2" y="611.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="549.2" y="622.0"></text>
</g>
<g>
<title>one.nio.http.Response (76 samples, 0.06%)</title><rect x="546.2" y="595.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="549.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (402 samples, 0.31%)</title><rect x="546.9" y="595.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="549.9" y="606.0"></text>
</g>
<g>
<title>byte[] (115 samples, 0.09%)</title><rect x="546.9" y="579.0" width="1.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="549.9" y="590.0"></text>
</g>
<g>
<title>java.lang.String[] (135 samples, 0.10%)</title><rect x="547.9" y="579.0" width="1.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="550.9" y="590.0"></text>
</g>
<g>
<title>java.lang.String (152 samples, 0.12%)</title><rect x="549.1" y="579.0" width="1.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="552.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.valueResponseComparator (324 samples, 0.25%)</title><rect x="550.5" y="611.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="553.5" y="622.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (93 samples, 0.07%)</title><rect x="550.5" y="595.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.5" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (93 samples, 0.07%)</title><rect x="550.5" y="579.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="553.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (93 samples, 0.07%)</title><rect x="550.5" y="563.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.5" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$230/711652343.get$Lambda (93 samples, 0.07%)</title><rect x="550.5" y="547.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="553.5" y="558.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$230 (93 samples, 0.07%)</title><rect x="550.5" y="531.0" width="0.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="553.5" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator.reversed (63 samples, 0.05%)</title><rect x="551.4" y="595.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="554.4" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.reverseOrder (63 samples, 0.05%)</title><rect x="551.4" y="579.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="554.4" y="590.0"></text>
</g>
<g>
<title>java.util.Collections$ReverseComparator2 (63 samples, 0.05%)</title><rect x="551.4" y="563.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="554.4" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (168 samples, 0.13%)</title><rect x="551.9" y="595.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="554.9" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (168 samples, 0.13%)</title><rect x="551.9" y="579.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="554.9" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (168 samples, 0.13%)</title><rect x="551.9" y="563.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="554.9" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$246/1020616468.get$Lambda (168 samples, 0.13%)</title><rect x="551.9" y="547.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="554.9" y="558.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$246 (168 samples, 0.13%)</title><rect x="551.9" y="531.0" width="1.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="554.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Utility.fromByteBuffer (100 samples, 0.08%)</title><rect x="553.5" y="611.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="556.5" y="622.0"></text>
</g>
<g>
<title>byte[] (100 samples, 0.08%)</title><rect x="553.5" y="595.0" width="0.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="556.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicationConfiguration.parseOrDefault (1,946 samples, 1.50%)</title><rect x="554.4" y="627.0" width="17.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="557.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicationConfiguration.parse (1,946 samples, 1.50%)</title><rect x="554.4" y="611.0" width="17.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="557.4" y="622.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (439 samples, 0.34%)</title><rect x="554.4" y="595.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="557.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (128 samples, 0.10%)</title><rect x="554.4" y="579.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="557.4" y="590.0"></text>
</g>
<g>
<title>com.google.common.base.CharMatcher$Is (128 samples, 0.10%)</title><rect x="554.4" y="563.0" width="1.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="557.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (311 samples, 0.24%)</title><rect x="555.5" y="579.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="558.5" y="590.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1 (91 samples, 0.07%)</title><rect x="555.5" y="563.0" width="0.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="558.5" y="574.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter (220 samples, 0.17%)</title><rect x="556.4" y="563.0" width="2.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="559.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (1,395 samples, 1.07%)</title><rect x="558.4" y="595.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="561.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (579 samples, 0.45%)</title><rect x="558.4" y="579.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="561.4" y="590.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (579 samples, 0.45%)</title><rect x="558.4" y="563.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="561.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (579 samples, 0.45%)</title><rect x="558.4" y="547.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="561.4" y="558.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (579 samples, 0.45%)</title><rect x="558.4" y="531.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="561.4" y="542.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (579 samples, 0.45%)</title><rect x="558.4" y="515.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="561.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (579 samples, 0.45%)</title><rect x="558.4" y="499.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="561.4" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (579 samples, 0.45%)</title><rect x="558.4" y="483.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="561.4" y="494.0"></text>
</g>
<g>
<title>java.lang.String (295 samples, 0.23%)</title><rect x="558.4" y="467.0" width="2.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="561.4" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (284 samples, 0.22%)</title><rect x="561.0" y="467.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="564.0" y="478.0"></text>
</g>
<g>
<title>byte[] (284 samples, 0.22%)</title><rect x="561.0" y="451.0" width="2.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="564.0" y="462.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (200 samples, 0.15%)</title><rect x="563.6" y="579.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.6" y="590.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (200 samples, 0.15%)</title><rect x="563.6" y="563.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.6" y="574.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (200 samples, 0.15%)</title><rect x="563.6" y="547.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="566.6" y="558.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1$1 (200 samples, 0.15%)</title><rect x="563.6" y="531.0" width="1.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="566.6" y="542.0"></text>
</g>
<g>
<title>java.util.ArrayList (115 samples, 0.09%)</title><rect x="565.4" y="579.0" width="1.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="568.4" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (369 samples, 0.28%)</title><rect x="566.5" y="579.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="569.5" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (369 samples, 0.28%)</title><rect x="566.5" y="563.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="569.5" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (369 samples, 0.28%)</title><rect x="566.5" y="547.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.5" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (369 samples, 0.28%)</title><rect x="566.5" y="531.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="569.5" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (369 samples, 0.28%)</title><rect x="566.5" y="515.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.5" y="526.0"></text>
</g>
<g>
<title>java.lang.Object[] (369 samples, 0.28%)</title><rect x="566.5" y="499.0" width="3.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="569.5" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (132 samples, 0.10%)</title><rect x="569.8" y="579.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="572.8" y="590.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableRandomAccessList (132 samples, 0.10%)</title><rect x="569.8" y="563.0" width="1.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="572.8" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.ReplicationConfiguration (112 samples, 0.09%)</title><rect x="571.0" y="595.0" width="1.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="574.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Proxy.proxyReplicas (49,292 samples, 37.98%)</title><rect x="572.1" y="627.0" width="448.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="575.1" y="638.0">ru/mail/polis/util/Proxy.proxyReplicas</text>
</g>
<g>
<title>java.util.ArrayList (175 samples, 0.13%)</title><rect x="572.1" y="611.0" width="1.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="575.1" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (37 samples, 0.03%)</title><rect x="573.7" y="611.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.7" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (37 samples, 0.03%)</title><rect x="573.7" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="576.7" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (37 samples, 0.03%)</title><rect x="573.7" y="579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="576.7" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (37 samples, 0.03%)</title><rect x="573.7" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="576.7" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (37 samples, 0.03%)</title><rect x="573.7" y="547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="576.7" y="558.0"></text>
</g>
<g>
<title>java.lang.Object[] (37 samples, 0.03%)</title><rect x="573.7" y="531.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="576.7" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (342 samples, 0.26%)</title><rect x="574.0" y="611.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="577.0" y="622.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (342 samples, 0.26%)</title><rect x="574.0" y="595.0" width="3.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="577.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Proxy.proxy (48,738 samples, 37.55%)</title><rect x="577.1" y="611.0" width="443.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="580.1" y="622.0">ru/mail/polis/util/Proxy.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (48,738 samples, 37.55%)</title><rect x="577.1" y="595.0" width="443.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="580.1" y="606.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (48,738 samples, 37.55%)</title><rect x="577.1" y="579.0" width="443.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="580.1" y="590.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (417 samples, 0.32%)</title><rect x="577.1" y="563.0" width="3.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="580.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (43,527 samples, 33.54%)</title><rect x="580.9" y="563.0" width="395.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="583.9" y="574.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (12,996 samples, 10.01%)</title><rect x="580.9" y="547.0" width="118.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="583.9" y="558.0">byte[]</text>
</g>
<g>
<title>byte[] (30,531 samples, 23.52%)</title><rect x="699.0" y="547.0" width="277.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="702.0" y="558.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (2,697 samples, 2.08%)</title><rect x="976.6" y="563.0" width="24.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="979.6" y="574.0">o..</text>
</g>
<g>
<title>byte[] (40 samples, 0.03%)</title><rect x="976.6" y="547.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="979.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (73 samples, 0.06%)</title><rect x="977.0" y="547.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="980.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (73 samples, 0.06%)</title><rect x="977.0" y="531.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="980.0" y="542.0"></text>
</g>
<g>
<title>java.lang.String (35 samples, 0.03%)</title><rect x="977.0" y="515.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="980.0" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (38 samples, 0.03%)</title><rect x="977.3" y="515.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="980.3" y="526.0"></text>
</g>
<g>
<title>byte[] (38 samples, 0.03%)</title><rect x="977.3" y="499.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="980.3" y="510.0"></text>
</g>
<g>
<title>one.nio.http.Response (40 samples, 0.03%)</title><rect x="977.7" y="547.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="980.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2,349 samples, 1.81%)</title><rect x="978.0" y="547.0" width="21.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="981.0" y="558.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,349 samples, 1.81%)</title><rect x="978.0" y="531.0" width="21.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="981.0" y="542.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,349 samples, 1.81%)</title><rect x="978.0" y="515.0" width="21.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="981.0" y="526.0">o..</text>
</g>
<g>
<title>char[] (1,797 samples, 1.38%)</title><rect x="978.0" y="499.0" width="16.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="981.0" y="510.0"></text>
</g>
<g>
<title>java.lang.String (232 samples, 0.18%)</title><rect x="994.4" y="499.0" width="2.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="997.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (320 samples, 0.25%)</title><rect x="996.5" y="499.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="999.5" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (320 samples, 0.25%)</title><rect x="996.5" y="483.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="999.5" y="494.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (320 samples, 0.25%)</title><rect x="996.5" y="467.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="999.5" y="478.0"></text>
</g>
<g>
<title>byte[] (320 samples, 0.25%)</title><rect x="996.5" y="451.0" width="2.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="999.5" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (82 samples, 0.06%)</title><rect x="999.4" y="547.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1002.4" y="558.0"></text>
</g>
<g>
<title>java.lang.String[] (82 samples, 0.06%)</title><rect x="999.4" y="531.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1002.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (113 samples, 0.09%)</title><rect x="1000.1" y="547.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1003.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (113 samples, 0.09%)</title><rect x="1000.1" y="531.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1003.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (113 samples, 0.09%)</title><rect x="1000.1" y="515.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1003.1" y="526.0"></text>
</g>
<g>
<title>java.lang.String (50 samples, 0.04%)</title><rect x="1000.1" y="499.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1003.1" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (63 samples, 0.05%)</title><rect x="1000.6" y="499.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1003.6" y="510.0"></text>
</g>
<g>
<title>byte[] (63 samples, 0.05%)</title><rect x="1000.6" y="483.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1003.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (2,013 samples, 1.55%)</title><rect x="1001.1" y="563.0" width="18.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1004.1" y="574.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2,013 samples, 1.55%)</title><rect x="1001.1" y="547.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1004.1" y="558.0"></text>
</g>
<g>
<title>byte[] (2,013 samples, 1.55%)</title><rect x="1001.1" y="531.0" width="18.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1004.1" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (44 samples, 0.03%)</title><rect x="1019.4" y="563.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1022.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (44 samples, 0.03%)</title><rect x="1019.4" y="547.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1022.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (44 samples, 0.03%)</title><rect x="1019.4" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1022.4" y="542.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (40 samples, 0.03%)</title><rect x="1019.8" y="563.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1022.8" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (40 samples, 0.03%)</title><rect x="1019.8" y="547.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1022.8" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (40 samples, 0.03%)</title><rect x="1019.8" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1022.8" y="542.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (40 samples, 0.03%)</title><rect x="1019.8" y="515.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1022.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Utility.byteBufferFromString (561 samples, 0.43%)</title><rect x="1020.2" y="627.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1023.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (171 samples, 0.13%)</title><rect x="1020.2" y="611.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1023.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (171 samples, 0.13%)</title><rect x="1020.2" y="595.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1023.2" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (171 samples, 0.13%)</title><rect x="1020.2" y="579.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1023.2" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (171 samples, 0.13%)</title><rect x="1020.2" y="563.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1023.2" y="574.0"></text>
</g>
<g>
<title>byte[] (171 samples, 0.13%)</title><rect x="1020.2" y="547.0" width="1.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1023.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (390 samples, 0.30%)</title><rect x="1021.8" y="611.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1024.8" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (390 samples, 0.30%)</title><rect x="1021.8" y="595.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1024.8" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (390 samples, 0.30%)</title><rect x="1021.8" y="579.0" width="3.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1024.8" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,512 samples, 1.16%)</title><rect x="1025.3" y="675.0" width="13.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1028.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,512 samples, 1.16%)</title><rect x="1025.3" y="659.0" width="13.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1028.3" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,512 samples, 1.16%)</title><rect x="1025.3" y="643.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.3" y="654.0"></text>
</g>
<g>
<title>java.lang.String (596 samples, 0.46%)</title><rect x="1025.3" y="627.0" width="5.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1028.3" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (916 samples, 0.71%)</title><rect x="1030.7" y="627.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1033.7" y="638.0"></text>
</g>
<g>
<title>byte[] (916 samples, 0.71%)</title><rect x="1030.7" y="611.0" width="8.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1033.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8,630 samples, 6.65%)</title><rect x="1039.1" y="707.0" width="78.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1042.1" y="718.0">one/nio/h..</text>
</g>
<g>
<title>one.nio.http.Request (1,135 samples, 0.87%)</title><rect x="1039.1" y="691.0" width="10.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1042.1" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2,470 samples, 1.90%)</title><rect x="1049.4" y="691.0" width="22.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1052.4" y="702.0">o..</text>
</g>
<g>
<title>java.lang.String[] (2,470 samples, 1.90%)</title><rect x="1049.4" y="675.0" width="22.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1052.4" y="686.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,025 samples, 3.87%)</title><rect x="1071.8" y="691.0" width="45.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1074.8" y="702.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,025 samples, 3.87%)</title><rect x="1071.8" y="675.0" width="45.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1074.8" y="686.0">one/..</text>
</g>
<g>
<title>char[] (3,080 samples, 2.37%)</title><rect x="1071.8" y="659.0" width="28.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1074.8" y="670.0">ch..</text>
</g>
<g>
<title>java.lang.String (691 samples, 0.53%)</title><rect x="1099.8" y="659.0" width="6.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1102.8" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,254 samples, 0.97%)</title><rect x="1106.1" y="659.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1109.1" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,254 samples, 0.97%)</title><rect x="1106.1" y="643.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1109.1" y="654.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,254 samples, 0.97%)</title><rect x="1106.1" y="627.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1109.1" y="638.0"></text>
</g>
<g>
<title>byte[] (1,254 samples, 0.97%)</title><rect x="1106.1" y="611.0" width="11.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1109.1" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7,972 samples, 6.14%)</title><rect x="1117.5" y="707.0" width="72.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1120.5" y="718.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (7,972 samples, 6.14%)</title><rect x="1117.5" y="691.0" width="72.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1120.5" y="702.0">one/nio/..</text>
</g>
<g>
<title>char[] (3,964 samples, 3.05%)</title><rect x="1117.5" y="675.0" width="36.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1120.5" y="686.0">cha..</text>
</g>
<g>
<title>java.lang.String (1,472 samples, 1.13%)</title><rect x="1153.6" y="675.0" width="13.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1156.6" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,536 samples, 1.95%)</title><rect x="1166.9" y="675.0" width="23.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1169.9" y="686.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,536 samples, 1.95%)</title><rect x="1166.9" y="659.0" width="23.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1169.9" y="670.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,536 samples, 1.95%)</title><rect x="1166.9" y="643.0" width="23.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1169.9" y="654.0">j..</text>
</g>
<g>
<title>byte[] (2,536 samples, 1.95%)</title><rect x="1166.9" y="627.0" width="23.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1169.9" y="638.0">b..</text>
</g>
</g>
</svg>
