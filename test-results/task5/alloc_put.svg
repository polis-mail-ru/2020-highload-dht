<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (673,350 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (416,539 samples, 61.86%)</title><rect x="10.0" y="659.0" width="730.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (416,500 samples, 61.85%)</title><rect x="10.1" y="643.0" width="729.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.1" y="654.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (416,500 samples, 61.85%)</title><rect x="10.1" y="627.0" width="729.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.1" y="638.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (22,719 samples, 3.37%)</title><rect x="10.1" y="611.0" width="39.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.1" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (22,718 samples, 3.37%)</title><rect x="10.1" y="595.0" width="39.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.1" y="606.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (22,116 samples, 3.28%)</title><rect x="10.1" y="579.0" width="38.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.1" y="590.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (22,116 samples, 3.28%)</title><rect x="10.1" y="563.0" width="38.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.1" y="574.0">jav..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (22,116 samples, 3.28%)</title><rect x="10.1" y="547.0" width="38.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="13.1" y="558.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (602 samples, 0.09%)</title><rect x="48.8" y="579.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (602 samples, 0.09%)</title><rect x="48.8" y="563.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (602 samples, 0.09%)</title><rect x="48.8" y="547.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (602 samples, 0.09%)</title><rect x="48.8" y="531.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.8" y="542.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (602 samples, 0.09%)</title><rect x="48.8" y="515.0" width="1.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="51.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$78/959660539.run (294,085 samples, 43.67%)</title><rect x="49.9" y="611.0" width="515.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.9" y="622.0">ru/mail/polis/service/s3ponia/AsyncService$$Lambda$78/959660539.run</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$put$3 (294,085 samples, 43.67%)</title><rect x="49.9" y="595.0" width="515.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.9" y="606.0">ru/mail/polis/service/s3ponia/AsyncService.lambda$put$3</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.putImpl (294,085 samples, 43.67%)</title><rect x="49.9" y="579.0" width="515.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.9" y="590.0">ru/mail/polis/service/s3ponia/AsyncService.putImpl</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/133406561.linkToTargetMethod (560 samples, 0.08%)</title><rect x="49.9" y="563.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.9" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1277147491.invoke (560 samples, 0.08%)</title><rect x="49.9" y="547.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.9" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (560 samples, 0.08%)</title><rect x="49.9" y="531.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.9" y="542.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (212 samples, 0.03%)</title><rect x="49.9" y="515.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.9" y="526.0"></text>
</g>
<g>
<title>java.lang.String (212 samples, 0.03%)</title><rect x="49.9" y="499.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="52.9" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (348 samples, 0.05%)</title><rect x="50.3" y="515.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (348 samples, 0.05%)</title><rect x="50.3" y="499.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.3" y="510.0"></text>
</g>
<g>
<title>byte[] (348 samples, 0.05%)</title><rect x="50.3" y="483.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="53.3" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/413968374.linkToTargetMethod (13,384 samples, 1.99%)</title><rect x="50.9" y="563.0" width="23.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.9" y="574.0">j..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/453151076.invokeStatic (13,384 samples, 1.99%)</title><rect x="50.9" y="547.0" width="23.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.9" y="558.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$79/524095067.get$Lambda (13,384 samples, 1.99%)</title><rect x="50.9" y="531.0" width="23.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.9" y="542.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.AsyncService$$Lambda$79 (13,384 samples, 1.99%)</title><rect x="50.9" y="515.0" width="23.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="53.9" y="526.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16,559 samples, 2.46%)</title><rect x="74.3" y="563.0" width="29.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.3" y="574.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16,559 samples, 2.46%)</title><rect x="74.3" y="547.0" width="29.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="77.3" y="558.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (16,559 samples, 2.46%)</title><rect x="74.3" y="531.0" width="29.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="77.3" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (295 samples, 0.04%)</title><rect x="103.4" y="563.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (295 samples, 0.04%)</title><rect x="103.4" y="547.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (295 samples, 0.04%)</title><rect x="103.4" y="531.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (295 samples, 0.04%)</title><rect x="103.4" y="515.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (295 samples, 0.04%)</title><rect x="103.4" y="499.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.4" y="510.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (295 samples, 0.04%)</title><rect x="103.4" y="483.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="106.4" y="494.0"></text>
</g>
<g>
<title>one.nio.http.Response (221 samples, 0.03%)</title><rect x="103.9" y="563.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="106.9" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (701 samples, 0.10%)</title><rect x="104.3" y="563.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.3" y="574.0"></text>
</g>
<g>
<title>byte[] (305 samples, 0.05%)</title><rect x="104.3" y="547.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="107.3" y="558.0"></text>
</g>
<g>
<title>java.lang.String[] (238 samples, 0.04%)</title><rect x="104.8" y="547.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="107.8" y="558.0"></text>
</g>
<g>
<title>java.lang.String (158 samples, 0.02%)</title><rect x="105.2" y="547.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="108.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.upsertWithTimeStamp (385 samples, 0.06%)</title><rect x="105.5" y="563.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="108.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.upsertWithTimeStamp (250 samples, 0.04%)</title><rect x="105.6" y="547.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.of (249 samples, 0.04%)</title><rect x="105.6" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.6" y="542.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Value (249 samples, 0.04%)</title><rect x="105.6" y="515.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="108.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getCounter (184,902 samples, 27.46%)</title><rect x="106.2" y="563.0" width="324.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.2" y="574.0">ru/mail/polis/s3ponia/AsyncServiceUtility.ge..</text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getFutures (184,853 samples, 27.45%)</title><rect x="106.3" y="547.0" width="323.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.3" y="558.0">ru/mail/polis/s3ponia/AsyncServiceUtility.ge..</text>
</g>
<g>
<title>java.util.ArrayList (196 samples, 0.03%)</title><rect x="106.3" y="531.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="109.3" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (268 samples, 0.04%)</title><rect x="106.6" y="531.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="109.6" y="542.0"></text>
</g>
<g>
<title>java.lang.Object[] (268 samples, 0.04%)</title><rect x="106.6" y="515.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="109.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.proxy (184,389 samples, 27.38%)</title><rect x="107.1" y="531.0" width="323.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="110.1" y="542.0">ru/mail/polis/s3ponia/AsyncServiceUtility.pr..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (909 samples, 0.13%)</title><rect x="107.1" y="515.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="110.1" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/665726928.invoke (909 samples, 0.13%)</title><rect x="107.1" y="499.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="110.1" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (909 samples, 0.13%)</title><rect x="107.1" y="483.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.1" y="494.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (257 samples, 0.04%)</title><rect x="107.1" y="467.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="110.1" y="478.0"></text>
</g>
<g>
<title>java.lang.String (257 samples, 0.04%)</title><rect x="107.1" y="451.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="110.1" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (652 samples, 0.10%)</title><rect x="107.5" y="467.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (652 samples, 0.10%)</title><rect x="107.5" y="451.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.5" y="462.0"></text>
</g>
<g>
<title>byte[] (652 samples, 0.10%)</title><rect x="107.5" y="435.0" width="1.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="110.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (183,480 samples, 27.25%)</title><rect x="108.7" y="515.0" width="321.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.7" y="526.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (183,480 samples, 27.25%)</title><rect x="108.7" y="499.0" width="321.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.7" y="510.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (474 samples, 0.07%)</title><rect x="108.7" y="483.0" width="0.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="111.7" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (170,583 samples, 25.33%)</title><rect x="109.5" y="483.0" width="298.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.5" y="494.0">one/nio/http/HttpClient$ResponseReader.&lt;..</text>
</g>
<g>
<title>byte[] (77,539 samples, 11.52%)</title><rect x="109.5" y="467.0" width="135.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="112.5" y="478.0">byte[]</text>
</g>
<g>
<title>byte[] (93,044 samples, 13.82%)</title><rect x="245.4" y="467.0" width="163.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="248.4" y="478.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (9,464 samples, 1.41%)</title><rect x="408.4" y="483.0" width="16.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.4" y="494.0"></text>
</g>
<g>
<title>byte[] (212 samples, 0.03%)</title><rect x="408.4" y="467.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="411.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (528 samples, 0.08%)</title><rect x="408.8" y="467.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (528 samples, 0.08%)</title><rect x="408.8" y="451.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.8" y="462.0"></text>
</g>
<g>
<title>java.lang.String (203 samples, 0.03%)</title><rect x="408.8" y="435.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="411.8" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (325 samples, 0.05%)</title><rect x="409.2" y="435.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.2" y="446.0"></text>
</g>
<g>
<title>byte[] (325 samples, 0.05%)</title><rect x="409.2" y="419.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="412.2" y="430.0"></text>
</g>
<g>
<title>one.nio.http.Response (250 samples, 0.04%)</title><rect x="409.7" y="467.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="412.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (7,648 samples, 1.14%)</title><rect x="410.2" y="467.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="413.2" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7,648 samples, 1.14%)</title><rect x="410.2" y="451.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="413.2" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7,648 samples, 1.14%)</title><rect x="410.2" y="435.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="413.2" y="446.0"></text>
</g>
<g>
<title>char[] (5,407 samples, 0.80%)</title><rect x="410.2" y="419.0" width="9.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="413.2" y="430.0"></text>
</g>
<g>
<title>java.lang.String (1,001 samples, 0.15%)</title><rect x="419.6" y="419.0" width="1.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="422.6" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,240 samples, 0.18%)</title><rect x="421.4" y="419.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="424.4" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,240 samples, 0.18%)</title><rect x="421.4" y="403.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="424.4" y="414.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,240 samples, 0.18%)</title><rect x="421.4" y="387.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.4" y="398.0"></text>
</g>
<g>
<title>byte[] (1,240 samples, 0.18%)</title><rect x="421.4" y="371.0" width="2.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="424.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (328 samples, 0.05%)</title><rect x="423.6" y="467.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="426.6" y="478.0"></text>
</g>
<g>
<title>java.lang.String[] (328 samples, 0.05%)</title><rect x="423.6" y="451.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="426.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (498 samples, 0.07%)</title><rect x="424.1" y="467.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="427.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (498 samples, 0.07%)</title><rect x="424.1" y="451.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="427.1" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (498 samples, 0.07%)</title><rect x="424.1" y="435.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.1" y="446.0"></text>
</g>
<g>
<title>java.lang.String (248 samples, 0.04%)</title><rect x="424.1" y="419.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="427.1" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (250 samples, 0.04%)</title><rect x="424.6" y="419.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="427.6" y="430.0"></text>
</g>
<g>
<title>byte[] (250 samples, 0.04%)</title><rect x="424.6" y="403.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="427.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (2,117 samples, 0.31%)</title><rect x="425.0" y="483.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.0" y="494.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2,117 samples, 0.31%)</title><rect x="425.0" y="467.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="428.0" y="478.0"></text>
</g>
<g>
<title>byte[] (2,117 samples, 0.31%)</title><rect x="425.0" y="451.0" width="3.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="428.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (576 samples, 0.09%)</title><rect x="428.7" y="483.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.7" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (576 samples, 0.09%)</title><rect x="428.7" y="467.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="431.7" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (576 samples, 0.09%)</title><rect x="428.7" y="451.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="431.7" y="462.0"></text>
</g>
<g>
<title>java.lang.String (262 samples, 0.04%)</title><rect x="428.7" y="435.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="431.7" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (314 samples, 0.05%)</title><rect x="429.2" y="435.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.2" y="446.0"></text>
</g>
<g>
<title>byte[] (314 samples, 0.05%)</title><rect x="429.2" y="419.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="432.2" y="430.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (266 samples, 0.04%)</title><rect x="429.7" y="483.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.7" y="494.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (266 samples, 0.04%)</title><rect x="429.7" y="467.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="432.7" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (266 samples, 0.04%)</title><rect x="429.7" y="451.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="432.7" y="462.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (266 samples, 0.04%)</title><rect x="429.7" y="435.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="432.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.getReplicationConfiguration (2,981 samples, 0.44%)</title><rect x="430.2" y="563.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.parseAndValidateReplicas (2,981 samples, 0.44%)</title><rect x="430.2" y="547.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="433.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$ReplicationConfiguration.parse (2,733 samples, 0.41%)</title><rect x="430.2" y="531.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="433.2" y="542.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (509 samples, 0.08%)</title><rect x="430.2" y="515.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="433.2" y="526.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (383 samples, 0.06%)</title><rect x="430.4" y="499.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.4" y="510.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter (274 samples, 0.04%)</title><rect x="430.6" y="483.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="433.6" y="494.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (2,000 samples, 0.30%)</title><rect x="431.1" y="515.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.1" y="526.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (772 samples, 0.11%)</title><rect x="431.1" y="499.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.1" y="510.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (772 samples, 0.11%)</title><rect x="431.1" y="483.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.1" y="494.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (772 samples, 0.11%)</title><rect x="431.1" y="467.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="434.1" y="478.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (772 samples, 0.11%)</title><rect x="431.1" y="451.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (772 samples, 0.11%)</title><rect x="431.1" y="435.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (772 samples, 0.11%)</title><rect x="431.1" y="419.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="434.1" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (772 samples, 0.11%)</title><rect x="431.1" y="403.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.1" y="414.0"></text>
</g>
<g>
<title>java.lang.String (391 samples, 0.06%)</title><rect x="431.1" y="387.0" width="0.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="434.1" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (381 samples, 0.06%)</title><rect x="431.8" y="387.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.8" y="398.0"></text>
</g>
<g>
<title>byte[] (381 samples, 0.06%)</title><rect x="431.8" y="371.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="434.8" y="382.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (388 samples, 0.06%)</title><rect x="432.4" y="499.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.4" y="510.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (388 samples, 0.06%)</title><rect x="432.4" y="483.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="435.4" y="494.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (388 samples, 0.06%)</title><rect x="432.4" y="467.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="435.4" y="478.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1$1 (388 samples, 0.06%)</title><rect x="432.4" y="451.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="435.4" y="462.0"></text>
</g>
<g>
<title>java.util.ArrayList (185 samples, 0.03%)</title><rect x="433.1" y="499.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="436.1" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (468 samples, 0.07%)</title><rect x="433.4" y="499.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="436.4" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (468 samples, 0.07%)</title><rect x="433.4" y="483.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.4" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (468 samples, 0.07%)</title><rect x="433.4" y="467.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.4" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (468 samples, 0.07%)</title><rect x="433.4" y="451.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.4" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (468 samples, 0.07%)</title><rect x="433.4" y="435.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="436.4" y="446.0"></text>
</g>
<g>
<title>java.lang.Object[] (467 samples, 0.07%)</title><rect x="433.4" y="419.0" width="0.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="436.4" y="430.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (187 samples, 0.03%)</title><rect x="434.3" y="499.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="437.3" y="510.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableRandomAccessList (187 samples, 0.03%)</title><rect x="434.3" y="483.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="437.3" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.s3ponia.Utility$ReplicationConfiguration (224 samples, 0.03%)</title><rect x="434.6" y="515.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="437.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.all (248 samples, 0.04%)</title><rect x="435.0" y="531.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.all (248 samples, 0.04%)</title><rect x="435.0" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.0" y="526.0"></text>
</g>
<g>
<title>java.lang.String[] (248 samples, 0.04%)</title><rect x="435.0" y="499.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="438.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.sendAckFromResp (1,017 samples, 0.15%)</title><rect x="435.4" y="563.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="438.4" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,017 samples, 0.15%)</title><rect x="435.4" y="547.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="438.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,017 samples, 0.15%)</title><rect x="435.4" y="531.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (685 samples, 0.10%)</title><rect x="435.4" y="515.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="438.4" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (685 samples, 0.10%)</title><rect x="435.4" y="499.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.4" y="510.0"></text>
</g>
<g>
<title>byte[] (685 samples, 0.10%)</title><rect x="435.4" y="483.0" width="1.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="438.4" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (332 samples, 0.05%)</title><rect x="436.6" y="515.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="439.6" y="526.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (332 samples, 0.05%)</title><rect x="436.6" y="499.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="439.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$Header.getHeader (45,506 samples, 6.76%)</title><rect x="437.2" y="563.0" width="79.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.2" y="574.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility$Header.getHeader (45,506 samples, 6.76%)</title><rect x="437.2" y="547.0" width="79.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="440.2" y="558.0">ru/mail/p..</text>
</g>
<g>
<title>java/lang/String.stripLeading (18,754 samples, 2.79%)</title><rect x="437.2" y="531.0" width="32.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="440.2" y="542.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.stripLeading (18,754 samples, 2.79%)</title><rect x="437.2" y="515.0" width="32.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="440.2" y="526.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (18,754 samples, 2.79%)</title><rect x="437.2" y="499.0" width="32.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.2" y="510.0">ja..</text>
</g>
<g>
<title>java.lang.String (7,950 samples, 1.18%)</title><rect x="437.2" y="483.0" width="13.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="440.2" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (10,804 samples, 1.60%)</title><rect x="451.1" y="483.0" width="19.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="454.1" y="494.0"></text>
</g>
<g>
<title>byte[] (10,804 samples, 1.60%)</title><rect x="451.1" y="467.0" width="19.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="454.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (18,667 samples, 2.77%)</title><rect x="470.1" y="531.0" width="32.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="473.1" y="542.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (18,667 samples, 2.77%)</title><rect x="470.1" y="515.0" width="32.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.1" y="526.0">ja..</text>
</g>
<g>
<title>java.lang.String (7,968 samples, 1.18%)</title><rect x="470.1" y="499.0" width="13.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="473.1" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (10,699 samples, 1.59%)</title><rect x="484.0" y="499.0" width="18.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="487.0" y="510.0"></text>
</g>
<g>
<title>byte[] (10,699 samples, 1.59%)</title><rect x="484.0" y="483.0" width="18.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="487.0" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.s3ponia.Utility$Header (8,085 samples, 1.20%)</title><rect x="502.8" y="531.0" width="14.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="505.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/s3ponia/Utility.byteBufferFromString (27,170 samples, 4.04%)</title><rect x="516.9" y="563.0" width="47.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.9" y="574.0">ru/m..</text>
</g>
<g>
<title>java/lang/String.getBytes (10,792 samples, 1.60%)</title><rect x="516.9" y="547.0" width="19.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (10,792 samples, 1.60%)</title><rect x="516.9" y="531.0" width="19.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.9" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (10,792 samples, 1.60%)</title><rect x="516.9" y="515.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="519.9" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10,792 samples, 1.60%)</title><rect x="516.9" y="499.0" width="19.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="519.9" y="510.0"></text>
</g>
<g>
<title>byte[] (10,792 samples, 1.60%)</title><rect x="516.9" y="483.0" width="19.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="519.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16,378 samples, 2.43%)</title><rect x="535.9" y="547.0" width="28.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="538.9" y="558.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16,378 samples, 2.43%)</title><rect x="535.9" y="531.0" width="28.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="538.9" y="542.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (16,378 samples, 2.43%)</title><rect x="535.9" y="515.0" width="28.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="538.9" y="526.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNodeReplicas (404 samples, 0.06%)</title><rect x="564.6" y="563.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="567.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNodeReplicas (404 samples, 0.06%)</title><rect x="564.6" y="547.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="567.6" y="558.0"></text>
</g>
<g>
<title>java.lang.String[] (270 samples, 0.04%)</title><rect x="564.6" y="531.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="567.6" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$79/524095067.run (96,678 samples, 14.36%)</title><rect x="565.3" y="611.0" width="169.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="568.3" y="622.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$putImpl$4 (96,678 samples, 14.36%)</title><rect x="565.3" y="595.0" width="169.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="568.3" y="606.0">ru/mail/polis/service/..</text>
</g>
<g>
<title>ru/mail/polis/s3ponia/AsyncServiceUtility.upsertWithTimeStamp (96,678 samples, 14.36%)</title><rect x="565.3" y="579.0" width="169.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="568.3" y="590.0">ru/mail/polis/s3ponia/..</text>
</g>
<g>
<title>one.nio.http.Response (8,102 samples, 1.20%)</title><rect x="565.3" y="563.0" width="14.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="568.3" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (42,867 samples, 6.37%)</title><rect x="579.5" y="563.0" width="75.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="582.5" y="574.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (42,867 samples, 6.37%)</title><rect x="579.5" y="547.0" width="75.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.5" y="558.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (29,398 samples, 4.37%)</title><rect x="579.5" y="531.0" width="51.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.5" y="542.0">one/n..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (29,398 samples, 4.37%)</title><rect x="579.5" y="515.0" width="51.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.5" y="526.0">one/n..</text>
</g>
<g>
<title>byte[] (29,398 samples, 4.37%)</title><rect x="579.5" y="499.0" width="51.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="582.5" y="510.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (13,469 samples, 2.00%)</title><rect x="631.0" y="531.0" width="23.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="634.0" y="542.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (13,469 samples, 2.00%)</title><rect x="631.0" y="515.0" width="23.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="634.0" y="526.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (32,166 samples, 4.78%)</title><rect x="654.6" y="563.0" width="56.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="657.6" y="574.0">one/ni..</text>
</g>
<g>
<title>byte[] (13,502 samples, 2.01%)</title><rect x="654.6" y="547.0" width="23.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="657.6" y="558.0">b..</text>
</g>
<g>
<title>java.lang.String[] (10,737 samples, 1.59%)</title><rect x="678.3" y="547.0" width="18.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="681.3" y="558.0"></text>
</g>
<g>
<title>java.lang.String (7,927 samples, 1.18%)</title><rect x="697.1" y="547.0" width="13.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="700.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.upsertWithTimeStamp (13,543 samples, 2.01%)</title><rect x="711.0" y="563.0" width="23.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="714.0" y="574.0">r..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (855 samples, 0.13%)</title><rect x="711.0" y="547.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="714.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (855 samples, 0.13%)</title><rect x="711.0" y="531.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="714.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (855 samples, 0.13%)</title><rect x="711.0" y="515.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="714.0" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (793 samples, 0.12%)</title><rect x="711.0" y="499.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="714.0" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (793 samples, 0.12%)</title><rect x="711.0" y="483.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="714.0" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (367 samples, 0.05%)</title><rect x="711.0" y="467.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="714.0" y="478.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (367 samples, 0.05%)</title><rect x="711.0" y="451.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="714.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (426 samples, 0.06%)</title><rect x="711.6" y="467.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="714.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (426 samples, 0.06%)</title><rect x="711.6" y="451.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="714.6" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (426 samples, 0.06%)</title><rect x="711.6" y="435.0" width="0.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="714.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.upsertWithTimeStamp (10,961 samples, 1.63%)</title><rect x="712.5" y="547.0" width="19.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="715.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.of (10,917 samples, 1.62%)</title><rect x="712.5" y="531.0" width="19.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="715.5" y="542.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Value (10,917 samples, 1.62%)</title><rect x="712.5" y="515.0" width="19.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="715.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.flush (1,727 samples, 0.26%)</title><rect x="731.7" y="547.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="734.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskManager.save (1,723 samples, 0.26%)</title><rect x="731.7" y="531.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="734.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskManager.saveTo (1,716 samples, 0.25%)</title><rect x="731.7" y="515.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="734.7" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (783 samples, 0.12%)</title><rect x="731.9" y="499.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="734.9" y="510.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (545 samples, 0.08%)</title><rect x="731.9" y="483.0" width="1.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="734.9" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (238 samples, 0.04%)</title><rect x="732.9" y="483.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="735.9" y="494.0"></text>
</g>
<g>
<title>byte[] (238 samples, 0.04%)</title><rect x="732.9" y="467.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="735.9" y="478.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (225 samples, 0.03%)</title><rect x="733.3" y="499.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="736.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (225 samples, 0.03%)</title><rect x="733.3" y="483.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="736.3" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (225 samples, 0.03%)</title><rect x="733.3" y="467.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="736.3" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (225 samples, 0.03%)</title><rect x="733.3" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="736.3" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$89/433396806.getAsBoolean (225 samples, 0.03%)</title><rect x="733.3" y="435.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="736.3" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (225 samples, 0.03%)</title><rect x="733.3" y="419.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="736.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (225 samples, 0.03%)</title><rect x="733.3" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="736.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (179 samples, 0.03%)</title><rect x="733.7" y="499.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="736.7" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (179 samples, 0.03%)</title><rect x="733.7" y="483.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="736.7" y="494.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (179 samples, 0.03%)</title><rect x="733.7" y="467.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="736.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.getValue (384 samples, 0.06%)</title><rect x="734.0" y="499.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="737.0" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (384 samples, 0.06%)</title><rect x="734.0" y="483.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.0" y="494.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (384 samples, 0.06%)</title><rect x="734.0" y="467.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="737.0" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (3,018 samples, 0.45%)</title><rect x="734.7" y="611.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="737.7" y="622.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3,005 samples, 0.45%)</title><rect x="734.7" y="595.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="737.7" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$122/220687479.run (3,005 samples, 0.45%)</title><rect x="734.7" y="579.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.7" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (3,005 samples, 0.45%)</title><rect x="734.7" y="563.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="737.7" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (3,005 samples, 0.45%)</title><rect x="734.7" y="547.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="737.7" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (3,003 samples, 0.45%)</title><rect x="734.7" y="531.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="737.7" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (2,954 samples, 0.44%)</title><rect x="734.8" y="515.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="737.8" y="526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2,860 samples, 0.42%)</title><rect x="734.8" y="499.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="737.8" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (2,860 samples, 0.42%)</title><rect x="734.8" y="483.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.8" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (2,860 samples, 0.42%)</title><rect x="734.8" y="467.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.8" y="478.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (2,860 samples, 0.42%)</title><rect x="734.8" y="451.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.8" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,948 samples, 0.29%)</title><rect x="734.8" y="435.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="737.8" y="446.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,948 samples, 0.29%)</title><rect x="734.8" y="419.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="737.8" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (1,134 samples, 0.17%)</title><rect x="734.8" y="403.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.8" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (1,134 samples, 0.17%)</title><rect x="734.8" y="387.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="737.8" y="398.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1,080 samples, 0.16%)</title><rect x="734.8" y="371.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="737.8" y="382.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1,080 samples, 0.16%)</title><rect x="734.8" y="355.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="737.8" y="366.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1,080 samples, 0.16%)</title><rect x="734.8" y="339.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.8" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (1,080 samples, 0.16%)</title><rect x="734.8" y="323.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="737.8" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (1,080 samples, 0.16%)</title><rect x="734.8" y="307.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.8" y="318.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (1,080 samples, 0.16%)</title><rect x="734.8" y="291.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="737.8" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (1,080 samples, 0.16%)</title><rect x="734.8" y="275.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="737.8" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (1,080 samples, 0.16%)</title><rect x="734.8" y="259.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="737.8" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1,079 samples, 0.16%)</title><rect x="734.8" y="243.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="737.8" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,079 samples, 0.16%)</title><rect x="734.8" y="227.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="737.8" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,079 samples, 0.16%)</title><rect x="734.8" y="211.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.8" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,079 samples, 0.16%)</title><rect x="734.8" y="195.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.8" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,079 samples, 0.16%)</title><rect x="734.8" y="179.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="737.8" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (963 samples, 0.14%)</title><rect x="734.8" y="163.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="737.8" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (963 samples, 0.14%)</title><rect x="734.8" y="147.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="737.8" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (959 samples, 0.14%)</title><rect x="734.8" y="131.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.8" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (959 samples, 0.14%)</title><rect x="734.8" y="115.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.8" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (324 samples, 0.05%)</title><rect x="734.8" y="99.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.8" y="110.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (280 samples, 0.04%)</title><rect x="734.8" y="83.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="737.8" y="94.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (257 samples, 0.04%)</title><rect x="734.8" y="67.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="737.8" y="78.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (257 samples, 0.04%)</title><rect x="734.8" y="51.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="737.8" y="62.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (145 samples, 0.02%)</title><rect x="734.9" y="35.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="737.9" y="46.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (331 samples, 0.05%)</title><rect x="735.5" y="99.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="738.5" y="110.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (273 samples, 0.04%)</title><rect x="735.6" y="83.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="738.6" y="94.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (250 samples, 0.04%)</title><rect x="735.6" y="67.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="738.6" y="78.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (250 samples, 0.04%)</title><rect x="735.6" y="51.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="738.6" y="62.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (264 samples, 0.04%)</title><rect x="736.0" y="99.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.0" y="110.0"></text>
</g>
<g>
<title>java.lang.Object[] (225 samples, 0.03%)</title><rect x="736.0" y="83.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="739.0" y="94.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (785 samples, 0.12%)</title><rect x="736.8" y="403.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="739.8" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (770 samples, 0.11%)</title><rect x="736.9" y="387.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.9" y="398.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (749 samples, 0.11%)</title><rect x="736.9" y="371.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="739.9" y="382.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (718 samples, 0.11%)</title><rect x="736.9" y="355.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="739.9" y="366.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (718 samples, 0.11%)</title><rect x="736.9" y="339.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="739.9" y="350.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (718 samples, 0.11%)</title><rect x="736.9" y="323.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="739.9" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (718 samples, 0.11%)</title><rect x="736.9" y="307.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="739.9" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (718 samples, 0.11%)</title><rect x="736.9" y="291.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="739.9" y="302.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (716 samples, 0.11%)</title><rect x="736.9" y="275.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="739.9" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (716 samples, 0.11%)</title><rect x="736.9" y="259.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="739.9" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (716 samples, 0.11%)</title><rect x="736.9" y="243.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="739.9" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (716 samples, 0.11%)</title><rect x="736.9" y="227.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="739.9" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (716 samples, 0.11%)</title><rect x="736.9" y="211.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.9" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (716 samples, 0.11%)</title><rect x="736.9" y="195.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="739.9" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (716 samples, 0.11%)</title><rect x="736.9" y="179.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="739.9" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (716 samples, 0.11%)</title><rect x="736.9" y="163.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="739.9" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (634 samples, 0.09%)</title><rect x="736.9" y="147.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="739.9" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (634 samples, 0.09%)</title><rect x="736.9" y="131.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="739.9" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (632 samples, 0.09%)</title><rect x="736.9" y="115.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="739.9" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (632 samples, 0.09%)</title><rect x="736.9" y="99.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.9" y="110.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (225 samples, 0.03%)</title><rect x="736.9" y="83.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="739.9" y="94.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (192 samples, 0.03%)</title><rect x="736.9" y="67.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="739.9" y="78.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (177 samples, 0.03%)</title><rect x="736.9" y="51.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="739.9" y="62.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (177 samples, 0.03%)</title><rect x="736.9" y="35.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.9" y="46.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (204 samples, 0.03%)</title><rect x="737.3" y="83.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="740.3" y="94.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (182 samples, 0.03%)</title><rect x="737.4" y="67.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="740.4" y="78.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (172 samples, 0.03%)</title><rect x="737.4" y="51.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.4" y="62.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (172 samples, 0.03%)</title><rect x="737.4" y="35.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="740.4" y="46.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (178 samples, 0.03%)</title><rect x="737.7" y="83.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="740.7" y="94.0"></text>
</g>
<g>
<title>java.lang.Object[] (152 samples, 0.02%)</title><rect x="737.7" y="67.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="740.7" y="78.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (648 samples, 0.10%)</title><rect x="738.2" y="435.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.2" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (648 samples, 0.10%)</title><rect x="738.2" y="419.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="741.2" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (648 samples, 0.10%)</title><rect x="738.2" y="403.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="741.2" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (626 samples, 0.09%)</title><rect x="738.2" y="387.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.2" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (626 samples, 0.09%)</title><rect x="738.2" y="371.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="741.2" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (599 samples, 0.09%)</title><rect x="738.2" y="355.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="741.2" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (584 samples, 0.09%)</title><rect x="738.3" y="339.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.3" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (584 samples, 0.09%)</title><rect x="738.3" y="323.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="741.3" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (567 samples, 0.08%)</title><rect x="738.3" y="307.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="741.3" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (552 samples, 0.08%)</title><rect x="738.3" y="291.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="741.3" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (545 samples, 0.08%)</title><rect x="738.3" y="275.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="741.3" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (490 samples, 0.07%)</title><rect x="738.4" y="259.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.4" y="270.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (471 samples, 0.07%)</title><rect x="738.4" y="243.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="741.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (471 samples, 0.07%)</title><rect x="738.4" y="227.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="741.4" y="238.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (468 samples, 0.07%)</title><rect x="738.4" y="211.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="741.4" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (468 samples, 0.07%)</title><rect x="738.4" y="195.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="741.4" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (436 samples, 0.06%)</title><rect x="738.5" y="179.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="741.5" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (436 samples, 0.06%)</title><rect x="738.5" y="163.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="741.5" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (205 samples, 0.03%)</title><rect x="738.5" y="147.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="741.5" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (154 samples, 0.02%)</title><rect x="738.5" y="131.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="741.5" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (145 samples, 0.02%)</title><rect x="739.0" y="147.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="742.0" y="158.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (145 samples, 0.02%)</title><rect x="739.0" y="131.0" width="0.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="742.0" y="142.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (158 samples, 0.02%)</title><rect x="739.5" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="742.5" y="446.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (153 samples, 0.02%)</title><rect x="739.5" y="419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="742.5" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (148 samples, 0.02%)</title><rect x="739.6" y="403.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="742.6" y="414.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (148 samples, 0.02%)</title><rect x="739.6" y="387.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="742.6" y="398.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (148 samples, 0.02%)</title><rect x="739.6" y="371.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="742.6" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (148 samples, 0.02%)</title><rect x="739.6" y="355.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="742.6" y="366.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (256,676 samples, 38.12%)</title><rect x="740.2" y="659.0" width="449.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="743.2" y="670.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (8,968 samples, 1.33%)</title><rect x="740.2" y="643.0" width="15.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="743.2" y="654.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (8,968 samples, 1.33%)</title><rect x="740.2" y="627.0" width="15.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="743.2" y="638.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (247,708 samples, 36.79%)</title><rect x="755.9" y="643.0" width="434.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.9" y="654.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (247,708 samples, 36.79%)</title><rect x="755.9" y="627.0" width="434.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.9" y="638.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (247,703 samples, 36.79%)</title><rect x="755.9" y="611.0" width="434.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="758.9" y="622.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (47,219 samples, 7.01%)</title><rect x="755.9" y="595.0" width="82.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="758.9" y="606.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (47,219 samples, 7.01%)</title><rect x="755.9" y="579.0" width="82.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.9" y="590.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (33,047 samples, 4.91%)</title><rect x="755.9" y="563.0" width="57.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.9" y="574.0">Reques..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12,593 samples, 1.87%)</title><rect x="755.9" y="547.0" width="22.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="758.9" y="558.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (12,593 samples, 1.87%)</title><rect x="755.9" y="531.0" width="22.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="758.9" y="542.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (12,593 samples, 1.87%)</title><rect x="755.9" y="515.0" width="22.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="758.9" y="526.0">j..</text>
</g>
<g>
<title>java.lang.String (6,265 samples, 0.93%)</title><rect x="755.9" y="499.0" width="11.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="758.9" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6,328 samples, 0.94%)</title><rect x="766.9" y="499.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.9" y="510.0"></text>
</g>
<g>
<title>byte[] (6,328 samples, 0.94%)</title><rect x="766.9" y="483.0" width="11.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="769.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (12,100 samples, 1.80%)</title><rect x="778.0" y="547.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="781.0" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12,100 samples, 1.80%)</title><rect x="778.0" y="531.0" width="21.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="781.0" y="542.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (12,100 samples, 1.80%)</title><rect x="778.0" y="515.0" width="21.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="781.0" y="526.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (12,100 samples, 1.80%)</title><rect x="778.0" y="499.0" width="21.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="781.0" y="510.0">j..</text>
</g>
<g>
<title>java.lang.String (6,191 samples, 0.92%)</title><rect x="778.0" y="483.0" width="10.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="781.0" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5,909 samples, 0.88%)</title><rect x="788.8" y="483.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="791.8" y="494.0"></text>
</g>
<g>
<title>byte[] (5,909 samples, 0.88%)</title><rect x="788.8" y="467.0" width="10.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="791.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.put (8,354 samples, 1.24%)</title><rect x="799.2" y="547.0" width="14.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="802.2" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1024250373.linkToTargetMethod (8,049 samples, 1.20%)</title><rect x="799.2" y="531.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="802.2" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (8,049 samples, 1.20%)</title><rect x="799.2" y="515.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="802.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$78/959660539.get$Lambda (8,049 samples, 1.20%)</title><rect x="799.2" y="499.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="802.2" y="510.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.AsyncService$$Lambda$78 (8,049 samples, 1.20%)</title><rect x="799.2" y="483.0" width="14.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="802.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (305 samples, 0.05%)</title><rect x="813.3" y="531.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (305 samples, 0.05%)</title><rect x="813.3" y="515.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (305 samples, 0.05%)</title><rect x="813.3" y="499.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="816.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (305 samples, 0.05%)</title><rect x="813.3" y="483.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="816.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (305 samples, 0.05%)</title><rect x="813.3" y="467.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.3" y="478.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (305 samples, 0.05%)</title><rect x="813.3" y="451.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="816.3" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (14,172 samples, 2.10%)</title><rect x="813.8" y="563.0" width="24.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="816.8" y="574.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (14,172 samples, 2.10%)</title><rect x="813.8" y="547.0" width="24.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="816.8" y="558.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (14,172 samples, 2.10%)</title><rect x="813.8" y="531.0" width="24.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="816.8" y="542.0">j..</text>
</g>
<g>
<title>java.lang.String (5,911 samples, 0.88%)</title><rect x="813.8" y="515.0" width="10.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="816.8" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (8,261 samples, 1.23%)</title><rect x="824.2" y="515.0" width="14.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="827.2" y="526.0"></text>
</g>
<g>
<title>byte[] (8,261 samples, 1.23%)</title><rect x="824.2" y="499.0" width="14.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="827.2" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (76,171 samples, 11.31%)</title><rect x="838.7" y="595.0" width="133.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.7" y="606.0">one/nio/http/Http..</text>
</g>
<g>
<title>one.nio.http.Request (10,187 samples, 1.51%)</title><rect x="838.7" y="579.0" width="17.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="841.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (20,638 samples, 3.06%)</title><rect x="856.5" y="579.0" width="36.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="859.5" y="590.0">one..</text>
</g>
<g>
<title>java.lang.String[] (20,638 samples, 3.06%)</title><rect x="856.5" y="563.0" width="36.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="859.5" y="574.0">jav..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (45,346 samples, 6.73%)</title><rect x="892.7" y="579.0" width="79.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="895.7" y="590.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (45,346 samples, 6.73%)</title><rect x="892.7" y="563.0" width="79.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="895.7" y="574.0">one/nio/u..</text>
</g>
<g>
<title>char[] (25,443 samples, 3.78%)</title><rect x="892.7" y="547.0" width="44.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="895.7" y="558.0">char[]</text>
</g>
<g>
<title>java.lang.String (6,026 samples, 0.89%)</title><rect x="937.3" y="547.0" width="10.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="940.3" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13,877 samples, 2.06%)</title><rect x="947.8" y="547.0" width="24.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="950.8" y="558.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13,877 samples, 2.06%)</title><rect x="947.8" y="531.0" width="24.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="950.8" y="542.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (13,877 samples, 2.06%)</title><rect x="947.8" y="515.0" width="24.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="950.8" y="526.0">j..</text>
</g>
<g>
<title>byte[] (13,877 samples, 2.06%)</title><rect x="947.8" y="499.0" width="24.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="950.8" y="510.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8,269 samples, 1.23%)</title><rect x="972.1" y="595.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="975.1" y="606.0"></text>
</g>
<g>
<title>byte[] (8,269 samples, 1.23%)</title><rect x="972.1" y="579.0" width="14.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="975.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (12,090 samples, 1.80%)</title><rect x="986.6" y="595.0" width="21.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="989.6" y="606.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (12,090 samples, 1.80%)</title><rect x="986.6" y="579.0" width="21.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="989.6" y="590.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (12,090 samples, 1.80%)</title><rect x="986.6" y="563.0" width="21.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="989.6" y="574.0">j..</text>
</g>
<g>
<title>java.lang.String (6,011 samples, 0.89%)</title><rect x="986.6" y="547.0" width="10.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="989.6" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6,079 samples, 0.90%)</title><rect x="997.2" y="547.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1000.2" y="558.0"></text>
</g>
<g>
<title>byte[] (6,079 samples, 0.90%)</title><rect x="997.2" y="531.0" width="10.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1000.2" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (103,954 samples, 15.44%)</title><rect x="1007.8" y="595.0" width="182.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1010.8" y="606.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (103,954 samples, 15.44%)</title><rect x="1007.8" y="579.0" width="182.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1010.8" y="590.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (50,445 samples, 7.49%)</title><rect x="1007.8" y="563.0" width="88.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1010.8" y="574.0">char[]</text>
</g>
<g>
<title>java.lang.String (19,061 samples, 2.83%)</title><rect x="1096.2" y="563.0" width="33.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1099.2" y="574.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (34,448 samples, 5.12%)</title><rect x="1129.6" y="563.0" width="60.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1132.6" y="574.0">java/l..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (34,448 samples, 5.12%)</title><rect x="1129.6" y="547.0" width="60.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1132.6" y="558.0">java/l..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (34,448 samples, 5.12%)</title><rect x="1129.6" y="531.0" width="60.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1132.6" y="542.0">java/l..</text>
</g>
<g>
<title>byte[] (34,448 samples, 5.12%)</title><rect x="1129.6" y="515.0" width="60.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1132.6" y="526.0">byte[]</text>
</g>
</g>
</svg>
