<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="693"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="693"> </text>
<g id="frames">
<g>
<title>all (980,724 samples, 100.00%)</title><rect x="10.0" y="659.0" width="1180.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.0" y="670.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (418,126 samples, 42.63%)</title><rect x="10.0" y="643.0" width="503.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="654.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (418,095 samples, 42.63%)</title><rect x="10.0" y="627.0" width="503.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="638.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (418,095 samples, 42.63%)</title><rect x="10.0" y="611.0" width="503.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="622.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (372,139 samples, 37.95%)</title><rect x="10.0" y="595.0" width="447.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="606.0">java/util/concurrent/CompletableFuture$AsyncSupply.run</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (226,606 samples, 23.11%)</title><rect x="10.0" y="579.0" width="272.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="590.0">java/util/concurrent/CompletableFutu..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (109,452 samples, 11.16%)</title><rect x="10.0" y="563.0" width="131.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="574.0">java/util/concur..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$128/1268322720.apply (109,452 samples, 11.16%)</title><rect x="10.0" y="547.0" width="131.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="558.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$putAsync$5 (109,452 samples, 11.16%)</title><rect x="10.0" y="531.0" width="131.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="542.0">ru/mail/polis/se..</text>
</g>
<g>
<title>one.nio.http.Response (21,687 samples, 2.21%)</title><rect x="10.0" y="515.0" width="26.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="13.0" y="526.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (87,765 samples, 8.95%)</title><rect x="36.1" y="515.0" width="105.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="39.1" y="526.0">one/nio/http/..</text>
</g>
<g>
<title>byte[] (37,123 samples, 3.79%)</title><rect x="36.1" y="499.0" width="44.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="39.1" y="510.0">byte[]</text>
</g>
<g>
<title>java.lang.String[] (28,876 samples, 2.94%)</title><rect x="80.8" y="499.0" width="34.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="83.8" y="510.0">ja..</text>
</g>
<g>
<title>java.lang.String (21,766 samples, 2.22%)</title><rect x="115.5" y="499.0" width="26.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="118.5" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (117,154 samples, 11.95%)</title><rect x="141.7" y="563.0" width="141.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="144.7" y="574.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (117,154 samples, 11.95%)</title><rect x="141.7" y="547.0" width="141.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="144.7" y="558.0">java/util/concurre..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$130/1610207105.accept (117,154 samples, 11.95%)</title><rect x="141.7" y="531.0" width="141.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.7" y="542.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$entity$1 (117,154 samples, 11.95%)</title><rect x="141.7" y="515.0" width="141.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="144.7" y="526.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/util/Utility.sendResponse (117,154 samples, 11.95%)</title><rect x="141.7" y="499.0" width="141.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="144.7" y="510.0">ru/mail/polis/util..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (117,154 samples, 11.95%)</title><rect x="141.7" y="483.0" width="141.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="144.7" y="494.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (117,154 samples, 11.95%)</title><rect x="141.7" y="467.0" width="141.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.7" y="478.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (81,147 samples, 8.27%)</title><rect x="141.7" y="451.0" width="97.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.7" y="462.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (81,147 samples, 8.27%)</title><rect x="141.7" y="435.0" width="97.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="144.7" y="446.0">one/nio/uti..</text>
</g>
<g>
<title>byte[] (58,209 samples, 5.94%)</title><rect x="141.7" y="419.0" width="70.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="144.7" y="430.0">byte[]</text>
</g>
<g>
<title>byte[] (22,938 samples, 2.34%)</title><rect x="211.8" y="419.0" width="27.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="214.8" y="430.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.write (36,007 samples, 3.67%)</title><rect x="239.4" y="451.0" width="43.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.4" y="462.0">one/..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (36,007 samples, 3.67%)</title><rect x="239.4" y="435.0" width="43.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="242.4" y="446.0">one...</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$121/1169830266.get (145,533 samples, 14.84%)</title><rect x="282.7" y="579.0" width="175.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.7" y="590.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$putAsync$4 (145,533 samples, 14.84%)</title><rect x="282.7" y="563.0" width="175.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.7" y="574.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/DaoService.put (145,533 samples, 14.84%)</title><rect x="282.7" y="547.0" width="175.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.7" y="558.0">ru/mail/polis/service/s..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (94,628 samples, 9.65%)</title><rect x="282.7" y="531.0" width="113.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="285.7" y="542.0">one/nio/http/R..</text>
</g>
<g>
<title>byte[] (37,968 samples, 3.87%)</title><rect x="282.7" y="515.0" width="45.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="285.7" y="526.0">byte[]</text>
</g>
<g>
<title>java.lang.String[] (33,882 samples, 3.45%)</title><rect x="328.4" y="515.0" width="40.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="331.4" y="526.0">jav..</text>
</g>
<g>
<title>java.lang.String (22,778 samples, 2.32%)</title><rect x="369.1" y="515.0" width="27.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="372.1" y="526.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.upsertWithTimeStamp (50,905 samples, 5.19%)</title><rect x="396.5" y="531.0" width="61.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="399.5" y="542.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (7,036 samples, 0.72%)</title><rect x="396.5" y="515.0" width="8.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="399.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (7,036 samples, 0.72%)</title><rect x="396.5" y="499.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (7,036 samples, 0.72%)</title><rect x="396.5" y="483.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="399.5" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6,660 samples, 0.68%)</title><rect x="396.5" y="467.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.5" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (6,660 samples, 0.68%)</title><rect x="396.5" y="451.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="399.5" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2,612 samples, 0.27%)</title><rect x="396.5" y="435.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="399.5" y="446.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (2,612 samples, 0.27%)</title><rect x="396.5" y="419.0" width="3.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="399.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (4,048 samples, 0.41%)</title><rect x="399.7" y="435.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (4,048 samples, 0.41%)</title><rect x="399.7" y="419.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="402.7" y="430.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (4,048 samples, 0.41%)</title><rect x="399.7" y="403.0" width="4.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="402.7" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (310 samples, 0.03%)</title><rect x="404.6" y="467.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.6" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (310 samples, 0.03%)</title><rect x="404.6" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="407.6" y="462.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (310 samples, 0.03%)</title><rect x="404.6" y="435.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="407.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.upsertWithTimeStamp (41,462 samples, 4.23%)</title><rect x="405.0" y="515.0" width="49.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.0" y="526.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.of (41,326 samples, 4.21%)</title><rect x="405.2" y="499.0" width="49.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="408.2" y="510.0">ru/ma..</text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Value (41,326 samples, 4.21%)</title><rect x="405.2" y="483.0" width="49.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="408.2" y="494.0">ru.ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.flush (2,407 samples, 0.25%)</title><rect x="454.9" y="515.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskManager.save (2,402 samples, 0.24%)</title><rect x="454.9" y="499.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskManager.saveTo (2,397 samples, 0.24%)</title><rect x="454.9" y="483.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="457.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,102 samples, 0.11%)</title><rect x="455.0" y="467.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.0" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,014 samples, 0.10%)</title><rect x="455.0" y="451.0" width="1.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="458.0" y="462.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (279 samples, 0.03%)</title><rect x="456.3" y="467.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="459.3" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (279 samples, 0.03%)</title><rect x="456.3" y="451.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="459.3" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (279 samples, 0.03%)</title><rect x="456.3" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="459.3" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (278 samples, 0.03%)</title><rect x="456.3" y="419.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="459.3" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$145/187582723.getAsBoolean (278 samples, 0.03%)</title><rect x="456.3" y="403.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="459.3" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (278 samples, 0.03%)</title><rect x="456.3" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (278 samples, 0.03%)</title><rect x="456.3" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (216 samples, 0.02%)</title><rect x="456.3" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="459.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (216 samples, 0.02%)</title><rect x="456.3" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="459.3" y="350.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (216 samples, 0.02%)</title><rect x="456.3" y="323.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="459.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (411 samples, 0.04%)</title><rect x="456.6" y="467.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="459.6" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (411 samples, 0.04%)</title><rect x="456.6" y="451.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="459.6" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (411 samples, 0.04%)</title><rect x="456.6" y="435.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="459.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Value.getValue (545 samples, 0.06%)</title><rect x="457.1" y="467.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="460.1" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (545 samples, 0.06%)</title><rect x="457.1" y="451.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="460.1" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (545 samples, 0.06%)</title><rect x="457.1" y="435.0" width="0.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="460.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (43,262 samples, 4.41%)</title><rect x="457.8" y="595.0" width="52.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="460.8" y="606.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (43,262 samples, 4.41%)</title><rect x="457.8" y="579.0" width="52.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.8" y="590.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (41,592 samples, 4.24%)</title><rect x="457.8" y="563.0" width="50.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="460.8" y="574.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (41,592 samples, 4.24%)</title><rect x="457.8" y="547.0" width="50.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="460.8" y="558.0">java/..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (41,592 samples, 4.24%)</title><rect x="457.8" y="531.0" width="50.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="460.8" y="542.0">java...</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1,670 samples, 0.17%)</title><rect x="507.8" y="563.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="510.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1,670 samples, 0.17%)</title><rect x="507.8" y="547.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1,670 samples, 0.17%)</title><rect x="507.8" y="531.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="510.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1,670 samples, 0.17%)</title><rect x="507.8" y="515.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="510.8" y="526.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,670 samples, 0.17%)</title><rect x="507.8" y="499.0" width="2.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="510.8" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (2,694 samples, 0.27%)</title><rect x="509.8" y="595.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="512.8" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2,694 samples, 0.27%)</title><rect x="509.8" y="579.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="512.8" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$108/416194564.run (2,694 samples, 0.27%)</title><rect x="509.8" y="563.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.8" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (2,694 samples, 0.27%)</title><rect x="509.8" y="547.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.8" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (2,694 samples, 0.27%)</title><rect x="509.8" y="531.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.8" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (2,694 samples, 0.27%)</title><rect x="509.8" y="515.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="512.8" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (2,634 samples, 0.27%)</title><rect x="509.9" y="499.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.9" y="510.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2,403 samples, 0.25%)</title><rect x="509.9" y="483.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="512.9" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (2,403 samples, 0.25%)</title><rect x="509.9" y="467.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.9" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (2,403 samples, 0.25%)</title><rect x="509.9" y="451.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="512.9" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (2,403 samples, 0.25%)</title><rect x="509.9" y="435.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="512.9" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,482 samples, 0.15%)</title><rect x="509.9" y="419.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="512.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,482 samples, 0.15%)</title><rect x="509.9" y="403.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="512.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (1,477 samples, 0.15%)</title><rect x="509.9" y="387.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.9" y="398.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (1,477 samples, 0.15%)</title><rect x="509.9" y="371.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="512.9" y="382.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1,395 samples, 0.14%)</title><rect x="509.9" y="355.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.9" y="366.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1,395 samples, 0.14%)</title><rect x="509.9" y="339.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="512.9" y="350.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1,395 samples, 0.14%)</title><rect x="509.9" y="323.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.9" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (1,395 samples, 0.14%)</title><rect x="509.9" y="307.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.9" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (1,395 samples, 0.14%)</title><rect x="509.9" y="291.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="512.9" y="302.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (1,393 samples, 0.14%)</title><rect x="509.9" y="275.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.9" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (1,393 samples, 0.14%)</title><rect x="509.9" y="259.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="512.9" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (1,393 samples, 0.14%)</title><rect x="509.9" y="243.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="512.9" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1,393 samples, 0.14%)</title><rect x="509.9" y="227.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="512.9" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,393 samples, 0.14%)</title><rect x="509.9" y="211.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="512.9" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,393 samples, 0.14%)</title><rect x="509.9" y="195.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.9" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,393 samples, 0.14%)</title><rect x="509.9" y="179.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="512.9" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,393 samples, 0.14%)</title><rect x="509.9" y="163.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.9" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1,262 samples, 0.13%)</title><rect x="509.9" y="147.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="512.9" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (1,262 samples, 0.13%)</title><rect x="509.9" y="131.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="512.9" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1,260 samples, 0.13%)</title><rect x="509.9" y="115.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="512.9" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1,260 samples, 0.13%)</title><rect x="509.9" y="99.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="512.9" y="110.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (419 samples, 0.04%)</title><rect x="509.9" y="83.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="512.9" y="94.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (367 samples, 0.04%)</title><rect x="509.9" y="67.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.9" y="78.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (341 samples, 0.03%)</title><rect x="509.9" y="51.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="512.9" y="62.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (341 samples, 0.03%)</title><rect x="509.9" y="35.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="512.9" y="46.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (416 samples, 0.04%)</title><rect x="510.5" y="83.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="513.5" y="94.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (376 samples, 0.04%)</title><rect x="510.6" y="67.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="513.6" y="78.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (348 samples, 0.04%)</title><rect x="510.6" y="51.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="513.6" y="62.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (348 samples, 0.04%)</title><rect x="510.6" y="35.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="513.6" y="46.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (349 samples, 0.04%)</title><rect x="511.0" y="83.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="514.0" y="94.0"></text>
</g>
<g>
<title>java.lang.Object[] (311 samples, 0.03%)</title><rect x="511.0" y="67.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="514.0" y="78.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (560 samples, 0.06%)</title><rect x="511.7" y="419.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="514.7" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (560 samples, 0.06%)</title><rect x="511.7" y="403.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="514.7" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (560 samples, 0.06%)</title><rect x="511.7" y="387.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="514.7" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (557 samples, 0.06%)</title><rect x="511.7" y="371.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="514.7" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (557 samples, 0.06%)</title><rect x="511.7" y="355.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="514.7" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (542 samples, 0.06%)</title><rect x="511.7" y="339.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="514.7" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (530 samples, 0.05%)</title><rect x="511.7" y="323.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="514.7" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (530 samples, 0.05%)</title><rect x="511.7" y="307.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="514.7" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (514 samples, 0.05%)</title><rect x="511.7" y="291.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="514.7" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (498 samples, 0.05%)</title><rect x="511.7" y="275.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="514.7" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (491 samples, 0.05%)</title><rect x="511.7" y="259.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="514.7" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (453 samples, 0.05%)</title><rect x="511.8" y="243.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="514.8" y="254.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (437 samples, 0.04%)</title><rect x="511.8" y="227.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="514.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (437 samples, 0.04%)</title><rect x="511.8" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.8" y="222.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (437 samples, 0.04%)</title><rect x="511.8" y="195.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.8" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (437 samples, 0.04%)</title><rect x="511.8" y="179.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="514.8" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (416 samples, 0.04%)</title><rect x="511.8" y="163.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="514.8" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (416 samples, 0.04%)</title><rect x="511.8" y="147.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="514.8" y="158.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (212 samples, 0.02%)</title><rect x="512.6" y="419.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.6" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (211 samples, 0.02%)</title><rect x="512.6" y="403.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="515.6" y="414.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (209 samples, 0.02%)</title><rect x="512.6" y="387.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="515.6" y="398.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (209 samples, 0.02%)</title><rect x="512.6" y="371.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="515.6" y="382.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (209 samples, 0.02%)</title><rect x="512.6" y="355.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="515.6" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (209 samples, 0.02%)</title><rect x="512.6" y="339.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.6" y="350.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (229 samples, 0.02%)</title><rect x="512.8" y="483.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="515.8" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (226 samples, 0.02%)</title><rect x="512.8" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="515.8" y="478.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (226 samples, 0.02%)</title><rect x="512.8" y="451.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="515.8" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (226 samples, 0.02%)</title><rect x="512.8" y="435.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="515.8" y="446.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (562,598 samples, 57.37%)</title><rect x="513.1" y="643.0" width="676.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="516.1" y="654.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (7,252 samples, 0.74%)</title><rect x="513.1" y="627.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="516.1" y="638.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (7,252 samples, 0.74%)</title><rect x="513.1" y="611.0" width="8.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="516.1" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (555,346 samples, 56.63%)</title><rect x="521.8" y="627.0" width="668.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.8" y="638.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (555,346 samples, 56.63%)</title><rect x="521.8" y="611.0" width="668.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="524.8" y="622.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (555,346 samples, 56.63%)</title><rect x="521.8" y="595.0" width="668.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="524.8" y="606.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (430,281 samples, 43.87%)</title><rect x="521.8" y="579.0" width="517.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="524.8" y="590.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (430,281 samples, 43.87%)</title><rect x="521.8" y="563.0" width="517.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="524.8" y="574.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (422,694 samples, 43.10%)</title><rect x="521.8" y="547.0" width="508.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="524.8" y="558.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6,963 samples, 0.71%)</title><rect x="521.8" y="531.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="524.8" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (6,963 samples, 0.71%)</title><rect x="521.8" y="515.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="524.8" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6,963 samples, 0.71%)</title><rect x="521.8" y="499.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="524.8" y="510.0"></text>
</g>
<g>
<title>java.lang.String (3,519 samples, 0.36%)</title><rect x="521.8" y="483.0" width="4.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="524.8" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,444 samples, 0.35%)</title><rect x="526.0" y="483.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="529.0" y="494.0"></text>
</g>
<g>
<title>byte[] (3,444 samples, 0.35%)</title><rect x="526.0" y="467.0" width="4.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="529.0" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6,508 samples, 0.66%)</title><rect x="530.2" y="531.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6,508 samples, 0.66%)</title><rect x="530.2" y="515.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="533.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (6,508 samples, 0.66%)</title><rect x="530.2" y="499.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="533.2" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6,508 samples, 0.66%)</title><rect x="530.2" y="483.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="533.2" y="494.0"></text>
</g>
<g>
<title>java.lang.String (3,347 samples, 0.34%)</title><rect x="530.2" y="467.0" width="4.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="533.2" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,161 samples, 0.32%)</title><rect x="534.2" y="467.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.2" y="478.0"></text>
</g>
<g>
<title>byte[] (3,161 samples, 0.32%)</title><rect x="534.2" y="451.0" width="3.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="537.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/HttpService.entity (409,223 samples, 41.73%)</title><rect x="538.0" y="531.0" width="492.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="541.0" y="542.0">ru/mail/polis/service/s3ponia/HttpService.entity</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicatedService.entity (409,223 samples, 41.73%)</title><rect x="538.0" y="515.0" width="492.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="541.0" y="526.0">ru/mail/polis/service/s3ponia/ReplicatedService.entity</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/997010294.linkToTargetMethod (487 samples, 0.05%)</title><rect x="538.0" y="499.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="541.0" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1269787814.invoke (487 samples, 0.05%)</title><rect x="538.0" y="483.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="541.0" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (487 samples, 0.05%)</title><rect x="538.0" y="467.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.0" y="478.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (219 samples, 0.02%)</title><rect x="538.0" y="451.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="541.0" y="462.0"></text>
</g>
<g>
<title>java.lang.String (219 samples, 0.02%)</title><rect x="538.0" y="435.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="541.0" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (268 samples, 0.03%)</title><rect x="538.3" y="451.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="541.3" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (268 samples, 0.03%)</title><rect x="538.3" y="435.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="541.3" y="446.0"></text>
</g>
<g>
<title>byte[] (268 samples, 0.03%)</title><rect x="538.3" y="419.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="541.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (335 samples, 0.03%)</title><rect x="538.6" y="499.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="541.6" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (335 samples, 0.03%)</title><rect x="538.6" y="483.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.6" y="494.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (335 samples, 0.03%)</title><rect x="538.6" y="467.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="541.6" y="478.0"></text>
</g>
<g>
<title>java/util/Collection.stream (985 samples, 0.10%)</title><rect x="539.0" y="499.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="542.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (464 samples, 0.05%)</title><rect x="539.0" y="483.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="542.0" y="494.0"></text>
</g>
<g>
<title>java.util.HashMap$ValueSpliterator (464 samples, 0.05%)</title><rect x="539.0" y="467.0" width="0.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="542.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (521 samples, 0.05%)</title><rect x="539.6" y="483.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="542.6" y="494.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (521 samples, 0.05%)</title><rect x="539.6" y="467.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="542.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (280 samples, 0.03%)</title><rect x="540.2" y="499.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="543.2" y="510.0"></text>
</g>
<g>
<title>java.util.stream.Collectors$CollectorImpl (280 samples, 0.03%)</title><rect x="540.2" y="483.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="543.2" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1,501 samples, 0.15%)</title><rect x="540.5" y="499.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="543.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1,501 samples, 0.15%)</title><rect x="540.5" y="483.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1,501 samples, 0.15%)</title><rect x="540.5" y="467.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="543.5" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1,174 samples, 0.12%)</title><rect x="540.5" y="451.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="543.5" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (768 samples, 0.08%)</title><rect x="540.5" y="435.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="543.5" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (768 samples, 0.08%)</title><rect x="540.5" y="419.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="543.5" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (532 samples, 0.05%)</title><rect x="540.5" y="403.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="543.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.tryAdvance (532 samples, 0.05%)</title><rect x="540.5" y="387.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="543.5" y="398.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1$1.accept (532 samples, 0.05%)</title><rect x="540.5" y="371.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="543.5" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (532 samples, 0.05%)</title><rect x="540.5" y="355.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="543.5" y="366.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$12/292917034.accept (532 samples, 0.05%)</title><rect x="540.5" y="339.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="543.5" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (532 samples, 0.05%)</title><rect x="540.5" y="323.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="543.5" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (532 samples, 0.05%)</title><rect x="540.5" y="307.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="543.5" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (532 samples, 0.05%)</title><rect x="540.5" y="291.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="543.5" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (532 samples, 0.05%)</title><rect x="540.5" y="275.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="543.5" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (532 samples, 0.05%)</title><rect x="540.5" y="259.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="543.5" y="270.0"></text>
</g>
<g>
<title>java.lang.Object[] (532 samples, 0.05%)</title><rect x="540.5" y="243.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="543.5" y="254.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1$1.begin (236 samples, 0.02%)</title><rect x="541.2" y="403.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="544.2" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (236 samples, 0.02%)</title><rect x="541.2" y="387.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="544.2" y="398.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$11/1630521067.get (236 samples, 0.02%)</title><rect x="541.2" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="544.2" y="382.0"></text>
</g>
<g>
<title>java.util.ArrayList (236 samples, 0.02%)</title><rect x="541.2" y="355.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="544.2" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (406 samples, 0.04%)</title><rect x="541.5" y="435.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.5" y="446.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps$1.opWrapSink (406 samples, 0.04%)</title><rect x="541.5" y="419.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="544.5" y="430.0"></text>
</g>
<g>
<title>java.util.stream.SliceOps$1$1 (406 samples, 0.04%)</title><rect x="541.5" y="403.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="544.5" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (327 samples, 0.03%)</title><rect x="541.9" y="451.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="544.9" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (327 samples, 0.03%)</title><rect x="541.9" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="544.9" y="446.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3ReducingSink (327 samples, 0.03%)</title><rect x="541.9" y="419.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="544.9" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.limit (624 samples, 0.06%)</title><rect x="542.3" y="499.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/SliceOps.makeRef (624 samples, 0.06%)</title><rect x="542.3" y="483.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="545.3" y="494.0"></text>
</g>
<g>
<title>java.util.stream.SliceOps$1 (624 samples, 0.06%)</title><rect x="542.3" y="467.0" width="0.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="545.3" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (710 samples, 0.07%)</title><rect x="543.2" y="499.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="546.2" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (710 samples, 0.07%)</title><rect x="543.2" y="483.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (494 samples, 0.05%)</title><rect x="543.2" y="467.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="546.2" y="478.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (494 samples, 0.05%)</title><rect x="543.2" y="451.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.2" y="462.0"></text>
</g>
<g>
<title>byte[] (494 samples, 0.05%)</title><rect x="543.2" y="435.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="546.2" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (216 samples, 0.02%)</title><rect x="543.8" y="467.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.8" y="478.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (216 samples, 0.02%)</title><rect x="543.8" y="451.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="546.8" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (435 samples, 0.04%)</title><rect x="544.1" y="499.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.entity (66,256 samples, 6.76%)</title><rect x="544.6" y="499.0" width="79.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="547.6" y="510.0">ru/mail/p..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,464 samples, 0.25%)</title><rect x="544.6" y="483.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="547.6" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,464 samples, 0.25%)</title><rect x="544.6" y="467.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="547.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$130/1610207105.get$Lambda (2,464 samples, 0.25%)</title><rect x="544.6" y="451.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="547.6" y="462.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.AsyncService$$Lambda$130 (2,464 samples, 0.25%)</title><rect x="544.6" y="435.0" width="3.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="547.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6,610 samples, 0.67%)</title><rect x="547.6" y="483.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="550.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6,610 samples, 0.67%)</title><rect x="547.6" y="467.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="550.6" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,610 samples, 0.67%)</title><rect x="547.6" y="451.0" width="7.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="550.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9,123 samples, 0.93%)</title><rect x="555.5" y="483.0" width="11.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9,123 samples, 0.93%)</title><rect x="555.5" y="467.0" width="11.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="558.5" y="478.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniWhenComplete (5,272 samples, 0.54%)</title><rect x="555.5" y="451.0" width="6.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="558.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3,206 samples, 0.33%)</title><rect x="561.9" y="451.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="564.9" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture (3,206 samples, 0.33%)</title><rect x="561.9" y="435.0" width="3.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="564.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (628 samples, 0.06%)</title><rect x="565.7" y="451.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="568.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$130/1610207105.accept (628 samples, 0.06%)</title><rect x="565.7" y="435.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="568.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$entity$1 (628 samples, 0.06%)</title><rect x="565.7" y="419.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="568.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Utility.sendResponse (628 samples, 0.06%)</title><rect x="565.7" y="403.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="568.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (628 samples, 0.06%)</title><rect x="565.7" y="387.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="568.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (628 samples, 0.06%)</title><rect x="565.7" y="371.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="568.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (410 samples, 0.04%)</title><rect x="565.7" y="355.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="568.7" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (410 samples, 0.04%)</title><rect x="565.7" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="568.7" y="350.0"></text>
</g>
<g>
<title>byte[] (410 samples, 0.04%)</title><rect x="565.7" y="323.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="568.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (218 samples, 0.02%)</title><rect x="566.2" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="569.2" y="366.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (218 samples, 0.02%)</title><rect x="566.2" y="339.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="569.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.putAsync (20,421 samples, 2.08%)</title><rect x="566.5" y="483.0" width="24.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.5" y="494.0">r..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/560761690.linkToTargetMethod (4,520 samples, 0.46%)</title><rect x="566.5" y="467.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1099279637.invokeStatic (4,520 samples, 0.46%)</title><rect x="566.5" y="451.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="569.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$121/1169830266.get$Lambda (4,520 samples, 0.46%)</title><rect x="566.5" y="435.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="569.5" y="446.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.AsyncService$$Lambda$121 (4,520 samples, 0.46%)</title><rect x="566.5" y="419.0" width="5.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="569.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (6,533 samples, 0.67%)</title><rect x="572.0" y="467.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (6,533 samples, 0.67%)</title><rect x="572.0" y="451.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.0" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$AsyncSupply (3,129 samples, 0.32%)</title><rect x="572.0" y="435.0" width="3.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="575.0" y="446.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture (3,193 samples, 0.33%)</title><rect x="575.7" y="435.0" width="3.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="578.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (211 samples, 0.02%)</title><rect x="579.6" y="435.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (211 samples, 0.02%)</title><rect x="579.6" y="419.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="582.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (211 samples, 0.02%)</title><rect x="579.6" y="403.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="582.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (211 samples, 0.02%)</title><rect x="579.6" y="387.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="582.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (211 samples, 0.02%)</title><rect x="579.6" y="371.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="582.6" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (211 samples, 0.02%)</title><rect x="579.6" y="355.0" width="0.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="582.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (9,368 samples, 0.96%)</title><rect x="579.8" y="467.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (9,368 samples, 0.96%)</title><rect x="579.8" y="451.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.8" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture$UniApply (5,365 samples, 0.55%)</title><rect x="579.8" y="435.0" width="6.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="582.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3,173 samples, 0.32%)</title><rect x="586.3" y="435.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="589.3" y="446.0"></text>
</g>
<g>
<title>java.util.concurrent.CompletableFuture (3,173 samples, 0.32%)</title><rect x="586.3" y="419.0" width="3.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="589.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyNow (801 samples, 0.08%)</title><rect x="590.1" y="435.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="593.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$128/1268322720.apply (671 samples, 0.07%)</title><rect x="590.2" y="419.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$putAsync$5 (671 samples, 0.07%)</title><rect x="590.2" y="403.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="593.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (548 samples, 0.06%)</title><rect x="590.4" y="387.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="593.4" y="398.0"></text>
</g>
<g>
<title>byte[] (235 samples, 0.02%)</title><rect x="590.4" y="371.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="593.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (18,069 samples, 1.84%)</title><rect x="591.1" y="483.0" width="21.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="594.1" y="494.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (18,069 samples, 1.84%)</title><rect x="591.1" y="467.0" width="21.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="594.1" y="478.0">r..</text>
</g>
<g>
<title>java/lang/String.stripLeading (7,424 samples, 0.76%)</title><rect x="591.1" y="451.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="594.1" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.stripLeading (7,424 samples, 0.76%)</title><rect x="591.1" y="435.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="594.1" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7,424 samples, 0.76%)</title><rect x="591.1" y="419.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="594.1" y="430.0"></text>
</g>
<g>
<title>java.lang.String (3,241 samples, 0.33%)</title><rect x="591.1" y="403.0" width="3.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="594.1" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4,183 samples, 0.43%)</title><rect x="595.0" y="403.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="598.0" y="414.0"></text>
</g>
<g>
<title>byte[] (4,183 samples, 0.43%)</title><rect x="595.0" y="387.0" width="5.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="598.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (7,550 samples, 0.77%)</title><rect x="600.0" y="451.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="603.0" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7,550 samples, 0.77%)</title><rect x="600.0" y="435.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="603.0" y="446.0"></text>
</g>
<g>
<title>java.lang.String (3,167 samples, 0.32%)</title><rect x="600.0" y="419.0" width="3.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="603.0" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4,383 samples, 0.45%)</title><rect x="603.8" y="419.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="606.8" y="430.0"></text>
</g>
<g>
<title>byte[] (4,383 samples, 0.45%)</title><rect x="603.8" y="403.0" width="5.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="606.8" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.Header (3,095 samples, 0.32%)</title><rect x="609.1" y="451.0" width="3.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="612.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Utility.byteBufferFromString (9,569 samples, 0.98%)</title><rect x="612.8" y="483.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="615.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3,255 samples, 0.33%)</title><rect x="612.8" y="467.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3,255 samples, 0.33%)</title><rect x="612.8" y="451.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="615.8" y="462.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3,255 samples, 0.33%)</title><rect x="612.8" y="435.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="615.8" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3,255 samples, 0.33%)</title><rect x="612.8" y="419.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.8" y="430.0"></text>
</g>
<g>
<title>byte[] (3,255 samples, 0.33%)</title><rect x="612.8" y="403.0" width="3.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="615.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6,314 samples, 0.64%)</title><rect x="616.7" y="467.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="619.7" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6,314 samples, 0.64%)</title><rect x="616.7" y="451.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="619.7" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,314 samples, 0.64%)</title><rect x="616.7" y="435.0" width="7.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="619.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (9,508 samples, 0.97%)</title><rect x="624.3" y="499.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="627.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/Header.getHeader (9,508 samples, 0.97%)</title><rect x="624.3" y="483.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="627.3" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (6,450 samples, 0.66%)</title><rect x="624.3" y="467.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="627.3" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6,450 samples, 0.66%)</title><rect x="624.3" y="451.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="627.3" y="462.0"></text>
</g>
<g>
<title>java.lang.String (3,176 samples, 0.32%)</title><rect x="624.3" y="435.0" width="3.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="627.3" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,274 samples, 0.33%)</title><rect x="628.2" y="435.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="631.2" y="446.0"></text>
</g>
<g>
<title>byte[] (3,274 samples, 0.33%)</title><rect x="628.2" y="419.0" width="3.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="631.2" y="430.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.Header (3,058 samples, 0.31%)</title><rect x="632.1" y="467.0" width="3.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="635.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNodeReplicas (443 samples, 0.05%)</title><rect x="636.0" y="499.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNodeReplicas (443 samples, 0.05%)</title><rect x="636.0" y="483.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.0" y="494.0"></text>
</g>
<g>
<title>java.lang.String[] (295 samples, 0.03%)</title><rect x="636.0" y="467.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="639.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicationConfiguration.parseOrDefault (2,248 samples, 0.23%)</title><rect x="636.6" y="499.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ReplicationConfiguration.parse (2,248 samples, 0.23%)</title><rect x="636.6" y="483.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.6" y="494.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (421 samples, 0.04%)</title><rect x="636.6" y="467.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.6" y="478.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (313 samples, 0.03%)</title><rect x="636.7" y="451.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="639.7" y="462.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter (236 samples, 0.02%)</title><rect x="636.8" y="435.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="639.8" y="446.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (1,646 samples, 0.17%)</title><rect x="637.1" y="467.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.1" y="478.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (696 samples, 0.07%)</title><rect x="637.1" y="451.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="640.1" y="462.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (696 samples, 0.07%)</title><rect x="637.1" y="435.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="640.1" y="446.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (696 samples, 0.07%)</title><rect x="637.1" y="419.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="640.1" y="430.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (696 samples, 0.07%)</title><rect x="637.1" y="403.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="640.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (696 samples, 0.07%)</title><rect x="637.1" y="387.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.1" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (696 samples, 0.07%)</title><rect x="637.1" y="371.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.1" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (696 samples, 0.07%)</title><rect x="637.1" y="355.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="640.1" y="366.0"></text>
</g>
<g>
<title>java.lang.String (366 samples, 0.04%)</title><rect x="637.1" y="339.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="640.1" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (330 samples, 0.03%)</title><rect x="637.5" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="640.5" y="350.0"></text>
</g>
<g>
<title>byte[] (330 samples, 0.03%)</title><rect x="637.5" y="323.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="640.5" y="334.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (277 samples, 0.03%)</title><rect x="637.9" y="451.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="640.9" y="462.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (277 samples, 0.03%)</title><rect x="637.9" y="435.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.9" y="446.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (277 samples, 0.03%)</title><rect x="637.9" y="419.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.9" y="430.0"></text>
</g>
<g>
<title>com.google.common.base.Splitter$1$1 (277 samples, 0.03%)</title><rect x="637.9" y="403.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="640.9" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (341 samples, 0.03%)</title><rect x="638.4" y="451.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.4" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (341 samples, 0.03%)</title><rect x="638.4" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="641.4" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (341 samples, 0.03%)</title><rect x="638.4" y="419.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="641.4" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (341 samples, 0.03%)</title><rect x="638.4" y="403.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.4" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (341 samples, 0.03%)</title><rect x="638.4" y="387.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.4" y="398.0"></text>
</g>
<g>
<title>java.lang.Object[] (341 samples, 0.03%)</title><rect x="638.4" y="371.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="641.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Proxy.proxyReplicas (324,475 samples, 33.09%)</title><rect x="639.3" y="499.0" width="390.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="642.3" y="510.0">ru/mail/polis/util/Proxy.proxyReplicas</text>
</g>
<g>
<title>java.util.ArrayList (237 samples, 0.02%)</title><rect x="639.3" y="483.0" width="0.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="642.3" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (286 samples, 0.03%)</title><rect x="639.5" y="483.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="642.5" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (286 samples, 0.03%)</title><rect x="639.5" y="467.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="642.5" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (286 samples, 0.03%)</title><rect x="639.5" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.5" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (286 samples, 0.03%)</title><rect x="639.5" y="435.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="642.5" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (286 samples, 0.03%)</title><rect x="639.5" y="419.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="642.5" y="430.0"></text>
</g>
<g>
<title>java.lang.Object[] (286 samples, 0.03%)</title><rect x="639.5" y="403.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="642.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Proxy.proxy (323,952 samples, 33.03%)</title><rect x="639.9" y="483.0" width="389.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="642.9" y="494.0">ru/mail/polis/util/Proxy.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (323,952 samples, 33.03%)</title><rect x="639.9" y="467.0" width="389.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="642.9" y="478.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (323,952 samples, 33.03%)</title><rect x="639.9" y="451.0" width="389.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="642.9" y="462.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (1,571 samples, 0.16%)</title><rect x="639.9" y="435.0" width="1.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="642.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (303,465 samples, 30.94%)</title><rect x="641.8" y="435.0" width="365.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="644.8" y="446.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (131,225 samples, 13.38%)</title><rect x="641.8" y="419.0" width="157.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="644.8" y="430.0">byte[]</text>
</g>
<g>
<title>byte[] (172,240 samples, 17.56%)</title><rect x="799.7" y="419.0" width="207.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="802.7" y="430.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (13,523 samples, 1.38%)</title><rect x="1006.9" y="435.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1009.9" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (774 samples, 0.08%)</title><rect x="1007.0" y="419.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1010.0" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (774 samples, 0.08%)</title><rect x="1007.0" y="403.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1010.0" y="414.0"></text>
</g>
<g>
<title>java.lang.String (382 samples, 0.04%)</title><rect x="1007.0" y="387.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1010.0" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (392 samples, 0.04%)</title><rect x="1007.5" y="387.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1010.5" y="398.0"></text>
</g>
<g>
<title>byte[] (392 samples, 0.04%)</title><rect x="1007.5" y="371.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1010.5" y="382.0"></text>
</g>
<g>
<title>one.nio.http.Response (355 samples, 0.04%)</title><rect x="1008.0" y="419.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1011.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (11,411 samples, 1.16%)</title><rect x="1008.4" y="419.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1011.4" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11,411 samples, 1.16%)</title><rect x="1008.4" y="403.0" width="13.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1011.4" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11,411 samples, 1.16%)</title><rect x="1008.4" y="387.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1011.4" y="398.0"></text>
</g>
<g>
<title>char[] (9,058 samples, 0.92%)</title><rect x="1008.4" y="371.0" width="10.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1011.4" y="382.0"></text>
</g>
<g>
<title>java.lang.String (1,083 samples, 0.11%)</title><rect x="1019.3" y="371.0" width="1.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1022.3" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,270 samples, 0.13%)</title><rect x="1020.6" y="371.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1023.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,270 samples, 0.13%)</title><rect x="1020.6" y="355.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1023.6" y="366.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,270 samples, 0.13%)</title><rect x="1020.6" y="339.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1023.6" y="350.0"></text>
</g>
<g>
<title>byte[] (1,270 samples, 0.13%)</title><rect x="1020.6" y="323.0" width="1.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1023.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (418 samples, 0.04%)</title><rect x="1022.1" y="419.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1025.1" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (418 samples, 0.04%)</title><rect x="1022.1" y="403.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1025.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (455 samples, 0.05%)</title><rect x="1022.6" y="419.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1025.6" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (455 samples, 0.05%)</title><rect x="1022.6" y="403.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1025.6" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (455 samples, 0.05%)</title><rect x="1022.6" y="387.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1025.6" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (260 samples, 0.03%)</title><rect x="1022.9" y="371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1025.9" y="382.0"></text>
</g>
<g>
<title>byte[] (260 samples, 0.03%)</title><rect x="1022.9" y="355.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1025.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (4,635 samples, 0.47%)</title><rect x="1023.2" y="435.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1026.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4,635 samples, 0.47%)</title><rect x="1023.2" y="419.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1026.2" y="430.0"></text>
</g>
<g>
<title>byte[] (4,635 samples, 0.47%)</title><rect x="1023.2" y="403.0" width="5.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1026.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (577 samples, 0.06%)</title><rect x="1028.8" y="435.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.8" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (577 samples, 0.06%)</title><rect x="1028.8" y="419.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1031.8" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (577 samples, 0.06%)</title><rect x="1028.8" y="403.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1031.8" y="414.0"></text>
</g>
<g>
<title>java.lang.String (269 samples, 0.03%)</title><rect x="1028.8" y="387.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1031.8" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (308 samples, 0.03%)</title><rect x="1029.1" y="387.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1032.1" y="398.0"></text>
</g>
<g>
<title>byte[] (308 samples, 0.03%)</title><rect x="1029.1" y="371.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1032.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Utility.byteBufferFromString (606 samples, 0.06%)</title><rect x="1029.7" y="499.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1032.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (219 samples, 0.02%)</title><rect x="1029.7" y="483.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1032.7" y="494.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (219 samples, 0.02%)</title><rect x="1029.7" y="467.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1032.7" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (219 samples, 0.02%)</title><rect x="1029.7" y="451.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1032.7" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (219 samples, 0.02%)</title><rect x="1029.7" y="435.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1032.7" y="446.0"></text>
</g>
<g>
<title>byte[] (219 samples, 0.02%)</title><rect x="1029.7" y="419.0" width="0.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1032.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (387 samples, 0.04%)</title><rect x="1029.9" y="483.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1032.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (387 samples, 0.04%)</title><rect x="1029.9" y="467.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1032.9" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (387 samples, 0.04%)</title><rect x="1029.9" y="451.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1032.9" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (7,587 samples, 0.77%)</title><rect x="1030.4" y="547.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1033.4" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (7,587 samples, 0.77%)</title><rect x="1030.4" y="531.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1033.4" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7,587 samples, 0.77%)</title><rect x="1030.4" y="515.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1033.4" y="526.0"></text>
</g>
<g>
<title>java.lang.String (3,351 samples, 0.34%)</title><rect x="1030.4" y="499.0" width="4.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1033.4" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4,236 samples, 0.43%)</title><rect x="1034.4" y="499.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1037.4" y="510.0"></text>
</g>
<g>
<title>byte[] (4,236 samples, 0.43%)</title><rect x="1034.4" y="483.0" width="5.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1037.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (41,109 samples, 4.19%)</title><rect x="1039.5" y="579.0" width="49.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1042.5" y="590.0">one/n..</text>
</g>
<g>
<title>one.nio.http.Request (5,396 samples, 0.55%)</title><rect x="1039.5" y="563.0" width="6.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1042.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (10,901 samples, 1.11%)</title><rect x="1046.0" y="563.0" width="13.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1049.0" y="574.0"></text>
</g>
<g>
<title>java.lang.String[] (10,901 samples, 1.11%)</title><rect x="1046.0" y="547.0" width="13.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1049.0" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24,812 samples, 2.53%)</title><rect x="1059.1" y="563.0" width="29.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1062.1" y="574.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (24,812 samples, 2.53%)</title><rect x="1059.1" y="547.0" width="29.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1062.1" y="558.0">on..</text>
</g>
<g>
<title>char[] (13,936 samples, 1.42%)</title><rect x="1059.1" y="531.0" width="16.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1062.1" y="542.0"></text>
</g>
<g>
<title>java.lang.String (3,321 samples, 0.34%)</title><rect x="1075.9" y="531.0" width="4.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1078.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7,555 samples, 0.77%)</title><rect x="1079.9" y="531.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1082.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7,555 samples, 0.77%)</title><rect x="1079.9" y="515.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1082.9" y="526.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (7,555 samples, 0.77%)</title><rect x="1079.9" y="499.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1082.9" y="510.0"></text>
</g>
<g>
<title>byte[] (7,555 samples, 0.77%)</title><rect x="1079.9" y="483.0" width="9.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1082.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4,306 samples, 0.44%)</title><rect x="1089.0" y="579.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1092.0" y="590.0"></text>
</g>
<g>
<title>byte[] (4,306 samples, 0.44%)</title><rect x="1089.0" y="563.0" width="5.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1092.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6,698 samples, 0.68%)</title><rect x="1094.2" y="579.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1097.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (6,698 samples, 0.68%)</title><rect x="1094.2" y="563.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1097.2" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6,698 samples, 0.68%)</title><rect x="1094.2" y="547.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1097.2" y="558.0"></text>
</g>
<g>
<title>java.lang.String (3,304 samples, 0.34%)</title><rect x="1094.2" y="531.0" width="3.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1097.2" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,394 samples, 0.35%)</title><rect x="1098.1" y="531.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1101.1" y="542.0"></text>
</g>
<g>
<title>byte[] (3,394 samples, 0.35%)</title><rect x="1098.1" y="515.0" width="4.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1101.1" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (72,952 samples, 7.44%)</title><rect x="1102.2" y="579.0" width="87.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1105.2" y="590.0">one/nio/ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (72,952 samples, 7.44%)</title><rect x="1102.2" y="563.0" width="87.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1105.2" y="574.0">one/nio/ut..</text>
</g>
<g>
<title>char[] (34,115 samples, 3.48%)</title><rect x="1102.2" y="547.0" width="41.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1105.2" y="558.0">cha..</text>
</g>
<g>
<title>java.lang.String (14,335 samples, 1.46%)</title><rect x="1143.3" y="547.0" width="17.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1146.3" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (24,502 samples, 2.50%)</title><rect x="1160.5" y="547.0" width="29.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1163.5" y="558.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (24,502 samples, 2.50%)</title><rect x="1160.5" y="531.0" width="29.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1163.5" y="542.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (24,502 samples, 2.50%)</title><rect x="1160.5" y="515.0" width="29.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1163.5" y="526.0">ja..</text>
</g>
<g>
<title>byte[] (24,502 samples, 2.50%)</title><rect x="1160.5" y="499.0" width="29.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1163.5" y="510.0">by..</text>
</g>
</g>
</svg>
