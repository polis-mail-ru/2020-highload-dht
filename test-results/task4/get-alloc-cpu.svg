<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="485"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="485"> </text>
<g id="frames">
<g>
<title>all (24,430 samples, 100.00%)</title><rect x="10.0" y="451.0" width="1180.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.0" y="462.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (21,570 samples, 88.29%)</title><rect x="10.0" y="435.0" width="1041.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (21,570 samples, 88.29%)</title><rect x="10.0" y="419.0" width="1041.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="430.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (21,570 samples, 88.29%)</title><rect x="10.0" y="403.0" width="1041.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="414.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (412 samples, 1.69%)</title><rect x="10.0" y="387.0" width="19.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (412 samples, 1.69%)</title><rect x="10.0" y="371.0" width="19.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (412 samples, 1.69%)</title><rect x="10.0" y="355.0" width="19.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (412 samples, 1.69%)</title><rect x="10.0" y="339.0" width="19.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (412 samples, 1.69%)</title><rect x="10.0" y="323.0" width="19.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$78/3965949.run (21,158 samples, 86.61%)</title><rect x="29.9" y="387.0" width="1022.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.9" y="398.0">ru/mail/polis/service/s3ponia/AsyncService$$Lambda$78/3965949.run</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$get$2 (21,158 samples, 86.61%)</title><rect x="29.9" y="371.0" width="1022.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.9" y="382.0">ru/mail/polis/service/s3ponia/AsyncService.lambda$get$2</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.byteBufferFromString (969 samples, 3.97%)</title><rect x="29.9" y="355.0" width="46.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.9" y="366.0">ru/m..</text>
</g>
<g>
<title>java/lang/String.getBytes (339 samples, 1.39%)</title><rect x="29.9" y="339.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (339 samples, 1.39%)</title><rect x="29.9" y="323.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.9" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (339 samples, 1.39%)</title><rect x="29.9" y="307.0" width="16.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.9" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (339 samples, 1.39%)</title><rect x="29.9" y="291.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.9" y="302.0"></text>
</g>
<g>
<title>byte[] (339 samples, 1.39%)</title><rect x="29.9" y="275.0" width="16.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="32.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (630 samples, 2.58%)</title><rect x="46.3" y="339.0" width="30.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="49.3" y="350.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (630 samples, 2.58%)</title><rect x="46.3" y="323.0" width="30.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="49.3" y="334.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (630 samples, 2.58%)</title><rect x="46.3" y="307.0" width="30.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="49.3" y="318.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.get (20,189 samples, 82.64%)</title><rect x="76.7" y="355.0" width="975.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.7" y="366.0">ru/mail/polis/service/s3ponia/AsyncService.get</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,649 samples, 6.75%)</title><rect x="76.7" y="339.0" width="79.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.7" y="350.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,649 samples, 6.75%)</title><rect x="76.7" y="323.0" width="79.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.7" y="334.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,138 samples, 4.66%)</title><rect x="76.7" y="307.0" width="55.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="79.7" y="318.0">one/n..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,138 samples, 4.66%)</title><rect x="76.7" y="291.0" width="55.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.7" y="302.0">one/n..</text>
</g>
<g>
<title>byte[] (1,037 samples, 4.24%)</title><rect x="76.7" y="275.0" width="50.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="79.7" y="286.0">byte[]</text>
</g>
<g>
<title>byte[] (101 samples, 0.41%)</title><rect x="126.8" y="275.0" width="4.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="129.8" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (511 samples, 2.09%)</title><rect x="131.7" y="307.0" width="24.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.7" y="318.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (511 samples, 2.09%)</title><rect x="131.7" y="291.0" width="24.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="134.7" y="302.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.ok (1,570 samples, 6.43%)</title><rect x="156.4" y="339.0" width="75.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.4" y="350.0">one/nio/..</text>
</g>
<g>
<title>one.nio.http.Response (292 samples, 1.20%)</title><rect x="156.4" y="323.0" width="14.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="159.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,278 samples, 5.23%)</title><rect x="170.5" y="323.0" width="61.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.5" y="334.0">one/ni..</text>
</g>
<g>
<title>byte[] (556 samples, 2.28%)</title><rect x="170.5" y="307.0" width="26.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="173.5" y="318.0">b..</text>
</g>
<g>
<title>java.lang.String[] (392 samples, 1.60%)</title><rect x="197.3" y="307.0" width="18.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="200.3" y="318.0"></text>
</g>
<g>
<title>java.lang.String (330 samples, 1.35%)</title><rect x="216.2" y="307.0" width="16.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="219.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (16,637 samples, 68.10%)</title><rect x="232.2" y="339.0" width="803.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.2" y="350.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1,870 samples, 7.65%)</title><rect x="232.2" y="323.0" width="90.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.2" y="334.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1,870 samples, 7.65%)</title><rect x="232.2" y="307.0" width="90.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.2" y="318.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1,870 samples, 7.65%)</title><rect x="232.2" y="291.0" width="90.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.2" y="302.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1,870 samples, 7.65%)</title><rect x="232.2" y="275.0" width="90.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.2" y="286.0">com/google..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,870 samples, 7.65%)</title><rect x="232.2" y="259.0" width="90.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.2" y="270.0">ru/mail/po..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (620 samples, 2.54%)</title><rect x="232.2" y="243.0" width="29.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.2" y="254.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (620 samples, 2.54%)</title><rect x="232.2" y="227.0" width="29.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.2" y="238.0">co..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (620 samples, 2.54%)</title><rect x="232.2" y="211.0" width="29.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.2" y="222.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (620 samples, 2.54%)</title><rect x="232.2" y="195.0" width="29.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.2" y="206.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (620 samples, 2.54%)</title><rect x="232.2" y="179.0" width="29.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.2" y="190.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (620 samples, 2.54%)</title><rect x="232.2" y="163.0" width="29.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.2" y="174.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$100/518639221.getAsBoolean (620 samples, 2.54%)</title><rect x="232.2" y="147.0" width="29.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="235.2" y="158.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (620 samples, 2.54%)</title><rect x="232.2" y="131.0" width="29.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="235.2" y="142.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (620 samples, 2.54%)</title><rect x="232.2" y="115.0" width="29.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.2" y="126.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (327 samples, 1.34%)</title><rect x="232.2" y="99.0" width="15.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="235.2" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (327 samples, 1.34%)</title><rect x="232.2" y="83.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.2" y="94.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (327 samples, 1.34%)</title><rect x="232.2" y="67.0" width="15.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="235.2" y="78.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (293 samples, 1.20%)</title><rect x="248.0" y="99.0" width="14.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable$$Lambda$89/1600202119.apply (293 samples, 1.20%)</title><rect x="248.0" y="83.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.0" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.lambda$iterator$2 (293 samples, 1.20%)</title><rect x="248.0" y="67.0" width="14.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.of (293 samples, 1.20%)</title><rect x="248.0" y="51.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.0" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Cell (293 samples, 1.20%)</title><rect x="248.0" y="35.0" width="14.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="251.0" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$102/1002749059.apply (1,250 samples, 5.12%)</title><rect x="262.1" y="243.0" width="60.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.1" y="254.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (1,250 samples, 5.12%)</title><rect x="262.1" y="227.0" width="60.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.1" y="238.0">ru/mai..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,250 samples, 5.12%)</title><rect x="262.1" y="211.0" width="60.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.1" y="222.0">java/n..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,250 samples, 5.12%)</title><rect x="262.1" y="195.0" width="60.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="265.1" y="206.0">java.n..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1,465 samples, 6.00%)</title><rect x="322.5" y="323.0" width="70.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.5" y="334.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1,465 samples, 6.00%)</title><rect x="322.5" y="307.0" width="70.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.5" y="318.0">com/goog..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$104/1341717270.apply (1,465 samples, 6.00%)</title><rect x="322.5" y="291.0" width="70.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.5" y="302.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.lambda$iterator$3 (1,465 samples, 6.00%)</title><rect x="322.5" y="275.0" width="70.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.5" y="286.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/Record.of (321 samples, 1.31%)</title><rect x="322.5" y="259.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.5" y="270.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (321 samples, 1.31%)</title><rect x="322.5" y="243.0" width="15.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="325.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (563 samples, 2.30%)</title><rect x="338.0" y="259.0" width="27.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.0" y="270.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (563 samples, 2.30%)</title><rect x="338.0" y="243.0" width="27.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="341.0" y="254.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (563 samples, 2.30%)</title><rect x="338.0" y="227.0" width="27.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="341.0" y="238.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.getValue (581 samples, 2.38%)</title><rect x="365.2" y="259.0" width="28.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="368.2" y="270.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (581 samples, 2.38%)</title><rect x="365.2" y="243.0" width="28.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.2" y="254.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (581 samples, 2.38%)</title><rect x="365.2" y="227.0" width="28.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="368.2" y="238.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (588 samples, 2.41%)</title><rect x="393.3" y="323.0" width="28.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="396.3" y="334.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (588 samples, 2.41%)</title><rect x="393.3" y="307.0" width="28.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.3" y="318.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (588 samples, 2.41%)</title><rect x="393.3" y="291.0" width="28.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.3" y="302.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (588 samples, 2.41%)</title><rect x="393.3" y="275.0" width="28.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="396.3" y="286.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (586 samples, 2.40%)</title><rect x="421.7" y="323.0" width="28.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="424.7" y="334.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (586 samples, 2.40%)</title><rect x="421.7" y="307.0" width="28.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="424.7" y="318.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (586 samples, 2.40%)</title><rect x="421.7" y="291.0" width="28.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="424.7" y="302.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (586 samples, 2.40%)</title><rect x="421.7" y="275.0" width="28.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="424.7" y="286.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.iterator (12,128 samples, 49.64%)</title><rect x="450.0" y="323.0" width="585.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="453.0" y="334.0">ru/mail/polis/dao/s3ponia/PersistenceDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (413 samples, 1.69%)</title><rect x="450.0" y="307.0" width="19.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="453.0" y="318.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (413 samples, 1.69%)</title><rect x="450.0" y="291.0" width="19.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="453.0" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (4,802 samples, 19.66%)</title><rect x="469.9" y="307.0" width="232.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="472.9" y="318.0">com/google/common/collect/Itera..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (189 samples, 0.77%)</title><rect x="469.9" y="291.0" width="9.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="472.9" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (4,613 samples, 18.88%)</title><rect x="479.1" y="291.0" width="222.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="482.1" y="302.0">com/google/common/collect/Ite..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (285 samples, 1.17%)</title><rect x="479.1" y="275.0" width="13.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="482.1" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (321 samples, 1.31%)</title><rect x="492.8" y="275.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="495.8" y="286.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (321 samples, 1.31%)</title><rect x="492.8" y="259.0" width="15.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="495.8" y="270.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (393 samples, 1.61%)</title><rect x="508.3" y="275.0" width="19.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="511.3" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (37 samples, 0.15%)</title><rect x="527.3" y="275.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.3" y="286.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (37 samples, 0.15%)</title><rect x="527.3" y="259.0" width="1.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="530.3" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (305 samples, 1.25%)</title><rect x="529.1" y="275.0" width="14.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="532.1" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (305 samples, 1.25%)</title><rect x="529.1" y="259.0" width="14.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="532.1" y="270.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (3,272 samples, 13.39%)</title><rect x="543.8" y="275.0" width="158.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="546.8" y="286.0">java/util/Spliterato..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (3,272 samples, 13.39%)</title><rect x="543.8" y="259.0" width="158.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="546.8" y="270.0">java/util/stream/Str..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (3,272 samples, 13.39%)</title><rect x="543.8" y="243.0" width="158.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="546.8" y="254.0">java/util/stream/Str..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (584 samples, 2.39%)</title><rect x="543.8" y="227.0" width="28.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="546.8" y="238.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$100/518639221.getAsBoolean (584 samples, 2.39%)</title><rect x="543.8" y="211.0" width="28.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.8" y="222.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (584 samples, 2.39%)</title><rect x="543.8" y="195.0" width="28.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="546.8" y="206.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (584 samples, 2.39%)</title><rect x="543.8" y="179.0" width="28.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="546.8" y="190.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (308 samples, 1.26%)</title><rect x="543.8" y="163.0" width="14.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (308 samples, 1.26%)</title><rect x="543.8" y="147.0" width="14.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="546.8" y="158.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (308 samples, 1.26%)</title><rect x="543.8" y="131.0" width="14.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="546.8" y="142.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (276 samples, 1.13%)</title><rect x="558.7" y="163.0" width="13.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="561.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable$$Lambda$89/1600202119.apply (276 samples, 1.13%)</title><rect x="558.7" y="147.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="561.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.lambda$iterator$2 (276 samples, 1.13%)</title><rect x="558.7" y="131.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="561.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.of (276 samples, 1.13%)</title><rect x="558.7" y="115.0" width="13.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="561.7" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Cell (276 samples, 1.13%)</title><rect x="558.7" y="99.0" width="13.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="561.7" y="110.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (2,688 samples, 11.00%)</title><rect x="572.0" y="227.0" width="129.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="575.0" y="238.0">java/util/stream..</text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (558 samples, 2.28%)</title><rect x="572.0" y="211.0" width="27.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="575.0" y="222.0">j..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (420 samples, 1.72%)</title><rect x="599.0" y="211.0" width="20.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="602.0" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (420 samples, 1.72%)</title><rect x="599.0" y="195.0" width="20.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="602.0" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$100/518639221.get$Lambda (233 samples, 0.95%)</title><rect x="599.0" y="179.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="602.0" y="190.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$100 (233 samples, 0.95%)</title><rect x="599.0" y="163.0" width="11.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="602.0" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$97/336700677.get$Lambda (187 samples, 0.77%)</title><rect x="610.2" y="179.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="613.2" y="190.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$97 (187 samples, 0.77%)</title><rect x="610.2" y="163.0" width="9.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="613.2" y="174.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (712 samples, 2.91%)</title><rect x="619.3" y="211.0" width="34.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="622.3" y="222.0">ja..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (712 samples, 2.91%)</title><rect x="619.3" y="195.0" width="34.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.3" y="206.0">ja..</text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (712 samples, 2.91%)</title><rect x="619.3" y="179.0" width="34.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="622.3" y="190.0">ja..</text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (998 samples, 4.09%)</title><rect x="653.7" y="211.0" width="48.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.7" y="222.0">java..</text>
</g>
<g>
<title>java.lang.Object[] (943 samples, 3.86%)</title><rect x="653.7" y="195.0" width="45.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="656.7" y="206.0">java..</text>
</g>
<g>
<title>java.lang.Object[] (55 samples, 0.23%)</title><rect x="699.2" y="195.0" width="2.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="702.2" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (257 samples, 1.05%)</title><rect x="701.9" y="307.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="704.9" y="318.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (257 samples, 1.05%)</title><rect x="701.9" y="291.0" width="12.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="704.9" y="302.0"></text>
</g>
<g>
<title>java.util.ArrayList (307 samples, 1.26%)</title><rect x="714.3" y="307.0" width="14.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="717.3" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (35 samples, 0.14%)</title><rect x="729.1" y="307.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="732.1" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (35 samples, 0.14%)</title><rect x="729.1" y="291.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="732.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$93/1813849657.get$Lambda (16 samples, 0.07%)</title><rect x="729.1" y="275.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="732.1" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.PersistenceDAO$$Lambda$93 (16 samples, 0.07%)</title><rect x="729.1" y="259.0" width="0.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="732.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$94/1614878604.get$Lambda (19 samples, 0.08%)</title><rect x="729.9" y="275.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="732.9" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.PersistenceDAO$$Lambda$94 (19 samples, 0.08%)</title><rect x="729.9" y="259.0" width="0.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="732.9" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (754 samples, 3.09%)</title><rect x="730.8" y="307.0" width="36.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="733.8" y="318.0">jav..</text>
</g>
<g>
<title>java/util/ArrayList.add (754 samples, 3.09%)</title><rect x="730.8" y="291.0" width="36.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="733.8" y="302.0">jav..</text>
</g>
<g>
<title>java/util/ArrayList.grow (754 samples, 3.09%)</title><rect x="730.8" y="275.0" width="36.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.8" y="286.0">jav..</text>
</g>
<g>
<title>java/util/ArrayList.grow (754 samples, 3.09%)</title><rect x="730.8" y="259.0" width="36.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="733.8" y="270.0">jav..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (754 samples, 3.09%)</title><rect x="730.8" y="243.0" width="36.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="733.8" y="254.0">jav..</text>
</g>
<g>
<title>java.lang.Object[] (713 samples, 2.92%)</title><rect x="730.8" y="227.0" width="34.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="733.8" y="238.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (41 samples, 0.17%)</title><rect x="765.2" y="227.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="768.2" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (41 samples, 0.17%)</title><rect x="765.2" y="211.0" width="2.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="768.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (877 samples, 3.59%)</title><rect x="767.2" y="307.0" width="42.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.2" y="318.0">ru/m..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (299 samples, 1.22%)</title><rect x="767.2" y="291.0" width="14.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="770.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (578 samples, 2.37%)</title><rect x="781.7" y="291.0" width="27.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="784.7" y="302.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (578 samples, 2.37%)</title><rect x="781.7" y="275.0" width="27.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.7" y="286.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (578 samples, 2.37%)</title><rect x="781.7" y="259.0" width="27.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="784.7" y="270.0">c..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (578 samples, 2.37%)</title><rect x="781.7" y="243.0" width="27.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.7" y="254.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (578 samples, 2.37%)</title><rect x="781.7" y="227.0" width="27.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="784.7" y="238.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (578 samples, 2.37%)</title><rect x="781.7" y="211.0" width="27.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="784.7" y="222.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (578 samples, 2.37%)</title><rect x="781.7" y="195.0" width="27.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="784.7" y="206.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$100/518639221.getAsBoolean (578 samples, 2.37%)</title><rect x="781.7" y="179.0" width="27.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="784.7" y="190.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (578 samples, 2.37%)</title><rect x="781.7" y="163.0" width="27.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="784.7" y="174.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (578 samples, 2.37%)</title><rect x="781.7" y="147.0" width="27.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="784.7" y="158.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (261 samples, 1.07%)</title><rect x="781.7" y="131.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (261 samples, 1.07%)</title><rect x="781.7" y="115.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.7" y="126.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (261 samples, 1.07%)</title><rect x="781.7" y="99.0" width="12.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="784.7" y="110.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (317 samples, 1.30%)</title><rect x="794.3" y="131.0" width="15.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="797.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable$$Lambda$89/1600202119.apply (317 samples, 1.30%)</title><rect x="794.3" y="115.0" width="15.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.lambda$iterator$2 (317 samples, 1.30%)</title><rect x="794.3" y="99.0" width="15.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="797.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.of (317 samples, 1.30%)</title><rect x="794.3" y="83.0" width="15.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="797.3" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Cell (317 samples, 1.30%)</title><rect x="794.3" y="67.0" width="15.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="797.3" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.iterator (4,683 samples, 19.17%)</title><rect x="809.6" y="307.0" width="226.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="812.6" y="318.0">ru/mail/polis/dao/s3ponia/MemT..</text>
</g>
<g>
<title>java/util/Collection.stream (1,144 samples, 4.68%)</title><rect x="809.6" y="291.0" width="55.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.6" y="302.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (410 samples, 1.68%)</title><rect x="809.6" y="275.0" width="19.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="812.6" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (410 samples, 1.68%)</title><rect x="809.6" y="259.0" width="19.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="812.6" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (734 samples, 3.00%)</title><rect x="829.4" y="275.0" width="35.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="832.4" y="286.0">jav..</text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (734 samples, 3.00%)</title><rect x="829.4" y="259.0" width="35.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="832.4" y="270.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (167 samples, 0.68%)</title><rect x="864.8" y="291.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.8" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (167 samples, 0.68%)</title><rect x="864.8" y="275.0" width="8.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="867.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (670 samples, 2.74%)</title><rect x="872.9" y="291.0" width="32.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="875.9" y="302.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (670 samples, 2.74%)</title><rect x="872.9" y="275.0" width="32.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="875.9" y="286.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (670 samples, 2.74%)</title><rect x="872.9" y="259.0" width="32.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="875.9" y="270.0">ja..</text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (670 samples, 2.74%)</title><rect x="872.9" y="243.0" width="32.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="875.9" y="254.0">ja..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (1,109 samples, 4.54%)</title><rect x="905.3" y="291.0" width="53.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="908.3" y="302.0">java/..</text>
</g>
<g>
<title>java/util/Spliterators.iterator (363 samples, 1.49%)</title><rect x="905.3" y="275.0" width="17.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="908.3" y="286.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (363 samples, 1.49%)</title><rect x="905.3" y="259.0" width="17.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="908.3" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (746 samples, 3.05%)</title><rect x="922.8" y="275.0" width="36.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="925.8" y="286.0">jav..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (192 samples, 0.79%)</title><rect x="922.8" y="259.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="925.8" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (192 samples, 0.79%)</title><rect x="922.8" y="243.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="925.8" y="254.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$91/1341738626.get$Lambda (192 samples, 0.79%)</title><rect x="922.8" y="227.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="925.8" y="238.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$91 (192 samples, 0.79%)</title><rect x="922.8" y="211.0" width="9.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="925.8" y="222.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (554 samples, 2.27%)</title><rect x="932.1" y="259.0" width="26.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="935.1" y="270.0">j..</text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (554 samples, 2.27%)</title><rect x="932.1" y="243.0" width="26.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="935.1" y="254.0">j..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1,593 samples, 6.52%)</title><rect x="958.8" y="291.0" width="77.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="961.8" y="302.0">java/uti..</text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (1,593 samples, 6.52%)</title><rect x="958.8" y="275.0" width="77.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="961.8" y="286.0">java.uti..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.fromByteBuffer (333 samples, 1.36%)</title><rect x="1035.8" y="339.0" width="16.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1038.8" y="350.0"></text>
</g>
<g>
<title>byte[] (333 samples, 1.36%)</title><rect x="1035.8" y="323.0" width="16.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1038.8" y="334.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,860 samples, 11.71%)</title><rect x="1051.9" y="435.0" width="138.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1054.9" y="446.0">one/nio/server/Se..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (140 samples, 0.57%)</title><rect x="1051.9" y="419.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1054.9" y="430.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (140 samples, 0.57%)</title><rect x="1051.9" y="403.0" width="6.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1054.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,720 samples, 11.13%)</title><rect x="1058.6" y="419.0" width="131.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1061.6" y="430.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,720 samples, 11.13%)</title><rect x="1058.6" y="403.0" width="131.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1061.6" y="414.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,720 samples, 11.13%)</title><rect x="1058.6" y="387.0" width="131.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1061.6" y="398.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (845 samples, 3.46%)</title><rect x="1058.6" y="371.0" width="40.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1061.6" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (845 samples, 3.46%)</title><rect x="1058.6" y="355.0" width="40.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1061.6" y="366.0">one..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (578 samples, 2.37%)</title><rect x="1058.6" y="339.0" width="27.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1061.6" y="350.0">R..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (254 samples, 1.04%)</title><rect x="1058.6" y="323.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1061.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (254 samples, 1.04%)</title><rect x="1058.6" y="307.0" width="12.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1061.6" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (254 samples, 1.04%)</title><rect x="1058.6" y="291.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1061.6" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (254 samples, 1.04%)</title><rect x="1058.6" y="275.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1061.6" y="286.0"></text>
</g>
<g>
<title>java.lang.String (137 samples, 0.56%)</title><rect x="1058.6" y="259.0" width="6.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1061.6" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (117 samples, 0.48%)</title><rect x="1065.2" y="259.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1068.2" y="270.0"></text>
</g>
<g>
<title>byte[] (117 samples, 0.48%)</title><rect x="1065.2" y="243.0" width="5.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1068.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.get (324 samples, 1.33%)</title><rect x="1070.9" y="323.0" width="15.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1073.9" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (113 samples, 0.46%)</title><rect x="1070.9" y="307.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1073.9" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (113 samples, 0.46%)</title><rect x="1070.9" y="291.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1073.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$78/3965949.get$Lambda (113 samples, 0.46%)</title><rect x="1070.9" y="275.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1073.9" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.AsyncService$$Lambda$78 (113 samples, 0.46%)</title><rect x="1070.9" y="259.0" width="5.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1073.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.byteBufferFromString (117 samples, 0.48%)</title><rect x="1076.3" y="307.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1079.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (117 samples, 0.48%)</title><rect x="1076.3" y="291.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1079.3" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (117 samples, 0.48%)</title><rect x="1076.3" y="275.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1079.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (117 samples, 0.48%)</title><rect x="1076.3" y="259.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1079.3" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (117 samples, 0.48%)</title><rect x="1076.3" y="243.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1079.3" y="254.0"></text>
</g>
<g>
<title>byte[] (117 samples, 0.48%)</title><rect x="1076.3" y="227.0" width="5.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1079.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.urlFromKey (89 samples, 0.36%)</title><rect x="1082.2" y="307.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1085.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNode (89 samples, 0.36%)</title><rect x="1082.2" y="291.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1085.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNode (89 samples, 0.36%)</title><rect x="1082.2" y="275.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1085.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceFactory$$Lambda$21/1849201180.apply (89 samples, 0.36%)</title><rect x="1082.2" y="259.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1085.2" y="270.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (89 samples, 0.36%)</title><rect x="1082.2" y="243.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1085.2" y="254.0"></text>
</g>
<g>
<title>java.lang.Integer (89 samples, 0.36%)</title><rect x="1082.2" y="227.0" width="4.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1085.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (267 samples, 1.09%)</title><rect x="1086.5" y="339.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1089.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (267 samples, 1.09%)</title><rect x="1086.5" y="323.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1089.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (267 samples, 1.09%)</title><rect x="1086.5" y="307.0" width="12.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1089.5" y="318.0"></text>
</g>
<g>
<title>java.lang.String (102 samples, 0.42%)</title><rect x="1086.5" y="291.0" width="5.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1089.5" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (165 samples, 0.68%)</title><rect x="1091.5" y="291.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1094.5" y="302.0"></text>
</g>
<g>
<title>byte[] (165 samples, 0.68%)</title><rect x="1091.5" y="275.0" width="7.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1094.5" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1,249 samples, 5.11%)</title><rect x="1099.4" y="371.0" width="60.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1102.4" y="382.0">one/ni..</text>
</g>
<g>
<title>one.nio.http.Request (236 samples, 0.97%)</title><rect x="1099.4" y="355.0" width="11.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1102.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (388 samples, 1.59%)</title><rect x="1110.8" y="355.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1113.8" y="366.0"></text>
</g>
<g>
<title>java.lang.String[] (388 samples, 1.59%)</title><rect x="1110.8" y="339.0" width="18.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1113.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (625 samples, 2.56%)</title><rect x="1129.6" y="355.0" width="30.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1132.6" y="366.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (625 samples, 2.56%)</title><rect x="1129.6" y="339.0" width="30.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1132.6" y="350.0">on..</text>
</g>
<g>
<title>char[] (313 samples, 1.28%)</title><rect x="1129.6" y="323.0" width="15.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1132.6" y="334.0"></text>
</g>
<g>
<title>java.lang.String (108 samples, 0.44%)</title><rect x="1144.7" y="323.0" width="5.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1147.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (204 samples, 0.84%)</title><rect x="1149.9" y="323.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1152.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (204 samples, 0.84%)</title><rect x="1149.9" y="307.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1152.9" y="318.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (204 samples, 0.84%)</title><rect x="1149.9" y="291.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1152.9" y="302.0"></text>
</g>
<g>
<title>byte[] (204 samples, 0.84%)</title><rect x="1149.9" y="275.0" width="9.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1152.9" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (626 samples, 2.56%)</title><rect x="1159.8" y="371.0" width="30.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1162.8" y="382.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (626 samples, 2.56%)</title><rect x="1159.8" y="355.0" width="30.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1162.8" y="366.0">on..</text>
</g>
<g>
<title>char[] (296 samples, 1.21%)</title><rect x="1159.8" y="339.0" width="14.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1162.8" y="350.0"></text>
</g>
<g>
<title>java.lang.String (114 samples, 0.47%)</title><rect x="1174.1" y="339.0" width="5.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1177.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (216 samples, 0.88%)</title><rect x="1179.6" y="339.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (216 samples, 0.88%)</title><rect x="1179.6" y="323.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (216 samples, 0.88%)</title><rect x="1179.6" y="307.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1182.6" y="318.0"></text>
</g>
<g>
<title>byte[] (216 samples, 0.88%)</title><rect x="1179.6" y="291.0" width="10.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1182.6" y="302.0"></text>
</g>
</g>
</svg>
