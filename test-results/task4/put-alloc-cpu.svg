<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="389"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="389"> </text>
<g id="frames">
<g>
<title>all (32,369 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="13.0" y="366.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (17,079 samples, 52.76%)</title><rect x="10.0" y="339.0" width="622.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="350.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (17,079 samples, 52.76%)</title><rect x="10.0" y="323.0" width="622.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (17,079 samples, 52.76%)</title><rect x="10.0" y="307.0" width="622.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,367 samples, 4.22%)</title><rect x="10.0" y="291.0" width="49.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,367 samples, 4.22%)</title><rect x="10.0" y="275.0" width="49.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,358 samples, 4.20%)</title><rect x="10.0" y="259.0" width="49.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,358 samples, 4.20%)</title><rect x="10.0" y="243.0" width="49.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="254.0">java/..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,358 samples, 4.20%)</title><rect x="10.0" y="227.0" width="49.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="13.0" y="238.0">java...</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.03%)</title><rect x="59.5" y="259.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.03%)</title><rect x="59.5" y="243.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="62.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (9 samples, 0.03%)</title><rect x="59.5" y="227.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (9 samples, 0.03%)</title><rect x="59.5" y="211.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.5" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (9 samples, 0.03%)</title><rect x="59.5" y="195.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="62.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$67/1986473740.run (15,712 samples, 48.54%)</title><rect x="59.8" y="291.0" width="572.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="62.8" y="302.0">ru/mail/polis/service/s3ponia/AsyncService$$Lambda$67/1986473740.run</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$put$3 (15,712 samples, 48.54%)</title><rect x="59.8" y="275.0" width="572.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.8" y="286.0">ru/mail/polis/service/s3ponia/AsyncService.lambda$put$3</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,836 samples, 5.67%)</title><rect x="59.8" y="259.0" width="67.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="62.8" y="270.0">java/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,836 samples, 5.67%)</title><rect x="59.8" y="243.0" width="67.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.8" y="254.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,836 samples, 5.67%)</title><rect x="59.8" y="227.0" width="67.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="62.8" y="238.0">java.ni..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.byteBufferFromString (3,295 samples, 10.18%)</title><rect x="126.8" y="259.0" width="120.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="129.8" y="270.0">ru/mail/polis/s..</text>
</g>
<g>
<title>java/lang/String.getBytes (1,284 samples, 3.97%)</title><rect x="126.8" y="243.0" width="46.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.8" y="254.0">java..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,284 samples, 3.97%)</title><rect x="126.8" y="227.0" width="46.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="129.8" y="238.0">java..</text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,284 samples, 3.97%)</title><rect x="126.8" y="211.0" width="46.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.8" y="222.0">java..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,284 samples, 3.97%)</title><rect x="126.8" y="195.0" width="46.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="129.8" y="206.0">java..</text>
</g>
<g>
<title>byte[] (1,284 samples, 3.97%)</title><rect x="126.8" y="179.0" width="46.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="129.8" y="190.0">byte[]</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2,011 samples, 6.21%)</title><rect x="173.6" y="243.0" width="73.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.6" y="254.0">java/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2,011 samples, 6.21%)</title><rect x="173.6" y="227.0" width="73.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="176.6" y="238.0">java/nio..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,011 samples, 6.21%)</title><rect x="173.6" y="211.0" width="73.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="176.6" y="222.0">java.nio..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.upsert (10,581 samples, 32.69%)</title><rect x="246.9" y="259.0" width="385.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.9" y="270.0">ru/mail/polis/service/s3ponia/AsyncService.upsert</text>
</g>
<g>
<title>one.nio.http.Response (925 samples, 2.86%)</title><rect x="246.9" y="243.0" width="33.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="249.9" y="254.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4,729 samples, 14.61%)</title><rect x="280.6" y="243.0" width="172.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.6" y="254.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (4,729 samples, 14.61%)</title><rect x="280.6" y="227.0" width="172.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.6" y="238.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3,285 samples, 10.15%)</title><rect x="280.6" y="211.0" width="119.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.6" y="222.0">one/nio/http/Re..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3,285 samples, 10.15%)</title><rect x="280.6" y="195.0" width="119.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.6" y="206.0">one/nio/util/By..</text>
</g>
<g>
<title>byte[] (2,786 samples, 8.61%)</title><rect x="280.6" y="179.0" width="101.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="283.6" y="190.0">byte[]</text>
</g>
<g>
<title>byte[] (499 samples, 1.54%)</title><rect x="382.2" y="179.0" width="18.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="385.2" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,444 samples, 4.46%)</title><rect x="400.4" y="211.0" width="52.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.4" y="222.0">one/n..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,444 samples, 4.46%)</title><rect x="400.4" y="195.0" width="52.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="403.4" y="206.0">one.n..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3,699 samples, 11.43%)</title><rect x="453.0" y="243.0" width="134.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.0" y="254.0">one/nio/http/Resp..</text>
</g>
<g>
<title>byte[] (1,509 samples, 4.66%)</title><rect x="453.0" y="227.0" width="55.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="456.0" y="238.0">byte[]</text>
</g>
<g>
<title>java.lang.String[] (1,270 samples, 3.92%)</title><rect x="508.0" y="227.0" width="46.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="511.0" y="238.0">java..</text>
</g>
<g>
<title>java.lang.String (920 samples, 2.84%)</title><rect x="554.3" y="227.0" width="33.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="557.3" y="238.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.upsert (1,228 samples, 3.79%)</title><rect x="587.8" y="243.0" width="44.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="590.8" y="254.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock (16 samples, 0.05%)</title><rect x="587.8" y="227.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="590.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 0.05%)</title><rect x="587.8" y="211.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="590.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (16 samples, 0.05%)</title><rect x="587.8" y="195.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="590.8" y="206.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (16 samples, 0.05%)</title><rect x="587.8" y="179.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="590.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.upsert (1,212 samples, 3.74%)</title><rect x="588.4" y="227.0" width="44.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="591.4" y="238.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.of (1,212 samples, 3.74%)</title><rect x="588.4" y="211.0" width="44.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.4" y="222.0">ru/m..</text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Value (1,212 samples, 3.74%)</title><rect x="588.4" y="195.0" width="44.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="591.4" y="206.0">ru.m..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (15,289 samples, 47.23%)</title><rect x="632.6" y="339.0" width="557.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="635.6" y="350.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (327 samples, 1.01%)</title><rect x="632.6" y="323.0" width="12.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="635.6" y="334.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (327 samples, 1.01%)</title><rect x="632.6" y="307.0" width="12.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="635.6" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (14,962 samples, 46.22%)</title><rect x="644.6" y="323.0" width="545.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.6" y="334.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (14,962 samples, 46.22%)</title><rect x="644.6" y="307.0" width="545.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.6" y="318.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (14,962 samples, 46.22%)</title><rect x="644.6" y="291.0" width="545.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.6" y="302.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8,787 samples, 27.15%)</title><rect x="644.6" y="275.0" width="320.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.6" y="286.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8,787 samples, 27.15%)</title><rect x="644.6" y="259.0" width="320.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="647.6" y="270.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (8,286 samples, 25.60%)</title><rect x="644.6" y="243.0" width="302.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.6" y="254.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (431 samples, 1.33%)</title><rect x="644.6" y="227.0" width="15.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.6" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (431 samples, 1.33%)</title><rect x="644.6" y="211.0" width="15.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="647.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (431 samples, 1.33%)</title><rect x="644.6" y="195.0" width="15.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="647.6" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (431 samples, 1.33%)</title><rect x="644.6" y="179.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.6" y="190.0"></text>
</g>
<g>
<title>java.lang.String (218 samples, 0.67%)</title><rect x="644.6" y="163.0" width="7.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="647.6" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (213 samples, 0.66%)</title><rect x="652.5" y="163.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="655.5" y="174.0"></text>
</g>
<g>
<title>byte[] (213 samples, 0.66%)</title><rect x="652.5" y="147.0" width="7.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="655.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.put (7,855 samples, 24.27%)</title><rect x="660.3" y="227.0" width="286.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.3" y="238.0">ru/mail/polis/service/s3ponia/AsyncSer..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (282 samples, 0.87%)</title><rect x="660.3" y="211.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.3" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (282 samples, 0.87%)</title><rect x="660.3" y="195.0" width="10.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="663.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$67/1986473740.get$Lambda (282 samples, 0.87%)</title><rect x="660.3" y="179.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.3" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.AsyncService$$Lambda$67 (282 samples, 0.87%)</title><rect x="660.3" y="163.0" width="10.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="663.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.byteBufferFromString (228 samples, 0.70%)</title><rect x="670.6" y="211.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="673.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (228 samples, 0.70%)</title><rect x="670.6" y="195.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="673.6" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (228 samples, 0.70%)</title><rect x="670.6" y="179.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (228 samples, 0.70%)</title><rect x="670.6" y="163.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="673.6" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (228 samples, 0.70%)</title><rect x="670.6" y="147.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="673.6" y="158.0"></text>
</g>
<g>
<title>byte[] (228 samples, 0.70%)</title><rect x="670.6" y="131.0" width="8.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="673.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.chooseNode (7,235 samples, 22.35%)</title><rect x="678.9" y="211.0" width="263.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="681.9" y="222.0">ru/mail/polis/service/s3ponia/Async..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.proxy (7,233 samples, 22.35%)</title><rect x="678.9" y="195.0" width="263.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="681.9" y="206.0">ru/mail/polis/service/s3ponia/Async..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (49 samples, 0.15%)</title><rect x="678.9" y="179.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/867148091.invoke (49 samples, 0.15%)</title><rect x="678.9" y="163.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="681.9" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (49 samples, 0.15%)</title><rect x="678.9" y="147.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="681.9" y="158.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (12 samples, 0.04%)</title><rect x="678.9" y="131.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.9" y="142.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.04%)</title><rect x="678.9" y="115.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="681.9" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (37 samples, 0.11%)</title><rect x="679.4" y="131.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="682.4" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (37 samples, 0.11%)</title><rect x="679.4" y="115.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="682.4" y="126.0"></text>
</g>
<g>
<title>byte[] (37 samples, 0.11%)</title><rect x="679.4" y="99.0" width="1.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="682.4" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (7,124 samples, 22.01%)</title><rect x="680.7" y="179.0" width="259.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="683.7" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (7,124 samples, 22.01%)</title><rect x="680.7" y="163.0" width="259.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="683.7" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (33 samples, 0.10%)</title><rect x="680.7" y="147.0" width="1.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="683.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (6,533 samples, 20.18%)</title><rect x="681.9" y="147.0" width="238.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="684.9" y="158.0">one/nio/http/HttpClient$Response..</text>
</g>
<g>
<title>byte[] (3,427 samples, 10.59%)</title><rect x="681.9" y="131.0" width="125.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="684.9" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (3,106 samples, 9.60%)</title><rect x="806.9" y="131.0" width="113.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="809.9" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (433 samples, 1.34%)</title><rect x="920.1" y="147.0" width="15.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="923.1" y="158.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.04%)</title><rect x="920.1" y="131.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="923.1" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (26 samples, 0.08%)</title><rect x="920.6" y="131.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="923.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (26 samples, 0.08%)</title><rect x="920.6" y="115.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.6" y="126.0"></text>
</g>
<g>
<title>java.lang.String (13 samples, 0.04%)</title><rect x="920.6" y="99.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="923.6" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (13 samples, 0.04%)</title><rect x="921.1" y="99.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="924.1" y="110.0"></text>
</g>
<g>
<title>byte[] (13 samples, 0.04%)</title><rect x="921.1" y="83.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="924.1" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (12 samples, 0.04%)</title><rect x="921.5" y="131.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="924.5" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (334 samples, 1.03%)</title><rect x="922.0" y="131.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="925.0" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (334 samples, 1.03%)</title><rect x="922.0" y="115.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="925.0" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (334 samples, 1.03%)</title><rect x="922.0" y="99.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="925.0" y="110.0"></text>
</g>
<g>
<title>char[] (224 samples, 0.69%)</title><rect x="922.0" y="83.0" width="8.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="925.0" y="94.0"></text>
</g>
<g>
<title>java.lang.String (49 samples, 0.15%)</title><rect x="930.2" y="83.0" width="1.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="933.2" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (61 samples, 0.19%)</title><rect x="931.9" y="83.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="934.9" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (61 samples, 0.19%)</title><rect x="931.9" y="67.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="934.9" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (61 samples, 0.19%)</title><rect x="931.9" y="51.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="934.9" y="62.0"></text>
</g>
<g>
<title>byte[] (61 samples, 0.19%)</title><rect x="931.9" y="35.0" width="2.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="934.9" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (18 samples, 0.06%)</title><rect x="934.2" y="131.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="937.2" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (18 samples, 0.06%)</title><rect x="934.2" y="115.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="937.2" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (29 samples, 0.09%)</title><rect x="934.8" y="131.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="937.8" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (29 samples, 0.09%)</title><rect x="934.8" y="115.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="937.8" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (29 samples, 0.09%)</title><rect x="934.8" y="99.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="937.8" y="110.0"></text>
</g>
<g>
<title>java.lang.String (19 samples, 0.06%)</title><rect x="934.8" y="83.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="937.8" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (10 samples, 0.03%)</title><rect x="935.5" y="83.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="938.5" y="94.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.03%)</title><rect x="935.5" y="67.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="938.5" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (84 samples, 0.26%)</title><rect x="935.9" y="147.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="938.9" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (84 samples, 0.26%)</title><rect x="935.9" y="131.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="938.9" y="142.0"></text>
</g>
<g>
<title>byte[] (84 samples, 0.26%)</title><rect x="935.9" y="115.0" width="3.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="938.9" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (32 samples, 0.10%)</title><rect x="938.9" y="147.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="941.9" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (32 samples, 0.10%)</title><rect x="938.9" y="131.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="941.9" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (32 samples, 0.10%)</title><rect x="938.9" y="115.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="941.9" y="126.0"></text>
</g>
<g>
<title>java.lang.String (20 samples, 0.06%)</title><rect x="938.9" y="99.0" width="0.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="941.9" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (12 samples, 0.04%)</title><rect x="939.7" y="99.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="942.7" y="110.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.04%)</title><rect x="939.7" y="83.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="942.7" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (9 samples, 0.03%)</title><rect x="940.1" y="147.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.1" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (9 samples, 0.03%)</title><rect x="940.1" y="131.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="943.1" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (9 samples, 0.03%)</title><rect x="940.1" y="115.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="943.1" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (9 samples, 0.03%)</title><rect x="940.1" y="99.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="943.1" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (60 samples, 0.19%)</title><rect x="940.4" y="179.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="943.4" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (60 samples, 0.19%)</title><rect x="940.4" y="163.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="943.4" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (45 samples, 0.14%)</title><rect x="940.4" y="147.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="943.4" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (45 samples, 0.14%)</title><rect x="940.4" y="131.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="943.4" y="142.0"></text>
</g>
<g>
<title>byte[] (45 samples, 0.14%)</title><rect x="940.4" y="115.0" width="1.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="943.4" y="126.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.05%)</title><rect x="942.1" y="147.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="945.1" y="158.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (15 samples, 0.05%)</title><rect x="942.1" y="131.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="945.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.urlFromKey (110 samples, 0.34%)</title><rect x="942.6" y="211.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="945.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNode (110 samples, 0.34%)</title><rect x="942.6" y="195.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="945.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNode (110 samples, 0.34%)</title><rect x="942.6" y="179.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="945.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceFactory$$Lambda$21/1849201180.apply (110 samples, 0.34%)</title><rect x="942.6" y="163.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="945.6" y="174.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (110 samples, 0.34%)</title><rect x="942.6" y="147.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="945.6" y="158.0"></text>
</g>
<g>
<title>java.lang.Integer (110 samples, 0.34%)</title><rect x="942.6" y="131.0" width="4.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="945.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (501 samples, 1.55%)</title><rect x="946.6" y="243.0" width="18.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="949.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (501 samples, 1.55%)</title><rect x="946.6" y="227.0" width="18.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="949.6" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (501 samples, 1.55%)</title><rect x="946.6" y="211.0" width="18.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="949.6" y="222.0"></text>
</g>
<g>
<title>java.lang.String (193 samples, 0.60%)</title><rect x="946.6" y="195.0" width="7.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="949.6" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (308 samples, 0.95%)</title><rect x="953.7" y="195.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.7" y="206.0"></text>
</g>
<g>
<title>byte[] (308 samples, 0.95%)</title><rect x="953.7" y="179.0" width="11.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="956.7" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2,197 samples, 6.79%)</title><rect x="964.9" y="275.0" width="80.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="967.9" y="286.0">one/nio/h..</text>
</g>
<g>
<title>one.nio.http.Request (323 samples, 1.00%)</title><rect x="964.9" y="259.0" width="11.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="967.9" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (788 samples, 2.43%)</title><rect x="976.7" y="259.0" width="28.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="979.7" y="270.0">on..</text>
</g>
<g>
<title>java.lang.String[] (788 samples, 2.43%)</title><rect x="976.7" y="243.0" width="28.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="979.7" y="254.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,086 samples, 3.36%)</title><rect x="1005.4" y="259.0" width="39.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1008.4" y="270.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,086 samples, 3.36%)</title><rect x="1005.4" y="243.0" width="39.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1008.4" y="254.0">one..</text>
</g>
<g>
<title>char[] (587 samples, 1.81%)</title><rect x="1005.4" y="227.0" width="21.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1008.4" y="238.0">c..</text>
</g>
<g>
<title>java.lang.String (207 samples, 0.64%)</title><rect x="1026.8" y="227.0" width="7.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1029.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (292 samples, 0.90%)</title><rect x="1034.3" y="227.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1037.3" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (292 samples, 0.90%)</title><rect x="1034.3" y="211.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1037.3" y="222.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (292 samples, 0.90%)</title><rect x="1034.3" y="195.0" width="10.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1037.3" y="206.0"></text>
</g>
<g>
<title>byte[] (292 samples, 0.90%)</title><rect x="1034.3" y="179.0" width="10.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1037.3" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (194 samples, 0.60%)</title><rect x="1045.0" y="275.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1048.0" y="286.0"></text>
</g>
<g>
<title>byte[] (194 samples, 0.60%)</title><rect x="1045.0" y="259.0" width="7.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1048.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (394 samples, 1.22%)</title><rect x="1052.1" y="275.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1055.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (394 samples, 1.22%)</title><rect x="1052.1" y="259.0" width="14.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1055.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (394 samples, 1.22%)</title><rect x="1052.1" y="243.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1055.1" y="254.0"></text>
</g>
<g>
<title>java.lang.String (201 samples, 0.62%)</title><rect x="1052.1" y="227.0" width="7.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1055.1" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (193 samples, 0.60%)</title><rect x="1059.4" y="227.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1062.4" y="238.0"></text>
</g>
<g>
<title>byte[] (193 samples, 0.60%)</title><rect x="1059.4" y="211.0" width="7.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1062.4" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,390 samples, 10.47%)</title><rect x="1066.4" y="275.0" width="123.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1069.4" y="286.0">one/nio/util/Ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,390 samples, 10.47%)</title><rect x="1066.4" y="259.0" width="123.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1069.4" y="270.0">one/nio/util/Ut..</text>
</g>
<g>
<title>char[] (1,593 samples, 4.92%)</title><rect x="1066.4" y="243.0" width="58.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1069.4" y="254.0">char[]</text>
</g>
<g>
<title>java.lang.String (658 samples, 2.03%)</title><rect x="1124.5" y="243.0" width="24.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1127.5" y="254.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,139 samples, 3.52%)</title><rect x="1148.5" y="243.0" width="41.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1151.5" y="254.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,139 samples, 3.52%)</title><rect x="1148.5" y="227.0" width="41.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1151.5" y="238.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,139 samples, 3.52%)</title><rect x="1148.5" y="211.0" width="41.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1151.5" y="222.0">jav..</text>
</g>
<g>
<title>byte[] (1,139 samples, 3.52%)</title><rect x="1148.5" y="195.0" width="41.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1151.5" y="206.0">byt..</text>
</g>
</g>
</svg>
