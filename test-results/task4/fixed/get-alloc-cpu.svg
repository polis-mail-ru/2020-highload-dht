<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="645"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="645"> </text>
<g id="frames">
<g>
<title>all (158,906 samples, 100.00%)</title><rect x="10.0" y="611.0" width="1180.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="622.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (42,304 samples, 26.62%)</title><rect x="10.0" y="595.0" width="314.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="606.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (42,292 samples, 26.61%)</title><rect x="10.1" y="579.0" width="314.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.1" y="590.0">java/util/concurrent/ThreadPoolExecutor$Wo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (42,292 samples, 26.61%)</title><rect x="10.1" y="563.0" width="314.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.1" y="574.0">java/util/concurrent/ThreadPoolExecutor.ru..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (255 samples, 0.16%)</title><rect x="10.1" y="547.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (254 samples, 0.16%)</title><rect x="10.1" y="531.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (237 samples, 0.15%)</title><rect x="10.1" y="515.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (237 samples, 0.15%)</title><rect x="10.1" y="499.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.1" y="510.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (237 samples, 0.15%)</title><rect x="10.1" y="483.0" width="1.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="13.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$84/1141333960.run (41,797 samples, 26.30%)</title><rect x="12.0" y="547.0" width="310.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.0" y="558.0">ru/mail/polis/service/s3ponia/AsyncService..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.lambda$get$2 (41,797 samples, 26.30%)</title><rect x="12.0" y="531.0" width="310.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.0" y="542.0">ru/mail/polis/service/s3ponia/AsyncService..</text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.byteBufferFromString (565 samples, 0.36%)</title><rect x="12.0" y="515.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (315 samples, 0.20%)</title><rect x="12.0" y="499.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.0" y="510.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (315 samples, 0.20%)</title><rect x="12.0" y="483.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.0" y="494.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (315 samples, 0.20%)</title><rect x="12.0" y="467.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.0" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (315 samples, 0.20%)</title><rect x="12.0" y="451.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.0" y="462.0"></text>
</g>
<g>
<title>byte[] (315 samples, 0.20%)</title><rect x="12.0" y="435.0" width="2.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="15.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (250 samples, 0.16%)</title><rect x="14.3" y="499.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (250 samples, 0.16%)</title><rect x="14.3" y="483.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.3" y="494.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (250 samples, 0.16%)</title><rect x="14.3" y="467.0" width="1.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="17.3" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.get (41,232 samples, 25.95%)</title><rect x="16.2" y="515.0" width="306.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.2" y="526.0">ru/mail/polis/service/s3ponia/AsyncServic..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (641 samples, 0.40%)</title><rect x="16.2" y="499.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.2" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (641 samples, 0.40%)</title><rect x="16.2" y="483.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (444 samples, 0.28%)</title><rect x="16.2" y="467.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.2" y="478.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (444 samples, 0.28%)</title><rect x="16.2" y="451.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.2" y="462.0"></text>
</g>
<g>
<title>byte[] (444 samples, 0.28%)</title><rect x="16.2" y="435.0" width="3.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="19.2" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (197 samples, 0.12%)</title><rect x="19.5" y="467.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.5" y="478.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (197 samples, 0.12%)</title><rect x="19.5" y="451.0" width="1.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="22.5" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (601 samples, 0.38%)</title><rect x="21.0" y="499.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.0" y="510.0"></text>
</g>
<g>
<title>one.nio.http.Response (121 samples, 0.08%)</title><rect x="21.0" y="483.0" width="0.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="24.0" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (480 samples, 0.30%)</title><rect x="21.9" y="483.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.9" y="494.0"></text>
</g>
<g>
<title>byte[] (177 samples, 0.11%)</title><rect x="21.9" y="467.0" width="1.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="24.9" y="478.0"></text>
</g>
<g>
<title>java.lang.String[] (177 samples, 0.11%)</title><rect x="23.2" y="467.0" width="1.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="26.2" y="478.0"></text>
</g>
<g>
<title>java.lang.String (126 samples, 0.08%)</title><rect x="24.5" y="467.0" width="0.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="27.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (39,879 samples, 25.10%)</title><rect x="25.4" y="499.0" width="296.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.4" y="510.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3,165 samples, 1.99%)</title><rect x="25.4" y="483.0" width="23.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="28.4" y="494.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3,165 samples, 1.99%)</title><rect x="25.4" y="467.0" width="23.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.4" y="478.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3,165 samples, 1.99%)</title><rect x="25.4" y="451.0" width="23.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.4" y="462.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3,165 samples, 1.99%)</title><rect x="25.4" y="435.0" width="23.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.4" y="446.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,165 samples, 1.99%)</title><rect x="25.4" y="419.0" width="23.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.4" y="430.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,165 samples, 1.99%)</title><rect x="25.4" y="403.0" width="23.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.4" y="414.0">c..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (830 samples, 0.52%)</title><rect x="25.4" y="387.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.4" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (830 samples, 0.52%)</title><rect x="25.4" y="371.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.4" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (830 samples, 0.52%)</title><rect x="25.4" y="355.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.4" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (830 samples, 0.52%)</title><rect x="25.4" y="339.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.4" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (830 samples, 0.52%)</title><rect x="25.4" y="323.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$102/1921174568.compare (830 samples, 0.52%)</title><rect x="25.4" y="307.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (830 samples, 0.52%)</title><rect x="25.4" y="291.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (830 samples, 0.52%)</title><rect x="25.4" y="275.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.4" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$138/959565342.compare (491 samples, 0.31%)</title><rect x="25.4" y="259.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.4" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (491 samples, 0.31%)</title><rect x="25.4" y="243.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.4" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.compare (491 samples, 0.31%)</title><rect x="25.4" y="227.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.4" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (491 samples, 0.31%)</title><rect x="25.4" y="211.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$109/418813690.apply (491 samples, 0.31%)</title><rect x="25.4" y="195.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (491 samples, 0.31%)</title><rect x="25.4" y="179.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.4" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (491 samples, 0.31%)</title><rect x="25.4" y="163.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.4" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (491 samples, 0.31%)</title><rect x="25.4" y="147.0" width="3.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="28.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (178 samples, 0.11%)</title><rect x="29.1" y="259.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.1" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (178 samples, 0.11%)</title><rect x="29.1" y="243.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.1" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (178 samples, 0.11%)</title><rect x="29.1" y="227.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.1" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (178 samples, 0.11%)</title><rect x="29.1" y="211.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="32.1" y="222.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (178 samples, 0.11%)</title><rect x="29.1" y="195.0" width="1.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="32.1" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (161 samples, 0.10%)</title><rect x="30.4" y="259.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.4" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (161 samples, 0.10%)</title><rect x="30.4" y="243.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.4" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (161 samples, 0.10%)</title><rect x="30.4" y="227.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="33.4" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (161 samples, 0.10%)</title><rect x="30.4" y="211.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.4" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (161 samples, 0.10%)</title><rect x="30.4" y="195.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.4" y="206.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (161 samples, 0.10%)</title><rect x="30.4" y="179.0" width="1.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="33.4" y="190.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,335 samples, 1.47%)</title><rect x="31.6" y="387.0" width="17.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.6" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,335 samples, 1.47%)</title><rect x="31.6" y="371.0" width="17.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.6" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,335 samples, 1.47%)</title><rect x="31.6" y="355.0" width="17.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.6" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,335 samples, 1.47%)</title><rect x="31.6" y="339.0" width="17.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.6" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,335 samples, 1.47%)</title><rect x="31.6" y="323.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.6" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,335 samples, 1.47%)</title><rect x="31.6" y="307.0" width="17.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.6" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (415 samples, 0.26%)</title><rect x="31.6" y="291.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (415 samples, 0.26%)</title><rect x="31.6" y="275.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (415 samples, 0.26%)</title><rect x="31.6" y="259.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (415 samples, 0.26%)</title><rect x="31.6" y="243.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (415 samples, 0.26%)</title><rect x="31.6" y="227.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.6" y="238.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (415 samples, 0.26%)</title><rect x="31.6" y="211.0" width="3.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="34.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$102/1921174568.compare (1,920 samples, 1.21%)</title><rect x="34.7" y="291.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="37.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (1,920 samples, 1.21%)</title><rect x="34.7" y="275.0" width="14.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (1,920 samples, 1.21%)</title><rect x="34.7" y="259.0" width="14.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.7" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$138/959565342.compare (1,559 samples, 0.98%)</title><rect x="34.7" y="243.0" width="11.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.7" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,559 samples, 0.98%)</title><rect x="34.7" y="227.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.7" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.compare (1,559 samples, 0.98%)</title><rect x="34.7" y="211.0" width="11.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.7" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,559 samples, 0.98%)</title><rect x="34.7" y="195.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="37.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$109/418813690.apply (1,559 samples, 0.98%)</title><rect x="34.7" y="179.0" width="11.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (1,559 samples, 0.98%)</title><rect x="34.7" y="163.0" width="11.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,559 samples, 0.98%)</title><rect x="34.7" y="147.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.7" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,008 samples, 0.63%)</title><rect x="34.7" y="131.0" width="7.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="37.7" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (551 samples, 0.35%)</title><rect x="42.2" y="131.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.2" y="142.0"></text>
</g>
<g>
<title>byte[] (551 samples, 0.35%)</title><rect x="42.2" y="115.0" width="4.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="45.2" y="126.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (183 samples, 0.12%)</title><rect x="46.2" y="243.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.2" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (183 samples, 0.12%)</title><rect x="46.2" y="227.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.2" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (183 samples, 0.12%)</title><rect x="46.2" y="211.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.2" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (183 samples, 0.12%)</title><rect x="46.2" y="195.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.2" y="206.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (183 samples, 0.12%)</title><rect x="46.2" y="179.0" width="1.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="49.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (178 samples, 0.11%)</title><rect x="47.6" y="243.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.6" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (178 samples, 0.11%)</title><rect x="47.6" y="227.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.6" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (178 samples, 0.11%)</title><rect x="47.6" y="211.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.6" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (178 samples, 0.11%)</title><rect x="47.6" y="195.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.6" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (178 samples, 0.11%)</title><rect x="47.6" y="179.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="50.6" y="190.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (178 samples, 0.11%)</title><rect x="47.6" y="163.0" width="1.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="50.6" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (375 samples, 0.24%)</title><rect x="48.9" y="483.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.9" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (375 samples, 0.24%)</title><rect x="48.9" y="467.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$175/1992617531.apply (375 samples, 0.24%)</title><rect x="48.9" y="451.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.lambda$iterator$3 (375 samples, 0.24%)</title><rect x="48.9" y="435.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (136 samples, 0.09%)</title><rect x="48.9" y="419.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.9" y="430.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (136 samples, 0.09%)</title><rect x="48.9" y="403.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="51.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.getValue (239 samples, 0.15%)</title><rect x="49.9" y="419.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.9" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (239 samples, 0.15%)</title><rect x="49.9" y="403.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="52.9" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (239 samples, 0.15%)</title><rect x="49.9" y="387.0" width="1.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="52.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (251 samples, 0.16%)</title><rect x="51.7" y="483.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.7" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (251 samples, 0.16%)</title><rect x="51.7" y="467.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="54.7" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (251 samples, 0.16%)</title><rect x="51.7" y="451.0" width="1.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="54.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (273 samples, 0.17%)</title><rect x="53.6" y="483.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.6" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (273 samples, 0.17%)</title><rect x="53.6" y="467.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.6" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (273 samples, 0.17%)</title><rect x="53.6" y="451.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.6" y="462.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (273 samples, 0.17%)</title><rect x="53.6" y="435.0" width="2.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="56.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.iterator (35,815 samples, 22.54%)</title><rect x="55.6" y="483.0" width="266.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.6" y="494.0">ru/mail/polis/dao/s3ponia/Persisten..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (144 samples, 0.09%)</title><rect x="55.6" y="467.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.6" y="478.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (144 samples, 0.09%)</title><rect x="55.6" y="451.0" width="1.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="58.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (7,767 samples, 4.89%)</title><rect x="56.7" y="467.0" width="57.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.7" y="478.0">com/go..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (95 samples, 0.06%)</title><rect x="56.7" y="451.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="59.7" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (7,672 samples, 4.83%)</title><rect x="57.4" y="451.0" width="56.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.4" y="462.0">com/go..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (131 samples, 0.08%)</title><rect x="57.4" y="435.0" width="0.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="60.4" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (385 samples, 0.24%)</title><rect x="58.3" y="435.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.3" y="446.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (385 samples, 0.24%)</title><rect x="58.3" y="419.0" width="2.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="61.3" y="430.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (171 samples, 0.11%)</title><rect x="61.2" y="435.0" width="1.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="64.2" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (116 samples, 0.07%)</title><rect x="62.5" y="435.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.5" y="446.0"></text>
</g>
<g>
<title>java.lang.Object[] (116 samples, 0.07%)</title><rect x="62.5" y="419.0" width="0.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="65.5" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (5,486 samples, 3.45%)</title><rect x="63.3" y="435.0" width="40.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.3" y="446.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (5,486 samples, 3.45%)</title><rect x="63.3" y="419.0" width="40.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.3" y="430.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (203 samples, 0.13%)</title><rect x="63.3" y="403.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.3" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (203 samples, 0.13%)</title><rect x="63.3" y="387.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.3" y="398.0"></text>
</g>
<g>
<title>java.lang.Object[] (203 samples, 0.13%)</title><rect x="63.3" y="371.0" width="1.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="66.3" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (5,283 samples, 3.32%)</title><rect x="64.8" y="403.0" width="39.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.8" y="414.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (5,283 samples, 3.32%)</title><rect x="64.8" y="387.0" width="39.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.8" y="398.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,283 samples, 3.32%)</title><rect x="64.8" y="371.0" width="39.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.8" y="382.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,283 samples, 3.32%)</title><rect x="64.8" y="355.0" width="39.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.8" y="366.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (433 samples, 0.27%)</title><rect x="64.8" y="339.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="67.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (433 samples, 0.27%)</title><rect x="64.8" y="323.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (433 samples, 0.27%)</title><rect x="64.8" y="307.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (433 samples, 0.27%)</title><rect x="64.8" y="291.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (433 samples, 0.27%)</title><rect x="64.8" y="275.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.8" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (433 samples, 0.27%)</title><rect x="64.8" y="259.0" width="3.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="67.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$102/1921174568.compare (4,850 samples, 3.05%)</title><rect x="68.1" y="339.0" width="36.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.1" y="350.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (4,850 samples, 3.05%)</title><rect x="68.1" y="323.0" width="36.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.1" y="334.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (4,850 samples, 3.05%)</title><rect x="68.1" y="307.0" width="36.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.1" y="318.0">ru/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$138/959565342.compare (4,496 samples, 2.83%)</title><rect x="68.1" y="291.0" width="33.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.1" y="302.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4,496 samples, 2.83%)</title><rect x="68.1" y="275.0" width="33.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.1" y="286.0">ja..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.compare (4,496 samples, 2.83%)</title><rect x="68.1" y="259.0" width="33.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.1" y="270.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4,496 samples, 2.83%)</title><rect x="68.1" y="243.0" width="33.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.1" y="254.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$109/418813690.apply (1,826 samples, 1.15%)</title><rect x="68.1" y="227.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (1,594 samples, 1.00%)</title><rect x="68.1" y="211.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,594 samples, 1.00%)</title><rect x="68.1" y="195.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.1" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,050 samples, 0.66%)</title><rect x="68.1" y="179.0" width="7.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="71.1" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (544 samples, 0.34%)</title><rect x="75.9" y="179.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.9" y="190.0"></text>
</g>
<g>
<title>byte[] (544 samples, 0.34%)</title><rect x="75.9" y="163.0" width="4.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="78.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (232 samples, 0.15%)</title><rect x="79.9" y="211.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.9" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (232 samples, 0.15%)</title><rect x="79.9" y="195.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="82.9" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (232 samples, 0.15%)</title><rect x="79.9" y="179.0" width="1.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="82.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$129/1254560328.apply (2,594 samples, 1.63%)</title><rect x="81.6" y="227.0" width="19.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getValue (2,594 samples, 1.63%)</title><rect x="81.6" y="211.0" width="19.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,245 samples, 1.41%)</title><rect x="81.6" y="195.0" width="16.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.6" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,452 samples, 0.91%)</title><rect x="81.6" y="179.0" width="10.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="84.6" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (793 samples, 0.50%)</title><rect x="92.4" y="179.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="95.4" y="190.0"></text>
</g>
<g>
<title>byte[] (793 samples, 0.50%)</title><rect x="92.4" y="163.0" width="5.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="95.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.of (349 samples, 0.22%)</title><rect x="98.3" y="195.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.3" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Value (349 samples, 0.22%)</title><rect x="98.3" y="179.0" width="2.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="101.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.compareTo (76 samples, 0.05%)</title><rect x="100.9" y="227.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="103.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Value.compareTo (76 samples, 0.05%)</title><rect x="100.9" y="211.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="103.9" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (76 samples, 0.05%)</title><rect x="100.9" y="195.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.9" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (76 samples, 0.05%)</title><rect x="100.9" y="179.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (76 samples, 0.05%)</title><rect x="100.9" y="163.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.9" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (76 samples, 0.05%)</title><rect x="100.9" y="147.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.9" y="158.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (76 samples, 0.05%)</title><rect x="100.9" y="131.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="103.9" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (159 samples, 0.10%)</title><rect x="101.4" y="291.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.4" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (159 samples, 0.10%)</title><rect x="101.4" y="275.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.4" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (159 samples, 0.10%)</title><rect x="101.4" y="259.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="104.4" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (159 samples, 0.10%)</title><rect x="101.4" y="243.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="104.4" y="254.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (159 samples, 0.10%)</title><rect x="101.4" y="227.0" width="1.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="104.4" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (195 samples, 0.12%)</title><rect x="102.6" y="291.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.6" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (195 samples, 0.12%)</title><rect x="102.6" y="275.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.6" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (195 samples, 0.12%)</title><rect x="102.6" y="259.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.6" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (195 samples, 0.12%)</title><rect x="102.6" y="243.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.6" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (195 samples, 0.12%)</title><rect x="102.6" y="227.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.6" y="238.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (195 samples, 0.12%)</title><rect x="102.6" y="211.0" width="1.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="105.6" y="222.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1,383 samples, 0.87%)</title><rect x="104.1" y="435.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1,383 samples, 0.87%)</title><rect x="104.1" y="419.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="107.1" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1,383 samples, 0.87%)</title><rect x="104.1" y="403.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.1" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (261 samples, 0.16%)</title><rect x="104.1" y="387.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.1" y="398.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$83/685956525.getAsBoolean (261 samples, 0.16%)</title><rect x="104.1" y="371.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="107.1" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (261 samples, 0.16%)</title><rect x="104.1" y="355.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (261 samples, 0.16%)</title><rect x="104.1" y="339.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="107.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (123 samples, 0.08%)</title><rect x="104.1" y="323.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="107.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (123 samples, 0.08%)</title><rect x="104.1" y="307.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.1" y="318.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (123 samples, 0.08%)</title><rect x="104.1" y="291.0" width="0.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="107.1" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (138 samples, 0.09%)</title><rect x="105.0" y="323.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable$$Lambda$79/1582623522.apply (138 samples, 0.09%)</title><rect x="105.0" y="307.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.lambda$iterator$2 (138 samples, 0.09%)</title><rect x="105.0" y="291.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.of (138 samples, 0.09%)</title><rect x="105.0" y="275.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.0" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.Table$Cell (138 samples, 0.09%)</title><rect x="105.0" y="259.0" width="1.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="108.0" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (1,122 samples, 0.71%)</title><rect x="106.0" y="387.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.0" y="398.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (190 samples, 0.12%)</title><rect x="106.0" y="371.0" width="1.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="109.0" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (184 samples, 0.12%)</title><rect x="107.4" y="371.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="110.4" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (184 samples, 0.12%)</title><rect x="107.4" y="355.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.4" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$82/58514996.get$Lambda (83 samples, 0.05%)</title><rect x="107.4" y="339.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="110.4" y="350.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$82 (83 samples, 0.05%)</title><rect x="107.4" y="323.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="110.4" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$83/685956525.get$Lambda (101 samples, 0.06%)</title><rect x="108.0" y="339.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.0" y="350.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$83 (101 samples, 0.06%)</title><rect x="108.0" y="323.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="111.0" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (276 samples, 0.17%)</title><rect x="108.8" y="371.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="111.8" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (276 samples, 0.17%)</title><rect x="108.8" y="355.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.8" y="366.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (276 samples, 0.17%)</title><rect x="108.8" y="339.0" width="2.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="111.8" y="350.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (472 samples, 0.30%)</title><rect x="110.8" y="371.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="113.8" y="382.0"></text>
</g>
<g>
<title>java.lang.Object[] (472 samples, 0.30%)</title><rect x="110.8" y="355.0" width="3.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="113.8" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (67 samples, 0.04%)</title><rect x="114.3" y="467.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.3" y="478.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (67 samples, 0.04%)</title><rect x="114.3" y="451.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="117.3" y="462.0"></text>
</g>
<g>
<title>java.util.ArrayList (136 samples, 0.09%)</title><rect x="114.8" y="467.0" width="1.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="117.8" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (210 samples, 0.13%)</title><rect x="115.9" y="467.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.9" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (210 samples, 0.13%)</title><rect x="115.9" y="451.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="118.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$93/2088607678.get$Lambda (61 samples, 0.04%)</title><rect x="115.9" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.9" y="446.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.PersistenceDAO$$Lambda$93 (61 samples, 0.04%)</title><rect x="115.9" y="419.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="118.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$95/1691985966.get$Lambda (149 samples, 0.09%)</title><rect x="116.3" y="435.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.3" y="446.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.PersistenceDAO$$Lambda$95 (149 samples, 0.09%)</title><rect x="116.3" y="419.0" width="1.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="119.3" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (324 samples, 0.20%)</title><rect x="117.4" y="467.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.4" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (324 samples, 0.20%)</title><rect x="117.4" y="451.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.4" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (324 samples, 0.20%)</title><rect x="117.4" y="435.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="120.4" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (324 samples, 0.20%)</title><rect x="117.4" y="419.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.4" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (324 samples, 0.20%)</title><rect x="117.4" y="403.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.4" y="414.0"></text>
</g>
<g>
<title>java.lang.Object[] (324 samples, 0.20%)</title><rect x="117.4" y="387.0" width="2.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="120.4" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (23,403 samples, 14.73%)</title><rect x="119.8" y="467.0" width="173.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.8" y="478.0">java/util/Collections$..</text>
</g>
<g>
<title>java/util/TreeMap.forEach (23,403 samples, 14.73%)</title><rect x="119.8" y="451.0" width="173.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.8" y="462.0">java/util/TreeMap.forE..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$93/2088607678.accept (23,403 samples, 14.73%)</title><rect x="119.8" y="435.0" width="173.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.8" y="446.0">ru/mail/polis/dao/s3po..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO.lambda$iterator$0 (23,403 samples, 14.73%)</title><rect x="119.8" y="419.0" width="173.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.8" y="430.0">ru/mail/polis/dao/s3po..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.iterator (23,403 samples, 14.73%)</title><rect x="119.8" y="403.0" width="173.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.8" y="414.0">ru/mail/polis/dao/s3po..</text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$DiskTableIterator (276 samples, 0.17%)</title><rect x="119.8" y="387.0" width="2.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="122.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.&lt;init&gt; (23,127 samples, 14.55%)</title><rect x="121.9" y="387.0" width="171.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.9" y="398.0">ru/mail/polis/dao/s3po..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getElementIndex (23,127 samples, 14.55%)</title><rect x="121.9" y="371.0" width="171.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="124.9" y="382.0">ru/mail/polis/dao/s3po..</text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (23,120 samples, 14.55%)</title><rect x="121.9" y="355.0" width="171.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.9" y="366.0">ru/mail/polis/dao/s3po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (23,120 samples, 14.55%)</title><rect x="121.9" y="339.0" width="171.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="124.9" y="350.0">java/nio/ByteBuffer.al..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (15,252 samples, 9.60%)</title><rect x="121.9" y="323.0" width="113.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="124.9" y="334.0">java.nio.HeapB..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7,868 samples, 4.95%)</title><rect x="235.2" y="323.0" width="58.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.2" y="334.0">java/n..</text>
</g>
<g>
<title>byte[] (7,868 samples, 4.95%)</title><rect x="235.2" y="307.0" width="58.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="238.2" y="318.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1,823 samples, 1.15%)</title><rect x="293.6" y="467.0" width="13.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.6" y="478.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (140 samples, 0.09%)</title><rect x="293.6" y="451.0" width="1.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="296.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1,683 samples, 1.06%)</title><rect x="294.6" y="451.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.6" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,683 samples, 1.06%)</title><rect x="294.6" y="435.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.6" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (482 samples, 0.30%)</title><rect x="294.6" y="419.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.6" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (482 samples, 0.30%)</title><rect x="294.6" y="403.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.6" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (482 samples, 0.30%)</title><rect x="294.6" y="387.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.6" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (482 samples, 0.30%)</title><rect x="294.6" y="371.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="297.6" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (482 samples, 0.30%)</title><rect x="294.6" y="355.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="297.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$102/1921174568.compare (482 samples, 0.30%)</title><rect x="294.6" y="339.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="297.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (482 samples, 0.30%)</title><rect x="294.6" y="323.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (482 samples, 0.30%)</title><rect x="294.6" y="307.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.6" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$138/959565342.compare (287 samples, 0.18%)</title><rect x="294.6" y="291.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.6" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (287 samples, 0.18%)</title><rect x="294.6" y="275.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="297.6" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.compare (287 samples, 0.18%)</title><rect x="294.6" y="259.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.6" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (287 samples, 0.18%)</title><rect x="294.6" y="243.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$109/418813690.apply (287 samples, 0.18%)</title><rect x="294.6" y="227.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="297.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/Table$Cell.getKey (287 samples, 0.18%)</title><rect x="294.6" y="211.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.6" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (287 samples, 0.18%)</title><rect x="294.6" y="195.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.6" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (287 samples, 0.18%)</title><rect x="294.6" y="179.0" width="2.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="297.6" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (93 samples, 0.06%)</title><rect x="296.8" y="291.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.8" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (93 samples, 0.06%)</title><rect x="296.8" y="275.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="299.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (93 samples, 0.06%)</title><rect x="296.8" y="259.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="299.8" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (93 samples, 0.06%)</title><rect x="296.8" y="243.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="299.8" y="254.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (93 samples, 0.06%)</title><rect x="296.8" y="227.0" width="0.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="299.8" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (102 samples, 0.06%)</title><rect x="297.5" y="291.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.5" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (102 samples, 0.06%)</title><rect x="297.5" y="275.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="300.5" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (102 samples, 0.06%)</title><rect x="297.5" y="259.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.5" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (102 samples, 0.06%)</title><rect x="297.5" y="243.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.5" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (102 samples, 0.06%)</title><rect x="297.5" y="227.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.5" y="238.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (102 samples, 0.06%)</title><rect x="297.5" y="211.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="300.5" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,201 samples, 0.76%)</title><rect x="298.2" y="419.0" width="8.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.2" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,201 samples, 0.76%)</title><rect x="298.2" y="403.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.2" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,201 samples, 0.76%)</title><rect x="298.2" y="387.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.2" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,201 samples, 0.76%)</title><rect x="298.2" y="371.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.2" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,201 samples, 0.76%)</title><rect x="298.2" y="355.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.2" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,201 samples, 0.76%)</title><rect x="298.2" y="339.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="301.2" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (176 samples, 0.11%)</title><rect x="298.2" y="323.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (176 samples, 0.11%)</title><rect x="298.2" y="307.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.next (176 samples, 0.11%)</title><rect x="298.2" y="291.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="301.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$DiskTableIterator.getLazyCell (176 samples, 0.11%)</title><rect x="298.2" y="275.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable.readLazyCell (176 samples, 0.11%)</title><rect x="298.2" y="259.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.2" y="270.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.s3ponia.DiskTable$LazyCell (176 samples, 0.11%)</title><rect x="298.2" y="243.0" width="1.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="301.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/PersistenceDAO$$Lambda$102/1921174568.compare (1,025 samples, 0.65%)</title><rect x="299.5" y="323.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (1,025 samples, 0.65%)</title><rect x="299.5" y="307.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="302.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.compareTo (1,025 samples, 0.65%)</title><rect x="299.5" y="291.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.5" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$138/959565342.compare (812 samples, 0.51%)</title><rect x="299.5" y="275.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.5" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (812 samples, 0.51%)</title><rect x="299.5" y="259.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.5" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.compare (812 samples, 0.51%)</title><rect x="299.5" y="243.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.5" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (812 samples, 0.51%)</title><rect x="299.5" y="227.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="302.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell$$Lambda$109/418813690.apply (812 samples, 0.51%)</title><rect x="299.5" y="211.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/DiskTable$LazyCell.getKey (812 samples, 0.51%)</title><rect x="299.5" y="195.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.5" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (812 samples, 0.51%)</title><rect x="299.5" y="179.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.5" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (504 samples, 0.32%)</title><rect x="299.5" y="163.0" width="3.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="302.5" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (308 samples, 0.19%)</title><rect x="303.3" y="163.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="306.3" y="174.0"></text>
</g>
<g>
<title>byte[] (308 samples, 0.19%)</title><rect x="303.3" y="147.0" width="2.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="306.3" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (100 samples, 0.06%)</title><rect x="305.6" y="275.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.6" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (100 samples, 0.06%)</title><rect x="305.6" y="259.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.6" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (100 samples, 0.06%)</title><rect x="305.6" y="243.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.6" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (100 samples, 0.06%)</title><rect x="305.6" y="227.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.6" y="238.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (100 samples, 0.06%)</title><rect x="305.6" y="211.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="308.6" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (113 samples, 0.07%)</title><rect x="306.3" y="275.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="309.3" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (113 samples, 0.07%)</title><rect x="306.3" y="259.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.3" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (113 samples, 0.07%)</title><rect x="306.3" y="243.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.3" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (113 samples, 0.07%)</title><rect x="306.3" y="227.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="309.3" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$120/1361839808.get$Lambda (113 samples, 0.07%)</title><rect x="306.3" y="211.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.3" y="222.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$120 (113 samples, 0.07%)</title><rect x="306.3" y="195.0" width="0.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="309.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/s3ponia/MemTable.iterator (1,941 samples, 1.22%)</title><rect x="307.1" y="467.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="310.1" y="478.0"></text>
</g>
<g>
<title>java/util/Collection.stream (451 samples, 0.28%)</title><rect x="307.1" y="451.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="310.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (163 samples, 0.10%)</title><rect x="307.1" y="435.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.1" y="446.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (163 samples, 0.10%)</title><rect x="307.1" y="419.0" width="1.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="310.1" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (288 samples, 0.18%)</title><rect x="308.4" y="435.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.4" y="446.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (288 samples, 0.18%)</title><rect x="308.4" y="419.0" width="2.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="311.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (75 samples, 0.05%)</title><rect x="310.5" y="451.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="313.5" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (75 samples, 0.05%)</title><rect x="310.5" y="435.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="313.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (259 samples, 0.16%)</title><rect x="311.0" y="451.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (259 samples, 0.16%)</title><rect x="311.0" y="435.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (259 samples, 0.16%)</title><rect x="311.0" y="419.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.0" y="430.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (259 samples, 0.16%)</title><rect x="311.0" y="403.0" width="2.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="314.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (451 samples, 0.28%)</title><rect x="313.0" y="451.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.0" y="462.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (120 samples, 0.08%)</title><rect x="313.0" y="435.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="316.0" y="446.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (120 samples, 0.08%)</title><rect x="313.0" y="419.0" width="0.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="316.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (331 samples, 0.21%)</title><rect x="313.9" y="435.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.9" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (74 samples, 0.05%)</title><rect x="313.9" y="419.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="316.9" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (74 samples, 0.05%)</title><rect x="313.9" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.9" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$81/1009001102.get$Lambda (74 samples, 0.05%)</title><rect x="313.9" y="387.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.9" y="398.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$81 (74 samples, 0.05%)</title><rect x="313.9" y="371.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="316.9" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (257 samples, 0.16%)</title><rect x="314.4" y="419.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.4" y="430.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (257 samples, 0.16%)</title><rect x="314.4" y="403.0" width="1.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="317.4" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (705 samples, 0.44%)</title><rect x="316.3" y="451.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.3" y="462.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (705 samples, 0.44%)</title><rect x="316.3" y="435.0" width="5.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="319.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.fromByteBuffer (111 samples, 0.07%)</title><rect x="321.6" y="499.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.6" y="510.0"></text>
</g>
<g>
<title>byte[] (111 samples, 0.07%)</title><rect x="321.6" y="483.0" width="0.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="324.6" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (240 samples, 0.15%)</title><rect x="322.4" y="547.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.4" y="558.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (233 samples, 0.15%)</title><rect x="322.4" y="531.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.4" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$217/164496357.run (233 samples, 0.15%)</title><rect x="322.4" y="515.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.4" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (233 samples, 0.15%)</title><rect x="322.4" y="499.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.4" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (233 samples, 0.15%)</title><rect x="322.4" y="483.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.4" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (232 samples, 0.15%)</title><rect x="322.4" y="467.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="325.4" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (218 samples, 0.14%)</title><rect x="322.5" y="451.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.5" y="462.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (206 samples, 0.13%)</title><rect x="322.6" y="435.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.6" y="446.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (206 samples, 0.13%)</title><rect x="322.6" y="419.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.6" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (206 samples, 0.13%)</title><rect x="322.6" y="403.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="325.6" y="414.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (206 samples, 0.13%)</title><rect x="322.6" y="387.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="325.6" y="398.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (129 samples, 0.08%)</title><rect x="322.6" y="371.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.6" y="382.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (129 samples, 0.08%)</title><rect x="322.6" y="355.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.6" y="366.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (72 samples, 0.05%)</title><rect x="322.6" y="339.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.6" y="350.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (72 samples, 0.05%)</title><rect x="322.6" y="323.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.6" y="334.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (69 samples, 0.04%)</title><rect x="322.6" y="307.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.6" y="318.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (69 samples, 0.04%)</title><rect x="322.6" y="291.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="325.6" y="302.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (69 samples, 0.04%)</title><rect x="322.6" y="275.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="325.6" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (69 samples, 0.04%)</title><rect x="322.6" y="259.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.6" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (69 samples, 0.04%)</title><rect x="322.6" y="243.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.6" y="254.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (69 samples, 0.04%)</title><rect x="322.6" y="227.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.6" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (69 samples, 0.04%)</title><rect x="322.6" y="211.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.6" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (69 samples, 0.04%)</title><rect x="322.6" y="195.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.6" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (69 samples, 0.04%)</title><rect x="322.6" y="179.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.6" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (69 samples, 0.04%)</title><rect x="322.6" y="163.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.6" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (69 samples, 0.04%)</title><rect x="322.6" y="147.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.6" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (69 samples, 0.04%)</title><rect x="322.6" y="131.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="325.6" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (69 samples, 0.04%)</title><rect x="322.6" y="115.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="325.6" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (60 samples, 0.04%)</title><rect x="322.6" y="99.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.6" y="110.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (60 samples, 0.04%)</title><rect x="322.6" y="83.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="325.6" y="94.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (60 samples, 0.04%)</title><rect x="322.6" y="67.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.6" y="78.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (60 samples, 0.04%)</title><rect x="322.6" y="51.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.6" y="62.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (56 samples, 0.04%)</title><rect x="323.1" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.1" y="350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (56 samples, 0.04%)</title><rect x="323.1" y="323.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="326.1" y="334.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (51 samples, 0.03%)</title><rect x="323.1" y="307.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="326.1" y="318.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (49 samples, 0.03%)</title><rect x="323.1" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.1" y="302.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (49 samples, 0.03%)</title><rect x="323.1" y="275.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.1" y="286.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (49 samples, 0.03%)</title><rect x="323.1" y="259.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="326.1" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (49 samples, 0.03%)</title><rect x="323.1" y="243.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.1" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (49 samples, 0.03%)</title><rect x="323.1" y="227.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="326.1" y="238.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (49 samples, 0.03%)</title><rect x="323.1" y="211.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.1" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (49 samples, 0.03%)</title><rect x="323.1" y="195.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.1" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (49 samples, 0.03%)</title><rect x="323.1" y="179.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="326.1" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (49 samples, 0.03%)</title><rect x="323.1" y="163.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="326.1" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (49 samples, 0.03%)</title><rect x="323.1" y="147.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.1" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (49 samples, 0.03%)</title><rect x="323.1" y="131.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.1" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (49 samples, 0.03%)</title><rect x="323.1" y="115.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.1" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (49 samples, 0.03%)</title><rect x="323.1" y="99.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="326.1" y="110.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (44 samples, 0.03%)</title><rect x="323.1" y="83.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="326.1" y="94.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (44 samples, 0.03%)</title><rect x="323.1" y="67.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.1" y="78.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (43 samples, 0.03%)</title><rect x="323.1" y="51.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="326.1" y="62.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (43 samples, 0.03%)</title><rect x="323.1" y="35.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.1" y="46.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (60 samples, 0.04%)</title><rect x="323.5" y="371.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.5" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (60 samples, 0.04%)</title><rect x="323.5" y="355.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="326.5" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (60 samples, 0.04%)</title><rect x="323.5" y="339.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.5" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (53 samples, 0.03%)</title><rect x="323.5" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.5" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (53 samples, 0.03%)</title><rect x="323.5" y="307.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="326.5" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (49 samples, 0.03%)</title><rect x="323.5" y="291.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="326.5" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (44 samples, 0.03%)</title><rect x="323.5" y="275.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.5" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (44 samples, 0.03%)</title><rect x="323.5" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="326.5" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (44 samples, 0.03%)</title><rect x="323.5" y="243.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.5" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (43 samples, 0.03%)</title><rect x="323.5" y="227.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="326.5" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (42 samples, 0.03%)</title><rect x="323.6" y="211.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.6" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (37 samples, 0.02%)</title><rect x="323.6" y="195.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="326.6" y="206.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (35 samples, 0.02%)</title><rect x="323.6" y="179.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.6" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (35 samples, 0.02%)</title><rect x="323.6" y="163.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="326.6" y="174.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor32.invoke (35 samples, 0.02%)</title><rect x="323.6" y="147.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="326.6" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (35 samples, 0.02%)</title><rect x="323.6" y="131.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.6" y="142.0"></text>
</g>
<g>
<title>jdk/internal/agent/Agent.startLocalManagementAgent (39 samples, 0.02%)</title><rect x="324.2" y="595.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.2" y="606.0"></text>
</g>
<g>
<title>sun/management/jmxremote/ConnectorBootstrap.startLocalConnectorServer (39 samples, 0.02%)</title><rect x="324.2" y="579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="327.2" y="590.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectorServer.start (35 samples, 0.02%)</title><rect x="324.2" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.2" y="574.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (50 samples, 0.03%)</title><rect x="324.7" y="595.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.7" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.createSession (50 samples, 0.03%)</title><rect x="324.7" y="579.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="327.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.createSession (50 samples, 0.03%)</title><rect x="324.7" y="563.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="327.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.&lt;init&gt; (49 samples, 0.03%)</title><rect x="324.7" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.7" y="558.0"></text>
</g>
<g>
<title>byte[] (45 samples, 0.03%)</title><rect x="324.8" y="531.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="327.8" y="542.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (116,474 samples, 73.30%)</title><rect x="325.1" y="595.0" width="864.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="328.1" y="606.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,577 samples, 0.99%)</title><rect x="325.1" y="579.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.1" y="590.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,577 samples, 0.99%)</title><rect x="325.1" y="563.0" width="11.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="328.1" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (114,897 samples, 72.31%)</title><rect x="336.8" y="579.0" width="853.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="339.8" y="590.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (114,897 samples, 72.31%)</title><rect x="336.8" y="563.0" width="853.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.8" y="574.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (114,897 samples, 72.31%)</title><rect x="336.8" y="547.0" width="853.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.8" y="558.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (87,397 samples, 55.00%)</title><rect x="336.8" y="531.0" width="649.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.8" y="542.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (87,397 samples, 55.00%)</title><rect x="336.8" y="515.0" width="649.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="339.8" y="526.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (84,341 samples, 53.08%)</title><rect x="336.8" y="499.0" width="626.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.8" y="510.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2,450 samples, 1.54%)</title><rect x="336.8" y="483.0" width="18.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2,450 samples, 1.54%)</title><rect x="336.8" y="467.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.8" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (2,450 samples, 1.54%)</title><rect x="336.8" y="451.0" width="18.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.8" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,450 samples, 1.54%)</title><rect x="336.8" y="435.0" width="18.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="339.8" y="446.0"></text>
</g>
<g>
<title>java.lang.String (1,302 samples, 0.82%)</title><rect x="336.8" y="419.0" width="9.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="339.8" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,148 samples, 0.72%)</title><rect x="346.5" y="419.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="349.5" y="430.0"></text>
</g>
<g>
<title>byte[] (1,148 samples, 0.72%)</title><rect x="346.5" y="403.0" width="8.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="349.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.get (81,891 samples, 51.53%)</title><rect x="355.0" y="483.0" width="608.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="358.0" y="494.0">ru/mail/polis/service/s3ponia/AsyncService.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,161 samples, 0.73%)</title><rect x="355.0" y="467.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="358.0" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,161 samples, 0.73%)</title><rect x="355.0" y="451.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="358.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService$$Lambda$84/1141333960.get$Lambda (1,161 samples, 0.73%)</title><rect x="355.0" y="435.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.0" y="446.0"></text>
</g>
<g>
<title>ru.mail.polis.service.s3ponia.AsyncService$$Lambda$84 (1,161 samples, 0.73%)</title><rect x="355.0" y="419.0" width="8.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="358.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.byteBufferFromString (1,265 samples, 0.80%)</title><rect x="363.6" y="467.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="366.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1,265 samples, 0.80%)</title><rect x="363.6" y="451.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.6" y="462.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,265 samples, 0.80%)</title><rect x="363.6" y="435.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.6" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,265 samples, 0.80%)</title><rect x="363.6" y="419.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.6" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,265 samples, 0.80%)</title><rect x="363.6" y="403.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.6" y="414.0"></text>
</g>
<g>
<title>byte[] (1,265 samples, 0.80%)</title><rect x="363.6" y="387.0" width="9.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="366.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.chooseNode (78,729 samples, 49.54%)</title><rect x="373.0" y="467.0" width="584.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="376.0" y="478.0">ru/mail/polis/service/s3ponia/AsyncService.chooseNode</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (38 samples, 0.02%)</title><rect x="373.0" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="376.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (38 samples, 0.02%)</title><rect x="373.0" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="376.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (38 samples, 0.02%)</title><rect x="373.0" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (38 samples, 0.02%)</title><rect x="373.0" y="403.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="376.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (38 samples, 0.02%)</title><rect x="373.0" y="387.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="376.0" y="398.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (38 samples, 0.02%)</title><rect x="373.0" y="371.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="376.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.proxy (78,691 samples, 49.52%)</title><rect x="373.3" y="451.0" width="584.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="376.3" y="462.0">ru/mail/polis/service/s3ponia/AsyncService.proxy</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (211 samples, 0.13%)</title><rect x="373.3" y="435.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.3" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/790067787.invoke (211 samples, 0.13%)</title><rect x="373.3" y="419.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="376.3" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (211 samples, 0.13%)</title><rect x="373.3" y="403.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="376.3" y="414.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (85 samples, 0.05%)</title><rect x="373.3" y="387.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="376.3" y="398.0"></text>
</g>
<g>
<title>java.lang.String (85 samples, 0.05%)</title><rect x="373.3" y="371.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="376.3" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (126 samples, 0.08%)</title><rect x="373.9" y="387.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.9" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (126 samples, 0.08%)</title><rect x="373.9" y="371.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.9" y="382.0"></text>
</g>
<g>
<title>byte[] (126 samples, 0.08%)</title><rect x="373.9" y="355.0" width="1.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="376.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (77,834 samples, 48.98%)</title><rect x="374.9" y="435.0" width="577.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.9" y="446.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (77,834 samples, 48.98%)</title><rect x="374.9" y="419.0" width="577.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="377.9" y="430.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (302 samples, 0.19%)</title><rect x="374.9" y="403.0" width="2.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="377.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (72,241 samples, 45.46%)</title><rect x="377.1" y="403.0" width="536.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.1" y="414.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (26,588 samples, 16.73%)</title><rect x="377.1" y="387.0" width="197.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="380.1" y="398.0">byte[]</text>
</g>
<g>
<title>byte[] (45,653 samples, 28.73%)</title><rect x="574.5" y="387.0" width="339.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="577.5" y="398.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (4,400 samples, 2.77%)</title><rect x="913.5" y="403.0" width="32.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.5" y="414.0">on..</text>
</g>
<g>
<title>byte[] (167 samples, 0.11%)</title><rect x="913.5" y="387.0" width="1.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="916.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (191 samples, 0.12%)</title><rect x="914.8" y="387.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="917.8" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (191 samples, 0.12%)</title><rect x="914.8" y="371.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="917.8" y="382.0"></text>
</g>
<g>
<title>java.lang.String (112 samples, 0.07%)</title><rect x="914.8" y="355.0" width="0.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="917.8" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (79 samples, 0.05%)</title><rect x="915.6" y="355.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="918.6" y="366.0"></text>
</g>
<g>
<title>byte[] (79 samples, 0.05%)</title><rect x="915.6" y="339.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="918.6" y="350.0"></text>
</g>
<g>
<title>one.nio.http.Response (47 samples, 0.03%)</title><rect x="916.2" y="387.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="919.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (3,638 samples, 2.29%)</title><rect x="916.6" y="387.0" width="27.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="919.6" y="398.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,638 samples, 2.29%)</title><rect x="916.6" y="371.0" width="27.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="919.6" y="382.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,638 samples, 2.29%)</title><rect x="916.6" y="355.0" width="27.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="919.6" y="366.0">o..</text>
</g>
<g>
<title>char[] (2,908 samples, 1.83%)</title><rect x="916.6" y="339.0" width="21.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="919.6" y="350.0">c..</text>
</g>
<g>
<title>java.lang.String (314 samples, 0.20%)</title><rect x="938.1" y="339.0" width="2.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="941.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (416 samples, 0.26%)</title><rect x="940.5" y="339.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="943.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (416 samples, 0.26%)</title><rect x="940.5" y="323.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (416 samples, 0.26%)</title><rect x="940.5" y="307.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.5" y="318.0"></text>
</g>
<g>
<title>byte[] (416 samples, 0.26%)</title><rect x="940.5" y="291.0" width="3.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="943.5" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (157 samples, 0.10%)</title><rect x="943.6" y="387.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="946.6" y="398.0"></text>
</g>
<g>
<title>java.lang.String[] (157 samples, 0.10%)</title><rect x="943.6" y="371.0" width="1.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="946.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (200 samples, 0.13%)</title><rect x="944.7" y="387.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="947.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (200 samples, 0.13%)</title><rect x="944.7" y="371.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="947.7" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (200 samples, 0.13%)</title><rect x="944.7" y="355.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="947.7" y="366.0"></text>
</g>
<g>
<title>java.lang.String (65 samples, 0.04%)</title><rect x="944.7" y="339.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="947.7" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (135 samples, 0.08%)</title><rect x="945.2" y="339.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="948.2" y="350.0"></text>
</g>
<g>
<title>byte[] (135 samples, 0.08%)</title><rect x="945.2" y="323.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="948.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (549 samples, 0.35%)</title><rect x="946.2" y="403.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="949.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (549 samples, 0.35%)</title><rect x="946.2" y="387.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="949.2" y="398.0"></text>
</g>
<g>
<title>byte[] (549 samples, 0.35%)</title><rect x="946.2" y="371.0" width="4.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="949.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (239 samples, 0.15%)</title><rect x="950.3" y="403.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="953.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (239 samples, 0.15%)</title><rect x="950.3" y="387.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="953.3" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (239 samples, 0.15%)</title><rect x="950.3" y="371.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="953.3" y="382.0"></text>
</g>
<g>
<title>java.lang.String (101 samples, 0.06%)</title><rect x="950.3" y="355.0" width="0.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="953.3" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (138 samples, 0.09%)</title><rect x="951.0" y="355.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="954.0" y="366.0"></text>
</g>
<g>
<title>byte[] (138 samples, 0.09%)</title><rect x="951.0" y="339.0" width="1.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="954.0" y="350.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (103 samples, 0.06%)</title><rect x="952.1" y="403.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="955.1" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (103 samples, 0.06%)</title><rect x="952.1" y="387.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.1" y="398.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (103 samples, 0.06%)</title><rect x="952.1" y="371.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="955.1" y="382.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (103 samples, 0.06%)</title><rect x="952.1" y="355.0" width="0.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="955.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (646 samples, 0.41%)</title><rect x="952.8" y="435.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="955.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (646 samples, 0.41%)</title><rect x="952.8" y="419.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="955.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (427 samples, 0.27%)</title><rect x="952.8" y="403.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="955.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (427 samples, 0.27%)</title><rect x="952.8" y="387.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="955.8" y="398.0"></text>
</g>
<g>
<title>byte[] (427 samples, 0.27%)</title><rect x="952.8" y="371.0" width="3.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="955.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (219 samples, 0.14%)</title><rect x="956.0" y="403.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="959.0" y="414.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (219 samples, 0.14%)</title><rect x="956.0" y="387.0" width="1.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="959.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/AsyncService.urlFromKey (736 samples, 0.46%)</title><rect x="957.6" y="467.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="960.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNode (736 samples, 0.46%)</title><rect x="957.6" y="451.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="960.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/s3ponia/ModularPolicy.getNode (736 samples, 0.46%)</title><rect x="957.6" y="435.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="960.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceFactory$$Lambda$23/1366025231.apply (736 samples, 0.46%)</title><rect x="957.6" y="419.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="960.6" y="430.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (736 samples, 0.46%)</title><rect x="957.6" y="403.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="960.6" y="414.0"></text>
</g>
<g>
<title>java.lang.Integer (736 samples, 0.46%)</title><rect x="957.6" y="387.0" width="5.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="960.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3,056 samples, 1.92%)</title><rect x="963.1" y="499.0" width="22.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="966.1" y="510.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (3,056 samples, 1.92%)</title><rect x="963.1" y="483.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="966.1" y="494.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,056 samples, 1.92%)</title><rect x="963.1" y="467.0" width="22.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="966.1" y="478.0">j..</text>
</g>
<g>
<title>java.lang.String (1,221 samples, 0.77%)</title><rect x="963.1" y="451.0" width="9.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="966.1" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,835 samples, 1.15%)</title><rect x="972.2" y="451.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="975.2" y="462.0"></text>
</g>
<g>
<title>byte[] (1,835 samples, 1.15%)</title><rect x="972.2" y="435.0" width="13.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="975.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (13,246 samples, 8.34%)</title><rect x="985.8" y="531.0" width="98.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="988.8" y="542.0">one/nio/http..</text>
</g>
<g>
<title>one.nio.http.Request (2,090 samples, 1.32%)</title><rect x="985.8" y="515.0" width="15.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="988.8" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4,320 samples, 2.72%)</title><rect x="1001.3" y="515.0" width="32.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1004.3" y="526.0">on..</text>
</g>
<g>
<title>java.lang.String[] (4,320 samples, 2.72%)</title><rect x="1001.3" y="499.0" width="32.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1004.3" y="510.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,836 samples, 4.30%)</title><rect x="1033.4" y="515.0" width="50.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1036.4" y="526.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,836 samples, 4.30%)</title><rect x="1033.4" y="499.0" width="50.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1036.4" y="510.0">one/n..</text>
</g>
<g>
<title>char[] (3,262 samples, 2.05%)</title><rect x="1033.4" y="483.0" width="24.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1036.4" y="494.0">c..</text>
</g>
<g>
<title>java.lang.String (1,373 samples, 0.86%)</title><rect x="1057.6" y="483.0" width="10.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1060.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,201 samples, 1.39%)</title><rect x="1067.8" y="483.0" width="16.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1070.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,201 samples, 1.39%)</title><rect x="1067.8" y="467.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1070.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,201 samples, 1.39%)</title><rect x="1067.8" y="451.0" width="16.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1070.8" y="462.0"></text>
</g>
<g>
<title>byte[] (2,201 samples, 1.39%)</title><rect x="1067.8" y="435.0" width="16.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1070.8" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14,254 samples, 8.97%)</title><rect x="1084.2" y="531.0" width="105.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1087.2" y="542.0">one/nio/util/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (14,254 samples, 8.97%)</title><rect x="1084.2" y="515.0" width="105.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1087.2" y="526.0">one/nio/util/..</text>
</g>
<g>
<title>char[] (7,502 samples, 4.72%)</title><rect x="1084.2" y="499.0" width="55.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1087.2" y="510.0">char[]</text>
</g>
<g>
<title>java.lang.String (2,163 samples, 1.36%)</title><rect x="1139.9" y="499.0" width="16.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1142.9" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,589 samples, 2.89%)</title><rect x="1155.9" y="499.0" width="34.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1158.9" y="510.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,589 samples, 2.89%)</title><rect x="1155.9" y="483.0" width="34.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1158.9" y="494.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4,589 samples, 2.89%)</title><rect x="1155.9" y="467.0" width="34.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1158.9" y="478.0">ja..</text>
</g>
<g>
<title>byte[] (4,589 samples, 2.89%)</title><rect x="1155.9" y="451.0" width="34.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1158.9" y="462.0">by..</text>
</g>
</g>
</svg>
