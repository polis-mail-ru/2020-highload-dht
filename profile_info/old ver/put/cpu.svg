<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="421"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="421"> </text>
<g id="frames">
<g>
<title>all (1,274 samples, 100.00%)</title><rect x="10.0" y="387.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="398.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.39%)</title><rect x="10.0" y="371.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (5 samples, 0.39%)</title><rect x="10.0" y="355.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (5 samples, 0.39%)</title><rect x="10.0" y="339.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.31%)</title><rect x="10.9" y="323.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.9" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (3 samples, 0.24%)</title><rect x="10.9" y="307.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.9" y="318.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="13.7" y="307.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="16.7" y="318.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.08%)</title><rect x="14.6" y="371.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="17.6" y="382.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.08%)</title><rect x="15.6" y="371.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="18.6" y="382.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="15.6" y="355.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.6" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.55%)</title><rect x="16.5" y="371.0" width="6.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="19.5" y="382.0"></text>
</g>
<g>
<title>sha256_implCompress (7 samples, 0.55%)</title><rect x="16.5" y="355.0" width="6.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="19.5" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (835 samples, 65.54%)</title><rect x="23.0" y="371.0" width="773.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.0" y="382.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (835 samples, 65.54%)</title><rect x="23.0" y="355.0" width="773.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.0" y="366.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (835 samples, 65.54%)</title><rect x="23.0" y="339.0" width="773.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.0" y="350.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.16%)</title><rect x="38.7" y="323.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.7" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (11 samples, 0.86%)</title><rect x="40.6" y="323.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (8 samples, 0.63%)</title><rect x="43.3" y="307.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="46.3" y="318.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (7 samples, 0.55%)</title><rect x="43.3" y="291.0" width="6.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="46.3" y="302.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.16%)</title><rect x="45.2" y="275.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="48.2" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (1 samples, 0.08%)</title><rect x="47.0" y="275.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="50.0" y="286.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="48.0" y="275.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="51.0" y="286.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.08%)</title><rect x="48.9" y="275.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="51.9" y="286.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="49.8" y="291.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="52.8" y="302.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.08%)</title><rect x="49.8" y="275.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="52.8" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.16%)</title><rect x="50.8" y="323.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.08%)</title><rect x="51.7" y="307.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.24%)</title><rect x="52.6" y="323.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.24%)</title><rect x="52.6" y="307.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.08%)</title><rect x="54.5" y="291.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="57.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.55%)</title><rect x="55.4" y="323.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.16%)</title><rect x="59.1" y="307.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="62.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.08%)</title><rect x="59.1" y="291.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="60.0" y="291.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="60.0" y="275.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.08%)</title><rect x="60.0" y="259.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$67/856457076.run (1 samples, 0.08%)</title><rect x="60.9" y="307.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="63.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (250 samples, 19.62%)</title><rect x="61.9" y="323.0" width="231.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.9" y="334.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (250 samples, 19.62%)</title><rect x="61.9" y="307.0" width="231.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.9" y="318.0">java/util/concurrent/ArrayBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (212 samples, 16.64%)</title><rect x="70.2" y="291.0" width="196.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="73.2" y="302.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (11 samples, 0.86%)</title><rect x="73.0" y="275.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (17 samples, 1.33%)</title><rect x="83.2" y="275.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="86.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.33%)</title><rect x="83.2" y="259.0" width="15.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.86%)</title><rect x="88.7" y="243.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.86%)</title><rect x="88.7" y="227.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="89.7" y="211.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.7" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.63%)</title><rect x="91.5" y="211.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.5" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.31%)</title><rect x="92.4" y="195.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="95.4" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.08%)</title><rect x="92.4" y="179.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="95.4" y="190.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.08%)</title><rect x="93.4" y="179.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="96.4" y="190.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.08%)</title><rect x="94.3" y="179.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="97.3" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.08%)</title><rect x="95.2" y="179.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="98.2" y="190.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.16%)</title><rect x="96.1" y="195.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="99.1" y="206.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="98.0" y="195.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="101.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.08%)</title><rect x="98.9" y="275.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.08%)</title><rect x="98.9" y="259.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (180 samples, 14.13%)</title><rect x="99.8" y="275.0" width="166.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.8" y="286.0">java/util/concurrent/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (177 samples, 13.89%)</title><rect x="102.6" y="259.0" width="164.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="105.6" y="270.0">jdk/internal/misc/Uns..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="106.3" y="243.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="109.3" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.16%)</title><rect x="107.3" y="243.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="110.3" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.24%)</title><rect x="109.1" y="243.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="112.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park (96 samples, 7.54%)</title><rect x="111.9" y="243.0" width="88.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="114.9" y="254.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.16%)</title><rect x="115.6" y="227.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="118.6" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 1.96%)</title><rect x="117.4" y="227.0" width="23.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="120.4" y="238.0">P..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.47%)</title><rect x="125.8" y="211.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="128.8" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr (10 samples, 0.78%)</title><rect x="131.3" y="211.0" width="9.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="134.3" y="222.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="140.6" y="227.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="143.6" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.16%)</title><rect x="141.5" y="227.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="144.5" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.08%)</title><rect x="143.4" y="227.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="146.4" y="238.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.24%)</title><rect x="144.3" y="227.0" width="2.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="147.3" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (48 samples, 3.77%)</title><rect x="147.1" y="227.0" width="44.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="150.1" y="238.0">__pt..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.16%)</title><rect x="191.5" y="227.0" width="1.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="194.5" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.31%)</title><rect x="193.4" y="227.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="196.4" y="238.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="197.1" y="227.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="200.1" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (3 samples, 0.24%)</title><rect x="198.0" y="227.0" width="2.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="201.0" y="238.0"></text>
</g>
<g>
<title>[unknown] (68 samples, 5.34%)</title><rect x="200.8" y="243.0" width="63.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="203.8" y="254.0">[unkno..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (7 samples, 0.55%)</title><rect x="200.8" y="227.0" width="6.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="203.8" y="238.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (5 samples, 0.39%)</title><rect x="207.3" y="227.0" width="4.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="210.3" y="238.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.08%)</title><rect x="211.9" y="227.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="214.9" y="238.0"></text>
</g>
<g>
<title>__pthread_cond_wait (44 samples, 3.45%)</title><rect x="212.8" y="227.0" width="40.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="215.8" y="238.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.24%)</title><rect x="253.6" y="227.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="256.6" y="238.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (7 samples, 0.55%)</title><rect x="256.4" y="227.0" width="6.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="259.4" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="262.9" y="227.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="265.9" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="263.8" y="243.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="266.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 0.39%)</title><rect x="266.6" y="291.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.39%)</title><rect x="266.6" y="275.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (5 samples, 0.39%)</title><rect x="266.6" y="259.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.16%)</title><rect x="268.4" y="243.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.08%)</title><rect x="270.3" y="243.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.08%)</title><rect x="270.3" y="227.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.3" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="270.3" y="211.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.3" y="222.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.08%)</title><rect x="270.3" y="195.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="273.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (24 samples, 1.88%)</title><rect x="271.2" y="291.0" width="22.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.2" y="302.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 1.88%)</title><rect x="271.2" y="275.0" width="22.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="274.2" y="286.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 1.88%)</title><rect x="271.2" y="259.0" width="22.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.2" y="270.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 1.88%)</title><rect x="271.2" y="243.0" width="22.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.2" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.08%)</title><rect x="279.5" y="227.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="282.5" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 1.10%)</title><rect x="280.5" y="227.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.5" y="238.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="280.5" y="211.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="283.5" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.55%)</title><rect x="281.4" y="211.0" width="6.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="284.4" y="222.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="282.3" y="195.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="285.3" y="206.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="283.2" y="195.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="286.2" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.08%)</title><rect x="284.2" y="195.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="287.2" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.08%)</title><rect x="285.1" y="195.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="288.1" y="206.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.16%)</title><rect x="286.0" y="195.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="289.0" y="206.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.47%)</title><rect x="287.9" y="211.0" width="5.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="290.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$67/856457076.run (543 samples, 42.62%)</title><rect x="293.4" y="323.0" width="503.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.4" y="334.0">ru/mail/polis/service/re1nex/BaseService$$Lambda$67/856457076.run</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1 (541 samples, 42.46%)</title><rect x="295.3" y="307.0" width="501.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="298.3" y="318.0">ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.47%)</title><rect x="299.0" y="291.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.16%)</title><rect x="301.8" y="275.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.16%)</title><rect x="301.8" y="259.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="304.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.08%)</title><rect x="303.6" y="275.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.08%)</title><rect x="303.6" y="259.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.6" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="303.6" y="243.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponseLocal (189 samples, 14.84%)</title><rect x="304.5" y="291.0" width="175.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="307.5" y="302.0">ru/mail/polis/service/r..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (189 samples, 14.84%)</title><rect x="304.5" y="275.0" width="175.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="307.5" y="286.0">ru/mail/polis/service/r..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (127 samples, 9.97%)</title><rect x="304.5" y="259.0" width="117.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="307.5" y="270.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (124 samples, 9.73%)</title><rect x="304.5" y="243.0" width="114.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="307.5" y="254.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.08%)</title><rect x="308.2" y="227.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.08%)</title><rect x="308.2" y="211.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.08%)</title><rect x="308.2" y="195.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.08%)</title><rect x="309.2" y="227.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.08%)</title><rect x="309.2" y="211.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.08%)</title><rect x="309.2" y="195.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.2" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (1 samples, 0.08%)</title><rect x="309.2" y="179.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (118 samples, 9.26%)</title><rect x="310.1" y="227.0" width="109.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.1" y="238.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.08%)</title><rect x="310.1" y="211.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.1" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="310.1" y="195.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="313.1" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="310.1" y="179.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="313.1" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="310.1" y="163.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="313.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (62 samples, 4.87%)</title><rect x="311.0" y="211.0" width="57.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.0" y="222.0">java/u..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.16%)</title><rect x="311.0" y="195.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.0" y="206.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.16%)</title><rect x="311.0" y="179.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.0" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.16%)</title><rect x="311.0" y="163.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.0" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.16%)</title><rect x="311.0" y="147.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.0" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (60 samples, 4.71%)</title><rect x="312.9" y="195.0" width="55.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.9" y="206.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (57 samples, 4.47%)</title><rect x="315.7" y="179.0" width="52.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="318.7" y="190.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (57 samples, 4.47%)</title><rect x="315.7" y="163.0" width="52.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="318.7" y="174.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 1.33%)</title><rect x="352.7" y="147.0" width="15.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.7" y="158.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (17 samples, 1.33%)</title><rect x="352.7" y="131.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.7" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.39%)</title><rect x="362.0" y="115.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.0" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.39%)</title><rect x="362.0" y="99.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="365.0" y="110.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.16%)</title><rect x="366.6" y="115.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="369.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (55 samples, 4.32%)</title><rect x="368.4" y="211.0" width="51.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="371.4" y="222.0">java/..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.24%)</title><rect x="374.0" y="195.0" width="2.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="377.0" y="206.0"></text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.08%)</title><rect x="376.8" y="195.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="379.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (1 samples, 0.08%)</title><rect x="377.7" y="195.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (42 samples, 3.30%)</title><rect x="378.6" y="195.0" width="38.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.6" y="206.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (6 samples, 0.47%)</title><rect x="388.8" y="179.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="391.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.08%)</title><rect x="390.7" y="163.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="393.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.08%)</title><rect x="390.7" y="147.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.08%)</title><rect x="390.7" y="131.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="390.7" y="115.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.7" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="390.7" y="99.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.7" y="110.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.08%)</title><rect x="390.7" y="83.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.7" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.24%)</title><rect x="391.6" y="163.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.24%)</title><rect x="391.6" y="147.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.24%)</title><rect x="391.6" y="131.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="394.6" y="142.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.24%)</title><rect x="391.6" y="115.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="394.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (25 samples, 1.96%)</title><rect x="394.4" y="179.0" width="23.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="397.4" y="190.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (25 samples, 1.96%)</title><rect x="394.4" y="163.0" width="23.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="397.4" y="174.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (25 samples, 1.96%)</title><rect x="394.4" y="147.0" width="23.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.4" y="158.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (25 samples, 1.96%)</title><rect x="394.4" y="131.0" width="23.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.4" y="142.0">j..</text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.08%)</title><rect x="416.6" y="115.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="419.6" y="126.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.16%)</title><rect x="417.5" y="195.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="420.5" y="206.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.16%)</title><rect x="417.5" y="179.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="420.5" y="190.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="418.5" y="163.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="421.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (3 samples, 0.24%)</title><rect x="419.4" y="243.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.08%)</title><rect x="419.4" y="227.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.4" y="238.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.08%)</title><rect x="419.4" y="211.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="422.4" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.08%)</title><rect x="419.4" y="195.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.4" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="419.4" y="179.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.4" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="419.4" y="163.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="422.4" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="419.4" y="147.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="422.4" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="419.4" y="131.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="422.4" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="419.4" y="115.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="422.4" y="126.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="419.4" y="99.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="422.4" y="110.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.08%)</title><rect x="419.4" y="83.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="422.4" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.16%)</title><rect x="420.3" y="227.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="423.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.16%)</title><rect x="420.3" y="211.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.3" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="421.2" y="195.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="424.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (62 samples, 4.87%)</title><rect x="422.2" y="259.0" width="57.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="425.2" y="270.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (60 samples, 4.71%)</title><rect x="422.2" y="243.0" width="55.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.2" y="254.0">one/n..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.55%)</title><rect x="426.8" y="227.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="429.8" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (7 samples, 0.55%)</title><rect x="426.8" y="211.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="429.8" y="222.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.47%)</title><rect x="426.8" y="195.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="429.8" y="206.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (6 samples, 0.47%)</title><rect x="426.8" y="179.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="429.8" y="190.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (1 samples, 0.08%)</title><rect x="432.4" y="195.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="435.4" y="206.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (1 samples, 0.08%)</title><rect x="432.4" y="179.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="435.4" y="190.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.47%)</title><rect x="433.3" y="227.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="436.3" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.47%)</title><rect x="433.3" y="211.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.3" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.47%)</title><rect x="433.3" y="195.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="436.3" y="206.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.24%)</title><rect x="436.1" y="179.0" width="2.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="439.1" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (41 samples, 3.22%)</title><rect x="438.8" y="227.0" width="38.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.8" y="238.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.78%)</title><rect x="438.8" y="211.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="441.8" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="444.4" y="195.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="447.4" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="444.4" y="179.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="447.4" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="444.4" y="163.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="447.4" y="174.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.24%)</title><rect x="445.3" y="195.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.3" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.24%)</title><rect x="445.3" y="179.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.24%)</title><rect x="445.3" y="163.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.3" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="447.2" y="147.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="450.2" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (31 samples, 2.43%)</title><rect x="448.1" y="211.0" width="28.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="451.1" y="222.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (31 samples, 2.43%)</title><rect x="448.1" y="195.0" width="28.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="451.1" y="206.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (31 samples, 2.43%)</title><rect x="448.1" y="179.0" width="28.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.1" y="190.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (31 samples, 2.43%)</title><rect x="448.1" y="163.0" width="28.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="451.1" y="174.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (9 samples, 0.71%)</title><rect x="450.9" y="147.0" width="8.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="453.9" y="158.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.08%)</title><rect x="452.7" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="455.7" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.47%)</title><rect x="453.7" y="131.0" width="5.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="456.7" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.08%)</title><rect x="454.6" y="115.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="457.6" y="126.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.31%)</title><rect x="455.5" y="115.0" width="3.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="458.5" y="126.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.16%)</title><rect x="457.4" y="99.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="460.4" y="110.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="459.2" y="147.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="462.2" y="158.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="460.1" y="147.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="463.1" y="158.0"></text>
</g>
<g>
<title>__send (16 samples, 1.26%)</title><rect x="461.1" y="147.0" width="14.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="464.1" y="158.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.08%)</title><rect x="475.9" y="147.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="478.9" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.08%)</title><rect x="476.8" y="227.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.08%)</title><rect x="476.8" y="211.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.8" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.08%)</title><rect x="476.8" y="195.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="479.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (2 samples, 0.16%)</title><rect x="477.7" y="243.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="480.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.sendReplica (342 samples, 26.84%)</title><rect x="479.6" y="291.0" width="316.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.6" y="302.0">ru/mail/polis/service/re1nex/ApiControllerI..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendReplica (342 samples, 26.84%)</title><rect x="479.6" y="275.0" width="316.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.6" y="286.0">ru/mail/polis/service/re1nex/ApiController...</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.08%)</title><rect x="479.6" y="259.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.08%)</title><rect x="479.6" y="243.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.08%)</title><rect x="479.6" y="227.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="482.6" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.08%)</title><rect x="479.6" y="211.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="482.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.severalNodesForKey (32 samples, 2.51%)</title><rect x="480.5" y="259.0" width="29.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.5" y="270.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (15 samples, 1.18%)</title><rect x="480.5" y="243.0" width="13.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.5" y="254.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (4 samples, 0.31%)</title><rect x="480.5" y="227.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.5" y="238.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (4 samples, 0.31%)</title><rect x="480.5" y="211.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="483.5" y="222.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (4 samples, 0.31%)</title><rect x="480.5" y="195.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="483.5" y="206.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (4 samples, 0.31%)</title><rect x="480.5" y="179.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="483.5" y="190.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (4 samples, 0.31%)</title><rect x="480.5" y="163.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="483.5" y="174.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bBig (4 samples, 0.31%)</title><rect x="480.5" y="147.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="483.5" y="158.0"></text>
</g>
<g>
<title>sha256_implCompress (2 samples, 0.16%)</title><rect x="482.4" y="131.0" width="1.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="485.4" y="142.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (11 samples, 0.86%)</title><rect x="484.2" y="227.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="487.2" y="238.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (11 samples, 0.86%)</title><rect x="484.2" y="211.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="487.2" y="222.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (3 samples, 0.24%)</title><rect x="484.2" y="195.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="487.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.24%)</title><rect x="484.2" y="179.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="487.2" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.08%)</title><rect x="486.1" y="163.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.1" y="174.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (8 samples, 0.63%)</title><rect x="487.0" y="195.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.0" y="206.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (7 samples, 0.55%)</title><rect x="487.0" y="179.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.0" y="190.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (6 samples, 0.47%)</title><rect x="487.0" y="163.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.0" y="174.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (5 samples, 0.39%)</title><rect x="487.0" y="147.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.0" y="158.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (5 samples, 0.39%)</title><rect x="487.0" y="131.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="490.0" y="142.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (5 samples, 0.39%)</title><rect x="487.0" y="115.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.0" y="126.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (5 samples, 0.39%)</title><rect x="487.0" y="99.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="490.0" y="110.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (5 samples, 0.39%)</title><rect x="487.0" y="83.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="490.0" y="94.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="491.6" y="147.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="494.6" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="491.6" y="131.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="494.6" y="142.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.checkSuperClass (1 samples, 0.08%)</title><rect x="492.6" y="163.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.6" y="174.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (1 samples, 0.08%)</title><rect x="493.5" y="179.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="496.5" y="190.0"></text>
</g>
<g>
<title>java/security/Provider.getService (1 samples, 0.08%)</title><rect x="493.5" y="163.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="496.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="493.5" y="147.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="496.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.getNodesFromMap (17 samples, 1.33%)</title><rect x="494.4" y="243.0" width="15.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="497.4" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (3 samples, 0.24%)</title><rect x="495.3" y="227.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="498.3" y="238.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (3 samples, 0.24%)</title><rect x="495.3" y="211.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="498.3" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (2 samples, 0.16%)</title><rect x="496.3" y="195.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.3" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (2 samples, 0.16%)</title><rect x="496.3" y="179.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="499.3" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (2 samples, 0.16%)</title><rect x="496.3" y="163.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="499.3" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.08%)</title><rect x="497.2" y="147.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.2" y="158.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="497.2" y="131.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.2" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.hasNext (1 samples, 0.08%)</title><rect x="498.1" y="227.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="501.1" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$ValueIterator.next (1 samples, 0.08%)</title><rect x="499.0" y="227.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.0" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$Values.iterator (1 samples, 0.08%)</title><rect x="500.0" y="227.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.0" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.08%)</title><rect x="500.0" y="211.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="503.0" y="222.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (10 samples, 0.78%)</title><rect x="500.9" y="227.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="503.9" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (6 samples, 0.47%)</title><rect x="504.6" y="211.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="507.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.08%)</title><rect x="508.3" y="195.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.3" y="206.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.08%)</title><rect x="508.3" y="179.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.3" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.08%)</title><rect x="508.3" y="163.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="511.3" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.08%)</title><rect x="509.2" y="195.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="512.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponseLocal (1 samples, 0.08%)</title><rect x="510.2" y="259.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="513.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (308 samples, 24.18%)</title><rect x="511.1" y="259.0" width="285.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="514.1" y="270.0">ru/mail/polis/service/re1nex/ApiContro..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.24%)</title><rect x="512.9" y="243.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="515.9" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.24%)</title><rect x="512.9" y="227.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl$$Lambda$70/233955741.get$Lambda (3 samples, 0.24%)</title><rect x="512.9" y="211.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="515.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.24%)</title><rect x="512.9" y="195.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (284 samples, 22.29%)</title><rect x="515.7" y="243.0" width="263.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.7" y="254.0">ru/mail/polis/service/re1nex/ApiCon..</text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.16%)</title><rect x="524.1" y="227.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="527.1" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.16%)</title><rect x="524.1" y="211.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="527.1" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.16%)</title><rect x="524.1" y="195.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="527.1" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.16%)</title><rect x="524.1" y="179.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.1" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (2 samples, 0.16%)</title><rect x="524.1" y="163.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.1" y="174.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (1 samples, 0.08%)</title><rect x="525.9" y="227.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.9" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="525.9" y="211.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="528.9" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (1 samples, 0.08%)</title><rect x="525.9" y="195.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="528.9" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.08%)</title><rect x="525.9" y="179.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="528.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.removeLocal (2 samples, 0.16%)</title><rect x="526.8" y="227.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="529.8" y="238.0"></text>
</g>
<g>
<title>java/util/TreeSet.remove (2 samples, 0.16%)</title><rect x="526.8" y="211.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="529.8" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (2 samples, 0.16%)</title><rect x="526.8" y="195.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="529.8" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.08%)</title><rect x="527.8" y="179.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="530.8" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.08%)</title><rect x="527.8" y="163.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="530.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl$$Lambda$70/233955741.handleLocalResponse (54 samples, 4.24%)</title><rect x="528.7" y="227.0" width="50.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="531.7" y="238.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.lambda$handleResponses$2 (54 samples, 4.24%)</title><rect x="528.7" y="211.0" width="50.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="531.7" y="222.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (54 samples, 4.24%)</title><rect x="528.7" y="195.0" width="50.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="531.7" y="206.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (49 samples, 3.85%)</title><rect x="530.5" y="179.0" width="45.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="533.5" y="190.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (48 samples, 3.77%)</title><rect x="531.5" y="163.0" width="44.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.5" y="174.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (26 samples, 2.04%)</title><rect x="531.5" y="147.0" width="24.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="534.5" y="158.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (26 samples, 2.04%)</title><rect x="531.5" y="131.0" width="24.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="534.5" y="142.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.16%)</title><rect x="532.4" y="115.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="535.4" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (23 samples, 1.81%)</title><rect x="534.2" y="115.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="537.2" y="126.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (23 samples, 1.81%)</title><rect x="534.2" y="99.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="537.2" y="110.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.86%)</title><rect x="545.4" y="83.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.4" y="94.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.86%)</title><rect x="545.4" y="67.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.16%)</title><rect x="553.7" y="51.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="556.7" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.16%)</title><rect x="553.7" y="35.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="556.7" y="46.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (22 samples, 1.73%)</title><rect x="555.5" y="147.0" width="20.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="558.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (19 samples, 1.49%)</title><rect x="558.3" y="131.0" width="17.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="561.3" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (1 samples, 0.08%)</title><rect x="564.8" y="115.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="567.8" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (1 samples, 0.08%)</title><rect x="564.8" y="99.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="567.8" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.16%)</title><rect x="565.7" y="115.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="568.7" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.16%)</title><rect x="565.7" y="99.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="568.7" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.16%)</title><rect x="565.7" y="83.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="568.7" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.16%)</title><rect x="565.7" y="67.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="568.7" y="78.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.16%)</title><rect x="565.7" y="51.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="568.7" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (9 samples, 0.71%)</title><rect x="567.6" y="115.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="570.6" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.71%)</title><rect x="567.6" y="99.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.6" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.71%)</title><rect x="567.6" y="83.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="570.6" y="94.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.71%)</title><rect x="567.6" y="67.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="570.6" y="78.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.08%)</title><rect x="575.0" y="51.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="578.0" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (3 samples, 0.24%)</title><rect x="575.9" y="179.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="578.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.24%)</title><rect x="575.9" y="163.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.24%)</title><rect x="575.9" y="147.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.9" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="576.8" y="131.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="579.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.proxy (215 samples, 16.88%)</title><rect x="578.7" y="227.0" width="199.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="581.7" y="238.0">ru/mail/polis/service/re1n..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="578.7" y="211.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="581.7" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="578.7" y="195.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="581.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (214 samples, 16.80%)</title><rect x="579.6" y="211.0" width="198.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="582.6" y="222.0">one/nio/http/HttpClient.in..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (214 samples, 16.80%)</title><rect x="579.6" y="195.0" width="198.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.6" y="206.0">one/nio/http/HttpClient.in..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (80 samples, 6.28%)</title><rect x="581.5" y="179.0" width="74.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="584.5" y="190.0">one/nio/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.24%)</title><rect x="588.9" y="163.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="591.9" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.24%)</title><rect x="588.9" y="147.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="591.9" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.16%)</title><rect x="589.8" y="131.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="592.8" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.16%)</title><rect x="589.8" y="115.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="592.8" y="126.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="589.8" y="99.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="592.8" y="110.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.08%)</title><rect x="589.8" y="83.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="592.8" y="94.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.08%)</title><rect x="590.7" y="99.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="593.7" y="110.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (68 samples, 5.34%)</title><rect x="591.7" y="163.0" width="62.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="594.7" y="174.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (24 samples, 1.88%)</title><rect x="595.4" y="147.0" width="22.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="598.4" y="158.0">J..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.24%)</title><rect x="597.2" y="131.0" width="2.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="600.2" y="142.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="600.0" y="131.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="603.0" y="142.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.24%)</title><rect x="600.9" y="131.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="603.9" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.08%)</title><rect x="603.7" y="131.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="606.7" y="142.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (14 samples, 1.10%)</title><rect x="604.6" y="131.0" width="13.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="607.6" y="142.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.08%)</title><rect x="612.0" y="115.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="615.0" y="126.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="613.0" y="115.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="616.0" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.16%)</title><rect x="613.9" y="115.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="616.9" y="126.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.16%)</title><rect x="615.7" y="115.0" width="1.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="618.7" y="126.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.08%)</title><rect x="616.7" y="99.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="619.7" y="110.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.16%)</title><rect x="617.6" y="147.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="620.6" y="158.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.39%)</title><rect x="619.5" y="147.0" width="4.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="622.5" y="158.0"></text>
</g>
<g>
<title>recv (33 samples, 2.59%)</title><rect x="624.1" y="147.0" width="30.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="627.1" y="158.0">recv</text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1 samples, 0.08%)</title><rect x="654.6" y="163.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="657.6" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (50 samples, 3.92%)</title><rect x="655.6" y="179.0" width="46.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.6" y="190.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (44 samples, 3.45%)</title><rect x="657.4" y="163.0" width="40.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.4" y="174.0">one..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="667.6" y="147.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="670.6" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (32 samples, 2.51%)</title><rect x="668.5" y="147.0" width="29.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="671.5" y="158.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (27 samples, 2.12%)</title><rect x="673.2" y="131.0" width="25.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="676.2" y="142.0">o..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="697.3" y="115.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="700.3" y="126.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="697.3" y="99.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="700.3" y="110.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="697.3" y="83.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="700.3" y="94.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="697.3" y="67.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="700.3" y="78.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.08%)</title><rect x="697.3" y="51.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="700.3" y="62.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.31%)</title><rect x="698.2" y="163.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="701.2" y="174.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.16%)</title><rect x="700.0" y="147.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="703.0" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.16%)</title><rect x="700.0" y="131.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="703.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (16 samples, 1.26%)</title><rect x="701.9" y="179.0" width="14.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="704.9" y="190.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.78%)</title><rect x="707.4" y="163.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="710.4" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (10 samples, 0.78%)</title><rect x="707.4" y="147.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.4" y="158.0"></text>
</g>
<g>
<title>java/lang/String.charAt (10 samples, 0.78%)</title><rect x="707.4" y="131.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="710.4" y="142.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="715.8" y="115.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="718.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.24%)</title><rect x="716.7" y="179.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.7" y="190.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.08%)</title><rect x="718.6" y="163.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="721.6" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.08%)</title><rect x="718.6" y="147.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.6" y="158.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (32 samples, 2.51%)</title><rect x="719.5" y="179.0" width="29.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.5" y="190.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (3 samples, 0.24%)</title><rect x="723.2" y="163.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="726.2" y="174.0"></text>
</g>
<g>
<title>setsockopt (25 samples, 1.96%)</title><rect x="726.0" y="163.0" width="23.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="729.0" y="174.0">s..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (27 samples, 2.12%)</title><rect x="749.1" y="179.0" width="25.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.1" y="190.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (9 samples, 0.71%)</title><rect x="750.0" y="163.0" width="8.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="753.0" y="174.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.16%)</title><rect x="752.8" y="147.0" width="1.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="755.8" y="158.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.16%)</title><rect x="754.7" y="147.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="757.7" y="158.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.08%)</title><rect x="756.5" y="147.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="759.5" y="158.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.08%)</title><rect x="757.5" y="147.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="760.5" y="158.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="758.4" y="163.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="761.4" y="174.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.16%)</title><rect x="759.3" y="163.0" width="1.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="762.3" y="174.0"></text>
</g>
<g>
<title>__send (13 samples, 1.02%)</title><rect x="761.2" y="163.0" width="12.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="764.2" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.08%)</title><rect x="773.2" y="163.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="776.2" y="174.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (4 samples, 0.31%)</title><rect x="774.1" y="179.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="777.1" y="190.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.08%)</title><rect x="775.1" y="163.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="778.1" y="174.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.08%)</title><rect x="775.1" y="147.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.1" y="158.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.08%)</title><rect x="775.1" y="131.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="778.1" y="142.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.08%)</title><rect x="775.1" y="115.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="778.1" y="126.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.08%)</title><rect x="776.0" y="163.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="779.0" y="174.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.08%)</title><rect x="776.0" y="147.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="779.0" y="158.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.08%)</title><rect x="776.0" y="131.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="779.0" y="142.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.08%)</title><rect x="776.0" y="115.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="779.0" y="126.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.08%)</title><rect x="776.9" y="163.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="779.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (1 samples, 0.08%)</title><rect x="777.8" y="227.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="780.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (18 samples, 1.41%)</title><rect x="778.8" y="243.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="781.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (17 samples, 1.33%)</title><rect x="778.8" y="227.0" width="15.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="781.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.24%)</title><rect x="778.8" y="211.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.8" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.24%)</title><rect x="778.8" y="195.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.8" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.24%)</title><rect x="778.8" y="179.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="781.8" y="190.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="779.7" y="163.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="782.7" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="780.6" y="163.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.6" y="174.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="780.6" y="147.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="783.6" y="158.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="780.6" y="131.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="783.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 1.10%)</title><rect x="781.5" y="211.0" width="13.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="784.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.24%)</title><rect x="781.5" y="195.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="784.5" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.16%)</title><rect x="782.5" y="179.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.5" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.16%)</title><rect x="782.5" y="163.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="785.5" y="174.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.16%)</title><rect x="782.5" y="147.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.5" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.86%)</title><rect x="784.3" y="195.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.3" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.86%)</title><rect x="784.3" y="179.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.3" y="190.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.08%)</title><rect x="784.3" y="163.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.3" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 0.78%)</title><rect x="785.2" y="163.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.2" y="174.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (10 samples, 0.78%)</title><rect x="785.2" y="147.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.2" y="158.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.24%)</title><rect x="787.1" y="131.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="790.1" y="142.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.16%)</title><rect x="787.1" y="115.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="790.1" y="126.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.08%)</title><rect x="788.9" y="115.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="791.9" y="126.0"></text>
</g>
<g>
<title>__send (4 samples, 0.31%)</title><rect x="789.9" y="131.0" width="3.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="792.9" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.08%)</title><rect x="793.6" y="131.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="796.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.mergePutDeleteResponses (1 samples, 0.08%)</title><rect x="794.5" y="227.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.mergePutDeleteResponses (1 samples, 0.08%)</title><rect x="795.4" y="243.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.08%)</title><rect x="795.4" y="227.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="798.4" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="795.4" y="211.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="798.4" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="795.4" y="195.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.4" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="795.4" y="179.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="798.4" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="795.4" y="163.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="798.4" y="174.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="795.4" y="147.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="798.4" y="158.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (357 samples, 28.02%)</title><rect x="796.4" y="371.0" width="330.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="799.4" y="382.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="820.4" y="355.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="823.4" y="366.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="820.4" y="339.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="823.4" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="820.4" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="823.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5 samples, 0.39%)</title><rect x="821.4" y="355.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="824.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (10 samples, 0.78%)</title><rect x="826.0" y="355.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="829.0" y="366.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (9 samples, 0.71%)</title><rect x="826.9" y="339.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="829.9" y="350.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (9 samples, 0.71%)</title><rect x="826.9" y="323.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="829.9" y="334.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (104 samples, 8.16%)</title><rect x="835.3" y="355.0" width="96.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="838.3" y="366.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (99 samples, 7.77%)</title><rect x="839.9" y="339.0" width="91.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="842.9" y="350.0">one/nio/net..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (9 samples, 0.71%)</title><rect x="851.9" y="323.0" width="8.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="854.9" y="334.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (5 samples, 0.39%)</title><rect x="860.3" y="323.0" width="4.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="863.3" y="334.0"></text>
</g>
<g>
<title>clock_gettime (30 samples, 2.35%)</title><rect x="864.9" y="323.0" width="27.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="867.9" y="334.0">c..</text>
</g>
<g>
<title>clock_gettime (4 samples, 0.31%)</title><rect x="889.0" y="307.0" width="3.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="892.0" y="318.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.31%)</title><rect x="889.0" y="291.0" width="3.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="892.0" y="302.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.08%)</title><rect x="892.7" y="323.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="895.7" y="334.0"></text>
</g>
<g>
<title>epoll_wait (40 samples, 3.14%)</title><rect x="893.6" y="323.0" width="37.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="896.6" y="334.0">epo..</text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.08%)</title><rect x="930.7" y="323.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="933.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (209 samples, 16.41%)</title><rect x="931.6" y="355.0" width="193.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="934.6" y="366.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.08%)</title><rect x="937.1" y="339.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="940.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (201 samples, 15.78%)</title><rect x="938.1" y="339.0" width="186.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="941.1" y="350.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (136 samples, 10.68%)</title><rect x="938.1" y="323.0" width="125.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="941.1" y="334.0">one/nio/http/Ht..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="939.0" y="307.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="942.0" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (88 samples, 6.91%)</title><rect x="940.8" y="307.0" width="81.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="943.8" y="318.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (83 samples, 6.51%)</title><rect x="945.5" y="291.0" width="76.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="948.5" y="302.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler3_handleRequest.handleRequest (67 samples, 5.26%)</title><rect x="945.5" y="275.0" width="62.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="948.5" y="286.0">Reques..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.24%)</title><rect x="945.5" y="259.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="948.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="947.3" y="243.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="950.3" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.08%)</title><rect x="947.3" y="227.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (12 samples, 0.94%)</title><rect x="948.3" y="259.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="951.3" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.94%)</title><rect x="948.3" y="243.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="951.3" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.16%)</title><rect x="950.1" y="227.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="953.1" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.16%)</title><rect x="950.1" y="211.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="953.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.24%)</title><rect x="952.0" y="227.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="955.0" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.24%)</title><rect x="952.0" y="211.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="955.0" y="222.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.16%)</title><rect x="952.9" y="195.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="955.9" y="206.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.39%)</title><rect x="954.7" y="227.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="957.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.handleRequest (52 samples, 4.08%)</title><rect x="959.4" y="259.0" width="48.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="962.4" y="270.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.handleRequest (52 samples, 4.08%)</title><rect x="959.4" y="243.0" width="48.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="962.4" y="254.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/926150093.linkToTargetMethod (2 samples, 0.16%)</title><rect x="959.4" y="227.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="962.4" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.16%)</title><rect x="959.4" y="211.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="962.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$67/856457076.get$Lambda (2 samples, 0.16%)</title><rect x="959.4" y="195.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="962.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.08%)</title><rect x="960.3" y="179.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="963.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.executeTask (50 samples, 3.92%)</title><rect x="961.2" y="227.0" width="46.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="964.2" y="238.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (50 samples, 3.92%)</title><rect x="961.2" y="211.0" width="46.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="964.2" y="222.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (49 samples, 3.85%)</title><rect x="962.2" y="195.0" width="45.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="965.2" y="206.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (7 samples, 0.55%)</title><rect x="963.1" y="179.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="966.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.55%)</title><rect x="963.1" y="163.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="966.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.55%)</title><rect x="963.1" y="147.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="966.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.55%)</title><rect x="963.1" y="131.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="966.1" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (7 samples, 0.55%)</title><rect x="963.1" y="115.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="966.1" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.71%)</title><rect x="969.6" y="179.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="972.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.71%)</title><rect x="969.6" y="163.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="972.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.47%)</title><rect x="969.6" y="147.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="972.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.47%)</title><rect x="969.6" y="131.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="972.6" y="142.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="969.6" y="115.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="972.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.39%)</title><rect x="970.5" y="115.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="973.5" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.39%)</title><rect x="970.5" y="99.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="973.5" y="110.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.08%)</title><rect x="970.5" y="83.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="973.5" y="94.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.16%)</title><rect x="971.4" y="83.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="974.4" y="94.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="971.4" y="67.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.4" y="78.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="972.3" y="67.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="975.3" y="78.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.16%)</title><rect x="973.3" y="83.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="976.3" y="94.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.16%)</title><rect x="973.3" y="67.0" width="1.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="976.3" y="78.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.24%)</title><rect x="975.1" y="147.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="978.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (32 samples, 2.51%)</title><rect x="977.9" y="179.0" width="29.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="980.9" y="190.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32 samples, 2.51%)</title><rect x="977.9" y="163.0" width="29.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="980.9" y="174.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (32 samples, 2.51%)</title><rect x="977.9" y="147.0" width="29.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="980.9" y="158.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (32 samples, 2.51%)</title><rect x="977.9" y="131.0" width="29.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="980.9" y="142.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (29 samples, 2.28%)</title><rect x="980.7" y="115.0" width="26.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="983.7" y="126.0">j..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="980.7" y="99.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="983.7" y="110.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="981.6" y="99.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.6" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.08%)</title><rect x="982.5" y="99.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.5" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.08%)</title><rect x="983.5" y="99.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.5" y="110.0"></text>
</g>
<g>
<title>Unsafe_Unpark (15 samples, 1.18%)</title><rect x="984.4" y="99.0" width="13.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="987.4" y="110.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.08%)</title><rect x="984.4" y="83.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="987.4" y="94.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="985.3" y="83.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.3" y="94.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="986.2" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.2" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.16%)</title><rect x="987.2" y="83.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.2" y="94.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.16%)</title><rect x="989.0" y="83.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.0" y="94.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.16%)</title><rect x="990.9" y="83.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="993.9" y="94.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.39%)</title><rect x="992.7" y="83.0" width="4.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="995.7" y="94.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.08%)</title><rect x="997.3" y="83.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1000.3" y="94.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.47%)</title><rect x="998.3" y="99.0" width="5.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1001.3" y="110.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.31%)</title><rect x="1003.8" y="99.0" width="3.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1006.8" y="110.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.55%)</title><rect x="1007.5" y="275.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1010.5" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.55%)</title><rect x="1007.5" y="259.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1010.5" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="1007.5" y="243.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1010.5" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.31%)</title><rect x="1010.3" y="243.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1013.3" y="254.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.31%)</title><rect x="1010.3" y="227.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1013.3" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.31%)</title><rect x="1010.3" y="211.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1013.3" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (9 samples, 0.71%)</title><rect x="1014.0" y="275.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1017.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.71%)</title><rect x="1014.0" y="259.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1017.0" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.71%)</title><rect x="1014.0" y="243.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1017.0" y="254.0"></text>
</g>
<g>
<title>RequestHandler3_handleRequest.handleRequest (3 samples, 0.24%)</title><rect x="1014.9" y="227.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1017.9" y="238.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.39%)</title><rect x="1017.7" y="227.0" width="4.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1020.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (15 samples, 1.18%)</title><rect x="1022.4" y="307.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1025.4" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="1022.4" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1025.4" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="1022.4" y="275.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1025.4" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="1022.4" y="259.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.4" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="1022.4" y="243.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1025.4" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="1022.4" y="227.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.4" y="238.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="1022.4" y="211.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.4" y="222.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.08%)</title><rect x="1022.4" y="195.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1025.4" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1023.3" y="291.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1026.3" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="1023.3" y="275.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1026.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="1023.3" y="259.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1026.3" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.08%)</title><rect x="1023.3" y="243.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1026.3" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.08%)</title><rect x="1023.3" y="227.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1026.3" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.78%)</title><rect x="1024.2" y="291.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1027.2" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.71%)</title><rect x="1025.1" y="275.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1028.1" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="1031.6" y="259.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1034.6" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="1031.6" y="243.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1034.6" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="1031.6" y="227.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.6" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="1031.6" y="211.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1034.6" y="222.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="1031.6" y="195.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.6" y="206.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.08%)</title><rect x="1031.6" y="179.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.6" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1032.5" y="259.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1035.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1032.5" y="243.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1035.5" y="254.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.08%)</title><rect x="1032.5" y="227.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1035.5" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="1032.5" y="211.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.5" y="222.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="1032.5" y="195.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1035.5" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="1032.5" y="179.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1035.5" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="1032.5" y="163.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.5" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="1032.5" y="147.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.5" y="158.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="1032.5" y="131.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.5" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.24%)</title><rect x="1033.5" y="291.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1036.5" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.31%)</title><rect x="1036.2" y="307.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1039.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.31%)</title><rect x="1036.2" y="291.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.2" y="302.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.16%)</title><rect x="1036.2" y="275.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1039.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.16%)</title><rect x="1036.2" y="259.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.2" y="270.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="1038.1" y="275.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1041.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.55%)</title><rect x="1040.0" y="307.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1043.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.24%)</title><rect x="1041.8" y="291.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1044.8" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.24%)</title><rect x="1041.8" y="275.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1044.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.16%)</title><rect x="1044.6" y="291.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1047.6" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.16%)</title><rect x="1044.6" y="275.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1047.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2 samples, 0.16%)</title><rect x="1044.6" y="259.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1047.6" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 1.49%)</title><rect x="1046.4" y="307.0" width="17.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1049.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.78%)</title><rect x="1054.8" y="291.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1057.8" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="1062.2" y="275.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.2" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="1062.2" y="259.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.2" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="1062.2" y="243.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.2" y="254.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.08%)</title><rect x="1063.1" y="275.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.1" y="286.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.16%)</title><rect x="1064.0" y="323.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1067.0" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (63 samples, 4.95%)</title><rect x="1065.9" y="323.0" width="58.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1068.9" y="334.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (56 samples, 4.40%)</title><rect x="1072.4" y="307.0" width="51.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1075.4" y="318.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (28 samples, 2.20%)</title><rect x="1073.3" y="291.0" width="25.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1076.3" y="302.0">J..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.39%)</title><rect x="1074.2" y="275.0" width="4.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1077.2" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.16%)</title><rect x="1078.9" y="275.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.9" y="286.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.08%)</title><rect x="1080.7" y="275.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1083.7" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (16 samples, 1.26%)</title><rect x="1081.6" y="275.0" width="14.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1084.6" y="286.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.16%)</title><rect x="1086.3" y="259.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.3" y="270.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="1088.1" y="259.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1091.1" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.24%)</title><rect x="1089.0" y="259.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.0" y="270.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.39%)</title><rect x="1091.8" y="259.0" width="4.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1094.8" y="270.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.24%)</title><rect x="1093.7" y="243.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.7" y="254.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.24%)</title><rect x="1096.5" y="275.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.5" y="286.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.16%)</title><rect x="1099.2" y="291.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1102.2" y="302.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.16%)</title><rect x="1101.1" y="291.0" width="1.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1104.1" y="302.0"></text>
</g>
<g>
<title>recv (23 samples, 1.81%)</title><rect x="1102.9" y="291.0" width="21.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1105.9" y="302.0">r..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="1124.2" y="339.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.2" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.16%)</title><rect x="1125.2" y="355.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.2" y="366.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="1126.1" y="339.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1129.1" y="350.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="1126.1" y="323.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1129.1" y="334.0"></text>
</g>
<g>
<title>start_thread (68 samples, 5.34%)</title><rect x="1127.0" y="371.0" width="63.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1130.0" y="382.0">start_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (68 samples, 5.34%)</title><rect x="1127.0" y="355.0" width="63.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1130.0" y="366.0">thread..</text>
</g>
<g>
<title>Thread::call_run() (68 samples, 5.34%)</title><rect x="1127.0" y="339.0" width="63.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.0" y="350.0">Thread..</text>
</g>
<g>
<title>GangWorker::loop() (66 samples, 5.18%)</title><rect x="1127.0" y="323.0" width="61.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.0" y="334.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (66 samples, 5.18%)</title><rect x="1127.0" y="307.0" width="61.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.0" y="318.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (20 samples, 1.57%)</title><rect x="1127.0" y="291.0" width="18.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.0" y="302.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (19 samples, 1.49%)</title><rect x="1127.9" y="275.0" width="17.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.9" y="286.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (16 samples, 1.26%)</title><rect x="1130.7" y="259.0" width="14.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.7" y="270.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (1 samples, 0.08%)</title><rect x="1140.9" y="243.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.9" y="254.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 0.24%)</title><rect x="1141.8" y="243.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.8" y="254.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.08%)</title><rect x="1144.6" y="243.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.6" y="254.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (40 samples, 3.14%)</title><rect x="1145.5" y="291.0" width="37.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.5" y="302.0">G1R..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (40 samples, 3.14%)</title><rect x="1145.5" y="275.0" width="37.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.5" y="286.0">G1R..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (40 samples, 3.14%)</title><rect x="1145.5" y="259.0" width="37.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.5" y="270.0">G1C..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (40 samples, 3.14%)</title><rect x="1145.5" y="243.0" width="37.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.5" y="254.0">Dir..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (40 samples, 3.14%)</title><rect x="1145.5" y="227.0" width="37.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.5" y="238.0">G1R..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (38 samples, 2.98%)</title><rect x="1145.5" y="211.0" width="35.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.5" y="222.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (32 samples, 2.51%)</title><rect x="1151.1" y="195.0" width="29.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.1" y="206.0">G1..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (10 samples, 0.78%)</title><rect x="1171.5" y="179.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.5" y="190.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (2 samples, 0.16%)</title><rect x="1180.7" y="211.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="222.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.16%)</title><rect x="1180.7" y="195.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="206.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.16%)</title><rect x="1180.7" y="179.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="190.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1181.7" y="163.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="174.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.47%)</title><rect x="1182.6" y="291.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="302.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (6 samples, 0.47%)</title><rect x="1182.6" y="275.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="286.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (6 samples, 0.47%)</title><rect x="1182.6" y="259.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="270.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (5 samples, 0.39%)</title><rect x="1183.5" y="243.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="254.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (5 samples, 0.39%)</title><rect x="1183.5" y="227.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.5" y="238.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.16%)</title><rect x="1186.3" y="211.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="222.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.08%)</title><rect x="1187.2" y="195.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.2" y="206.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="323.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="334.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.16%)</title><rect x="1188.1" y="307.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.1" y="318.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.16%)</title><rect x="1188.1" y="291.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="302.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.16%)</title><rect x="1188.1" y="275.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.1" y="286.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 0.16%)</title><rect x="1188.1" y="259.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.1" y="270.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.08%)</title><rect x="1188.1" y="243.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.1" y="254.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.08%)</title><rect x="1188.1" y="227.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="238.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.08%)</title><rect x="1188.1" y="211.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.1" y="222.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.08%)</title><rect x="1188.1" y="195.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="206.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.08%)</title><rect x="1189.1" y="243.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.08%)</title><rect x="1189.1" y="227.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.1" y="238.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.08%)</title><rect x="1189.1" y="211.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.1" y="222.0"></text>
</g>
</g>
</svg>
