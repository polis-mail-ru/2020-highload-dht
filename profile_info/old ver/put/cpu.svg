<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (214 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (123 samples, 57.48%)</title><rect x="10.0" y="915.0" width="678.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (123 samples, 57.48%)</title><rect x="10.0" y="899.0" width="678.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (123 samples, 57.48%)</title><rect x="10.0" y="883.0" width="678.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 2.34%)</title><rect x="15.5" y="867.0" width="27.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.5" y="878.0">j..</text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 1.87%)</title><rect x="21.0" y="851.0" width="22.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.0" y="862.0">j..</text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 1.40%)</title><rect x="21.0" y="835.0" width="16.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="24.0" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (1 samples, 0.47%)</title><rect x="21.0" y="819.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="24.0" y="830.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.47%)</title><rect x="26.5" y="819.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="29.5" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.47%)</title><rect x="32.1" y="819.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="35.1" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (1 samples, 0.47%)</title><rect x="37.6" y="835.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="40.6" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.47%)</title><rect x="43.1" y="867.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.47%)</title><rect x="43.1" y="851.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.47%)</title><rect x="48.6" y="867.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.47%)</title><rect x="48.6" y="851.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.47%)</title><rect x="48.6" y="835.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.47%)</title><rect x="54.1" y="867.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (58 samples, 27.10%)</title><rect x="59.6" y="867.0" width="319.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="62.6" y="878.0">java/util/concurrent/ThreadPoolExecutor.get..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (58 samples, 27.10%)</title><rect x="59.6" y="851.0" width="319.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.6" y="862.0">java/util/concurrent/ArrayBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (52 samples, 24.30%)</title><rect x="59.6" y="835.0" width="286.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.6" y="846.0">java/util/concurrent/locks/AbstractQue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.47%)</title><rect x="70.7" y="819.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="73.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.93%)</title><rect x="76.2" y="819.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.93%)</title><rect x="76.2" y="803.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.93%)</title><rect x="76.2" y="787.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.93%)</title><rect x="76.2" y="771.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.47%)</title><rect x="81.7" y="755.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.7" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.47%)</title><rect x="81.7" y="739.0" width="5.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="84.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (47 samples, 21.96%)</title><rect x="87.2" y="819.0" width="259.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.2" y="830.0">java/util/concurrent/locks/LockSupp..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (47 samples, 21.96%)</title><rect x="87.2" y="803.0" width="259.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.2" y="814.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.47%)</title><rect x="98.2" y="787.0" width="5.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="101.2" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park (34 samples, 15.89%)</title><rect x="103.7" y="787.0" width="187.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="106.7" y="798.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.93%)</title><rect x="103.7" y="771.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="106.7" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.47%)</title><rect x="114.8" y="771.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="117.8" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 4.67%)</title><rect x="120.3" y="771.0" width="55.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="123.3" y="782.0">Parke..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.47%)</title><rect x="142.3" y="755.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="145.3" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.47%)</title><rect x="147.9" y="755.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="150.9" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.47%)</title><rect x="153.4" y="755.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="156.4" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 1.40%)</title><rect x="158.9" y="755.0" width="16.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="161.9" y="766.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.47%)</title><rect x="175.4" y="771.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="178.4" y="782.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.47%)</title><rect x="180.9" y="771.0" width="5.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="183.9" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (17 samples, 7.94%)</title><rect x="186.4" y="771.0" width="93.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="189.4" y="782.0">__pthread_m..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.47%)</title><rect x="280.2" y="771.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="283.2" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.47%)</title><rect x="285.7" y="771.0" width="5.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="288.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 4.21%)</title><rect x="291.2" y="787.0" width="49.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="294.2" y="798.0">[unkn..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.47%)</title><rect x="291.2" y="771.0" width="5.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="294.2" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_wait (6 samples, 2.80%)</title><rect x="296.7" y="771.0" width="33.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="299.7" y="782.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.93%)</title><rect x="329.8" y="771.0" width="11.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="332.8" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.47%)</title><rect x="340.8" y="787.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="343.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.47%)</title><rect x="346.4" y="835.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="349.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.47%)</title><rect x="346.4" y="819.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="349.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.34%)</title><rect x="351.9" y="835.0" width="27.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="354.9" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.34%)</title><rect x="351.9" y="819.0" width="27.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.9" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.34%)</title><rect x="351.9" y="803.0" width="27.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.9" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.34%)</title><rect x="351.9" y="787.0" width="27.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.9" y="798.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 2.34%)</title><rect x="351.9" y="771.0" width="27.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.9" y="782.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 1.40%)</title><rect x="351.9" y="755.0" width="16.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="354.9" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.47%)</title><rect x="357.4" y="739.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="360.4" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.47%)</title><rect x="362.9" y="739.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="365.9" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.93%)</title><rect x="368.4" y="755.0" width="11.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="371.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.47%)</title><rect x="379.4" y="867.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.4" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService$$Lambda$65/1715664392.run (55 samples, 25.70%)</title><rect x="385.0" y="867.0" width="303.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.0" y="878.0">ru/mail/polis/service/re1nex/AsyncService..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService.lambda$put$2 (55 samples, 25.70%)</title><rect x="385.0" y="851.0" width="303.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.0" y="862.0">ru/mail/polis/service/re1nex/AsyncService..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (41 samples, 19.16%)</title><rect x="385.0" y="835.0" width="226.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.0" y="846.0">ru/mail/polis/dao/re1nex/NewDA..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.47%)</title><rect x="385.0" y="819.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.47%)</title><rect x="385.0" y="803.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.47%)</title><rect x="385.0" y="787.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="388.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.47%)</title><rect x="385.0" y="771.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="388.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (40 samples, 18.69%)</title><rect x="390.5" y="819.0" width="220.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.5" y="830.0">ru/mail/polis/dao/re1nex/MemT..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (23 samples, 10.75%)</title><rect x="390.5" y="803.0" width="126.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.5" y="814.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (21 samples, 9.81%)</title><rect x="401.5" y="787.0" width="115.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.5" y="798.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (21 samples, 9.81%)</title><rect x="401.5" y="771.0" width="115.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="404.5" y="782.0">java/util/conc..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 6.54%)</title><rect x="440.1" y="755.0" width="77.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="443.1" y="766.0">java/nio/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 6.54%)</title><rect x="440.1" y="739.0" width="77.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="443.1" y="750.0">java/nio/..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 6.54%)</title><rect x="440.1" y="723.0" width="77.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.1" y="734.0">java/nio/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 1.87%)</title><rect x="495.2" y="707.0" width="22.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="498.2" y="718.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 1.87%)</title><rect x="495.2" y="691.0" width="22.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="498.2" y="702.0">j..</text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.47%)</title><rect x="511.8" y="675.0" width="5.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="514.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (17 samples, 7.94%)</title><rect x="517.3" y="803.0" width="93.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="520.3" y="814.0">java/util/c..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.93%)</title><rect x="517.3" y="787.0" width="11.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="520.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (15 samples, 7.01%)</title><rect x="528.3" y="787.0" width="82.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.3" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (14 samples, 6.54%)</title><rect x="533.8" y="771.0" width="77.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.8" y="782.0">java/util..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 6.54%)</title><rect x="533.8" y="755.0" width="77.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="536.8" y="766.0">java/nio/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 6.54%)</title><rect x="533.8" y="739.0" width="77.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="536.8" y="750.0">java/nio/..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 6.54%)</title><rect x="533.8" y="723.0" width="77.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="536.8" y="734.0">java/nio/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 1.87%)</title><rect x="589.0" y="707.0" width="22.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="592.0" y="718.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 1.87%)</title><rect x="589.0" y="691.0" width="22.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="592.0" y="702.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService.sendResponse (14 samples, 6.54%)</title><rect x="611.0" y="835.0" width="77.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="614.0" y="846.0">ru/mail/p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (14 samples, 6.54%)</title><rect x="611.0" y="819.0" width="77.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="614.0" y="830.0">one/nio/h..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.93%)</title><rect x="616.5" y="803.0" width="11.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="619.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (11 samples, 5.14%)</title><rect x="627.6" y="803.0" width="60.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="630.6" y="814.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.47%)</title><rect x="627.6" y="787.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="630.6" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 4.67%)</title><rect x="633.1" y="787.0" width="55.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.1" y="798.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 4.67%)</title><rect x="633.1" y="771.0" width="55.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="636.1" y="782.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 4.67%)</title><rect x="633.1" y="755.0" width="55.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="636.1" y="766.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (10 samples, 4.67%)</title><rect x="633.1" y="739.0" width="55.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.1" y="750.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.93%)</title><rect x="644.1" y="723.0" width="11.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="647.1" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.47%)</title><rect x="649.6" y="707.0" width="5.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="652.6" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.47%)</title><rect x="649.6" y="691.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="652.6" y="702.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.47%)</title><rect x="655.1" y="723.0" width="5.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="658.1" y="734.0"></text>
</g>
<g>
<title>__send (5 samples, 2.34%)</title><rect x="660.7" y="723.0" width="27.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="663.7" y="734.0">_..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (75 samples, 35.05%)</title><rect x="688.2" y="915.0" width="413.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="691.2" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (34 samples, 15.89%)</title><rect x="710.3" y="899.0" width="187.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="713.3" y="910.0">one/nio/net/NativeSelect..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (33 samples, 15.42%)</title><rect x="715.8" y="883.0" width="182.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.8" y="894.0">one/nio/net/NativeSelec..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.93%)</title><rect x="721.3" y="867.0" width="11.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="724.3" y="878.0"></text>
</g>
<g>
<title>clock_gettime (16 samples, 7.48%)</title><rect x="732.3" y="867.0" width="88.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="735.3" y="878.0">clock_gett..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="815.0" y="851.0" width="5.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="818.0" y="862.0"></text>
</g>
<g>
<title>epoll_wait (14 samples, 6.54%)</title><rect x="820.6" y="867.0" width="77.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="823.6" y="878.0">epoll_wait</text>
</g>
<g>
<title>one/nio/net/Session.process (37 samples, 17.29%)</title><rect x="897.8" y="899.0" width="204.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="900.8" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (36 samples, 16.82%)</title><rect x="903.3" y="883.0" width="198.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="906.3" y="894.0">one/nio/http/HttpSession.p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (22 samples, 10.28%)</title><rect x="903.3" y="867.0" width="121.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="906.3" y="878.0">one/nio/http/Ht..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 1.40%)</title><rect x="919.8" y="851.0" width="16.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="922.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9 samples, 4.21%)</title><rect x="936.4" y="851.0" width="49.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="939.4" y="862.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9 samples, 4.21%)</title><rect x="936.4" y="835.0" width="49.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="939.4" y="846.0">one/n..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (9 samples, 4.21%)</title><rect x="936.4" y="819.0" width="49.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="939.4" y="830.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.47%)</title><rect x="936.4" y="803.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="939.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.47%)</title><rect x="936.4" y="787.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="939.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService.put (8 samples, 3.74%)</title><rect x="941.9" y="803.0" width="44.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="944.9" y="814.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService.executeTask (8 samples, 3.74%)</title><rect x="941.9" y="787.0" width="44.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="944.9" y="798.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (8 samples, 3.74%)</title><rect x="941.9" y="771.0" width="44.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="944.9" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (7 samples, 3.27%)</title><rect x="947.4" y="755.0" width="38.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.4" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.47%)</title><rect x="947.4" y="739.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="950.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.47%)</title><rect x="947.4" y="723.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="950.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.47%)</title><rect x="947.4" y="707.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="950.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.47%)</title><rect x="947.4" y="691.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="950.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.47%)</title><rect x="947.4" y="675.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="950.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.47%)</title><rect x="952.9" y="739.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="955.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.47%)</title><rect x="952.9" y="723.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.47%)</title><rect x="952.9" y="707.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.47%)</title><rect x="952.9" y="691.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="955.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.47%)</title><rect x="952.9" y="675.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.9" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.47%)</title><rect x="952.9" y="659.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="955.9" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.47%)</title><rect x="952.9" y="643.0" width="5.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="955.9" y="654.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.47%)</title><rect x="952.9" y="627.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="955.9" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.47%)</title><rect x="952.9" y="611.0" width="5.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="955.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.34%)</title><rect x="958.4" y="739.0" width="27.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.4" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.34%)</title><rect x="958.4" y="723.0" width="27.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="961.4" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.34%)</title><rect x="958.4" y="707.0" width="27.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="961.4" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.34%)</title><rect x="958.4" y="691.0" width="27.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="961.4" y="702.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 2.34%)</title><rect x="958.4" y="675.0" width="27.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.4" y="686.0">j..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.47%)</title><rect x="958.4" y="659.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.4" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 1.40%)</title><rect x="963.9" y="659.0" width="16.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="966.9" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.93%)</title><rect x="963.9" y="643.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="966.9" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.47%)</title><rect x="975.0" y="643.0" width="5.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="978.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.47%)</title><rect x="980.5" y="659.0" width="5.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="983.5" y="670.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.47%)</title><rect x="980.5" y="643.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="983.5" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 1.87%)</title><rect x="986.0" y="851.0" width="22.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="989.0" y="862.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.47%)</title><rect x="1002.5" y="835.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1005.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.47%)</title><rect x="1002.5" y="819.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1005.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.47%)</title><rect x="1002.5" y="803.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1005.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.47%)</title><rect x="1002.5" y="787.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1005.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 1.40%)</title><rect x="1008.0" y="851.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1011.0" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.93%)</title><rect x="1013.6" y="835.0" width="11.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1016.6" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.93%)</title><rect x="1013.6" y="819.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1016.6" y="830.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.47%)</title><rect x="1024.6" y="867.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1027.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (13 samples, 6.07%)</title><rect x="1030.1" y="867.0" width="71.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1033.1" y="878.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (13 samples, 6.07%)</title><rect x="1030.1" y="851.0" width="71.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1033.1" y="862.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (6 samples, 2.80%)</title><rect x="1041.1" y="835.0" width="33.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1044.1" y="846.0">Ja..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.93%)</title><rect x="1041.1" y="819.0" width="11.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1044.1" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 1.87%)</title><rect x="1052.1" y="819.0" width="22.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1055.1" y="830.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.93%)</title><rect x="1052.1" y="803.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.1" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.93%)</title><rect x="1063.2" y="803.0" width="11.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1066.2" y="814.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.47%)</title><rect x="1074.2" y="835.0" width="5.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1077.2" y="846.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.47%)</title><rect x="1079.7" y="835.0" width="5.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1082.7" y="846.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.47%)</title><rect x="1085.2" y="835.0" width="5.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1088.2" y="846.0"></text>
</g>
<g>
<title>recv (2 samples, 0.93%)</title><rect x="1090.7" y="835.0" width="11.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1093.7" y="846.0"></text>
</g>
<g>
<title>start_thread (16 samples, 7.48%)</title><rect x="1101.8" y="915.0" width="88.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1104.8" y="926.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (16 samples, 7.48%)</title><rect x="1101.8" y="899.0" width="88.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1104.8" y="910.0">thread_nat..</text>
</g>
<g>
<title>Thread::call_run() (16 samples, 7.48%)</title><rect x="1101.8" y="883.0" width="88.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.8" y="894.0">Thread::ca..</text>
</g>
<g>
<title>JavaThread::run() (16 samples, 7.48%)</title><rect x="1101.8" y="867.0" width="88.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1104.8" y="878.0">JavaThread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (16 samples, 7.48%)</title><rect x="1101.8" y="851.0" width="88.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.8" y="862.0">CompileBro..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (16 samples, 7.48%)</title><rect x="1101.8" y="835.0" width="88.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.8" y="846.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (15 samples, 7.01%)</title><rect x="1101.8" y="819.0" width="82.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.8" y="830.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (15 samples, 7.01%)</title><rect x="1101.8" y="803.0" width="82.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.8" y="814.0">Compile::..</text>
</g>
<g>
<title>Compile::Code_Gen() (8 samples, 3.74%)</title><rect x="1101.8" y="787.0" width="44.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.8" y="798.0">Comp..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.47%)</title><rect x="1101.8" y="771.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.8" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.47%)</title><rect x="1101.8" y="755.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.8" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.47%)</title><rect x="1101.8" y="739.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.8" y="750.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.47%)</title><rect x="1101.8" y="723.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.8" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="1101.8" y="707.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (7 samples, 3.27%)</title><rect x="1107.3" y="771.0" width="38.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.3" y="782.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.47%)</title><rect x="1107.3" y="755.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.47%)</title><rect x="1107.3" y="739.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.3" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="1107.3" y="723.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.47%)</title><rect x="1112.8" y="755.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.40%)</title><rect x="1118.3" y="755.0" width="16.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.93%)</title><rect x="1123.8" y="739.0" width="11.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.47%)</title><rect x="1129.3" y="723.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.47%)</title><rect x="1134.9" y="755.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.9" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.47%)</title><rect x="1134.9" y="739.0" width="5.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1137.9" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.47%)</title><rect x="1140.4" y="755.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.4" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.47%)</title><rect x="1140.4" y="739.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.4" y="750.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.47%)</title><rect x="1140.4" y="723.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.4" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.47%)</title><rect x="1140.4" y="707.0" width="5.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1143.4" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (4 samples, 1.87%)</title><rect x="1145.9" y="787.0" width="22.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.9" y="798.0">C..</text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.47%)</title><rect x="1145.9" y="771.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 1.40%)</title><rect x="1151.4" y="771.0" width="16.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.47%)</title><rect x="1151.4" y="755.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.93%)</title><rect x="1156.9" y="755.0" width="11.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.9" y="766.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.47%)</title><rect x="1162.4" y="739.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.4" y="750.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.47%)</title><rect x="1162.4" y="723.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.4" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.47%)</title><rect x="1162.4" y="707.0" width="5.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1165.4" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1167.9" y="787.0" width="11.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1167.9" y="771.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1167.9" y="755.0" width="11.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1167.9" y="739.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1167.9" y="723.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1167.9" y="707.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1167.9" y="691.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1167.9" y="675.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1167.9" y="659.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1167.9" y="643.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1167.9" y="627.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1167.9" y="611.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1167.9" y="595.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1167.9" y="579.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1167.9" y="563.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1167.9" y="547.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1167.9" y="531.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1167.9" y="515.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1167.9" y="499.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1167.9" y="483.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1167.9" y="467.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1167.9" y="451.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1167.9" y="435.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1167.9" y="419.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1167.9" y="403.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1167.9" y="387.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1167.9" y="371.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1167.9" y="355.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1167.9" y="339.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1167.9" y="323.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1167.9" y="307.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1167.9" y="291.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1167.9" y="275.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1167.9" y="259.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1167.9" y="243.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.9" y="254.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.47%)</title><rect x="1167.9" y="227.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.9" y="238.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.47%)</title><rect x="1167.9" y="211.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="222.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.47%)</title><rect x="1167.9" y="195.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.9" y="206.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.47%)</title><rect x="1167.9" y="179.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.9" y="190.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.47%)</title><rect x="1167.9" y="163.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="174.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.47%)</title><rect x="1167.9" y="147.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="158.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.47%)</title><rect x="1167.9" y="131.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="1167.9" y="115.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.9" y="126.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1167.9" y="99.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="110.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.47%)</title><rect x="1167.9" y="83.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.9" y="94.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.47%)</title><rect x="1167.9" y="67.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="78.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.47%)</title><rect x="1167.9" y="51.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.9" y="62.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.47%)</title><rect x="1167.9" y="35.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.9" y="46.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="1173.5" y="707.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.5" y="718.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.47%)</title><rect x="1179.0" y="787.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="798.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.47%)</title><rect x="1179.0" y="771.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="782.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.47%)</title><rect x="1184.5" y="819.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.47%)</title><rect x="1184.5" y="803.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.47%)</title><rect x="1184.5" y="787.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.47%)</title><rect x="1184.5" y="771.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="782.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.47%)</title><rect x="1184.5" y="755.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.5" y="766.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.47%)</title><rect x="1184.5" y="739.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.5" y="750.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.47%)</title><rect x="1184.5" y="723.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="734.0"></text>
</g>
<g>
<title>as_BasicType(LIR_OprDesc::OprType) (1 samples, 0.47%)</title><rect x="1184.5" y="707.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="718.0"></text>
</g>
</g>
</svg>
