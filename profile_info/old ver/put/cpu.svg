<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="693"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="693"> </text>
<g id="frames">
<g>
<title>all (853 samples, 100.00%)</title><rect x="10.0" y="659.0" width="1180.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.0" y="670.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.47%)</title><rect x="10.0" y="643.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (4 samples, 0.47%)</title><rect x="10.0" y="627.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (4 samples, 0.47%)</title><rect x="10.0" y="611.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.47%)</title><rect x="10.0" y="595.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (4 samples, 0.47%)</title><rect x="10.0" y="579.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.47%)</title><rect x="15.5" y="643.0" width="5.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="18.5" y="654.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.12%)</title><rect x="15.5" y="627.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.5" y="638.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.12%)</title><rect x="16.9" y="627.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.9" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="18.3" y="627.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.3" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.12%)</title><rect x="18.3" y="611.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="21.3" y="622.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.12%)</title><rect x="18.3" y="595.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="21.3" y="606.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.12%)</title><rect x="18.3" y="579.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.3" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.12%)</title><rect x="19.7" y="627.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="22.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.12%)</title><rect x="21.1" y="643.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="24.1" y="654.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.12%)</title><rect x="21.1" y="627.0" width="1.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="24.1" y="638.0"></text>
</g>
<g>
<title>[unknown_Java] (8 samples, 0.94%)</title><rect x="22.5" y="643.0" width="11.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="25.5" y="654.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.12%)</title><rect x="22.5" y="627.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="25.5" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="23.8" y="627.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="26.8" y="638.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.12%)</title><rect x="23.8" y="611.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="26.8" y="622.0"></text>
</g>
<g>
<title>sha256_implCompress (6 samples, 0.70%)</title><rect x="25.2" y="627.0" width="8.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="28.2" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (594 samples, 69.64%)</title><rect x="33.5" y="643.0" width="821.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.5" y="654.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (594 samples, 69.64%)</title><rect x="33.5" y="627.0" width="821.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.5" y="638.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (594 samples, 69.64%)</title><rect x="33.5" y="611.0" width="821.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.5" y="622.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.12%)</title><rect x="37.7" y="595.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.7" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.12%)</title><rect x="37.7" y="579.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.12%)</title><rect x="39.1" y="595.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.70%)</title><rect x="40.4" y="595.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.59%)</title><rect x="40.4" y="579.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="43.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.59%)</title><rect x="40.4" y="563.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.59%)</title><rect x="40.4" y="547.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$66/1557764195.run (1 samples, 0.12%)</title><rect x="46.0" y="531.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$66/1557764195.run (1 samples, 0.12%)</title><rect x="47.4" y="579.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (178 samples, 20.87%)</title><rect x="48.7" y="595.0" width="246.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="51.7" y="606.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (174 samples, 20.40%)</title><rect x="54.3" y="579.0" width="240.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="57.3" y="590.0">java/util/concurrent/ArrayBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (146 samples, 17.12%)</title><rect x="59.8" y="563.0" width="202.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.8" y="574.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.23%)</title><rect x="70.9" y="547.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.23%)</title><rect x="70.9" y="531.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="73.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.12%)</title><rect x="72.3" y="515.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.82%)</title><rect x="73.6" y="547.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="76.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.23%)</title><rect x="80.6" y="531.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="83.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.23%)</title><rect x="80.6" y="515.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.23%)</title><rect x="80.6" y="499.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.6" y="510.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.12%)</title><rect x="80.6" y="483.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="83.6" y="494.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.12%)</title><rect x="80.6" y="467.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="83.6" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.12%)</title><rect x="81.9" y="483.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="84.9" y="494.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.12%)</title><rect x="81.9" y="467.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="84.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.82%)</title><rect x="83.3" y="547.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="86.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.82%)</title><rect x="83.3" y="531.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.47%)</title><rect x="87.5" y="515.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.47%)</title><rect x="87.5" y="499.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.12%)</title><rect x="88.9" y="483.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.23%)</title><rect x="90.2" y="483.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.2" y="494.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.12%)</title><rect x="90.2" y="467.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="93.2" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.12%)</title><rect x="91.6" y="467.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="94.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (121 samples, 14.19%)</title><rect x="93.0" y="547.0" width="167.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.0" y="558.0">java/util/concurrent/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (120 samples, 14.07%)</title><rect x="94.4" y="531.0" width="166.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.4" y="542.0">jdk/internal/misc/Uns..</text>
</g>
<g>
<title>Unsafe_Park (82 samples, 9.61%)</title><rect x="98.5" y="515.0" width="113.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="101.5" y="526.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.12%)</title><rect x="105.5" y="499.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="108.5" y="510.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.35%)</title><rect x="106.8" y="499.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="109.8" y="510.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.23%)</title><rect x="111.0" y="499.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="114.0" y="510.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.12%)</title><rect x="113.8" y="499.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="116.8" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (30 samples, 3.52%)</title><rect x="115.1" y="499.0" width="41.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="118.1" y="510.0">Par..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (12 samples, 1.41%)</title><rect x="134.5" y="483.0" width="16.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="137.5" y="494.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.23%)</title><rect x="148.3" y="467.0" width="2.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="151.3" y="478.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.23%)</title><rect x="151.1" y="483.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="154.1" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.12%)</title><rect x="153.9" y="483.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="156.9" y="494.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.12%)</title><rect x="155.3" y="483.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="158.3" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.35%)</title><rect x="156.6" y="499.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="159.6" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.12%)</title><rect x="160.8" y="499.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="163.8" y="510.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.35%)</title><rect x="162.2" y="499.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="165.2" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (25 samples, 2.93%)</title><rect x="166.3" y="499.0" width="34.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="169.3" y="510.0">__..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="200.9" y="499.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="203.9" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.12%)</title><rect x="202.3" y="499.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="205.3" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.23%)</title><rect x="203.7" y="499.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="206.7" y="510.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.12%)</title><rect x="206.4" y="499.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="209.4" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (3 samples, 0.35%)</title><rect x="207.8" y="499.0" width="4.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="210.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 3.99%)</title><rect x="212.0" y="515.0" width="47.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="215.0" y="526.0">[unk..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.23%)</title><rect x="212.0" y="499.0" width="2.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="215.0" y="510.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.35%)</title><rect x="214.7" y="499.0" width="4.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="217.7" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_wait (24 samples, 2.81%)</title><rect x="218.9" y="499.0" width="33.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="221.9" y="510.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.23%)</title><rect x="252.1" y="499.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="255.1" y="510.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.23%)</title><rect x="254.9" y="499.0" width="2.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="257.9" y="510.0"></text>
</g>
<g>
<title>_pthread_cleanup_pop (1 samples, 0.12%)</title><rect x="257.6" y="499.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="260.6" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.12%)</title><rect x="259.0" y="515.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="262.0" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.12%)</title><rect x="260.4" y="547.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.35%)</title><rect x="261.8" y="563.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.35%)</title><rect x="261.8" y="547.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.35%)</title><rect x="261.8" y="531.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.23%)</title><rect x="263.2" y="515.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.23%)</title><rect x="263.2" y="499.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.2" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.23%)</title><rect x="263.2" y="483.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.2" y="494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.23%)</title><rect x="263.2" y="467.0" width="2.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="266.2" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.12%)</title><rect x="263.2" y="451.0" width="1.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="266.2" y="462.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.12%)</title><rect x="264.5" y="451.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="267.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 2.46%)</title><rect x="265.9" y="563.0" width="29.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.9" y="574.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 2.46%)</title><rect x="265.9" y="547.0" width="29.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.9" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 2.46%)</title><rect x="265.9" y="531.0" width="29.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.9" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 2.46%)</title><rect x="265.9" y="515.0" width="29.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.9" y="526.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 1.64%)</title><rect x="275.6" y="499.0" width="19.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.6" y="510.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.12%)</title><rect x="275.6" y="483.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="278.6" y="494.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.59%)</title><rect x="277.0" y="483.0" width="6.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="280.0" y="494.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.12%)</title><rect x="278.4" y="467.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="281.4" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.12%)</title><rect x="279.8" y="467.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="282.8" y="478.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.12%)</title><rect x="281.1" y="467.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="284.1" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.12%)</title><rect x="282.5" y="467.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="285.5" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 0.82%)</title><rect x="283.9" y="483.0" width="9.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="286.9" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="293.6" y="483.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="296.6" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$66/1557764195.run (401 samples, 47.01%)</title><rect x="295.0" y="595.0" width="554.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.0" y="606.0">ru/mail/polis/service/re1nex/BaseService$$Lambda$66/1557764195.run</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1 (401 samples, 47.01%)</title><rect x="295.0" y="579.0" width="554.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.0" y="590.0">ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.94%)</title><rect x="299.1" y="563.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.59%)</title><rect x="303.3" y="547.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.3" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.59%)</title><rect x="303.3" y="531.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponseLocal (115 samples, 13.48%)</title><rect x="310.2" y="563.0" width="159.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.2" y="574.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (115 samples, 13.48%)</title><rect x="310.2" y="547.0" width="159.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.2" y="558.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (65 samples, 7.62%)</title><rect x="310.2" y="531.0" width="89.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.2" y="542.0">ru/mail/po..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="310.2" y="515.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="313.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.12%)</title><rect x="311.6" y="515.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.6" y="526.0"></text>
</g>
<g>
<title>Klass::klass_holder() const (1 samples, 0.12%)</title><rect x="311.6" y="499.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="314.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (61 samples, 7.15%)</title><rect x="313.0" y="515.0" width="84.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.0" y="526.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (3 samples, 0.35%)</title><rect x="314.3" y="499.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (3 samples, 0.35%)</title><rect x="314.3" y="483.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (3 samples, 0.35%)</title><rect x="314.3" y="467.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.3" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="314.3" y="451.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.3" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (2 samples, 0.23%)</title><rect x="315.7" y="451.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (57 samples, 6.68%)</title><rect x="318.5" y="499.0" width="78.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.5" y="510.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.23%)</title><rect x="318.5" y="483.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.5" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="318.5" y="467.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="321.5" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="318.5" y="451.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="321.5" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="318.5" y="435.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="321.5" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="318.5" y="419.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="321.5" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="318.5" y="403.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="321.5" y="414.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.12%)</title><rect x="318.5" y="387.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="321.5" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.12%)</title><rect x="319.9" y="467.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="322.9" y="478.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.12%)</title><rect x="319.9" y="451.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="322.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (29 samples, 3.40%)</title><rect x="321.3" y="483.0" width="40.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.3" y="494.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (29 samples, 3.40%)</title><rect x="321.3" y="467.0" width="40.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.3" y="478.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (27 samples, 3.17%)</title><rect x="324.0" y="451.0" width="37.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.0" y="462.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (27 samples, 3.17%)</title><rect x="324.0" y="435.0" width="37.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.0" y="446.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (27 samples, 3.17%)</title><rect x="324.0" y="419.0" width="37.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="327.0" y="430.0">jav..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (27 samples, 3.17%)</title><rect x="324.0" y="403.0" width="37.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="327.0" y="414.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (26 samples, 3.05%)</title><rect x="361.4" y="483.0" width="35.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.4" y="494.0">jav..</text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.12%)</title><rect x="361.4" y="467.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="364.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (1 samples, 0.12%)</title><rect x="362.8" y="467.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (22 samples, 2.58%)</title><rect x="364.1" y="467.0" width="30.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="367.1" y="478.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (20 samples, 2.34%)</title><rect x="366.9" y="451.0" width="27.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="369.9" y="462.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (20 samples, 2.34%)</title><rect x="366.9" y="435.0" width="27.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="369.9" y="446.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (20 samples, 2.34%)</title><rect x="366.9" y="419.0" width="27.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.9" y="430.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (20 samples, 2.34%)</title><rect x="366.9" y="403.0" width="27.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="369.9" y="414.0">j..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.23%)</title><rect x="394.6" y="467.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="397.6" y="478.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.12%)</title><rect x="396.0" y="451.0" width="1.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="399.0" y="462.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="396.0" y="435.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="399.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (2 samples, 0.23%)</title><rect x="397.3" y="515.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="400.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.12%)</title><rect x="397.3" y="499.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.3" y="510.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.12%)</title><rect x="397.3" y="483.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.3" y="494.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.12%)</title><rect x="397.3" y="467.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.3" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.12%)</title><rect x="397.3" y="451.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="400.3" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="397.3" y="435.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="400.3" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="397.3" y="419.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="400.3" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="397.3" y="403.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="400.3" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="397.3" y="387.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="400.3" y="398.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="397.3" y="371.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="400.3" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.12%)</title><rect x="398.7" y="499.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="401.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.12%)</title><rect x="398.7" y="483.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="401.7" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="398.7" y="467.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="401.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (50 samples, 5.86%)</title><rect x="400.1" y="531.0" width="69.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.1" y="542.0">ru/mail..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (50 samples, 5.86%)</title><rect x="400.1" y="515.0" width="69.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.1" y="526.0">one/nio..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.59%)</title><rect x="411.2" y="499.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="414.2" y="510.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.12%)</title><rect x="411.2" y="483.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="414.2" y="494.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (4 samples, 0.47%)</title><rect x="412.6" y="483.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="415.6" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.47%)</title><rect x="412.6" y="467.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="415.6" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (4 samples, 0.47%)</title><rect x="412.6" y="451.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="415.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (34 samples, 3.99%)</title><rect x="418.1" y="499.0" width="47.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="421.1" y="510.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.59%)</title><rect x="418.1" y="483.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.1" y="494.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.12%)</title><rect x="423.6" y="467.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.6" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.12%)</title><rect x="423.6" y="451.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="426.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.12%)</title><rect x="423.6" y="435.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (29 samples, 3.40%)</title><rect x="425.0" y="483.0" width="40.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.0" y="494.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (29 samples, 3.40%)</title><rect x="425.0" y="467.0" width="40.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.0" y="478.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (28 samples, 3.28%)</title><rect x="426.4" y="451.0" width="38.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.4" y="462.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (28 samples, 3.28%)</title><rect x="426.4" y="435.0" width="38.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="429.4" y="446.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (10 samples, 1.17%)</title><rect x="426.4" y="419.0" width="13.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="429.4" y="430.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.12%)</title><rect x="430.5" y="403.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="433.5" y="414.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.12%)</title><rect x="431.9" y="403.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="434.9" y="414.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.35%)</title><rect x="433.3" y="403.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="436.3" y="414.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.12%)</title><rect x="436.1" y="387.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="439.1" y="398.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.23%)</title><rect x="437.5" y="403.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="440.5" y="414.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.12%)</title><rect x="440.2" y="419.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="443.2" y="430.0"></text>
</g>
<g>
<title>__send (17 samples, 1.99%)</title><rect x="441.6" y="419.0" width="23.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="444.6" y="430.0">_..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.35%)</title><rect x="465.1" y="499.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="468.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.12%)</title><rect x="467.9" y="483.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="470.9" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.12%)</title><rect x="467.9" y="467.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="470.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.sendReplica (275 samples, 32.24%)</title><rect x="469.3" y="563.0" width="380.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="472.3" y="574.0">ru/mail/polis/service/re1nex/ApiControllerImpl.sendR..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendReplica (275 samples, 32.24%)</title><rect x="469.3" y="547.0" width="380.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.3" y="558.0">ru/mail/polis/service/re1nex/ApiController.sendReplica</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.severalNodesForKey (23 samples, 2.70%)</title><rect x="469.3" y="531.0" width="31.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.3" y="542.0">ru..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="469.3" y="515.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="472.3" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (12 samples, 1.41%)</title><rect x="470.7" y="515.0" width="16.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="473.7" y="526.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (2 samples, 0.23%)</title><rect x="470.7" y="499.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="473.7" y="510.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (2 samples, 0.23%)</title><rect x="470.7" y="483.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="473.7" y="494.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (2 samples, 0.23%)</title><rect x="470.7" y="467.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.7" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (2 samples, 0.23%)</title><rect x="470.7" y="451.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.7" y="462.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (2 samples, 0.23%)</title><rect x="470.7" y="435.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="473.7" y="446.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bBig (1 samples, 0.12%)</title><rect x="470.7" y="419.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="473.7" y="430.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (1 samples, 0.12%)</title><rect x="470.7" y="403.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.7" y="414.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (1 samples, 0.12%)</title><rect x="472.0" y="419.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="475.0" y="430.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompressCheck (1 samples, 0.12%)</title><rect x="472.0" y="403.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.0" y="414.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (10 samples, 1.17%)</title><rect x="473.4" y="499.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.4" y="510.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (10 samples, 1.17%)</title><rect x="473.4" y="483.0" width="13.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.4" y="494.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (3 samples, 0.35%)</title><rect x="473.4" y="467.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="476.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.35%)</title><rect x="473.4" y="451.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="476.4" y="462.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="474.8" y="435.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="477.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.12%)</title><rect x="476.2" y="435.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.2" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (7 samples, 0.82%)</title><rect x="477.6" y="467.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="480.6" y="478.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (5 samples, 0.59%)</title><rect x="477.6" y="451.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.6" y="462.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (5 samples, 0.59%)</title><rect x="477.6" y="435.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.6" y="446.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (4 samples, 0.47%)</title><rect x="477.6" y="419.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.6" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.47%)</title><rect x="477.6" y="403.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.6" y="414.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (1 samples, 0.12%)</title><rect x="481.7" y="387.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="484.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.12%)</title><rect x="483.1" y="419.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="486.1" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="483.1" y="403.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="486.1" y="414.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (2 samples, 0.23%)</title><rect x="484.5" y="451.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="487.5" y="462.0"></text>
</g>
<g>
<title>java/security/Provider.getService (1 samples, 0.12%)</title><rect x="484.5" y="435.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="487.5" y="446.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (1 samples, 0.12%)</title><rect x="484.5" y="419.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="487.5" y="430.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="484.5" y="403.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="487.5" y="414.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (1 samples, 0.12%)</title><rect x="485.9" y="435.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="488.9" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (1 samples, 0.12%)</title><rect x="485.9" y="419.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.getNodesFromMap (10 samples, 1.17%)</title><rect x="487.3" y="515.0" width="13.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.3" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.12%)</title><rect x="487.3" y="499.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.3" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.12%)</title><rect x="487.3" y="483.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.3" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.12%)</title><rect x="487.3" y="467.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.3" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.12%)</title><rect x="487.3" y="451.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="490.3" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.12%)</title><rect x="487.3" y="435.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.3" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (3 samples, 0.35%)</title><rect x="488.6" y="499.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="491.6" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (3 samples, 0.35%)</title><rect x="488.6" y="483.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.6" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (3 samples, 0.35%)</title><rect x="488.6" y="467.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.6" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (3 samples, 0.35%)</title><rect x="488.6" y="451.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="491.6" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (3 samples, 0.35%)</title><rect x="488.6" y="435.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.6" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.hasNext (1 samples, 0.12%)</title><rect x="492.8" y="499.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="495.8" y="510.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (4 samples, 0.47%)</title><rect x="494.2" y="499.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="497.2" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (2 samples, 0.23%)</title><rect x="496.9" y="483.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="499.9" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.12%)</title><rect x="498.3" y="467.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.3" y="478.0"></text>
</g>
<g>
<title>java/util/TreeSet.size (1 samples, 0.12%)</title><rect x="499.7" y="499.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponseLocal (2 samples, 0.23%)</title><rect x="501.1" y="531.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="504.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (250 samples, 29.31%)</title><rect x="503.9" y="531.0" width="345.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.9" y="542.0">ru/mail/polis/service/re1nex/ApiControllerImpl...</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (227 samples, 26.61%)</title><rect x="503.9" y="515.0" width="314.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="506.9" y="526.0">ru/mail/polis/service/re1nex/ApiController..</text>
</g>
<g>
<title>java/util/TreeSet.iterator (1 samples, 0.12%)</title><rect x="510.8" y="499.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="513.8" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (1 samples, 0.12%)</title><rect x="510.8" y="483.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="513.8" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (1 samples, 0.12%)</title><rect x="510.8" y="467.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="513.8" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.12%)</title><rect x="510.8" y="451.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="513.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl$$Lambda$80/1397497046.handleLocalResponse (41 samples, 4.81%)</title><rect x="512.2" y="499.0" width="56.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="515.2" y="510.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.lambda$handleResponses$2 (41 samples, 4.81%)</title><rect x="512.2" y="483.0" width="56.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="515.2" y="494.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (41 samples, 4.81%)</title><rect x="512.2" y="467.0" width="56.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="515.2" y="478.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (38 samples, 4.45%)</title><rect x="514.9" y="451.0" width="52.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="517.9" y="462.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.12%)</title><rect x="516.3" y="435.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="519.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.12%)</title><rect x="516.3" y="419.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="519.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.12%)</title><rect x="516.3" y="403.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.3" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.12%)</title><rect x="516.3" y="387.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.3" y="398.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.12%)</title><rect x="516.3" y="371.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="519.3" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (36 samples, 4.22%)</title><rect x="517.7" y="435.0" width="49.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="520.7" y="446.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.12%)</title><rect x="517.7" y="419.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.12%)</title><rect x="517.7" y="403.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="520.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (21 samples, 2.46%)</title><rect x="519.1" y="419.0" width="29.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="522.1" y="430.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (21 samples, 2.46%)</title><rect x="519.1" y="403.0" width="29.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.1" y="414.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (21 samples, 2.46%)</title><rect x="519.1" y="387.0" width="29.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="522.1" y="398.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (21 samples, 2.46%)</title><rect x="519.1" y="371.0" width="29.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.1" y="382.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (21 samples, 2.46%)</title><rect x="519.1" y="355.0" width="29.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.1" y="366.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (21 samples, 2.46%)</title><rect x="519.1" y="339.0" width="29.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="522.1" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (14 samples, 1.64%)</title><rect x="548.1" y="419.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="551.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (13 samples, 1.52%)</title><rect x="548.1" y="403.0" width="18.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="551.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.12%)</title><rect x="555.0" y="387.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="558.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.12%)</title><rect x="555.0" y="371.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="558.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.12%)</title><rect x="555.0" y="355.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="558.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.12%)</title><rect x="555.0" y="339.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.0" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.12%)</title><rect x="555.0" y="323.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="558.0" y="334.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.12%)</title><rect x="555.0" y="307.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="558.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (7 samples, 0.82%)</title><rect x="556.4" y="387.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.82%)</title><rect x="556.4" y="371.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="559.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.82%)</title><rect x="556.4" y="355.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="559.4" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.82%)</title><rect x="556.4" y="339.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="559.4" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.12%)</title><rect x="566.1" y="403.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="569.1" y="414.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.12%)</title><rect x="566.1" y="387.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="569.1" y="398.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="566.1" y="371.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="569.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (1 samples, 0.12%)</title><rect x="567.5" y="451.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.12%)</title><rect x="567.5" y="435.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.5" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.12%)</title><rect x="567.5" y="419.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.proxy (179 samples, 20.98%)</title><rect x="568.9" y="499.0" width="247.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="571.9" y="510.0">ru/mail/polis/service/re1nex/ApiC..</text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.47%)</title><rect x="570.3" y="483.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="573.3" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.23%)</title><rect x="570.3" y="467.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="573.3" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.23%)</title><rect x="573.0" y="467.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="576.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.23%)</title><rect x="573.0" y="451.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="576.0" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.23%)</title><rect x="573.0" y="435.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="576.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (174 samples, 20.40%)</title><rect x="575.8" y="483.0" width="240.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="578.8" y="494.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (174 samples, 20.40%)</title><rect x="575.8" y="467.0" width="240.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="578.8" y="478.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="579.9" y="451.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="582.9" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="579.9" y="435.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="582.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (73 samples, 8.56%)</title><rect x="581.3" y="451.0" width="101.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.3" y="462.0">one/nio/http..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (12 samples, 1.41%)</title><rect x="599.3" y="435.0" width="16.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="602.3" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="599.3" y="419.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="602.3" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (11 samples, 1.29%)</title><rect x="600.7" y="419.0" width="15.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="603.7" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (10 samples, 1.17%)</title><rect x="600.7" y="403.0" width="13.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="603.7" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 1.17%)</title><rect x="600.7" y="387.0" width="13.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.7" y="398.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.47%)</title><rect x="600.7" y="371.0" width="5.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="603.7" y="382.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="606.2" y="371.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="609.2" y="382.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.12%)</title><rect x="606.2" y="355.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="609.2" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (5 samples, 0.59%)</title><rect x="607.6" y="371.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="610.6" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.35%)</title><rect x="610.4" y="355.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="613.4" y="366.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.23%)</title><rect x="611.8" y="339.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="614.8" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (2 samples, 0.23%)</title><rect x="611.8" y="323.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="614.8" y="334.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (2 samples, 0.23%)</title><rect x="611.8" y="307.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="614.8" y="318.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (2 samples, 0.23%)</title><rect x="611.8" y="291.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="614.8" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="614.5" y="403.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="617.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (46 samples, 5.39%)</title><rect x="615.9" y="435.0" width="63.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.9" y="446.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (20 samples, 2.34%)</title><rect x="625.6" y="419.0" width="27.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="628.6" y="430.0">J..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.12%)</title><rect x="635.3" y="403.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="638.3" y="414.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.12%)</title><rect x="636.7" y="403.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="639.7" y="414.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 1.17%)</title><rect x="638.0" y="403.0" width="13.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="641.0" y="414.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.35%)</title><rect x="642.2" y="387.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="645.2" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.35%)</title><rect x="646.3" y="387.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="649.3" y="398.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.12%)</title><rect x="650.5" y="387.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="653.5" y="398.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.12%)</title><rect x="651.9" y="403.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="654.9" y="414.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.23%)</title><rect x="653.3" y="419.0" width="2.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="656.3" y="430.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.12%)</title><rect x="656.0" y="419.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="659.0" y="430.0"></text>
</g>
<g>
<title>recv (16 samples, 1.88%)</title><rect x="657.4" y="419.0" width="22.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="660.4" y="430.0">r..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1 samples, 0.12%)</title><rect x="679.5" y="435.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.5" y="446.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.12%)</title><rect x="680.9" y="435.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="683.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (33 samples, 3.87%)</title><rect x="682.3" y="451.0" width="45.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.3" y="462.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (22 samples, 2.58%)</title><rect x="682.3" y="435.0" width="30.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="685.3" y="446.0">on..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="694.8" y="419.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="697.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.12%)</title><rect x="696.1" y="419.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="699.1" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 1.29%)</title><rect x="697.5" y="419.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="700.5" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 1.17%)</title><rect x="698.9" y="403.0" width="13.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="701.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (10 samples, 1.17%)</title><rect x="712.7" y="435.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="715.7" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.47%)</title><rect x="721.0" y="419.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="724.0" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.47%)</title><rect x="721.0" y="403.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.0" y="414.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.12%)</title><rect x="725.2" y="387.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="728.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.12%)</title><rect x="726.6" y="435.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.6" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (16 samples, 1.88%)</title><rect x="728.0" y="451.0" width="22.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="731.0" y="462.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 1.17%)</title><rect x="736.3" y="435.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="739.3" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (10 samples, 1.17%)</title><rect x="736.3" y="419.0" width="13.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.charAt (10 samples, 1.17%)</title><rect x="736.3" y="403.0" width="13.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="739.3" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.35%)</title><rect x="745.9" y="387.0" width="4.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="748.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.47%)</title><rect x="750.1" y="451.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.23%)</title><rect x="752.9" y="435.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.9" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.23%)</title><rect x="752.9" y="419.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.9" y="430.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.12%)</title><rect x="754.2" y="403.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="757.2" y="414.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (17 samples, 1.99%)</title><rect x="755.6" y="451.0" width="23.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.6" y="462.0">o..</text>
</g>
<g>
<title>setsockopt (16 samples, 1.88%)</title><rect x="757.0" y="435.0" width="22.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="760.0" y="446.0">s..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (24 samples, 2.81%)</title><rect x="779.1" y="451.0" width="33.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.1" y="462.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (6 samples, 0.70%)</title><rect x="781.9" y="435.0" width="8.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="784.9" y="446.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.12%)</title><rect x="786.1" y="419.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="789.1" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.23%)</title><rect x="787.4" y="419.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="790.4" y="430.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.12%)</title><rect x="787.4" y="403.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="790.4" y="414.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.12%)</title><rect x="788.8" y="403.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="791.8" y="414.0"></text>
</g>
<g>
<title>__send (13 samples, 1.52%)</title><rect x="790.2" y="435.0" width="18.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="793.2" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.12%)</title><rect x="808.2" y="435.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="811.2" y="446.0"></text>
</g>
<g>
<title>send@plt (2 samples, 0.23%)</title><rect x="809.6" y="435.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="812.6" y="446.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.12%)</title><rect x="812.3" y="451.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="815.3" y="462.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (2 samples, 0.23%)</title><rect x="813.7" y="451.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (1 samples, 0.12%)</title><rect x="816.5" y="499.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="819.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (23 samples, 2.70%)</title><rect x="817.9" y="515.0" width="31.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="820.9" y="526.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (23 samples, 2.70%)</title><rect x="817.9" y="499.0" width="31.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.9" y="510.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (21 samples, 2.46%)</title><rect x="819.3" y="483.0" width="29.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="822.3" y="494.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.59%)</title><rect x="819.3" y="467.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="822.3" y="478.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.35%)</title><rect x="822.0" y="451.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="825.0" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.35%)</title><rect x="822.0" y="435.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="825.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.35%)</title><rect x="822.0" y="419.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="825.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 1.88%)</title><rect x="826.2" y="467.0" width="22.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="829.2" y="478.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 1.88%)</title><rect x="826.2" y="451.0" width="22.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="829.2" y="462.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (15 samples, 1.76%)</title><rect x="827.6" y="435.0" width="20.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="830.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (15 samples, 1.76%)</title><rect x="827.6" y="419.0" width="20.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="830.6" y="430.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.12%)</title><rect x="833.1" y="403.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="836.1" y="414.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.12%)</title><rect x="833.1" y="387.0" width="1.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="836.1" y="398.0"></text>
</g>
<g>
<title>__send (10 samples, 1.17%)</title><rect x="834.5" y="403.0" width="13.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="837.5" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.12%)</title><rect x="848.3" y="483.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="851.3" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.12%)</title><rect x="848.3" y="467.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="851.3" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.12%)</title><rect x="848.3" y="451.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="851.3" y="462.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (4 samples, 0.47%)</title><rect x="849.7" y="595.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.7" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (4 samples, 0.47%)</title><rect x="849.7" y="579.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="852.7" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$126/132876114.run (4 samples, 0.47%)</title><rect x="849.7" y="563.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.7" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (4 samples, 0.47%)</title><rect x="849.7" y="547.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="852.7" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (4 samples, 0.47%)</title><rect x="849.7" y="531.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.7" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (4 samples, 0.47%)</title><rect x="849.7" y="515.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.7" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (4 samples, 0.47%)</title><rect x="849.7" y="499.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.7" y="510.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (4 samples, 0.47%)</title><rect x="849.7" y="483.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="852.7" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.47%)</title><rect x="849.7" y="467.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="852.7" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.47%)</title><rect x="849.7" y="451.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="852.7" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (4 samples, 0.47%)</title><rect x="849.7" y="435.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.7" y="446.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (1 samples, 0.12%)</title><rect x="849.7" y="419.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.7" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.12%)</title><rect x="849.7" y="403.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="852.7" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.12%)</title><rect x="849.7" y="387.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="852.7" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.12%)</title><rect x="849.7" y="371.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.7" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.12%)</title><rect x="849.7" y="355.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="852.7" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.12%)</title><rect x="849.7" y="339.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.7" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.12%)</title><rect x="849.7" y="323.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="852.7" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.12%)</title><rect x="849.7" y="307.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="852.7" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.12%)</title><rect x="849.7" y="291.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.7" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.12%)</title><rect x="849.7" y="275.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.7" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.12%)</title><rect x="849.7" y="259.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="852.7" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.12%)</title><rect x="849.7" y="243.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.7" y="254.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.12%)</title><rect x="849.7" y="227.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.7" y="238.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.12%)</title><rect x="849.7" y="211.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.7" y="222.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor35.invoke (1 samples, 0.12%)</title><rect x="849.7" y="195.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.7" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (1 samples, 0.12%)</title><rect x="849.7" y="179.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.7" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.12%)</title><rect x="849.7" y="163.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="852.7" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.12%)</title><rect x="849.7" y="147.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.7" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.12%)</title><rect x="849.7" y="131.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.7" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.12%)</title><rect x="849.7" y="115.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.7" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.12%)</title><rect x="849.7" y="99.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.7" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.12%)</title><rect x="849.7" y="83.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.7" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.12%)</title><rect x="849.7" y="67.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="852.7" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.12%)</title><rect x="849.7" y="51.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="852.7" y="62.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (1 samples, 0.12%)</title><rect x="849.7" y="35.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.7" y="46.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (3 samples, 0.35%)</title><rect x="851.1" y="419.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.1" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.35%)</title><rect x="851.1" y="403.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="854.1" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.35%)</title><rect x="851.1" y="387.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="854.1" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.35%)</title><rect x="851.1" y="371.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="854.1" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (3 samples, 0.35%)</title><rect x="851.1" y="355.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.1" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.12%)</title><rect x="851.1" y="339.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="854.1" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.12%)</title><rect x="851.1" y="323.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="854.1" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (1 samples, 0.12%)</title><rect x="851.1" y="307.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="854.1" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getReflector (1 samples, 0.12%)</title><rect x="851.1" y="291.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.12%)</title><rect x="851.1" y="275.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="854.1" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass$FieldReflectorKey.equals (1 samples, 0.12%)</title><rect x="851.1" y="259.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="854.1" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (2 samples, 0.23%)</title><rect x="852.5" y="339.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="855.5" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.skipCustomData (2 samples, 0.23%)</title><rect x="852.5" y="323.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="855.5" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.skipBlockData (2 samples, 0.23%)</title><rect x="852.5" y="307.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.5" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.refill (1 samples, 0.12%)</title><rect x="853.8" y="291.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="856.8" y="302.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (227 samples, 26.61%)</title><rect x="855.2" y="643.0" width="314.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="858.2" y="654.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.12%)</title><rect x="858.0" y="627.0" width="1.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="861.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.35%)</title><rect x="859.4" y="627.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="862.4" y="638.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.12%)</title><rect x="863.5" y="627.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.5" y="638.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.35%)</title><rect x="864.9" y="627.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="867.9" y="638.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.35%)</title><rect x="864.9" y="611.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="867.9" y="622.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.35%)</title><rect x="864.9" y="595.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="867.9" y="606.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (45 samples, 5.28%)</title><rect x="869.1" y="627.0" width="62.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="872.1" y="638.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (37 samples, 4.34%)</title><rect x="880.1" y="611.0" width="51.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="883.1" y="622.0">one/n..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.35%)</title><rect x="891.2" y="595.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="894.2" y="606.0"></text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.12%)</title><rect x="895.3" y="595.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="898.3" y="606.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.12%)</title><rect x="895.3" y="579.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="898.3" y="590.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.12%)</title><rect x="895.3" y="563.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="898.3" y="574.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.12%)</title><rect x="895.3" y="547.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="898.3" y="558.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.12%)</title><rect x="896.7" y="595.0" width="1.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="899.7" y="606.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.70%)</title><rect x="898.1" y="595.0" width="8.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="901.1" y="606.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.12%)</title><rect x="905.0" y="579.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="908.0" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="905.0" y="563.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="908.0" y="574.0"></text>
</g>
<g>
<title>epoll_wait (18 samples, 2.11%)</title><rect x="906.4" y="595.0" width="24.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="909.4" y="606.0">e..</text>
</g>
<g>
<title>one/nio/net/Session.process (169 samples, 19.81%)</title><rect x="931.3" y="627.0" width="233.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="934.3" y="638.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (165 samples, 19.34%)</title><rect x="936.8" y="611.0" width="228.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="939.8" y="622.0">one/nio/http/HttpSession.proce..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (106 samples, 12.43%)</title><rect x="936.8" y="595.0" width="146.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="939.8" y="606.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.12%)</title><rect x="946.5" y="579.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="949.5" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.23%)</title><rect x="947.9" y="579.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="950.9" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="950.7" y="579.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="953.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (59 samples, 6.92%)</title><rect x="952.1" y="579.0" width="81.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="955.1" y="590.0">one/nio/h..</text>
</g>
<g>
<title>java/util/LinkedList.addLast (1 samples, 0.12%)</title><rect x="953.4" y="563.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="956.4" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (57 samples, 6.68%)</title><rect x="954.8" y="563.0" width="78.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="957.8" y="574.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler3_handleRequest.handleRequest (49 samples, 5.74%)</title><rect x="954.8" y="547.0" width="67.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="957.8" y="558.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.12%)</title><rect x="954.8" y="531.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="957.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (8 samples, 0.94%)</title><rect x="956.2" y="531.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="959.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 0.94%)</title><rect x="956.2" y="515.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="959.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.35%)</title><rect x="957.6" y="499.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="960.6" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.35%)</title><rect x="957.6" y="483.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="960.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.12%)</title><rect x="961.7" y="499.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="964.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.12%)</title><rect x="961.7" y="483.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="964.7" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="961.7" y="467.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.7" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="961.7" y="451.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="964.7" y="462.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.35%)</title><rect x="963.1" y="499.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="966.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.23%)</title><rect x="964.5" y="483.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="967.5" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.23%)</title><rect x="964.5" y="467.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="967.5" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.23%)</title><rect x="964.5" y="451.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="967.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.handleRequest (40 samples, 4.69%)</title><rect x="967.3" y="531.0" width="55.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="970.3" y="542.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.handleRequest (40 samples, 4.69%)</title><rect x="967.3" y="515.0" width="55.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="970.3" y="526.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1491474208.linkToTargetMethod (1 samples, 0.12%)</title><rect x="970.0" y="499.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="973.0" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.12%)</title><rect x="970.0" y="483.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="973.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$66/1557764195.get$Lambda (1 samples, 0.12%)</title><rect x="970.0" y="467.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="973.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.executeTask (1 samples, 0.12%)</title><rect x="970.0" y="451.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="973.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.executeTask (37 samples, 4.34%)</title><rect x="971.4" y="499.0" width="51.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="974.4" y="510.0">ru/ma..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (1 samples, 0.12%)</title><rect x="971.4" y="483.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="974.4" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.12%)</title><rect x="971.4" y="467.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="974.4" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.12%)</title><rect x="971.4" y="451.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="974.4" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.12%)</title><rect x="971.4" y="435.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="974.4" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.12%)</title><rect x="971.4" y="419.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="974.4" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.12%)</title><rect x="971.4" y="403.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="974.4" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.12%)</title><rect x="971.4" y="387.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="974.4" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="971.4" y="371.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="974.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (36 samples, 4.22%)</title><rect x="972.8" y="483.0" width="49.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="975.8" y="494.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (31 samples, 3.63%)</title><rect x="975.6" y="467.0" width="42.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="978.6" y="478.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.12%)</title><rect x="975.6" y="451.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="978.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.12%)</title><rect x="975.6" y="435.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="978.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.12%)</title><rect x="975.6" y="419.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="978.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.12%)</title><rect x="975.6" y="403.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="978.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (1 samples, 0.12%)</title><rect x="975.6" y="387.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="978.6" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.12%)</title><rect x="975.6" y="371.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="978.6" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.12%)</title><rect x="975.6" y="355.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="978.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.35%)</title><rect x="977.0" y="451.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.35%)</title><rect x="977.0" y="435.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="980.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.12%)</title><rect x="977.0" y="419.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="980.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.12%)</title><rect x="977.0" y="403.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="980.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.12%)</title><rect x="977.0" y="387.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.12%)</title><rect x="977.0" y="371.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="980.0" y="382.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.12%)</title><rect x="977.0" y="355.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="980.0" y="366.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.12%)</title><rect x="977.0" y="339.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="980.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.23%)</title><rect x="978.3" y="419.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="981.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.12%)</title><rect x="978.3" y="403.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="981.3" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.12%)</title><rect x="978.3" y="387.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="981.3" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.12%)</title><rect x="978.3" y="371.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="981.3" y="382.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.12%)</title><rect x="978.3" y="355.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="981.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.12%)</title><rect x="979.7" y="403.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="982.7" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.12%)</title><rect x="979.7" y="387.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="982.7" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.12%)</title><rect x="979.7" y="371.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="982.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 3.17%)</title><rect x="981.1" y="451.0" width="37.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="984.1" y="462.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 3.17%)</title><rect x="981.1" y="435.0" width="37.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="984.1" y="446.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 3.17%)</title><rect x="981.1" y="419.0" width="37.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="984.1" y="430.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 3.17%)</title><rect x="981.1" y="403.0" width="37.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="984.1" y="414.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (27 samples, 3.17%)</title><rect x="981.1" y="387.0" width="37.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="984.1" y="398.0">jdk..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.23%)</title><rect x="981.1" y="371.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="984.1" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.12%)</title><rect x="983.9" y="371.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.9" y="382.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.23%)</title><rect x="985.3" y="371.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.3" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 1.17%)</title><rect x="988.0" y="371.0" width="13.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="991.0" y="382.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.12%)</title><rect x="989.4" y="355.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.4" y="366.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.12%)</title><rect x="990.8" y="355.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="993.8" y="366.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.12%)</title><rect x="992.2" y="355.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="995.2" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.70%)</title><rect x="993.6" y="355.0" width="8.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="996.6" y="366.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.23%)</title><rect x="1001.9" y="371.0" width="2.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1004.9" y="382.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.23%)</title><rect x="1001.9" y="355.0" width="2.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1004.9" y="366.0"></text>
</g>
<g>
<title>__pthread_cond_signal (9 samples, 1.06%)</title><rect x="1004.6" y="371.0" width="12.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1007.6" y="382.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.12%)</title><rect x="1017.1" y="371.0" width="1.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1020.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (1 samples, 0.12%)</title><rect x="1018.5" y="467.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1021.5" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.start (1 samples, 0.12%)</title><rect x="1018.5" y="451.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1021.5" y="462.0"></text>
</g>
<g>
<title>java/lang/Thread.start0 (1 samples, 0.12%)</title><rect x="1018.5" y="435.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1021.5" y="446.0"></text>
</g>
<g>
<title>JVM_StartThread (1 samples, 0.12%)</title><rect x="1018.5" y="419.0" width="1.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1021.5" y="430.0"></text>
</g>
<g>
<title>HandshakeState::HandshakeState() (1 samples, 0.12%)</title><rect x="1018.5" y="403.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.isRunning (2 samples, 0.23%)</title><rect x="1019.8" y="467.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1022.8" y="478.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.35%)</title><rect x="1022.6" y="547.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1025.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.35%)</title><rect x="1022.6" y="531.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="1022.6" y="515.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1025.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.23%)</title><rect x="1024.0" y="515.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1027.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.23%)</title><rect x="1024.0" y="499.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1027.0" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.23%)</title><rect x="1024.0" y="483.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1027.0" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (5 samples, 0.59%)</title><rect x="1026.8" y="547.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1029.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.59%)</title><rect x="1026.8" y="531.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1029.8" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.59%)</title><rect x="1026.8" y="515.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1029.8" y="526.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.59%)</title><rect x="1026.8" y="499.0" width="6.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1029.8" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (12 samples, 1.41%)</title><rect x="1033.7" y="579.0" width="16.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1036.7" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="1033.7" y="563.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.7" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="1033.7" y="547.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="1033.7" y="531.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.7" y="542.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="1033.7" y="515.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1036.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.35%)</title><rect x="1035.1" y="563.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1038.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.35%)</title><rect x="1035.1" y="547.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1038.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.35%)</title><rect x="1035.1" y="531.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1038.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.35%)</title><rect x="1035.1" y="515.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1038.1" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.12%)</title><rect x="1037.8" y="499.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1040.8" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.59%)</title><rect x="1039.2" y="563.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1042.2" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.59%)</title><rect x="1039.2" y="547.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1042.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1044.7" y="531.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1047.7" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1044.7" y="515.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1047.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.12%)</title><rect x="1044.7" y="499.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1047.7" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="1044.7" y="483.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.7" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="1044.7" y="467.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.7" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="1044.7" y="451.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1047.7" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="1044.7" y="435.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.7" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="1044.7" y="419.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.7" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.35%)</title><rect x="1046.1" y="563.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1049.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 1.06%)</title><rect x="1050.3" y="579.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1053.3" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.12%)</title><rect x="1054.4" y="563.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1057.4" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.12%)</title><rect x="1054.4" y="547.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1057.4" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.59%)</title><rect x="1055.8" y="563.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1058.8" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.59%)</title><rect x="1055.8" y="547.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1058.8" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="1057.2" y="531.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3 samples, 0.35%)</title><rect x="1058.6" y="531.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1061.6" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 1.76%)</title><rect x="1062.7" y="579.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1065.7" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.82%)</title><rect x="1073.8" y="563.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1076.8" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="1082.1" y="547.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.1" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="1082.1" y="531.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1085.1" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="1082.1" y="515.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.1" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="1082.1" y="499.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1085.1" y="510.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.12%)</title><rect x="1082.1" y="483.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.1" y="494.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.23%)</title><rect x="1083.5" y="595.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1086.5" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (57 samples, 6.68%)</title><rect x="1086.2" y="595.0" width="78.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1089.2" y="606.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (56 samples, 6.57%)</title><rect x="1087.6" y="579.0" width="77.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1090.6" y="590.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (25 samples, 2.93%)</title><rect x="1093.2" y="563.0" width="34.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1096.2" y="574.0">Ja..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.47%)</title><rect x="1100.1" y="547.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1103.1" y="558.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.47%)</title><rect x="1105.6" y="547.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.6" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.12%)</title><rect x="1111.1" y="547.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.1" y="558.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 0.82%)</title><rect x="1112.5" y="547.0" width="9.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1115.5" y="558.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.12%)</title><rect x="1113.9" y="531.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1116.9" y="542.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.59%)</title><rect x="1115.3" y="531.0" width="6.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1118.3" y="542.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.12%)</title><rect x="1120.8" y="515.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.8" y="526.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.47%)</title><rect x="1122.2" y="547.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.2" y="558.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (5 samples, 0.59%)</title><rect x="1127.7" y="563.0" width="7.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1130.7" y="574.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.47%)</title><rect x="1134.7" y="563.0" width="5.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1137.7" y="574.0"></text>
</g>
<g>
<title>recv (18 samples, 2.11%)</title><rect x="1140.2" y="563.0" width="24.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1143.2" y="574.0">r..</text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.35%)</title><rect x="1165.1" y="627.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.1" y="638.0"></text>
</g>
<g>
<title>start_thread (15 samples, 1.76%)</title><rect x="1169.2" y="643.0" width="20.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1172.2" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (15 samples, 1.76%)</title><rect x="1169.2" y="627.0" width="20.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1172.2" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (15 samples, 1.76%)</title><rect x="1169.2" y="611.0" width="20.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.2" y="622.0"></text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 1.06%)</title><rect x="1169.2" y="595.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.2" y="606.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 0.94%)</title><rect x="1169.2" y="579.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.2" y="590.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.59%)</title><rect x="1169.2" y="563.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="574.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.59%)</title><rect x="1169.2" y="547.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.2" y="558.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 0.59%)</title><rect x="1169.2" y="531.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.2" y="542.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (1 samples, 0.12%)</title><rect x="1173.4" y="515.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="526.0"></text>
</g>
<g>
<title>G1Allocator::survivor_attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="1173.4" y="499.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="510.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.12%)</title><rect x="1174.8" y="515.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="526.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.23%)</title><rect x="1176.2" y="563.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.2" y="574.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.23%)</title><rect x="1176.2" y="547.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.2" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.23%)</title><rect x="1176.2" y="531.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.2" y="542.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 0.23%)</title><rect x="1176.2" y="515.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.2" y="526.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.23%)</title><rect x="1176.2" y="499.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.2" y="510.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.23%)</title><rect x="1176.2" y="483.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.2" y="494.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.23%)</title><rect x="1176.2" y="467.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.2" y="478.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.12%)</title><rect x="1177.5" y="451.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="462.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.12%)</title><rect x="1178.9" y="563.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="574.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.12%)</title><rect x="1178.9" y="547.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.12%)</title><rect x="1178.9" y="531.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="542.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.12%)</title><rect x="1178.9" y="515.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="526.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.12%)</title><rect x="1178.9" y="499.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (1 samples, 0.12%)</title><rect x="1180.3" y="579.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="590.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (1 samples, 0.12%)</title><rect x="1180.3" y="563.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="574.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.59%)</title><rect x="1181.7" y="595.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.7" y="606.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (5 samples, 0.59%)</title><rect x="1181.7" y="579.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="590.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (5 samples, 0.59%)</title><rect x="1181.7" y="563.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="574.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.23%)</title><rect x="1181.7" y="547.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="558.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 0.23%)</title><rect x="1181.7" y="531.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.12%)</title><rect x="1181.7" y="515.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.12%)</title><rect x="1181.7" y="499.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.12%)</title><rect x="1181.7" y="483.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1181.7" y="467.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="478.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.12%)</title><rect x="1183.1" y="515.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="526.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.12%)</title><rect x="1183.1" y="499.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="510.0"></text>
</g>
<g>
<title>LoadNode::klass_value_common(PhaseGVN*) const (1 samples, 0.12%)</title><rect x="1183.1" y="483.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="494.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.35%)</title><rect x="1184.5" y="547.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.35%)</title><rect x="1184.5" y="531.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="542.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.35%)</title><rect x="1184.5" y="515.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="526.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.35%)</title><rect x="1184.5" y="499.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="510.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.12%)</title><rect x="1184.5" y="483.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="494.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.12%)</title><rect x="1184.5" y="467.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.12%)</title><rect x="1184.5" y="451.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.12%)</title><rect x="1184.5" y="435.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.12%)</title><rect x="1184.5" y="419.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.12%)</title><rect x="1184.5" y="403.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.12%)</title><rect x="1184.5" y="387.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.12%)</title><rect x="1184.5" y="371.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.12%)</title><rect x="1184.5" y="355.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.12%)</title><rect x="1184.5" y="339.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="350.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.12%)</title><rect x="1184.5" y="323.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="334.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.12%)</title><rect x="1184.5" y="307.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="318.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.12%)</title><rect x="1184.5" y="291.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="302.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.12%)</title><rect x="1184.5" y="275.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="286.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.12%)</title><rect x="1184.5" y="259.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="270.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.12%)</title><rect x="1185.8" y="483.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.8" y="494.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.12%)</title><rect x="1185.8" y="467.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.8" y="478.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.12%)</title><rect x="1185.8" y="451.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="462.0"></text>
</g>
<g>
<title>Assembler::nop(int) (1 samples, 0.12%)</title><rect x="1185.8" y="435.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.8" y="446.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.12%)</title><rect x="1187.2" y="483.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.2" y="494.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.12%)</title><rect x="1187.2" y="467.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.2" y="478.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.12%)</title><rect x="1187.2" y="451.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.2" y="462.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.12%)</title><rect x="1187.2" y="435.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="446.0"></text>
</g>
<g>
<title>VMError::is_error_reported() (1 samples, 0.12%)</title><rect x="1188.6" y="595.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.6" y="606.0"></text>
</g>
</g>
</svg>
