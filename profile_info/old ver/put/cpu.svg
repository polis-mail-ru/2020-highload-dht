<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="389"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="389"> </text>
<g id="frames">
<g>
<title>all (415 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.0" y="366.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.24%)</title><rect x="10.0" y="339.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.24%)</title><rect x="10.0" y="323.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.24%)</title><rect x="10.0" y="307.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.24%)</title><rect x="10.0" y="291.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.24%)</title><rect x="10.0" y="275.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.run (256 samples, 61.69%)</title><rect x="12.8" y="339.0" width="727.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.8" y="350.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (256 samples, 61.69%)</title><rect x="12.8" y="323.0" width="727.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.8" y="334.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (256 samples, 61.69%)</title><rect x="12.8" y="307.0" width="727.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.8" y="318.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.48%)</title><rect x="27.1" y="291.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.1" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.48%)</title><rect x="27.1" y="275.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.1" y="286.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (2 samples, 0.48%)</title><rect x="27.1" y="259.0" width="5.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="30.1" y="270.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.24%)</title><rect x="27.1" y="243.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="30.1" y="254.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.24%)</title><rect x="29.9" y="243.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="32.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.48%)</title><rect x="32.7" y="291.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.48%)</title><rect x="32.7" y="275.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="35.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.24%)</title><rect x="38.4" y="291.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.24%)</title><rect x="38.4" y="275.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.24%)</title><rect x="38.4" y="259.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.24%)</title><rect x="38.4" y="243.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="41.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$68/296703085.run (1 samples, 0.24%)</title><rect x="38.4" y="227.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="41.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (94 samples, 22.65%)</title><rect x="41.3" y="291.0" width="267.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.3" y="302.0">java/util/concurrent/ThreadPoolExecu..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (94 samples, 22.65%)</title><rect x="41.3" y="275.0" width="267.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.3" y="286.0">java/util/concurrent/ArrayBlockingQu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (79 samples, 19.04%)</title><rect x="49.8" y="259.0" width="224.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.8" y="270.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.48%)</title><rect x="52.7" y="243.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (1 samples, 0.24%)</title><rect x="55.5" y="227.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="58.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.24%)</title><rect x="58.3" y="243.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="61.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.24%)</title><rect x="58.3" y="227.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.24%)</title><rect x="58.3" y="211.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.24%)</title><rect x="61.2" y="243.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.24%)</title><rect x="61.2" y="227.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.24%)</title><rect x="61.2" y="211.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.24%)</title><rect x="61.2" y="195.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.2" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.24%)</title><rect x="61.2" y="179.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.2" y="190.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.24%)</title><rect x="61.2" y="163.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="64.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (73 samples, 17.59%)</title><rect x="64.0" y="243.0" width="207.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.0" y="254.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (73 samples, 17.59%)</title><rect x="64.0" y="227.0" width="207.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="67.0" y="238.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.24%)</title><rect x="72.6" y="211.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="75.6" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.48%)</title><rect x="75.4" y="211.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="78.4" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.24%)</title><rect x="81.1" y="211.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="84.1" y="222.0"></text>
</g>
<g>
<title>Unsafe_Park (52 samples, 12.53%)</title><rect x="83.9" y="211.0" width="147.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="86.9" y="222.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 3.86%)</title><rect x="86.8" y="195.0" width="45.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="89.8" y="206.0">Park..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.48%)</title><rect x="103.8" y="179.0" width="5.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="106.8" y="190.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 1.20%)</title><rect x="109.5" y="179.0" width="14.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="112.5" y="190.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.48%)</title><rect x="118.0" y="163.0" width="5.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="121.0" y="174.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.72%)</title><rect x="123.7" y="179.0" width="8.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="126.7" y="190.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.24%)</title><rect x="132.3" y="195.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="135.3" y="206.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.24%)</title><rect x="135.1" y="195.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="138.1" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (30 samples, 7.23%)</title><rect x="138.0" y="195.0" width="85.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="141.0" y="206.0">__pthread_..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.24%)</title><rect x="223.3" y="195.0" width="2.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="226.3" y="206.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.24%)</title><rect x="226.1" y="195.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="229.1" y="206.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.24%)</title><rect x="228.9" y="195.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="231.9" y="206.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 3.13%)</title><rect x="231.8" y="211.0" width="36.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="234.8" y="222.0">[un..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.24%)</title><rect x="231.8" y="195.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="234.8" y="206.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.24%)</title><rect x="234.6" y="195.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="237.6" y="206.0"></text>
</g>
<g>
<title>__pthread_cond_wait (10 samples, 2.41%)</title><rect x="237.5" y="195.0" width="28.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="240.5" y="206.0">__..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.24%)</title><rect x="265.9" y="195.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="268.9" y="206.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.24%)</title><rect x="268.7" y="211.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="271.7" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.24%)</title><rect x="271.6" y="243.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.96%)</title><rect x="274.4" y="259.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="277.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.96%)</title><rect x="274.4" y="243.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (4 samples, 0.96%)</title><rect x="274.4" y="227.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.24%)</title><rect x="274.4" y="211.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.48%)</title><rect x="277.3" y="211.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.3" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.24%)</title><rect x="277.3" y="195.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.24%)</title><rect x="280.1" y="195.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="283.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.24%)</title><rect x="280.1" y="179.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="283.1" y="190.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.24%)</title><rect x="280.1" y="163.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="283.1" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.24%)</title><rect x="280.1" y="147.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="283.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.24%)</title><rect x="283.0" y="211.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.24%)</title><rect x="283.0" y="195.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 1.93%)</title><rect x="285.8" y="259.0" width="22.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.8" y="270.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 1.93%)</title><rect x="285.8" y="243.0" width="22.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.8" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 1.93%)</title><rect x="285.8" y="227.0" width="22.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.8" y="238.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.20%)</title><rect x="294.3" y="211.0" width="14.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.3" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 1.20%)</title><rect x="294.3" y="195.0" width="14.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.3" y="206.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.24%)</title><rect x="294.3" y="179.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="297.3" y="190.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.72%)</title><rect x="297.2" y="179.0" width="8.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="300.2" y="190.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.48%)</title><rect x="300.0" y="163.0" width="5.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="303.0" y="174.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.24%)</title><rect x="305.7" y="179.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="308.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.24%)</title><rect x="308.6" y="291.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$68/296703085.run (151 samples, 36.39%)</title><rect x="311.4" y="291.0" width="429.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.4" y="302.0">ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$6..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$put$1 (151 samples, 36.39%)</title><rect x="311.4" y="275.0" width="429.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.4" y="286.0">ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$pu..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.24%)</title><rect x="311.4" y="259.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.4" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.24%)</title><rect x="311.4" y="243.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="314.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (21 samples, 5.06%)</title><rect x="314.2" y="259.0" width="59.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.2" y="270.0">ru/mai..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.48%)</title><rect x="317.1" y="243.0" width="5.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="320.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (18 samples, 4.34%)</title><rect x="322.8" y="243.0" width="51.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.8" y="254.0">ru/ma..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.firstKey (4 samples, 0.96%)</title><rect x="322.8" y="227.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="325.8" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.subLowest (4 samples, 0.96%)</title><rect x="322.8" y="211.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.8" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (4 samples, 0.96%)</title><rect x="322.8" y="195.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.8" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (4 samples, 0.96%)</title><rect x="322.8" y="179.0" width="11.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.8" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.24%)</title><rect x="322.8" y="163.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.8" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (3 samples, 0.72%)</title><rect x="325.6" y="163.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="328.6" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (2 samples, 0.48%)</title><rect x="334.1" y="227.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.1" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.48%)</title><rect x="334.1" y="211.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.1" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.24%)</title><rect x="339.8" y="227.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.8" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.24%)</title><rect x="339.8" y="211.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.8" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (1 samples, 0.24%)</title><rect x="339.8" y="195.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.8" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (1 samples, 0.24%)</title><rect x="339.8" y="179.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="342.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (1 samples, 0.24%)</title><rect x="339.8" y="163.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (11 samples, 2.65%)</title><rect x="342.7" y="227.0" width="31.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.7" y="238.0">ru..</text>
</g>
<g>
<title>java/security/MessageDigest.digest (6 samples, 1.45%)</title><rect x="342.7" y="211.0" width="17.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.7" y="222.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (6 samples, 1.45%)</title><rect x="342.7" y="195.0" width="17.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="345.7" y="206.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (6 samples, 1.45%)</title><rect x="342.7" y="179.0" width="17.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="345.7" y="190.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (6 samples, 1.45%)</title><rect x="342.7" y="163.0" width="17.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.7" y="174.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implDigest (6 samples, 1.45%)</title><rect x="342.7" y="147.0" width="17.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.7" y="158.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bLittle4 (1 samples, 0.24%)</title><rect x="342.7" y="131.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.7" y="142.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implCompress (5 samples, 1.20%)</title><rect x="345.5" y="131.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="348.5" y="142.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (5 samples, 1.20%)</title><rect x="359.7" y="211.0" width="14.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="362.7" y="222.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (5 samples, 1.20%)</title><rect x="359.7" y="195.0" width="14.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.7" y="206.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (2 samples, 0.48%)</title><rect x="359.7" y="179.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="362.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.48%)</title><rect x="359.7" y="163.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="362.7" y="174.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (3 samples, 0.72%)</title><rect x="365.4" y="179.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.4" y="190.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (2 samples, 0.48%)</title><rect x="365.4" y="163.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="368.4" y="174.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (2 samples, 0.48%)</title><rect x="365.4" y="147.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.4" y="158.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (1 samples, 0.24%)</title><rect x="365.4" y="131.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.4" y="142.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (1 samples, 0.24%)</title><rect x="365.4" y="115.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="368.4" y="126.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (1 samples, 0.24%)</title><rect x="365.4" y="99.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.4" y="110.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (1 samples, 0.24%)</title><rect x="365.4" y="83.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="368.4" y="94.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (1 samples, 0.24%)</title><rect x="365.4" y="67.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.4" y="78.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.24%)</title><rect x="368.3" y="131.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.3" y="142.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.24%)</title><rect x="368.3" y="115.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="371.3" y="126.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (1 samples, 0.24%)</title><rect x="371.1" y="163.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.1" y="174.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (1 samples, 0.24%)</title><rect x="371.1" y="147.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.1" y="158.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (1 samples, 0.24%)</title><rect x="371.1" y="131.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="374.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (19 samples, 4.58%)</title><rect x="374.0" y="259.0" width="54.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.0" y="270.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.24%)</title><rect x="374.0" y="243.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.24%)</title><rect x="374.0" y="227.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.24%)</title><rect x="374.0" y="211.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="377.0" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.24%)</title><rect x="374.0" y="195.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.0" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.24%)</title><rect x="374.0" y="179.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.0" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.24%)</title><rect x="374.0" y="163.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="377.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (18 samples, 4.34%)</title><rect x="376.8" y="243.0" width="51.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.8" y="254.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (8 samples, 1.93%)</title><rect x="376.8" y="227.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.8" y="238.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (8 samples, 1.93%)</title><rect x="376.8" y="211.0" width="22.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.8" y="222.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 1.93%)</title><rect x="376.8" y="195.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.8" y="206.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.96%)</title><rect x="388.2" y="179.0" width="11.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.96%)</title><rect x="388.2" y="163.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="391.2" y="174.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.96%)</title><rect x="388.2" y="147.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="391.2" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (10 samples, 2.41%)</title><rect x="399.5" y="227.0" width="28.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="402.5" y="238.0">ja..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.24%)</title><rect x="405.2" y="211.0" width="2.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="408.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (6 samples, 1.45%)</title><rect x="408.1" y="211.0" width="17.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (3 samples, 0.72%)</title><rect x="408.1" y="195.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="411.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (3 samples, 0.72%)</title><rect x="408.1" y="179.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="411.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.24%)</title><rect x="413.8" y="163.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.72%)</title><rect x="416.6" y="195.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.48%)</title><rect x="419.4" y="179.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="422.4" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.48%)</title><rect x="419.4" y="163.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="422.4" y="174.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.48%)</title><rect x="419.4" y="147.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="422.4" y="158.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.24%)</title><rect x="422.3" y="131.0" width="2.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="425.3" y="142.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.24%)</title><rect x="425.1" y="211.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="428.1" y="222.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="425.1" y="195.0" width="2.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="428.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.proxy (88 samples, 21.20%)</title><rect x="428.0" y="259.0" width="250.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="431.0" y="270.0">ru/mail/polis/service/re1nex/ApiC..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (72 samples, 17.35%)</title><rect x="428.0" y="243.0" width="204.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="431.0" y="254.0">one/nio/http/HttpClient.inv..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (72 samples, 17.35%)</title><rect x="428.0" y="227.0" width="204.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.0" y="238.0">one/nio/http/HttpClient.inv..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (28 samples, 6.75%)</title><rect x="433.7" y="211.0" width="79.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="436.7" y="222.0">one/nio/h..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.48%)</title><rect x="442.2" y="195.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="445.2" y="206.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.24%)</title><rect x="445.0" y="179.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="448.0" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.24%)</title><rect x="445.0" y="163.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="448.0" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.24%)</title><rect x="445.0" y="147.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="448.0" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.24%)</title><rect x="445.0" y="131.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="448.0" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.24%)</title><rect x="445.0" y="115.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="448.0" y="126.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.24%)</title><rect x="445.0" y="99.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="448.0" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.24%)</title><rect x="445.0" y="83.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="448.0" y="94.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.24%)</title><rect x="445.0" y="67.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="448.0" y="78.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.24%)</title><rect x="445.0" y="51.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="448.0" y="62.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.24%)</title><rect x="445.0" y="35.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="448.0" y="46.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (23 samples, 5.54%)</title><rect x="447.9" y="195.0" width="65.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.9" y="206.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (9 samples, 2.17%)</title><rect x="450.7" y="179.0" width="25.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="453.7" y="190.0">J..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.24%)</title><rect x="456.4" y="163.0" width="2.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="459.4" y="174.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.24%)</title><rect x="459.3" y="163.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="462.3" y="174.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.24%)</title><rect x="462.1" y="163.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="465.1" y="174.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.72%)</title><rect x="464.9" y="163.0" width="8.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="467.9" y="174.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.24%)</title><rect x="467.8" y="147.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="470.8" y="158.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.24%)</title><rect x="470.6" y="147.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="473.6" y="158.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.24%)</title><rect x="473.5" y="163.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="476.5" y="174.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.24%)</title><rect x="476.3" y="179.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="479.3" y="190.0"></text>
</g>
<g>
<title>recv (12 samples, 2.89%)</title><rect x="479.2" y="179.0" width="34.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="482.2" y="190.0">recv</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (12 samples, 2.89%)</title><rect x="513.3" y="211.0" width="34.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="516.3" y="222.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (9 samples, 2.17%)</title><rect x="513.3" y="195.0" width="25.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="516.3" y="206.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 1.45%)</title><rect x="521.8" y="179.0" width="17.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="524.8" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.96%)</title><rect x="527.5" y="163.0" width="11.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.5" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.72%)</title><rect x="538.9" y="195.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="541.9" y="206.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.72%)</title><rect x="538.9" y="179.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="541.9" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.72%)</title><rect x="538.9" y="163.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="541.9" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="544.6" y="147.0" width="2.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="547.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (3 samples, 0.72%)</title><rect x="547.4" y="211.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="550.4" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="553.1" y="195.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="556.1" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.24%)</title><rect x="555.9" y="211.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="558.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.24%)</title><rect x="555.9" y="195.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="558.9" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.24%)</title><rect x="555.9" y="179.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="558.9" y="190.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (7 samples, 1.69%)</title><rect x="558.8" y="211.0" width="19.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="561.8" y="222.0"></text>
</g>
<g>
<title>setsockopt (4 samples, 0.96%)</title><rect x="567.3" y="195.0" width="11.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="570.3" y="206.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (11 samples, 2.65%)</title><rect x="578.7" y="211.0" width="31.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="581.7" y="222.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (6 samples, 1.45%)</title><rect x="581.5" y="195.0" width="17.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="584.5" y="206.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.72%)</title><rect x="590.0" y="179.0" width="8.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="593.0" y="190.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.48%)</title><rect x="590.0" y="163.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="593.0" y="174.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.24%)</title><rect x="595.7" y="163.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="598.7" y="174.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.24%)</title><rect x="595.7" y="147.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="598.7" y="158.0"></text>
</g>
<g>
<title>__send (4 samples, 0.96%)</title><rect x="598.6" y="195.0" width="11.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="601.6" y="206.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (7 samples, 1.69%)</title><rect x="610.0" y="211.0" width="19.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.0" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="627.0" y="195.0" width="2.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="630.0" y="206.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.24%)</title><rect x="629.9" y="211.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="632.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (16 samples, 3.86%)</title><rect x="632.7" y="243.0" width="45.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.7" y="254.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 3.37%)</title><rect x="632.7" y="227.0" width="39.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.7" y="238.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.48%)</title><rect x="635.5" y="211.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.96%)</title><rect x="641.2" y="211.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.2" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.72%)</title><rect x="644.1" y="195.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.1" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.72%)</title><rect x="644.1" y="179.0" width="8.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.1" y="190.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.72%)</title><rect x="644.1" y="163.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="647.1" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 1.69%)</title><rect x="652.6" y="211.0" width="19.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="655.6" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 1.69%)</title><rect x="652.6" y="195.0" width="19.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="655.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.24%)</title><rect x="655.4" y="179.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="658.4" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (5 samples, 1.20%)</title><rect x="658.3" y="179.0" width="14.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="661.3" y="190.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (5 samples, 1.20%)</title><rect x="658.3" y="163.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="661.3" y="174.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.72%)</title><rect x="658.3" y="147.0" width="8.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="661.3" y="158.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.24%)</title><rect x="661.1" y="131.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="664.1" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.24%)</title><rect x="664.0" y="131.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="667.0" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.24%)</title><rect x="664.0" y="115.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="667.0" y="126.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.24%)</title><rect x="666.8" y="147.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="669.8" y="158.0"></text>
</g>
<g>
<title>__send (1 samples, 0.24%)</title><rect x="669.7" y="147.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="672.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.48%)</title><rect x="672.5" y="227.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="675.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.24%)</title><rect x="675.3" y="211.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.3" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.24%)</title><rect x="675.3" y="195.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="678.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (22 samples, 5.30%)</title><rect x="678.2" y="259.0" width="62.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.2" y="270.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (21 samples, 5.06%)</title><rect x="681.0" y="243.0" width="59.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="684.0" y="254.0">one/ni..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.24%)</title><rect x="686.7" y="227.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="689.7" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.24%)</title><rect x="686.7" y="211.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="689.7" y="222.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.24%)</title><rect x="686.7" y="195.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="689.7" y="206.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.24%)</title><rect x="686.7" y="179.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="689.7" y="190.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.48%)</title><rect x="689.6" y="227.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="692.6" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.48%)</title><rect x="689.6" y="211.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="692.6" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.48%)</title><rect x="689.6" y="195.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="692.6" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.48%)</title><rect x="689.6" y="179.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="692.6" y="190.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.48%)</title><rect x="689.6" y="163.0" width="5.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="692.6" y="174.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.48%)</title><rect x="689.6" y="147.0" width="5.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="692.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 3.37%)</title><rect x="695.3" y="227.0" width="39.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="698.3" y="238.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.48%)</title><rect x="698.1" y="211.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="701.1" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.24%)</title><rect x="700.9" y="195.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="703.9" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.24%)</title><rect x="700.9" y="179.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="703.9" y="190.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.24%)</title><rect x="700.9" y="163.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="703.9" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 2.65%)</title><rect x="703.8" y="211.0" width="31.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="706.8" y="222.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 2.65%)</title><rect x="703.8" y="195.0" width="31.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="706.8" y="206.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.24%)</title><rect x="703.8" y="179.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="706.8" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 2.41%)</title><rect x="706.6" y="179.0" width="28.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="709.6" y="190.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (10 samples, 2.41%)</title><rect x="706.6" y="163.0" width="28.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.6" y="174.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.96%)</title><rect x="712.3" y="147.0" width="11.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="715.3" y="158.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.24%)</title><rect x="715.2" y="131.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="718.2" y="142.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.24%)</title><rect x="718.0" y="131.0" width="2.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="721.0" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.24%)</title><rect x="720.8" y="131.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="723.8" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.24%)</title><rect x="720.8" y="115.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="723.8" y="126.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.48%)</title><rect x="723.7" y="147.0" width="5.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="726.7" y="158.0"></text>
</g>
<g>
<title>__send (2 samples, 0.48%)</title><rect x="729.4" y="147.0" width="5.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="732.4" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.48%)</title><rect x="735.1" y="227.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="738.1" y="238.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (138 samples, 33.25%)</title><rect x="740.7" y="339.0" width="392.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="743.7" y="350.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (48 samples, 11.57%)</title><rect x="749.3" y="323.0" width="136.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="752.3" y="334.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (48 samples, 11.57%)</title><rect x="749.3" y="307.0" width="136.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="752.3" y="318.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 1.20%)</title><rect x="757.8" y="291.0" width="14.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="760.8" y="302.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (5 samples, 1.20%)</title><rect x="772.0" y="291.0" width="14.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="775.0" y="302.0"></text>
</g>
<g>
<title>clock_gettime (17 samples, 4.10%)</title><rect x="786.2" y="291.0" width="48.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="789.2" y="302.0">cloc..</text>
</g>
<g>
<title>clock_gettime (2 samples, 0.48%)</title><rect x="828.9" y="275.0" width="5.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="831.9" y="286.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.48%)</title><rect x="828.9" y="259.0" width="5.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="831.9" y="270.0"></text>
</g>
<g>
<title>epoll_wait (18 samples, 4.34%)</title><rect x="834.6" y="291.0" width="51.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="837.6" y="302.0">epoll..</text>
</g>
<g>
<title>one/nio/net/Session.process (85 samples, 20.48%)</title><rect x="885.8" y="323.0" width="241.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="888.8" y="334.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (81 samples, 19.52%)</title><rect x="894.3" y="307.0" width="230.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="897.3" y="318.0">one/nio/http/HttpSession.proce..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (61 samples, 14.70%)</title><rect x="897.1" y="291.0" width="173.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.1" y="302.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (30 samples, 7.23%)</title><rect x="956.8" y="275.0" width="85.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="959.8" y="286.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (30 samples, 7.23%)</title><rect x="956.8" y="259.0" width="85.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="959.8" y="270.0">one/nio/ht..</text>
</g>
<g>
<title>RequestHandler2_put.handleRequest (26 samples, 6.27%)</title><rect x="956.8" y="243.0" width="74.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="959.8" y="254.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (4 samples, 0.96%)</title><rect x="956.8" y="227.0" width="11.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="959.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.96%)</title><rect x="956.8" y="211.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="959.8" y="222.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.48%)</title><rect x="962.5" y="195.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="965.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.put (22 samples, 5.30%)</title><rect x="968.2" y="227.0" width="62.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="971.2" y="238.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseAsyncService.executeTask (21 samples, 5.06%)</title><rect x="971.1" y="211.0" width="59.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="974.1" y="222.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (21 samples, 5.06%)</title><rect x="971.1" y="195.0" width="59.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="974.1" y="206.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (20 samples, 4.82%)</title><rect x="971.1" y="179.0" width="56.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="974.1" y="190.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.24%)</title><rect x="971.1" y="163.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="974.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.24%)</title><rect x="971.1" y="147.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="974.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.24%)</title><rect x="971.1" y="131.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="974.1" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.24%)</title><rect x="971.1" y="115.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="974.1" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 4.58%)</title><rect x="973.9" y="163.0" width="54.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="976.9" y="174.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 4.58%)</title><rect x="973.9" y="147.0" width="54.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="976.9" y="158.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 4.58%)</title><rect x="973.9" y="131.0" width="54.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="976.9" y="142.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 3.61%)</title><rect x="985.3" y="115.0" width="42.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="988.3" y="126.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (15 samples, 3.61%)</title><rect x="985.3" y="99.0" width="42.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="988.3" y="110.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 2.17%)</title><rect x="985.3" y="83.0" width="25.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="988.3" y="94.0">U..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.24%)</title><rect x="988.1" y="67.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="991.1" y="78.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.24%)</title><rect x="991.0" y="67.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="994.0" y="78.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.48%)</title><rect x="993.8" y="67.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.8" y="78.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.24%)</title><rect x="999.5" y="67.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1002.5" y="78.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.24%)</title><rect x="1002.3" y="67.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1005.3" y="78.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.24%)</title><rect x="1005.2" y="67.0" width="2.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1008.2" y="78.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.24%)</title><rect x="1008.0" y="67.0" width="2.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1011.0" y="78.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.72%)</title><rect x="1010.9" y="83.0" width="8.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1013.9" y="94.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.72%)</title><rect x="1019.4" y="83.0" width="8.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1022.4" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.reject (1 samples, 0.24%)</title><rect x="1027.9" y="179.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1030.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$AbortPolicy.rejectedExecution (1 samples, 0.24%)</title><rect x="1027.9" y="163.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1030.9" y="174.0"></text>
</g>
<g>
<title>java/lang/Object.toString (1 samples, 0.24%)</title><rect x="1027.9" y="147.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1030.9" y="158.0"></text>
</g>
<g>
<title>java/lang/Integer.toHexString (1 samples, 0.24%)</title><rect x="1027.9" y="131.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1030.9" y="142.0"></text>
</g>
<g>
<title>java/lang/Integer.toUnsignedString0 (1 samples, 0.24%)</title><rect x="1027.9" y="115.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1030.9" y="126.0"></text>
</g>
<g>
<title>java/lang/Integer.formatUnsignedInt (1 samples, 0.24%)</title><rect x="1027.9" y="99.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1030.9" y="110.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.96%)</title><rect x="1030.8" y="243.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1033.8" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.96%)</title><rect x="1030.8" y="227.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1033.8" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.48%)</title><rect x="1030.8" y="211.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1033.8" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.48%)</title><rect x="1036.5" y="211.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1039.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.48%)</title><rect x="1036.5" y="195.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.5" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.48%)</title><rect x="1036.5" y="179.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1039.5" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 1.45%)</title><rect x="1042.1" y="275.0" width="17.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1045.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.48%)</title><rect x="1047.8" y="259.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1050.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.48%)</title><rect x="1047.8" y="243.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1050.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.48%)</title><rect x="1047.8" y="227.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1050.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.48%)</title><rect x="1047.8" y="211.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1050.8" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.24%)</title><rect x="1053.5" y="259.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1056.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.24%)</title><rect x="1056.4" y="259.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1059.4" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.96%)</title><rect x="1059.2" y="275.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1062.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.48%)</title><rect x="1059.2" y="259.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1062.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.48%)</title><rect x="1059.2" y="243.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1062.2" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.48%)</title><rect x="1064.9" y="259.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1067.9" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.48%)</title><rect x="1064.9" y="243.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1067.9" y="254.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.24%)</title><rect x="1064.9" y="227.0" width="2.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1067.9" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="1067.7" y="227.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1070.7" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (19 samples, 4.58%)</title><rect x="1070.6" y="291.0" width="54.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1073.6" y="302.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (16 samples, 3.86%)</title><rect x="1073.4" y="275.0" width="45.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1076.4" y="286.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (9 samples, 2.17%)</title><rect x="1073.4" y="259.0" width="25.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1076.4" y="270.0">J..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.48%)</title><rect x="1076.3" y="243.0" width="5.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1079.3" y="254.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 1.45%)</title><rect x="1082.0" y="243.0" width="17.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1085.0" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.24%)</title><rect x="1084.8" y="227.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1087.8" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.48%)</title><rect x="1087.6" y="227.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.6" y="238.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.48%)</title><rect x="1093.3" y="227.0" width="5.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1096.3" y="238.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.24%)</title><rect x="1099.0" y="259.0" width="2.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1102.0" y="270.0"></text>
</g>
<g>
<title>recv (6 samples, 1.45%)</title><rect x="1101.9" y="259.0" width="17.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1104.9" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.48%)</title><rect x="1118.9" y="275.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1121.9" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.24%)</title><rect x="1124.6" y="307.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.6" y="318.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="1124.6" y="291.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1127.6" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.48%)</title><rect x="1127.4" y="323.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.4" y="334.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.24%)</title><rect x="1130.3" y="307.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1133.3" y="318.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="1130.3" y="291.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1133.3" y="302.0"></text>
</g>
<g>
<title>start_thread (20 samples, 4.82%)</title><rect x="1133.1" y="339.0" width="56.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1136.1" y="350.0">start_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (20 samples, 4.82%)</title><rect x="1133.1" y="323.0" width="56.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1136.1" y="334.0">thread..</text>
</g>
<g>
<title>Thread::call_run() (20 samples, 4.82%)</title><rect x="1133.1" y="307.0" width="56.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.1" y="318.0">Thread..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 4.82%)</title><rect x="1133.1" y="291.0" width="56.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="302.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 4.58%)</title><rect x="1133.1" y="275.0" width="54.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="286.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (18 samples, 4.34%)</title><rect x="1133.1" y="259.0" width="51.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.1" y="270.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (17 samples, 4.10%)</title><rect x="1136.0" y="243.0" width="48.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.0" y="254.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (13 samples, 3.13%)</title><rect x="1147.3" y="227.0" width="37.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.3" y="238.0">G1P..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.96%)</title><rect x="1172.9" y="211.0" width="11.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.9" y="222.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.24%)</title><rect x="1184.3" y="259.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="270.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.24%)</title><rect x="1187.2" y="275.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="286.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.24%)</title><rect x="1187.2" y="259.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.66] (1 samples, 0.24%)</title><rect x="1187.2" y="243.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.2" y="254.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.24%)</title><rect x="1187.2" y="227.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="238.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.24%)</title><rect x="1187.2" y="211.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.2" y="222.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.24%)</title><rect x="1187.2" y="195.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="206.0"></text>
</g>
</g>
</svg>
