<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="421"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="421"> </text>
<g id="frames">
<g>
<title>all (1,255 samples, 100.00%)</title><rect x="10.0" y="387.0" width="1180.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="398.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.08%)</title><rect x="10.0" y="355.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.32%)</title><rect x="10.9" y="371.0" width="3.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.9" y="382.0"></text>
</g>
<g>
<title>sha256_implCompress (4 samples, 0.32%)</title><rect x="10.9" y="355.0" width="3.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.9" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (774 samples, 61.67%)</title><rect x="14.7" y="371.0" width="727.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.7" y="382.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (774 samples, 61.67%)</title><rect x="14.7" y="355.0" width="727.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.7" y="366.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (774 samples, 61.67%)</title><rect x="14.7" y="339.0" width="727.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="350.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="14.7" y="323.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.08%)</title><rect x="15.6" y="323.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="15.6" y="307.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.08%)</title><rect x="15.6" y="291.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="15.6" y="275.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.6" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.08%)</title><rect x="15.6" y="259.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.6" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.08%)</title><rect x="15.6" y="243.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.08%)</title><rect x="16.6" y="323.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="16.6" y="307.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (242 samples, 19.28%)</title><rect x="17.5" y="323.0" width="227.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.5" y="334.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (235 samples, 18.73%)</title><rect x="20.3" y="307.0" width="221.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.3" y="318.0">java/util/concurrent/ArrayBlo..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (6 samples, 0.48%)</title><rect x="21.3" y="291.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.48%)</title><rect x="21.3" y="275.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.48%)</title><rect x="21.3" y="259.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.48%)</title><rect x="21.3" y="243.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.16%)</title><rect x="25.0" y="227.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (204 samples, 16.25%)</title><rect x="26.9" y="291.0" width="191.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.9" y="302.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.40%)</title><rect x="29.7" y="275.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (5 samples, 0.40%)</title><rect x="34.4" y="275.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="37.4" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.08%)</title><rect x="37.3" y="259.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="40.3" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="38.2" y="259.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="41.2" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="38.2" y="243.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="41.2" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="38.2" y="227.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="41.2" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="38.2" y="211.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="41.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.48%)</title><rect x="39.1" y="275.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.08%)</title><rect x="44.8" y="275.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="44.8" y="259.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="44.8" y="243.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.08%)</title><rect x="45.7" y="275.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (183 samples, 14.58%)</title><rect x="46.7" y="275.0" width="172.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.7" y="286.0">java/util/concurrent/l..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (183 samples, 14.58%)</title><rect x="46.7" y="259.0" width="172.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.7" y="270.0">jdk/internal/misc/Unsa..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="50.4" y="243.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="53.4" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.32%)</title><rect x="51.4" y="243.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="54.4" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (2 samples, 0.16%)</title><rect x="55.1" y="243.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="58.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park (130 samples, 10.36%)</title><rect x="57.0" y="243.0" width="122.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="60.0" y="254.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.08%)</title><rect x="65.5" y="227.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="68.5" y="238.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.16%)</title><rect x="66.4" y="227.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="69.4" y="238.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.48%)</title><rect x="68.3" y="227.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="71.3" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (38 samples, 3.03%)</title><rect x="73.9" y="227.0" width="35.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="76.9" y="238.0">Par..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.08%)</title><rect x="89.9" y="211.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="92.9" y="222.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.40%)</title><rect x="90.9" y="211.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="93.9" y="222.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.16%)</title><rect x="93.7" y="195.0" width="1.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="96.7" y="206.0"></text>
</g>
<g>
<title>__tls_get_addr (14 samples, 1.12%)</title><rect x="95.6" y="211.0" width="13.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="98.6" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.08%)</title><rect x="108.7" y="211.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="111.7" y="222.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="109.7" y="227.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="112.7" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.16%)</title><rect x="110.6" y="227.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="113.6" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (2 samples, 0.16%)</title><rect x="112.5" y="227.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="115.5" y="238.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (5 samples, 0.40%)</title><rect x="114.4" y="227.0" width="4.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="117.4" y="238.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 0.24%)</title><rect x="119.1" y="227.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="122.1" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (49 samples, 3.90%)</title><rect x="121.9" y="227.0" width="46.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="124.9" y="238.0">__pt..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.08%)</title><rect x="168.0" y="227.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="171.0" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="168.9" y="227.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="171.9" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.40%)</title><rect x="169.8" y="227.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="172.8" y="238.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (4 samples, 0.32%)</title><rect x="174.5" y="227.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="177.5" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.08%)</title><rect x="178.3" y="227.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="181.3" y="238.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 2.87%)</title><rect x="179.2" y="243.0" width="33.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="182.2" y="254.0">[u..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (3 samples, 0.24%)</title><rect x="179.2" y="227.0" width="2.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="182.2" y="238.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (4 samples, 0.32%)</title><rect x="182.1" y="227.0" width="3.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="185.1" y="238.0"></text>
</g>
<g>
<title>__pthread_cond_wait (26 samples, 2.07%)</title><rect x="185.8" y="227.0" width="24.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="188.8" y="238.0">_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.16%)</title><rect x="210.3" y="227.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="213.3" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="212.2" y="227.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="215.2" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 0.48%)</title><rect x="213.1" y="243.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="216.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.08%)</title><rect x="218.7" y="291.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.08%)</title><rect x="218.7" y="275.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.08%)</title><rect x="218.7" y="259.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.08%)</title><rect x="218.7" y="243.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.08%)</title><rect x="218.7" y="227.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.7" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="218.7" y="211.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.7" y="222.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="218.7" y="195.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="221.7" y="206.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.08%)</title><rect x="218.7" y="179.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="221.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 1.83%)</title><rect x="219.7" y="291.0" width="21.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.7" y="302.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 1.83%)</title><rect x="219.7" y="275.0" width="21.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.7" y="286.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 1.83%)</title><rect x="219.7" y="259.0" width="21.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.7" y="270.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 1.83%)</title><rect x="219.7" y="243.0" width="21.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.7" y="254.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (21 samples, 1.67%)</title><rect x="221.6" y="227.0" width="19.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.6" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.08%)</title><rect x="223.4" y="211.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="226.4" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark (12 samples, 0.96%)</title><rect x="224.4" y="211.0" width="11.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="227.4" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="225.3" y="195.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="228.3" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.08%)</title><rect x="226.3" y="195.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="229.3" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.08%)</title><rect x="227.2" y="195.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="230.2" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.32%)</title><rect x="228.1" y="195.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="231.1" y="206.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.08%)</title><rect x="231.9" y="195.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="234.9" y="206.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.08%)</title><rect x="232.8" y="195.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="235.8" y="206.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.16%)</title><rect x="233.8" y="195.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="236.8" y="206.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.48%)</title><rect x="235.7" y="211.0" width="5.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="238.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.08%)</title><rect x="241.3" y="307.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.08%)</title><rect x="242.2" y="307.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$68/785022578.run (2 samples, 0.16%)</title><rect x="243.2" y="307.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$68/785022578.run (529 samples, 42.15%)</title><rect x="245.1" y="323.0" width="497.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.1" y="334.0">ru/mail/polis/service/re1nex/BaseService$$Lambda$68/785022578.run</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1 (529 samples, 42.15%)</title><rect x="245.1" y="307.0" width="497.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.1" y="318.0">ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 1.04%)</title><rect x="245.1" y="291.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.48%)</title><rect x="248.8" y="275.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.48%)</title><rect x="248.8" y="259.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.24%)</title><rect x="254.5" y="275.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.24%)</title><rect x="254.5" y="259.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.5" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="256.3" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="259.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponseLocal (129 samples, 10.28%)</title><rect x="257.3" y="291.0" width="121.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.3" y="302.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (129 samples, 10.28%)</title><rect x="257.3" y="275.0" width="121.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.3" y="286.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (91 samples, 7.25%)</title><rect x="257.3" y="259.0" width="85.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="260.3" y="270.0">ru/mail/po..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="257.3" y="243.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="260.3" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="257.3" y="227.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="260.3" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="257.3" y="211.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="260.3" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="257.3" y="195.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="260.3" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="257.3" y="179.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="260.3" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.08%)</title><rect x="257.3" y="163.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="260.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.16%)</title><rect x="258.2" y="243.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.16%)</title><rect x="258.2" y="227.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="259.2" y="211.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="259.2" y="195.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="262.2" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="259.2" y="179.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.2" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.08%)</title><rect x="260.1" y="243.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.1" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="260.1" y="227.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="263.1" y="238.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.08%)</title><rect x="260.1" y="211.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="263.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (81 samples, 6.45%)</title><rect x="261.0" y="243.0" width="76.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.0" y="254.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (2 samples, 0.16%)</title><rect x="262.9" y="227.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="265.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.16%)</title><rect x="262.9" y="211.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.16%)</title><rect x="262.9" y="195.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.9" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.08%)</title><rect x="262.9" y="179.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="263.9" y="179.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.08%)</title><rect x="263.9" y="163.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.9" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.08%)</title><rect x="263.9" y="147.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (77 samples, 6.14%)</title><rect x="264.8" y="227.0" width="72.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.8" y="238.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.16%)</title><rect x="266.7" y="211.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="269.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.16%)</title><rect x="266.7" y="195.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.16%)</title><rect x="266.7" y="179.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.7" y="190.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="266.7" y="163.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="269.7" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="267.6" y="163.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="270.6" y="174.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="267.6" y="147.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="270.6" y="158.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="267.6" y="131.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="270.6" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (45 samples, 3.59%)</title><rect x="268.6" y="211.0" width="42.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.6" y="222.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="268.6" y="195.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="268.6" y="179.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.6" y="190.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.08%)</title><rect x="268.6" y="163.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (44 samples, 3.51%)</title><rect x="269.5" y="195.0" width="41.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.5" y="206.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="284.5" y="179.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="287.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (27 samples, 2.15%)</title><rect x="285.5" y="179.0" width="25.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.5" y="190.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (27 samples, 2.15%)</title><rect x="285.5" y="163.0" width="25.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.5" y="174.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (23 samples, 1.83%)</title><rect x="289.3" y="147.0" width="21.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.3" y="158.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 1.12%)</title><rect x="289.3" y="131.0" width="13.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.3" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.40%)</title><rect x="297.7" y="115.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.7" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.08%)</title><rect x="301.5" y="99.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="304.5" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 0.72%)</title><rect x="302.4" y="131.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.4" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (9 samples, 0.72%)</title><rect x="302.4" y="115.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.4" y="126.0"></text>
</g>
<g>
<title>vectorizedMismatch (8 samples, 0.64%)</title><rect x="303.4" y="99.0" width="7.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="306.4" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (27 samples, 2.15%)</title><rect x="310.9" y="211.0" width="25.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.9" y="222.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (27 samples, 2.15%)</title><rect x="310.9" y="195.0" width="25.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.9" y="206.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (4 samples, 0.32%)</title><rect x="312.8" y="179.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="315.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.08%)</title><rect x="314.6" y="163.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.08%)</title><rect x="315.6" y="163.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="315.6" y="147.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="315.6" y="131.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="318.6" y="142.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.08%)</title><rect x="315.6" y="115.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (21 samples, 1.67%)</title><rect x="316.5" y="179.0" width="19.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.5" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (21 samples, 1.67%)</title><rect x="316.5" y="163.0" width="19.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (20 samples, 1.59%)</title><rect x="317.5" y="147.0" width="18.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.5" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.24%)</title><rect x="318.4" y="131.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.4" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.16%)</title><rect x="321.2" y="131.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.2" y="142.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (13 samples, 1.04%)</title><rect x="323.1" y="131.0" width="12.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="326.1" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.24%)</title><rect x="332.5" y="115.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.5" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.16%)</title><rect x="333.4" y="99.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="336.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.08%)</title><rect x="335.3" y="131.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="338.3" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.08%)</title><rect x="335.3" y="115.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.3" y="126.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.08%)</title><rect x="335.3" y="99.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="338.3" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.set (1 samples, 0.08%)</title><rect x="336.3" y="211.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="339.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (6 samples, 0.48%)</title><rect x="337.2" y="243.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="340.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.48%)</title><rect x="337.2" y="227.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.48%)</title><rect x="337.2" y="211.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.2" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="337.2" y="195.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="340.2" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="337.2" y="179.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="340.2" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.16%)</title><rect x="337.2" y="163.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="340.2" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.16%)</title><rect x="337.2" y="147.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="340.2" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.16%)</title><rect x="337.2" y="131.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="340.2" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.08%)</title><rect x="337.2" y="115.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="340.2" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.08%)</title><rect x="337.2" y="99.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="340.2" y="110.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="337.2" y="83.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="340.2" y="94.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="337.2" y="67.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="340.2" y="78.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.08%)</title><rect x="337.2" y="51.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="340.2" y="62.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.08%)</title><rect x="337.2" y="35.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="340.2" y="46.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="338.1" y="115.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="341.1" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.32%)</title><rect x="339.1" y="195.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.1" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.32%)</title><rect x="339.1" y="179.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.1" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.32%)</title><rect x="339.1" y="163.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="342.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.08%)</title><rect x="341.0" y="147.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.08%)</title><rect x="341.0" y="131.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.0" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.08%)</title><rect x="341.0" y="115.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="344.0" y="126.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="341.0" y="99.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="344.0" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.08%)</title><rect x="341.9" y="147.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="344.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.08%)</title><rect x="341.9" y="131.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (38 samples, 3.03%)</title><rect x="342.8" y="259.0" width="35.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="345.8" y="270.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (38 samples, 3.03%)</title><rect x="342.8" y="243.0" width="35.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="345.8" y="254.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.16%)</title><rect x="346.6" y="227.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="349.6" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.16%)</title><rect x="346.6" y="211.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="349.6" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.16%)</title><rect x="346.6" y="195.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.6" y="206.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="346.6" y="179.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="349.6" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="347.5" y="179.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="350.5" y="190.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="347.5" y="163.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="350.5" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (32 samples, 2.55%)</title><rect x="348.5" y="227.0" width="30.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.5" y="238.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.64%)</title><rect x="349.4" y="211.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="352.4" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.48%)</title><rect x="351.3" y="195.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="354.3" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.48%)</title><rect x="351.3" y="179.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.48%)</title><rect x="351.3" y="163.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="354.3" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="356.0" y="147.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="359.0" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (23 samples, 1.83%)</title><rect x="356.9" y="211.0" width="21.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="359.9" y="222.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (23 samples, 1.83%)</title><rect x="356.9" y="195.0" width="21.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.9" y="206.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (23 samples, 1.83%)</title><rect x="356.9" y="179.0" width="21.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.9" y="190.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (22 samples, 1.75%)</title><rect x="357.9" y="163.0" width="20.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="360.9" y="174.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (13 samples, 1.04%)</title><rect x="359.8" y="147.0" width="12.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="362.8" y="158.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="361.6" y="131.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="364.6" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.72%)</title><rect x="362.6" y="131.0" width="8.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="365.6" y="142.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.08%)</title><rect x="363.5" y="115.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="366.5" y="126.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.08%)</title><rect x="364.5" y="115.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="367.5" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.24%)</title><rect x="365.4" y="115.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="368.4" y="126.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.24%)</title><rect x="368.2" y="115.0" width="2.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="371.2" y="126.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.08%)</title><rect x="370.1" y="99.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="373.1" y="110.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.08%)</title><rect x="371.1" y="131.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="374.1" y="142.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="372.0" y="147.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="375.0" y="158.0"></text>
</g>
<g>
<title>__send (6 samples, 0.48%)</title><rect x="372.9" y="147.0" width="5.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="375.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.sendReplica (387 samples, 30.84%)</title><rect x="378.6" y="291.0" width="363.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.6" y="302.0">ru/mail/polis/service/re1nex/ApiControllerImpl.se..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.24%)</title><rect x="378.6" y="275.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="381.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendReplica (384 samples, 30.60%)</title><rect x="381.4" y="275.0" width="361.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.4" y="286.0">ru/mail/polis/service/re1nex/ApiController.sendRe..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="381.4" y="259.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="384.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.severalNodesForKey (48 samples, 3.82%)</title><rect x="382.3" y="259.0" width="45.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="385.3" y="270.0">ru/m..</text>
</g>
<g>
<title>java/util/TreeMap.tailMap (3 samples, 0.24%)</title><rect x="382.3" y="243.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.3" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (3 samples, 0.24%)</title><rect x="382.3" y="227.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="385.3" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (3 samples, 0.24%)</title><rect x="382.3" y="211.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.3" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (3 samples, 0.24%)</title><rect x="382.3" y="195.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.3" y="206.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (3 samples, 0.24%)</title><rect x="385.2" y="243.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.2" y="254.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (2 samples, 0.16%)</title><rect x="386.1" y="227.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="389.1" y="238.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="387.0" y="211.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.0" y="222.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.08%)</title><rect x="387.0" y="195.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (21 samples, 1.67%)</title><rect x="388.0" y="243.0" width="19.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="391.0" y="254.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (2 samples, 0.16%)</title><rect x="388.0" y="227.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="391.0" y="238.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (2 samples, 0.16%)</title><rect x="388.0" y="211.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="391.0" y="222.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (2 samples, 0.16%)</title><rect x="388.0" y="195.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="391.0" y="206.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (2 samples, 0.16%)</title><rect x="388.0" y="179.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.0" y="190.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (2 samples, 0.16%)</title><rect x="388.0" y="163.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="391.0" y="174.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (2 samples, 0.16%)</title><rect x="388.0" y="147.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="391.0" y="158.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompressCheck (2 samples, 0.16%)</title><rect x="388.0" y="131.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="391.0" y="142.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="388.9" y="115.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="391.9" y="126.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (19 samples, 1.51%)</title><rect x="389.9" y="227.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.9" y="238.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (19 samples, 1.51%)</title><rect x="389.9" y="211.0" width="17.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.9" y="222.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (1 samples, 0.08%)</title><rect x="389.9" y="195.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="389.9" y="179.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="392.9" y="190.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (18 samples, 1.43%)</title><rect x="390.8" y="195.0" width="16.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="393.8" y="206.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (8 samples, 0.64%)</title><rect x="390.8" y="179.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.8" y="190.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (5 samples, 0.40%)</title><rect x="393.6" y="163.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.6" y="174.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (1 samples, 0.08%)</title><rect x="393.6" y="147.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.6" y="158.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (1 samples, 0.08%)</title><rect x="393.6" y="131.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="396.6" y="142.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (1 samples, 0.08%)</title><rect x="393.6" y="115.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="396.6" y="126.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (1 samples, 0.08%)</title><rect x="393.6" y="99.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="396.6" y="110.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (1 samples, 0.08%)</title><rect x="393.6" y="83.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.6" y="94.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.32%)</title><rect x="394.6" y="147.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="397.6" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.32%)</title><rect x="394.6" y="131.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="397.6" y="142.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (10 samples, 0.80%)</title><rect x="398.3" y="179.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="401.3" y="190.0"></text>
</g>
<g>
<title>java/security/Provider.getService (9 samples, 0.72%)</title><rect x="398.3" y="163.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="401.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.72%)</title><rect x="398.3" y="147.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="401.3" y="158.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (2 samples, 0.16%)</title><rect x="404.9" y="131.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="407.9" y="142.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.16%)</title><rect x="404.9" y="115.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="407.9" y="126.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (1 samples, 0.08%)</title><rect x="406.8" y="163.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.8" y="174.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (1 samples, 0.08%)</title><rect x="406.8" y="147.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.getNodesFromMap (21 samples, 1.67%)</title><rect x="407.7" y="243.0" width="19.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.7" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (5 samples, 0.40%)</title><rect x="408.7" y="227.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.7" y="238.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (5 samples, 0.40%)</title><rect x="408.7" y="211.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.7" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (5 samples, 0.40%)</title><rect x="408.7" y="195.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.7" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="408.7" y="179.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.7" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="408.7" y="163.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.7" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (4 samples, 0.32%)</title><rect x="409.6" y="179.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="412.6" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (3 samples, 0.24%)</title><rect x="410.5" y="163.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="413.5" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.16%)</title><rect x="411.5" y="147.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="414.5" y="158.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.08%)</title><rect x="412.4" y="131.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.08%)</title><rect x="412.4" y="115.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="415.4" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.08%)</title><rect x="412.4" y="99.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="415.4" y="110.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.08%)</title><rect x="412.4" y="83.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.4" y="94.0"></text>
</g>
<g>
<title>java/util/TreeMap$Values.iterator (7 samples, 0.56%)</title><rect x="413.4" y="227.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="416.4" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$ValueIterator.&lt;init&gt; (5 samples, 0.40%)</title><rect x="414.3" y="211.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="417.3" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.&lt;init&gt; (3 samples, 0.24%)</title><rect x="416.2" y="195.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="419.2" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.08%)</title><rect x="419.0" y="211.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="422.0" y="222.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (8 samples, 0.64%)</title><rect x="419.9" y="227.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="422.9" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (8 samples, 0.64%)</title><rect x="419.9" y="211.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.08%)</title><rect x="422.8" y="195.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="425.8" y="206.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.08%)</title><rect x="422.8" y="179.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.8" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.08%)</title><rect x="422.8" y="163.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.8" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (4 samples, 0.32%)</title><rect x="423.7" y="195.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (329 samples, 26.22%)</title><rect x="427.5" y="259.0" width="309.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="430.5" y="270.0">ru/mail/polis/service/re1nex/ApiController..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (302 samples, 24.06%)</title><rect x="427.5" y="243.0" width="283.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="430.5" y="254.0">ru/mail/polis/service/re1nex/ApiContro..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.removeLocal (11 samples, 0.88%)</title><rect x="427.5" y="227.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="430.5" y="238.0"></text>
</g>
<g>
<title>java/util/TreeSet.remove (11 samples, 0.88%)</title><rect x="427.5" y="211.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="430.5" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (11 samples, 0.88%)</title><rect x="427.5" y="195.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.5" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.deleteEntry (9 samples, 0.72%)</title><rect x="427.5" y="179.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="430.5" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.08%)</title><rect x="433.1" y="163.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="436.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.proxy (2 samples, 0.16%)</title><rect x="434.0" y="163.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="437.0" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.16%)</title><rect x="435.9" y="179.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl$$Lambda$142/1750855620.handleLocalResponse (56 samples, 4.46%)</title><rect x="437.8" y="227.0" width="52.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.8" y="238.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.lambda$handleResponses$2 (56 samples, 4.46%)</title><rect x="437.8" y="211.0" width="52.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.8" y="222.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.put (56 samples, 4.46%)</title><rect x="437.8" y="195.0" width="52.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.8" y="206.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (56 samples, 4.46%)</title><rect x="437.8" y="179.0" width="52.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="440.8" y="190.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (5 samples, 0.40%)</title><rect x="437.8" y="163.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="440.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (5 samples, 0.40%)</title><rect x="437.8" y="147.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="440.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (4 samples, 0.32%)</title><rect x="438.7" y="131.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.16%)</title><rect x="439.7" y="115.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="442.7" y="126.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="439.7" y="99.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="442.7" y="110.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="441.6" y="115.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="444.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (51 samples, 4.06%)</title><rect x="442.5" y="163.0" width="48.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="445.5" y="174.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.16%)</title><rect x="442.5" y="147.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.5" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.16%)</title><rect x="442.5" y="131.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.5" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.16%)</title><rect x="442.5" y="115.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="445.5" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (2 samples, 0.16%)</title><rect x="442.5" y="99.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="445.5" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (31 samples, 2.47%)</title><rect x="444.4" y="147.0" width="29.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="447.4" y="158.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (31 samples, 2.47%)</title><rect x="444.4" y="131.0" width="29.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="447.4" y="142.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="459.4" y="115.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.4" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (14 samples, 1.12%)</title><rect x="460.4" y="115.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 1.04%)</title><rect x="461.3" y="99.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.3" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.64%)</title><rect x="466.0" y="83.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="469.0" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.08%)</title><rect x="466.0" y="67.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="469.0" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.08%)</title><rect x="467.0" y="67.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="470.0" y="78.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.48%)</title><rect x="467.9" y="67.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="470.9" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.08%)</title><rect x="472.6" y="51.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="475.6" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (18 samples, 1.43%)</title><rect x="473.5" y="147.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (18 samples, 1.43%)</title><rect x="473.5" y="131.0" width="17.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.5" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (1 samples, 0.08%)</title><rect x="478.2" y="115.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.2" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (1 samples, 0.08%)</title><rect x="478.2" y="99.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="481.2" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.08%)</title><rect x="479.2" y="115.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.2" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.08%)</title><rect x="479.2" y="99.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="479.2" y="83.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="482.2" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (11 samples, 0.88%)</title><rect x="480.1" y="115.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="483.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.88%)</title><rect x="480.1" y="99.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="483.1" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.88%)</title><rect x="480.1" y="83.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="483.1" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.08%)</title><rect x="480.1" y="67.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.1" y="78.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.64%)</title><rect x="481.1" y="67.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="484.1" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.24%)</title><rect x="485.8" y="51.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="488.8" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.08%)</title><rect x="487.6" y="35.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.6" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.16%)</title><rect x="488.6" y="67.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.6" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.16%)</title><rect x="488.6" y="51.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="491.6" y="62.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.16%)</title><rect x="488.6" y="35.0" width="1.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="491.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.proxy (235 samples, 18.73%)</title><rect x="490.5" y="227.0" width="220.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="493.5" y="238.0">ru/mail/polis/service/re1nex/..</text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.64%)</title><rect x="491.4" y="211.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="494.4" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.56%)</title><rect x="491.4" y="195.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="494.4" y="206.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.32%)</title><rect x="493.3" y="179.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.16%)</title><rect x="494.2" y="163.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="497.2" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1 samples, 0.08%)</title><rect x="496.1" y="163.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.1" y="174.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.08%)</title><rect x="497.0" y="179.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.0" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="498.0" y="195.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.0" y="206.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="498.0" y="179.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.0" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.08%)</title><rect x="498.0" y="163.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.0" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (226 samples, 18.01%)</title><rect x="498.9" y="211.0" width="212.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.9" y="222.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (226 samples, 18.01%)</title><rect x="498.9" y="195.0" width="212.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="501.9" y="206.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.16%)</title><rect x="498.9" y="179.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.9" y="190.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.16%)</title><rect x="498.9" y="163.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="501.9" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.16%)</title><rect x="498.9" y="147.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.9" y="158.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.08%)</title><rect x="499.9" y="131.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="502.9" y="142.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.08%)</title><rect x="499.9" y="115.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="502.9" y="126.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.08%)</title><rect x="499.9" y="99.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="502.9" y="110.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.08%)</title><rect x="499.9" y="83.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="502.9" y="94.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (83 samples, 6.61%)</title><rect x="500.8" y="179.0" width="78.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.8" y="190.0">one/nio/h..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.48%)</title><rect x="500.8" y="163.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="503.8" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.48%)</title><rect x="500.8" y="147.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="503.8" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.48%)</title><rect x="500.8" y="131.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="503.8" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.48%)</title><rect x="500.8" y="115.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="503.8" y="126.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.08%)</title><rect x="503.6" y="99.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="506.6" y="110.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.16%)</title><rect x="504.6" y="99.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="507.6" y="110.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (77 samples, 6.14%)</title><rect x="506.4" y="163.0" width="72.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="509.4" y="174.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (21 samples, 1.67%)</title><rect x="511.1" y="147.0" width="19.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="514.1" y="158.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.32%)</title><rect x="514.0" y="131.0" width="3.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="517.0" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.08%)</title><rect x="517.7" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="520.7" y="142.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.08%)</title><rect x="518.7" y="131.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="521.7" y="142.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 0.80%)</title><rect x="519.6" y="131.0" width="9.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="522.6" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.32%)</title><rect x="522.4" y="115.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="525.4" y="126.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.24%)</title><rect x="526.2" y="115.0" width="2.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="529.2" y="126.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.24%)</title><rect x="526.2" y="99.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="529.2" y="110.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.16%)</title><rect x="529.0" y="131.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="532.0" y="142.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.32%)</title><rect x="530.9" y="147.0" width="3.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="533.9" y="158.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="534.7" y="147.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="537.7" y="158.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.24%)</title><rect x="535.6" y="147.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="538.6" y="158.0"></text>
</g>
<g>
<title>recv (43 samples, 3.43%)</title><rect x="538.4" y="147.0" width="40.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="541.4" y="158.0">recv</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (42 samples, 3.35%)</title><rect x="578.8" y="179.0" width="39.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="581.8" y="190.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.08%)</title><rect x="579.8" y="163.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.8" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.08%)</title><rect x="579.8" y="147.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="582.8" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="579.8" y="131.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="582.8" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (31 samples, 2.47%)</title><rect x="580.7" y="163.0" width="29.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="583.7" y="174.0">on..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.40%)</title><rect x="585.4" y="147.0" width="4.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="588.4" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (21 samples, 1.67%)</title><rect x="590.1" y="147.0" width="19.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="593.1" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 1.20%)</title><rect x="595.8" y="131.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="598.8" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (9 samples, 0.72%)</title><rect x="609.9" y="163.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="612.9" y="174.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.32%)</title><rect x="614.6" y="147.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="617.6" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.32%)</title><rect x="614.6" y="131.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (15 samples, 1.20%)</title><rect x="618.3" y="179.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="621.3" y="190.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.16%)</title><rect x="623.0" y="163.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="626.0" y="174.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.08%)</title><rect x="624.0" y="147.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="627.0" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.64%)</title><rect x="624.9" y="163.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.9" y="174.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.16%)</title><rect x="625.9" y="147.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="628.9" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.16%)</title><rect x="625.9" y="131.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="628.9" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.16%)</title><rect x="627.7" y="147.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="630.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.08%)</title><rect x="628.7" y="131.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="631.7" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.24%)</title><rect x="629.6" y="147.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.6" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.24%)</title><rect x="629.6" y="131.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.6" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.24%)</title><rect x="629.6" y="115.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.6" y="126.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.08%)</title><rect x="629.6" y="99.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.6" y="110.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.08%)</title><rect x="629.6" y="83.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="632.6" y="94.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (2 samples, 0.16%)</title><rect x="630.6" y="99.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.6" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.32%)</title><rect x="632.4" y="179.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="635.4" y="190.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.08%)</title><rect x="635.3" y="163.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.3" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.08%)</title><rect x="635.3" y="147.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="638.3" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="635.3" y="131.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="638.3" y="142.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (34 samples, 2.71%)</title><rect x="636.2" y="179.0" width="32.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.2" y="190.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (2 samples, 0.16%)</title><rect x="639.0" y="163.0" width="1.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="642.0" y="174.0"></text>
</g>
<g>
<title>setsockopt (29 samples, 2.31%)</title><rect x="640.9" y="163.0" width="27.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="643.9" y="174.0">s..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (34 samples, 2.71%)</title><rect x="668.2" y="179.0" width="31.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="671.2" y="190.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (16 samples, 1.27%)</title><rect x="671.0" y="163.0" width="15.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="674.0" y="174.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.16%)</title><rect x="674.7" y="147.0" width="1.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="677.7" y="158.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="676.6" y="147.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="679.6" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.24%)</title><rect x="677.6" y="147.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="680.6" y="158.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.32%)</title><rect x="680.4" y="147.0" width="3.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="683.4" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.08%)</title><rect x="680.4" y="131.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="683.4" y="142.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.24%)</title><rect x="681.3" y="131.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="684.3" y="142.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.16%)</title><rect x="682.3" y="115.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="685.3" y="126.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.16%)</title><rect x="684.2" y="147.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="687.2" y="158.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="686.0" y="163.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="689.0" y="174.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.24%)</title><rect x="687.0" y="163.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="690.0" y="174.0"></text>
</g>
<g>
<title>__send (11 samples, 0.88%)</title><rect x="689.8" y="163.0" width="10.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="692.8" y="174.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (12 samples, 0.96%)</title><rect x="700.1" y="179.0" width="11.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="703.1" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (12 samples, 0.96%)</title><rect x="700.1" y="163.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="703.1" y="174.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (10 samples, 0.80%)</title><rect x="702.0" y="147.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="705.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (27 samples, 2.15%)</title><rect x="711.4" y="243.0" width="25.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="714.4" y="254.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (27 samples, 2.15%)</title><rect x="711.4" y="227.0" width="25.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="714.4" y="238.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (7 samples, 0.56%)</title><rect x="711.4" y="211.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="714.4" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.56%)</title><rect x="711.4" y="195.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="714.4" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.56%)</title><rect x="711.4" y="179.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="714.4" y="190.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="713.3" y="163.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="716.3" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="713.3" y="147.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="716.3" y="158.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.16%)</title><rect x="714.2" y="163.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="717.2" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.08%)</title><rect x="716.1" y="163.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="719.1" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="717.1" y="163.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="720.1" y="174.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="717.1" y="147.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="720.1" y="158.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="717.1" y="131.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="720.1" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (20 samples, 1.59%)</title><rect x="718.0" y="211.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.0" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.48%)</title><rect x="718.0" y="195.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="721.0" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.24%)</title><rect x="720.8" y="179.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="723.8" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.24%)</title><rect x="720.8" y="163.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="723.8" y="174.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.24%)</title><rect x="720.8" y="147.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="723.8" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 1.12%)</title><rect x="723.6" y="195.0" width="13.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.6" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 1.12%)</title><rect x="723.6" y="179.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="726.6" y="190.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.08%)</title><rect x="723.6" y="163.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="726.6" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (13 samples, 1.04%)</title><rect x="724.6" y="163.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="727.6" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.08%)</title><rect x="724.6" y="147.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="727.6" y="158.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (12 samples, 0.96%)</title><rect x="725.5" y="147.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="728.5" y="158.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.24%)</title><rect x="726.5" y="131.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="729.5" y="142.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="726.5" y="115.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="729.5" y="126.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.16%)</title><rect x="727.4" y="115.0" width="1.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="730.4" y="126.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.08%)</title><rect x="728.3" y="99.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="731.3" y="110.0"></text>
</g>
<g>
<title>__send (7 samples, 0.56%)</title><rect x="729.3" y="131.0" width="6.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="732.3" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.08%)</title><rect x="735.9" y="131.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="738.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (6 samples, 0.48%)</title><rect x="736.8" y="259.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.24%)</title><rect x="736.8" y="243.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.8" y="254.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.24%)</title><rect x="736.8" y="227.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="739.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.16%)</title><rect x="737.7" y="211.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="740.7" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.16%)</title><rect x="737.7" y="195.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="740.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.16%)</title><rect x="737.7" y="179.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="740.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.24%)</title><rect x="739.6" y="243.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="742.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.24%)</title><rect x="739.6" y="227.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="742.6" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.24%)</title><rect x="739.6" y="211.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="742.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.24%)</title><rect x="739.6" y="195.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="742.6" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="739.6" y="179.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="742.6" y="190.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="739.6" y="163.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="742.6" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="740.6" y="179.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="743.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (1 samples, 0.08%)</title><rect x="741.5" y="179.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="744.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.08%)</title><rect x="742.4" y="371.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="745.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.08%)</title><rect x="742.4" y="355.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="745.4" y="366.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (393 samples, 31.31%)</title><rect x="743.4" y="371.0" width="369.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="746.4" y="382.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 0.32%)</title><rect x="744.3" y="355.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="747.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 0.32%)</title><rect x="744.3" y="339.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="747.3" y="350.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (131 samples, 10.44%)</title><rect x="748.1" y="355.0" width="123.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="751.1" y="366.0">one/nio/net/Nat..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.16%)</title><rect x="750.9" y="339.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="753.9" y="350.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.08%)</title><rect x="750.9" y="323.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="753.9" y="334.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (1 samples, 0.08%)</title><rect x="751.8" y="323.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="754.8" y="334.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (126 samples, 10.04%)</title><rect x="752.8" y="339.0" width="118.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.8" y="350.0">one/nio/net/Na..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (10 samples, 0.80%)</title><rect x="767.8" y="323.0" width="9.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="770.8" y="334.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.32%)</title><rect x="777.2" y="323.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="780.2" y="334.0"></text>
</g>
<g>
<title>clock_gettime (60 samples, 4.78%)</title><rect x="781.0" y="323.0" width="56.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="784.0" y="334.0">clock_..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="826.1" y="307.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="829.1" y="318.0"></text>
</g>
<g>
<title>clock_gettime (11 samples, 0.88%)</title><rect x="827.1" y="307.0" width="10.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="830.1" y="318.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.72%)</title><rect x="828.9" y="291.0" width="8.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="831.9" y="302.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.08%)</title><rect x="837.4" y="323.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="840.4" y="334.0"></text>
</g>
<g>
<title>epoll_wait (35 samples, 2.79%)</title><rect x="838.4" y="323.0" width="32.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="841.4" y="334.0">ep..</text>
</g>
<g>
<title>one/nio/net/Session.process (255 samples, 20.32%)</title><rect x="871.3" y="355.0" width="239.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="874.3" y="366.0">one/nio/net/Session.process</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="879.7" y="339.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="882.7" y="350.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="879.7" y="323.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="882.7" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="879.7" y="307.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="882.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (244 samples, 19.44%)</title><rect x="880.7" y="339.0" width="229.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="883.7" y="350.0">one/nio/http/HttpSession.proce..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.08%)</title><rect x="880.7" y="323.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="883.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.08%)</title><rect x="880.7" y="307.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="883.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.08%)</title><rect x="880.7" y="291.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="883.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.08%)</title><rect x="880.7" y="275.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="883.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (183 samples, 14.58%)</title><rect x="881.6" y="323.0" width="172.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="884.6" y="334.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (110 samples, 8.76%)</title><rect x="895.7" y="307.0" width="103.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="898.7" y="318.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (108 samples, 8.61%)</title><rect x="897.6" y="291.0" width="101.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="900.6" y="302.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler2_handleRequest.handleRequest (87 samples, 6.93%)</title><rect x="900.4" y="275.0" width="81.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="903.4" y="286.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.24%)</title><rect x="900.4" y="259.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="903.4" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="901.3" y="243.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="904.3" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.08%)</title><rect x="901.3" y="227.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="904.3" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.08%)</title><rect x="902.3" y="243.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="905.3" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.08%)</title><rect x="902.3" y="227.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="905.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (10 samples, 0.80%)</title><rect x="903.2" y="259.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="906.2" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (10 samples, 0.80%)</title><rect x="903.2" y="243.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="906.2" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="905.1" y="227.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="908.1" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.08%)</title><rect x="905.1" y="211.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="908.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.16%)</title><rect x="906.0" y="227.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="909.0" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.16%)</title><rect x="906.0" y="211.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="909.0" y="222.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.16%)</title><rect x="906.0" y="195.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="909.0" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="907.9" y="227.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="910.9" y="238.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.32%)</title><rect x="908.9" y="227.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="911.9" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="911.7" y="211.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="914.7" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="911.7" y="195.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="914.7" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.08%)</title><rect x="911.7" y="179.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="914.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.handleRequest (74 samples, 5.90%)</title><rect x="912.6" y="259.0" width="69.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="915.6" y="270.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.handleRequest (74 samples, 5.90%)</title><rect x="912.6" y="243.0" width="69.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="915.6" y="254.0">ru/mail..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/720764787.linkToTargetMethod (3 samples, 0.24%)</title><rect x="912.6" y="227.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="915.6" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.24%)</title><rect x="912.6" y="211.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="915.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$68/785022578.get$Lambda (3 samples, 0.24%)</title><rect x="912.6" y="195.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="915.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.24%)</title><rect x="912.6" y="179.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.executeTask (71 samples, 5.66%)</title><rect x="915.5" y="227.0" width="66.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="918.5" y="238.0">ru/mail..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (69 samples, 5.50%)</title><rect x="917.3" y="211.0" width="64.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.3" y="222.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (64 samples, 5.10%)</title><rect x="917.3" y="195.0" width="60.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.3" y="206.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (7 samples, 0.56%)</title><rect x="919.2" y="179.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.40%)</title><rect x="921.1" y="163.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="924.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.40%)</title><rect x="921.1" y="147.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="924.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.40%)</title><rect x="921.1" y="131.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="924.1" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.08%)</title><rect x="924.9" y="115.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.9" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.08%)</title><rect x="924.9" y="99.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="927.9" y="110.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.08%)</title><rect x="924.9" y="83.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="927.9" y="94.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.08%)</title><rect x="924.9" y="67.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="927.9" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.32%)</title><rect x="925.8" y="179.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="928.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.32%)</title><rect x="925.8" y="163.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="928.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="925.8" y="147.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="928.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.08%)</title><rect x="925.8" y="131.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="928.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.08%)</title><rect x="925.8" y="115.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="928.8" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="925.8" y="99.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="928.8" y="110.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.08%)</title><rect x="925.8" y="83.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="928.8" y="94.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="925.8" y="67.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.8" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.24%)</title><rect x="926.7" y="147.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="929.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.24%)</title><rect x="926.7" y="131.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="929.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="928.6" y="115.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="931.6" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.08%)</title><rect x="928.6" y="99.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="931.6" y="110.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.08%)</title><rect x="928.6" y="83.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="931.6" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (51 samples, 4.06%)</title><rect x="929.6" y="179.0" width="47.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="932.6" y="190.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (51 samples, 4.06%)</title><rect x="929.6" y="163.0" width="47.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="932.6" y="174.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (51 samples, 4.06%)</title><rect x="929.6" y="147.0" width="47.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="932.6" y="158.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (51 samples, 4.06%)</title><rect x="929.6" y="131.0" width="47.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="932.6" y="142.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (51 samples, 4.06%)</title><rect x="929.6" y="115.0" width="47.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.6" y="126.0">jdk/..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.08%)</title><rect x="930.5" y="99.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="933.5" y="110.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="931.4" y="99.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.4" y="110.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="932.4" y="99.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="935.4" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.24%)</title><rect x="933.3" y="99.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="936.3" y="110.0"></text>
</g>
<g>
<title>Unsafe_Unpark (23 samples, 1.83%)</title><rect x="936.1" y="99.0" width="21.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="939.1" y="110.0">U..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.16%)</title><rect x="937.1" y="83.0" width="1.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="940.1" y="94.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.16%)</title><rect x="939.0" y="83.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="942.0" y="94.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="940.8" y="83.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="943.8" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.08%)</title><rect x="941.8" y="83.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="944.8" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.16%)</title><rect x="942.7" y="83.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.7" y="94.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.08%)</title><rect x="944.6" y="83.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="947.6" y="94.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="945.5" y="83.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="948.5" y="94.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="946.5" y="83.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.5" y="94.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (4 samples, 0.32%)</title><rect x="947.4" y="83.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="950.4" y="94.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.08%)</title><rect x="951.2" y="83.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="954.2" y="94.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.48%)</title><rect x="952.1" y="83.0" width="5.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="955.1" y="94.0"></text>
</g>
<g>
<title>__pthread_cond_signal (19 samples, 1.51%)</title><rect x="957.8" y="99.0" width="17.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="960.8" y="110.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.16%)</title><rect x="975.6" y="99.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="978.6" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (1 samples, 0.08%)</title><rect x="977.5" y="195.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="980.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.08%)</title><rect x="977.5" y="179.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="980.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.workerCountOf (1 samples, 0.08%)</title><rect x="978.4" y="195.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="981.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.08%)</title><rect x="979.4" y="195.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="982.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.16%)</title><rect x="980.3" y="195.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="983.3" y="206.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (9 samples, 0.72%)</title><rect x="982.2" y="275.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="985.2" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.72%)</title><rect x="982.2" y="259.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="985.2" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.32%)</title><rect x="982.2" y="243.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="985.2" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.40%)</title><rect x="986.0" y="243.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="989.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.40%)</title><rect x="986.0" y="227.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="989.0" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.40%)</title><rect x="986.0" y="211.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="989.0" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (9 samples, 0.72%)</title><rect x="990.7" y="275.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="993.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.72%)</title><rect x="990.7" y="259.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="993.7" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.72%)</title><rect x="990.7" y="243.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="993.7" y="254.0"></text>
</g>
<g>
<title>RequestHandler2_handleRequest.handleRequest (5 samples, 0.40%)</title><rect x="990.7" y="227.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="993.7" y="238.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.32%)</title><rect x="995.4" y="227.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="998.4" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (28 samples, 2.23%)</title><rect x="999.1" y="307.0" width="26.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1002.1" y="318.0">o..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="1006.7" y="291.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.7" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="1006.7" y="275.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.7" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="1006.7" y="259.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1009.7" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="1006.7" y="243.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.7" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="1006.7" y="227.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.16%)</title><rect x="1007.6" y="291.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1010.6" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="1007.6" y="275.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1010.6" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="1007.6" y="259.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.6" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="1007.6" y="243.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1010.6" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="1007.6" y="227.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1010.6" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="1007.6" y="211.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1010.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="1008.5" y="275.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1011.5" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.08%)</title><rect x="1008.5" y="259.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1011.5" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.08%)</title><rect x="1008.5" y="243.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1011.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.88%)</title><rect x="1009.5" y="291.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1012.5" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.80%)</title><rect x="1010.4" y="275.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1013.4" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="1017.9" y="259.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.9" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="1017.9" y="243.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1020.9" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="1017.9" y="227.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.9" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="1017.9" y="211.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1020.9" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="1017.9" y="195.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1020.9" y="206.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="1017.9" y="179.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1020.9" y="190.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.08%)</title><rect x="1018.9" y="259.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (6 samples, 0.48%)</title><rect x="1019.8" y="291.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1022.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.16%)</title><rect x="1025.5" y="307.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.5" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.16%)</title><rect x="1025.5" y="291.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1028.5" y="302.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.16%)</title><rect x="1025.5" y="275.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1028.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.16%)</title><rect x="1025.5" y="259.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1028.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.16%)</title><rect x="1025.5" y="243.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1028.5" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (2 samples, 0.16%)</title><rect x="1025.5" y="227.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1028.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (14 samples, 1.12%)</title><rect x="1027.3" y="307.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1030.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.64%)</title><rect x="1033.0" y="291.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1036.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.64%)</title><rect x="1033.0" y="275.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1036.0" y="286.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="1035.8" y="259.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1038.8" y="270.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.08%)</title><rect x="1035.8" y="243.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1038.8" y="254.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="1036.7" y="259.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1039.7" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="1037.7" y="259.0" width="2.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1040.7" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 1.12%)</title><rect x="1040.5" y="307.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1043.5" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 1.04%)</title><rect x="1041.4" y="291.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1044.4" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.24%)</title><rect x="1049.0" y="275.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.0" y="286.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.24%)</title><rect x="1049.0" y="259.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1052.0" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.24%)</title><rect x="1049.0" y="243.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1052.0" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.24%)</title><rect x="1049.0" y="227.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.0" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.16%)</title><rect x="1049.0" y="211.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.0" y="222.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.08%)</title><rect x="1049.9" y="195.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1052.9" y="206.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.08%)</title><rect x="1050.8" y="211.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.8" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="1051.8" y="275.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.8" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="1051.8" y="259.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.8" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="1051.8" y="243.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.8" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="1051.8" y="227.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.8" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="1051.8" y="211.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.8" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1052.7" y="275.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1055.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1052.7" y="259.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1055.7" y="270.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.08%)</title><rect x="1052.7" y="243.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1055.7" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="1052.7" y="227.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1055.7" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="1052.7" y="211.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.7" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="1052.7" y="195.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.7" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="1052.7" y="179.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.7" y="190.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.08%)</title><rect x="1052.7" y="163.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.7" y="174.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.08%)</title><rect x="1053.7" y="323.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1056.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (59 samples, 4.70%)</title><rect x="1054.6" y="323.0" width="55.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1057.6" y="334.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (58 samples, 4.62%)</title><rect x="1055.5" y="307.0" width="54.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1058.5" y="318.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (20 samples, 1.59%)</title><rect x="1064.0" y="291.0" width="18.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1067.0" y="302.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.40%)</title><rect x="1065.9" y="275.0" width="4.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1068.9" y="286.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="1070.6" y="275.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.6" y="286.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.08%)</title><rect x="1071.5" y="275.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1074.5" y="286.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="1072.5" y="275.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1075.5" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.08%)</title><rect x="1073.4" y="275.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.4" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 0.56%)</title><rect x="1074.4" y="275.0" width="6.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1077.4" y="286.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="1075.3" y="259.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.3" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.32%)</title><rect x="1076.2" y="259.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.2" y="270.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.08%)</title><rect x="1080.0" y="259.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1083.0" y="270.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.16%)</title><rect x="1080.9" y="275.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.9" y="286.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.16%)</title><rect x="1082.8" y="291.0" width="1.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1085.8" y="302.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.16%)</title><rect x="1084.7" y="291.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1087.7" y="302.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.16%)</title><rect x="1086.6" y="291.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1089.6" y="302.0"></text>
</g>
<g>
<title>recv (23 samples, 1.83%)</title><rect x="1088.5" y="291.0" width="21.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1091.5" y="302.0">r..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.08%)</title><rect x="1110.1" y="339.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1113.1" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.16%)</title><rect x="1111.0" y="355.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.0" y="366.0"></text>
</g>
<g>
<title>start_thread (82 samples, 6.53%)</title><rect x="1112.9" y="371.0" width="77.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1115.9" y="382.0">start_thr..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (82 samples, 6.53%)</title><rect x="1112.9" y="355.0" width="77.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1115.9" y="366.0">thread_na..</text>
</g>
<g>
<title>Thread::call_run() (82 samples, 6.53%)</title><rect x="1112.9" y="339.0" width="77.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.9" y="350.0">Thread::c..</text>
</g>
<g>
<title>GangWorker::loop() (80 samples, 6.37%)</title><rect x="1112.9" y="323.0" width="75.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.9" y="334.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (80 samples, 6.37%)</title><rect x="1112.9" y="307.0" width="75.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.9" y="318.0">G1ParTas..</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (79 samples, 6.29%)</title><rect x="1112.9" y="291.0" width="74.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.9" y="302.0">G1RemSet..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (79 samples, 6.29%)</title><rect x="1112.9" y="275.0" width="74.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.9" y="286.0">G1RemSet..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (79 samples, 6.29%)</title><rect x="1112.9" y="259.0" width="74.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.9" y="270.0">G1Collec..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (79 samples, 6.29%)</title><rect x="1112.9" y="243.0" width="74.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.9" y="254.0">DirtyCar..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (79 samples, 6.29%)</title><rect x="1112.9" y="227.0" width="74.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.9" y="238.0">G1Refine..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.24%)</title><rect x="1112.9" y="211.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.9" y="222.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (71 samples, 5.66%)</title><rect x="1115.7" y="211.0" width="66.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.7" y="222.0">G1ParSc..</text>
</g>
<g>
<title>G1CardTable::mark_card_deferred(unsigned long) (1 samples, 0.08%)</title><rect x="1128.9" y="195.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.9" y="206.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (56 samples, 4.46%)</title><rect x="1129.8" y="195.0" width="52.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.8" y="206.0">G1Par..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (17 samples, 1.35%)</title><rect x="1166.5" y="179.0" width="16.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.5" y="190.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.08%)</title><rect x="1181.5" y="163.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="174.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (5 samples, 0.40%)</title><rect x="1182.5" y="211.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="222.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (4 samples, 0.32%)</title><rect x="1182.5" y="195.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="206.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.16%)</title><rect x="1182.5" y="179.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="190.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (2 samples, 0.16%)</title><rect x="1184.4" y="179.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.4" y="190.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.08%)</title><rect x="1186.2" y="195.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="206.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.08%)</title><rect x="1187.2" y="291.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.2" y="302.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="1187.2" y="275.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="286.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1187.2" y="259.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="323.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.1" y="334.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.16%)</title><rect x="1188.1" y="307.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="318.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.16%)</title><rect x="1188.1" y="291.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.1" y="302.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.08%)</title><rect x="1188.1" y="275.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.1" y="286.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (1 samples, 0.08%)</title><rect x="1188.1" y="259.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.1" y="270.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.08%)</title><rect x="1188.1" y="243.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.08%)</title><rect x="1188.1" y="227.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.1" y="238.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.08%)</title><rect x="1188.1" y="211.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.1" y="222.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.08%)</title><rect x="1189.1" y="275.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.1" y="286.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.08%)</title><rect x="1189.1" y="259.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="270.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1189.1" y="243.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.1" y="254.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1189.1" y="227.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="238.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1189.1" y="211.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.1" y="222.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.08%)</title><rect x="1189.1" y="195.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.1" y="206.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.08%)</title><rect x="1189.1" y="179.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="190.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.08%)</title><rect x="1189.1" y="163.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.1" y="174.0"></text>
</g>
</g>
</svg>
