<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (5,262 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (3,084 samples, 58.61%)</title><rect x="10.0" y="547.0" width="691.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,084 samples, 58.61%)</title><rect x="10.0" y="531.0" width="691.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,084 samples, 58.61%)</title><rect x="10.0" y="515.0" width="691.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (31 samples, 0.59%)</title><rect x="10.0" y="499.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (31 samples, 0.59%)</title><rect x="10.0" y="483.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (31 samples, 0.59%)</title><rect x="10.0" y="467.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (31 samples, 0.59%)</title><rect x="10.0" y="451.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (31 samples, 0.59%)</title><rect x="10.0" y="435.0" width="7.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$77/487508227.run (3,053 samples, 58.02%)</title><rect x="17.0" y="499.0" width="684.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.0" y="510.0">ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$77/487508227.run</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$get$0 (3,053 samples, 58.02%)</title><rect x="17.0" y="483.0" width="684.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.0" y="494.0">ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$get$0</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (323 samples, 6.14%)</title><rect x="17.0" y="467.0" width="72.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.0" y="478.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (323 samples, 6.14%)</title><rect x="17.0" y="451.0" width="72.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.0" y="462.0">ru/mail/..</text>
</g>
<g>
<title>byte[] (20 samples, 0.38%)</title><rect x="17.0" y="435.0" width="4.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="20.0" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (35 samples, 0.67%)</title><rect x="21.4" y="435.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.4" y="446.0"></text>
</g>
<g>
<title>java.lang.Long (35 samples, 0.67%)</title><rect x="21.4" y="419.0" width="7.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="24.4" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.isEmpty (23 samples, 0.44%)</title><rect x="29.3" y="435.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.3" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (23 samples, 0.44%)</title><rect x="29.3" y="419.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.3" y="430.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (23 samples, 0.44%)</title><rect x="29.3" y="403.0" width="5.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="32.3" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (37 samples, 0.70%)</title><rect x="34.4" y="435.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.4" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (37 samples, 0.70%)</title><rect x="34.4" y="419.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.4" y="430.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (37 samples, 0.70%)</title><rect x="34.4" y="403.0" width="8.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="37.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (208 samples, 3.95%)</title><rect x="42.7" y="435.0" width="46.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.7" y="446.0">ru/m..</text>
</g>
<g>
<title>java/security/MessageDigest.digest (24 samples, 0.46%)</title><rect x="42.7" y="419.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.7" y="430.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (24 samples, 0.46%)</title><rect x="42.7" y="403.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.7" y="414.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (24 samples, 0.46%)</title><rect x="42.7" y="387.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.7" y="398.0"></text>
</g>
<g>
<title>byte[] (24 samples, 0.46%)</title><rect x="42.7" y="371.0" width="5.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="45.7" y="382.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (184 samples, 3.50%)</title><rect x="48.1" y="419.0" width="41.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.1" y="430.0">jav..</text>
</g>
<g>
<title>java/security/Security.getImpl (184 samples, 3.50%)</title><rect x="48.1" y="403.0" width="41.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.1" y="414.0">jav..</text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (184 samples, 3.50%)</title><rect x="48.1" y="387.0" width="41.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.1" y="398.0">sun..</text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (164 samples, 3.12%)</title><rect x="48.1" y="371.0" width="36.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.1" y="382.0">sun..</text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (147 samples, 2.79%)</title><rect x="48.1" y="355.0" width="33.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.1" y="366.0">ja..</text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (147 samples, 2.79%)</title><rect x="48.1" y="339.0" width="33.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.1" y="350.0">ja..</text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (147 samples, 2.79%)</title><rect x="48.1" y="323.0" width="33.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="51.1" y="334.0">ja..</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (147 samples, 2.79%)</title><rect x="48.1" y="307.0" width="33.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.1" y="318.0">jd..</text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor2.newInstance (147 samples, 2.79%)</title><rect x="48.1" y="291.0" width="33.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.1" y="302.0">jd..</text>
</g>
<g>
<title>sun.security.provider.MD5 (34 samples, 0.65%)</title><rect x="48.1" y="275.0" width="7.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="51.1" y="286.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.&lt;init&gt; (113 samples, 2.15%)</title><rect x="55.7" y="275.0" width="25.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.7" y="286.0">s..</text>
</g>
<g>
<title>int[] (56 samples, 1.06%)</title><rect x="55.7" y="259.0" width="12.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="58.7" y="270.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.&lt;init&gt; (57 samples, 1.08%)</title><rect x="68.3" y="259.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.3" y="270.0"></text>
</g>
<g>
<title>byte[] (57 samples, 1.08%)</title><rect x="68.3" y="243.0" width="12.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="71.3" y="254.0"></text>
</g>
<g>
<title>sun.security.jca.GetInstance$Instance (17 samples, 0.32%)</title><rect x="81.1" y="355.0" width="3.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="84.1" y="366.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (20 samples, 0.38%)</title><rect x="84.9" y="371.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.9" y="382.0"></text>
</g>
<g>
<title>java/security/Provider.getService (20 samples, 0.38%)</title><rect x="84.9" y="355.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="87.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (20 samples, 0.38%)</title><rect x="84.9" y="339.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.9" y="350.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (20 samples, 0.38%)</title><rect x="84.9" y="323.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.9" y="334.0"></text>
</g>
<g>
<title>java.lang.Object[] (20 samples, 0.38%)</title><rect x="84.9" y="307.0" width="4.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="87.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.proxy (1,833 samples, 34.83%)</title><rect x="89.4" y="467.0" width="411.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.4" y="478.0">ru/mail/polis/service/re1nex/ApiController.proxy</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (21 samples, 0.40%)</title><rect x="89.4" y="451.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.4" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/102617125.invoke (21 samples, 0.40%)</title><rect x="89.4" y="435.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.4" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (21 samples, 0.40%)</title><rect x="89.4" y="419.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.4" y="430.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (7 samples, 0.13%)</title><rect x="89.4" y="403.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.4" y="414.0"></text>
</g>
<g>
<title>java.lang.String (7 samples, 0.13%)</title><rect x="89.4" y="387.0" width="1.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="92.4" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (14 samples, 0.27%)</title><rect x="91.0" y="403.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (14 samples, 0.27%)</title><rect x="91.0" y="387.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.0" y="398.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.27%)</title><rect x="91.0" y="371.0" width="3.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="94.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,801 samples, 34.23%)</title><rect x="94.1" y="451.0" width="403.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.1" y="462.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,801 samples, 34.23%)</title><rect x="94.1" y="435.0" width="403.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.1" y="446.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (3 samples, 0.06%)</title><rect x="94.1" y="419.0" width="0.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="97.1" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (1,693 samples, 32.17%)</title><rect x="94.8" y="419.0" width="379.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="97.8" y="430.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (865 samples, 16.44%)</title><rect x="94.8" y="403.0" width="193.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="97.8" y="414.0">byte[]</text>
</g>
<g>
<title>byte[] (828 samples, 15.74%)</title><rect x="288.7" y="403.0" width="185.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="291.7" y="414.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (78 samples, 1.48%)</title><rect x="474.4" y="419.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="477.4" y="430.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.06%)</title><rect x="474.4" y="403.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="477.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.04%)</title><rect x="475.1" y="403.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.1" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.04%)</title><rect x="475.1" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="478.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (70 samples, 1.33%)</title><rect x="475.5" y="403.0" width="15.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.5" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (70 samples, 1.33%)</title><rect x="475.5" y="387.0" width="15.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="478.5" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (70 samples, 1.33%)</title><rect x="475.5" y="371.0" width="15.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.5" y="382.0"></text>
</g>
<g>
<title>char[] (51 samples, 0.97%)</title><rect x="475.5" y="355.0" width="11.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="478.5" y="366.0"></text>
</g>
<g>
<title>java.lang.String (9 samples, 0.17%)</title><rect x="487.0" y="355.0" width="2.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="490.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.19%)</title><rect x="489.0" y="355.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="492.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.19%)</title><rect x="489.0" y="339.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="492.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (10 samples, 0.19%)</title><rect x="489.0" y="323.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="492.0" y="334.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.19%)</title><rect x="489.0" y="307.0" width="2.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="492.0" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.06%)</title><rect x="491.2" y="403.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="494.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.06%)</title><rect x="491.2" y="387.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.2" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.06%)</title><rect x="491.2" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="494.2" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.04%)</title><rect x="491.5" y="355.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="494.5" y="366.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.04%)</title><rect x="491.5" y="339.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="494.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (19 samples, 0.36%)</title><rect x="491.9" y="419.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="494.9" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (19 samples, 0.36%)</title><rect x="491.9" y="403.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="494.9" y="414.0"></text>
</g>
<g>
<title>byte[] (19 samples, 0.36%)</title><rect x="491.9" y="387.0" width="4.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="494.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (6 samples, 0.11%)</title><rect x="496.2" y="419.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="499.2" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.11%)</title><rect x="496.2" y="403.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="499.2" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.11%)</title><rect x="496.2" y="387.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.2" y="398.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.06%)</title><rect x="496.2" y="371.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="499.2" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.06%)</title><rect x="496.8" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="499.8" y="382.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.06%)</title><rect x="496.8" y="355.0" width="0.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="499.8" y="366.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (2 samples, 0.04%)</title><rect x="497.5" y="419.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.5" y="430.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (2 samples, 0.04%)</title><rect x="497.5" y="403.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="500.5" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (2 samples, 0.04%)</title><rect x="497.5" y="387.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="500.5" y="398.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (2 samples, 0.04%)</title><rect x="497.5" y="371.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="500.5" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (11 samples, 0.21%)</title><rect x="498.0" y="451.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="501.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (11 samples, 0.21%)</title><rect x="498.0" y="435.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.15%)</title><rect x="498.0" y="419.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="501.0" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (8 samples, 0.15%)</title><rect x="498.0" y="403.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="501.0" y="414.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.15%)</title><rect x="498.0" y="387.0" width="1.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="501.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 0.06%)</title><rect x="499.8" y="419.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.8" y="430.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (3 samples, 0.06%)</title><rect x="499.8" y="403.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="502.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.getFromNode (805 samples, 15.30%)</title><rect x="500.4" y="467.0" width="180.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.4" y="478.0">ru/mail/polis/service/r..</text>
</g>
<g>
<title>one.nio.http.Response (11 samples, 0.21%)</title><rect x="500.4" y="451.0" width="2.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="503.4" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (66 samples, 1.25%)</title><rect x="502.9" y="451.0" width="14.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.9" y="462.0"></text>
</g>
<g>
<title>byte[] (32 samples, 0.61%)</title><rect x="502.9" y="435.0" width="7.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="505.9" y="446.0"></text>
</g>
<g>
<title>java.lang.String[] (20 samples, 0.38%)</title><rect x="510.1" y="435.0" width="4.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="513.1" y="446.0"></text>
</g>
<g>
<title>java.lang.String (14 samples, 0.27%)</title><rect x="514.6" y="435.0" width="3.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="517.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (629 samples, 11.95%)</title><rect x="517.7" y="451.0" width="141.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="520.7" y="462.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (65 samples, 1.24%)</title><rect x="517.7" y="435.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="520.7" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (65 samples, 1.24%)</title><rect x="517.7" y="419.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.7" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (65 samples, 1.24%)</title><rect x="517.7" y="403.0" width="14.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.7" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (65 samples, 1.24%)</title><rect x="517.7" y="387.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (65 samples, 1.24%)</title><rect x="517.7" y="371.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="520.7" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (15 samples, 0.29%)</title><rect x="517.7" y="355.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.7" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (15 samples, 0.29%)</title><rect x="517.7" y="339.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="520.7" y="350.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (15 samples, 0.29%)</title><rect x="517.7" y="323.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.7" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (15 samples, 0.29%)</title><rect x="517.7" y="307.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.7" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (15 samples, 0.29%)</title><rect x="517.7" y="291.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="520.7" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (15 samples, 0.29%)</title><rect x="517.7" y="275.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="520.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$83/306659246.getAsBoolean (15 samples, 0.29%)</title><rect x="517.7" y="259.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.7" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (15 samples, 0.29%)</title><rect x="517.7" y="243.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="520.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (15 samples, 0.29%)</title><rect x="517.7" y="227.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="520.7" y="238.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (15 samples, 0.29%)</title><rect x="517.7" y="211.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="520.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable$$Lambda$78/308861423.apply (15 samples, 0.29%)</title><rect x="517.7" y="195.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="520.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.lambda$iterator$0 (15 samples, 0.29%)</title><rect x="517.7" y="179.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.7" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (15 samples, 0.29%)</title><rect x="517.7" y="163.0" width="3.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="520.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$85/2147021593.apply (50 samples, 0.95%)</title><rect x="521.1" y="355.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="524.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (50 samples, 0.95%)</title><rect x="521.1" y="339.0" width="11.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (50 samples, 0.95%)</title><rect x="521.1" y="323.0" width="11.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="524.1" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (50 samples, 0.95%)</title><rect x="521.1" y="307.0" width="11.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="524.1" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (60 samples, 1.14%)</title><rect x="532.3" y="435.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="535.3" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (60 samples, 1.14%)</title><rect x="532.3" y="419.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$90/646382563.apply (60 samples, 1.14%)</title><rect x="532.3" y="403.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="535.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$iterator$4 (60 samples, 1.14%)</title><rect x="532.3" y="387.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="535.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (13 samples, 0.25%)</title><rect x="532.3" y="371.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.3" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (13 samples, 0.25%)</title><rect x="532.3" y="355.0" width="2.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="535.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (26 samples, 0.49%)</title><rect x="535.2" y="371.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="538.2" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (26 samples, 0.49%)</title><rect x="535.2" y="355.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.2" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (26 samples, 0.49%)</title><rect x="535.2" y="339.0" width="5.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="538.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Value.getData (21 samples, 0.40%)</title><rect x="541.0" y="371.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (21 samples, 0.40%)</title><rect x="541.0" y="355.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="544.0" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (21 samples, 0.40%)</title><rect x="541.0" y="339.0" width="4.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="544.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (21 samples, 0.40%)</title><rect x="545.7" y="435.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="548.7" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (21 samples, 0.40%)</title><rect x="545.7" y="419.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="548.7" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (21 samples, 0.40%)</title><rect x="545.7" y="403.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="548.7" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (21 samples, 0.40%)</title><rect x="545.7" y="387.0" width="4.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="548.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.iterator (483 samples, 9.18%)</title><rect x="550.4" y="435.0" width="108.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="553.4" y="446.0">ru/mail/polis..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (15 samples, 0.29%)</title><rect x="550.4" y="419.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.4" y="430.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (15 samples, 0.29%)</title><rect x="550.4" y="403.0" width="3.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="553.4" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (17 samples, 0.32%)</title><rect x="553.8" y="419.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="556.8" y="430.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (17 samples, 0.32%)</title><rect x="553.8" y="403.0" width="3.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="556.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (4 samples, 0.08%)</title><rect x="557.6" y="419.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="560.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (4 samples, 0.08%)</title><rect x="557.6" y="403.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="560.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (4 samples, 0.08%)</title><rect x="557.6" y="387.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="560.6" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.08%)</title><rect x="557.6" y="371.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="560.6" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (4 samples, 0.08%)</title><rect x="557.6" y="355.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.6" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.06%)</title><rect x="557.6" y="339.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="560.6" y="350.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (3 samples, 0.06%)</title><rect x="557.6" y="323.0" width="0.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="560.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (447 samples, 8.49%)</title><rect x="558.5" y="419.0" width="100.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="561.5" y="430.0">ru/mail/poli..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (189 samples, 3.59%)</title><rect x="558.5" y="403.0" width="42.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="561.5" y="414.0">com/..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (9 samples, 0.17%)</title><rect x="558.5" y="387.0" width="2.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="561.5" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (180 samples, 3.42%)</title><rect x="560.5" y="387.0" width="40.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.5" y="398.0">com..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (16 samples, 0.30%)</title><rect x="560.5" y="371.0" width="3.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="563.5" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (11 samples, 0.21%)</title><rect x="564.1" y="371.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="567.1" y="382.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (11 samples, 0.21%)</title><rect x="564.1" y="355.0" width="2.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="567.1" y="366.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (17 samples, 0.32%)</title><rect x="566.6" y="371.0" width="3.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="569.6" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (17 samples, 0.32%)</title><rect x="570.4" y="371.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="573.4" y="382.0"></text>
</g>
<g>
<title>java.lang.Object[] (17 samples, 0.32%)</title><rect x="570.4" y="355.0" width="3.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="573.4" y="366.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (119 samples, 2.26%)</title><rect x="574.2" y="371.0" width="26.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="577.2" y="382.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (119 samples, 2.26%)</title><rect x="574.2" y="355.0" width="26.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="577.2" y="366.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (119 samples, 2.26%)</title><rect x="574.2" y="339.0" width="26.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="577.2" y="350.0">j..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (16 samples, 0.30%)</title><rect x="574.2" y="323.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="577.2" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$83/306659246.getAsBoolean (16 samples, 0.30%)</title><rect x="574.2" y="307.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="577.2" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (16 samples, 0.30%)</title><rect x="574.2" y="291.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="577.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (16 samples, 0.30%)</title><rect x="574.2" y="275.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="577.2" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (16 samples, 0.30%)</title><rect x="574.2" y="259.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="577.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable$$Lambda$78/308861423.apply (16 samples, 0.30%)</title><rect x="574.2" y="243.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="577.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.lambda$iterator$0 (16 samples, 0.30%)</title><rect x="574.2" y="227.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="577.2" y="238.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (16 samples, 0.30%)</title><rect x="574.2" y="211.0" width="3.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="577.2" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (103 samples, 1.96%)</title><rect x="577.8" y="323.0" width="23.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="580.8" y="334.0">j..</text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (30 samples, 0.57%)</title><rect x="577.8" y="307.0" width="6.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="580.8" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (16 samples, 0.30%)</title><rect x="584.5" y="307.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="587.5" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (16 samples, 0.30%)</title><rect x="584.5" y="291.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="587.5" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$81/1195213958.get$Lambda (7 samples, 0.13%)</title><rect x="584.5" y="275.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.5" y="286.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$81 (7 samples, 0.13%)</title><rect x="584.5" y="259.0" width="1.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="587.5" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$83/306659246.get$Lambda (9 samples, 0.17%)</title><rect x="586.1" y="275.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="589.1" y="286.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$83 (9 samples, 0.17%)</title><rect x="586.1" y="259.0" width="2.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="589.1" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (16 samples, 0.30%)</title><rect x="588.1" y="307.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="591.1" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (16 samples, 0.30%)</title><rect x="588.1" y="291.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="591.1" y="302.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (16 samples, 0.30%)</title><rect x="588.1" y="275.0" width="3.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="591.1" y="286.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (41 samples, 0.78%)</title><rect x="591.7" y="307.0" width="9.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="594.7" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (41 samples, 0.78%)</title><rect x="591.7" y="291.0" width="9.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="594.7" y="302.0"></text>
</g>
<g>
<title>java.util.ArrayList (10 samples, 0.19%)</title><rect x="600.9" y="403.0" width="2.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="603.9" y="414.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (20 samples, 0.38%)</title><rect x="603.1" y="403.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="606.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (20 samples, 0.38%)</title><rect x="603.1" y="387.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="606.1" y="398.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (20 samples, 0.38%)</title><rect x="603.1" y="371.0" width="4.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="606.1" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (21 samples, 0.40%)</title><rect x="607.6" y="403.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.6" y="414.0"></text>
</g>
<g>
<title>java.lang.Object[] (21 samples, 0.40%)</title><rect x="607.6" y="387.0" width="4.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="610.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (24 samples, 0.46%)</title><rect x="612.3" y="403.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="615.3" y="414.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (13 samples, 0.25%)</title><rect x="612.3" y="387.0" width="2.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="615.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (11 samples, 0.21%)</title><rect x="615.2" y="387.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="618.2" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (11 samples, 0.21%)</title><rect x="615.2" y="371.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.2" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (11 samples, 0.21%)</title><rect x="615.2" y="355.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="618.2" y="366.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (11 samples, 0.21%)</title><rect x="615.2" y="339.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.2" y="350.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (11 samples, 0.21%)</title><rect x="615.2" y="323.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="618.2" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (11 samples, 0.21%)</title><rect x="615.2" y="307.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.2" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (11 samples, 0.21%)</title><rect x="615.2" y="291.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="618.2" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$83/306659246.getAsBoolean (11 samples, 0.21%)</title><rect x="615.2" y="275.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="618.2" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (11 samples, 0.21%)</title><rect x="615.2" y="259.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (11 samples, 0.21%)</title><rect x="615.2" y="243.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="618.2" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (11 samples, 0.21%)</title><rect x="615.2" y="227.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="618.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable$$Lambda$78/308861423.apply (11 samples, 0.21%)</title><rect x="615.2" y="211.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="618.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.lambda$iterator$0 (11 samples, 0.21%)</title><rect x="615.2" y="195.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="618.2" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (11 samples, 0.21%)</title><rect x="615.2" y="179.0" width="2.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="618.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (183 samples, 3.48%)</title><rect x="617.7" y="403.0" width="41.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="620.7" y="414.0">ru/..</text>
</g>
<g>
<title>java/util/Collection.stream (56 samples, 1.06%)</title><rect x="617.7" y="387.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="620.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (19 samples, 0.36%)</title><rect x="617.7" y="371.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="620.7" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (19 samples, 0.36%)</title><rect x="617.7" y="355.0" width="4.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="620.7" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (37 samples, 0.70%)</title><rect x="622.0" y="371.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="625.0" y="382.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (37 samples, 0.70%)</title><rect x="622.0" y="355.0" width="8.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="625.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (6 samples, 0.11%)</title><rect x="630.3" y="387.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.3" y="398.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (6 samples, 0.11%)</title><rect x="630.3" y="371.0" width="1.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="633.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (34 samples, 0.65%)</title><rect x="631.6" y="387.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (34 samples, 0.65%)</title><rect x="631.6" y="371.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="634.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (34 samples, 0.65%)</title><rect x="631.6" y="355.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.6" y="366.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (34 samples, 0.65%)</title><rect x="631.6" y="339.0" width="7.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="634.6" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (51 samples, 0.97%)</title><rect x="639.2" y="387.0" width="11.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.2" y="398.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (9 samples, 0.17%)</title><rect x="639.2" y="371.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="642.2" y="382.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (9 samples, 0.17%)</title><rect x="639.2" y="355.0" width="2.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="642.2" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (42 samples, 0.80%)</title><rect x="641.3" y="371.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="644.3" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (11 samples, 0.21%)</title><rect x="641.3" y="355.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.3" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (11 samples, 0.21%)</title><rect x="641.3" y="339.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.3" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$79/1826863351.get$Lambda (11 samples, 0.21%)</title><rect x="641.3" y="323.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.3" y="334.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$79 (11 samples, 0.21%)</title><rect x="641.3" y="307.0" width="2.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="644.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (31 samples, 0.59%)</title><rect x="643.7" y="355.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.7" y="366.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (31 samples, 0.59%)</title><rect x="643.7" y="339.0" width="7.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="646.7" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (36 samples, 0.68%)</title><rect x="650.7" y="387.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="653.7" y="398.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (36 samples, 0.68%)</title><rect x="650.7" y="371.0" width="8.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="653.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (78 samples, 1.48%)</title><rect x="658.8" y="451.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.8" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (78 samples, 1.48%)</title><rect x="658.8" y="435.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="661.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (78 samples, 1.48%)</title><rect x="658.8" y="419.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (50 samples, 0.95%)</title><rect x="658.8" y="403.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="661.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (50 samples, 0.95%)</title><rect x="658.8" y="387.0" width="11.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="661.8" y="398.0"></text>
</g>
<g>
<title>byte[] (50 samples, 0.95%)</title><rect x="658.8" y="371.0" width="11.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="661.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (28 samples, 0.53%)</title><rect x="670.0" y="403.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.0" y="414.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (28 samples, 0.53%)</title><rect x="670.0" y="387.0" width="6.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="673.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.byteBufferToByte (21 samples, 0.40%)</title><rect x="676.2" y="451.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="679.2" y="462.0"></text>
</g>
<g>
<title>byte[] (21 samples, 0.40%)</title><rect x="676.2" y="435.0" width="4.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="679.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (92 samples, 1.75%)</title><rect x="681.0" y="467.0" width="20.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="684.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (51 samples, 0.97%)</title><rect x="681.0" y="451.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="684.0" y="462.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (51 samples, 0.97%)</title><rect x="681.0" y="435.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="684.0" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (51 samples, 0.97%)</title><rect x="681.0" y="419.0" width="11.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="684.0" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (51 samples, 0.97%)</title><rect x="681.0" y="403.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="684.0" y="414.0"></text>
</g>
<g>
<title>byte[] (51 samples, 0.97%)</title><rect x="681.0" y="387.0" width="11.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="684.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (41 samples, 0.78%)</title><rect x="692.4" y="451.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="695.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (41 samples, 0.78%)</title><rect x="692.4" y="435.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="695.4" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (41 samples, 0.78%)</title><rect x="692.4" y="419.0" width="9.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="695.4" y="430.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,178 samples, 41.39%)</title><rect x="701.6" y="547.0" width="488.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.6" y="558.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (66 samples, 1.25%)</title><rect x="701.6" y="531.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="704.6" y="542.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (66 samples, 1.25%)</title><rect x="701.6" y="515.0" width="14.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="704.6" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,112 samples, 40.14%)</title><rect x="716.4" y="531.0" width="473.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="719.4" y="542.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,112 samples, 40.14%)</title><rect x="716.4" y="515.0" width="473.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.4" y="526.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,112 samples, 40.14%)</title><rect x="716.4" y="499.0" width="473.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="719.4" y="510.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (558 samples, 10.60%)</title><rect x="716.4" y="483.0" width="125.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="719.4" y="494.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (558 samples, 10.60%)</title><rect x="716.4" y="467.0" width="125.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="719.4" y="478.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (367 samples, 6.97%)</title><rect x="716.4" y="451.0" width="82.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.4" y="462.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (160 samples, 3.04%)</title><rect x="716.4" y="435.0" width="35.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.4" y="446.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (160 samples, 3.04%)</title><rect x="716.4" y="419.0" width="35.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="719.4" y="430.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (160 samples, 3.04%)</title><rect x="716.4" y="403.0" width="35.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="719.4" y="414.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (160 samples, 3.04%)</title><rect x="716.4" y="387.0" width="35.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="719.4" y="398.0">jav..</text>
</g>
<g>
<title>java.lang.String (81 samples, 1.54%)</title><rect x="716.4" y="371.0" width="18.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="719.4" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (79 samples, 1.50%)</title><rect x="734.5" y="371.0" width="17.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.5" y="382.0"></text>
</g>
<g>
<title>byte[] (79 samples, 1.50%)</title><rect x="734.5" y="355.0" width="17.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="737.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.get (207 samples, 3.93%)</title><rect x="752.3" y="435.0" width="46.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="755.3" y="446.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (119 samples, 2.26%)</title><rect x="752.3" y="419.0" width="26.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="755.3" y="430.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (119 samples, 2.26%)</title><rect x="752.3" y="403.0" width="26.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="755.3" y="414.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$77/487508227.get$Lambda (119 samples, 2.26%)</title><rect x="752.3" y="387.0" width="26.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="755.3" y="398.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.re1nex.AsyncTopologyService$$Lambda$77 (119 samples, 2.26%)</title><rect x="752.3" y="371.0" width="26.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="755.3" y="382.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseAsyncService.executeTask (88 samples, 1.67%)</title><rect x="779.0" y="419.0" width="19.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="782.0" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (76 samples, 1.44%)</title><rect x="779.0" y="403.0" width="17.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.0" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (76 samples, 1.44%)</title><rect x="779.0" y="387.0" width="17.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="782.0" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (76 samples, 1.44%)</title><rect x="779.0" y="371.0" width="17.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="782.0" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (76 samples, 1.44%)</title><rect x="779.0" y="355.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="782.0" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (76 samples, 1.44%)</title><rect x="779.0" y="339.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.0" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (76 samples, 1.44%)</title><rect x="779.0" y="323.0" width="17.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="782.0" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (76 samples, 1.44%)</title><rect x="779.0" y="307.0" width="17.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="782.0" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (76 samples, 1.44%)</title><rect x="779.0" y="291.0" width="17.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.0" y="302.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (76 samples, 1.44%)</title><rect x="779.0" y="275.0" width="17.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="782.0" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (76 samples, 1.44%)</title><rect x="779.0" y="259.0" width="17.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.0" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (62 samples, 1.18%)</title><rect x="779.0" y="243.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="782.0" y="254.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (62 samples, 1.18%)</title><rect x="779.0" y="227.0" width="13.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="782.0" y="238.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.convert (40 samples, 0.76%)</title><rect x="779.0" y="211.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="782.0" y="222.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.throwableProxyToString (40 samples, 0.76%)</title><rect x="779.0" y="195.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="782.0" y="206.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.recursiveAppend (28 samples, 0.53%)</title><rect x="779.0" y="179.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="782.0" y="190.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.subjoinSTEPArray (28 samples, 0.53%)</title><rect x="779.0" y="163.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="782.0" y="174.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/StackTraceElementProxy.toString (28 samples, 0.53%)</title><rect x="779.0" y="147.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.0" y="158.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/StackTraceElementProxy.getSTEAsString (28 samples, 0.53%)</title><rect x="779.0" y="131.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.toString (13 samples, 0.25%)</title><rect x="779.2" y="115.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="782.2" y="126.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.04%)</title><rect x="779.6" y="99.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="782.6" y="110.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.04%)</title><rect x="779.6" y="83.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="782.6" y="94.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.04%)</title><rect x="779.6" y="67.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="782.6" y="78.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.10%)</title><rect x="780.1" y="99.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="783.1" y="110.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.10%)</title><rect x="780.1" y="83.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="783.1" y="94.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.10%)</title><rect x="780.1" y="67.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="783.1" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.10%)</title><rect x="780.1" y="51.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="783.1" y="62.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.10%)</title><rect x="780.1" y="35.0" width="1.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="783.1" y="46.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.08%)</title><rect x="781.2" y="99.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="784.2" y="110.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.08%)</title><rect x="781.2" y="83.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="784.2" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.08%)</title><rect x="781.2" y="67.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="784.2" y="78.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.08%)</title><rect x="781.2" y="51.0" width="0.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="784.2" y="62.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (3 samples, 0.06%)</title><rect x="782.1" y="115.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="785.1" y="126.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (3 samples, 0.06%)</title><rect x="782.1" y="99.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="785.1" y="110.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.06%)</title><rect x="782.1" y="83.0" width="0.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="785.1" y="94.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.04%)</title><rect x="782.8" y="115.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.8" y="126.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.04%)</title><rect x="782.8" y="99.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.8" y="110.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.04%)</title><rect x="782.8" y="83.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.8" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="782.8" y="67.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="785.8" y="78.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.04%)</title><rect x="782.8" y="51.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="785.8" y="62.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (9 samples, 0.17%)</title><rect x="783.2" y="115.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="786.2" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.17%)</title><rect x="783.2" y="99.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.2" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (8 samples, 0.15%)</title><rect x="783.4" y="83.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="786.4" y="94.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.15%)</title><rect x="783.4" y="67.0" width="1.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="786.4" y="78.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (7 samples, 0.13%)</title><rect x="785.2" y="179.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.2" y="190.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (7 samples, 0.13%)</title><rect x="785.2" y="163.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.2" y="174.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.04%)</title><rect x="785.2" y="147.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="788.2" y="158.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.10%)</title><rect x="785.7" y="147.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="788.7" y="158.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (5 samples, 0.10%)</title><rect x="786.8" y="179.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="789.8" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.10%)</title><rect x="786.8" y="163.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="789.8" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.10%)</title><rect x="786.8" y="147.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.8" y="158.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.10%)</title><rect x="786.8" y="131.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="789.8" y="142.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 0.17%)</title><rect x="788.4" y="211.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="791.4" y="222.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.17%)</title><rect x="788.4" y="195.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.4" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.17%)</title><rect x="788.4" y="179.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="791.4" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.17%)</title><rect x="788.4" y="163.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="791.4" y="174.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.04%)</title><rect x="788.4" y="147.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="791.4" y="158.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.13%)</title><rect x="788.8" y="147.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="791.8" y="158.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (11 samples, 0.21%)</title><rect x="790.4" y="211.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.4" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (11 samples, 0.21%)</title><rect x="790.4" y="195.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="793.4" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (10 samples, 0.19%)</title><rect x="790.6" y="179.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="793.6" y="190.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.19%)</title><rect x="790.6" y="163.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="793.6" y="174.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.convertToBytes (14 samples, 0.27%)</title><rect x="792.9" y="243.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.9" y="254.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (14 samples, 0.27%)</title><rect x="792.9" y="227.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.9" y="238.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (14 samples, 0.27%)</title><rect x="792.9" y="211.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.9" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (14 samples, 0.27%)</title><rect x="792.9" y="195.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.9" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 0.27%)</title><rect x="792.9" y="179.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.9" y="190.0"></text>
</g>
<g>
<title>byte[] (13 samples, 0.25%)</title><rect x="793.1" y="163.0" width="2.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="796.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 0.21%)</title><rect x="796.0" y="403.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="799.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.08%)</title><rect x="796.0" y="387.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="799.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.08%)</title><rect x="796.0" y="371.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="799.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.08%)</title><rect x="796.0" y="355.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="799.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.08%)</title><rect x="796.0" y="339.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="799.0" y="350.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (4 samples, 0.08%)</title><rect x="796.0" y="323.0" width="0.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="799.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.reject (7 samples, 0.13%)</title><rect x="796.9" y="387.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$AbortPolicy.rejectedExecution (7 samples, 0.13%)</title><rect x="796.9" y="371.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="799.9" y="382.0"></text>
</g>
<g>
<title>java/lang/Object.toString (4 samples, 0.08%)</title><rect x="797.1" y="355.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="800.1" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.04%)</title><rect x="797.3" y="339.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.3" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.04%)</title><rect x="797.3" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="800.3" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.04%)</title><rect x="797.3" y="307.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="800.3" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="797.3" y="291.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.3" y="302.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.04%)</title><rect x="797.3" y="275.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="800.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.04%)</title><rect x="798.0" y="355.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.0" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.04%)</title><rect x="798.0" y="339.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="801.0" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.04%)</title><rect x="798.0" y="323.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="801.0" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="798.0" y="307.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.0" y="318.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.04%)</title><rect x="798.0" y="291.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="801.0" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (191 samples, 3.63%)</title><rect x="798.7" y="451.0" width="42.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.7" y="462.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (191 samples, 3.63%)</title><rect x="798.7" y="435.0" width="42.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="801.7" y="446.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (191 samples, 3.63%)</title><rect x="798.7" y="419.0" width="42.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.7" y="430.0">java..</text>
</g>
<g>
<title>java.lang.String (79 samples, 1.50%)</title><rect x="798.7" y="403.0" width="17.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="801.7" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (112 samples, 2.13%)</title><rect x="816.4" y="403.0" width="25.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="819.4" y="414.0">j..</text>
</g>
<g>
<title>byte[] (112 samples, 2.13%)</title><rect x="816.4" y="387.0" width="25.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="819.4" y="398.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (922 samples, 17.52%)</title><rect x="841.5" y="483.0" width="206.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="844.5" y="494.0">one/nio/http/HttpSession.pa..</text>
</g>
<g>
<title>one.nio.http.Request (147 samples, 2.79%)</title><rect x="841.5" y="467.0" width="33.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="844.5" y="478.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (293 samples, 5.57%)</title><rect x="874.5" y="467.0" width="65.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="877.5" y="478.0">one/nio..</text>
</g>
<g>
<title>java.lang.String[] (293 samples, 5.57%)</title><rect x="874.5" y="451.0" width="65.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="877.5" y="462.0">java.la..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (482 samples, 9.16%)</title><rect x="940.2" y="467.0" width="108.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.2" y="478.0">one/nio/util/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (482 samples, 9.16%)</title><rect x="940.2" y="451.0" width="108.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="943.2" y="462.0">one/nio/util/..</text>
</g>
<g>
<title>char[] (250 samples, 4.75%)</title><rect x="940.2" y="435.0" width="56.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="943.2" y="446.0">char[]</text>
</g>
<g>
<title>java.lang.String (87 samples, 1.65%)</title><rect x="996.2" y="435.0" width="19.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="999.2" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (145 samples, 2.76%)</title><rect x="1015.8" y="435.0" width="32.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1018.8" y="446.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (145 samples, 2.76%)</title><rect x="1015.8" y="419.0" width="32.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1018.8" y="430.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (145 samples, 2.76%)</title><rect x="1015.8" y="403.0" width="32.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1018.8" y="414.0">ja..</text>
</g>
<g>
<title>byte[] (145 samples, 2.76%)</title><rect x="1015.8" y="387.0" width="32.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1018.8" y="398.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (632 samples, 12.01%)</title><rect x="1048.3" y="483.0" width="141.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1051.3" y="494.0">one/nio/util/Utf8...</text>
</g>
<g>
<title>one/nio/util/Utf8.read (632 samples, 12.01%)</title><rect x="1048.3" y="467.0" width="141.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1051.3" y="478.0">one/nio/util/Utf8...</text>
</g>
<g>
<title>char[] (308 samples, 5.85%)</title><rect x="1048.3" y="451.0" width="69.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1051.3" y="462.0">char[]</text>
</g>
<g>
<title>java.lang.String (119 samples, 2.26%)</title><rect x="1117.3" y="451.0" width="26.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1120.3" y="462.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (205 samples, 3.90%)</title><rect x="1144.0" y="451.0" width="46.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1147.0" y="462.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (205 samples, 3.90%)</title><rect x="1144.0" y="435.0" width="46.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1147.0" y="446.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (205 samples, 3.90%)</title><rect x="1144.0" y="419.0" width="46.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1147.0" y="430.0">java..</text>
</g>
<g>
<title>byte[] (205 samples, 3.90%)</title><rect x="1144.0" y="403.0" width="46.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1147.0" y="414.0">byte[]</text>
</g>
</g>
</svg>
