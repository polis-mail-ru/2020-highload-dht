<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="421"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="421"> </text>
<g id="frames">
<g>
<title>all (359 samples, 100.00%)</title><rect x="10.0" y="387.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="398.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.84%)</title><rect x="10.0" y="371.0" width="9.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.28%)</title><rect x="10.0" y="355.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.56%)</title><rect x="13.3" y="355.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="16.3" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.56%)</title><rect x="13.3" y="339.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.3" y="350.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.28%)</title><rect x="13.3" y="323.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.3" y="334.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.28%)</title><rect x="13.3" y="307.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="16.3" y="318.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.28%)</title><rect x="13.3" y="291.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.3" y="302.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.28%)</title><rect x="16.6" y="323.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="19.6" y="334.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.28%)</title><rect x="16.6" y="307.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="19.6" y="318.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.28%)</title><rect x="16.6" y="291.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="19.6" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.run (224 samples, 62.40%)</title><rect x="19.9" y="371.0" width="736.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.9" y="382.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (224 samples, 62.40%)</title><rect x="19.9" y="355.0" width="736.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.9" y="366.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (224 samples, 62.40%)</title><rect x="19.9" y="339.0" width="736.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.9" y="350.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (99 samples, 27.58%)</title><rect x="33.0" y="323.0" width="325.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="36.0" y="334.0">java/util/concurrent/ThreadPoolExecutor.getT..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (99 samples, 27.58%)</title><rect x="33.0" y="307.0" width="325.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="36.0" y="318.0">java/util/concurrent/ArrayBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (81 samples, 22.56%)</title><rect x="42.9" y="291.0" width="266.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.9" y="302.0">java/util/concurrent/locks/AbstractQ..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.56%)</title><rect x="46.2" y="275.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="49.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.isHeldExclusively (1 samples, 0.28%)</title><rect x="49.4" y="259.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.56%)</title><rect x="52.7" y="275.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.56%)</title><rect x="52.7" y="259.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.56%)</title><rect x="52.7" y="243.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="55.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 1.67%)</title><rect x="59.3" y="275.0" width="19.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.39%)</title><rect x="62.6" y="259.0" width="16.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.39%)</title><rect x="62.6" y="243.0" width="16.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.11%)</title><rect x="65.9" y="227.0" width="13.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.9" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 1.11%)</title><rect x="65.9" y="211.0" width="13.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.9" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.28%)</title><rect x="65.9" y="195.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="68.9" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.28%)</title><rect x="69.2" y="195.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="72.2" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.28%)</title><rect x="72.5" y="195.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="75.5" y="206.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.28%)</title><rect x="72.5" y="179.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="75.5" y="190.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.28%)</title><rect x="75.7" y="195.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="78.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (70 samples, 19.50%)</title><rect x="79.0" y="275.0" width="230.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="82.0" y="286.0">java/util/concurrent/locks/Loc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (67 samples, 18.66%)</title><rect x="88.9" y="259.0" width="220.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="91.9" y="270.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.28%)</title><rect x="95.5" y="243.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="98.5" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.28%)</title><rect x="98.7" y="243.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="101.7" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.28%)</title><rect x="102.0" y="243.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="105.0" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park (51 samples, 14.21%)</title><rect x="105.3" y="243.0" width="167.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="108.3" y="254.0">Unsafe_Park</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.28%)</title><rect x="128.3" y="227.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="131.3" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 4.74%)</title><rect x="131.6" y="227.0" width="55.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="134.6" y="238.0">Parke..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 1.95%)</title><rect x="157.9" y="211.0" width="23.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="160.9" y="222.0">M..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (3 samples, 0.84%)</title><rect x="171.1" y="195.0" width="9.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="174.1" y="206.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.56%)</title><rect x="180.9" y="211.0" width="6.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="183.9" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.56%)</title><rect x="187.5" y="227.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="190.5" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.28%)</title><rect x="194.1" y="227.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="197.1" y="238.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.28%)</title><rect x="197.4" y="227.0" width="3.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="200.4" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (17 samples, 4.74%)</title><rect x="200.6" y="227.0" width="55.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="203.6" y="238.0">__pth..</text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.84%)</title><rect x="256.5" y="227.0" width="9.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="259.5" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="266.4" y="227.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="269.4" y="238.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.28%)</title><rect x="269.7" y="227.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="272.7" y="238.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 2.51%)</title><rect x="273.0" y="243.0" width="29.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="276.0" y="254.0">[u..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (4 samples, 1.11%)</title><rect x="273.0" y="227.0" width="13.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="276.0" y="238.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.28%)</title><rect x="286.1" y="227.0" width="3.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="289.1" y="238.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 1.11%)</title><rect x="289.4" y="227.0" width="13.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="292.4" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.56%)</title><rect x="302.5" y="243.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="305.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 4.18%)</title><rect x="309.1" y="291.0" width="49.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.1" y="302.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 4.18%)</title><rect x="309.1" y="275.0" width="49.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.1" y="286.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 4.18%)</title><rect x="309.1" y="259.0" width="49.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.1" y="270.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 3.34%)</title><rect x="319.0" y="243.0" width="39.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="322.0" y="254.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 3.34%)</title><rect x="319.0" y="227.0" width="39.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="322.0" y="238.0">jdk..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 1.39%)</title><rect x="322.3" y="211.0" width="16.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="325.3" y="222.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.28%)</title><rect x="322.3" y="195.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="325.3" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.28%)</title><rect x="325.5" y="195.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="328.5" y="206.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.56%)</title><rect x="328.8" y="195.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="331.8" y="206.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.28%)</title><rect x="335.4" y="195.0" width="3.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="338.4" y="206.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 1.67%)</title><rect x="338.7" y="211.0" width="19.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="341.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.28%)</title><rect x="358.4" y="323.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="361.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$77/487508227.run (120 samples, 33.43%)</title><rect x="361.7" y="323.0" width="394.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="364.7" y="334.0">ru/mail/polis/service/re1nex/AsyncTopologyService$$Lam..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$get$0 (120 samples, 33.43%)</title><rect x="361.7" y="307.0" width="394.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.7" y="318.0">ru/mail/polis/service/re1nex/AsyncTopologyService.lamb..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (19 samples, 5.29%)</title><rect x="365.0" y="291.0" width="62.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.0" y="302.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (19 samples, 5.29%)</title><rect x="365.0" y="275.0" width="62.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="368.0" y="286.0">ru/mai..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.firstKey (1 samples, 0.28%)</title><rect x="365.0" y="259.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.0" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.subLowest (1 samples, 0.28%)</title><rect x="365.0" y="243.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="368.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (1 samples, 0.28%)</title><rect x="365.0" y="227.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="368.0" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (1 samples, 0.28%)</title><rect x="365.0" y="211.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.0" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.isEmpty (1 samples, 0.28%)</title><rect x="368.3" y="259.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="371.3" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.isEmpty (1 samples, 0.28%)</title><rect x="368.3" y="243.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.3" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (1 samples, 0.28%)</title><rect x="368.3" y="227.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.3" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (1 samples, 0.28%)</title><rect x="368.3" y="211.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="371.3" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.28%)</title><rect x="371.6" y="259.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.6" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.28%)</title><rect x="371.6" y="243.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.6" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (1 samples, 0.28%)</title><rect x="371.6" y="227.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.6" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (1 samples, 0.28%)</title><rect x="371.6" y="211.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="374.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (16 samples, 4.46%)</title><rect x="374.8" y="259.0" width="52.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="377.8" y="270.0">ru/ma..</text>
</g>
<g>
<title>java/security/MessageDigest.digest (6 samples, 1.67%)</title><rect x="374.8" y="243.0" width="19.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.8" y="254.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (6 samples, 1.67%)</title><rect x="374.8" y="227.0" width="19.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="377.8" y="238.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (6 samples, 1.67%)</title><rect x="374.8" y="211.0" width="19.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.8" y="222.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (6 samples, 1.67%)</title><rect x="374.8" y="195.0" width="19.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="377.8" y="206.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implDigest (6 samples, 1.67%)</title><rect x="374.8" y="179.0" width="19.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="377.8" y="190.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bLittle4 (1 samples, 0.28%)</title><rect x="374.8" y="163.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.8" y="174.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implCompress (5 samples, 1.39%)</title><rect x="378.1" y="163.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="381.1" y="174.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (10 samples, 2.79%)</title><rect x="394.6" y="243.0" width="32.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.6" y="254.0">ja..</text>
</g>
<g>
<title>java/security/Security.getImpl (10 samples, 2.79%)</title><rect x="394.6" y="227.0" width="32.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="397.6" y="238.0">ja..</text>
</g>
<g>
<title>java/security/Security.getSpiClass (1 samples, 0.28%)</title><rect x="394.6" y="211.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.28%)</title><rect x="394.6" y="195.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.6" y="206.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (9 samples, 2.51%)</title><rect x="397.9" y="211.0" width="29.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="400.9" y="222.0">su..</text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (7 samples, 1.95%)</title><rect x="397.9" y="195.0" width="23.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.9" y="206.0">s..</text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (4 samples, 1.11%)</title><rect x="407.7" y="179.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.7" y="190.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (2 samples, 0.56%)</title><rect x="407.7" y="163.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.7" y="174.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (2 samples, 0.56%)</title><rect x="407.7" y="147.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="410.7" y="158.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (2 samples, 0.56%)</title><rect x="407.7" y="131.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.7" y="142.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (2 samples, 0.56%)</title><rect x="407.7" y="115.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="410.7" y="126.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (2 samples, 0.56%)</title><rect x="407.7" y="99.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.7" y="110.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.56%)</title><rect x="414.3" y="163.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.3" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.56%)</title><rect x="414.3" y="147.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.3" y="158.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (2 samples, 0.56%)</title><rect x="420.9" y="195.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.9" y="206.0"></text>
</g>
<g>
<title>java/security/Provider.getService (2 samples, 0.56%)</title><rect x="420.9" y="179.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="423.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.56%)</title><rect x="420.9" y="163.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="423.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.proxy (64 samples, 17.83%)</title><rect x="427.4" y="291.0" width="210.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="430.4" y="302.0">ru/mail/polis/service/re1nex..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.56%)</title><rect x="430.7" y="275.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="433.7" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/102617125.invoke (2 samples, 0.56%)</title><rect x="430.7" y="259.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="433.7" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.56%)</title><rect x="430.7" y="243.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="433.7" y="254.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.28%)</title><rect x="430.7" y="227.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.7" y="238.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.checkOverflow (1 samples, 0.28%)</title><rect x="430.7" y="211.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="433.7" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.28%)</title><rect x="430.7" y="195.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="433.7" y="206.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.28%)</title><rect x="430.7" y="179.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="433.7" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.28%)</title><rect x="434.0" y="227.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="437.0" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.28%)</title><rect x="434.0" y="211.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="437.0" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (47 samples, 13.09%)</title><rect x="437.3" y="275.0" width="154.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.3" y="286.0">one/nio/http/HttpCli..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (47 samples, 13.09%)</title><rect x="437.3" y="259.0" width="154.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="440.3" y="270.0">one/nio/http/HttpCli..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (22 samples, 6.13%)</title><rect x="437.3" y="243.0" width="72.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="440.3" y="254.0">one/nio/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="437.3" y="227.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="440.3" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="437.3" y="211.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="440.3" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.28%)</title><rect x="437.3" y="195.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="440.3" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.28%)</title><rect x="437.3" y="179.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="440.3" y="190.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.28%)</title><rect x="437.3" y="163.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="440.3" y="174.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (21 samples, 5.85%)</title><rect x="440.6" y="227.0" width="69.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.6" y="238.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (12 samples, 3.34%)</title><rect x="443.9" y="211.0" width="39.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="446.9" y="222.0">Jav..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.28%)</title><rect x="457.0" y="195.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="460.0" y="206.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.28%)</title><rect x="460.3" y="195.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="463.3" y="206.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 1.67%)</title><rect x="463.6" y="195.0" width="19.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="466.6" y="206.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.28%)</title><rect x="470.2" y="179.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="473.2" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.56%)</title><rect x="473.5" y="179.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="476.5" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.28%)</title><rect x="480.0" y="179.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="483.0" y="190.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.28%)</title><rect x="480.0" y="163.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="483.0" y="174.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.28%)</title><rect x="483.3" y="211.0" width="3.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="486.3" y="222.0"></text>
</g>
<g>
<title>recv (7 samples, 1.95%)</title><rect x="486.6" y="211.0" width="23.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="489.6" y="222.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (7 samples, 1.95%)</title><rect x="509.6" y="243.0" width="23.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.6" y="254.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (4 samples, 1.11%)</title><rect x="509.6" y="227.0" width="13.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="512.6" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="512.9" y="211.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="515.9" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.56%)</title><rect x="516.2" y="211.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.2" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.56%)</title><rect x="516.2" y="195.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="519.2" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.84%)</title><rect x="522.8" y="227.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="525.8" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.56%)</title><rect x="526.0" y="211.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.0" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.56%)</title><rect x="526.0" y="195.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="529.0" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (4 samples, 1.11%)</title><rect x="532.6" y="243.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="535.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.84%)</title><rect x="532.6" y="227.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.6" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.28%)</title><rect x="532.6" y="211.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="535.6" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.56%)</title><rect x="535.9" y="211.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.9" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.56%)</title><rect x="535.9" y="195.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="538.9" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.56%)</title><rect x="535.9" y="179.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="538.9" y="190.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.28%)</title><rect x="539.2" y="163.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.2" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.28%)</title><rect x="542.5" y="227.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.28%)</title><rect x="542.5" y="211.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="545.5" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.28%)</title><rect x="542.5" y="195.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.5" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.56%)</title><rect x="545.8" y="243.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="548.8" y="254.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (7 samples, 1.95%)</title><rect x="552.3" y="243.0" width="23.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="555.3" y="254.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (1 samples, 0.28%)</title><rect x="552.3" y="227.0" width="3.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="555.3" y="238.0"></text>
</g>
<g>
<title>setsockopt (6 samples, 1.67%)</title><rect x="555.6" y="227.0" width="19.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="558.6" y="238.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (4 samples, 1.11%)</title><rect x="575.3" y="243.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="578.3" y="254.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (4 samples, 1.11%)</title><rect x="575.3" y="227.0" width="13.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="578.3" y="238.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.56%)</title><rect x="575.3" y="211.0" width="6.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="578.3" y="222.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.28%)</title><rect x="581.9" y="211.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="584.9" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.28%)</title><rect x="585.2" y="211.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="588.2" y="222.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.28%)</title><rect x="585.2" y="195.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="588.2" y="206.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.28%)</title><rect x="588.5" y="243.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="591.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (13 samples, 3.62%)</title><rect x="591.8" y="275.0" width="42.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.8" y="286.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13 samples, 3.62%)</title><rect x="591.8" y="259.0" width="42.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.8" y="270.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 1.39%)</title><rect x="591.8" y="243.0" width="16.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="594.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 1.11%)</title><rect x="595.1" y="227.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="598.1" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 1.11%)</title><rect x="595.1" y="211.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="598.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 1.11%)</title><rect x="595.1" y="195.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="598.1" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 2.23%)</title><rect x="608.2" y="243.0" width="26.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.2" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 2.23%)</title><rect x="608.2" y="227.0" width="26.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="611.2" y="238.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 1.95%)</title><rect x="611.5" y="211.0" width="23.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="614.5" y="222.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (7 samples, 1.95%)</title><rect x="611.5" y="195.0" width="23.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="614.5" y="206.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.56%)</title><rect x="618.1" y="179.0" width="6.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="621.1" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.56%)</title><rect x="618.1" y="163.0" width="6.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="621.1" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.28%)</title><rect x="621.4" y="147.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="624.4" y="158.0"></text>
</g>
<g>
<title>__send (3 samples, 0.84%)</title><rect x="624.7" y="179.0" width="9.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="627.7" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.28%)</title><rect x="634.5" y="275.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="637.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.getFromNode (35 samples, 9.75%)</title><rect x="637.8" y="291.0" width="115.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.8" y="302.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (25 samples, 6.96%)</title><rect x="637.8" y="275.0" width="82.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="640.8" y="286.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.iterator (25 samples, 6.96%)</title><rect x="637.8" y="259.0" width="82.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.8" y="270.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (25 samples, 6.96%)</title><rect x="637.8" y="243.0" width="82.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="640.8" y="254.0">ru/mail/p..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (3 samples, 0.84%)</title><rect x="637.8" y="227.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="640.8" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (3 samples, 0.84%)</title><rect x="637.8" y="211.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.8" y="222.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1 samples, 0.28%)</title><rect x="644.4" y="195.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.4" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1 samples, 0.28%)</title><rect x="644.4" y="179.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="647.4" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1 samples, 0.28%)</title><rect x="644.4" y="163.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="647.4" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.28%)</title><rect x="644.4" y="147.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.4" y="158.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$83/306659246.getAsBoolean (1 samples, 0.28%)</title><rect x="644.4" y="131.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.4" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (1 samples, 0.28%)</title><rect x="644.4" y="115.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.4" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.56%)</title><rect x="647.7" y="227.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="650.7" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.28%)</title><rect x="650.9" y="211.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.readLock (1 samples, 0.28%)</title><rect x="654.2" y="227.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="657.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1 samples, 0.28%)</title><rect x="657.5" y="227.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1 samples, 0.28%)</title><rect x="657.5" y="211.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.28%)</title><rect x="657.5" y="195.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.5" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.28%)</title><rect x="657.5" y="179.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="660.5" y="190.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1 samples, 0.28%)</title><rect x="657.5" y="163.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.5" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1 samples, 0.28%)</title><rect x="657.5" y="147.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="660.5" y="158.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1 samples, 0.28%)</title><rect x="657.5" y="131.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="660.5" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (1 samples, 0.28%)</title><rect x="657.5" y="115.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="660.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (18 samples, 5.01%)</title><rect x="660.8" y="227.0" width="59.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.8" y="238.0">ru/mai..</text>
</g>
<g>
<title>java/util/Collection.stream (17 samples, 4.74%)</title><rect x="660.8" y="211.0" width="55.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.8" y="222.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (16 samples, 4.46%)</title><rect x="660.8" y="195.0" width="52.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.8" y="206.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (16 samples, 4.46%)</title><rect x="660.8" y="179.0" width="52.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="663.8" y="190.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (16 samples, 4.46%)</title><rect x="660.8" y="163.0" width="52.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.8" y="174.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (16 samples, 4.46%)</title><rect x="660.8" y="147.0" width="52.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="663.8" y="158.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (16 samples, 4.46%)</title><rect x="660.8" y="131.0" width="52.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.8" y="142.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.28%)</title><rect x="660.8" y="115.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.28%)</title><rect x="660.8" y="99.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="663.8" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.28%)</title><rect x="660.8" y="83.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="663.8" y="94.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.28%)</title><rect x="660.8" y="67.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.8" y="78.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.28%)</title><rect x="660.8" y="51.0" width="3.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="663.8" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (15 samples, 4.18%)</title><rect x="664.1" y="115.0" width="49.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.1" y="126.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (7 samples, 1.95%)</title><rect x="690.4" y="99.0" width="23.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="693.4" y="110.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 1.67%)</title><rect x="693.7" y="83.0" width="19.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="696.7" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 1.67%)</title><rect x="693.7" y="67.0" width="19.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="696.7" y="78.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 1.67%)</title><rect x="693.7" y="51.0" width="19.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="696.7" y="62.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.56%)</title><rect x="706.8" y="35.0" width="6.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="709.8" y="46.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.28%)</title><rect x="713.4" y="195.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="716.4" y="206.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (1 samples, 0.28%)</title><rect x="716.7" y="211.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="719.7" y="222.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (1 samples, 0.28%)</title><rect x="716.7" y="195.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="719.7" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.28%)</title><rect x="716.7" y="179.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="719.7" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.28%)</title><rect x="716.7" y="163.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="719.7" y="174.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$79/1826863351.get$Lambda (1 samples, 0.28%)</title><rect x="716.7" y="147.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="719.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (10 samples, 2.79%)</title><rect x="720.0" y="275.0" width="32.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="723.0" y="286.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (10 samples, 2.79%)</title><rect x="720.0" y="259.0" width="32.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="723.0" y="270.0">on..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.28%)</title><rect x="726.5" y="243.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.28%)</title><rect x="726.5" y="227.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="729.5" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.28%)</title><rect x="726.5" y="211.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="729.5" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="726.5" y="195.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="729.5" y="206.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.28%)</title><rect x="726.5" y="179.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="729.5" y="190.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="726.5" y="163.0" width="3.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="729.5" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 1.95%)</title><rect x="729.8" y="243.0" width="23.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="732.8" y="254.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.28%)</title><rect x="729.8" y="227.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="732.8" y="238.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.28%)</title><rect x="729.8" y="211.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="732.8" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.28%)</title><rect x="729.8" y="195.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="732.8" y="206.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.28%)</title><rect x="729.8" y="179.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="732.8" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 1.67%)</title><rect x="733.1" y="227.0" width="19.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="736.1" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 1.67%)</title><rect x="733.1" y="211.0" width="19.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="736.1" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 1.67%)</title><rect x="733.1" y="195.0" width="19.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="736.1" y="206.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (6 samples, 1.67%)</title><rect x="733.1" y="179.0" width="19.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="736.1" y="190.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.84%)</title><rect x="733.1" y="163.0" width="9.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="736.1" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.84%)</title><rect x="733.1" y="147.0" width="9.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="736.1" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.28%)</title><rect x="733.1" y="131.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="736.1" y="142.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.56%)</title><rect x="736.4" y="131.0" width="6.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="739.4" y="142.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.28%)</title><rect x="739.7" y="115.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="742.7" y="126.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.56%)</title><rect x="743.0" y="163.0" width="6.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="746.0" y="174.0"></text>
</g>
<g>
<title>__send (1 samples, 0.28%)</title><rect x="749.6" y="163.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="752.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (1 samples, 0.28%)</title><rect x="752.8" y="291.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.28%)</title><rect x="752.8" y="275.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="755.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.28%)</title><rect x="752.8" y="259.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="755.8" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.28%)</title><rect x="752.8" y="243.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.28%)</title><rect x="756.1" y="371.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="759.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.28%)</title><rect x="756.1" y="355.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="759.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.28%)</title><rect x="756.1" y="339.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="759.1" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.28%)</title><rect x="756.1" y="323.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="759.1" y="334.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (121 samples, 33.70%)</title><rect x="759.4" y="371.0" width="397.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="762.4" y="382.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (40 samples, 11.14%)</title><rect x="759.4" y="355.0" width="131.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="762.4" y="366.0">one/nio/net/Nati..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (40 samples, 11.14%)</title><rect x="759.4" y="339.0" width="131.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="762.4" y="350.0">one/nio/net/Nati..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 1.95%)</title><rect x="775.8" y="323.0" width="23.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="778.8" y="334.0">/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.56%)</title><rect x="798.9" y="323.0" width="6.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="801.9" y="334.0"></text>
</g>
<g>
<title>clock_gettime (9 samples, 2.51%)</title><rect x="805.4" y="323.0" width="29.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="808.4" y="334.0">cl..</text>
</g>
<g>
<title>clock_gettime (3 samples, 0.84%)</title><rect x="825.2" y="307.0" width="9.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="828.2" y="318.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.84%)</title><rect x="825.2" y="291.0" width="9.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="828.2" y="302.0"></text>
</g>
<g>
<title>epoll_wait (17 samples, 4.74%)</title><rect x="835.0" y="323.0" width="55.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="838.0" y="334.0">epoll..</text>
</g>
<g>
<title>one/nio/net/Session.process (80 samples, 22.28%)</title><rect x="890.9" y="355.0" width="262.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="893.9" y="366.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (80 samples, 22.28%)</title><rect x="890.9" y="339.0" width="262.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="893.9" y="350.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (44 samples, 12.26%)</title><rect x="890.9" y="323.0" width="144.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="893.9" y="334.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (32 samples, 8.91%)</title><rect x="904.0" y="307.0" width="105.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="907.0" y="318.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (32 samples, 8.91%)</title><rect x="904.0" y="291.0" width="105.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="907.0" y="302.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (24 samples, 6.69%)</title><rect x="907.3" y="275.0" width="78.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="910.3" y="286.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (5 samples, 1.39%)</title><rect x="907.3" y="259.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="910.3" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 1.39%)</title><rect x="907.3" y="243.0" width="16.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="910.3" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.84%)</title><rect x="907.3" y="227.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="910.3" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.84%)</title><rect x="907.3" y="211.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="910.3" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.56%)</title><rect x="907.3" y="195.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="910.3" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.56%)</title><rect x="907.3" y="179.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="910.3" y="190.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.56%)</title><rect x="907.3" y="163.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="910.3" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.56%)</title><rect x="907.3" y="147.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="910.3" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.56%)</title><rect x="907.3" y="131.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="910.3" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.28%)</title><rect x="907.3" y="115.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="910.3" y="126.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.28%)</title><rect x="910.6" y="115.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="913.6" y="126.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.28%)</title><rect x="913.9" y="195.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="916.9" y="206.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.56%)</title><rect x="917.2" y="227.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.28%)</title><rect x="920.5" y="211.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="923.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.28%)</title><rect x="920.5" y="195.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.5" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.28%)</title><rect x="920.5" y="179.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="923.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.get (19 samples, 5.29%)</title><rect x="923.8" y="259.0" width="62.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.8" y="270.0">ru/mai..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.56%)</title><rect x="927.0" y="243.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="930.0" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.56%)</title><rect x="927.0" y="227.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$77/487508227.get$Lambda (2 samples, 0.56%)</title><rect x="927.0" y="211.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="930.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$77/487508227.&lt;init&gt; (2 samples, 0.56%)</title><rect x="927.0" y="195.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="930.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseAsyncService.executeTask (1 samples, 0.28%)</title><rect x="930.3" y="179.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="933.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseAsyncService.executeTask (16 samples, 4.46%)</title><rect x="933.6" y="243.0" width="52.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="936.6" y="254.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 4.46%)</title><rect x="933.6" y="227.0" width="52.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="936.6" y="238.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (14 samples, 3.90%)</title><rect x="933.6" y="211.0" width="46.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="936.6" y="222.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.28%)</title><rect x="933.6" y="195.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="936.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.28%)</title><rect x="933.6" y="179.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="936.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.28%)</title><rect x="933.6" y="163.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="936.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.28%)</title><rect x="933.6" y="147.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="936.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.28%)</title><rect x="933.6" y="131.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="936.6" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.28%)</title><rect x="933.6" y="115.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="936.6" y="126.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.28%)</title><rect x="933.6" y="99.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="936.6" y="110.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.28%)</title><rect x="933.6" y="83.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="936.6" y="94.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.28%)</title><rect x="933.6" y="67.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="936.6" y="78.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.28%)</title><rect x="933.6" y="51.0" width="3.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="936.6" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 3.62%)</title><rect x="936.9" y="195.0" width="42.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="939.9" y="206.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 3.62%)</title><rect x="936.9" y="179.0" width="42.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="939.9" y="190.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 3.34%)</title><rect x="936.9" y="163.0" width="39.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="939.9" y="174.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 3.34%)</title><rect x="936.9" y="147.0" width="39.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="939.9" y="158.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 3.34%)</title><rect x="936.9" y="131.0" width="39.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="939.9" y="142.0">jdk..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.28%)</title><rect x="940.2" y="115.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.2" y="126.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 1.67%)</title><rect x="943.5" y="115.0" width="19.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="946.5" y="126.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.28%)</title><rect x="946.8" y="99.0" width="3.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="949.8" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.28%)</title><rect x="950.1" y="99.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.1" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.28%)</title><rect x="953.3" y="99.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="956.3" y="110.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.28%)</title><rect x="956.6" y="99.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="959.6" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.28%)</title><rect x="959.9" y="99.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="962.9" y="110.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.84%)</title><rect x="963.2" y="115.0" width="9.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="966.2" y="126.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.28%)</title><rect x="973.1" y="115.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="976.1" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.28%)</title><rect x="976.4" y="163.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="979.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.28%)</title><rect x="976.4" y="147.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="979.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (2 samples, 0.56%)</title><rect x="979.6" y="211.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="982.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.56%)</title><rect x="979.6" y="195.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="982.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.56%)</title><rect x="979.6" y="179.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="982.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.56%)</title><rect x="979.6" y="163.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="982.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.56%)</title><rect x="979.6" y="147.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="982.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.56%)</title><rect x="979.6" y="131.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="982.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.84%)</title><rect x="986.2" y="275.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="989.2" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.84%)</title><rect x="986.2" y="259.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="989.2" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="986.2" y="243.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="989.2" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.56%)</title><rect x="989.5" y="243.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="992.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.56%)</title><rect x="989.5" y="227.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="992.5" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.56%)</title><rect x="989.5" y="211.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="992.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.28%)</title><rect x="996.1" y="275.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="999.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.28%)</title><rect x="996.1" y="259.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="999.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.28%)</title><rect x="996.1" y="243.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="999.1" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.84%)</title><rect x="999.4" y="275.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1002.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.84%)</title><rect x="999.4" y="259.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1002.4" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.84%)</title><rect x="999.4" y="243.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1002.4" y="254.0"></text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (2 samples, 0.56%)</title><rect x="999.4" y="227.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1002.4" y="238.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="1005.9" y="227.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1008.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 1.39%)</title><rect x="1009.2" y="307.0" width="16.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1012.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.28%)</title><rect x="1012.5" y="291.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1015.5" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.28%)</title><rect x="1012.5" y="275.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1015.5" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.56%)</title><rect x="1015.8" y="291.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.8" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.56%)</title><rect x="1015.8" y="275.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1018.8" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.28%)</title><rect x="1022.4" y="291.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1025.4" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.84%)</title><rect x="1025.7" y="307.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1028.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.28%)</title><rect x="1032.2" y="291.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.2" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.28%)</title><rect x="1032.2" y="275.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1035.2" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (36 samples, 10.03%)</title><rect x="1035.5" y="323.0" width="118.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1038.5" y="334.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (27 samples, 7.52%)</title><rect x="1042.1" y="307.0" width="88.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1045.1" y="318.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (16 samples, 4.46%)</title><rect x="1048.7" y="291.0" width="52.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1051.7" y="302.0">Java_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.56%)</title><rect x="1058.5" y="275.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.5" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.28%)</title><rect x="1065.1" y="275.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.1" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 2.79%)</title><rect x="1068.4" y="275.0" width="32.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1071.4" y="286.0">jn..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.56%)</title><rect x="1071.7" y="259.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.7" y="270.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.28%)</title><rect x="1078.2" y="259.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.2" y="270.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.28%)</title><rect x="1081.5" y="259.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.5" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.28%)</title><rect x="1084.8" y="259.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.8" y="270.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 1.11%)</title><rect x="1088.1" y="259.0" width="13.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1091.1" y="270.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 1.11%)</title><rect x="1088.1" y="243.0" width="13.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.1" y="254.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.28%)</title><rect x="1101.3" y="291.0" width="3.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1104.3" y="302.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.56%)</title><rect x="1104.5" y="291.0" width="6.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1107.5" y="302.0"></text>
</g>
<g>
<title>recv (6 samples, 1.67%)</title><rect x="1111.1" y="291.0" width="19.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1114.1" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (7 samples, 1.95%)</title><rect x="1130.8" y="307.0" width="23.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1133.8" y="318.0">o..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.28%)</title><rect x="1153.8" y="355.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.8" y="366.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.28%)</title><rect x="1153.8" y="339.0" width="3.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1156.8" y="350.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="1153.8" y="323.0" width="3.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1156.8" y="334.0"></text>
</g>
<g>
<title>start_thread (10 samples, 2.79%)</title><rect x="1157.1" y="371.0" width="32.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1160.1" y="382.0">st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 2.79%)</title><rect x="1157.1" y="355.0" width="32.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1160.1" y="366.0">th..</text>
</g>
<g>
<title>Thread::call_run() (10 samples, 2.79%)</title><rect x="1157.1" y="339.0" width="32.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.1" y="350.0">Th..</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 2.79%)</title><rect x="1157.1" y="323.0" width="32.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.1" y="334.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 2.79%)</title><rect x="1157.1" y="307.0" width="32.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.1" y="318.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 1.95%)</title><rect x="1157.1" y="291.0" width="23.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.1" y="302.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 1.95%)</title><rect x="1157.1" y="275.0" width="23.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.1" y="286.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 1.67%)</title><rect x="1160.4" y="259.0" width="19.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="270.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.28%)</title><rect x="1176.9" y="243.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="254.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.56%)</title><rect x="1180.1" y="291.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.1" y="302.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.56%)</title><rect x="1180.1" y="275.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.56%)</title><rect x="1180.1" y="259.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="270.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 0.56%)</title><rect x="1180.1" y="243.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.1" y="254.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.56%)</title><rect x="1180.1" y="227.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="238.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (2 samples, 0.56%)</title><rect x="1180.1" y="211.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="222.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.56%)</title><rect x="1180.1" y="195.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.1" y="206.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.28%)</title><rect x="1180.1" y="179.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.1" y="190.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.28%)</title><rect x="1183.4" y="179.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="190.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.28%)</title><rect x="1183.4" y="163.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="174.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.28%)</title><rect x="1186.7" y="291.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="302.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.28%)</title><rect x="1186.7" y="275.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="286.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.28%)</title><rect x="1186.7" y="259.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="270.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.28%)</title><rect x="1186.7" y="243.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.7" y="254.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.28%)</title><rect x="1186.7" y="227.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="238.0"></text>
</g>
<g>
<title>metadata_Relocation::unpack_data() (1 samples, 0.28%)</title><rect x="1186.7" y="211.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="222.0"></text>
</g>
</g>
</svg>
