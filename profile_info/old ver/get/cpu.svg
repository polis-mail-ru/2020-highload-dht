<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="885"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="885"> </text>
<g id="frames">
<g>
<title>all (329 samples, 100.00%)</title><rect x="10.0" y="851.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="862.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (207 samples, 62.92%)</title><rect x="10.0" y="835.0" width="742.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (207 samples, 62.92%)</title><rect x="10.0" y="819.0" width="742.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="830.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (207 samples, 62.92%)</title><rect x="10.0" y="803.0" width="742.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="814.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.30%)</title><rect x="27.9" y="787.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.9" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$get$0 (1 samples, 0.30%)</title><rect x="27.9" y="771.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1 samples, 0.30%)</title><rect x="31.5" y="787.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (89 samples, 27.05%)</title><rect x="35.1" y="787.0" width="319.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.1" y="798.0">java/util/concurrent/ThreadPoolExecutor.get..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (89 samples, 27.05%)</title><rect x="35.1" y="771.0" width="319.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.1" y="782.0">java/util/concurrent/ArrayBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (76 samples, 23.10%)</title><rect x="38.7" y="755.0" width="272.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="41.7" y="766.0">java/util/concurrent/locks/AbstractQ..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.91%)</title><rect x="45.9" y="739.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="48.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.91%)</title><rect x="45.9" y="723.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.91%)</title><rect x="45.9" y="707.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 1.52%)</title><rect x="56.6" y="739.0" width="18.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.52%)</title><rect x="56.6" y="723.0" width="18.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.22%)</title><rect x="56.6" y="707.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.22%)</title><rect x="56.6" y="691.0" width="14.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.30%)</title><rect x="56.6" y="675.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.6" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.91%)</title><rect x="60.2" y="675.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.2" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.91%)</title><rect x="60.2" y="659.0" width="10.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="63.2" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.61%)</title><rect x="60.2" y="643.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="63.2" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.30%)</title><rect x="67.4" y="643.0" width="3.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="70.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.30%)</title><rect x="71.0" y="707.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (66 samples, 20.06%)</title><rect x="74.6" y="739.0" width="236.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.6" y="750.0">java/util/concurrent/locks/Lock..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (66 samples, 20.06%)</title><rect x="74.6" y="723.0" width="236.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.6" y="734.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (50 samples, 15.20%)</title><rect x="85.3" y="707.0" width="179.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="88.3" y="718.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.61%)</title><rect x="88.9" y="691.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="91.9" y="702.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.30%)</title><rect x="96.1" y="691.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="99.1" y="702.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.30%)</title><rect x="99.7" y="691.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="102.7" y="702.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 4.26%)</title><rect x="103.3" y="691.0" width="50.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="106.3" y="702.0">Parke..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.30%)</title><rect x="114.0" y="675.0" width="3.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="117.0" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.91%)</title><rect x="117.6" y="675.0" width="10.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="120.6" y="686.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.61%)</title><rect x="121.2" y="659.0" width="7.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="124.2" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 2.13%)</title><rect x="128.4" y="675.0" width="25.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="131.4" y="686.0">_..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.61%)</title><rect x="153.5" y="691.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="156.5" y="702.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.30%)</title><rect x="160.6" y="691.0" width="3.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="163.6" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (25 samples, 7.60%)</title><rect x="164.2" y="691.0" width="89.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="167.2" y="702.0">__pthread_..</text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.30%)</title><rect x="253.9" y="691.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="256.9" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.61%)</title><rect x="257.5" y="691.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="260.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 3.95%)</title><rect x="264.7" y="707.0" width="46.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="267.7" y="718.0">[unk..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.30%)</title><rect x="264.7" y="691.0" width="3.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="267.7" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_wait (12 samples, 3.65%)</title><rect x="268.2" y="691.0" width="43.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="271.2" y="702.0">__pt..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.30%)</title><rect x="311.3" y="755.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="314.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.30%)</title><rect x="311.3" y="739.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="314.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.30%)</title><rect x="311.3" y="723.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.30%)</title><rect x="311.3" y="707.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="314.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.30%)</title><rect x="311.3" y="691.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.30%)</title><rect x="311.3" y="675.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.30%)</title><rect x="311.3" y="659.0" width="3.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="314.3" y="670.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.30%)</title><rect x="311.3" y="643.0" width="3.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="314.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 3.34%)</title><rect x="314.9" y="755.0" width="39.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="317.9" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 3.34%)</title><rect x="314.9" y="739.0" width="39.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.9" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 3.34%)</title><rect x="314.9" y="723.0" width="39.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="317.9" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 3.34%)</title><rect x="314.9" y="707.0" width="39.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.9" y="718.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 2.74%)</title><rect x="322.0" y="691.0" width="32.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.0" y="702.0">jd..</text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.30%)</title><rect x="322.0" y="675.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="325.0" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 1.22%)</title><rect x="325.6" y="675.0" width="14.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="328.6" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.30%)</title><rect x="329.2" y="659.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="332.2" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.30%)</title><rect x="332.8" y="659.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="335.8" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.30%)</title><rect x="336.4" y="659.0" width="3.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="339.4" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 1.22%)</title><rect x="340.0" y="675.0" width="14.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="343.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$70/1531190364.run (98 samples, 29.79%)</title><rect x="354.3" y="787.0" width="351.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="357.3" y="798.0">ru/mail/polis/service/re1nex/AsyncTopologyServic..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$get$0 (98 samples, 29.79%)</title><rect x="354.3" y="771.0" width="351.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.3" y="782.0">ru/mail/polis/service/re1nex/AsyncTopologyServic..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (21 samples, 6.38%)</title><rect x="354.3" y="755.0" width="75.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.3" y="766.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (21 samples, 6.38%)</title><rect x="354.3" y="739.0" width="75.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="357.3" y="750.0">ru/mail/..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.firstKey (3 samples, 0.91%)</title><rect x="354.3" y="723.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="357.3" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.subLowest (3 samples, 0.91%)</title><rect x="354.3" y="707.0" width="10.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.3" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (3 samples, 0.91%)</title><rect x="354.3" y="691.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.3" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (3 samples, 0.91%)</title><rect x="354.3" y="675.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="357.3" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.isEmpty (2 samples, 0.61%)</title><rect x="365.1" y="723.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="368.1" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.isEmpty (2 samples, 0.61%)</title><rect x="365.1" y="707.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="368.1" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (2 samples, 0.61%)</title><rect x="365.1" y="691.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.1" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (2 samples, 0.61%)</title><rect x="365.1" y="675.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="368.1" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.30%)</title><rect x="368.7" y="659.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="371.7" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (2 samples, 0.61%)</title><rect x="372.2" y="723.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.2" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.61%)</title><rect x="372.2" y="707.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="375.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (14 samples, 4.26%)</title><rect x="379.4" y="723.0" width="50.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="382.4" y="734.0">ru/ma..</text>
</g>
<g>
<title>java/security/MessageDigest.digest (3 samples, 0.91%)</title><rect x="379.4" y="707.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.4" y="718.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (3 samples, 0.91%)</title><rect x="379.4" y="691.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.4" y="702.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (3 samples, 0.91%)</title><rect x="379.4" y="675.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.4" y="686.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (3 samples, 0.91%)</title><rect x="379.4" y="659.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.4" y="670.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implDigest (3 samples, 0.91%)</title><rect x="379.4" y="643.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.4" y="654.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bLittle (1 samples, 0.30%)</title><rect x="379.4" y="627.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.4" y="638.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bLittle4 (1 samples, 0.30%)</title><rect x="383.0" y="627.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="386.0" y="638.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.30%)</title><rect x="383.0" y="611.0" width="3.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="386.0" y="622.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implCompress (1 samples, 0.30%)</title><rect x="386.6" y="627.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="389.6" y="638.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (9 samples, 2.74%)</title><rect x="390.2" y="707.0" width="32.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.2" y="718.0">ja..</text>
</g>
<g>
<title>java/security/Security.getImpl (9 samples, 2.74%)</title><rect x="390.2" y="691.0" width="32.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.2" y="702.0">ja..</text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (9 samples, 2.74%)</title><rect x="390.2" y="675.0" width="32.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.2" y="686.0">su..</text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (3 samples, 0.91%)</title><rect x="390.2" y="659.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.2" y="670.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (3 samples, 0.91%)</title><rect x="390.2" y="643.0" width="10.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="393.2" y="654.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (2 samples, 0.61%)</title><rect x="390.2" y="627.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.2" y="638.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.61%)</title><rect x="390.2" y="611.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.2" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (1 samples, 0.30%)</title><rect x="393.8" y="595.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="396.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.30%)</title><rect x="397.4" y="627.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.30%)</title><rect x="397.4" y="611.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.4" y="622.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (6 samples, 1.82%)</title><rect x="400.9" y="659.0" width="21.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="403.9" y="670.0">s..</text>
</g>
<g>
<title>java/security/Provider.getService (6 samples, 1.82%)</title><rect x="400.9" y="643.0" width="21.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.9" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 1.82%)</title><rect x="400.9" y="627.0" width="21.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.9" y="638.0">j..</text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (1 samples, 0.30%)</title><rect x="418.9" y="611.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.9" y="622.0"></text>
</g>
<g>
<title>java/util/Objects.hash (1 samples, 0.30%)</title><rect x="418.9" y="595.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.9" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (1 samples, 0.30%)</title><rect x="418.9" y="579.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="421.9" y="590.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (2 samples, 0.61%)</title><rect x="422.5" y="707.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.5" y="718.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (1 samples, 0.30%)</title><rect x="422.5" y="691.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.5" y="702.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (1 samples, 0.30%)</title><rect x="422.5" y="675.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.5" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.30%)</title><rect x="422.5" y="659.0" width="3.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="425.5" y="670.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (1 samples, 0.30%)</title><rect x="426.0" y="691.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.getFromNode (77 samples, 23.40%)</title><rect x="429.6" y="755.0" width="276.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="432.6" y="766.0">ru/mail/polis/service/re1nex/AsyncTop..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (57 samples, 17.33%)</title><rect x="429.6" y="739.0" width="204.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.6" y="750.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.30%)</title><rect x="433.2" y="723.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="436.2" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.30%)</title><rect x="433.2" y="707.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="436.2" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.30%)</title><rect x="433.2" y="691.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.2" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1 samples, 0.30%)</title><rect x="433.2" y="675.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="436.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.30%)</title><rect x="433.2" y="659.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="436.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$120/917462711.apply (1 samples, 0.30%)</title><rect x="433.2" y="643.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.30%)</title><rect x="433.2" y="627.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="436.2" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.30%)</title><rect x="433.2" y="611.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="436.2" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.30%)</title><rect x="433.2" y="595.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="436.2" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.30%)</title><rect x="436.8" y="723.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="439.8" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.30%)</title><rect x="436.8" y="707.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="439.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$132/1997942840.apply (1 samples, 0.30%)</title><rect x="436.8" y="691.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="439.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$iterator$4 (1 samples, 0.30%)</title><rect x="436.8" y="675.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="439.8" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.30%)</title><rect x="436.8" y="659.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.8" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.30%)</title><rect x="436.8" y="643.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="439.8" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.iterator (54 samples, 16.41%)</title><rect x="440.4" y="723.0" width="193.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="443.4" y="734.0">ru/mail/polis/dao/re1nex/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (5 samples, 1.52%)</title><rect x="440.4" y="707.0" width="17.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="443.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.61%)</title><rect x="451.2" y="691.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.61%)</title><rect x="451.2" y="675.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="454.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.61%)</title><rect x="451.2" y="659.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.61%)</title><rect x="451.2" y="643.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="454.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.61%)</title><rect x="451.2" y="627.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.2" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.61%)</title><rect x="451.2" y="611.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.61%)</title><rect x="458.3" y="707.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.61%)</title><rect x="458.3" y="691.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="461.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.30%)</title><rect x="461.9" y="675.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (47 samples, 14.29%)</title><rect x="465.5" y="707.0" width="168.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="468.5" y="718.0">ru/mail/polis/dao/re1n..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (4 samples, 1.22%)</title><rect x="465.5" y="691.0" width="14.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.5" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (4 samples, 1.22%)</title><rect x="465.5" y="675.0" width="14.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.5" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (2 samples, 0.61%)</title><rect x="465.5" y="659.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="468.5" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1 samples, 0.30%)</title><rect x="469.1" y="643.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="472.1" y="654.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (2 samples, 0.61%)</title><rect x="472.7" y="659.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (2 samples, 0.61%)</title><rect x="472.7" y="643.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="475.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (2 samples, 0.61%)</title><rect x="472.7" y="627.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.clear (1 samples, 0.30%)</title><rect x="472.7" y="611.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="475.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.30%)</title><rect x="476.3" y="611.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (3 samples, 0.91%)</title><rect x="479.8" y="691.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="482.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (3 samples, 0.91%)</title><rect x="479.8" y="675.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.61%)</title><rect x="483.4" y="659.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="486.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.61%)</title><rect x="483.4" y="643.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.61%)</title><rect x="483.4" y="627.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="486.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.61%)</title><rect x="483.4" y="611.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.30%)</title><rect x="487.0" y="595.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="490.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.30%)</title><rect x="490.6" y="691.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.30%)</title><rect x="490.6" y="675.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="493.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.30%)</title><rect x="490.6" y="659.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="493.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (1 samples, 0.30%)</title><rect x="490.6" y="643.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.6" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1 samples, 0.30%)</title><rect x="494.2" y="691.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="497.2" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1 samples, 0.30%)</title><rect x="494.2" y="675.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="497.2" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.30%)</title><rect x="494.2" y="659.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="497.2" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.30%)</title><rect x="494.2" y="643.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="497.2" y="654.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1 samples, 0.30%)</title><rect x="494.2" y="627.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="497.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1 samples, 0.30%)</title><rect x="494.2" y="611.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="497.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1 samples, 0.30%)</title><rect x="494.2" y="595.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.30%)</title><rect x="494.2" y="579.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (38 samples, 11.55%)</title><rect x="497.8" y="691.0" width="136.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.8" y="702.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/util/Collection.stream (32 samples, 9.73%)</title><rect x="497.8" y="675.0" width="114.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="500.8" y="686.0">java/util/Coll..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (32 samples, 9.73%)</title><rect x="497.8" y="659.0" width="114.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.8" y="670.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (32 samples, 9.73%)</title><rect x="497.8" y="643.0" width="114.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="500.8" y="654.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (32 samples, 9.73%)</title><rect x="497.8" y="627.0" width="114.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.8" y="638.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (1 samples, 0.30%)</title><rect x="497.8" y="611.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="500.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.30%)</title><rect x="497.8" y="595.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.30%)</title><rect x="497.8" y="579.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="500.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.30%)</title><rect x="497.8" y="563.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.8" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.30%)</title><rect x="497.8" y="547.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.8" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.30%)</title><rect x="497.8" y="531.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="500.8" y="542.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.30%)</title><rect x="497.8" y="515.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="500.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (31 samples, 9.42%)</title><rect x="501.4" y="611.0" width="111.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="504.4" y="622.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (31 samples, 9.42%)</title><rect x="501.4" y="595.0" width="111.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.4" y="606.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.61%)</title><rect x="512.1" y="579.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="515.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.61%)</title><rect x="512.1" y="563.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="515.1" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.61%)</title><rect x="512.1" y="547.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.1" y="558.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.30%)</title><rect x="512.1" y="531.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="515.1" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.30%)</title><rect x="515.7" y="531.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="518.7" y="542.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.30%)</title><rect x="515.7" y="515.0" width="3.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="518.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (26 samples, 7.90%)</title><rect x="519.3" y="579.0" width="93.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="522.3" y="590.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (23 samples, 6.99%)</title><rect x="530.1" y="563.0" width="82.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="533.1" y="574.0">java/util..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 3.65%)</title><rect x="569.5" y="547.0" width="43.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.5" y="558.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 3.65%)</title><rect x="569.5" y="531.0" width="43.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="572.5" y="542.0">java..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.91%)</title><rect x="569.5" y="515.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="572.5" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (9 samples, 2.74%)</title><rect x="580.3" y="515.0" width="32.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="583.3" y="526.0">ja..</text>
</g>
<g>
<title>vectorizedMismatch (4 samples, 1.22%)</title><rect x="598.2" y="499.0" width="14.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="601.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 1.82%)</title><rect x="612.6" y="675.0" width="21.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="615.6" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 1.82%)</title><rect x="612.6" y="659.0" width="21.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.6" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 1.82%)</title><rect x="612.6" y="643.0" width="21.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="615.6" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (1 samples, 0.30%)</title><rect x="630.5" y="627.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (20 samples, 6.08%)</title><rect x="634.1" y="739.0" width="71.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="637.1" y="750.0">ru/mail/..</text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.30%)</title><rect x="637.7" y="723.0" width="3.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="640.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (18 samples, 5.47%)</title><rect x="641.2" y="723.0" width="64.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="644.2" y="734.0">one/nio..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.30%)</title><rect x="644.8" y="707.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.30%)</title><rect x="644.8" y="691.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="647.8" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.30%)</title><rect x="644.8" y="675.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="647.8" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (16 samples, 4.86%)</title><rect x="648.4" y="707.0" width="57.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="651.4" y="718.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 1.52%)</title><rect x="648.4" y="691.0" width="18.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="651.4" y="702.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 1.52%)</title><rect x="648.4" y="675.0" width="18.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="651.4" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 1.52%)</title><rect x="648.4" y="659.0" width="18.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="651.4" y="670.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 1.52%)</title><rect x="648.4" y="643.0" width="18.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.4" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 3.34%)</title><rect x="666.4" y="691.0" width="39.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="669.4" y="702.0">one..</text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 3.34%)</title><rect x="666.4" y="675.0" width="39.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="669.4" y="686.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 3.04%)</title><rect x="669.9" y="659.0" width="35.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="672.9" y="670.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (9 samples, 2.74%)</title><rect x="673.5" y="643.0" width="32.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="676.5" y="654.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 1.22%)</title><rect x="677.1" y="627.0" width="14.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="680.1" y="638.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.30%)</title><rect x="677.1" y="611.0" width="3.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="680.1" y="622.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.30%)</title><rect x="680.7" y="611.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="683.7" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.30%)</title><rect x="684.3" y="611.0" width="3.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="687.3" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.30%)</title><rect x="684.3" y="595.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="687.3" y="606.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.30%)</title><rect x="687.9" y="611.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="690.9" y="622.0"></text>
</g>
<g>
<title>__send (3 samples, 0.91%)</title><rect x="691.5" y="627.0" width="10.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="694.5" y="638.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.30%)</title><rect x="702.2" y="627.0" width="3.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="705.2" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (13 samples, 3.95%)</title><rect x="705.8" y="787.0" width="46.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="708.8" y="798.0">sun/..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (13 samples, 3.95%)</title><rect x="705.8" y="771.0" width="46.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.8" y="782.0">java..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$175/1451032207.run (13 samples, 3.95%)</title><rect x="705.8" y="755.0" width="46.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="708.8" y="766.0">sun/..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (13 samples, 3.95%)</title><rect x="705.8" y="739.0" width="46.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.8" y="750.0">sun/..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (13 samples, 3.95%)</title><rect x="705.8" y="723.0" width="46.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="708.8" y="734.0">sun/..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (13 samples, 3.95%)</title><rect x="705.8" y="707.0" width="46.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="708.8" y="718.0">sun/..</text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (13 samples, 3.95%)</title><rect x="705.8" y="691.0" width="46.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="708.8" y="702.0">sun/..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (13 samples, 3.95%)</title><rect x="705.8" y="675.0" width="46.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="708.8" y="686.0">java..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (13 samples, 3.95%)</title><rect x="705.8" y="659.0" width="46.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="708.8" y="670.0">sun/..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (13 samples, 3.95%)</title><rect x="705.8" y="643.0" width="46.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="708.8" y="654.0">sun/..</text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (13 samples, 3.95%)</title><rect x="705.8" y="627.0" width="46.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="708.8" y="638.0">sun/..</text>
</g>
<g>
<title>java/lang/reflect/Method.getParameterTypes (1 samples, 0.30%)</title><rect x="705.8" y="611.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="708.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Object.clone (1 samples, 0.30%)</title><rect x="705.8" y="595.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="708.8" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.30%)</title><rect x="705.8" y="579.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="708.8" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (5 samples, 1.52%)</title><rect x="709.4" y="611.0" width="17.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.4" y="622.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (5 samples, 1.52%)</title><rect x="709.4" y="595.0" width="17.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.4" y="606.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor42.invoke (5 samples, 1.52%)</title><rect x="709.4" y="579.0" width="17.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="712.4" y="590.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (5 samples, 1.52%)</title><rect x="709.4" y="563.0" width="17.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.4" y="574.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (5 samples, 1.52%)</title><rect x="709.4" y="547.0" width="17.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.4" y="558.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (5 samples, 1.52%)</title><rect x="709.4" y="531.0" width="17.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.4" y="542.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (5 samples, 1.52%)</title><rect x="709.4" y="515.0" width="17.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="712.4" y="526.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (5 samples, 1.52%)</title><rect x="709.4" y="499.0" width="17.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="712.4" y="510.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (5 samples, 1.52%)</title><rect x="709.4" y="483.0" width="17.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="712.4" y="494.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (5 samples, 1.52%)</title><rect x="709.4" y="467.0" width="17.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="712.4" y="478.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (5 samples, 1.52%)</title><rect x="709.4" y="451.0" width="17.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="712.4" y="462.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (5 samples, 1.52%)</title><rect x="709.4" y="435.0" width="17.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="712.4" y="446.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (5 samples, 1.52%)</title><rect x="709.4" y="419.0" width="17.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.4" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (5 samples, 1.52%)</title><rect x="709.4" y="403.0" width="17.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.4" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (5 samples, 1.52%)</title><rect x="709.4" y="387.0" width="17.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.4" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (5 samples, 1.52%)</title><rect x="709.4" y="371.0" width="17.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="712.4" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (5 samples, 1.52%)</title><rect x="709.4" y="355.0" width="17.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="712.4" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (4 samples, 1.22%)</title><rect x="709.4" y="339.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="712.4" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (4 samples, 1.22%)</title><rect x="709.4" y="323.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="712.4" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (4 samples, 1.22%)</title><rect x="709.4" y="307.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.4" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (4 samples, 1.22%)</title><rect x="709.4" y="291.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.4" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.61%)</title><rect x="709.4" y="275.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.4" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (2 samples, 0.61%)</title><rect x="709.4" y="259.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.4" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.61%)</title><rect x="709.4" y="243.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.4" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (2 samples, 0.61%)</title><rect x="709.4" y="227.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.4" y="238.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (2 samples, 0.61%)</title><rect x="709.4" y="211.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="712.4" y="222.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.30%)</title><rect x="709.4" y="195.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="712.4" y="206.0"></text>
</g>
<g>
<title>javax/management/openmbean/SimpleType.isValue (1 samples, 0.30%)</title><rect x="709.4" y="179.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="712.4" y="190.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.30%)</title><rect x="709.4" y="163.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="712.4" y="174.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (1 samples, 0.30%)</title><rect x="713.0" y="195.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.0" y="206.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (2 samples, 0.61%)</title><rect x="716.6" y="275.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.6" y="286.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (2 samples, 0.61%)</title><rect x="716.6" y="259.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="719.6" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.30%)</title><rect x="716.6" y="243.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.6" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.30%)</title><rect x="716.6" y="227.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.6" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.30%)</title><rect x="716.6" y="211.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="719.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.30%)</title><rect x="716.6" y="195.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="719.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.30%)</title><rect x="716.6" y="179.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.30%)</title><rect x="716.6" y="163.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.6" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.30%)</title><rect x="720.2" y="243.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="723.2" y="254.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (1 samples, 0.30%)</title><rect x="723.7" y="339.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="726.7" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.30%)</title><rect x="723.7" y="323.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="726.7" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.30%)</title><rect x="723.7" y="307.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="726.7" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor5.invoke (1 samples, 0.30%)</title><rect x="723.7" y="291.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="726.7" y="302.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (1 samples, 0.30%)</title><rect x="723.7" y="275.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="726.7" y="286.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.30%)</title><rect x="723.7" y="259.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="726.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.30%)</title><rect x="723.7" y="243.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="726.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor47.invoke (1 samples, 0.30%)</title><rect x="723.7" y="227.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="726.7" y="238.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (1 samples, 0.30%)</title><rect x="723.7" y="211.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="726.7" y="222.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (1 samples, 0.30%)</title><rect x="723.7" y="195.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="726.7" y="206.0"></text>
</g>
<g>
<title>jmm_GetThreadInfo (1 samples, 0.30%)</title><rect x="723.7" y="179.0" width="3.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="726.7" y="190.0"></text>
</g>
<g>
<title>Management::create_thread_info_instance(ThreadSnapshot*, Thread*) (1 samples, 0.30%)</title><rect x="723.7" y="163.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="726.7" y="174.0"></text>
</g>
<g>
<title>JavaCalls::construct_new_instance(InstanceKlass*, Symbol*, JavaCallArguments*, Thread*) (1 samples, 0.30%)</title><rect x="723.7" y="147.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="726.7" y="158.0"></text>
</g>
<g>
<title>JavaCalls::call_special(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*) (1 samples, 0.30%)</title><rect x="723.7" y="131.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="726.7" y="142.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, LinkInfo const&amp;, Thread*) (1 samples, 0.30%)</title><rect x="723.7" y="115.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="726.7" y="126.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.30%)</title><rect x="723.7" y="99.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="726.7" y="110.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.30%)</title><rect x="723.7" y="83.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="726.7" y="94.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.30%)</title><rect x="723.7" y="67.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="726.7" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.267] (1 samples, 0.30%)</title><rect x="723.7" y="51.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="726.7" y="62.0"></text>
</g>
<g>
<title>method_matches(Method const*, Symbol const*, bool, bool, bool) (1 samples, 0.30%)</title><rect x="723.7" y="35.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="726.7" y="46.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (5 samples, 1.52%)</title><rect x="727.3" y="611.0" width="18.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="730.3" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (5 samples, 1.52%)</title><rect x="727.3" y="595.0" width="18.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="730.3" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5 samples, 1.52%)</title><rect x="727.3" y="579.0" width="18.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.3" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (5 samples, 1.52%)</title><rect x="727.3" y="563.0" width="18.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="730.3" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5 samples, 1.52%)</title><rect x="727.3" y="547.0" width="18.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="730.3" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (4 samples, 1.22%)</title><rect x="727.3" y="531.0" width="14.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.3" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (4 samples, 1.22%)</title><rect x="727.3" y="515.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.3" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (4 samples, 1.22%)</title><rect x="727.3" y="499.0" width="14.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.3" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (4 samples, 1.22%)</title><rect x="727.3" y="483.0" width="14.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.3" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (4 samples, 1.22%)</title><rect x="727.3" y="467.0" width="14.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="730.3" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (4 samples, 1.22%)</title><rect x="727.3" y="451.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="730.3" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (4 samples, 1.22%)</title><rect x="727.3" y="435.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="730.3" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (4 samples, 1.22%)</title><rect x="727.3" y="419.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.3" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (4 samples, 1.22%)</title><rect x="727.3" y="403.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor34.invoke (4 samples, 1.22%)</title><rect x="727.3" y="387.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.3" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (4 samples, 1.22%)</title><rect x="727.3" y="371.0" width="14.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="730.3" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (3 samples, 0.91%)</title><rect x="727.3" y="355.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="730.3" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (3 samples, 0.91%)</title><rect x="727.3" y="339.0" width="10.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.3" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.lookup (1 samples, 0.30%)</title><rect x="727.3" y="323.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.3" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.61%)</title><rect x="730.9" y="323.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="733.9" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.61%)</title><rect x="730.9" y="307.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.9" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.61%)</title><rect x="730.9" y="291.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.9" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.61%)</title><rect x="730.9" y="275.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="733.9" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.61%)</title><rect x="730.9" y="259.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="733.9" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.61%)</title><rect x="730.9" y="243.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.9" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.lookup (1 samples, 0.30%)</title><rect x="730.9" y="227.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="733.9" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.hash (1 samples, 0.30%)</title><rect x="730.9" y="211.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="733.9" y="222.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (1 samples, 0.30%)</title><rect x="730.9" y="195.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="733.9" y="206.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.30%)</title><rect x="730.9" y="179.0" width="3.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="733.9" y="190.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.30%)</title><rect x="730.9" y="163.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="733.9" y="174.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.30%)</title><rect x="730.9" y="147.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="733.9" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.30%)</title><rect x="734.5" y="227.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="737.5" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.30%)</title><rect x="734.5" y="211.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="737.5" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.30%)</title><rect x="734.5" y="195.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="737.5" y="206.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.30%)</title><rect x="734.5" y="179.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="737.5" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.30%)</title><rect x="734.5" y="163.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.5" y="174.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor34.invoke (1 samples, 0.30%)</title><rect x="734.5" y="147.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="737.5" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (1 samples, 0.30%)</title><rect x="734.5" y="131.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="737.5" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.30%)</title><rect x="734.5" y="115.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="737.5" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.30%)</title><rect x="734.5" y="99.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="737.5" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.lookup (1 samples, 0.30%)</title><rect x="734.5" y="83.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="737.5" y="94.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntrySet.iterator (1 samples, 0.30%)</title><rect x="738.1" y="355.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="741.1" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.30%)</title><rect x="738.1" y="339.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="741.1" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.30%)</title><rect x="741.7" y="531.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="744.7" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.processQueue (1 samples, 0.30%)</title><rect x="741.7" y="515.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="744.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.poll (1 samples, 0.30%)</title><rect x="741.7" y="499.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="744.7" y="510.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.reallyPoll (1 samples, 0.30%)</title><rect x="741.7" y="483.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.7" y="494.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (1 samples, 0.30%)</title><rect x="745.3" y="611.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="748.3" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.30%)</title><rect x="745.3" y="595.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="748.3" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.30%)</title><rect x="745.3" y="579.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="748.3" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.30%)</title><rect x="745.3" y="563.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="748.3" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.30%)</title><rect x="745.3" y="547.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="748.3" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.30%)</title><rect x="745.3" y="531.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="748.3" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.releaseOutputStream (1 samples, 0.30%)</title><rect x="748.8" y="611.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="751.8" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.flush (1 samples, 0.30%)</title><rect x="748.8" y="595.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="751.8" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.flush (1 samples, 0.30%)</title><rect x="748.8" y="579.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.8" y="590.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.30%)</title><rect x="748.8" y="563.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="751.8" y="574.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.30%)</title><rect x="748.8" y="547.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="751.8" y="558.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (1 samples, 0.30%)</title><rect x="748.8" y="531.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="751.8" y="542.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (1 samples, 0.30%)</title><rect x="748.8" y="515.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.8" y="526.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (1 samples, 0.30%)</title><rect x="748.8" y="499.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="751.8" y="510.0"></text>
</g>
<g>
<title>Java_java_net_SocketOutputStream_socketWrite0 (1 samples, 0.30%)</title><rect x="748.8" y="483.0" width="3.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="751.8" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.30%)</title><rect x="748.8" y="467.0" width="3.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="751.8" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (104 samples, 31.61%)</title><rect x="752.4" y="835.0" width="373.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="755.4" y="846.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.30%)</title><rect x="752.4" y="819.0" width="3.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="755.4" y="830.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (44 samples, 13.37%)</title><rect x="756.0" y="819.0" width="157.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.0" y="830.0">one/nio/net/NativeSe..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (44 samples, 13.37%)</title><rect x="756.0" y="803.0" width="157.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="759.0" y="814.0">one/nio/net/NativeSe..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 1.22%)</title><rect x="774.0" y="787.0" width="14.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="777.0" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.91%)</title><rect x="788.3" y="787.0" width="10.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="791.3" y="798.0"></text>
</g>
<g>
<title>clock_gettime (12 samples, 3.65%)</title><rect x="799.1" y="787.0" width="43.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="802.1" y="798.0">cloc..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.30%)</title><rect x="838.5" y="771.0" width="3.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="841.5" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="838.5" y="755.0" width="3.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="841.5" y="766.0"></text>
</g>
<g>
<title>epoll_wait (20 samples, 6.08%)</title><rect x="842.1" y="787.0" width="71.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="845.1" y="798.0">epoll_wait</text>
</g>
<g>
<title>one/nio/net/Session.process (59 samples, 17.93%)</title><rect x="913.8" y="819.0" width="211.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="916.8" y="830.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (59 samples, 17.93%)</title><rect x="913.8" y="803.0" width="211.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="916.8" y="814.0">one/nio/http/HttpSession.pro..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (43 samples, 13.07%)</title><rect x="913.8" y="787.0" width="154.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="916.8" y="798.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (30 samples, 9.12%)</title><rect x="921.0" y="771.0" width="107.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="924.0" y="782.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (30 samples, 9.12%)</title><rect x="921.0" y="755.0" width="107.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="924.0" y="766.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (28 samples, 8.51%)</title><rect x="921.0" y="739.0" width="100.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="924.0" y="750.0">RequestHandl..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (4 samples, 1.22%)</title><rect x="921.0" y="723.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="924.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 1.22%)</title><rect x="921.0" y="707.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="924.0" y="718.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.61%)</title><rect x="924.6" y="691.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="927.6" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.61%)</title><rect x="924.6" y="675.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="927.6" y="686.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.61%)</title><rect x="924.6" y="659.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="927.6" y="670.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.30%)</title><rect x="931.8" y="691.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="934.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.30%)</title><rect x="931.8" y="675.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="934.8" y="686.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.30%)</title><rect x="931.8" y="659.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="934.8" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.30%)</title><rect x="931.8" y="643.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="934.8" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.get (24 samples, 7.29%)</title><rect x="935.3" y="723.0" width="86.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="938.3" y="734.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseAsyncService.executeTask (24 samples, 7.29%)</title><rect x="935.3" y="707.0" width="86.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="938.3" y="718.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (24 samples, 7.29%)</title><rect x="935.3" y="691.0" width="86.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="938.3" y="702.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (21 samples, 6.38%)</title><rect x="942.5" y="675.0" width="75.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="945.5" y="686.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.30%)</title><rect x="949.7" y="659.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="952.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.30%)</title><rect x="949.7" y="643.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="952.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.30%)</title><rect x="949.7" y="627.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="952.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.30%)</title><rect x="949.7" y="611.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="952.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.30%)</title><rect x="949.7" y="595.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="952.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 1.22%)</title><rect x="953.3" y="659.0" width="14.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="956.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 1.22%)</title><rect x="953.3" y="643.0" width="14.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 1.22%)</title><rect x="953.3" y="627.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="956.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 1.22%)</title><rect x="953.3" y="611.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="956.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 1.22%)</title><rect x="953.3" y="595.0" width="14.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="956.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 1.22%)</title><rect x="953.3" y="579.0" width="14.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="956.3" y="590.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.61%)</title><rect x="953.3" y="563.0" width="7.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="956.3" y="574.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.30%)</title><rect x="953.3" y="547.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="956.3" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.30%)</title><rect x="953.3" y="531.0" width="3.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="956.3" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.30%)</title><rect x="956.9" y="547.0" width="3.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="959.9" y="558.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.61%)</title><rect x="960.5" y="563.0" width="7.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="963.5" y="574.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.30%)</title><rect x="960.5" y="547.0" width="3.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="963.5" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.30%)</title><rect x="964.0" y="547.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="967.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 4.26%)</title><rect x="967.6" y="659.0" width="50.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="970.6" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 4.26%)</title><rect x="967.6" y="643.0" width="50.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="970.6" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 4.26%)</title><rect x="967.6" y="627.0" width="50.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="970.6" y="638.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 4.26%)</title><rect x="967.6" y="611.0" width="50.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="970.6" y="622.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 4.26%)</title><rect x="967.6" y="595.0" width="50.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="970.6" y="606.0">jdk/i..</text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.61%)</title><rect x="967.6" y="579.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="970.6" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.30%)</title><rect x="974.8" y="579.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="977.8" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 1.82%)</title><rect x="978.4" y="579.0" width="21.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="981.4" y="590.0">U..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.30%)</title><rect x="978.4" y="563.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.4" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.30%)</title><rect x="982.0" y="563.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.0" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.61%)</title><rect x="985.6" y="563.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.6" y="574.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.30%)</title><rect x="992.7" y="563.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="995.7" y="574.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.30%)</title><rect x="996.3" y="563.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.3" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 1.52%)</title><rect x="999.9" y="579.0" width="17.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1002.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.30%)</title><rect x="1017.8" y="675.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1020.8" y="686.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.61%)</title><rect x="1021.4" y="739.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1024.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.61%)</title><rect x="1021.4" y="723.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1024.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.61%)</title><rect x="1021.4" y="707.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1024.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.61%)</title><rect x="1021.4" y="691.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1024.4" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.61%)</title><rect x="1021.4" y="675.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1024.4" y="686.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.61%)</title><rect x="1021.4" y="659.0" width="7.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1024.4" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 1.52%)</title><rect x="1028.6" y="771.0" width="17.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1031.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 1.22%)</title><rect x="1032.2" y="755.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1035.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 1.22%)</title><rect x="1032.2" y="739.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1035.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.30%)</title><rect x="1042.9" y="723.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.9" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.30%)</title><rect x="1042.9" y="707.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.9" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.30%)</title><rect x="1042.9" y="691.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.9" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.30%)</title><rect x="1042.9" y="675.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.9" y="686.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.30%)</title><rect x="1042.9" y="659.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.9" y="670.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.30%)</title><rect x="1042.9" y="643.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1045.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.61%)</title><rect x="1046.5" y="771.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1049.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 1.22%)</title><rect x="1053.7" y="771.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1056.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.30%)</title><rect x="1064.5" y="755.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1067.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="1064.5" y="739.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.5" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (16 samples, 4.86%)</title><rect x="1068.1" y="787.0" width="57.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1071.1" y="798.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (13 samples, 3.95%)</title><rect x="1068.1" y="771.0" width="46.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1071.1" y="782.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.91%)</title><rect x="1082.4" y="755.0" width="10.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1085.4" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.61%)</title><rect x="1082.4" y="739.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.4" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.30%)</title><rect x="1089.6" y="739.0" width="3.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1092.6" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.91%)</title><rect x="1093.2" y="755.0" width="10.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1096.2" y="766.0"></text>
</g>
<g>
<title>recv (3 samples, 0.91%)</title><rect x="1103.9" y="755.0" width="10.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1106.9" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (3 samples, 0.91%)</title><rect x="1114.7" y="771.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1117.7" y="782.0"></text>
</g>
<g>
<title>start_thread (18 samples, 5.47%)</title><rect x="1125.4" y="835.0" width="64.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1128.4" y="846.0">start_t..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (18 samples, 5.47%)</title><rect x="1125.4" y="819.0" width="64.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1128.4" y="830.0">thread_..</text>
</g>
<g>
<title>Thread::call_run() (18 samples, 5.47%)</title><rect x="1125.4" y="803.0" width="64.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.4" y="814.0">Thread:..</text>
</g>
<g>
<title>JavaThread::run() (17 samples, 5.17%)</title><rect x="1125.4" y="787.0" width="61.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.4" y="798.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (17 samples, 5.17%)</title><rect x="1125.4" y="771.0" width="61.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.4" y="782.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (17 samples, 5.17%)</title><rect x="1125.4" y="755.0" width="61.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.4" y="766.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (16 samples, 4.86%)</title><rect x="1125.4" y="739.0" width="57.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.4" y="750.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (16 samples, 4.86%)</title><rect x="1125.4" y="723.0" width="57.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.4" y="734.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (9 samples, 2.74%)</title><rect x="1125.4" y="707.0" width="32.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.4" y="718.0">Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.30%)</title><rect x="1125.4" y="691.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.4" y="702.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.30%)</title><rect x="1125.4" y="675.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.4" y="686.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.30%)</title><rect x="1125.4" y="659.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.4" y="670.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.30%)</title><rect x="1125.4" y="643.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.4" y="654.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.30%)</title><rect x="1125.4" y="627.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.4" y="638.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.30%)</title><rect x="1129.0" y="691.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.0" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.30%)</title><rect x="1129.0" y="675.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.0" y="686.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.30%)</title><rect x="1129.0" y="659.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.0" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.30%)</title><rect x="1129.0" y="643.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.0" y="654.0"></text>
</g>
<g>
<title>incI_rRegNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.30%)</title><rect x="1129.0" y="627.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (7 samples, 2.13%)</title><rect x="1132.6" y="691.0" width="25.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.6" y="702.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.30%)</title><rect x="1132.6" y="675.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.6" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.30%)</title><rect x="1132.6" y="659.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.6" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.30%)</title><rect x="1136.2" y="675.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.2" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="1136.2" y="659.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.2" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.61%)</title><rect x="1139.8" y="675.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.8" y="686.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.61%)</title><rect x="1139.8" y="659.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.30%)</title><rect x="1147.0" y="675.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.0" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.30%)</title><rect x="1150.5" y="675.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.5" y="686.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.30%)</title><rect x="1150.5" y="659.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.5" y="670.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.30%)</title><rect x="1150.5" y="643.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.5" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.30%)</title><rect x="1150.5" y="627.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.5" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.30%)</title><rect x="1154.1" y="675.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.1" y="686.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.30%)</title><rect x="1154.1" y="659.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.1" y="670.0"></text>
</g>
<g>
<title>Compile::Optimize() (4 samples, 1.22%)</title><rect x="1157.7" y="707.0" width="14.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.7" y="718.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (2 samples, 0.61%)</title><rect x="1157.7" y="691.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (2 samples, 0.61%)</title><rect x="1157.7" y="675.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.7" y="686.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.30%)</title><rect x="1157.7" y="659.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.7" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.30%)</title><rect x="1161.3" y="659.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.30%)</title><rect x="1164.9" y="691.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.30%)</title><rect x="1164.9" y="675.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.9" y="686.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.30%)</title><rect x="1164.9" y="659.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.30%)</title><rect x="1168.5" y="691.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.30%)</title><rect x="1168.5" y="675.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.30%)</title><rect x="1168.5" y="659.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.5" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.30%)</title><rect x="1168.5" y="643.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.5" y="654.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.30%)</title><rect x="1168.5" y="627.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.91%)</title><rect x="1172.1" y="707.0" width="10.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.91%)</title><rect x="1172.1" y="691.0" width="10.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.91%)</title><rect x="1172.1" y="675.0" width="10.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.91%)</title><rect x="1172.1" y="659.0" width="10.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.91%)</title><rect x="1172.1" y="643.0" width="10.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.91%)</title><rect x="1172.1" y="627.0" width="10.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.1" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.30%)</title><rect x="1172.1" y="611.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.1" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.30%)</title><rect x="1172.1" y="595.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.1" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.30%)</title><rect x="1172.1" y="579.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.1" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.30%)</title><rect x="1172.1" y="563.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.1" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.30%)</title><rect x="1172.1" y="547.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.1" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="1172.1" y="531.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.1" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.30%)</title><rect x="1172.1" y="515.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.1" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="1172.1" y="499.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.1" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.30%)</title><rect x="1172.1" y="483.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.1" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.30%)</title><rect x="1172.1" y="467.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.1" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.30%)</title><rect x="1172.1" y="451.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.1" y="462.0"></text>
</g>
<g>
<title>ciInstanceKlass::field_cache() (1 samples, 0.30%)</title><rect x="1172.1" y="435.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.1" y="446.0"></text>
</g>
<g>
<title>ciConstantPoolCache::ciConstantPoolCache(Arena*, int) (1 samples, 0.30%)</title><rect x="1172.1" y="419.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.61%)</title><rect x="1175.7" y="611.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.61%)</title><rect x="1175.7" y="595.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.61%)</title><rect x="1175.7" y="579.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.61%)</title><rect x="1175.7" y="563.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.61%)</title><rect x="1175.7" y="547.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1175.7" y="531.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1175.7" y="515.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1175.7" y="499.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1175.7" y="483.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1175.7" y="467.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1175.7" y="451.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1175.7" y="435.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1175.7" y="419.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1175.7" y="403.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1175.7" y="387.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1175.7" y="371.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1175.7" y="355.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1175.7" y="339.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1175.7" y="323.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1175.7" y="307.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1175.7" y="291.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1175.7" y="275.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1175.7" y="259.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_instanceof() (1 samples, 0.30%)</title><rect x="1175.7" y="243.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.7" y="254.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.30%)</title><rect x="1175.7" y="227.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="238.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.30%)</title><rect x="1175.7" y="211.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.7" y="222.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.30%)</title><rect x="1175.7" y="195.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="206.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.30%)</title><rect x="1175.7" y="179.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="190.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.30%)</title><rect x="1175.7" y="163.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.30%)</title><rect x="1179.2" y="531.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.30%)</title><rect x="1179.2" y="515.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.2" y="526.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.30%)</title><rect x="1179.2" y="499.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.2" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.30%)</title><rect x="1179.2" y="483.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.30%)</title><rect x="1179.2" y="467.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="478.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.30%)</title><rect x="1179.2" y="451.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="462.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.30%)</title><rect x="1179.2" y="435.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.2" y="446.0"></text>
</g>
<g>
<title>SystemDictionary::box_klass_type(Klass*) (1 samples, 0.30%)</title><rect x="1179.2" y="419.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="430.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.30%)</title><rect x="1182.8" y="739.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.30%)</title><rect x="1182.8" y="723.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.30%)</title><rect x="1182.8" y="707.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.30%)</title><rect x="1182.8" y="691.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.30%)</title><rect x="1182.8" y="675.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.30%)</title><rect x="1182.8" y="659.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.30%)</title><rect x="1182.8" y="643.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>LIRGenerator::do_Invoke(Invoke*) (1 samples, 0.30%)</title><rect x="1182.8" y="627.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.30%)</title><rect x="1182.8" y="611.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.30%)</title><rect x="1182.8" y="595.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.30%)</title><rect x="1182.8" y="579.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>BitMap::set_union(BitMap const&amp;) (1 samples, 0.30%)</title><rect x="1182.8" y="563.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.30%)</title><rect x="1186.4" y="787.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.4" y="798.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.30%)</title><rect x="1186.4" y="771.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.4" y="782.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.30%)</title><rect x="1186.4" y="755.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.4" y="766.0"></text>
</g>
</g>
</svg>
