<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="437"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="437"> </text>
<g id="frames">
<g>
<title>all (173 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.0" y="414.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (97 samples, 56.07%)</title><rect x="10.0" y="387.0" width="661.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (97 samples, 56.07%)</title><rect x="10.0" y="371.0" width="661.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="382.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (97 samples, 56.07%)</title><rect x="10.0" y="355.0" width="661.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="366.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 1.16%)</title><rect x="10.0" y="339.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.58%)</title><rect x="16.8" y="323.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.8" y="334.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.58%)</title><rect x="16.8" y="307.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="19.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.58%)</title><rect x="23.6" y="339.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (47 samples, 27.17%)</title><rect x="30.5" y="339.0" width="320.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.5" y="350.0">java/util/concurrent/ThreadPoolExecutor.get..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (46 samples, 26.59%)</title><rect x="37.3" y="323.0" width="313.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.3" y="334.0">java/util/concurrent/ArrayBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (41 samples, 23.70%)</title><rect x="37.3" y="307.0" width="279.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.3" y="318.0">java/util/concurrent/locks/AbstractQu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 3.47%)</title><rect x="37.3" y="291.0" width="40.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.3" y="302.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 3.47%)</title><rect x="37.3" y="275.0" width="40.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.3" y="286.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 3.47%)</title><rect x="37.3" y="259.0" width="40.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.3" y="270.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 3.47%)</title><rect x="37.3" y="243.0" width="40.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.3" y="254.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 3.47%)</title><rect x="37.3" y="227.0" width="40.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.3" y="238.0">jdk..</text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.58%)</title><rect x="37.3" y="211.0" width="6.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="40.3" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.58%)</title><rect x="37.3" y="195.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="40.3" y="206.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 2.89%)</title><rect x="44.1" y="211.0" width="34.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="47.1" y="222.0">__..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (35 samples, 20.23%)</title><rect x="78.2" y="291.0" width="238.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="81.2" y="302.0">java/util/concurrent/locks/LockS..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (35 samples, 20.23%)</title><rect x="78.2" y="275.0" width="238.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.2" y="286.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 1.16%)</title><rect x="78.2" y="259.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="81.2" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park (25 samples, 14.45%)</title><rect x="91.8" y="259.0" width="170.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="94.8" y="270.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.58%)</title><rect x="91.8" y="243.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="94.8" y="254.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.58%)</title><rect x="98.7" y="243.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="101.7" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 3.47%)</title><rect x="105.5" y="243.0" width="40.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="108.5" y="254.0">Par..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 1.16%)</title><rect x="119.1" y="227.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="122.1" y="238.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 1.16%)</title><rect x="119.1" y="211.0" width="13.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="122.1" y="222.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.58%)</title><rect x="132.8" y="227.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="135.8" y="238.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.58%)</title><rect x="139.6" y="227.0" width="6.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="142.6" y="238.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (16 samples, 9.25%)</title><rect x="146.4" y="243.0" width="109.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="149.4" y="254.0">__pthread_mut..</text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.58%)</title><rect x="255.5" y="243.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="258.5" y="254.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 4.05%)</title><rect x="262.4" y="259.0" width="47.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="265.4" y="270.0">[unk..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.58%)</title><rect x="262.4" y="243.0" width="6.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="265.4" y="254.0"></text>
</g>
<g>
<title>__pthread_cond_wait (6 samples, 3.47%)</title><rect x="269.2" y="243.0" width="40.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="272.2" y="254.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.58%)</title><rect x="310.1" y="259.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="313.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 1.16%)</title><rect x="316.9" y="307.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 1.16%)</title><rect x="316.9" y="291.0" width="13.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.58%)</title><rect x="316.9" y="275.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.58%)</title><rect x="316.9" y="259.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.58%)</title><rect x="316.9" y="243.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="319.9" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.58%)</title><rect x="316.9" y="227.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="319.9" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.58%)</title><rect x="316.9" y="211.0" width="6.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="319.9" y="222.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.58%)</title><rect x="316.9" y="195.0" width="6.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="319.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.58%)</title><rect x="323.8" y="275.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.58%)</title><rect x="323.8" y="259.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="326.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.58%)</title><rect x="323.8" y="243.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="326.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.73%)</title><rect x="330.6" y="307.0" width="20.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="333.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.73%)</title><rect x="330.6" y="291.0" width="20.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.73%)</title><rect x="330.6" y="275.0" width="20.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.73%)</title><rect x="330.6" y="259.0" width="20.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 1.73%)</title><rect x="330.6" y="243.0" width="20.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="333.6" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.58%)</title><rect x="330.6" y="227.0" width="6.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="333.6" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.58%)</title><rect x="330.6" y="211.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="333.6" y="222.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.58%)</title><rect x="337.4" y="227.0" width="6.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="340.4" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.58%)</title><rect x="344.2" y="227.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="347.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService$$Lambda$65/1715664392.run (2 samples, 1.16%)</title><rect x="351.0" y="339.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService.lambda$put$2 (2 samples, 1.16%)</title><rect x="351.0" y="323.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (2 samples, 1.16%)</title><rect x="351.0" y="307.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.58%)</title><rect x="351.0" y="291.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.58%)</title><rect x="351.0" y="275.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.58%)</title><rect x="351.0" y="259.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.58%)</title><rect x="351.0" y="243.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="354.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService.lambda$get$1 (1 samples, 0.58%)</title><rect x="351.0" y="227.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (1 samples, 0.58%)</title><rect x="357.9" y="291.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="360.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (1 samples, 0.58%)</title><rect x="357.9" y="275.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="360.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService$$Lambda$70/1434076159.run (45 samples, 26.01%)</title><rect x="364.7" y="339.0" width="306.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="367.7" y="350.0">ru/mail/polis/service/re1nex/AsyncService..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService.lambda$get$1 (45 samples, 26.01%)</title><rect x="364.7" y="323.0" width="306.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.7" y="334.0">ru/mail/polis/service/re1nex/AsyncService..</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.58%)</title><rect x="364.7" y="307.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.7" y="318.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.58%)</title><rect x="364.7" y="291.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (23 samples, 13.29%)</title><rect x="371.5" y="307.0" width="156.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.5" y="318.0">ru/mail/polis/dao/DA..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3 samples, 1.73%)</title><rect x="371.5" y="291.0" width="20.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="374.5" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 1.73%)</title><rect x="371.5" y="275.0" width="20.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="374.5" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 1.73%)</title><rect x="371.5" y="259.0" width="20.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.5" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 1.73%)</title><rect x="371.5" y="243.0" width="20.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="374.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 1.73%)</title><rect x="371.5" y="227.0" width="20.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="374.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (1 samples, 0.58%)</title><rect x="371.5" y="211.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.5" y="222.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (1 samples, 0.58%)</title><rect x="371.5" y="195.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="374.5" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.58%)</title><rect x="378.3" y="211.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.3" y="222.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.58%)</title><rect x="378.3" y="195.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.3" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.58%)</title><rect x="378.3" y="179.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.58%)</title><rect x="385.1" y="211.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="388.1" y="222.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.58%)</title><rect x="385.1" y="195.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="388.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (2 samples, 1.16%)</title><rect x="392.0" y="291.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.0" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (2 samples, 1.16%)</title><rect x="392.0" y="275.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="395.0" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 1.16%)</title><rect x="392.0" y="259.0" width="13.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="395.0" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 1.16%)</title><rect x="392.0" y="243.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="395.0" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 1.16%)</title><rect x="392.0" y="227.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="395.0" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 1.16%)</title><rect x="392.0" y="211.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="395.0" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 1.16%)</title><rect x="392.0" y="195.0" width="13.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.58%)</title><rect x="392.0" y="179.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.0" y="190.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.58%)</title><rect x="392.0" y="163.0" width="6.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="395.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.58%)</title><rect x="398.8" y="179.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="401.8" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.58%)</title><rect x="398.8" y="163.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="401.8" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.58%)</title><rect x="398.8" y="147.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="401.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.iterator (18 samples, 10.40%)</title><rect x="405.6" y="291.0" width="122.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.6" y="302.0">ru/mail/polis/d..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (18 samples, 10.40%)</title><rect x="405.6" y="275.0" width="122.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.6" y="286.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.58%)</title><rect x="405.6" y="259.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="408.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.58%)</title><rect x="412.4" y="259.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="415.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.58%)</title><rect x="412.4" y="243.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="415.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.58%)</title><rect x="412.4" y="227.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.58%)</title><rect x="412.4" y="211.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.4" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.58%)</title><rect x="412.4" y="195.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="415.4" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.58%)</title><rect x="412.4" y="179.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (2 samples, 1.16%)</title><rect x="419.2" y="259.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (2 samples, 1.16%)</title><rect x="419.2" y="243.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.2" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 1.16%)</title><rect x="419.2" y="227.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.2" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 1.16%)</title><rect x="419.2" y="211.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="422.2" y="222.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (2 samples, 1.16%)</title><rect x="419.2" y="195.0" width="13.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="422.2" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (2 samples, 1.16%)</title><rect x="419.2" y="179.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.2" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (2 samples, 1.16%)</title><rect x="419.2" y="163.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.2" y="174.0"></text>
</g>
<g>
<title>java/util/stream/AbstractSpinedBuffer.count (1 samples, 0.58%)</title><rect x="419.2" y="147.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.2" y="158.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.58%)</title><rect x="426.1" y="147.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.1" y="158.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$100/1606112077.getAsBoolean (1 samples, 0.58%)</title><rect x="426.1" y="131.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="429.1" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (1 samples, 0.58%)</title><rect x="426.1" y="115.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="429.1" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (1 samples, 0.58%)</title><rect x="426.1" y="99.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="429.1" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.58%)</title><rect x="426.1" y="83.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="429.1" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.58%)</title><rect x="426.1" y="67.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.1" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.58%)</title><rect x="426.1" y="51.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="429.1" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.58%)</title><rect x="426.1" y="35.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.1" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (14 samples, 8.09%)</title><rect x="432.9" y="259.0" width="95.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="435.9" y="270.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/Collection.stream (14 samples, 8.09%)</title><rect x="432.9" y="243.0" width="95.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.9" y="254.0">java/util/C..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (14 samples, 8.09%)</title><rect x="432.9" y="227.0" width="95.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="435.9" y="238.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (14 samples, 8.09%)</title><rect x="432.9" y="211.0" width="95.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.9" y="222.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (14 samples, 8.09%)</title><rect x="432.9" y="195.0" width="95.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.9" y="206.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (13 samples, 7.51%)</title><rect x="439.7" y="179.0" width="88.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="442.7" y="190.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (13 samples, 7.51%)</title><rect x="439.7" y="163.0" width="88.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="442.7" y="174.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.58%)</title><rect x="446.5" y="147.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.58%)</title><rect x="446.5" y="131.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.5" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.58%)</title><rect x="446.5" y="115.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.5" y="126.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.58%)</title><rect x="446.5" y="99.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="449.5" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (11 samples, 6.36%)</title><rect x="453.4" y="147.0" width="75.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.4" y="158.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 2.31%)</title><rect x="501.1" y="131.0" width="27.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.1" y="142.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 1.73%)</title><rect x="507.9" y="115.0" width="20.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="510.9" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 1.73%)</title><rect x="507.9" y="99.0" width="20.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.9" y="110.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 1.73%)</title><rect x="507.9" y="83.0" width="20.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="510.9" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 1.73%)</title><rect x="507.9" y="67.0" width="20.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.9" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 1.73%)</title><rect x="507.9" y="51.0" width="20.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="510.9" y="62.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 1.16%)</title><rect x="514.7" y="35.0" width="13.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="517.7" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService.sendResponse (21 samples, 12.14%)</title><rect x="528.4" y="307.0" width="143.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="531.4" y="318.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (21 samples, 12.14%)</title><rect x="528.4" y="291.0" width="143.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="531.4" y="302.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.58%)</title><rect x="535.2" y="275.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="538.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.58%)</title><rect x="535.2" y="259.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="538.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.58%)</title><rect x="535.2" y="243.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="538.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.58%)</title><rect x="535.2" y="227.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="538.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (19 samples, 10.98%)</title><rect x="542.0" y="275.0" width="129.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="545.0" y="286.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 2.31%)</title><rect x="542.0" y="259.0" width="27.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="545.0" y="270.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 1.16%)</title><rect x="555.7" y="243.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="558.7" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 1.16%)</title><rect x="555.7" y="227.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="558.7" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 1.16%)</title><rect x="555.7" y="211.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.7" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.58%)</title><rect x="562.5" y="195.0" width="6.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="565.5" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 8.67%)</title><rect x="569.3" y="259.0" width="102.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="572.3" y="270.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 8.67%)</title><rect x="569.3" y="243.0" width="102.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="572.3" y="254.0">one/nio/net/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.58%)</title><rect x="569.3" y="227.0" width="6.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="572.3" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.58%)</title><rect x="569.3" y="211.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="572.3" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14 samples, 8.09%)</title><rect x="576.1" y="227.0" width="95.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="579.1" y="238.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (14 samples, 8.09%)</title><rect x="576.1" y="211.0" width="95.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="579.1" y="222.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 3.47%)</title><rect x="596.6" y="195.0" width="40.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="599.6" y="206.0">Jav..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.58%)</title><rect x="617.1" y="179.0" width="6.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="620.1" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.58%)</title><rect x="623.9" y="179.0" width="6.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="626.9" y="190.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.58%)</title><rect x="623.9" y="163.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="626.9" y="174.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.58%)</title><rect x="630.7" y="179.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="633.7" y="190.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.58%)</title><rect x="637.5" y="195.0" width="6.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="640.5" y="206.0"></text>
</g>
<g>
<title>__send (3 samples, 1.73%)</title><rect x="644.3" y="195.0" width="20.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="647.3" y="206.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.58%)</title><rect x="664.8" y="195.0" width="6.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="667.8" y="206.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (72 samples, 41.62%)</title><rect x="671.6" y="387.0" width="491.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="674.6" y="398.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.58%)</title><rect x="671.6" y="371.0" width="6.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="674.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.58%)</title><rect x="678.4" y="371.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="681.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (23 samples, 13.29%)</title><rect x="685.3" y="371.0" width="156.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="688.3" y="382.0">one/nio/net/NativeSe..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (23 samples, 13.29%)</title><rect x="685.3" y="355.0" width="156.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.3" y="366.0">one/nio/net/NativeSe..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.58%)</title><rect x="705.7" y="339.0" width="6.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="708.7" y="350.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 1.16%)</title><rect x="712.5" y="339.0" width="13.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="715.5" y="350.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 4.05%)</title><rect x="726.2" y="339.0" width="47.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="729.2" y="350.0">cloc..</text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.58%)</title><rect x="773.9" y="339.0" width="6.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="776.9" y="350.0"></text>
</g>
<g>
<title>epoll_wait (9 samples, 5.20%)</title><rect x="780.8" y="339.0" width="61.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="783.8" y="350.0">epoll_..</text>
</g>
<g>
<title>one/nio/net/Session.process (47 samples, 27.17%)</title><rect x="842.1" y="371.0" width="320.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="845.1" y="382.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (46 samples, 26.59%)</title><rect x="849.0" y="355.0" width="313.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.0" y="366.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (34 samples, 19.65%)</title><rect x="849.0" y="339.0" width="231.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="852.0" y="350.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.58%)</title><rect x="896.7" y="323.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="899.7" y="334.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.58%)</title><rect x="896.7" y="307.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="899.7" y="318.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.58%)</title><rect x="896.7" y="291.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="899.7" y="302.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.58%)</title><rect x="896.7" y="275.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="899.7" y="286.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.58%)</title><rect x="896.7" y="259.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="899.7" y="270.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.58%)</title><rect x="896.7" y="243.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="899.7" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::lookup_osr_nmethod(Method const*, int, int, bool) const (1 samples, 0.58%)</title><rect x="896.7" y="227.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="899.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (23 samples, 13.29%)</title><rect x="903.5" y="323.0" width="156.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="906.5" y="334.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (23 samples, 13.29%)</title><rect x="903.5" y="307.0" width="156.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="906.5" y="318.0">one/nio/http/HttpSer..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (21 samples, 12.14%)</title><rect x="903.5" y="291.0" width="143.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="906.5" y="302.0">RequestHandler0_ge..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (4 samples, 2.31%)</title><rect x="903.5" y="275.0" width="27.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="906.5" y="286.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 2.31%)</title><rect x="903.5" y="259.0" width="27.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="906.5" y="270.0">o..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService.get (17 samples, 9.83%)</title><rect x="930.8" y="275.0" width="116.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="933.8" y="286.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncService.executeTask (17 samples, 9.83%)</title><rect x="930.8" y="259.0" width="116.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="933.8" y="270.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 9.25%)</title><rect x="937.6" y="243.0" width="109.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="940.6" y="254.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (14 samples, 8.09%)</title><rect x="944.5" y="227.0" width="95.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="947.5" y="238.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (3 samples, 1.73%)</title><rect x="958.1" y="211.0" width="20.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="961.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.73%)</title><rect x="958.1" y="195.0" width="20.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="961.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.73%)</title><rect x="958.1" y="179.0" width="20.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="961.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.73%)</title><rect x="958.1" y="163.0" width="20.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="961.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (3 samples, 1.73%)</title><rect x="958.1" y="147.0" width="20.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="961.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 1.73%)</title><rect x="978.6" y="211.0" width="20.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="981.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 1.73%)</title><rect x="978.6" y="195.0" width="20.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="981.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 1.16%)</title><rect x="978.6" y="179.0" width="13.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="981.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.58%)</title><rect x="978.6" y="163.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="981.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.58%)</title><rect x="978.6" y="147.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="981.6" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.58%)</title><rect x="978.6" y="131.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="981.6" y="142.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.58%)</title><rect x="978.6" y="115.0" width="6.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="981.6" y="126.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.58%)</title><rect x="978.6" y="99.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.6" y="110.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.58%)</title><rect x="978.6" y="83.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.6" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.58%)</title><rect x="985.4" y="163.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="988.4" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.58%)</title><rect x="992.2" y="179.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="995.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 3.47%)</title><rect x="999.0" y="211.0" width="40.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1002.0" y="222.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 3.47%)</title><rect x="999.0" y="195.0" width="40.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1002.0" y="206.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 3.47%)</title><rect x="999.0" y="179.0" width="40.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1002.0" y="190.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 3.47%)</title><rect x="999.0" y="163.0" width="40.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1002.0" y="174.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 3.47%)</title><rect x="999.0" y="147.0" width="40.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1002.0" y="158.0">jdk..</text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 1.16%)</title><rect x="1012.7" y="131.0" width="13.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1015.7" y="142.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.58%)</title><rect x="1012.7" y="115.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1015.7" y="126.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.58%)</title><rect x="1019.5" y="115.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.5" y="126.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.58%)</title><rect x="1026.3" y="131.0" width="6.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1029.3" y="142.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.58%)</title><rect x="1026.3" y="115.0" width="6.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1029.3" y="126.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.58%)</title><rect x="1033.1" y="131.0" width="6.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1036.1" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.isRunning (1 samples, 0.58%)</title><rect x="1039.9" y="227.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1042.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.58%)</title><rect x="1046.8" y="291.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1049.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.58%)</title><rect x="1046.8" y="275.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1049.8" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.58%)</title><rect x="1046.8" y="259.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1049.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.58%)</title><rect x="1046.8" y="243.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1049.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.58%)</title><rect x="1053.6" y="291.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1056.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.58%)</title><rect x="1053.6" y="275.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1056.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.58%)</title><rect x="1053.6" y="259.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1056.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.58%)</title><rect x="1053.6" y="243.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1056.6" y="254.0"></text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (1 samples, 0.58%)</title><rect x="1053.6" y="227.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1056.6" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 1.16%)</title><rect x="1060.4" y="323.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1063.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.58%)</title><rect x="1060.4" y="307.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1063.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.58%)</title><rect x="1060.4" y="291.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1063.4" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.58%)</title><rect x="1060.4" y="275.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1063.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.58%)</title><rect x="1060.4" y="259.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1063.4" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.58%)</title><rect x="1067.2" y="307.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1070.2" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.58%)</title><rect x="1067.2" y="291.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1070.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.58%)</title><rect x="1067.2" y="275.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1070.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.58%)</title><rect x="1067.2" y="259.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1070.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.58%)</title><rect x="1067.2" y="243.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1070.2" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.58%)</title><rect x="1074.0" y="323.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1077.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.58%)</title><rect x="1074.0" y="307.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1077.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.58%)</title><rect x="1080.9" y="339.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1083.9" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (11 samples, 6.36%)</title><rect x="1087.7" y="339.0" width="75.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1090.7" y="350.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (11 samples, 6.36%)</title><rect x="1087.7" y="323.0" width="75.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1090.7" y="334.0">one/nio/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (4 samples, 2.31%)</title><rect x="1115.0" y="307.0" width="27.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1118.0" y="318.0">J..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.58%)</title><rect x="1115.0" y="291.0" width="6.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1118.0" y="302.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 1.73%)</title><rect x="1121.8" y="291.0" width="20.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1124.8" y="302.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.58%)</title><rect x="1128.6" y="275.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.6" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.58%)</title><rect x="1135.4" y="275.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.4" y="286.0"></text>
</g>
<g>
<title>recv (3 samples, 1.73%)</title><rect x="1142.3" y="307.0" width="20.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1145.3" y="318.0"></text>
</g>
<g>
<title>start_thread (4 samples, 2.31%)</title><rect x="1162.7" y="387.0" width="27.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1165.7" y="398.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 2.31%)</title><rect x="1162.7" y="371.0" width="27.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1165.7" y="382.0">t..</text>
</g>
<g>
<title>Thread::call_run() (4 samples, 2.31%)</title><rect x="1162.7" y="355.0" width="27.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.7" y="366.0">T..</text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 1.73%)</title><rect x="1162.7" y="339.0" width="20.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.7" y="350.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (3 samples, 1.73%)</title><rect x="1162.7" y="323.0" width="20.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.7" y="334.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 1.73%)</title><rect x="1162.7" y="307.0" width="20.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.7" y="318.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.66] (1 samples, 0.58%)</title><rect x="1169.5" y="291.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="302.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.58%)</title><rect x="1169.5" y="275.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.5" y="286.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.58%)</title><rect x="1169.5" y="259.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.5" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.58%)</title><rect x="1169.5" y="243.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="254.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.58%)</title><rect x="1176.4" y="291.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.4" y="302.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.58%)</title><rect x="1176.4" y="275.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="286.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.58%)</title><rect x="1183.2" y="339.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="350.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.58%)</title><rect x="1183.2" y="323.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="334.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1 samples, 0.58%)</title><rect x="1183.2" y="307.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="318.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.58%)</title><rect x="1183.2" y="291.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="302.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.58%)</title><rect x="1183.2" y="275.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="286.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.58%)</title><rect x="1183.2" y="259.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="270.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.58%)</title><rect x="1183.2" y="243.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="254.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.58%)</title><rect x="1183.2" y="227.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.2" y="238.0"></text>
</g>
<g>
<title>LIR_Op2::emit_code(LIR_Assembler*) (1 samples, 0.58%)</title><rect x="1183.2" y="211.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="222.0"></text>
</g>
</g>
</svg>
