<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="885"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="885"> </text>
<g id="frames">
<g>
<title>all (2,323 samples, 100.00%)</title><rect x="10.0" y="851.0" width="1180.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.0" y="862.0">all</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="10.0" y="835.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (23 samples, 0.99%)</title><rect x="10.5" y="835.0" width="11.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.5" y="846.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (22 samples, 0.95%)</title><rect x="11.0" y="819.0" width="11.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.0" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (22 samples, 0.95%)</title><rect x="11.0" y="803.0" width="11.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.0" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (21 samples, 0.90%)</title><rect x="11.5" y="787.0" width="10.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.5" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (11 samples, 0.47%)</title><rect x="12.5" y="771.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.5" y="782.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.30%)</title><rect x="18.1" y="771.0" width="3.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="21.1" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="21.7" y="771.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="24.7" y="782.0"></text>
</g>
<g>
<title>[no_Java_frame] (4 samples, 0.17%)</title><rect x="22.2" y="835.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="25.2" y="846.0"></text>
</g>
<g>
<title>[not_walkable_Java] (13 samples, 0.56%)</title><rect x="24.2" y="835.0" width="6.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="27.2" y="846.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.04%)</title><rect x="24.2" y="819.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.2" y="830.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.04%)</title><rect x="24.7" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.7" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.22%)</title><rect x="25.2" y="819.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="28.2" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.22%)</title><rect x="25.2" y="803.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="28.2" y="814.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.09%)</title><rect x="25.2" y="787.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="28.2" y="798.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.04%)</title><rect x="25.2" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="28.2" y="782.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="25.7" y="771.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="28.7" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.13%)</title><rect x="26.3" y="787.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="29.3" y="798.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.04%)</title><rect x="26.3" y="771.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="29.3" y="782.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.09%)</title><rect x="26.8" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="29.8" y="782.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.09%)</title><rect x="26.8" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="29.8" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.26%)</title><rect x="27.8" y="819.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="30.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="30.8" y="835.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="33.8" y="846.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.04%)</title><rect x="30.8" y="819.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="33.8" y="830.0"></text>
</g>
<g>
<title>[unknown_Java] (33 samples, 1.42%)</title><rect x="31.3" y="835.0" width="16.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="34.3" y="846.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.04%)</title><rect x="31.3" y="819.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="34.3" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (26 samples, 1.12%)</title><rect x="31.8" y="819.0" width="13.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="34.8" y="830.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (25 samples, 1.08%)</title><rect x="32.4" y="803.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="35.4" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="45.0" y="819.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="48.0" y="830.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="45.0" y="803.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="48.0" y="814.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="45.0" y="787.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="48.0" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.09%)</title><rect x="45.6" y="819.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="48.6" y="830.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.04%)</title><rect x="46.6" y="819.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="49.6" y="830.0"></text>
</g>
<g>
<title>sha256_implCompress (2 samples, 0.09%)</title><rect x="47.1" y="819.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="50.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.exit (1 samples, 0.04%)</title><rect x="48.1" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,938 samples, 83.43%)</title><rect x="48.6" y="835.0" width="984.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.6" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,938 samples, 83.43%)</title><rect x="48.6" y="819.0" width="984.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.6" y="830.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,938 samples, 83.43%)</title><rect x="48.6" y="803.0" width="984.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.6" y="814.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.34%)</title><rect x="48.6" y="787.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.34%)</title><rect x="48.6" y="771.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.34%)</title><rect x="48.6" y="755.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.34%)</title><rect x="48.6" y="739.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$72/339857875.run (1 samples, 0.04%)</title><rect x="52.2" y="723.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (117 samples, 5.04%)</title><rect x="52.7" y="787.0" width="59.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.7" y="798.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (115 samples, 4.95%)</title><rect x="53.7" y="771.0" width="58.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.7" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (3 samples, 0.13%)</title><rect x="54.7" y="755.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.13%)</title><rect x="54.7" y="739.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="57.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.13%)</title><rect x="54.7" y="723.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.13%)</title><rect x="54.7" y="707.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.04%)</title><rect x="55.2" y="691.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.04%)</title><rect x="55.7" y="691.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.7" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.04%)</title><rect x="55.7" y="675.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (96 samples, 4.13%)</title><rect x="56.2" y="755.0" width="48.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.2" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.04%)</title><rect x="56.7" y="739.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.04%)</title><rect x="56.7" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.22%)</title><rect x="57.2" y="739.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.22%)</title><rect x="57.2" y="723.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.22%)</title><rect x="57.2" y="707.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.39%)</title><rect x="59.8" y="739.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.39%)</title><rect x="59.8" y="723.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="62.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.30%)</title><rect x="60.3" y="707.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="63.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.30%)</title><rect x="60.3" y="691.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="63.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.30%)</title><rect x="60.3" y="675.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.3" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.04%)</title><rect x="60.3" y="659.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="63.3" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="60.8" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="63.8" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.22%)</title><rect x="61.3" y="659.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="64.3" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.09%)</title><rect x="61.3" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="64.3" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.09%)</title><rect x="62.3" y="643.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="65.3" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="63.3" y="643.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="66.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.04%)</title><rect x="63.8" y="707.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (80 samples, 3.44%)</title><rect x="64.4" y="739.0" width="40.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.4" y="750.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (79 samples, 3.40%)</title><rect x="64.9" y="723.0" width="40.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="67.9" y="734.0">jdk..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.04%)</title><rect x="65.9" y="707.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="68.9" y="718.0"></text>
</g>
<g>
<title>Unsafe_Park (55 samples, 2.37%)</title><rect x="66.4" y="707.0" width="27.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="69.4" y="718.0">U..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.09%)</title><rect x="69.4" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="72.4" y="702.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.09%)</title><rect x="70.4" y="691.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="73.4" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.04%)</title><rect x="71.5" y="691.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="74.5" y="702.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 0.69%)</title><rect x="72.0" y="691.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="75.0" y="702.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.22%)</title><rect x="76.5" y="675.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="79.5" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.09%)</title><rect x="79.1" y="675.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="82.1" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (3 samples, 0.13%)</title><rect x="80.1" y="691.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="83.1" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (23 samples, 0.99%)</title><rect x="81.6" y="691.0" width="11.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="84.6" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.09%)</title><rect x="93.3" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="96.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.86%)</title><rect x="94.3" y="707.0" width="10.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="97.3" y="718.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.04%)</title><rect x="94.3" y="691.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="97.3" y="702.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.13%)</title><rect x="94.8" y="691.0" width="1.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="97.8" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_wait (12 samples, 0.52%)</title><rect x="96.4" y="691.0" width="6.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="99.4" y="702.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.09%)</title><rect x="102.4" y="691.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="105.4" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.09%)</title><rect x="103.5" y="691.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="106.5" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.04%)</title><rect x="104.5" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="107.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.17%)</title><rect x="105.0" y="755.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.13%)</title><rect x="105.5" y="739.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.13%)</title><rect x="105.5" y="723.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.09%)</title><rect x="106.0" y="707.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="109.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.09%)</title><rect x="106.0" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.0" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.09%)</title><rect x="106.0" y="675.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="109.0" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.04%)</title><rect x="106.0" y="659.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="109.0" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.04%)</title><rect x="106.0" y="643.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="109.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="106.5" y="659.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="109.5" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.04%)</title><rect x="106.5" y="643.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="109.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.43%)</title><rect x="107.0" y="755.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.43%)</title><rect x="107.0" y="739.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.43%)</title><rect x="107.0" y="723.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.43%)</title><rect x="107.0" y="707.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="110.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.39%)</title><rect x="107.5" y="691.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.5" y="702.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="107.5" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="110.5" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.22%)</title><rect x="108.0" y="675.0" width="2.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="111.0" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="108.5" y="659.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="111.5" y="670.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.04%)</title><rect x="109.1" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="112.1" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.09%)</title><rect x="109.6" y="659.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="112.6" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.13%)</title><rect x="110.6" y="675.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="113.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$72/339857875.run (1,806 samples, 77.74%)</title><rect x="112.1" y="787.0" width="917.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.1" y="798.0">ru/mail/polis/service/re1nex/BaseService$$Lambda$72/339857875.run</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1 (1,806 samples, 77.74%)</title><rect x="112.1" y="771.0" width="917.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="115.1" y="782.0">ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.22%)</title><rect x="112.1" y="755.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.13%)</title><rect x="113.1" y="739.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.1" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.13%)</title><rect x="113.1" y="723.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponseLocal (1,203 samples, 51.79%)</title><rect x="114.6" y="755.0" width="611.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.6" y="766.0">ru/mail/polis/service/re1nex/ApiController.handleResponseLocal</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (1,203 samples, 51.79%)</title><rect x="114.6" y="739.0" width="611.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.6" y="750.0">ru/mail/polis/service/re1nex/ApiControllerImpl.get</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (1,156 samples, 49.76%)</title><rect x="114.6" y="723.0" width="587.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.6" y="734.0">ru/mail/polis/service/re1nex/ApiControllerImpl.get</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1113249484.linkToTargetMethod (6 samples, 0.26%)</title><rect x="115.1" y="707.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.1" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1754634617.invoke (6 samples, 0.26%)</title><rect x="115.1" y="691.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="118.1" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1621472867.invokeStatic (6 samples, 0.26%)</title><rect x="115.1" y="675.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="118.1" y="686.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (6 samples, 0.26%)</title><rect x="115.1" y="659.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="118.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.26%)</title><rect x="115.1" y="643.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="118.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (2 samples, 0.09%)</title><rect x="117.2" y="627.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (1,147 samples, 49.38%)</title><rect x="118.2" y="707.0" width="582.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.2" y="718.0">ru/mail/polis/dao/DAO.getValue</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.09%)</title><rect x="118.2" y="691.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="121.2" y="702.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.09%)</title><rect x="118.2" y="675.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="121.2" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.04%)</title><rect x="118.7" y="659.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="121.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (139 samples, 5.98%)</title><rect x="119.2" y="691.0" width="70.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="122.2" y="702.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (135 samples, 5.81%)</title><rect x="119.7" y="675.0" width="68.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.7" y="686.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.04%)</title><rect x="119.7" y="659.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="122.7" y="670.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (134 samples, 5.77%)</title><rect x="120.2" y="659.0" width="68.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="123.2" y="670.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (134 samples, 5.77%)</title><rect x="120.2" y="643.0" width="68.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.2" y="654.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (134 samples, 5.77%)</title><rect x="120.2" y="627.0" width="68.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.2" y="638.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (134 samples, 5.77%)</title><rect x="120.2" y="611.0" width="68.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.2" y="622.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (134 samples, 5.77%)</title><rect x="120.2" y="595.0" width="68.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.2" y="606.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (134 samples, 5.77%)</title><rect x="120.2" y="579.0" width="68.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.2" y="590.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (132 samples, 5.68%)</title><rect x="120.2" y="563.0" width="67.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="123.2" y="574.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (132 samples, 5.68%)</title><rect x="120.2" y="547.0" width="67.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.2" y="558.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (132 samples, 5.68%)</title><rect x="120.2" y="531.0" width="67.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.2" y="542.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (132 samples, 5.68%)</title><rect x="120.2" y="515.0" width="67.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.2" y="526.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.04%)</title><rect x="120.7" y="499.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="123.7" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="120.7" y="483.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="123.7" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="120.7" y="467.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="123.7" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="120.7" y="451.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="123.7" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="120.7" y="435.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="123.7" y="446.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="120.7" y="419.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="123.7" y="430.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.04%)</title><rect x="120.7" y="403.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="123.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (16 samples, 0.69%)</title><rect x="121.2" y="499.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (16 samples, 0.69%)</title><rect x="121.2" y="483.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="124.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (16 samples, 0.69%)</title><rect x="121.2" y="467.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.13%)</title><rect x="121.8" y="451.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="124.8" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.13%)</title><rect x="121.8" y="435.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="124.8" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.13%)</title><rect x="121.8" y="419.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="124.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.04%)</title><rect x="122.8" y="403.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="125.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 0.39%)</title><rect x="123.3" y="451.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.26%)</title><rect x="124.3" y="435.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (6 samples, 0.26%)</title><rect x="124.3" y="419.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (6 samples, 0.26%)</title><rect x="124.3" y="403.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="127.3" y="414.0"></text>
</g>
<g>
<title>__libc_pread64 (6 samples, 0.26%)</title><rect x="124.3" y="387.0" width="3.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="127.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="127.3" y="435.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="130.3" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="127.3" y="419.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="130.3" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="127.3" y="403.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="130.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="127.3" y="387.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="130.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.13%)</title><rect x="127.8" y="451.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="128.9" y="435.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (59 samples, 2.54%)</title><rect x="129.4" y="499.0" width="29.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.4" y="510.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.04%)</title><rect x="129.4" y="483.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="132.4" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="129.4" y="467.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="132.4" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="129.4" y="451.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="132.4" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="129.4" y="435.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="132.4" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="129.4" y="419.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="132.4" y="430.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="129.4" y="403.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="132.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (10 samples, 0.43%)</title><rect x="129.9" y="483.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (10 samples, 0.43%)</title><rect x="129.9" y="467.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (10 samples, 0.43%)</title><rect x="129.9" y="451.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (3 samples, 0.13%)</title><rect x="129.9" y="435.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.9" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.13%)</title><rect x="129.9" y="419.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.9" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.13%)</title><rect x="129.9" y="403.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.9" y="414.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.09%)</title><rect x="130.4" y="387.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="133.4" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.09%)</title><rect x="130.4" y="371.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="133.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.13%)</title><rect x="131.4" y="435.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="134.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.13%)</title><rect x="131.4" y="419.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (3 samples, 0.13%)</title><rect x="131.4" y="403.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="134.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (3 samples, 0.13%)</title><rect x="131.4" y="387.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.4" y="398.0"></text>
</g>
<g>
<title>__libc_pread64 (3 samples, 0.13%)</title><rect x="131.4" y="371.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="134.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (4 samples, 0.17%)</title><rect x="132.9" y="435.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="135.9" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.09%)</title><rect x="133.9" y="419.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="136.9" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.09%)</title><rect x="133.9" y="403.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="136.9" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.09%)</title><rect x="133.9" y="387.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="136.9" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (2 samples, 0.09%)</title><rect x="133.9" y="371.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="136.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (48 samples, 2.07%)</title><rect x="135.0" y="483.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.0" y="494.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (48 samples, 2.07%)</title><rect x="135.0" y="467.0" width="24.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="138.0" y="478.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="135.5" y="451.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="138.5" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="135.5" y="435.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="138.5" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="135.5" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="138.5" y="430.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="135.5" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="138.5" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="135.5" y="387.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="138.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.04%)</title><rect x="136.0" y="451.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.0" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="136.0" y="435.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="139.0" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="136.0" y="419.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="139.0" y="430.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="136.0" y="403.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="136.0" y="387.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 1.33%)</title><rect x="136.5" y="451.0" width="15.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.5" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.04%)</title><rect x="137.0" y="435.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.0" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.04%)</title><rect x="137.0" y="419.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="140.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.04%)</title><rect x="137.0" y="403.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (25 samples, 1.08%)</title><rect x="137.5" y="435.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="140.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (25 samples, 1.08%)</title><rect x="137.5" y="419.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (24 samples, 1.03%)</title><rect x="137.5" y="403.0" width="12.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="140.5" y="414.0"></text>
</g>
<g>
<title>__libc_pread64 (22 samples, 0.95%)</title><rect x="138.0" y="387.0" width="11.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="141.0" y="398.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="149.2" y="387.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="152.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="149.7" y="403.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="150.2" y="435.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.2" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="150.2" y="419.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="150.2" y="403.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="151.2" y="435.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="154.2" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="151.2" y="419.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="151.2" y="403.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (2 samples, 0.09%)</title><rect x="151.2" y="387.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="154.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (7 samples, 0.30%)</title><rect x="152.2" y="451.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="155.2" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.09%)</title><rect x="154.8" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="157.8" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.09%)</title><rect x="154.8" y="419.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="157.8" y="430.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="154.8" y="403.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="157.8" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="155.3" y="403.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="158.3" y="414.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="155.3" y="387.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="158.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (7 samples, 0.30%)</title><rect x="155.8" y="451.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="158.8" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.13%)</title><rect x="157.3" y="435.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="160.3" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (3 samples, 0.13%)</title><rect x="157.3" y="419.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="160.3" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.13%)</title><rect x="157.3" y="403.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="160.3" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (2 samples, 0.09%)</title><rect x="157.3" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="160.3" y="398.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="158.3" y="387.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="161.3" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="158.8" y="435.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="161.8" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.04%)</title><rect x="158.8" y="419.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="161.8" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.80] (1 samples, 0.04%)</title><rect x="158.8" y="403.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="161.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (55 samples, 2.37%)</title><rect x="159.3" y="499.0" width="28.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="162.3" y="510.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (55 samples, 2.37%)</title><rect x="159.3" y="483.0" width="28.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="162.3" y="494.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (4 samples, 0.17%)</title><rect x="159.3" y="467.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="162.3" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (4 samples, 0.17%)</title><rect x="159.3" y="451.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="162.3" y="462.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="160.9" y="435.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.09%)</title><rect x="161.4" y="467.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.4" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.09%)</title><rect x="161.4" y="451.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="164.4" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.09%)</title><rect x="161.4" y="435.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.4" y="446.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.09%)</title><rect x="161.4" y="419.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="164.4" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.09%)</title><rect x="161.4" y="403.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (33 samples, 1.42%)</title><rect x="162.4" y="467.0" width="16.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="165.4" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.09%)</title><rect x="162.9" y="451.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.9" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.09%)</title><rect x="162.9" y="435.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.09%)</title><rect x="162.9" y="419.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="165.9" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.04%)</title><rect x="163.4" y="403.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.4" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.04%)</title><rect x="163.4" y="387.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="166.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="163.4" y="371.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="166.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (27 samples, 1.16%)</title><rect x="163.9" y="451.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (27 samples, 1.16%)</title><rect x="163.9" y="435.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (27 samples, 1.16%)</title><rect x="163.9" y="419.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.9" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.04%)</title><rect x="163.9" y="403.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="166.9" y="414.0"></text>
</g>
<g>
<title>__libc_pread64 (25 samples, 1.08%)</title><rect x="164.4" y="403.0" width="12.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="167.4" y="414.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="177.1" y="403.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="180.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="177.6" y="451.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="180.6" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="177.6" y="435.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.6" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="177.6" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="180.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="177.6" y="403.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="178.1" y="451.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="181.1" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="178.1" y="435.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="181.1" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="178.1" y="419.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="181.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (2 samples, 0.09%)</title><rect x="178.1" y="403.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="181.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (8 samples, 0.34%)</title><rect x="179.2" y="467.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.2" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="182.2" y="451.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="185.2" y="462.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="182.2" y="435.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="185.2" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="182.2" y="419.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="185.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="182.7" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (8 samples, 0.34%)</title><rect x="183.2" y="467.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.2" y="478.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.04%)</title><rect x="186.3" y="451.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="189.3" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="186.8" y="451.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="189.8" y="462.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.04%)</title><rect x="186.8" y="435.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="189.8" y="446.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.04%)</title><rect x="186.8" y="419.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="189.8" y="430.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.09%)</title><rect x="187.3" y="563.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.3" y="574.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.09%)</title><rect x="187.3" y="547.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (2 samples, 0.09%)</title><rect x="187.3" y="531.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="190.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (2 samples, 0.09%)</title><rect x="187.3" y="515.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="190.3" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.09%)</title><rect x="187.3" y="499.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.3" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.09%)</title><rect x="187.3" y="483.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.3" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.13%)</title><rect x="188.3" y="675.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.3" y="686.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.13%)</title><rect x="188.3" y="659.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.3" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.09%)</title><rect x="188.8" y="643.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.8" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getValue (1 samples, 0.04%)</title><rect x="189.8" y="691.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="192.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (1,005 samples, 43.26%)</title><rect x="190.3" y="691.0" width="510.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.3" y="702.0">ru/mail/polis/dao/re1nex/NewDAO.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (149 samples, 6.41%)</title><rect x="192.4" y="675.0" width="75.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.4" y="686.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (149 samples, 6.41%)</title><rect x="192.4" y="659.0" width="75.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.4" y="670.0">com/goog..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="193.4" y="643.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="196.4" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="193.4" y="627.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="196.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="193.4" y="611.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="196.4" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="193.4" y="595.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="196.4" y="606.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.04%)</title><rect x="193.9" y="643.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.04%)</title><rect x="193.9" y="627.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.9" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (138 samples, 5.94%)</title><rect x="194.4" y="643.0" width="70.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.4" y="654.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (137 samples, 5.90%)</title><rect x="194.9" y="627.0" width="69.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.9" y="638.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (137 samples, 5.90%)</title><rect x="194.9" y="611.0" width="69.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="197.9" y="622.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (137 samples, 5.90%)</title><rect x="194.9" y="595.0" width="69.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.9" y="606.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (137 samples, 5.90%)</title><rect x="194.9" y="579.0" width="69.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="197.9" y="590.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (137 samples, 5.90%)</title><rect x="194.9" y="563.0" width="69.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="197.9" y="574.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (136 samples, 5.85%)</title><rect x="194.9" y="547.0" width="69.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.9" y="558.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (135 samples, 5.81%)</title><rect x="195.4" y="531.0" width="68.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="198.4" y="542.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (135 samples, 5.81%)</title><rect x="195.4" y="515.0" width="68.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="198.4" y="526.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (135 samples, 5.81%)</title><rect x="195.4" y="499.0" width="68.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.4" y="510.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (20 samples, 0.86%)</title><rect x="195.9" y="483.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (20 samples, 0.86%)</title><rect x="195.9" y="467.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (20 samples, 0.86%)</title><rect x="195.9" y="451.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.09%)</title><rect x="195.9" y="435.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.9" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.09%)</title><rect x="195.9" y="419.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="198.9" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="196.4" y="403.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 0.39%)</title><rect x="196.9" y="435.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.34%)</title><rect x="196.9" y="419.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (8 samples, 0.34%)</title><rect x="196.9" y="403.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (8 samples, 0.34%)</title><rect x="196.9" y="387.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.9" y="398.0"></text>
</g>
<g>
<title>__libc_pread64 (7 samples, 0.30%)</title><rect x="196.9" y="371.0" width="3.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="199.9" y="382.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="200.5" y="371.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="203.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="201.0" y="419.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.0" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="201.0" y="403.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.0" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="201.0" y="387.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (7 samples, 0.30%)</title><rect x="201.5" y="435.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.13%)</title><rect x="203.5" y="419.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.5" y="430.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.04%)</title><rect x="204.6" y="403.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="207.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.09%)</title><rect x="205.1" y="435.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.1" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="205.6" y="419.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="208.6" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="205.6" y="403.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="208.6" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="205.6" y="387.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="208.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.04%)</title><rect x="205.6" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="208.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (42 samples, 1.81%)</title><rect x="206.1" y="483.0" width="21.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="209.1" y="494.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (11 samples, 0.47%)</title><rect x="206.1" y="467.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.1" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.04%)</title><rect x="206.1" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.1" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="206.1" y="435.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="209.1" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="206.1" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="209.1" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="206.1" y="403.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="209.1" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="206.1" y="387.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="209.1" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="206.1" y="371.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="209.1" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="206.1" y="355.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="209.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (10 samples, 0.43%)</title><rect x="206.6" y="451.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (10 samples, 0.43%)</title><rect x="206.6" y="435.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="209.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="206.6" y="419.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.6" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="206.6" y="403.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.26%)</title><rect x="207.1" y="419.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (5 samples, 0.22%)</title><rect x="207.1" y="403.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (5 samples, 0.22%)</title><rect x="207.1" y="387.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (5 samples, 0.22%)</title><rect x="207.1" y="371.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.1" y="382.0"></text>
</g>
<g>
<title>__libc_pread64 (4 samples, 0.17%)</title><rect x="207.1" y="355.0" width="2.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="210.1" y="366.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="209.1" y="355.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="212.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="209.6" y="403.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.6" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="209.6" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.6" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="209.6" y="371.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="209.6" y="355.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="212.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.04%)</title><rect x="210.1" y="419.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.09%)</title><rect x="210.6" y="419.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.6" y="430.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="211.2" y="403.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="214.2" y="414.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="211.2" y="387.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="214.2" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="211.2" y="371.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="214.2" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.04%)</title><rect x="211.2" y="355.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="214.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (31 samples, 1.33%)</title><rect x="211.7" y="467.0" width="15.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (31 samples, 1.33%)</title><rect x="211.7" y="451.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="214.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.73%)</title><rect x="211.7" y="435.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (13 samples, 0.56%)</title><rect x="212.7" y="419.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (13 samples, 0.56%)</title><rect x="212.7" y="403.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (13 samples, 0.56%)</title><rect x="212.7" y="387.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.7" y="398.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.04%)</title><rect x="212.7" y="371.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="215.7" y="382.0"></text>
</g>
<g>
<title>__libc_pread64 (12 samples, 0.52%)</title><rect x="213.2" y="371.0" width="6.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="216.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="219.3" y="419.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.3" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="219.3" y="403.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.3" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="219.3" y="387.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="219.8" y="371.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (11 samples, 0.47%)</title><rect x="220.3" y="435.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.3" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="225.4" y="419.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="228.4" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="225.4" y="403.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="228.4" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="225.4" y="387.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="228.4" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.04%)</title><rect x="225.4" y="371.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="228.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (3 samples, 0.13%)</title><rect x="225.9" y="435.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.9" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.09%)</title><rect x="226.4" y="419.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="229.4" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.09%)</title><rect x="226.4" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="229.4" y="414.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="226.4" y="387.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="229.4" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="226.9" y="387.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="229.9" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.04%)</title><rect x="226.9" y="371.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="229.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (72 samples, 3.10%)</title><rect x="227.4" y="483.0" width="36.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.4" y="494.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (72 samples, 3.10%)</title><rect x="227.4" y="467.0" width="36.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.4" y="478.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (5 samples, 0.22%)</title><rect x="227.9" y="451.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.9" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (5 samples, 0.22%)</title><rect x="227.9" y="435.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.9" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.13%)</title><rect x="228.4" y="419.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.4" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="229.9" y="419.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="232.9" y="430.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="229.9" y="403.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.9" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="229.9" y="387.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.04%)</title><rect x="230.5" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.5" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="230.5" y="435.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.5" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="230.5" y="419.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 1.81%)</title><rect x="231.0" y="451.0" width="21.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.0" y="462.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.09%)</title><rect x="232.5" y="435.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.5" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.09%)</title><rect x="232.5" y="419.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.09%)</title><rect x="232.5" y="403.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="235.5" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="232.5" y="387.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="235.5" y="398.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="233.0" y="387.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="236.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (30 samples, 1.29%)</title><rect x="233.5" y="435.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (30 samples, 1.29%)</title><rect x="233.5" y="419.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (30 samples, 1.29%)</title><rect x="233.5" y="403.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.5" y="414.0"></text>
</g>
<g>
<title>__libc_pread64 (28 samples, 1.21%)</title><rect x="234.0" y="387.0" width="14.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="237.0" y="398.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="248.2" y="387.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="251.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="248.7" y="435.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.7" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="248.7" y="419.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.7" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="248.7" y="403.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (6 samples, 0.26%)</title><rect x="249.3" y="435.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.3" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.26%)</title><rect x="249.3" y="419.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.3" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (6 samples, 0.26%)</title><rect x="249.3" y="403.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (6 samples, 0.26%)</title><rect x="249.3" y="387.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (14 samples, 0.60%)</title><rect x="252.3" y="451.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="255.3" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.13%)</title><rect x="257.4" y="435.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="260.4" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.09%)</title><rect x="257.9" y="419.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="260.9" y="430.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="257.9" y="403.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="260.9" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="258.4" y="403.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="261.4" y="414.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="258.4" y="387.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="261.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="258.9" y="435.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (9 samples, 0.39%)</title><rect x="259.4" y="451.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.4" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.17%)</title><rect x="262.0" y="435.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="265.0" y="446.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="262.0" y="419.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="265.0" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (3 samples, 0.13%)</title><rect x="262.5" y="419.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="265.5" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.13%)</title><rect x="262.5" y="403.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="265.5" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (3 samples, 0.13%)</title><rect x="262.5" y="387.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="265.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.04%)</title><rect x="264.0" y="547.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.0" y="558.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.04%)</title><rect x="264.0" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.04%)</title><rect x="264.0" y="515.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.04%)</title><rect x="264.0" y="499.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.04%)</title><rect x="264.0" y="483.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.0" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.04%)</title><rect x="264.0" y="467.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.0" y="478.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (7 samples, 0.30%)</title><rect x="264.5" y="643.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (7 samples, 0.30%)</title><rect x="264.5" y="627.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.5" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (7 samples, 0.30%)</title><rect x="264.5" y="611.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="267.5" y="622.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.clear (2 samples, 0.09%)</title><rect x="265.0" y="595.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.04%)</title><rect x="266.0" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$97/313632186.getAsBoolean (1 samples, 0.04%)</title><rect x="266.0" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (1 samples, 0.04%)</title><rect x="266.0" y="563.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (1 samples, 0.04%)</title><rect x="266.0" y="547.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.04%)</title><rect x="266.0" y="531.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable$$Lambda$94/188886982.apply (1 samples, 0.04%)</title><rect x="266.0" y="515.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.lambda$iterator$0 (1 samples, 0.04%)</title><rect x="266.0" y="499.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (3 samples, 0.13%)</title><rect x="266.5" y="595.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (3 samples, 0.13%)</title><rect x="266.5" y="579.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.5" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (676 samples, 29.10%)</title><rect x="268.0" y="675.0" width="343.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.0" y="686.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (5 samples, 0.22%)</title><rect x="269.1" y="659.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.1" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (4 samples, 0.17%)</title><rect x="269.1" y="643.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.1" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (4 samples, 0.17%)</title><rect x="269.1" y="627.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.1" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.prevEntry (2 samples, 0.09%)</title><rect x="270.1" y="611.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.1" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.predecessor (2 samples, 0.09%)</title><rect x="270.1" y="595.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.1" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="271.1" y="643.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.1" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="271.1" y="627.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.1" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.04%)</title><rect x="271.1" y="611.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.1" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.04%)</title><rect x="271.1" y="595.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.1" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="271.1" y="579.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.1" y="590.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (4 samples, 0.17%)</title><rect x="271.6" y="659.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.6" y="670.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (4 samples, 0.17%)</title><rect x="271.6" y="643.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.6" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (2 samples, 0.09%)</title><rect x="272.6" y="627.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.6" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absHighest (1 samples, 0.04%)</title><rect x="273.1" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.1" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.getLastEntry (1 samples, 0.04%)</title><rect x="273.1" y="595.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$106/182251096.accept (665 samples, 28.63%)</title><rect x="273.6" y="659.0" width="337.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.6" y="670.0">ru/mail/polis/dao/re1nex/NewDAO$$Lambda$106/18..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIterator$5 (665 samples, 28.63%)</title><rect x="273.6" y="643.0" width="337.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="276.6" y="654.0">ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIte..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="273.6" y="627.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.6" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="273.6" y="611.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.6" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="273.6" y="595.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.6" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.04%)</title><rect x="273.6" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.6" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="273.6" y="563.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.iterator (664 samples, 28.58%)</title><rect x="274.1" y="627.0" width="337.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.1" y="638.0">ru/mail/polis/dao/re1nex/SSTable.iterator</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.prevEntry (1 samples, 0.04%)</title><rect x="274.1" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt; (663 samples, 28.54%)</title><rect x="274.6" y="611.0" width="336.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.6" y="622.0">ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.binarySearch (663 samples, 28.54%)</title><rect x="274.6" y="595.0" width="336.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.6" y="606.0">ru/mail/polis/dao/re1nex/SSTable.binarySearch</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.56%)</title><rect x="275.7" y="579.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.7" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (13 samples, 0.56%)</title><rect x="275.7" y="563.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (648 samples, 27.89%)</title><rect x="282.3" y="579.0" width="329.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.3" y="590.0">ru/mail/polis/dao/re1nex/SSTable.key</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.09%)</title><rect x="282.3" y="563.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.09%)</title><rect x="282.3" y="547.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.3" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.09%)</title><rect x="282.3" y="531.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="285.3" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.09%)</title><rect x="282.3" y="515.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="285.3" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.09%)</title><rect x="282.3" y="499.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="285.3" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.09%)</title><rect x="282.3" y="483.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="285.3" y="494.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="282.3" y="467.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="285.3" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="282.8" y="467.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="285.8" y="478.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.04%)</title><rect x="282.8" y="451.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="285.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (242 samples, 10.42%)</title><rect x="283.3" y="563.0" width="122.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.3" y="574.0">ru/mail/polis/d..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (242 samples, 10.42%)</title><rect x="283.3" y="547.0" width="122.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.3" y="558.0">sun/nio/ch/File..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (242 samples, 10.42%)</title><rect x="283.3" y="531.0" width="122.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="286.3" y="542.0">sun/nio/ch/File..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (13 samples, 0.56%)</title><rect x="283.8" y="515.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.8" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (13 samples, 0.56%)</title><rect x="283.8" y="499.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.8" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (10 samples, 0.43%)</title><rect x="284.3" y="483.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.04%)</title><rect x="288.9" y="467.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.9" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.09%)</title><rect x="289.4" y="483.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.4" y="494.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.09%)</title><rect x="289.4" y="467.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.09%)</title><rect x="289.4" y="451.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (11 samples, 0.47%)</title><rect x="290.4" y="515.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.4" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (11 samples, 0.47%)</title><rect x="290.4" y="499.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="293.4" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (11 samples, 0.47%)</title><rect x="290.4" y="483.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.4" y="494.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.04%)</title><rect x="291.4" y="467.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="294.4" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="291.9" y="467.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="294.9" y="478.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (7 samples, 0.30%)</title><rect x="292.4" y="467.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (7 samples, 0.30%)</title><rect x="292.4" y="451.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="295.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (131 samples, 5.64%)</title><rect x="296.0" y="515.0" width="66.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="299.0" y="526.0">sun/nio..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (5 samples, 0.22%)</title><rect x="299.0" y="499.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.0" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.22%)</title><rect x="299.0" y="483.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.0" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (5 samples, 0.22%)</title><rect x="299.0" y="467.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.04%)</title><rect x="301.1" y="451.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (105 samples, 4.52%)</title><rect x="301.6" y="499.0" width="53.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.6" y="510.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (105 samples, 4.52%)</title><rect x="301.6" y="483.0" width="53.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.6" y="494.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (102 samples, 4.39%)</title><rect x="302.1" y="467.0" width="51.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.1" y="478.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.04%)</title><rect x="304.6" y="451.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="307.6" y="462.0"></text>
</g>
<g>
<title>__libc_pread64 (89 samples, 3.83%)</title><rect x="305.1" y="451.0" width="45.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="308.1" y="462.0">__li..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="350.3" y="451.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="353.3" y="462.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (5 samples, 0.22%)</title><rect x="350.8" y="451.0" width="2.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="353.8" y="462.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="353.4" y="451.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="356.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="353.9" y="467.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.39%)</title><rect x="354.9" y="499.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.9" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.39%)</title><rect x="354.9" y="483.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.9" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (9 samples, 0.39%)</title><rect x="354.9" y="467.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (4 samples, 0.17%)</title><rect x="357.4" y="451.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (6 samples, 0.26%)</title><rect x="359.5" y="499.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="362.5" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.26%)</title><rect x="359.5" y="483.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.5" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (6 samples, 0.26%)</title><rect x="359.5" y="467.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="362.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (2 samples, 0.09%)</title><rect x="361.5" y="451.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (53 samples, 2.28%)</title><rect x="362.5" y="515.0" width="26.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="365.5" y="526.0">s..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (14 samples, 0.60%)</title><rect x="379.3" y="499.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="382.3" y="510.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (14 samples, 0.60%)</title><rect x="379.3" y="483.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="382.3" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (14 samples, 0.60%)</title><rect x="379.3" y="467.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="382.3" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (9 samples, 0.39%)</title><rect x="380.3" y="451.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="383.3" y="462.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.13%)</title><rect x="384.9" y="451.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="387.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (6 samples, 0.26%)</title><rect x="386.4" y="499.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="389.4" y="510.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (2 samples, 0.09%)</title><rect x="387.4" y="483.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="390.4" y="494.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.04%)</title><rect x="388.4" y="483.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="391.4" y="494.0"></text>
</g>
<g>
<title>pthread_self@plt (1 samples, 0.04%)</title><rect x="388.9" y="483.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="391.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (31 samples, 1.33%)</title><rect x="389.4" y="515.0" width="15.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.4" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (13 samples, 0.56%)</title><rect x="397.6" y="499.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="400.6" y="510.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (13 samples, 0.56%)</title><rect x="397.6" y="483.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="400.6" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (12 samples, 0.52%)</title><rect x="398.1" y="467.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="401.1" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (6 samples, 0.26%)</title><rect x="399.1" y="451.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="402.1" y="462.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.17%)</title><rect x="402.1" y="451.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="405.1" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="404.2" y="499.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="407.2" y="510.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.04%)</title><rect x="404.2" y="483.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="407.2" y="494.0"></text>
</g>
<g>
<title>pthread_cond_signal@plt (1 samples, 0.04%)</title><rect x="404.2" y="467.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="407.2" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="404.7" y="499.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="407.7" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="404.7" y="483.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="407.7" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="405.2" y="515.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="408.2" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="405.2" y="499.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.2" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="405.2" y="483.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (404 samples, 17.39%)</title><rect x="406.2" y="563.0" width="205.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.2" y="574.0">sun/nio/ch/FileChannelImpl...</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (404 samples, 17.39%)</title><rect x="406.2" y="547.0" width="205.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.2" y="558.0">sun/nio/ch/FileChannelImpl...</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (8 samples, 0.34%)</title><rect x="407.7" y="531.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="410.7" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (8 samples, 0.34%)</title><rect x="407.7" y="515.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.7" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (8 samples, 0.34%)</title><rect x="407.7" y="499.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="410.7" y="510.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.09%)</title><rect x="410.8" y="483.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="413.8" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.09%)</title><rect x="410.8" y="467.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="413.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (19 samples, 0.82%)</title><rect x="411.8" y="531.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="414.8" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (19 samples, 0.82%)</title><rect x="411.8" y="515.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.8" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (19 samples, 0.82%)</title><rect x="411.8" y="499.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="414.8" y="510.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (17 samples, 0.73%)</title><rect x="412.8" y="483.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.8" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (17 samples, 0.73%)</title><rect x="412.8" y="467.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="415.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (269 samples, 11.58%)</title><rect x="421.5" y="531.0" width="136.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="424.5" y="542.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (12 samples, 0.52%)</title><rect x="426.5" y="515.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="429.5" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (12 samples, 0.52%)</title><rect x="426.5" y="499.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="429.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (12 samples, 0.52%)</title><rect x="426.5" y="483.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="429.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.04%)</title><rect x="430.6" y="467.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="433.6" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.04%)</title><rect x="430.6" y="451.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="433.6" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="431.1" y="467.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="434.1" y="478.0"></text>
</g>
<g>
<title>unsafe_arraycopy (2 samples, 0.09%)</title><rect x="431.6" y="467.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="434.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (216 samples, 9.30%)</title><rect x="432.6" y="515.0" width="109.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="435.6" y="526.0">sun/nio/ch/IO..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (216 samples, 9.30%)</title><rect x="432.6" y="499.0" width="109.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="435.6" y="510.0">sun/nio/ch/Fi..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (210 samples, 9.04%)</title><rect x="433.6" y="483.0" width="106.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="436.6" y="494.0">sun/nio/ch/Fi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.04%)</title><rect x="439.2" y="467.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="442.2" y="478.0"></text>
</g>
<g>
<title>__libc_pread64 (189 samples, 8.14%)</title><rect x="439.7" y="467.0" width="96.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="442.7" y="478.0">__libc_prea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.13%)</title><rect x="535.7" y="467.0" width="1.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="538.7" y="478.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (5 samples, 0.22%)</title><rect x="537.3" y="467.0" width="2.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="540.3" y="478.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="539.8" y="467.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="542.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.17%)</title><rect x="540.3" y="483.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (12 samples, 0.52%)</title><rect x="542.3" y="515.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="545.3" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 0.52%)</title><rect x="542.3" y="499.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="545.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (12 samples, 0.52%)</title><rect x="542.3" y="483.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="545.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (8 samples, 0.34%)</title><rect x="544.4" y="467.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (19 samples, 0.82%)</title><rect x="548.4" y="515.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.4" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (19 samples, 0.82%)</title><rect x="548.4" y="499.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="551.4" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (19 samples, 0.82%)</title><rect x="548.4" y="483.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (9 samples, 0.39%)</title><rect x="553.5" y="467.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="556.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (64 samples, 2.76%)</title><rect x="558.1" y="531.0" width="32.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="561.1" y="542.0">su..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (13 samples, 0.56%)</title><rect x="577.4" y="515.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="580.4" y="526.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="577.4" y="499.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="580.4" y="510.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (12 samples, 0.52%)</title><rect x="577.9" y="499.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="580.9" y="510.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="578.4" y="483.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="581.4" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.04%)</title><rect x="578.9" y="483.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="581.9" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (9 samples, 0.39%)</title><rect x="579.4" y="483.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="582.4" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (6 samples, 0.26%)</title><rect x="580.4" y="467.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="583.4" y="478.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="583.5" y="467.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="586.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (13 samples, 0.56%)</title><rect x="584.0" y="515.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="587.0" y="526.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.04%)</title><rect x="590.1" y="499.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="593.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (39 samples, 1.68%)</title><rect x="590.6" y="531.0" width="19.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="593.6" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (17 samples, 0.73%)</title><rect x="600.8" y="515.0" width="8.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="603.8" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="601.3" y="499.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="604.3" y="510.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (15 samples, 0.65%)</title><rect x="601.8" y="499.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="604.8" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (15 samples, 0.65%)</title><rect x="601.8" y="483.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="604.8" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (12 samples, 0.52%)</title><rect x="602.3" y="467.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="605.3" y="478.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.09%)</title><rect x="608.4" y="467.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="611.4" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="609.4" y="515.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="612.4" y="526.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.04%)</title><rect x="609.4" y="499.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="612.4" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.80] (1 samples, 0.04%)</title><rect x="609.4" y="483.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="612.4" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="609.4" y="467.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="612.4" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="609.9" y="515.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="612.9" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="609.9" y="499.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="612.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="610.4" y="531.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="613.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="610.4" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="613.4" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="610.4" y="499.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="613.4" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="610.9" y="531.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.9" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="610.9" y="515.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="613.9" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="610.9" y="499.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="613.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (5 samples, 0.22%)</title><rect x="611.4" y="675.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="614.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (5 samples, 0.22%)</title><rect x="611.4" y="659.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="614.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (5 samples, 0.22%)</title><rect x="611.4" y="643.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="614.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.13%)</title><rect x="611.4" y="627.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="614.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 0.13%)</title><rect x="611.4" y="611.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="614.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.13%)</title><rect x="611.4" y="595.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="614.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.13%)</title><rect x="611.4" y="579.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="614.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.04%)</title><rect x="613.0" y="627.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="616.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.04%)</title><rect x="613.0" y="611.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="616.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.04%)</title><rect x="613.0" y="595.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="616.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.04%)</title><rect x="613.5" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (1 samples, 0.04%)</title><rect x="613.5" y="611.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="616.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (7 samples, 0.30%)</title><rect x="614.0" y="675.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="617.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (7 samples, 0.30%)</title><rect x="614.0" y="659.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="617.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (4 samples, 0.17%)</title><rect x="614.0" y="643.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="617.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (3 samples, 0.13%)</title><rect x="616.0" y="643.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="619.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (3 samples, 0.13%)</title><rect x="616.0" y="627.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="619.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.remove (1 samples, 0.04%)</title><rect x="617.0" y="611.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="620.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.expungeStaleEntry (1 samples, 0.04%)</title><rect x="617.0" y="595.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="620.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (150 samples, 6.46%)</title><rect x="617.5" y="675.0" width="76.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="620.5" y="686.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (150 samples, 6.46%)</title><rect x="617.5" y="659.0" width="76.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="620.5" y="670.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (147 samples, 6.33%)</title><rect x="618.0" y="643.0" width="74.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="621.0" y="654.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.04%)</title><rect x="618.0" y="627.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="621.0" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.09%)</title><rect x="618.5" y="627.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="621.5" y="638.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (144 samples, 6.20%)</title><rect x="619.6" y="627.0" width="73.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.6" y="638.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (144 samples, 6.20%)</title><rect x="619.6" y="611.0" width="73.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.6" y="622.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (144 samples, 6.20%)</title><rect x="619.6" y="595.0" width="73.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="622.6" y="606.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (144 samples, 6.20%)</title><rect x="619.6" y="579.0" width="73.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.6" y="590.0">java/uti..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (144 samples, 6.20%)</title><rect x="619.6" y="563.0" width="73.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="622.6" y="574.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (144 samples, 6.20%)</title><rect x="619.6" y="547.0" width="73.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="622.6" y="558.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (142 samples, 6.11%)</title><rect x="619.6" y="531.0" width="72.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="622.6" y="542.0">com/goog..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (142 samples, 6.11%)</title><rect x="619.6" y="515.0" width="72.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="622.6" y="526.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (142 samples, 6.11%)</title><rect x="619.6" y="499.0" width="72.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="622.6" y="510.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (142 samples, 6.11%)</title><rect x="619.6" y="483.0" width="72.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.6" y="494.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.04%)</title><rect x="620.1" y="467.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.1" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="620.1" y="451.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="623.1" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="620.1" y="435.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="623.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="620.1" y="419.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="623.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (25 samples, 1.08%)</title><rect x="620.6" y="467.0" width="12.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="623.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (25 samples, 1.08%)</title><rect x="620.6" y="451.0" width="12.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="623.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (25 samples, 1.08%)</title><rect x="620.6" y="435.0" width="12.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="623.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.09%)</title><rect x="620.6" y="419.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="623.6" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.09%)</title><rect x="620.6" y="403.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="623.6" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="620.6" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.6" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="621.1" y="387.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.1" y="398.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="621.1" y="371.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="624.1" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="621.1" y="355.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="624.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.04%)</title><rect x="621.6" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="624.6" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="621.6" y="403.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="624.6" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="621.6" y="387.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="624.6" y="398.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="621.6" y="371.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="624.6" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="621.6" y="355.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (14 samples, 0.60%)</title><rect x="622.1" y="419.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="625.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (11 samples, 0.47%)</title><rect x="622.6" y="403.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="625.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (11 samples, 0.47%)</title><rect x="622.6" y="387.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="625.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (11 samples, 0.47%)</title><rect x="622.6" y="371.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="625.6" y="382.0"></text>
</g>
<g>
<title>__libc_pread64 (10 samples, 0.43%)</title><rect x="623.1" y="355.0" width="5.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="626.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="628.2" y="403.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="631.2" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="628.2" y="387.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="631.2" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="628.2" y="371.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="631.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (2 samples, 0.09%)</title><rect x="628.2" y="355.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="631.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (5 samples, 0.22%)</title><rect x="629.2" y="419.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="632.2" y="430.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="630.7" y="403.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="633.7" y="414.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="630.7" y="387.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="633.7" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="630.7" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="633.7" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.04%)</title><rect x="630.7" y="355.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="633.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="631.2" y="403.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.2" y="414.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.04%)</title><rect x="631.2" y="387.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="634.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (3 samples, 0.13%)</title><rect x="631.7" y="419.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (56 samples, 2.41%)</title><rect x="633.3" y="467.0" width="28.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.3" y="478.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (14 samples, 0.60%)</title><rect x="633.3" y="451.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="636.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (14 samples, 0.60%)</title><rect x="633.3" y="435.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="636.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (14 samples, 0.60%)</title><rect x="633.3" y="419.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="636.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="633.3" y="403.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.3" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="633.3" y="387.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="636.3" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="633.3" y="371.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.3" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="633.3" y="355.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="636.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.04%)</title><rect x="633.8" y="403.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="636.8" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="633.8" y="387.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.8" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="633.8" y="371.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.8" y="382.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="633.8" y="355.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="636.8" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="633.8" y="339.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 0.39%)</title><rect x="634.3" y="403.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="637.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.26%)</title><rect x="634.3" y="387.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="637.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (6 samples, 0.26%)</title><rect x="634.3" y="371.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="637.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (6 samples, 0.26%)</title><rect x="634.3" y="355.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="637.3" y="366.0"></text>
</g>
<g>
<title>__libc_pread64 (5 samples, 0.22%)</title><rect x="634.3" y="339.0" width="2.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="637.3" y="350.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="636.8" y="339.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="639.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="637.3" y="387.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="640.3" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="637.3" y="371.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.3" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="637.3" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="637.8" y="387.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="640.8" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="637.8" y="371.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.8" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="637.8" y="355.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="640.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (2 samples, 0.09%)</title><rect x="637.8" y="339.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.09%)</title><rect x="638.9" y="403.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="641.9" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="639.4" y="387.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="642.4" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="639.4" y="371.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="642.4" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="639.4" y="355.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="642.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.04%)</title><rect x="639.9" y="403.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="642.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (42 samples, 1.81%)</title><rect x="640.4" y="451.0" width="21.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="643.4" y="462.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (42 samples, 1.81%)</title><rect x="640.4" y="435.0" width="21.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="643.4" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="640.4" y="419.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="643.4" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="640.4" y="403.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="643.4" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="640.4" y="387.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="643.4" y="398.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="640.4" y="371.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="640.4" y="355.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 1.03%)</title><rect x="640.9" y="419.0" width="12.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="643.9" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.04%)</title><rect x="640.9" y="403.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="643.9" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.04%)</title><rect x="640.9" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="643.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.04%)</title><rect x="640.9" y="371.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="643.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.04%)</title><rect x="640.9" y="355.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="643.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (19 samples, 0.82%)</title><rect x="641.4" y="403.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="644.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (19 samples, 0.82%)</title><rect x="641.4" y="387.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="644.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (19 samples, 0.82%)</title><rect x="641.4" y="371.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="644.4" y="382.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.04%)</title><rect x="641.4" y="355.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="644.4" y="366.0"></text>
</g>
<g>
<title>__libc_pread64 (18 samples, 0.77%)</title><rect x="641.9" y="355.0" width="9.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="644.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="651.1" y="403.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="654.1" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="651.1" y="387.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.1" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="651.1" y="371.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="654.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (2 samples, 0.09%)</title><rect x="651.1" y="355.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="654.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="652.1" y="403.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="655.1" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="652.1" y="387.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="655.1" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="652.1" y="371.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="652.6" y="355.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="655.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (9 samples, 0.39%)</title><rect x="653.1" y="419.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.1" y="430.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.09%)</title><rect x="656.1" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="659.1" y="414.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.09%)</title><rect x="656.1" y="387.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="659.1" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="656.6" y="371.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="659.6" y="382.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="656.6" y="355.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="659.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="657.1" y="403.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="660.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (8 samples, 0.34%)</title><rect x="657.7" y="419.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.7" y="430.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.09%)</title><rect x="660.7" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.7" y="414.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.09%)</title><rect x="660.7" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="663.7" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.09%)</title><rect x="660.7" y="371.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="663.7" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.04%)</title><rect x="660.7" y="355.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="663.7" y="366.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="661.2" y="355.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="664.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (59 samples, 2.54%)</title><rect x="661.7" y="467.0" width="30.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="664.7" y="478.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (59 samples, 2.54%)</title><rect x="661.7" y="451.0" width="30.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="664.7" y="462.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (5 samples, 0.22%)</title><rect x="661.7" y="435.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.7" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (5 samples, 0.22%)</title><rect x="661.7" y="419.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="664.7" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.13%)</title><rect x="661.7" y="403.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.7" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.09%)</title><rect x="663.2" y="403.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.2" y="414.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.09%)</title><rect x="663.2" y="387.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="666.2" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.09%)</title><rect x="663.2" y="371.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (3 samples, 0.13%)</title><rect x="664.3" y="435.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.3" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.13%)</title><rect x="664.3" y="419.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="667.3" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.13%)</title><rect x="664.3" y="403.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="667.3" y="414.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.09%)</title><rect x="664.8" y="387.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="667.8" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.09%)</title><rect x="664.8" y="371.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="667.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 1.81%)</title><rect x="665.8" y="435.0" width="21.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="668.8" y="446.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.09%)</title><rect x="666.8" y="419.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="669.8" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.09%)</title><rect x="666.8" y="403.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.09%)</title><rect x="666.8" y="387.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="669.8" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="667.3" y="371.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="670.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (32 samples, 1.38%)</title><rect x="667.8" y="419.0" width="16.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="670.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (32 samples, 1.38%)</title><rect x="667.8" y="403.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (32 samples, 1.38%)</title><rect x="667.8" y="387.0" width="16.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.8" y="398.0"></text>
</g>
<g>
<title>__libc_pread64 (27 samples, 1.16%)</title><rect x="668.8" y="371.0" width="13.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="671.8" y="382.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="682.5" y="371.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="685.5" y="382.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.09%)</title><rect x="683.1" y="371.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="686.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="684.1" y="419.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="687.1" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="684.1" y="403.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="687.1" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="684.1" y="387.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="687.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (5 samples, 0.22%)</title><rect x="684.6" y="419.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="687.6" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.22%)</title><rect x="684.6" y="403.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="687.6" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (5 samples, 0.22%)</title><rect x="684.6" y="387.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="687.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (3 samples, 0.13%)</title><rect x="685.6" y="371.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="688.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (7 samples, 0.30%)</title><rect x="687.1" y="435.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="690.1" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.17%)</title><rect x="687.6" y="419.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="690.6" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (4 samples, 0.17%)</title><rect x="687.6" y="403.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="690.6" y="414.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="687.6" y="387.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="690.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.09%)</title><rect x="688.1" y="387.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="691.1" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.04%)</title><rect x="688.1" y="371.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="691.1" y="382.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="688.6" y="371.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="691.6" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (1 samples, 0.04%)</title><rect x="689.1" y="387.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="692.1" y="398.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.04%)</title><rect x="689.1" y="371.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="692.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.09%)</title><rect x="689.7" y="419.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.09%)</title><rect x="690.7" y="435.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.7" y="446.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.09%)</title><rect x="691.7" y="531.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="694.7" y="542.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.09%)</title><rect x="691.7" y="515.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="694.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (2 samples, 0.09%)</title><rect x="691.7" y="499.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="694.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (2 samples, 0.09%)</title><rect x="691.7" y="483.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.09%)</title><rect x="691.7" y="467.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="694.7" y="478.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.09%)</title><rect x="691.7" y="451.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="694.7" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2 samples, 0.09%)</title><rect x="692.7" y="643.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.7" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (14 samples, 0.60%)</title><rect x="693.7" y="675.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="696.7" y="686.0"></text>
</g>
<g>
<title>java/util/Collection.stream (13 samples, 0.56%)</title><rect x="693.7" y="659.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="696.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (13 samples, 0.56%)</title><rect x="693.7" y="643.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="696.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (13 samples, 0.56%)</title><rect x="693.7" y="627.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="696.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (13 samples, 0.56%)</title><rect x="693.7" y="611.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="696.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (1 samples, 0.04%)</title><rect x="693.7" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="696.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.04%)</title><rect x="693.7" y="579.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="696.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.04%)</title><rect x="693.7" y="563.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="696.7" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="693.7" y="547.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="696.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="693.7" y="531.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="696.7" y="542.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.04%)</title><rect x="693.7" y="515.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="696.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (12 samples, 0.52%)</title><rect x="694.2" y="595.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="697.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (12 samples, 0.52%)</title><rect x="694.2" y="579.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.13%)</title><rect x="694.2" y="563.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="697.2" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.13%)</title><rect x="694.2" y="547.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="695.2" y="531.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.2" y="542.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.04%)</title><rect x="695.2" y="515.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="698.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (9 samples, 0.39%)</title><rect x="695.8" y="563.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="698.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.34%)</title><rect x="696.3" y="547.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="699.3" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.34%)</title><rect x="696.3" y="531.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.3" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="699.8" y="515.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="702.8" y="526.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.04%)</title><rect x="699.8" y="499.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="702.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.04%)</title><rect x="700.3" y="659.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="703.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.04%)</title><rect x="700.3" y="643.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="703.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (1 samples, 0.04%)</title><rect x="700.3" y="627.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="703.3" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="700.3" y="611.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="703.3" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="700.3" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="703.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="700.3" y="579.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="703.3" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="700.3" y="563.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="703.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.04%)</title><rect x="700.3" y="547.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="703.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (2 samples, 0.09%)</title><rect x="700.8" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="703.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.09%)</title><rect x="700.8" y="691.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="703.8" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.09%)</title><rect x="700.8" y="675.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="703.8" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="701.3" y="659.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="704.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (47 samples, 2.02%)</title><rect x="701.8" y="723.0" width="23.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.8" y="734.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (46 samples, 1.98%)</title><rect x="701.8" y="707.0" width="23.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.8" y="718.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.13%)</title><rect x="702.9" y="691.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="705.9" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.13%)</title><rect x="702.9" y="675.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="705.9" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.13%)</title><rect x="702.9" y="659.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="705.9" y="670.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="703.9" y="643.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="706.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (40 samples, 1.72%)</title><rect x="704.4" y="691.0" width="20.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="707.4" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.30%)</title><rect x="704.4" y="675.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="707.4" y="686.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.04%)</title><rect x="707.4" y="659.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="710.4" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.04%)</title><rect x="707.4" y="643.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="710.4" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.04%)</title><rect x="707.4" y="627.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="710.4" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.04%)</title><rect x="707.4" y="611.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="710.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="707.4" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="710.4" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 1.42%)</title><rect x="707.9" y="675.0" width="16.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="710.9" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 1.42%)</title><rect x="707.9" y="659.0" width="16.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="710.9" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (32 samples, 1.38%)</title><rect x="708.5" y="643.0" width="16.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.5" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="708.5" y="627.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.5" y="638.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (31 samples, 1.33%)</title><rect x="709.0" y="627.0" width="15.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="712.0" y="638.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (11 samples, 0.47%)</title><rect x="710.5" y="611.0" width="5.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="713.5" y="622.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="713.0" y="595.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="716.0" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.04%)</title><rect x="713.5" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="716.5" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.04%)</title><rect x="714.0" y="595.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="717.0" y="606.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.13%)</title><rect x="714.5" y="595.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="717.5" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.13%)</title><rect x="714.5" y="579.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="717.5" y="590.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.13%)</title><rect x="714.5" y="563.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="717.5" y="574.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="716.1" y="611.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="719.1" y="622.0"></text>
</g>
<g>
<title>__send (16 samples, 0.69%)</title><rect x="716.6" y="611.0" width="8.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="719.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="724.7" y="691.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="727.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="724.7" y="675.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="727.7" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="724.7" y="659.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="727.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (1 samples, 0.04%)</title><rect x="725.2" y="707.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="728.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.sendReplica (598 samples, 25.74%)</title><rect x="725.7" y="755.0" width="303.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="728.7" y="766.0">ru/mail/polis/service/re1nex/ApiControlle..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.04%)</title><rect x="725.7" y="739.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="728.7" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="725.7" y="723.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="728.7" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.04%)</title><rect x="725.7" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="728.7" y="718.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.04%)</title><rect x="725.7" y="691.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="728.7" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendReplica (597 samples, 25.70%)</title><rect x="726.2" y="739.0" width="303.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="729.2" y="750.0">ru/mail/polis/service/re1nex/ApiControlle..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.severalNodesForKey (28 samples, 1.21%)</title><rect x="726.2" y="723.0" width="14.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="729.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (12 samples, 0.52%)</title><rect x="726.7" y="707.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="729.7" y="718.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (1 samples, 0.04%)</title><rect x="726.7" y="691.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="729.7" y="702.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (1 samples, 0.04%)</title><rect x="726.7" y="675.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.7" y="686.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (1 samples, 0.04%)</title><rect x="726.7" y="659.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="729.7" y="670.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (1 samples, 0.04%)</title><rect x="726.7" y="643.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="729.7" y="654.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (1 samples, 0.04%)</title><rect x="726.7" y="627.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="729.7" y="638.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (1 samples, 0.04%)</title><rect x="726.7" y="611.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="729.7" y="622.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompressCheck (1 samples, 0.04%)</title><rect x="726.7" y="595.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="729.7" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="726.7" y="579.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="729.7" y="590.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (11 samples, 0.47%)</title><rect x="727.2" y="691.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="730.2" y="702.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (11 samples, 0.47%)</title><rect x="727.2" y="675.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.2" y="686.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (7 samples, 0.30%)</title><rect x="727.2" y="659.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="730.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.30%)</title><rect x="727.2" y="643.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.2" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="729.8" y="627.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="732.8" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="730.3" y="627.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="733.3" y="638.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (4 samples, 0.17%)</title><rect x="730.8" y="659.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="733.8" y="670.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (4 samples, 0.17%)</title><rect x="730.8" y="643.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.8" y="654.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (3 samples, 0.13%)</title><rect x="731.3" y="627.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.3" y="638.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (3 samples, 0.13%)</title><rect x="731.3" y="611.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="734.3" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (1 samples, 0.04%)</title><rect x="731.3" y="595.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="734.3" y="606.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (1 samples, 0.04%)</title><rect x="731.3" y="579.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.3" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (1 samples, 0.04%)</title><rect x="731.3" y="563.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="734.3" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.09%)</title><rect x="731.8" y="595.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="734.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.09%)</title><rect x="731.8" y="579.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="734.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.04%)</title><rect x="732.3" y="563.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="735.3" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="732.3" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="735.3" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="732.3" y="531.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="735.3" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="732.3" y="515.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="735.3" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="732.3" y="499.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="735.3" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="732.3" y="483.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="735.3" y="494.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.04%)</title><rect x="732.3" y="467.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="735.3" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.getNodesFromMap (15 samples, 0.65%)</title><rect x="732.8" y="707.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="735.8" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.04%)</title><rect x="733.3" y="691.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="736.3" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="733.3" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="736.3" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="733.3" y="659.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="736.3" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.04%)</title><rect x="733.3" y="643.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="736.3" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.04%)</title><rect x="733.3" y="627.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="736.3" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.04%)</title><rect x="733.3" y="611.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.3" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (5 samples, 0.22%)</title><rect x="733.8" y="691.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.8" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (5 samples, 0.22%)</title><rect x="733.8" y="675.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="736.8" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (4 samples, 0.17%)</title><rect x="734.4" y="659.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="737.4" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (3 samples, 0.13%)</title><rect x="734.9" y="643.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.9" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap$ValueIterator.next (2 samples, 0.09%)</title><rect x="736.4" y="691.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.4" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (2 samples, 0.09%)</title><rect x="736.4" y="675.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="739.4" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (2 samples, 0.09%)</title><rect x="736.4" y="659.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="739.4" y="670.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (6 samples, 0.26%)</title><rect x="737.4" y="691.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="740.4" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (5 samples, 0.22%)</title><rect x="737.9" y="675.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.9" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.09%)</title><rect x="739.4" y="659.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="742.4" y="670.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.04%)</title><rect x="739.4" y="643.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="742.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.04%)</title><rect x="739.4" y="627.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="742.4" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.04%)</title><rect x="739.4" y="611.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="742.4" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.04%)</title><rect x="739.4" y="595.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="742.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (1 samples, 0.04%)</title><rect x="739.9" y="643.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="742.9" y="654.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (1 samples, 0.04%)</title><rect x="739.9" y="627.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="742.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (569 samples, 24.49%)</title><rect x="740.5" y="723.0" width="289.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="743.5" y="734.0">ru/mail/polis/service/re1nex/ApiControl..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (543 samples, 23.37%)</title><rect x="741.0" y="707.0" width="275.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="744.0" y="718.0">ru/mail/polis/service/re1nex/ApiContr..</text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.13%)</title><rect x="742.0" y="691.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="745.0" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.13%)</title><rect x="742.0" y="675.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="745.0" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.13%)</title><rect x="742.0" y="659.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="745.0" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.13%)</title><rect x="742.0" y="643.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="745.0" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.13%)</title><rect x="742.0" y="627.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="745.0" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.hasNext (2 samples, 0.09%)</title><rect x="743.5" y="691.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="746.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.removeLocal (2 samples, 0.09%)</title><rect x="744.5" y="691.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="747.5" y="702.0"></text>
</g>
<g>
<title>java/util/TreeSet.remove (2 samples, 0.09%)</title><rect x="744.5" y="675.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.5" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (2 samples, 0.09%)</title><rect x="744.5" y="659.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="747.5" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.09%)</title><rect x="744.5" y="643.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.5" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.09%)</title><rect x="744.5" y="627.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="747.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl$$Lambda$101/2096500112.handleLocalResponse (410 samples, 17.65%)</title><rect x="745.5" y="691.0" width="208.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="748.5" y="702.0">ru/mail/polis/service/re1ne..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.lambda$handleResponses$0 (409 samples, 17.61%)</title><rect x="746.0" y="675.0" width="207.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.0" y="686.0">ru/mail/polis/service/re1ne..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (409 samples, 17.61%)</title><rect x="746.0" y="659.0" width="207.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="749.0" y="670.0">ru/mail/polis/service/re1ne..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1113249484.linkToTargetMethod (1 samples, 0.04%)</title><rect x="746.0" y="643.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="749.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1754634617.invoke (1 samples, 0.04%)</title><rect x="746.0" y="627.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="749.0" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1621472867.invokeStatic (1 samples, 0.04%)</title><rect x="746.0" y="611.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="749.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.04%)</title><rect x="746.0" y="595.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="749.0" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.04%)</title><rect x="746.0" y="579.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.0" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="746.5" y="643.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="749.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (407 samples, 17.52%)</title><rect x="747.1" y="643.0" width="206.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.1" y="654.0">ru/mail/polis/dao/DAO.getVa..</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.09%)</title><rect x="747.1" y="627.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="750.1" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.04%)</title><rect x="747.1" y="611.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="750.1" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.04%)</title><rect x="747.6" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="750.6" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.04%)</title><rect x="747.6" y="595.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="750.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (35 samples, 1.51%)</title><rect x="748.1" y="627.0" width="17.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="751.1" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (34 samples, 1.46%)</title><rect x="748.6" y="611.0" width="17.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="751.6" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (34 samples, 1.46%)</title><rect x="748.6" y="595.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="751.6" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (34 samples, 1.46%)</title><rect x="748.6" y="579.0" width="17.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="751.6" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (34 samples, 1.46%)</title><rect x="748.6" y="563.0" width="17.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="751.6" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (34 samples, 1.46%)</title><rect x="748.6" y="547.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="751.6" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (34 samples, 1.46%)</title><rect x="748.6" y="531.0" width="17.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="751.6" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (34 samples, 1.46%)</title><rect x="748.6" y="515.0" width="17.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.6" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (34 samples, 1.46%)</title><rect x="748.6" y="499.0" width="17.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="751.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (34 samples, 1.46%)</title><rect x="748.6" y="483.0" width="17.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="751.6" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (34 samples, 1.46%)</title><rect x="748.6" y="467.0" width="17.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="751.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (34 samples, 1.46%)</title><rect x="748.6" y="451.0" width="17.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="751.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (4 samples, 0.17%)</title><rect x="748.6" y="435.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="751.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (4 samples, 0.17%)</title><rect x="748.6" y="419.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="751.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (4 samples, 0.17%)</title><rect x="748.6" y="403.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="751.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.13%)</title><rect x="748.6" y="387.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="751.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.09%)</title><rect x="748.6" y="371.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="751.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (2 samples, 0.09%)</title><rect x="748.6" y="355.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="751.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (2 samples, 0.09%)</title><rect x="748.6" y="339.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="751.6" y="350.0"></text>
</g>
<g>
<title>__libc_pread64 (2 samples, 0.09%)</title><rect x="748.6" y="323.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="751.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="749.6" y="371.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="752.6" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="749.6" y="355.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="752.6" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="749.6" y="339.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="752.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="749.6" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.04%)</title><rect x="750.1" y="387.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="753.1" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="750.1" y="371.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="753.1" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="750.1" y="355.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="753.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (18 samples, 0.77%)</title><rect x="750.6" y="435.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="753.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (4 samples, 0.17%)</title><rect x="750.6" y="419.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (4 samples, 0.17%)</title><rect x="750.6" y="403.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="753.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (4 samples, 0.17%)</title><rect x="750.6" y="387.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="753.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.04%)</title><rect x="750.6" y="371.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="753.6" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="750.6" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="753.6" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="750.6" y="339.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="753.6" y="350.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="750.6" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="753.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="750.6" y="307.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="753.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.13%)</title><rect x="751.1" y="371.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="754.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.04%)</title><rect x="751.1" y="355.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="754.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (1 samples, 0.04%)</title><rect x="751.1" y="339.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="754.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.04%)</title><rect x="751.1" y="323.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="754.1" y="334.0"></text>
</g>
<g>
<title>__libc_pread64 (1 samples, 0.04%)</title><rect x="751.1" y="307.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="754.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="751.6" y="355.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="754.6" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="751.6" y="339.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="754.6" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="751.6" y="323.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="754.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="752.1" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="755.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (14 samples, 0.60%)</title><rect x="752.6" y="419.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="755.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (14 samples, 0.60%)</title><rect x="752.6" y="403.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="752.6" y="387.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.6" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="752.6" y="371.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.6" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="752.6" y="355.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="755.6" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="752.6" y="339.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="755.6" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="752.6" y="323.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="755.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (10 samples, 0.43%)</title><rect x="753.2" y="387.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="756.2" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.09%)</title><rect x="753.7" y="371.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.7" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.09%)</title><rect x="753.7" y="355.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="756.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.09%)</title><rect x="753.7" y="339.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="756.7" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.04%)</title><rect x="754.2" y="323.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.2" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.04%)</title><rect x="754.2" y="307.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="757.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="754.2" y="291.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="757.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.26%)</title><rect x="754.7" y="371.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="757.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (6 samples, 0.26%)</title><rect x="754.7" y="355.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (6 samples, 0.26%)</title><rect x="754.7" y="339.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.7" y="350.0"></text>
</g>
<g>
<title>__libc_pread64 (6 samples, 0.26%)</title><rect x="754.7" y="323.0" width="3.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="757.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="757.7" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.7" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="757.7" y="355.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.7" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="757.7" y="339.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="760.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="757.7" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.04%)</title><rect x="758.2" y="387.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="761.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.09%)</title><rect x="758.7" y="387.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="761.7" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.09%)</title><rect x="758.7" y="371.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="761.7" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.09%)</title><rect x="758.7" y="355.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="761.7" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.09%)</title><rect x="758.7" y="339.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="761.7" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (2 samples, 0.09%)</title><rect x="758.7" y="323.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="761.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (12 samples, 0.52%)</title><rect x="759.8" y="435.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="762.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (12 samples, 0.52%)</title><rect x="759.8" y="419.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.09%)</title><rect x="759.8" y="403.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="762.8" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.09%)</title><rect x="759.8" y="387.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.8" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.09%)</title><rect x="759.8" y="371.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.09%)</title><rect x="760.8" y="403.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="763.8" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.09%)</title><rect x="760.8" y="387.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="763.8" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.09%)</title><rect x="760.8" y="371.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="763.8" y="382.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="761.3" y="355.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.3" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="761.3" y="339.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.22%)</title><rect x="761.8" y="403.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="764.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (5 samples, 0.22%)</title><rect x="761.8" y="387.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="764.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (5 samples, 0.22%)</title><rect x="761.8" y="371.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="764.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (5 samples, 0.22%)</title><rect x="761.8" y="355.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.8" y="366.0"></text>
</g>
<g>
<title>__libc_pread64 (4 samples, 0.17%)</title><rect x="761.8" y="339.0" width="2.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="764.8" y="350.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="763.8" y="339.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="766.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.09%)</title><rect x="764.3" y="403.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="764.8" y="387.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.04%)</title><rect x="765.3" y="403.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="768.3" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="765.3" y="387.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="768.3" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="765.3" y="371.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="768.3" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="765.3" y="355.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="768.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (370 samples, 15.93%)</title><rect x="765.9" y="627.0" width="187.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="768.9" y="638.0">ru/mail/polis/dao/re1nex..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1 samples, 0.04%)</title><rect x="766.9" y="611.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="769.9" y="622.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1 samples, 0.04%)</title><rect x="766.9" y="595.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="769.9" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1 samples, 0.04%)</title><rect x="766.9" y="579.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.9" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1 samples, 0.04%)</title><rect x="766.9" y="563.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="769.9" y="574.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1 samples, 0.04%)</title><rect x="766.9" y="547.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="769.9" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.04%)</title><rect x="766.9" y="531.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.9" y="542.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.04%)</title><rect x="766.9" y="515.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="769.9" y="526.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.04%)</title><rect x="766.9" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="769.9" y="510.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.04%)</title><rect x="766.9" y="483.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.04%)</title><rect x="766.9" y="467.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="769.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.04%)</title><rect x="766.9" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="769.9" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.04%)</title><rect x="766.9" y="435.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="769.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (1 samples, 0.04%)</title><rect x="766.9" y="419.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="769.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (1 samples, 0.04%)</title><rect x="766.9" y="403.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (1 samples, 0.04%)</title><rect x="766.9" y="387.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="769.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (1 samples, 0.04%)</title><rect x="766.9" y="371.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="769.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (1 samples, 0.04%)</title><rect x="766.9" y="355.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="769.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="766.9" y="339.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="769.9" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="766.9" y="323.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="769.9" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="766.9" y="307.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="769.9" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="766.9" y="291.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="769.9" y="302.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.04%)</title><rect x="766.9" y="275.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="769.9" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (54 samples, 2.32%)</title><rect x="767.4" y="611.0" width="27.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="770.4" y="622.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (52 samples, 2.24%)</title><rect x="767.9" y="595.0" width="26.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="770.9" y="606.0">c..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (48 samples, 2.07%)</title><rect x="767.9" y="579.0" width="24.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="770.9" y="590.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (48 samples, 2.07%)</title><rect x="767.9" y="563.0" width="24.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="770.9" y="574.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (48 samples, 2.07%)</title><rect x="767.9" y="547.0" width="24.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="770.9" y="558.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (48 samples, 2.07%)</title><rect x="767.9" y="531.0" width="24.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.9" y="542.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (48 samples, 2.07%)</title><rect x="767.9" y="515.0" width="24.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="770.9" y="526.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (48 samples, 2.07%)</title><rect x="767.9" y="499.0" width="24.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="770.9" y="510.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (44 samples, 1.89%)</title><rect x="767.9" y="483.0" width="22.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="770.9" y="494.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (43 samples, 1.85%)</title><rect x="768.4" y="467.0" width="21.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="771.4" y="478.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (43 samples, 1.85%)</title><rect x="768.4" y="451.0" width="21.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.4" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (43 samples, 1.85%)</title><rect x="768.4" y="435.0" width="21.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="771.4" y="446.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (6 samples, 0.26%)</title><rect x="768.4" y="419.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (6 samples, 0.26%)</title><rect x="768.4" y="403.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="771.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (6 samples, 0.26%)</title><rect x="768.4" y="387.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="771.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="768.4" y="371.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="771.4" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="768.4" y="355.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.4" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="768.4" y="339.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="771.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.04%)</title><rect x="768.9" y="371.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="771.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.04%)</title><rect x="768.9" y="355.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (1 samples, 0.04%)</title><rect x="768.9" y="339.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="771.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="768.9" y="323.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="771.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.13%)</title><rect x="769.4" y="371.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.09%)</title><rect x="769.9" y="355.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.04%)</title><rect x="770.9" y="371.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (25 samples, 1.08%)</title><rect x="771.4" y="419.0" width="12.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (10 samples, 0.43%)</title><rect x="771.4" y="403.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="774.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (10 samples, 0.43%)</title><rect x="771.4" y="387.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (10 samples, 0.43%)</title><rect x="771.4" y="371.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="774.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.09%)</title><rect x="771.4" y="355.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="774.4" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.09%)</title><rect x="771.4" y="339.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="774.4" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.09%)</title><rect x="771.4" y="323.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="774.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.04%)</title><rect x="772.5" y="355.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="775.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="772.5" y="339.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="775.5" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="772.5" y="323.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.5" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="772.5" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="775.5" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="772.5" y="291.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.26%)</title><rect x="773.0" y="355.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.26%)</title><rect x="773.0" y="339.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (6 samples, 0.26%)</title><rect x="773.0" y="323.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="776.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (6 samples, 0.26%)</title><rect x="773.0" y="307.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.0" y="318.0"></text>
</g>
<g>
<title>__libc_pread64 (6 samples, 0.26%)</title><rect x="773.0" y="291.0" width="3.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="776.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.04%)</title><rect x="776.0" y="355.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="779.0" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="776.0" y="339.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="779.0" y="350.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="776.0" y="323.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="779.0" y="334.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="776.0" y="307.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="779.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (15 samples, 0.65%)</title><rect x="776.5" y="403.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="779.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (15 samples, 0.65%)</title><rect x="776.5" y="387.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.04%)</title><rect x="776.5" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="779.5" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="776.5" y="355.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="779.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="776.5" y="339.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="779.5" y="350.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="776.5" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.5" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="776.5" y="307.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="779.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (10 samples, 0.43%)</title><rect x="777.0" y="371.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="780.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.39%)</title><rect x="777.0" y="355.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="780.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (9 samples, 0.39%)</title><rect x="777.0" y="339.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="780.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (9 samples, 0.39%)</title><rect x="777.0" y="323.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.0" y="334.0"></text>
</g>
<g>
<title>__libc_pread64 (8 samples, 0.34%)</title><rect x="777.5" y="307.0" width="4.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="780.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="781.6" y="355.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.6" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="781.6" y="339.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="784.6" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="781.6" y="323.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="784.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="781.6" y="307.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="784.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (4 samples, 0.17%)</title><rect x="782.1" y="371.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="785.1" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="783.1" y="355.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="786.1" y="366.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="783.1" y="339.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="786.1" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="783.1" y="323.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="786.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="783.6" y="355.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="786.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (12 samples, 0.52%)</title><rect x="784.1" y="419.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (12 samples, 0.52%)</title><rect x="784.1" y="403.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="787.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (7 samples, 0.30%)</title><rect x="784.1" y="387.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="787.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.26%)</title><rect x="784.1" y="371.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (6 samples, 0.26%)</title><rect x="784.1" y="355.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (6 samples, 0.26%)</title><rect x="784.1" y="339.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.1" y="350.0"></text>
</g>
<g>
<title>__libc_pread64 (4 samples, 0.17%)</title><rect x="784.6" y="323.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="787.6" y="334.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="786.7" y="323.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="789.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="787.2" y="371.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="790.2" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="787.2" y="355.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="790.2" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.04%)</title><rect x="787.2" y="339.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="790.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="787.2" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="790.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.09%)</title><rect x="787.7" y="387.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="790.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.04%)</title><rect x="788.2" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="791.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (3 samples, 0.13%)</title><rect x="788.7" y="387.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="791.7" y="398.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (4 samples, 0.17%)</title><rect x="790.2" y="483.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.2" y="494.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (4 samples, 0.17%)</title><rect x="790.2" y="467.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="793.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (4 samples, 0.17%)</title><rect x="790.2" y="451.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="793.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (4 samples, 0.17%)</title><rect x="790.2" y="435.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="793.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="790.2" y="419.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="793.2" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.04%)</title><rect x="790.2" y="403.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="793.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (3 samples, 0.13%)</title><rect x="790.7" y="419.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="793.7" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.13%)</title><rect x="790.7" y="403.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="793.7" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="791.2" y="387.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="794.2" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="791.2" y="371.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="794.2" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="791.2" y="355.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="794.2" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="791.2" y="339.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="794.2" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="791.2" y="323.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="794.2" y="334.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.04%)</title><rect x="791.2" y="307.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="794.2" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.04%)</title><rect x="791.2" y="291.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="794.2" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.04%)</title><rect x="791.8" y="387.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="794.8" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="791.8" y="371.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="794.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="791.8" y="355.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="794.8" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="791.8" y="339.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="794.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="791.8" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="794.8" y="334.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (4 samples, 0.17%)</title><rect x="792.3" y="579.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (4 samples, 0.17%)</title><rect x="792.3" y="563.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (4 samples, 0.17%)</title><rect x="792.3" y="547.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="795.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (2 samples, 0.09%)</title><rect x="792.8" y="531.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.8" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (1 samples, 0.04%)</title><rect x="793.8" y="531.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.8" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.04%)</title><rect x="793.8" y="515.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="796.8" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.04%)</title><rect x="793.8" y="499.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.8" y="510.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.04%)</title><rect x="794.3" y="595.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="797.3" y="606.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (253 samples, 10.89%)</title><rect x="794.8" y="611.0" width="128.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="797.8" y="622.0">java/lang/Iterab..</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.04%)</title><rect x="794.8" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.8" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="794.8" y="579.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="797.8" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (1 samples, 0.04%)</title><rect x="794.8" y="563.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="797.8" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.prevEntry (1 samples, 0.04%)</title><rect x="794.8" y="547.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="797.8" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.predecessor (1 samples, 0.04%)</title><rect x="794.8" y="531.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="797.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$106/182251096.accept (252 samples, 10.85%)</title><rect x="795.3" y="595.0" width="128.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="798.3" y="606.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIterator$5 (252 samples, 10.85%)</title><rect x="795.3" y="579.0" width="128.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="798.3" y="590.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.iterator (252 samples, 10.85%)</title><rect x="795.3" y="563.0" width="128.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="798.3" y="574.0">ru/mail/polis/da..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.prevEntry (1 samples, 0.04%)</title><rect x="795.3" y="547.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="798.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt; (251 samples, 10.80%)</title><rect x="795.8" y="547.0" width="127.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="798.8" y="558.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.binarySearch (251 samples, 10.80%)</title><rect x="795.8" y="531.0" width="127.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="798.8" y="542.0">ru/mail/polis/da..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.13%)</title><rect x="796.3" y="515.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="799.3" y="526.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.13%)</title><rect x="796.3" y="499.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="799.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (247 samples, 10.63%)</title><rect x="797.9" y="515.0" width="125.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="800.9" y="526.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.13%)</title><rect x="798.4" y="499.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="801.4" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.13%)</title><rect x="798.4" y="483.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="801.4" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.09%)</title><rect x="798.9" y="467.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="801.9" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.09%)</title><rect x="798.9" y="451.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="801.9" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="798.9" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="801.9" y="446.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="799.4" y="435.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="802.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (89 samples, 3.83%)</title><rect x="799.9" y="499.0" width="45.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.9" y="510.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.04%)</title><rect x="799.9" y="483.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="802.9" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="799.9" y="467.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="802.9" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="799.9" y="451.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="802.9" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="799.9" y="435.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="802.9" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="799.9" y="419.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="802.9" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="799.9" y="403.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="802.9" y="414.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.04%)</title><rect x="799.9" y="387.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="802.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (88 samples, 3.79%)</title><rect x="800.4" y="483.0" width="44.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="803.4" y="494.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (88 samples, 3.79%)</title><rect x="800.4" y="467.0" width="44.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="803.4" y="478.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (6 samples, 0.26%)</title><rect x="800.4" y="451.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="803.4" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (6 samples, 0.26%)</title><rect x="800.4" y="435.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="803.4" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.13%)</title><rect x="801.9" y="419.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (4 samples, 0.17%)</title><rect x="803.4" y="451.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="806.4" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (4 samples, 0.17%)</title><rect x="803.4" y="435.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.4" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.17%)</title><rect x="803.4" y="419.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.4" y="430.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (1 samples, 0.04%)</title><rect x="803.9" y="403.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="806.9" y="414.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.09%)</title><rect x="804.5" y="403.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.5" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.09%)</title><rect x="804.5" y="387.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="807.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (45 samples, 1.94%)</title><rect x="805.5" y="451.0" width="22.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="808.5" y="462.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.13%)</title><rect x="806.5" y="435.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="809.5" y="446.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.13%)</title><rect x="806.5" y="419.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="809.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.13%)</title><rect x="806.5" y="403.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="809.5" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.09%)</title><rect x="807.0" y="387.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.0" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (2 samples, 0.09%)</title><rect x="807.0" y="371.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="807.0" y="355.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="810.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 1.55%)</title><rect x="808.0" y="435.0" width="18.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="811.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (36 samples, 1.55%)</title><rect x="808.0" y="419.0" width="18.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="811.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (36 samples, 1.55%)</title><rect x="808.0" y="403.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="811.0" y="414.0"></text>
</g>
<g>
<title>__libc_pread64 (33 samples, 1.42%)</title><rect x="808.5" y="387.0" width="16.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="811.5" y="398.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.09%)</title><rect x="825.3" y="387.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="828.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="826.3" y="435.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="829.3" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="826.3" y="419.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="829.3" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="826.3" y="403.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="829.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="827.3" y="435.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="830.3" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="827.3" y="419.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="830.3" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="827.3" y="403.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="830.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (20 samples, 0.86%)</title><rect x="828.3" y="451.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="831.3" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.26%)</title><rect x="834.4" y="435.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="837.4" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (6 samples, 0.26%)</title><rect x="834.4" y="419.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="837.4" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.26%)</title><rect x="834.4" y="403.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="837.4" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (5 samples, 0.22%)</title><rect x="834.4" y="387.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="837.4" y="398.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="837.0" y="387.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="840.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.09%)</title><rect x="837.5" y="435.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="840.5" y="446.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.04%)</title><rect x="838.0" y="419.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="841.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (13 samples, 0.56%)</title><rect x="838.5" y="451.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="841.5" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.26%)</title><rect x="842.0" y="435.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="845.0" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (5 samples, 0.22%)</title><rect x="842.6" y="419.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="845.6" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.22%)</title><rect x="842.6" y="403.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="845.6" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (3 samples, 0.13%)</title><rect x="843.1" y="387.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="846.1" y="398.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="844.6" y="387.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="847.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (154 samples, 6.63%)</title><rect x="845.1" y="499.0" width="78.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="848.1" y="510.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (154 samples, 6.63%)</title><rect x="845.1" y="483.0" width="78.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="848.1" y="494.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.13%)</title><rect x="845.1" y="467.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="848.1" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.13%)</title><rect x="845.1" y="451.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="848.1" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.13%)</title><rect x="845.1" y="435.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="848.1" y="446.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.09%)</title><rect x="845.6" y="419.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="848.6" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.09%)</title><rect x="845.6" y="403.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="848.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (6 samples, 0.26%)</title><rect x="846.6" y="467.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="849.6" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (6 samples, 0.26%)</title><rect x="846.6" y="451.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="849.6" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.26%)</title><rect x="846.6" y="435.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="849.6" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="847.1" y="419.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="850.1" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.04%)</title><rect x="847.1" y="403.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="850.1" y="414.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.17%)</title><rect x="847.6" y="419.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="850.6" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.17%)</title><rect x="847.6" y="403.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="850.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (92 samples, 3.96%)</title><rect x="849.7" y="467.0" width="46.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="852.7" y="478.0">sun/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (8 samples, 0.34%)</title><rect x="851.7" y="451.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.7" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (8 samples, 0.34%)</title><rect x="851.7" y="435.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (8 samples, 0.34%)</title><rect x="851.7" y="419.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="854.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (2 samples, 0.09%)</title><rect x="854.7" y="403.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="857.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (71 samples, 3.06%)</title><rect x="855.8" y="451.0" width="36.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="858.8" y="462.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (71 samples, 3.06%)</title><rect x="855.8" y="435.0" width="36.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="858.8" y="446.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (70 samples, 3.01%)</title><rect x="855.8" y="419.0" width="35.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="858.8" y="430.0">sun..</text>
</g>
<g>
<title>__libc_pread64 (63 samples, 2.71%)</title><rect x="857.8" y="403.0" width="32.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="860.8" y="414.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.13%)</title><rect x="889.8" y="403.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="892.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.04%)</title><rect x="891.3" y="419.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="894.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.09%)</title><rect x="891.8" y="451.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="894.8" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="891.8" y="435.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="894.8" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="891.8" y="419.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="894.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.04%)</title><rect x="892.3" y="403.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="895.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (7 samples, 0.30%)</title><rect x="892.8" y="451.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="895.8" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.30%)</title><rect x="892.8" y="435.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="895.8" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (7 samples, 0.30%)</title><rect x="892.8" y="419.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="895.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (5 samples, 0.22%)</title><rect x="893.9" y="403.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="896.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (38 samples, 1.64%)</title><rect x="896.4" y="467.0" width="19.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="899.4" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.39%)</title><rect x="908.6" y="451.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="911.6" y="462.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (9 samples, 0.39%)</title><rect x="908.6" y="435.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="911.6" y="446.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="908.6" y="419.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.6" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.34%)</title><rect x="909.1" y="419.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="912.1" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (4 samples, 0.17%)</title><rect x="910.1" y="403.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="913.1" y="414.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.09%)</title><rect x="912.1" y="403.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="915.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.04%)</title><rect x="913.2" y="451.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="916.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (4 samples, 0.17%)</title><rect x="913.7" y="451.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="916.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (15 samples, 0.65%)</title><rect x="915.7" y="467.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="918.7" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.22%)</title><rect x="920.8" y="451.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.8" y="462.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (5 samples, 0.22%)</title><rect x="920.8" y="435.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="923.8" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.22%)</title><rect x="920.8" y="419.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.8" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (3 samples, 0.13%)</title><rect x="920.8" y="403.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="923.8" y="414.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.09%)</title><rect x="922.3" y="403.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="925.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (2 samples, 0.09%)</title><rect x="923.3" y="611.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="926.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.09%)</title><rect x="923.3" y="595.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="926.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.09%)</title><rect x="923.3" y="579.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="926.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.09%)</title><rect x="923.3" y="563.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.3" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.09%)</title><rect x="923.3" y="547.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.3" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.09%)</title><rect x="923.3" y="531.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="926.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.09%)</title><rect x="923.3" y="515.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="926.3" y="526.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="923.8" y="499.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="926.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.04%)</title><rect x="924.3" y="611.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.04%)</title><rect x="924.3" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="927.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.04%)</title><rect x="924.3" y="579.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="927.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (49 samples, 2.11%)</title><rect x="924.8" y="611.0" width="24.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="927.8" y="622.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (49 samples, 2.11%)</title><rect x="924.8" y="595.0" width="24.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="927.8" y="606.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (49 samples, 2.11%)</title><rect x="924.8" y="579.0" width="24.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="927.8" y="590.0">c..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (49 samples, 2.11%)</title><rect x="924.8" y="563.0" width="24.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="927.8" y="574.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (49 samples, 2.11%)</title><rect x="924.8" y="547.0" width="24.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="927.8" y="558.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (49 samples, 2.11%)</title><rect x="924.8" y="531.0" width="24.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="927.8" y="542.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (49 samples, 2.11%)</title><rect x="924.8" y="515.0" width="24.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="927.8" y="526.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (49 samples, 2.11%)</title><rect x="924.8" y="499.0" width="24.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="927.8" y="510.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (49 samples, 2.11%)</title><rect x="924.8" y="483.0" width="24.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="927.8" y="494.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (48 samples, 2.07%)</title><rect x="924.8" y="467.0" width="24.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.8" y="478.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (48 samples, 2.07%)</title><rect x="924.8" y="451.0" width="24.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.8" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (48 samples, 2.07%)</title><rect x="924.8" y="435.0" width="24.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.8" y="446.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (48 samples, 2.07%)</title><rect x="924.8" y="419.0" width="24.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="927.8" y="430.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (6 samples, 0.26%)</title><rect x="924.8" y="403.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (6 samples, 0.26%)</title><rect x="924.8" y="387.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="927.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (6 samples, 0.26%)</title><rect x="924.8" y="371.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="927.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="925.4" y="355.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="928.4" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="925.4" y="339.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="928.4" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="925.4" y="323.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.13%)</title><rect x="925.9" y="355.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.13%)</title><rect x="925.9" y="339.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="928.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (3 samples, 0.13%)</title><rect x="925.9" y="323.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="928.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (3 samples, 0.13%)</title><rect x="925.9" y="307.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="928.9" y="318.0"></text>
</g>
<g>
<title>__libc_pread64 (3 samples, 0.13%)</title><rect x="925.9" y="291.0" width="1.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="928.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.04%)</title><rect x="927.4" y="355.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="930.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (18 samples, 0.77%)</title><rect x="927.9" y="403.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="930.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (7 samples, 0.30%)</title><rect x="927.9" y="387.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="930.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (7 samples, 0.30%)</title><rect x="927.9" y="371.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="930.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (7 samples, 0.30%)</title><rect x="927.9" y="355.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="930.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="927.9" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="930.9" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="927.9" y="323.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="930.9" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="927.9" y="307.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="930.9" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="927.9" y="291.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="930.9" y="302.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.04%)</title><rect x="927.9" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="930.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.04%)</title><rect x="928.4" y="339.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="931.4" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="928.4" y="323.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="931.4" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="928.4" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="931.4" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="928.4" y="291.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="931.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.09%)</title><rect x="928.9" y="339.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="931.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.09%)</title><rect x="928.9" y="323.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="931.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (2 samples, 0.09%)</title><rect x="928.9" y="307.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="931.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (2 samples, 0.09%)</title><rect x="928.9" y="291.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="931.9" y="302.0"></text>
</g>
<g>
<title>__libc_pread64 (1 samples, 0.04%)</title><rect x="929.4" y="275.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="932.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.04%)</title><rect x="929.9" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="932.9" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="929.9" y="323.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="932.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.09%)</title><rect x="930.4" y="339.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="933.4" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="930.9" y="323.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.9" y="334.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="930.9" y="307.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="933.9" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="930.9" y="291.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="933.9" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.04%)</title><rect x="930.9" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="933.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (11 samples, 0.47%)</title><rect x="931.4" y="387.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="934.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (11 samples, 0.47%)</title><rect x="931.4" y="371.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="934.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.04%)</title><rect x="931.4" y="355.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="934.4" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="931.4" y="339.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="934.4" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="931.4" y="323.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="934.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (7 samples, 0.30%)</title><rect x="932.0" y="355.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (7 samples, 0.30%)</title><rect x="932.0" y="339.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="935.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (7 samples, 0.30%)</title><rect x="932.0" y="323.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="935.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (7 samples, 0.30%)</title><rect x="932.0" y="307.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="935.0" y="318.0"></text>
</g>
<g>
<title>__libc_pread64 (7 samples, 0.30%)</title><rect x="932.0" y="291.0" width="3.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="935.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.04%)</title><rect x="935.5" y="355.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="938.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.09%)</title><rect x="936.0" y="355.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (24 samples, 1.03%)</title><rect x="937.0" y="403.0" width="12.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="940.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (24 samples, 1.03%)</title><rect x="937.0" y="387.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="940.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.09%)</title><rect x="937.0" y="371.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="940.0" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.09%)</title><rect x="937.0" y="355.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="940.0" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.09%)</title><rect x="937.0" y="339.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="940.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.73%)</title><rect x="938.0" y="371.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="941.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.04%)</title><rect x="938.6" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="941.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.04%)</title><rect x="938.6" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="941.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.04%)</title><rect x="938.6" y="323.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="941.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (15 samples, 0.65%)</title><rect x="939.1" y="355.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="942.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (15 samples, 0.65%)</title><rect x="939.1" y="339.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="942.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (15 samples, 0.65%)</title><rect x="939.1" y="323.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="942.1" y="334.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.04%)</title><rect x="939.1" y="307.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="942.1" y="318.0"></text>
</g>
<g>
<title>__libc_pread64 (13 samples, 0.56%)</title><rect x="939.6" y="307.0" width="6.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="942.6" y="318.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.04%)</title><rect x="946.2" y="307.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="949.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.09%)</title><rect x="946.7" y="371.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (3 samples, 0.13%)</title><rect x="947.7" y="371.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="950.7" y="382.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.04%)</title><rect x="949.2" y="467.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="952.2" y="478.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.04%)</title><rect x="949.2" y="451.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="952.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.04%)</title><rect x="949.2" y="435.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="952.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.04%)</title><rect x="949.2" y="419.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="952.2" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="949.2" y="403.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="952.2" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.04%)</title><rect x="949.2" y="387.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="952.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (8 samples, 0.34%)</title><rect x="949.7" y="611.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="952.7" y="622.0"></text>
</g>
<g>
<title>java/util/Collection.stream (8 samples, 0.34%)</title><rect x="949.7" y="595.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="952.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (8 samples, 0.34%)</title><rect x="949.7" y="579.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="952.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (8 samples, 0.34%)</title><rect x="949.7" y="563.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="952.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (8 samples, 0.34%)</title><rect x="949.7" y="547.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="952.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (8 samples, 0.34%)</title><rect x="949.7" y="531.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="952.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (8 samples, 0.34%)</title><rect x="949.7" y="515.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="952.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (8 samples, 0.34%)</title><rect x="949.7" y="499.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="952.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.34%)</title><rect x="949.7" y="483.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="952.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.34%)</title><rect x="949.7" y="467.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="952.7" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.04%)</title><rect x="953.3" y="451.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="956.3" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.04%)</title><rect x="953.3" y="435.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="956.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.proxy (124 samples, 5.34%)</title><rect x="953.8" y="691.0" width="63.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="956.8" y="702.0">ru/mai..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.04%)</title><rect x="954.3" y="675.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="957.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="954.3" y="659.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="957.3" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (122 samples, 5.25%)</title><rect x="954.8" y="675.0" width="62.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="957.8" y="686.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (122 samples, 5.25%)</title><rect x="954.8" y="659.0" width="62.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="957.8" y="670.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (42 samples, 1.81%)</title><rect x="956.3" y="643.0" width="21.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="959.3" y="654.0">o..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.22%)</title><rect x="958.9" y="627.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="958.9" y="611.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="961.9" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.17%)</title><rect x="959.4" y="611.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.4" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.17%)</title><rect x="959.4" y="595.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="962.4" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.17%)</title><rect x="959.4" y="579.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.4" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (2 samples, 0.09%)</title><rect x="960.4" y="563.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.4" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="960.9" y="547.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="963.9" y="558.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.04%)</title><rect x="960.9" y="531.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="963.9" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.04%)</title><rect x="960.9" y="515.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.9" y="526.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.04%)</title><rect x="960.9" y="499.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="963.9" y="510.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (31 samples, 1.33%)</title><rect x="961.4" y="627.0" width="15.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="964.4" y="638.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (13 samples, 0.56%)</title><rect x="963.4" y="611.0" width="6.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="966.4" y="622.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="963.4" y="595.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="966.4" y="606.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (12 samples, 0.52%)</title><rect x="964.0" y="595.0" width="6.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="967.0" y="606.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="966.5" y="579.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.5" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="967.0" y="579.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="970.0" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.09%)</title><rect x="967.5" y="579.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="970.5" y="590.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.13%)</title><rect x="968.5" y="579.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="971.5" y="590.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.13%)</title><rect x="968.5" y="563.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="971.5" y="574.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.04%)</title><rect x="970.1" y="611.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="973.1" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.04%)</title><rect x="970.6" y="611.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="973.6" y="622.0"></text>
</g>
<g>
<title>recv (12 samples, 0.52%)</title><rect x="971.1" y="611.0" width="6.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="974.1" y="622.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1 samples, 0.04%)</title><rect x="977.2" y="627.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="980.2" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (26 samples, 1.12%)</title><rect x="977.7" y="643.0" width="13.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="980.7" y="654.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.04%)</title><rect x="978.2" y="627.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="981.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="978.2" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="981.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="978.2" y="595.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="981.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.04%)</title><rect x="978.2" y="579.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="981.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (19 samples, 0.82%)</title><rect x="978.7" y="627.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="981.7" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.39%)</title><rect x="983.8" y="611.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="986.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.34%)</title><rect x="984.3" y="595.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="987.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (5 samples, 0.22%)</title><rect x="988.3" y="627.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="991.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.09%)</title><rect x="989.9" y="611.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="992.9" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.09%)</title><rect x="989.9" y="595.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="992.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (9 samples, 0.39%)</title><rect x="990.9" y="643.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="993.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.04%)</title><rect x="995.4" y="643.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="998.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="995.4" y="627.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="998.4" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="995.4" y="611.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="998.4" y="622.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.04%)</title><rect x="996.0" y="643.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="999.0" y="654.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (11 samples, 0.47%)</title><rect x="996.5" y="643.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="999.5" y="654.0"></text>
</g>
<g>
<title>setsockopt (10 samples, 0.43%)</title><rect x="997.0" y="627.0" width="5.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1000.0" y="638.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (17 samples, 0.73%)</title><rect x="1002.1" y="643.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1005.1" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (4 samples, 0.17%)</title><rect x="1003.1" y="627.0" width="2.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1006.1" y="638.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="1003.1" y="611.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1006.1" y="622.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.09%)</title><rect x="1003.6" y="611.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1006.6" y="622.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.04%)</title><rect x="1004.6" y="611.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1007.6" y="622.0"></text>
</g>
<g>
<title>__send (11 samples, 0.47%)</title><rect x="1005.1" y="627.0" width="5.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1008.1" y="638.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (8 samples, 0.34%)</title><rect x="1010.7" y="643.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1013.7" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="1011.2" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1014.2" y="638.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.04%)</title><rect x="1011.2" y="611.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1014.2" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="1011.2" y="595.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.2" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.04%)</title><rect x="1011.2" y="579.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.2" y="590.0"></text>
</g>
<g>
<title>java/lang/Object.wait (3 samples, 0.13%)</title><rect x="1011.7" y="627.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1014.7" y="638.0"></text>
</g>
<g>
<title>JVM_MonitorWait (2 samples, 0.09%)</title><rect x="1011.7" y="611.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1014.7" y="622.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (2 samples, 0.09%)</title><rect x="1011.7" y="595.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1014.7" y="606.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="1011.7" y="579.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1014.7" y="590.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.04%)</title><rect x="1012.2" y="579.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1015.2" y="590.0"></text>
</g>
<g>
<title>ObjectMonitor::ReenterI(Thread*, ObjectWaiter*) (1 samples, 0.04%)</title><rect x="1012.2" y="563.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1012.7" y="611.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1015.7" y="622.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.04%)</title><rect x="1012.7" y="595.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1015.7" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1013.2" y="627.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1016.2" y="638.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (2 samples, 0.09%)</title><rect x="1013.7" y="627.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1016.7" y="638.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (4 samples, 0.17%)</title><rect x="1014.8" y="643.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1017.8" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (1 samples, 0.04%)</title><rect x="1016.3" y="627.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1019.3" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (1 samples, 0.04%)</title><rect x="1016.3" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1019.3" y="622.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.04%)</title><rect x="1016.3" y="595.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1019.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (15 samples, 0.65%)</title><rect x="1016.8" y="707.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1019.8" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15 samples, 0.65%)</title><rect x="1016.8" y="691.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1019.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.13%)</title><rect x="1017.3" y="675.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1020.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.13%)</title><rect x="1017.3" y="659.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1020.3" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.13%)</title><rect x="1017.3" y="643.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1020.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1017.3" y="627.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1020.3" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="1017.3" y="611.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.3" y="622.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.09%)</title><rect x="1017.8" y="627.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1020.8" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (11 samples, 0.47%)</title><rect x="1018.8" y="675.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1021.8" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.13%)</title><rect x="1018.8" y="659.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1021.8" y="670.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.04%)</title><rect x="1019.8" y="643.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1022.8" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.04%)</title><rect x="1019.8" y="627.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1022.8" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.04%)</title><rect x="1019.8" y="611.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1022.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.04%)</title><rect x="1019.8" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1022.8" y="606.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="1019.8" y="579.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1022.8" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.34%)</title><rect x="1020.3" y="659.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1023.3" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.34%)</title><rect x="1020.3" y="643.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1023.3" y="654.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.04%)</title><rect x="1020.8" y="627.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1023.8" y="638.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 0.26%)</title><rect x="1021.4" y="627.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1024.4" y="638.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (6 samples, 0.26%)</title><rect x="1021.4" y="611.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1024.4" y="622.0"></text>
</g>
<g>
<title>__send (3 samples, 0.13%)</title><rect x="1021.9" y="595.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1024.9" y="606.0"></text>
</g>
<g>
<title>send@plt (2 samples, 0.09%)</title><rect x="1023.4" y="595.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1026.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.mergeGetResponses (10 samples, 0.43%)</title><rect x="1024.4" y="707.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1027.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (2 samples, 0.09%)</title><rect x="1026.4" y="691.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1029.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (2 samples, 0.09%)</title><rect x="1026.4" y="675.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1029.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.09%)</title><rect x="1026.4" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1029.4" y="670.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (2 samples, 0.09%)</title><rect x="1026.4" y="643.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1029.4" y="654.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkIndex (2 samples, 0.09%)</title><rect x="1026.4" y="627.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1029.4" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.17%)</title><rect x="1027.5" y="691.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1030.5" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.13%)</title><rect x="1028.0" y="675.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1031.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.13%)</title><rect x="1028.0" y="659.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1031.0" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (7 samples, 0.30%)</title><rect x="1029.5" y="787.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1032.5" y="798.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (7 samples, 0.30%)</title><rect x="1029.5" y="771.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1032.5" y="782.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$158/807025047.run (7 samples, 0.30%)</title><rect x="1029.5" y="755.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1032.5" y="766.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (7 samples, 0.30%)</title><rect x="1029.5" y="739.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1032.5" y="750.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (7 samples, 0.30%)</title><rect x="1029.5" y="723.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1032.5" y="734.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (7 samples, 0.30%)</title><rect x="1029.5" y="707.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1032.5" y="718.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (1 samples, 0.04%)</title><rect x="1029.5" y="691.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1032.5" y="702.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (1 samples, 0.04%)</title><rect x="1029.5" y="675.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1032.5" y="686.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (1 samples, 0.04%)</title><rect x="1029.5" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1032.5" y="670.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (1 samples, 0.04%)</title><rect x="1029.5" y="643.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1032.5" y="654.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (1 samples, 0.04%)</title><rect x="1029.5" y="627.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1032.5" y="638.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead (1 samples, 0.04%)</title><rect x="1029.5" y="611.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1032.5" y="622.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead0 (1 samples, 0.04%)</title><rect x="1029.5" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1032.5" y="606.0"></text>
</g>
<g>
<title>Java_java_net_SocketInputStream_socketRead0 (1 samples, 0.04%)</title><rect x="1029.5" y="579.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1032.5" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1029.5" y="563.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1032.5" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (6 samples, 0.26%)</title><rect x="1030.0" y="691.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1033.0" y="702.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (6 samples, 0.26%)</title><rect x="1030.0" y="675.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1033.0" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (6 samples, 0.26%)</title><rect x="1030.0" y="659.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1033.0" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (6 samples, 0.26%)</title><rect x="1030.0" y="643.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1033.0" y="654.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (6 samples, 0.26%)</title><rect x="1030.0" y="627.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1033.0" y="638.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.13%)</title><rect x="1030.0" y="611.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1033.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.13%)</title><rect x="1030.0" y="595.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1033.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor40.invoke (3 samples, 0.13%)</title><rect x="1030.0" y="579.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1033.0" y="590.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (3 samples, 0.13%)</title><rect x="1030.0" y="563.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1033.0" y="574.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (2 samples, 0.09%)</title><rect x="1030.0" y="547.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1033.0" y="558.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (2 samples, 0.09%)</title><rect x="1030.0" y="531.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1033.0" y="542.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (2 samples, 0.09%)</title><rect x="1030.0" y="515.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1033.0" y="526.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (2 samples, 0.09%)</title><rect x="1030.0" y="499.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1033.0" y="510.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (2 samples, 0.09%)</title><rect x="1030.0" y="483.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1033.0" y="494.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (2 samples, 0.09%)</title><rect x="1030.0" y="467.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1033.0" y="478.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (2 samples, 0.09%)</title><rect x="1030.0" y="451.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1033.0" y="462.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (2 samples, 0.09%)</title><rect x="1030.0" y="435.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1033.0" y="446.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (2 samples, 0.09%)</title><rect x="1030.0" y="419.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1033.0" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (2 samples, 0.09%)</title><rect x="1030.0" y="403.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1033.0" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (2 samples, 0.09%)</title><rect x="1030.0" y="387.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1033.0" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (2 samples, 0.09%)</title><rect x="1030.0" y="371.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1033.0" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (2 samples, 0.09%)</title><rect x="1030.0" y="355.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1033.0" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1 samples, 0.04%)</title><rect x="1030.0" y="339.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1033.0" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (1 samples, 0.04%)</title><rect x="1030.0" y="323.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1033.0" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1 samples, 0.04%)</title><rect x="1030.0" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1033.0" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1 samples, 0.04%)</title><rect x="1030.0" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1033.0" y="302.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1030.0" y="275.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1033.0" y="286.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1030.0" y="259.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.0" y="270.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeType.getType (1 samples, 0.04%)</title><rect x="1030.0" y="243.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1033.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.04%)</title><rect x="1030.0" y="227.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1033.0" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.04%)</title><rect x="1030.0" y="211.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1033.0" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.04%)</title><rect x="1030.0" y="195.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1033.0" y="206.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (1 samples, 0.04%)</title><rect x="1030.5" y="339.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1033.5" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.04%)</title><rect x="1030.5" y="323.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1033.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.04%)</title><rect x="1030.5" y="307.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1033.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor6.invoke (1 samples, 0.04%)</title><rect x="1030.5" y="291.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1033.5" y="302.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (1 samples, 0.04%)</title><rect x="1030.5" y="275.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1033.5" y="286.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.04%)</title><rect x="1030.5" y="259.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1033.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.04%)</title><rect x="1030.5" y="243.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.5" y="254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor48.invoke (1 samples, 0.04%)</title><rect x="1030.5" y="227.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1033.5" y="238.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (1 samples, 0.04%)</title><rect x="1030.5" y="211.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1033.5" y="222.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (1 samples, 0.04%)</title><rect x="1030.5" y="195.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1033.5" y="206.0"></text>
</g>
<g>
<title>jmm_GetThreadInfo (1 samples, 0.04%)</title><rect x="1030.5" y="179.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1033.5" y="190.0"></text>
</g>
<g>
<title>Management::create_thread_info_instance(ThreadSnapshot*, Thread*) (1 samples, 0.04%)</title><rect x="1030.5" y="163.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1033.5" y="174.0"></text>
</g>
<g>
<title>JavaCalls::construct_new_instance(InstanceKlass*, Symbol*, JavaCallArguments*, Thread*) (1 samples, 0.04%)</title><rect x="1030.5" y="147.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1033.5" y="158.0"></text>
</g>
<g>
<title>JavaCalls::call_special(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*) (1 samples, 0.04%)</title><rect x="1030.5" y="131.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1033.5" y="142.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, LinkInfo const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="1030.5" y="115.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1033.5" y="126.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="1030.5" y="99.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1033.5" y="110.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (1 samples, 0.04%)</title><rect x="1031.0" y="547.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1034.0" y="558.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (1 samples, 0.04%)</title><rect x="1031.0" y="531.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1034.0" y="542.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.get (1 samples, 0.04%)</title><rect x="1031.0" y="515.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1034.0" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.04%)</title><rect x="1031.0" y="499.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1034.0" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.04%)</title><rect x="1031.0" y="483.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.0" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.04%)</title><rect x="1031.0" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1034.0" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (1 samples, 0.04%)</title><rect x="1031.0" y="451.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1034.0" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.04%)</title><rect x="1031.0" y="435.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1034.0" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.04%)</title><rect x="1031.0" y="419.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1034.0" y="430.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.resolveClass (1 samples, 0.04%)</title><rect x="1031.0" y="403.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.0" y="414.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.latestUserDefinedLoader (1 samples, 0.04%)</title><rect x="1031.0" y="387.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.latestUserDefinedLoader (1 samples, 0.04%)</title><rect x="1031.0" y="371.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.0" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.latestUserDefinedLoader0 (1 samples, 0.04%)</title><rect x="1031.0" y="355.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1034.0" y="366.0"></text>
</g>
<g>
<title>JVM_LatestUserDefinedLoader (1 samples, 0.04%)</title><rect x="1031.0" y="339.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1034.0" y="350.0"></text>
</g>
<g>
<title>vframeStreamCommon::skip_reflection_related_frames() (1 samples, 0.04%)</title><rect x="1031.0" y="323.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.0" y="334.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (2 samples, 0.09%)</title><rect x="1031.5" y="611.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1034.5" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 0.09%)</title><rect x="1031.5" y="595.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1034.5" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.09%)</title><rect x="1031.5" y="579.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1034.5" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.09%)</title><rect x="1031.5" y="563.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.5" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.09%)</title><rect x="1031.5" y="547.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1034.5" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.09%)</title><rect x="1031.5" y="531.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1034.5" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.09%)</title><rect x="1031.5" y="515.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1034.5" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.09%)</title><rect x="1031.5" y="499.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1034.5" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.09%)</title><rect x="1031.5" y="483.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1034.5" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.09%)</title><rect x="1031.5" y="467.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1034.5" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.09%)</title><rect x="1031.5" y="451.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1034.5" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (2 samples, 0.09%)</title><rect x="1031.5" y="435.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.5" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.09%)</title><rect x="1031.5" y="419.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1034.5" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.09%)</title><rect x="1031.5" y="403.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1034.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor35.invoke (2 samples, 0.09%)</title><rect x="1031.5" y="387.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1034.5" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (2 samples, 0.09%)</title><rect x="1031.5" y="371.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1034.5" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 0.09%)</title><rect x="1031.5" y="355.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1034.5" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.09%)</title><rect x="1031.5" y="339.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1034.5" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.04%)</title><rect x="1031.5" y="323.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1034.5" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.04%)</title><rect x="1031.5" y="307.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1034.5" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.04%)</title><rect x="1031.5" y="291.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1034.5" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.04%)</title><rect x="1031.5" y="275.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1034.5" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.04%)</title><rect x="1031.5" y="259.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1034.5" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.04%)</title><rect x="1031.5" y="243.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.5" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.04%)</title><rect x="1031.5" y="227.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1034.5" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.04%)</title><rect x="1031.5" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1034.5" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.04%)</title><rect x="1031.5" y="195.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1034.5" y="206.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.04%)</title><rect x="1031.5" y="179.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.5" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.04%)</title><rect x="1031.5" y="163.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1034.5" y="174.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor35.invoke (1 samples, 0.04%)</title><rect x="1031.5" y="147.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1034.5" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (1 samples, 0.04%)</title><rect x="1031.5" y="131.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1034.5" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.04%)</title><rect x="1031.5" y="115.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1034.5" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.04%)</title><rect x="1031.5" y="99.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1034.5" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode (1 samples, 0.04%)</title><rect x="1031.5" y="83.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1034.5" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (1 samples, 0.04%)</title><rect x="1031.5" y="67.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1034.5" y="78.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (1 samples, 0.04%)</title><rect x="1031.5" y="51.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.5" y="62.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1 samples, 0.04%)</title><rect x="1031.5" y="35.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1034.5" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.04%)</title><rect x="1032.0" y="323.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1035.0" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.04%)</title><rect x="1032.0" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1035.0" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.lookup (1 samples, 0.04%)</title><rect x="1032.0" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1035.0" y="302.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (1 samples, 0.04%)</title><rect x="1032.5" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1035.5" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (1 samples, 0.04%)</title><rect x="1032.5" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1035.5" y="606.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (287 samples, 12.35%)</title><rect x="1033.0" y="835.0" width="145.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1036.0" y="846.0">one/nio/server/Sel..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1036.1" y="819.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1039.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1036.1" y="803.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1039.1" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="1036.1" y="787.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.1" y="798.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="1036.6" y="819.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1039.6" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.04%)</title><rect x="1037.1" y="819.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1040.1" y="830.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.34%)</title><rect x="1037.6" y="819.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1040.6" y="830.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (7 samples, 0.30%)</title><rect x="1038.1" y="803.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1041.1" y="814.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (7 samples, 0.30%)</title><rect x="1038.1" y="787.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1041.1" y="798.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (64 samples, 2.76%)</title><rect x="1041.7" y="819.0" width="32.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1044.7" y="830.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (3 samples, 0.13%)</title><rect x="1043.7" y="803.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1046.7" y="814.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.04%)</title><rect x="1044.2" y="787.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1047.2" y="798.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (1 samples, 0.04%)</title><rect x="1044.7" y="787.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1047.7" y="798.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (57 samples, 2.45%)</title><rect x="1045.2" y="803.0" width="29.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1048.2" y="814.0">on..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.17%)</title><rect x="1050.8" y="787.0" width="2.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1053.8" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.09%)</title><rect x="1052.8" y="787.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1055.8" y="798.0"></text>
</g>
<g>
<title>clock_gettime (9 samples, 0.39%)</title><rect x="1053.9" y="787.0" width="4.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1056.9" y="798.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.09%)</title><rect x="1057.4" y="771.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1060.4" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="1057.9" y="755.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1060.9" y="766.0"></text>
</g>
<g>
<title>epoll_wait (30 samples, 1.29%)</title><rect x="1058.4" y="787.0" width="15.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1061.4" y="798.0"></text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.04%)</title><rect x="1073.7" y="787.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1076.7" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (204 samples, 8.78%)</title><rect x="1074.2" y="819.0" width="103.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1077.2" y="830.0">one/nio/net/..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="1075.2" y="803.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1078.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (201 samples, 8.65%)</title><rect x="1075.7" y="803.0" width="102.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1078.7" y="814.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (144 samples, 6.20%)</title><rect x="1076.2" y="787.0" width="73.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1079.2" y="798.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (116 samples, 4.99%)</title><rect x="1079.3" y="771.0" width="58.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1082.3" y="782.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (115 samples, 4.95%)</title><rect x="1079.8" y="755.0" width="58.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1082.8" y="766.0">one/ni..</text>
</g>
<g>
<title>RequestHandler3_handleRequest.handleRequest (106 samples, 4.56%)</title><rect x="1079.8" y="739.0" width="53.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1082.8" y="750.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.09%)</title><rect x="1079.8" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1082.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6 samples, 0.26%)</title><rect x="1080.8" y="723.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1083.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.26%)</title><rect x="1080.8" y="707.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1083.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="1081.3" y="691.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1084.3" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.04%)</title><rect x="1081.3" y="675.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1084.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="1081.8" y="691.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1084.8" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="1081.8" y="675.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1084.8" y="686.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="1081.8" y="659.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1084.8" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.09%)</title><rect x="1082.3" y="691.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1085.3" y="702.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="1083.3" y="691.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1086.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="1083.3" y="675.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1086.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="1083.3" y="659.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.3" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.04%)</title><rect x="1083.3" y="643.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1086.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.handleRequest (98 samples, 4.22%)</title><rect x="1083.8" y="723.0" width="49.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1086.8" y="734.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.handleRequest (98 samples, 4.22%)</title><rect x="1083.8" y="707.0" width="49.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1086.8" y="718.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/276711299.linkToTargetMethod (2 samples, 0.09%)</title><rect x="1084.9" y="691.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1087.9" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.09%)</title><rect x="1084.9" y="675.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1087.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$72/339857875.get$Lambda (2 samples, 0.09%)</title><rect x="1084.9" y="659.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1087.9" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.executeTask (2 samples, 0.09%)</title><rect x="1084.9" y="643.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1087.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.executeTask (94 samples, 4.05%)</title><rect x="1085.9" y="691.0" width="47.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1088.9" y="702.0">ru/m..</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (1 samples, 0.04%)</title><rect x="1085.9" y="675.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1088.9" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="1085.9" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.9" y="670.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.04%)</title><rect x="1085.9" y="643.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1088.9" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="1085.9" y="627.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.9" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="1085.9" y="611.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.9" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (32 samples, 1.38%)</title><rect x="1086.4" y="675.0" width="16.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1089.4" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (31 samples, 1.33%)</title><rect x="1086.9" y="659.0" width="15.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1089.9" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (30 samples, 1.29%)</title><rect x="1087.4" y="643.0" width="15.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1090.4" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (17 samples, 0.73%)</title><rect x="1087.4" y="627.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1090.4" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (17 samples, 0.73%)</title><rect x="1087.4" y="611.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1090.4" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (17 samples, 0.73%)</title><rect x="1087.4" y="595.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1090.4" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (17 samples, 0.73%)</title><rect x="1087.4" y="579.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1090.4" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (17 samples, 0.73%)</title><rect x="1087.4" y="563.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1090.4" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (17 samples, 0.73%)</title><rect x="1087.4" y="547.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1090.4" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (8 samples, 0.34%)</title><rect x="1087.4" y="531.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1090.4" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (4 samples, 0.17%)</title><rect x="1087.9" y="515.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1090.9" y="526.0"></text>
</g>
<g>
<title>java/io/FilterOutputStream.write (4 samples, 0.17%)</title><rect x="1087.9" y="499.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1090.9" y="510.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (4 samples, 0.17%)</title><rect x="1087.9" y="483.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1090.9" y="494.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (4 samples, 0.17%)</title><rect x="1087.9" y="467.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1090.9" y="478.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (4 samples, 0.17%)</title><rect x="1087.9" y="451.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1090.9" y="462.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (4 samples, 0.17%)</title><rect x="1087.9" y="435.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1090.9" y="446.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (4 samples, 0.17%)</title><rect x="1087.9" y="419.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1090.9" y="430.0"></text>
</g>
<g>
<title>writeBytes (4 samples, 0.17%)</title><rect x="1087.9" y="403.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1090.9" y="414.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.09%)</title><rect x="1087.9" y="387.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1090.9" y="398.0"></text>
</g>
<g>
<title>jni_GetObjectField (2 samples, 0.09%)</title><rect x="1088.9" y="387.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1091.9" y="398.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.04%)</title><rect x="1089.4" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.09%)</title><rect x="1089.9" y="515.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1092.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.09%)</title><rect x="1089.9" y="499.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1092.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.04%)</title><rect x="1090.4" y="483.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1093.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="1090.4" y="467.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1093.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="1090.4" y="451.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1093.4" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="1090.4" y="435.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1093.4" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.04%)</title><rect x="1090.4" y="419.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1093.4" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="1090.4" y="403.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.4" y="414.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="1090.4" y="387.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1093.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.04%)</title><rect x="1090.9" y="515.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1093.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.04%)</title><rect x="1090.9" y="499.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1093.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.04%)</title><rect x="1090.9" y="483.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1093.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.04%)</title><rect x="1090.9" y="467.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.9" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.04%)</title><rect x="1090.9" y="451.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1093.9" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.04%)</title><rect x="1090.9" y="435.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1093.9" y="446.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.04%)</title><rect x="1090.9" y="419.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.9" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (9 samples, 0.39%)</title><rect x="1091.5" y="531.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1094.5" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (9 samples, 0.39%)</title><rect x="1091.5" y="515.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1094.5" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (9 samples, 0.39%)</title><rect x="1091.5" y="499.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1094.5" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.convert (8 samples, 0.34%)</title><rect x="1091.5" y="483.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1094.5" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.throwableProxyToString (8 samples, 0.34%)</title><rect x="1091.5" y="467.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1094.5" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.recursiveAppend (8 samples, 0.34%)</title><rect x="1091.5" y="451.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1094.5" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.subjoinSTEPArray (8 samples, 0.34%)</title><rect x="1091.5" y="435.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1094.5" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/StackTraceElementProxy.toString (8 samples, 0.34%)</title><rect x="1091.5" y="419.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1094.5" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/StackTraceElementProxy.getSTEAsString (7 samples, 0.30%)</title><rect x="1091.5" y="403.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1094.5" y="414.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.toString (3 samples, 0.13%)</title><rect x="1092.0" y="387.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1095.0" y="398.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.09%)</title><rect x="1092.5" y="371.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1095.5" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.09%)</title><rect x="1092.5" y="355.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1095.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.13%)</title><rect x="1093.5" y="387.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1096.5" y="398.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.13%)</title><rect x="1093.5" y="371.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1096.5" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (3 samples, 0.13%)</title><rect x="1093.5" y="355.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1096.5" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1094.0" y="339.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1097.0" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1094.5" y="339.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1097.5" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1095.0" y="403.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1098.0" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.04%)</title><rect x="1095.5" y="483.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1098.5" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="1095.5" y="467.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1098.5" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="1095.5" y="451.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1098.5" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (13 samples, 0.56%)</title><rect x="1096.0" y="627.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1099.0" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/ThrowableProxy.&lt;init&gt; (11 samples, 0.47%)</title><rect x="1097.0" y="611.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1100.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Throwable.getStackTrace (11 samples, 0.47%)</title><rect x="1097.0" y="595.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1100.0" y="606.0"></text>
</g>
<g>
<title>java/lang/Throwable.getOurStackTrace (11 samples, 0.47%)</title><rect x="1097.0" y="579.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1100.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.of (11 samples, 0.47%)</title><rect x="1097.0" y="563.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1100.0" y="574.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.computeFormat (1 samples, 0.04%)</title><rect x="1097.0" y="547.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1100.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.initStackTraceElements (10 samples, 0.43%)</title><rect x="1097.6" y="547.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1100.6" y="558.0"></text>
</g>
<g>
<title>JVM_InitStackTraceElementArray (10 samples, 0.43%)</title><rect x="1097.6" y="531.0" width="5.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1100.6" y="542.0"></text>
</g>
<g>
<title>java_lang_Throwable::get_stack_trace_elements(Handle, objArrayHandle, Thread*) (10 samples, 0.43%)</title><rect x="1097.6" y="515.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.6" y="526.0"></text>
</g>
<g>
<title>java_lang_StackTraceElement::fill_in(Handle, InstanceKlass*, methodHandle const&amp;, int, int, Symbol*, Thread*) (10 samples, 0.43%)</title><rect x="1097.6" y="499.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.6" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 573558ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (1 samples, 0.04%)</title><rect x="1097.6" y="483.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.6" y="494.0"></text>
</g>
<g>
<title>Method::line_number_from_bci(int) const (3 samples, 0.13%)</title><rect x="1098.1" y="483.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.1" y="494.0"></text>
</g>
<g>
<title>CompressedReadStream::read_signed_int() (1 samples, 0.04%)</title><rect x="1099.1" y="467.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.1" y="478.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (6 samples, 0.26%)</title><rect x="1099.6" y="483.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.6" y="494.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (4 samples, 0.17%)</title><rect x="1099.6" y="467.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.6" y="478.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short*, int, unsigned long) (3 samples, 0.13%)</title><rect x="1100.1" y="451.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.1" y="462.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;565366ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 565366ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.04%)</title><rect x="1101.1" y="435.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.1" y="446.0"></text>
</g>
<g>
<title>Symbol::as_unicode(int&amp;) const (2 samples, 0.09%)</title><rect x="1101.6" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1104.6" y="478.0"></text>
</g>
<g>
<title>UTF8::unicode_length(char const*, int, bool&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="1101.6" y="451.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.6" y="462.0"></text>
</g>
<g>
<title>void UTF8::convert_to_unicode&lt;unsigned short&gt;(char const*, unsigned short*, int) (1 samples, 0.04%)</title><rect x="1102.1" y="451.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (58 samples, 2.50%)</title><rect x="1102.6" y="675.0" width="29.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1105.6" y="686.0">ja..</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (2 samples, 0.09%)</title><rect x="1103.6" y="659.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.6" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_nmethod(void*) (1 samples, 0.04%)</title><rect x="1103.6" y="643.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.6" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (1 samples, 0.04%)</title><rect x="1104.2" y="643.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.2" y="654.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.04%)</title><rect x="1104.2" y="627.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.2" y="638.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.04%)</title><rect x="1104.2" y="611.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (22 samples, 0.95%)</title><rect x="1104.7" y="659.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1107.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (7 samples, 0.30%)</title><rect x="1104.7" y="643.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1107.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.04%)</title><rect x="1107.7" y="627.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1110.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.04%)</title><rect x="1107.7" y="611.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1110.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.04%)</title><rect x="1107.7" y="595.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1110.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.09%)</title><rect x="1108.2" y="643.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1111.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.09%)</title><rect x="1108.2" y="627.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1111.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.04%)</title><rect x="1108.7" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1111.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="1108.7" y="595.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1111.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="1108.7" y="579.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1111.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="1108.7" y="563.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1111.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1108.7" y="547.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1111.7" y="558.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.04%)</title><rect x="1108.7" y="531.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1111.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 0.56%)</title><rect x="1109.2" y="643.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1112.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.56%)</title><rect x="1109.2" y="627.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1112.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.56%)</title><rect x="1109.2" y="611.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1112.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 0.56%)</title><rect x="1109.2" y="595.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1112.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 0.56%)</title><rect x="1109.2" y="579.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1112.2" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.09%)</title><rect x="1109.2" y="563.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.2" y="574.0"></text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 0.39%)</title><rect x="1110.2" y="563.0" width="4.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1113.2" y="574.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="1110.8" y="547.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.8" y="558.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.04%)</title><rect x="1111.3" y="547.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.3" y="558.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="1111.8" y="547.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.8" y="558.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.09%)</title><rect x="1112.3" y="547.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.3" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1113.3" y="547.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1116.3" y="558.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.04%)</title><rect x="1113.8" y="547.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.8" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1114.3" y="547.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1117.3" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.09%)</title><rect x="1114.8" y="563.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1117.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (23 samples, 0.99%)</title><rect x="1115.8" y="659.0" width="11.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1118.8" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.start (11 samples, 0.47%)</title><rect x="1115.8" y="643.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1118.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.start0 (11 samples, 0.47%)</title><rect x="1115.8" y="627.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1118.8" y="638.0"></text>
</g>
<g>
<title>JVM_StartThread (9 samples, 0.39%)</title><rect x="1115.8" y="611.0" width="4.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1118.8" y="622.0"></text>
</g>
<g>
<title>JavaThread::JavaThread(void (*)(JavaThread*, Thread*), unsigned long) (1 samples, 0.04%)</title><rect x="1115.8" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.8" y="606.0"></text>
</g>
<g>
<title>HandshakeState::HandshakeState() (1 samples, 0.04%)</title><rect x="1115.8" y="579.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.8" y="590.0"></text>
</g>
<g>
<title>__errno_location (1 samples, 0.04%)</title><rect x="1115.8" y="563.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1118.8" y="574.0"></text>
</g>
<g>
<title>JavaThread::prepare(_jobject*, ThreadPriority) (5 samples, 0.22%)</title><rect x="1116.3" y="595.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.3" y="606.0"></text>
</g>
<g>
<title>ThreadsSMRSupport::add_thread(JavaThread*) (5 samples, 0.22%)</title><rect x="1116.3" y="579.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.3" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="1116.9" y="563.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1119.9" y="574.0"></text>
</g>
<g>
<title>ThreadsSMRSupport::free_list(ThreadsList*) (3 samples, 0.13%)</title><rect x="1117.4" y="563.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.4" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="1118.9" y="595.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1121.9" y="606.0"></text>
</g>
<g>
<title>os::create_thread(Thread*, os::ThreadType, unsigned long) (2 samples, 0.09%)</title><rect x="1119.4" y="595.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.4" y="606.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1119.4" y="579.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.4" y="590.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="1119.9" y="579.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.9" y="590.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="1119.9" y="563.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.9" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1119.9" y="547.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1122.9" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1120.4" y="611.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1123.4" y="622.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="1120.4" y="595.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1123.4" y="606.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="1120.4" y="579.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1123.4" y="590.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.04%)</title><rect x="1120.9" y="611.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1123.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.&lt;init&gt; (12 samples, 0.52%)</title><rect x="1121.4" y="643.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1124.4" y="654.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder$1.newThread (12 samples, 0.52%)</title><rect x="1121.4" y="627.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1124.4" y="638.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder.access$000 (5 samples, 0.22%)</title><rect x="1121.4" y="611.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1124.4" y="622.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder.format (5 samples, 0.22%)</title><rect x="1121.4" y="595.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1124.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.format (5 samples, 0.22%)</title><rect x="1121.4" y="579.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1124.4" y="590.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1121.4" y="563.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1124.4" y="574.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1121.4" y="547.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1124.4" y="558.0"></text>
</g>
<g>
<title>java/util/Formatter.getZero (1 samples, 0.04%)</title><rect x="1121.4" y="531.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1124.4" y="542.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.getInstance (1 samples, 0.04%)</title><rect x="1121.4" y="515.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1124.4" y="526.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DecimalFormatSymbolsProviderImpl.getInstance (1 samples, 0.04%)</title><rect x="1121.4" y="499.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1124.4" y="510.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1121.4" y="483.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1124.4" y="494.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.initialize (1 samples, 0.04%)</title><rect x="1121.4" y="467.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1124.4" y="478.0"></text>
</g>
<g>
<title>sun/util/locale/provider/JRELocaleProviderAdapter.getLocaleResources (1 samples, 0.04%)</title><rect x="1121.4" y="451.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1124.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.04%)</title><rect x="1121.4" y="435.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1124.4" y="446.0"></text>
</g>
<g>
<title>java/util/Locale.equals (1 samples, 0.04%)</title><rect x="1121.4" y="419.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1124.4" y="430.0"></text>
</g>
<g>
<title>java/util/Formatter$FixedString.print (1 samples, 0.04%)</title><rect x="1121.4" y="403.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1124.4" y="414.0"></text>
</g>
<g>
<title>java/util/Formatter.format (4 samples, 0.17%)</title><rect x="1121.9" y="563.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1124.9" y="574.0"></text>
</g>
<g>
<title>java/util/Formatter.format (4 samples, 0.17%)</title><rect x="1121.9" y="547.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1124.9" y="558.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.04%)</title><rect x="1121.9" y="531.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1124.9" y="542.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printInteger (1 samples, 0.04%)</title><rect x="1121.9" y="515.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1124.9" y="526.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.04%)</title><rect x="1121.9" y="499.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1124.9" y="510.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.localizedMagnitude (1 samples, 0.04%)</title><rect x="1121.9" y="483.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1124.9" y="494.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (3 samples, 0.13%)</title><rect x="1122.4" y="531.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1125.4" y="542.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.find (3 samples, 0.13%)</title><rect x="1122.4" y="515.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1125.4" y="526.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (3 samples, 0.13%)</title><rect x="1122.4" y="499.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.4" y="510.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Start.match (3 samples, 0.13%)</title><rect x="1122.4" y="483.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.4" y="494.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (3 samples, 0.13%)</title><rect x="1122.4" y="467.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1125.4" y="478.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (3 samples, 0.13%)</title><rect x="1122.4" y="451.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1125.4" y="462.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (2 samples, 0.09%)</title><rect x="1122.4" y="435.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.4" y="446.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (2 samples, 0.09%)</title><rect x="1122.4" y="419.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1125.4" y="430.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (2 samples, 0.09%)</title><rect x="1122.4" y="403.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1125.4" y="414.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (2 samples, 0.09%)</title><rect x="1122.4" y="387.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1125.4" y="398.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.04%)</title><rect x="1123.5" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1126.5" y="446.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (1 samples, 0.04%)</title><rect x="1123.5" y="419.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1126.5" y="430.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (1 samples, 0.04%)</title><rect x="1123.5" y="403.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1126.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DefaultThreadFactory.newThread (7 samples, 0.30%)</title><rect x="1124.0" y="611.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1127.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.04%)</title><rect x="1124.0" y="595.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1127.0" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (1 samples, 0.04%)</title><rect x="1124.0" y="579.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1127.0" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (6 samples, 0.26%)</title><rect x="1124.5" y="595.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1127.5" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (6 samples, 0.26%)</title><rect x="1124.5" y="579.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1127.5" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.nextThreadID (1 samples, 0.04%)</title><rect x="1125.0" y="563.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1128.0" y="574.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (4 samples, 0.17%)</title><rect x="1125.5" y="563.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1128.5" y="574.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (4 samples, 0.17%)</title><rect x="1125.5" y="547.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1128.5" y="558.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.04%)</title><rect x="1125.5" y="531.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.5" y="542.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (3 samples, 0.13%)</title><rect x="1126.0" y="531.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1129.0" y="542.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.04%)</title><rect x="1127.0" y="515.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.reject (9 samples, 0.39%)</title><rect x="1127.5" y="659.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1130.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$AbortPolicy.rejectedExecution (9 samples, 0.39%)</title><rect x="1127.5" y="643.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1130.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/RejectedExecutionException.&lt;init&gt; (8 samples, 0.34%)</title><rect x="1127.5" y="627.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1130.5" y="638.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (8 samples, 0.34%)</title><rect x="1127.5" y="611.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1130.5" y="622.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (8 samples, 0.34%)</title><rect x="1127.5" y="595.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1130.5" y="606.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (8 samples, 0.34%)</title><rect x="1127.5" y="579.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1130.5" y="590.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (8 samples, 0.34%)</title><rect x="1127.5" y="563.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1130.5" y="574.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (8 samples, 0.34%)</title><rect x="1127.5" y="547.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1130.5" y="558.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (8 samples, 0.34%)</title><rect x="1127.5" y="531.0" width="4.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1130.5" y="542.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (8 samples, 0.34%)</title><rect x="1127.5" y="515.0" width="4.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1130.5" y="526.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (8 samples, 0.34%)</title><rect x="1127.5" y="499.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.5" y="510.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (8 samples, 0.34%)</title><rect x="1127.5" y="483.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.5" y="494.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (3 samples, 0.13%)</title><rect x="1128.5" y="467.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.5" y="478.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (1 samples, 0.04%)</title><rect x="1128.5" y="451.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.5" y="462.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (2 samples, 0.09%)</title><rect x="1129.0" y="451.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.0" y="462.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (1 samples, 0.04%)</title><rect x="1129.0" y="435.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.0" y="446.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.04%)</title><rect x="1129.6" y="435.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.6" y="446.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (1 samples, 0.04%)</title><rect x="1130.1" y="467.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.1" y="478.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.09%)</title><rect x="1130.6" y="467.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.6" y="478.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.09%)</title><rect x="1130.6" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.6" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.09%)</title><rect x="1130.6" y="435.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.6" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.09%)</title><rect x="1130.6" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.toString (1 samples, 0.04%)</title><rect x="1131.6" y="627.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1134.6" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.04%)</title><rect x="1131.6" y="611.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1134.6" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.04%)</title><rect x="1131.6" y="595.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1134.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.04%)</title><rect x="1131.6" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1134.6" y="590.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="1131.6" y="563.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1134.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendErrorResponse (3 samples, 0.13%)</title><rect x="1132.1" y="675.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1135.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.13%)</title><rect x="1132.1" y="659.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1135.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (3 samples, 0.13%)</title><rect x="1132.1" y="643.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1135.1" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 0.13%)</title><rect x="1132.1" y="627.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1135.1" y="638.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 0.13%)</title><rect x="1132.1" y="611.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1135.1" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (3 samples, 0.13%)</title><rect x="1132.1" y="595.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1135.1" y="606.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (3 samples, 0.13%)</title><rect x="1132.1" y="579.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1135.1" y="590.0"></text>
</g>
<g>
<title>__send (3 samples, 0.13%)</title><rect x="1132.1" y="563.0" width="1.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1135.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.13%)</title><rect x="1133.6" y="739.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1136.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.13%)</title><rect x="1133.6" y="723.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1136.6" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="1133.6" y="707.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1136.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.09%)</title><rect x="1134.1" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1137.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.09%)</title><rect x="1134.1" y="691.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1137.1" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.09%)</title><rect x="1134.1" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1137.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6 samples, 0.26%)</title><rect x="1135.1" y="739.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1138.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.26%)</title><rect x="1135.1" y="723.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1138.1" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.26%)</title><rect x="1135.1" y="707.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1138.1" y="718.0"></text>
</g>
<g>
<title>RequestHandler3_handleRequest.handleRequest (4 samples, 0.17%)</title><rect x="1135.1" y="691.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1138.1" y="702.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.09%)</title><rect x="1137.2" y="691.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1140.2" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (14 samples, 0.60%)</title><rect x="1138.2" y="771.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1141.2" y="782.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.04%)</title><rect x="1138.2" y="755.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.2" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.13%)</title><rect x="1138.7" y="755.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1141.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.13%)</title><rect x="1138.7" y="739.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1141.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.13%)</title><rect x="1138.7" y="723.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1141.7" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.13%)</title><rect x="1138.7" y="707.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1141.7" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="1139.7" y="691.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1142.7" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.39%)</title><rect x="1140.2" y="755.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1143.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.30%)</title><rect x="1141.2" y="739.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1144.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.09%)</title><rect x="1143.8" y="723.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.8" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.09%)</title><rect x="1143.8" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.8" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1144.3" y="691.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.3" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.04%)</title><rect x="1144.8" y="755.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1147.8" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.13%)</title><rect x="1145.3" y="771.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1148.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.09%)</title><rect x="1145.8" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1148.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.09%)</title><rect x="1145.8" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1148.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.22%)</title><rect x="1146.8" y="771.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1149.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.17%)</title><rect x="1147.3" y="755.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1150.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1148.9" y="739.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1151.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1148.9" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1151.9" y="734.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.04%)</title><rect x="1148.9" y="707.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1151.9" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="1148.9" y="691.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.9" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1148.9" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.9" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1148.9" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.9" y="670.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="1148.9" y="643.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.9" y="654.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.13%)</title><rect x="1149.4" y="787.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1152.4" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (53 samples, 2.28%)</title><rect x="1150.9" y="787.0" width="26.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1153.9" y="798.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (49 samples, 2.11%)</title><rect x="1152.9" y="771.0" width="24.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1155.9" y="782.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (21 samples, 0.90%)</title><rect x="1155.5" y="755.0" width="10.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1158.5" y="766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.17%)</title><rect x="1156.5" y="739.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1159.5" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="1158.5" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.5" y="750.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.09%)</title><rect x="1159.0" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.0" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.09%)</title><rect x="1160.0" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.0" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 0.43%)</title><rect x="1161.0" y="739.0" width="5.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1164.0" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.34%)</title><rect x="1162.1" y="723.0" width="4.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1165.1" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.13%)</title><rect x="1164.6" y="707.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.6" y="718.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.04%)</title><rect x="1166.1" y="755.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1169.1" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.09%)</title><rect x="1166.6" y="755.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1169.6" y="766.0"></text>
</g>
<g>
<title>recv (20 samples, 0.86%)</title><rect x="1167.6" y="755.0" width="10.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1170.6" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.09%)</title><rect x="1177.8" y="819.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="830.0"></text>
</g>
<g>
<title>start_thread (22 samples, 0.95%)</title><rect x="1178.8" y="835.0" width="11.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1181.8" y="846.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (22 samples, 0.95%)</title><rect x="1178.8" y="819.0" width="11.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1181.8" y="830.0"></text>
</g>
<g>
<title>Thread::call_run() (22 samples, 0.95%)</title><rect x="1178.8" y="803.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="814.0"></text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 0.43%)</title><rect x="1178.8" y="787.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 0.34%)</title><rect x="1178.8" y="771.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="782.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.26%)</title><rect x="1178.8" y="755.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.26%)</title><rect x="1178.8" y="739.0" width="3.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1181.8" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.09%)</title><rect x="1181.9" y="755.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.9" y="766.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.04%)</title><rect x="1181.9" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.04%)</title><rect x="1182.4" y="739.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.4" y="750.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="1182.4" y="723.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.4" y="734.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="1182.4" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.4" y="718.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.04%)</title><rect x="1182.4" y="691.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.4" y="702.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1182.9" y="771.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.04%)</title><rect x="1182.9" y="755.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="766.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.66] (1 samples, 0.04%)</title><rect x="1182.9" y="739.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="750.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="1182.9" y="723.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="734.0"></text>
</g>
<g>
<title>SubTasksDone::is_task_claimed(unsigned int) (1 samples, 0.04%)</title><rect x="1183.4" y="771.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (10 samples, 0.43%)</title><rect x="1183.9" y="787.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="798.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (10 samples, 0.43%)</title><rect x="1183.9" y="771.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="782.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (10 samples, 0.43%)</title><rect x="1183.9" y="755.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="766.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (7 samples, 0.30%)</title><rect x="1183.9" y="739.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.9" y="750.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (7 samples, 0.30%)</title><rect x="1183.9" y="723.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.9" y="734.0"></text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.04%)</title><rect x="1183.9" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="718.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.04%)</title><rect x="1183.9" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1183.9" y="675.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1183.9" y="659.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.9" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1183.9" y="643.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1183.9" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1183.9" y="611.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1183.9" y="595.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.9" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1183.9" y="579.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.04%)</title><rect x="1183.9" y="563.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.9" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1183.9" y="547.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.9" y="558.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1183.9" y="531.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.9" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.04%)</title><rect x="1183.9" y="515.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.9" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.04%)</title><rect x="1183.9" y="499.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.9" y="510.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.04%)</title><rect x="1183.9" y="483.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="494.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.13%)</title><rect x="1184.4" y="707.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.13%)</title><rect x="1184.4" y="691.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.04%)</title><rect x="1184.4" y="675.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.04%)</title><rect x="1184.9" y="675.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.9" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.04%)</title><rect x="1185.4" y="675.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 0.09%)</title><rect x="1185.9" y="707.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.04%)</title><rect x="1185.9" y="691.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.04%)</title><rect x="1185.9" y="675.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.04%)</title><rect x="1185.9" y="659.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.04%)</title><rect x="1185.9" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="654.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.04%)</title><rect x="1185.9" y="627.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.04%)</title><rect x="1185.9" y="611.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1185.9" y="595.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="606.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1185.9" y="579.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.04%)</title><rect x="1186.4" y="691.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.4" y="702.0"></text>
</g>
<g>
<title>OuterStripMinedLoopNode::adjust_strip_mined_loop(PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1186.4" y="675.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.4" y="686.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.04%)</title><rect x="1187.0" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.0" y="718.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1187.0" y="691.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.0" y="702.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.13%)</title><rect x="1187.5" y="739.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.5" y="750.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.13%)</title><rect x="1187.5" y="723.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.13%)</title><rect x="1187.5" y="707.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="718.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.13%)</title><rect x="1187.5" y="691.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.5" y="702.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.04%)</title><rect x="1187.5" y="675.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="686.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.04%)</title><rect x="1187.5" y="659.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.5" y="670.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.04%)</title><rect x="1187.5" y="643.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.5" y="654.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.04%)</title><rect x="1187.5" y="627.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.5" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.04%)</title><rect x="1188.0" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.0" y="686.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.04%)</title><rect x="1188.0" y="659.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.0" y="670.0"></text>
</g>
<g>
<title>MonitorExitStub::emit_code(LIR_Assembler*) (1 samples, 0.04%)</title><rect x="1188.0" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.0" y="654.0"></text>
</g>
<g>
<title>LIR_Assembler::store_parameter(RegisterImpl*, int) (1 samples, 0.04%)</title><rect x="1188.0" y="627.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.04%)</title><rect x="1188.5" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.5" y="686.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.04%)</title><rect x="1188.5" y="659.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.5" y="670.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.04%)</title><rect x="1188.5" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.5" y="654.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.04%)</title><rect x="1188.5" y="627.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.5" y="638.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1188.5" y="611.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="622.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1188.5" y="595.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.5" y="606.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.04%)</title><rect x="1189.0" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.04%)</title><rect x="1189.0" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.04%)</title><rect x="1189.0" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.04%)</title><rect x="1189.0" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.04%)</title><rect x="1189.0" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.04%)</title><rect x="1189.0" y="707.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="718.0"></text>
</g>
<g>
<title>G1Policy::record_collection_pause_end(double, unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="1189.0" y="691.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="702.0"></text>
</g>
<g>
<title>G1SurvivorRegions::length() const (1 samples, 0.04%)</title><rect x="1189.0" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="686.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.04%)</title><rect x="1189.5" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.5" y="798.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.04%)</title><rect x="1189.5" y="771.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.5" y="782.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="1189.5" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.5" y="766.0"></text>
</g>
</g>
</svg>
