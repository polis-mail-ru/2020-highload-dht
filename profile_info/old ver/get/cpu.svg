<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="645"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="645"> </text>
<g id="frames">
<g>
<title>all (3,539 samples, 100.00%)</title><rect x="10.0" y="611.0" width="1180.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.0" y="622.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="595.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="579.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="563.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.06%)</title><rect x="10.3" y="595.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.3" y="606.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.03%)</title><rect x="10.3" y="579.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.3" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.7" y="579.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.7" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.03%)</title><rect x="10.7" y="563.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.7" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="10.7" y="547.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.7" y="558.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="10.7" y="531.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.7" y="542.0"></text>
</g>
<g>
<title>[unknown_Java] (8 samples, 0.23%)</title><rect x="11.0" y="595.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="14.0" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.17%)</title><rect x="11.0" y="579.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.0" y="590.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (6 samples, 0.17%)</title><rect x="11.0" y="563.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.0" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="13.0" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.0" y="590.0"></text>
</g>
<g>
<title>sha256_implCompress (1 samples, 0.03%)</title><rect x="13.3" y="579.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="16.3" y="590.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="13.7" y="595.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="16.7" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,007 samples, 84.97%)</title><rect x="14.0" y="595.0" width="1002.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.0" y="606.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,007 samples, 84.97%)</title><rect x="14.0" y="579.0" width="1002.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.0" y="590.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,007 samples, 84.97%)</title><rect x="14.0" y="563.0" width="1002.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.0" y="574.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.06%)</title><rect x="14.0" y="547.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="14.0" y="531.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.06%)</title><rect x="14.0" y="515.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.06%)</title><rect x="14.0" y="499.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.0" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.06%)</title><rect x="14.0" y="483.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.0" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.06%)</title><rect x="14.0" y="467.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (51 samples, 1.44%)</title><rect x="14.7" y="547.0" width="17.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (49 samples, 1.38%)</title><rect x="15.0" y="531.0" width="16.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (45 samples, 1.27%)</title><rect x="15.0" y="515.0" width="15.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.06%)</title><rect x="15.0" y="499.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.03%)</title><rect x="15.0" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="15.3" y="483.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="15.3" y="467.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="15.3" y="451.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.3" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="15.3" y="435.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.3" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="15.3" y="419.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.03%)</title><rect x="15.7" y="499.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.03%)</title><rect x="15.7" y="483.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (42 samples, 1.19%)</title><rect x="16.0" y="499.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.0" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (42 samples, 1.19%)</title><rect x="16.0" y="483.0" width="14.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.0" y="494.0"></text>
</g>
<g>
<title>Unsafe_Park (13 samples, 0.37%)</title><rect x="16.7" y="467.0" width="4.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="19.7" y="478.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="17.0" y="451.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="20.0" y="462.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.14%)</title><rect x="17.3" y="451.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="20.3" y="462.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="18.0" y="435.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.0" y="446.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.06%)</title><rect x="18.3" y="435.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="21.3" y="446.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="19.0" y="451.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="22.0" y="462.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.06%)</title><rect x="19.3" y="451.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="22.3" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="20.0" y="451.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="23.0" y="462.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="20.3" y="451.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="23.3" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.03%)</title><rect x="20.7" y="451.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="23.7" y="462.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.76%)</title><rect x="21.0" y="467.0" width="9.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="24.0" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_wait (24 samples, 0.68%)</title><rect x="21.0" y="451.0" width="8.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="24.0" y="462.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="29.0" y="451.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="32.0" y="462.0"></text>
</g>
<g>
<title>_pthread_cleanup_pop (2 samples, 0.06%)</title><rect x="29.3" y="451.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="32.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.06%)</title><rect x="30.0" y="515.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="30.3" y="499.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.3" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="30.3" y="483.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="30.7" y="515.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="30.7" y="499.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="30.7" y="483.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="30.7" y="467.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.7" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="30.7" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.7" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.03%)</title><rect x="30.7" y="435.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="33.7" y="446.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="30.7" y="419.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="33.7" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="31.0" y="515.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.03%)</title><rect x="31.3" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$67/856457076.run (2,954 samples, 83.47%)</title><rect x="31.7" y="547.0" width="984.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.7" y="558.0">ru/mail/polis/service/re1nex/BaseService$$Lambda$67/856457076.run</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1 (2,954 samples, 83.47%)</title><rect x="31.7" y="531.0" width="984.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.7" y="542.0">ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.14%)</title><rect x="31.7" y="515.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.11%)</title><rect x="32.0" y="499.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.0" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.11%)</title><rect x="32.0" y="483.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponseLocal (1,865 samples, 52.70%)</title><rect x="33.3" y="515.0" width="621.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.3" y="526.0">ru/mail/polis/service/re1nex/ApiController.handleResponseLocal</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (1,865 samples, 52.70%)</title><rect x="33.3" y="499.0" width="621.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.3" y="510.0">ru/mail/polis/service/re1nex/ApiControllerImpl.get</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (1,848 samples, 52.22%)</title><rect x="33.3" y="483.0" width="616.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.3" y="494.0">ru/mail/polis/service/re1nex/ApiControllerImpl.get</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/927691409.linkToTargetMethod (1 samples, 0.03%)</title><rect x="34.3" y="467.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.3" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/361103641.invoke (1 samples, 0.03%)</title><rect x="34.3" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="37.3" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="34.3" y="435.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="34.3" y="419.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (1,844 samples, 52.11%)</title><rect x="34.7" y="467.0" width="614.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.7" y="478.0">ru/mail/polis/dao/DAO.getValue</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.03%)</title><rect x="34.7" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.7" y="462.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="34.7" y="435.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (197 samples, 5.57%)</title><rect x="35.0" y="451.0" width="65.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.0" y="462.0">ru/mail..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (1 samples, 0.03%)</title><rect x="36.0" y="435.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.0" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (192 samples, 5.43%)</title><rect x="36.3" y="435.0" width="64.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.3" y="446.0">com/goo..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (8 samples, 0.23%)</title><rect x="36.3" y="419.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.3" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (8 samples, 0.23%)</title><rect x="36.3" y="403.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="39.3" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (8 samples, 0.23%)</title><rect x="36.3" y="387.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="39.3" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.23%)</title><rect x="36.3" y="371.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.3" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8 samples, 0.23%)</title><rect x="36.3" y="355.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.3" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.03%)</title><rect x="36.3" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (1 samples, 0.03%)</title><rect x="36.3" y="323.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (1 samples, 0.03%)</title><rect x="36.3" y="307.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="39.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (1 samples, 0.03%)</title><rect x="36.3" y="291.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (1 samples, 0.03%)</title><rect x="36.3" y="275.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="36.3" y="259.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="36.3" y="243.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="36.3" y="227.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.3" y="238.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (7 samples, 0.20%)</title><rect x="36.7" y="339.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.7" y="350.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (7 samples, 0.20%)</title><rect x="36.7" y="323.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (7 samples, 0.20%)</title><rect x="36.7" y="307.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="39.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (7 samples, 0.20%)</title><rect x="36.7" y="291.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.11%)</title><rect x="36.7" y="275.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.7" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.08%)</title><rect x="36.7" y="259.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.03%)</title><rect x="37.0" y="243.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.0" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="37.3" y="243.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.3" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="37.7" y="259.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (3 samples, 0.08%)</title><rect x="38.0" y="275.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.0" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.08%)</title><rect x="38.0" y="259.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.0" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="38.0" y="243.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="41.0" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="38.0" y="227.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="41.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.06%)</title><rect x="38.3" y="243.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.3" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="38.3" y="227.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="38.3" y="211.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="41.3" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="38.3" y="195.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="38.3" y="179.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="38.3" y="163.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="41.3" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="38.3" y="147.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="41.3" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="38.7" y="179.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="38.7" y="163.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.7" y="174.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (183 samples, 5.17%)</title><rect x="39.0" y="419.0" width="61.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.0" y="430.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (183 samples, 5.17%)</title><rect x="39.0" y="403.0" width="61.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="42.0" y="414.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (183 samples, 5.17%)</title><rect x="39.0" y="387.0" width="61.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.0" y="398.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (183 samples, 5.17%)</title><rect x="39.0" y="371.0" width="61.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.0" y="382.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (183 samples, 5.17%)</title><rect x="39.0" y="355.0" width="61.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.0" y="366.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (183 samples, 5.17%)</title><rect x="39.0" y="339.0" width="61.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.0" y="350.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (179 samples, 5.06%)</title><rect x="39.0" y="323.0" width="59.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.0" y="334.0">com/go..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (179 samples, 5.06%)</title><rect x="39.0" y="307.0" width="59.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.0" y="318.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (178 samples, 5.03%)</title><rect x="39.3" y="291.0" width="59.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.3" y="302.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (178 samples, 5.03%)</title><rect x="39.3" y="275.0" width="59.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="42.3" y="286.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="39.3" y="259.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.3" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="39.3" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="42.3" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="39.3" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="42.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (32 samples, 0.90%)</title><rect x="39.7" y="259.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.7" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.03%)</title><rect x="39.7" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (1 samples, 0.03%)</title><rect x="39.7" y="227.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (31 samples, 0.88%)</title><rect x="40.0" y="243.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="43.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (29 samples, 0.82%)</title><rect x="40.7" y="227.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (4 samples, 0.11%)</title><rect x="41.0" y="211.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="44.0" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (4 samples, 0.11%)</title><rect x="41.0" y="195.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.0" y="206.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="41.7" y="179.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.7" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="42.0" y="179.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.0" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="42.0" y="163.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="45.0" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="42.0" y="147.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="45.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (6 samples, 0.17%)</title><rect x="42.3" y="211.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.3" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (6 samples, 0.17%)</title><rect x="42.3" y="195.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="45.3" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.08%)</title><rect x="43.3" y="179.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.3" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.08%)</title><rect x="43.3" y="163.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.3" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.08%)</title><rect x="43.3" y="147.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.3" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (14 samples, 0.40%)</title><rect x="44.3" y="211.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (13 samples, 0.37%)</title><rect x="44.3" y="195.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (13 samples, 0.37%)</title><rect x="44.3" y="179.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (13 samples, 0.37%)</title><rect x="44.3" y="163.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.3" y="174.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.03%)</title><rect x="44.3" y="147.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="47.3" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (11 samples, 0.31%)</title><rect x="44.7" y="147.0" width="3.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="47.7" y="158.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="48.3" y="147.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="51.3" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="48.7" y="195.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="48.7" y="179.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.7" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.06%)</title><rect x="49.0" y="211.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="49.3" y="195.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.06%)</title><rect x="49.7" y="211.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="50.0" y="195.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (71 samples, 2.01%)</title><rect x="50.3" y="259.0" width="23.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.3" y="270.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="50.3" y="243.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.3" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="50.3" y="227.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="53.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="50.3" y="211.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.3" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="50.3" y="195.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="53.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (23 samples, 0.65%)</title><rect x="50.7" y="243.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="50.7" y="227.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (22 samples, 0.62%)</title><rect x="51.0" y="227.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (22 samples, 0.62%)</title><rect x="51.0" y="211.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.62%)</title><rect x="51.0" y="195.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.0" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="51.0" y="179.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="51.0" y="163.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.0" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.03%)</title><rect x="51.0" y="147.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="54.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (18 samples, 0.51%)</title><rect x="51.3" y="179.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (18 samples, 0.51%)</title><rect x="51.3" y="163.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (18 samples, 0.51%)</title><rect x="51.3" y="147.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.3" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (16 samples, 0.45%)</title><rect x="51.7" y="131.0" width="5.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="54.7" y="142.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="57.0" y="131.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="60.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.08%)</title><rect x="57.3" y="179.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.3" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.08%)</title><rect x="57.3" y="163.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.3" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.06%)</title><rect x="57.7" y="147.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.7" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="58.0" y="131.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (47 samples, 1.33%)</title><rect x="58.3" y="243.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (47 samples, 1.33%)</title><rect x="58.3" y="227.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.06%)</title><rect x="58.7" y="211.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.7" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.06%)</title><rect x="58.7" y="195.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.7" y="206.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="58.7" y="179.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.7" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="59.0" y="179.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.0" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="59.0" y="163.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="62.0" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="59.0" y="147.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 1.16%)</title><rect x="59.3" y="211.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (35 samples, 0.99%)</title><rect x="59.3" y="195.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="62.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (35 samples, 0.99%)</title><rect x="59.3" y="179.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (35 samples, 0.99%)</title><rect x="59.3" y="163.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.3" y="174.0"></text>
</g>
<g>
<title>__libc_pread64 (30 samples, 0.85%)</title><rect x="60.0" y="147.0" width="10.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="63.0" y="158.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="70.0" y="147.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="73.0" y="158.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.06%)</title><rect x="70.4" y="147.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="73.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.17%)</title><rect x="71.0" y="195.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.0" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.06%)</title><rect x="71.4" y="179.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.4" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.06%)</title><rect x="71.4" y="163.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.4" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="71.7" y="147.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.08%)</title><rect x="72.0" y="179.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.08%)</title><rect x="73.0" y="211.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="76.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.08%)</title><rect x="73.0" y="195.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (74 samples, 2.09%)</title><rect x="74.0" y="259.0" width="24.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="77.0" y="270.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (74 samples, 2.09%)</title><rect x="74.0" y="243.0" width="24.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.0" y="254.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.06%)</title><rect x="74.7" y="227.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.7" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.06%)</title><rect x="74.7" y="211.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (66 samples, 1.86%)</title><rect x="75.4" y="227.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.4" y="238.0">s..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.08%)</title><rect x="75.4" y="211.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.4" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.08%)</title><rect x="75.4" y="195.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.4" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.03%)</title><rect x="75.4" y="179.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.4" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.06%)</title><rect x="75.7" y="179.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.7" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.06%)</title><rect x="75.7" y="163.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.7" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.06%)</title><rect x="75.7" y="147.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (54 samples, 1.53%)</title><rect x="76.4" y="211.0" width="18.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (54 samples, 1.53%)</title><rect x="76.4" y="195.0" width="18.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (54 samples, 1.53%)</title><rect x="76.4" y="179.0" width="18.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.4" y="190.0"></text>
</g>
<g>
<title>__libc_pread64 (50 samples, 1.41%)</title><rect x="76.4" y="163.0" width="16.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="79.4" y="174.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.08%)</title><rect x="93.0" y="163.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="96.0" y="174.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="94.0" y="163.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="97.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.25%)</title><rect x="94.4" y="211.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.4" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.08%)</title><rect x="95.7" y="195.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.7" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.08%)</title><rect x="95.7" y="179.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.7" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.08%)</title><rect x="95.7" y="163.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.7" y="174.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="96.4" y="147.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="99.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.06%)</title><rect x="96.7" y="195.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.06%)</title><rect x="97.4" y="227.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="97.7" y="211.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.06%)</title><rect x="98.0" y="227.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.0" y="238.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (4 samples, 0.11%)</title><rect x="98.7" y="323.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.7" y="334.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (4 samples, 0.11%)</title><rect x="98.7" y="307.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="101.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (4 samples, 0.11%)</title><rect x="98.7" y="291.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (4 samples, 0.11%)</title><rect x="98.7" y="275.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.7" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.06%)</title><rect x="98.7" y="259.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.7" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.06%)</title><rect x="98.7" y="243.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (2 samples, 0.06%)</title><rect x="99.4" y="259.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.4" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="99.4" y="243.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.4" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1 samples, 0.03%)</title><rect x="100.0" y="419.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$83/1591887593.apply (1 samples, 0.03%)</title><rect x="100.4" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.03%)</title><rect x="100.4" y="419.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.4" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="100.4" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.4" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="100.4" y="387.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="103.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="100.4" y="371.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="103.4" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="100.4" y="355.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="103.4" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="100.4" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="103.4" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="100.4" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="103.4" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="100.4" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="103.4" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="100.4" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="103.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (1,646 samples, 46.51%)</title><rect x="100.7" y="451.0" width="548.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.7" y="462.0">ru/mail/polis/dao/re1nex/NewDAO.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (212 samples, 5.99%)</title><rect x="101.0" y="435.0" width="70.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="104.0" y="446.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (212 samples, 5.99%)</title><rect x="101.0" y="419.0" width="70.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.0" y="430.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.03%)</title><rect x="101.0" y="403.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.0" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.&lt;init&gt; (1 samples, 0.03%)</title><rect x="101.0" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="104.0" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (206 samples, 5.82%)</title><rect x="101.4" y="403.0" width="68.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.4" y="414.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (206 samples, 5.82%)</title><rect x="101.4" y="387.0" width="68.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.4" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (3 samples, 0.08%)</title><rect x="101.4" y="371.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="104.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="101.7" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="104.7" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="102.0" y="355.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.0" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (203 samples, 5.74%)</title><rect x="102.4" y="371.0" width="67.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.4" y="382.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (203 samples, 5.74%)</title><rect x="102.4" y="355.0" width="67.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.4" y="366.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (203 samples, 5.74%)</title><rect x="102.4" y="339.0" width="67.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="105.4" y="350.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (203 samples, 5.74%)</title><rect x="102.4" y="323.0" width="67.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.4" y="334.0">com/goo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (198 samples, 5.59%)</title><rect x="103.4" y="307.0" width="66.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.4" y="318.0">com/goo..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (198 samples, 5.59%)</title><rect x="103.4" y="291.0" width="66.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.4" y="302.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (197 samples, 5.57%)</title><rect x="103.7" y="275.0" width="65.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.7" y="286.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (197 samples, 5.57%)</title><rect x="103.7" y="259.0" width="65.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.7" y="270.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.08%)</title><rect x="104.4" y="243.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="107.4" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="104.4" y="227.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="104.7" y="211.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="107.7" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="105.0" y="195.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="108.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="105.0" y="179.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="105.0" y="163.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="108.0" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="105.0" y="147.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="108.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (42 samples, 1.19%)</title><rect x="105.4" y="243.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="105.4" y="227.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.4" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="105.4" y="211.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.4" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="105.4" y="195.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="108.4" y="206.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="105.4" y="179.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="108.4" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="105.4" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="108.4" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="105.4" y="147.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="108.4" y="158.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="105.4" y="131.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="108.4" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (2 samples, 0.06%)</title><rect x="105.7" y="227.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="108.7" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (2 samples, 0.06%)</title><rect x="105.7" y="211.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (39 samples, 1.10%)</title><rect x="106.4" y="227.0" width="13.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="109.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (38 samples, 1.07%)</title><rect x="106.7" y="211.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="109.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.08%)</title><rect x="107.4" y="195.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="110.4" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.06%)</title><rect x="107.7" y="179.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.7" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (9 samples, 0.25%)</title><rect x="108.4" y="195.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="111.4" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (8 samples, 0.23%)</title><rect x="108.7" y="179.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="111.7" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="111.0" y="163.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.0" y="174.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="111.0" y="147.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="114.0" y="158.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="111.0" y="131.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.68%)</title><rect x="111.4" y="195.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (21 samples, 0.59%)</title><rect x="111.4" y="179.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (21 samples, 0.59%)</title><rect x="111.4" y="163.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (21 samples, 0.59%)</title><rect x="111.4" y="147.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="114.4" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (16 samples, 0.45%)</title><rect x="112.4" y="131.0" width="5.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="115.4" y="142.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="117.7" y="131.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="120.7" y="142.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="118.0" y="131.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="121.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.08%)</title><rect x="118.4" y="179.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.4" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.06%)</title><rect x="118.4" y="163.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="121.4" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.06%)</title><rect x="118.4" y="147.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="121.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="119.0" y="163.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (86 samples, 2.43%)</title><rect x="119.4" y="243.0" width="28.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.4" y="254.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="119.4" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.4" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="119.4" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="122.4" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="119.4" y="195.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.4" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="119.4" y="179.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (26 samples, 0.73%)</title><rect x="119.7" y="227.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="119.7" y="211.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="122.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.03%)</title><rect x="120.0" y="211.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (1 samples, 0.03%)</title><rect x="120.0" y="195.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (24 samples, 0.68%)</title><rect x="120.4" y="211.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (23 samples, 0.65%)</title><rect x="120.7" y="195.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="123.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (21 samples, 0.59%)</title><rect x="121.0" y="179.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (18 samples, 0.51%)</title><rect x="121.0" y="163.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (18 samples, 0.51%)</title><rect x="121.0" y="147.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="124.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (18 samples, 0.51%)</title><rect x="121.0" y="131.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.0" y="142.0"></text>
</g>
<g>
<title>__libc_pread64 (18 samples, 0.51%)</title><rect x="121.0" y="115.0" width="6.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="124.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.08%)</title><rect x="127.0" y="163.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="130.0" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.06%)</title><rect x="127.4" y="147.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="130.4" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.06%)</title><rect x="127.4" y="131.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="130.4" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="127.7" y="115.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="130.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="128.0" y="179.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="131.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (59 samples, 1.67%)</title><rect x="128.4" y="227.0" width="19.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="131.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (59 samples, 1.67%)</title><rect x="128.4" y="211.0" width="19.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="131.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.08%)</title><rect x="128.4" y="195.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="131.4" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.08%)</title><rect x="128.4" y="179.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="131.4" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.06%)</title><rect x="128.7" y="163.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.7" y="174.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.06%)</title><rect x="128.7" y="147.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.7" y="158.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.06%)</title><rect x="128.7" y="131.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="131.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.06%)</title><rect x="129.4" y="195.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="132.4" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.06%)</title><rect x="129.4" y="179.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="132.4" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.06%)</title><rect x="129.4" y="163.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="132.4" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/SharedSecrets.getJavaLangAccess (2 samples, 0.06%)</title><rect x="129.4" y="147.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (50 samples, 1.41%)</title><rect x="130.0" y="195.0" width="16.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="133.0" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="130.0" y="179.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="133.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="130.0" y="163.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="133.0" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="130.0" y="147.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.0" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="130.0" y="131.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.0" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="130.0" y="115.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (41 samples, 1.16%)</title><rect x="130.4" y="179.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.4" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="130.4" y="163.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.4" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="130.4" y="147.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="133.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="130.4" y="131.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.4" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="130.4" y="115.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.4" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (40 samples, 1.13%)</title><rect x="130.7" y="163.0" width="13.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.7" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (40 samples, 1.13%)</title><rect x="130.7" y="147.0" width="13.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="133.7" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (37 samples, 1.05%)</title><rect x="131.7" y="131.0" width="12.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="134.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.23%)</title><rect x="144.0" y="179.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.0" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.08%)</title><rect x="145.4" y="163.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.4" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.08%)</title><rect x="145.4" y="147.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.4" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.06%)</title><rect x="145.7" y="131.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.7" y="142.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="146.0" y="115.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="149.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="146.4" y="163.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="149.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.08%)</title><rect x="146.7" y="195.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.7" y="206.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="147.0" y="179.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="150.0" y="190.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="147.0" y="163.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="150.0" y="174.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.03%)</title><rect x="147.0" y="147.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="150.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="147.4" y="179.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="150.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="147.7" y="195.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (64 samples, 1.81%)</title><rect x="148.0" y="243.0" width="21.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.0" y="254.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (64 samples, 1.81%)</title><rect x="148.0" y="227.0" width="21.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.0" y="238.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (5 samples, 0.14%)</title><rect x="148.7" y="211.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="151.7" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (5 samples, 0.14%)</title><rect x="148.7" y="195.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.7" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="150.0" y="179.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.0" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="150.0" y="163.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.0" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="150.0" y="147.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.06%)</title><rect x="150.4" y="211.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.4" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.06%)</title><rect x="150.4" y="195.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="153.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (53 samples, 1.50%)</title><rect x="151.0" y="211.0" width="17.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.0" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="151.0" y="195.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.0" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="151.0" y="179.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="154.0" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="151.0" y="163.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.0" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="151.0" y="147.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.0" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="151.0" y="131.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (43 samples, 1.22%)</title><rect x="151.4" y="195.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (43 samples, 1.22%)</title><rect x="151.4" y="179.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (43 samples, 1.22%)</title><rect x="151.4" y="163.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="154.4" y="174.0"></text>
</g>
<g>
<title>__libc_pread64 (39 samples, 1.10%)</title><rect x="152.0" y="147.0" width="13.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="155.0" y="158.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="165.0" y="147.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="168.0" y="158.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="165.4" y="147.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="168.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.25%)</title><rect x="165.7" y="195.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="168.7" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.14%)</title><rect x="166.7" y="179.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.7" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.14%)</title><rect x="166.7" y="163.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="169.7" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.08%)</title><rect x="167.4" y="147.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.4" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.nextIndex (1 samples, 0.03%)</title><rect x="168.0" y="131.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="171.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="168.4" y="179.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="168.7" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="171.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="169.0" y="211.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="172.0" y="222.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.06%)</title><rect x="169.4" y="307.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="172.4" y="318.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.06%)</title><rect x="169.4" y="291.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="172.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (2 samples, 0.06%)</title><rect x="169.4" y="275.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (2 samples, 0.06%)</title><rect x="169.4" y="259.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="169.4" y="243.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.4" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="169.4" y="227.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="172.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.03%)</title><rect x="169.7" y="243.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="172.7" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="169.7" y="227.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.7" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="169.7" y="211.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="172.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="169.7" y="195.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.7" y="206.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (5 samples, 0.14%)</title><rect x="170.0" y="403.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (5 samples, 0.14%)</title><rect x="170.0" y="387.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.0" y="398.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (5 samples, 0.14%)</title><rect x="170.0" y="371.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.0" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (2 samples, 0.06%)</title><rect x="170.0" y="355.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.0" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$75/869776578.getAsBoolean (2 samples, 0.06%)</title><rect x="170.0" y="339.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.0" y="350.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (2 samples, 0.06%)</title><rect x="170.0" y="323.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (2 samples, 0.06%)</title><rect x="170.0" y="307.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="170.0" y="291.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="170.0" y="275.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.03%)</title><rect x="170.0" y="259.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.0" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.03%)</title><rect x="170.4" y="291.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="173.4" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (3 samples, 0.08%)</title><rect x="170.7" y="355.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.7" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.03%)</title><rect x="171.4" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="174.4" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.03%)</title><rect x="171.4" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1,366 samples, 38.60%)</title><rect x="171.7" y="435.0" width="455.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="174.7" y="446.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.03%)</title><rect x="171.7" y="419.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="174.7" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="171.7" y="403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.7" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="171.7" y="387.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.7" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.prevEntry (1 samples, 0.03%)</title><rect x="171.7" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.7" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.predecessor (1 samples, 0.03%)</title><rect x="171.7" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.7" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (7 samples, 0.20%)</title><rect x="172.0" y="419.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.0" y="430.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (7 samples, 0.20%)</title><rect x="172.0" y="403.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.0" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (6 samples, 0.17%)</title><rect x="172.0" y="387.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="175.0" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (6 samples, 0.17%)</title><rect x="172.0" y="371.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.0" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (6 samples, 0.17%)</title><rect x="172.0" y="355.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="175.0" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.03%)</title><rect x="173.7" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.7" y="350.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="173.7" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="173.7" y="307.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.7" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="173.7" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.7" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="173.7" y="275.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.7" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="173.7" y="259.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.7" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.03%)</title><rect x="173.7" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="176.7" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.03%)</title><rect x="173.7" y="227.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.7" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.03%)</title><rect x="174.0" y="387.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.binarySearch (1 samples, 0.03%)</title><rect x="174.0" y="371.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$79/423943441.accept (1,358 samples, 38.37%)</title><rect x="174.4" y="419.0" width="452.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="177.4" y="430.0">ru/mail/polis/dao/re1nex/NewDAO$$Lambda$79/423943441.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIterator$5 (1,358 samples, 38.37%)</title><rect x="174.4" y="403.0" width="452.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.4" y="414.0">ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIterator$5</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.iterator (1,358 samples, 38.37%)</title><rect x="174.4" y="387.0" width="452.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="177.4" y="398.0">ru/mail/polis/dao/re1nex/SSTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt; (1,358 samples, 38.37%)</title><rect x="174.4" y="371.0" width="452.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="177.4" y="382.0">ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.binarySearch (1,357 samples, 38.34%)</title><rect x="174.7" y="355.0" width="452.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.7" y="366.0">ru/mail/polis/dao/re1nex/SSTable.binarySearch</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.31%)</title><rect x="174.7" y="339.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.7" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.25%)</title><rect x="175.4" y="323.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="178.4" y="334.0"></text>
</g>
<g>
<title>vectorizedMismatch (4 samples, 0.11%)</title><rect x="177.0" y="307.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="180.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (1,346 samples, 38.03%)</title><rect x="178.4" y="339.0" width="448.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.4" y="350.0">ru/mail/polis/dao/re1nex/SSTable.key</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (35 samples, 0.99%)</title><rect x="180.7" y="323.0" width="11.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="183.7" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.11%)</title><rect x="180.7" y="307.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="183.7" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.11%)</title><rect x="180.7" y="291.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="183.7" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.11%)</title><rect x="180.7" y="275.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="183.7" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.11%)</title><rect x="180.7" y="259.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="183.7" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="180.7" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="183.7" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="181.0" y="243.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="184.0" y="254.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="181.0" y="227.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="184.0" y="238.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="181.0" y="211.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="184.0" y="222.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.06%)</title><rect x="181.4" y="243.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="184.4" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (31 samples, 0.88%)</title><rect x="182.0" y="307.0" width="10.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="185.0" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="184.7" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="187.7" y="302.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="184.7" y="275.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="187.7" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="184.7" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="187.7" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="184.7" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="187.7" y="254.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="184.7" y="227.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="187.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 0.62%)</title><rect x="185.0" y="291.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.0" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.20%)</title><rect x="190.1" y="275.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="190.7" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="190.7" y="243.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="193.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.11%)</title><rect x="191.1" y="259.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.11%)</title><rect x="191.1" y="243.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.1" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.08%)</title><rect x="191.4" y="227.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="194.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.03%)</title><rect x="192.4" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.4" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.rewind (1 samples, 0.03%)</title><rect x="192.4" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="195.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (13 samples, 0.37%)</title><rect x="192.7" y="323.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="195.7" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (1 samples, 0.03%)</title><rect x="196.7" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (523 samples, 14.78%)</title><rect x="197.1" y="323.0" width="174.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.1" y="334.0">ru/mail/polis/dao/re1n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (17 samples, 0.48%)</title><rect x="198.1" y="307.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.1" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.08%)</title><rect x="198.1" y="291.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="201.1" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.08%)</title><rect x="198.1" y="275.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="201.1" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.08%)</title><rect x="198.1" y="259.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="201.1" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.08%)</title><rect x="198.1" y="243.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="201.1" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="198.1" y="227.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="201.1" y="238.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="198.1" y="211.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="201.1" y="222.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="198.4" y="211.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="201.4" y="222.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="198.4" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="201.4" y="206.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="198.7" y="227.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="201.7" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.40%)</title><rect x="199.1" y="291.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.1" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="199.4" y="275.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="202.4" y="286.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.06%)</title><rect x="199.4" y="259.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="202.4" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="199.7" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="202.7" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="199.7" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="202.7" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="199.7" y="211.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="202.7" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.31%)</title><rect x="200.1" y="275.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.1" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.14%)</title><rect x="202.1" y="259.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.14%)</title><rect x="202.1" y="243.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.14%)</title><rect x="202.1" y="227.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.1" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.14%)</title><rect x="202.1" y="211.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="205.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (503 samples, 14.21%)</title><rect x="203.7" y="307.0" width="167.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="206.7" y="318.0">sun/nio/ch/FileChanne..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.ensureOpen (6 samples, 0.17%)</title><rect x="205.1" y="291.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.1" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (5 samples, 0.14%)</title><rect x="205.4" y="275.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (492 samples, 13.90%)</title><rect x="207.1" y="291.0" width="164.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="210.1" y="302.0">sun/nio/ch/FileChanne..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (56 samples, 1.58%)</title><rect x="210.1" y="275.0" width="18.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="213.1" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (54 samples, 1.53%)</title><rect x="210.4" y="259.0" width="18.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.4" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (8 samples, 0.23%)</title><rect x="213.1" y="243.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.1" y="254.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel$1.&lt;init&gt; (1 samples, 0.03%)</title><rect x="215.7" y="243.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.7" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="215.7" y="227.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.7" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (35 samples, 0.99%)</title><rect x="216.1" y="243.0" width="11.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="219.1" y="254.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (31 samples, 0.88%)</title><rect x="216.7" y="227.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.7" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (31 samples, 0.88%)</title><rect x="216.7" y="211.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="227.1" y="227.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="227.7" y="243.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="228.1" y="243.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="228.4" y="259.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (5 samples, 0.14%)</title><rect x="228.7" y="275.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.7" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (5 samples, 0.14%)</title><rect x="228.7" y="259.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.7" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.11%)</title><rect x="229.1" y="243.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.1" y="254.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.06%)</title><rect x="229.7" y="227.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.7" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.06%)</title><rect x="229.7" y="211.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (391 samples, 11.05%)</title><rect x="230.4" y="275.0" width="130.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.4" y="286.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (15 samples, 0.42%)</title><rect x="230.4" y="259.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.4" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (14 samples, 0.40%)</title><rect x="230.7" y="243.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.7" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.03%)</title><rect x="231.4" y="227.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (3 samples, 0.08%)</title><rect x="231.7" y="227.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.7" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (8 samples, 0.23%)</title><rect x="232.7" y="227.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.7" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (8 samples, 0.23%)</title><rect x="232.7" y="211.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.7" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (8 samples, 0.23%)</title><rect x="232.7" y="195.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.7" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.06%)</title><rect x="233.7" y="179.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.7" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.08%)</title><rect x="234.4" y="179.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (320 samples, 9.04%)</title><rect x="235.4" y="259.0" width="106.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.4" y="270.0">sun/nio/ch/IO..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.08%)</title><rect x="235.4" y="243.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.4" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.08%)</title><rect x="235.4" y="227.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.08%)</title><rect x="235.4" y="211.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.4" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.08%)</title><rect x="235.4" y="195.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (317 samples, 8.96%)</title><rect x="236.4" y="243.0" width="105.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.4" y="254.0">sun/nio/ch/Fi..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (317 samples, 8.96%)</title><rect x="236.4" y="227.0" width="105.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.4" y="238.0">sun/nio/ch/Fi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (2 samples, 0.06%)</title><rect x="243.4" y="211.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="246.4" y="222.0"></text>
</g>
<g>
<title>__libc_pread64 (273 samples, 7.71%)</title><rect x="244.1" y="211.0" width="91.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="247.1" y="222.0">__libc_prea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.23%)</title><rect x="335.1" y="211.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="338.1" y="222.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (11 samples, 0.31%)</title><rect x="337.8" y="211.0" width="3.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="340.8" y="222.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.06%)</title><rect x="341.4" y="211.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="344.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (56 samples, 1.58%)</title><rect x="342.1" y="259.0" width="18.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="345.1" y="270.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.03%)</title><rect x="348.1" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="351.1" y="254.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.03%)</title><rect x="348.1" y="227.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="351.1" y="238.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.03%)</title><rect x="348.1" y="211.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="351.1" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (21 samples, 0.59%)</title><rect x="348.4" y="243.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="351.4" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (20 samples, 0.57%)</title><rect x="348.8" y="227.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="351.8" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (9 samples, 0.25%)</title><rect x="352.4" y="211.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.03%)</title><rect x="355.1" y="195.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="358.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (16 samples, 0.45%)</title><rect x="355.4" y="243.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="358.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="360.4" y="227.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="363.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (28 samples, 0.79%)</title><rect x="360.8" y="275.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.8" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="366.1" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="369.1" y="270.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="366.1" y="243.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="369.1" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="366.1" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="369.1" y="238.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.03%)</title><rect x="366.1" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="369.1" y="222.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.06%)</title><rect x="366.4" y="259.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (9 samples, 0.25%)</title><rect x="367.1" y="259.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.1" y="270.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (2 samples, 0.06%)</title><rect x="368.8" y="243.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="371.8" y="254.0"></text>
</g>
<g>
<title>pthread_self (2 samples, 0.06%)</title><rect x="369.4" y="243.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="372.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (3 samples, 0.08%)</title><rect x="370.1" y="275.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="373.1" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="370.8" y="259.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="373.8" y="270.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="370.8" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="373.8" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="370.8" y="227.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="373.8" y="238.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="370.8" y="211.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="373.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="371.1" y="291.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (767 samples, 21.67%)</title><rect x="371.4" y="323.0" width="255.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="374.4" y="334.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.ensureOpen (1 samples, 0.03%)</title><rect x="373.4" y="307.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (760 samples, 21.47%)</title><rect x="373.8" y="307.0" width="253.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="376.8" y="318.0">sun/nio/ch/FileChannelImpl.readInt..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (19 samples, 0.54%)</title><rect x="375.1" y="291.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="378.1" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (14 samples, 0.40%)</title><rect x="376.8" y="275.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.8" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel$1.&lt;init&gt; (3 samples, 0.08%)</title><rect x="379.8" y="259.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.8" y="270.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="380.4" y="243.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="383.4" y="254.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.06%)</title><rect x="380.8" y="259.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="383.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/SharedSecrets.getJavaLangAccess (2 samples, 0.06%)</title><rect x="380.8" y="243.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="383.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.06%)</title><rect x="381.4" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="384.4" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.06%)</title><rect x="381.4" y="275.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="384.4" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.06%)</title><rect x="381.4" y="259.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="384.4" y="270.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.06%)</title><rect x="381.4" y="243.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="384.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (706 samples, 19.95%)</title><rect x="382.1" y="291.0" width="235.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.1" y="302.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (12 samples, 0.34%)</title><rect x="382.4" y="275.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.4" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="382.8" y="259.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="385.8" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (10 samples, 0.28%)</title><rect x="383.1" y="259.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="386.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (8 samples, 0.23%)</title><rect x="383.8" y="243.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="386.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (8 samples, 0.23%)</title><rect x="383.8" y="227.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="386.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (8 samples, 0.23%)</title><rect x="383.8" y="211.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="386.8" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.06%)</title><rect x="385.8" y="195.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.8" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (586 samples, 16.56%)</title><rect x="386.4" y="275.0" width="195.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.4" y="286.0">sun/nio/ch/IOUtil.readInt..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.11%)</title><rect x="386.4" y="259.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="389.4" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.11%)</title><rect x="386.4" y="243.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="389.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.11%)</title><rect x="386.4" y="227.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="389.4" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.11%)</title><rect x="386.4" y="211.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="389.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (582 samples, 16.45%)</title><rect x="387.8" y="259.0" width="194.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.8" y="270.0">sun/nio/ch/FileDispatcher..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (582 samples, 16.45%)</title><rect x="387.8" y="243.0" width="194.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="390.8" y="254.0">sun/nio/ch/FileDispatcher..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (5 samples, 0.14%)</title><rect x="398.8" y="227.0" width="1.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="401.8" y="238.0"></text>
</g>
<g>
<title>__libc_pread64 (513 samples, 14.50%)</title><rect x="400.4" y="227.0" width="171.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="403.4" y="238.0">__libc_pread64</text>
</g>
<g>
<title>__pthread_disable_asynccancel (16 samples, 0.45%)</title><rect x="571.5" y="227.0" width="5.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="574.5" y="238.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (11 samples, 0.31%)</title><rect x="576.8" y="227.0" width="3.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="579.8" y="238.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.06%)</title><rect x="580.5" y="227.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="583.5" y="238.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.06%)</title><rect x="581.2" y="227.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="584.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (107 samples, 3.02%)</title><rect x="581.8" y="275.0" width="35.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="584.8" y="286.0">sun..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (2 samples, 0.06%)</title><rect x="589.5" y="259.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="592.5" y="270.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (2 samples, 0.06%)</title><rect x="589.5" y="243.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="592.5" y="254.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (2 samples, 0.06%)</title><rect x="589.5" y="227.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="592.5" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (36 samples, 1.02%)</title><rect x="590.2" y="259.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.2" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (34 samples, 0.96%)</title><rect x="590.8" y="243.0" width="11.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="593.8" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (19 samples, 0.54%)</title><rect x="595.8" y="227.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="598.8" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.nextIndex (1 samples, 0.03%)</title><rect x="599.8" y="211.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="602.8" y="222.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="600.2" y="211.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="603.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.03%)</title><rect x="601.2" y="211.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="604.2" y="222.0"></text>
</g>
<g>
<title>unsafe_arraycopy (2 samples, 0.06%)</title><rect x="601.5" y="211.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="604.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (46 samples, 1.30%)</title><rect x="602.2" y="259.0" width="15.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="605.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (6 samples, 0.17%)</title><rect x="615.5" y="243.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="618.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (20 samples, 0.57%)</title><rect x="617.5" y="291.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="620.5" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.06%)</title><rect x="618.5" y="275.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="621.5" y="286.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.06%)</title><rect x="618.5" y="259.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="621.5" y="270.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.06%)</title><rect x="618.5" y="243.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="621.5" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.03%)</title><rect x="618.8" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="621.8" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (15 samples, 0.42%)</title><rect x="619.2" y="275.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.2" y="286.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.03%)</title><rect x="623.8" y="259.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="626.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (9 samples, 0.25%)</title><rect x="624.2" y="291.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.2" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.23%)</title><rect x="627.2" y="435.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="630.2" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (1 samples, 0.03%)</title><rect x="629.5" y="419.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="632.5" y="430.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.03%)</title><rect x="629.5" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="632.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (2 samples, 0.06%)</title><rect x="629.8" y="435.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.03%)</title><rect x="630.2" y="419.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="633.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.03%)</title><rect x="630.5" y="435.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="633.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.03%)</title><rect x="630.5" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="633.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.03%)</title><rect x="630.5" y="403.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="633.5" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (1 samples, 0.03%)</title><rect x="630.5" y="387.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="633.5" y="398.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="630.8" y="435.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="633.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (36 samples, 1.02%)</title><rect x="631.2" y="435.0" width="12.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="634.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (36 samples, 1.02%)</title><rect x="631.2" y="419.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.2" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (36 samples, 1.02%)</title><rect x="631.2" y="403.0" width="12.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.2" y="414.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (4 samples, 0.11%)</title><rect x="631.2" y="387.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.2" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (4 samples, 0.11%)</title><rect x="631.2" y="371.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="634.2" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (4 samples, 0.11%)</title><rect x="631.2" y="355.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="634.2" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.11%)</title><rect x="631.2" y="339.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.2" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.11%)</title><rect x="631.2" y="323.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.2" y="334.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (3 samples, 0.08%)</title><rect x="631.5" y="307.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.5" y="318.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (3 samples, 0.08%)</title><rect x="631.5" y="291.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (3 samples, 0.08%)</title><rect x="631.5" y="275.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (3 samples, 0.08%)</title><rect x="631.5" y="259.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="634.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="631.5" y="243.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (2 samples, 0.06%)</title><rect x="631.8" y="243.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.8" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.06%)</title><rect x="631.8" y="227.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="634.8" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="632.2" y="211.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.2" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (32 samples, 0.90%)</title><rect x="632.5" y="387.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.5" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (32 samples, 0.90%)</title><rect x="632.5" y="371.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="635.5" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (32 samples, 0.90%)</title><rect x="632.5" y="355.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="635.5" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (32 samples, 0.90%)</title><rect x="632.5" y="339.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.5" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (32 samples, 0.90%)</title><rect x="632.5" y="323.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="635.5" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (32 samples, 0.90%)</title><rect x="632.5" y="307.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="635.5" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (31 samples, 0.88%)</title><rect x="632.5" y="291.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (31 samples, 0.88%)</title><rect x="632.5" y="275.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (31 samples, 0.88%)</title><rect x="632.5" y="259.0" width="10.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="635.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (31 samples, 0.88%)</title><rect x="632.5" y="243.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (6 samples, 0.17%)</title><rect x="632.5" y="227.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="635.5" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.03%)</title><rect x="632.5" y="211.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.5" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.03%)</title><rect x="632.5" y="195.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="635.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (5 samples, 0.14%)</title><rect x="632.8" y="211.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="635.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (5 samples, 0.14%)</title><rect x="632.8" y="195.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.8" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.03%)</title><rect x="632.8" y="179.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.11%)</title><rect x="633.2" y="179.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.11%)</title><rect x="633.2" y="163.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="636.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (4 samples, 0.11%)</title><rect x="633.2" y="147.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="636.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (4 samples, 0.11%)</title><rect x="633.2" y="131.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="636.2" y="142.0"></text>
</g>
<g>
<title>__libc_pread64 (4 samples, 0.11%)</title><rect x="633.2" y="115.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="636.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (11 samples, 0.31%)</title><rect x="634.5" y="227.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (5 samples, 0.14%)</title><rect x="634.5" y="211.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="637.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (5 samples, 0.14%)</title><rect x="634.5" y="195.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="637.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (5 samples, 0.14%)</title><rect x="634.5" y="179.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.11%)</title><rect x="634.5" y="163.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.08%)</title><rect x="634.5" y="147.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (3 samples, 0.08%)</title><rect x="634.5" y="131.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (3 samples, 0.08%)</title><rect x="634.5" y="115.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.5" y="126.0"></text>
</g>
<g>
<title>__libc_pread64 (3 samples, 0.08%)</title><rect x="634.5" y="99.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="637.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="635.5" y="147.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="635.8" y="163.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (6 samples, 0.17%)</title><rect x="636.2" y="211.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (6 samples, 0.17%)</title><rect x="636.2" y="195.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.14%)</title><rect x="636.2" y="179.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="639.2" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="636.2" y="163.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.11%)</title><rect x="636.5" y="163.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="639.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (4 samples, 0.11%)</title><rect x="636.5" y="147.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (4 samples, 0.11%)</title><rect x="636.5" y="131.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="639.5" y="142.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.03%)</title><rect x="636.5" y="115.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="639.5" y="126.0"></text>
</g>
<g>
<title>__libc_pread64 (2 samples, 0.06%)</title><rect x="636.8" y="115.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="639.8" y="126.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="637.5" y="115.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="640.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="637.8" y="179.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="637.8" y="163.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (14 samples, 0.40%)</title><rect x="638.2" y="227.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="641.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (14 samples, 0.40%)</title><rect x="638.2" y="211.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.06%)</title><rect x="638.2" y="195.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.2" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.06%)</title><rect x="638.2" y="179.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (12 samples, 0.34%)</title><rect x="638.8" y="195.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.8" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="638.8" y="179.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="641.8" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="638.8" y="163.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="641.8" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="638.8" y="147.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.8" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="638.8" y="131.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="641.8" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="638.8" y="115.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="641.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (10 samples, 0.28%)</title><rect x="639.2" y="179.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (10 samples, 0.28%)</title><rect x="639.2" y="163.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (10 samples, 0.28%)</title><rect x="639.2" y="147.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.2" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (8 samples, 0.23%)</title><rect x="639.5" y="131.0" width="2.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="642.5" y="142.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="642.2" y="131.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="645.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="642.5" y="179.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.5" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="642.5" y="163.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="645.5" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="642.5" y="147.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.5" y="158.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="642.8" y="291.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="645.8" y="302.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="642.8" y="275.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="645.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.03%)</title><rect x="642.8" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="645.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.03%)</title><rect x="642.8" y="243.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="645.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="642.8" y="227.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.8" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="642.8" y="211.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.8" y="222.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.03%)</title><rect x="642.8" y="195.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="645.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (19 samples, 0.54%)</title><rect x="643.2" y="435.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.2" y="446.0"></text>
</g>
<g>
<title>java/util/Collection.stream (19 samples, 0.54%)</title><rect x="643.2" y="419.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="646.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (19 samples, 0.54%)</title><rect x="643.2" y="403.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (19 samples, 0.54%)</title><rect x="643.2" y="387.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (11 samples, 0.31%)</title><rect x="644.5" y="371.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="647.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (11 samples, 0.31%)</title><rect x="644.5" y="355.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="647.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (10 samples, 0.28%)</title><rect x="644.8" y="339.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="647.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="645.2" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="645.2" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="648.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="645.2" y="291.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.2" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="645.2" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.2" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="645.2" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="648.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="645.2" y="243.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="648.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (8 samples, 0.23%)</title><rect x="645.5" y="323.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="648.5" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="645.8" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="648.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6 samples, 0.17%)</title><rect x="646.2" y="307.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="649.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.17%)</title><rect x="646.2" y="291.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="649.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.17%)</title><rect x="646.2" y="275.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="649.2" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.14%)</title><rect x="646.2" y="259.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="649.2" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.11%)</title><rect x="646.5" y="243.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.03%)</title><rect x="646.8" y="227.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="649.8" y="238.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.06%)</title><rect x="647.2" y="227.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="650.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="647.8" y="259.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="650.8" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="647.8" y="243.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="650.8" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="648.2" y="371.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="651.2" y="382.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="649.2" y="371.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="652.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (17 samples, 0.48%)</title><rect x="649.5" y="483.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="652.5" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (17 samples, 0.48%)</title><rect x="649.5" y="467.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="652.5" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 0.40%)</title><rect x="650.2" y="451.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.2" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.14%)</title><rect x="650.2" y="435.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="653.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.14%)</title><rect x="650.2" y="419.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="653.2" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.14%)</title><rect x="650.2" y="403.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.14%)</title><rect x="650.2" y="387.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="653.2" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.25%)</title><rect x="651.8" y="435.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="654.8" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.25%)</title><rect x="651.8" y="419.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="654.8" y="430.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="651.8" y="403.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="654.8" y="414.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="651.8" y="387.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="654.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8 samples, 0.23%)</title><rect x="652.2" y="403.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="655.2" y="414.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (8 samples, 0.23%)</title><rect x="652.2" y="387.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="655.2" y="398.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (5 samples, 0.14%)</title><rect x="652.5" y="371.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="655.5" y="382.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.06%)</title><rect x="652.5" y="355.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="655.5" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.03%)</title><rect x="653.2" y="355.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="656.2" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="653.5" y="355.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="656.5" y="366.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="653.5" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="656.5" y="350.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.03%)</title><rect x="653.8" y="355.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="656.8" y="366.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="654.2" y="371.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="657.2" y="382.0"></text>
</g>
<g>
<title>__send (1 samples, 0.03%)</title><rect x="654.5" y="371.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="657.5" y="382.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.03%)</title><rect x="654.8" y="451.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.sendReplica (1,084 samples, 30.63%)</title><rect x="655.2" y="515.0" width="361.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.2" y="526.0">ru/mail/polis/service/re1nex/ApiControllerImpl.se..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendReplica (1,084 samples, 30.63%)</title><rect x="655.2" y="499.0" width="361.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.2" y="510.0">ru/mail/polis/service/re1nex/ApiController.sendRe..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.severalNodesForKey (16 samples, 0.45%)</title><rect x="655.5" y="483.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.5" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.03%)</title><rect x="655.8" y="467.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (7 samples, 0.20%)</title><rect x="656.2" y="467.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.2" y="478.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (1 samples, 0.03%)</title><rect x="656.2" y="451.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.2" y="462.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (1 samples, 0.03%)</title><rect x="656.2" y="435.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="659.2" y="446.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (1 samples, 0.03%)</title><rect x="656.2" y="419.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="659.2" y="430.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (1 samples, 0.03%)</title><rect x="656.2" y="403.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.2" y="414.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (1 samples, 0.03%)</title><rect x="656.2" y="387.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="659.2" y="398.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bBig (1 samples, 0.03%)</title><rect x="656.2" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.2" y="382.0"></text>
</g>
<g>
<title>sha256_implCompress (1 samples, 0.03%)</title><rect x="656.2" y="355.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="659.2" y="366.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (6 samples, 0.17%)</title><rect x="656.5" y="451.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.5" y="462.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (6 samples, 0.17%)</title><rect x="656.5" y="435.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="659.5" y="446.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (1 samples, 0.03%)</title><rect x="656.5" y="419.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.03%)</title><rect x="656.5" y="403.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.5" y="414.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (5 samples, 0.14%)</title><rect x="656.8" y="419.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.8" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (5 samples, 0.14%)</title><rect x="656.8" y="403.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.8" y="414.0"></text>
</g>
<g>
<title>java/security/Provider.getService (3 samples, 0.08%)</title><rect x="656.8" y="387.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="659.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.08%)</title><rect x="656.8" y="371.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="659.8" y="382.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (2 samples, 0.06%)</title><rect x="657.8" y="387.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.8" y="398.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (2 samples, 0.06%)</title><rect x="657.8" y="371.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.getNodesFromMap (7 samples, 0.20%)</title><rect x="658.5" y="467.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="661.5" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (1 samples, 0.03%)</title><rect x="658.8" y="451.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="661.8" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.03%)</title><rect x="658.8" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="661.8" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (1 samples, 0.03%)</title><rect x="658.8" y="419.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="661.8" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (1 samples, 0.03%)</title><rect x="658.8" y="403.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.8" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (1 samples, 0.03%)</title><rect x="658.8" y="387.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.8" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.03%)</title><rect x="658.8" y="371.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="661.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="658.8" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="658.8" y="339.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="661.8" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="658.8" y="323.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.8" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$Values.iterator (1 samples, 0.03%)</title><rect x="659.2" y="451.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="662.2" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.03%)</title><rect x="659.2" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="662.2" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.values (2 samples, 0.06%)</title><rect x="659.5" y="451.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.5" y="462.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (2 samples, 0.06%)</title><rect x="660.2" y="451.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="663.2" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (2 samples, 0.06%)</title><rect x="660.2" y="435.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="663.2" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (2 samples, 0.06%)</title><rect x="660.2" y="419.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="663.2" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (2 samples, 0.06%)</title><rect x="660.2" y="403.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (1 samples, 0.03%)</title><rect x="660.5" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="663.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (1,067 samples, 30.15%)</title><rect x="660.9" y="483.0" width="355.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="663.9" y="494.0">ru/mail/polis/service/re1nex/ApiControllerImpl.h..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (1,052 samples, 29.73%)</title><rect x="660.9" y="467.0" width="350.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="663.9" y="478.0">ru/mail/polis/service/re1nex/ApiControllerImpl.h..</text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.08%)</title><rect x="661.2" y="451.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="664.2" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.08%)</title><rect x="661.2" y="435.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.2" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.03%)</title><rect x="661.9" y="419.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.9" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.03%)</title><rect x="661.9" y="403.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="664.9" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.03%)</title><rect x="661.9" y="387.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="664.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.removeLocal (2 samples, 0.06%)</title><rect x="662.2" y="451.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="665.2" y="462.0"></text>
</g>
<g>
<title>java/util/TreeSet.remove (2 samples, 0.06%)</title><rect x="662.2" y="435.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="665.2" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (2 samples, 0.06%)</title><rect x="662.2" y="419.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="665.2" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.deleteEntry (2 samples, 0.06%)</title><rect x="662.2" y="403.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.2" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="662.2" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="665.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (1 samples, 0.03%)</title><rect x="662.5" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="665.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl$$Lambda$77/796376195.handleLocalResponse (980 samples, 27.69%)</title><rect x="662.9" y="451.0" width="326.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="665.9" y="462.0">ru/mail/polis/service/re1nex/ApiControllerIm..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.lambda$handleResponses$0 (980 samples, 27.69%)</title><rect x="662.9" y="435.0" width="326.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="665.9" y="446.0">ru/mail/polis/service/re1nex/ApiControllerIm..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (980 samples, 27.69%)</title><rect x="662.9" y="419.0" width="326.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="665.9" y="430.0">ru/mail/polis/service/re1nex/ApiControllerIm..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/927691409.linkToTargetMethod (1 samples, 0.03%)</title><rect x="662.9" y="403.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.9" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/361103641.invoke (1 samples, 0.03%)</title><rect x="662.9" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="665.9" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="662.9" y="371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="665.9" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.03%)</title><rect x="662.9" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (979 samples, 27.66%)</title><rect x="663.2" y="403.0" width="326.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.2" y="414.0">ru/mail/polis/dao/DAO.getValue</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (107 samples, 3.02%)</title><rect x="663.2" y="387.0" width="35.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="666.2" y="398.0">ru/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (107 samples, 3.02%)</title><rect x="663.2" y="371.0" width="35.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.2" y="382.0">com..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (3 samples, 0.08%)</title><rect x="663.2" y="355.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.2" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (3 samples, 0.08%)</title><rect x="663.2" y="339.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.2" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (3 samples, 0.08%)</title><rect x="663.2" y="323.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="666.2" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.08%)</title><rect x="663.2" y="307.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.2" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (3 samples, 0.08%)</title><rect x="663.2" y="291.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.2" y="302.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="663.9" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="666.9" y="286.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="663.9" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.03%)</title><rect x="663.9" y="243.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.03%)</title><rect x="663.9" y="227.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.03%)</title><rect x="663.9" y="211.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.9" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="663.9" y="195.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="666.9" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="663.9" y="179.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="666.9" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="663.9" y="163.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="663.9" y="147.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.9" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="663.9" y="131.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="666.9" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="663.9" y="115.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.9" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="663.9" y="99.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.9" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="663.9" y="83.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="666.9" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (104 samples, 2.94%)</title><rect x="664.2" y="355.0" width="34.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="667.2" y="366.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (104 samples, 2.94%)</title><rect x="664.2" y="339.0" width="34.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="667.2" y="350.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (104 samples, 2.94%)</title><rect x="664.2" y="323.0" width="34.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.2" y="334.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (104 samples, 2.94%)</title><rect x="664.2" y="307.0" width="34.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="667.2" y="318.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (104 samples, 2.94%)</title><rect x="664.2" y="291.0" width="34.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.2" y="302.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (104 samples, 2.94%)</title><rect x="664.2" y="275.0" width="34.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="667.2" y="286.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (104 samples, 2.94%)</title><rect x="664.2" y="259.0" width="34.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="667.2" y="270.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (103 samples, 2.91%)</title><rect x="664.5" y="243.0" width="34.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="667.5" y="254.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (103 samples, 2.91%)</title><rect x="664.5" y="227.0" width="34.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="667.5" y="238.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (103 samples, 2.91%)</title><rect x="664.5" y="211.0" width="34.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="667.5" y="222.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="664.5" y="195.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (19 samples, 0.54%)</title><rect x="664.9" y="195.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="667.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (19 samples, 0.54%)</title><rect x="664.9" y="179.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (19 samples, 0.54%)</title><rect x="664.9" y="163.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="667.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.03%)</title><rect x="664.9" y="147.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="667.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (3 samples, 0.08%)</title><rect x="665.2" y="147.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.2" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.08%)</title><rect x="665.2" y="131.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.2" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="665.9" y="115.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.9" y="126.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="665.9" y="99.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="668.9" y="110.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="665.9" y="83.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (14 samples, 0.40%)</title><rect x="666.2" y="147.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="669.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (13 samples, 0.37%)</title><rect x="666.2" y="131.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="669.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (13 samples, 0.37%)</title><rect x="666.2" y="115.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="669.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (13 samples, 0.37%)</title><rect x="666.2" y="99.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="669.2" y="110.0"></text>
</g>
<g>
<title>__libc_pread64 (12 samples, 0.34%)</title><rect x="666.5" y="83.0" width="4.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="669.5" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="670.5" y="131.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="673.5" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="670.5" y="115.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="673.5" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="670.5" y="99.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="673.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="670.9" y="147.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="670.9" y="131.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="673.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (43 samples, 1.22%)</title><rect x="671.2" y="195.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="674.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (10 samples, 0.28%)</title><rect x="671.2" y="179.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="671.2" y="163.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="674.2" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="671.2" y="147.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="674.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="671.2" y="131.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (9 samples, 0.25%)</title><rect x="671.5" y="163.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="674.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (9 samples, 0.25%)</title><rect x="671.5" y="147.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="674.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 0.25%)</title><rect x="671.5" y="131.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="674.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.23%)</title><rect x="671.5" y="115.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="674.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (8 samples, 0.23%)</title><rect x="671.5" y="99.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="674.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (8 samples, 0.23%)</title><rect x="671.5" y="83.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="674.5" y="94.0"></text>
</g>
<g>
<title>__libc_pread64 (7 samples, 0.20%)</title><rect x="671.5" y="67.0" width="2.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="674.5" y="78.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="673.9" y="67.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="676.9" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="674.2" y="115.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="677.2" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="674.2" y="99.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="677.2" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="674.2" y="83.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="677.2" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (33 samples, 0.93%)</title><rect x="674.5" y="179.0" width="11.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="677.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (33 samples, 0.93%)</title><rect x="674.5" y="163.0" width="11.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="677.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.03%)</title><rect x="674.5" y="147.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="677.5" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="674.5" y="131.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="677.5" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="674.5" y="115.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="677.5" y="126.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="674.5" y="99.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="677.5" y="110.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="674.5" y="83.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.5" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="674.9" y="147.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="677.9" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="674.9" y="131.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="677.9" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="674.9" y="115.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="677.9" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/SharedSecrets.getJavaLangAccess (1 samples, 0.03%)</title><rect x="674.9" y="99.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="677.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.73%)</title><rect x="675.2" y="147.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="678.2" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="675.2" y="131.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.2" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="675.2" y="115.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="678.2" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="675.2" y="99.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="678.2" y="110.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="675.2" y="83.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="678.2" y="94.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="675.2" y="67.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.2" y="78.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.03%)</title><rect x="675.2" y="51.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="678.2" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (23 samples, 0.65%)</title><rect x="675.5" y="131.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (23 samples, 0.65%)</title><rect x="675.5" y="115.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="678.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (23 samples, 0.65%)</title><rect x="675.5" y="99.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.5" y="110.0"></text>
</g>
<g>
<title>__libc_pread64 (20 samples, 0.57%)</title><rect x="676.2" y="83.0" width="6.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="679.2" y="94.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="682.9" y="83.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="685.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="683.2" y="131.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="686.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="683.5" y="115.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="686.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (5 samples, 0.14%)</title><rect x="683.9" y="147.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="686.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="685.2" y="131.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="688.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (40 samples, 1.13%)</title><rect x="685.5" y="195.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="688.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (40 samples, 1.13%)</title><rect x="685.5" y="179.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (38 samples, 1.07%)</title><rect x="685.5" y="163.0" width="12.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="688.5" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="685.5" y="147.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="688.5" y="158.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="685.5" y="131.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.5" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="685.5" y="115.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="688.5" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="685.5" y="99.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="688.5" y="110.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="685.5" y="83.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="688.5" y="94.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.03%)</title><rect x="685.5" y="67.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="688.5" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (32 samples, 0.90%)</title><rect x="685.9" y="147.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="688.9" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="685.9" y="131.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.9" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="685.9" y="115.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="688.9" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="685.9" y="99.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="688.9" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="685.9" y="83.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="688.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (31 samples, 0.88%)</title><rect x="686.2" y="131.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="689.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (31 samples, 0.88%)</title><rect x="686.2" y="115.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="689.2" y="126.0"></text>
</g>
<g>
<title>__libc_pread64 (28 samples, 0.79%)</title><rect x="686.2" y="99.0" width="9.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="689.2" y="110.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.06%)</title><rect x="695.5" y="99.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="698.5" y="110.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="696.2" y="99.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="699.2" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.14%)</title><rect x="696.5" y="147.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="699.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.08%)</title><rect x="697.2" y="131.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="700.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.06%)</title><rect x="698.2" y="163.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="701.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="698.5" y="147.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="701.5" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (872 samples, 24.64%)</title><rect x="698.9" y="387.0" width="290.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="701.9" y="398.0">ru/mail/polis/dao/re1nex/NewDAO.cellIte..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (109 samples, 3.08%)</title><rect x="698.9" y="371.0" width="36.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="701.9" y="382.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (109 samples, 3.08%)</title><rect x="698.9" y="355.0" width="36.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="701.9" y="366.0">com..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (106 samples, 3.00%)</title><rect x="699.2" y="339.0" width="35.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.2" y="350.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (106 samples, 3.00%)</title><rect x="699.2" y="323.0" width="35.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="702.2" y="334.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (106 samples, 3.00%)</title><rect x="699.2" y="307.0" width="35.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="702.2" y="318.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (106 samples, 3.00%)</title><rect x="699.2" y="291.0" width="35.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="702.2" y="302.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (106 samples, 3.00%)</title><rect x="699.2" y="275.0" width="35.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="702.2" y="286.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (106 samples, 3.00%)</title><rect x="699.2" y="259.0" width="35.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="702.2" y="270.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (106 samples, 3.00%)</title><rect x="699.2" y="243.0" width="35.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="702.2" y="254.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (105 samples, 2.97%)</title><rect x="699.5" y="227.0" width="35.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="702.5" y="238.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (104 samples, 2.94%)</title><rect x="699.9" y="211.0" width="34.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="702.9" y="222.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (104 samples, 2.94%)</title><rect x="699.9" y="195.0" width="34.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="702.9" y="206.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="699.9" y="179.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="702.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (16 samples, 0.45%)</title><rect x="700.2" y="179.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="703.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="700.2" y="163.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="703.2" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="700.2" y="147.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="703.2" y="158.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="700.2" y="131.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="703.2" y="142.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="700.2" y="115.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="703.2" y="126.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="700.2" y="99.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="703.2" y="110.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="700.2" y="83.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="703.2" y="94.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="700.2" y="67.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="703.2" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (15 samples, 0.42%)</title><rect x="700.5" y="163.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="703.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (15 samples, 0.42%)</title><rect x="700.5" y="147.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="703.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (6 samples, 0.17%)</title><rect x="700.9" y="131.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="703.9" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (6 samples, 0.17%)</title><rect x="700.9" y="115.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="703.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (7 samples, 0.20%)</title><rect x="702.9" y="131.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="705.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (7 samples, 0.20%)</title><rect x="702.9" y="115.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="705.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (7 samples, 0.20%)</title><rect x="702.9" y="99.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="705.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (7 samples, 0.20%)</title><rect x="702.9" y="83.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="705.9" y="94.0"></text>
</g>
<g>
<title>__libc_pread64 (6 samples, 0.17%)</title><rect x="703.2" y="67.0" width="2.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="706.2" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="705.2" y="131.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (43 samples, 1.22%)</title><rect x="705.5" y="179.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.5" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="705.5" y="163.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="708.5" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="705.5" y="147.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="708.5" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="705.5" y="131.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="708.5" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="705.5" y="115.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="708.5" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="705.5" y="99.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="708.5" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="705.5" y="83.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="708.5" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="705.5" y="67.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="708.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (11 samples, 0.31%)</title><rect x="705.9" y="163.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="708.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="705.9" y="147.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.9" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="705.9" y="131.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="708.9" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="705.9" y="115.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="708.9" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="705.9" y="99.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="708.9" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="705.9" y="83.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="708.9" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="705.9" y="67.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="708.9" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (10 samples, 0.28%)</title><rect x="706.2" y="147.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="709.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (10 samples, 0.28%)</title><rect x="706.2" y="131.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="709.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8 samples, 0.23%)</title><rect x="706.2" y="115.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="709.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.17%)</title><rect x="706.2" y="99.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.2" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (6 samples, 0.17%)</title><rect x="706.2" y="83.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.2" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (6 samples, 0.17%)</title><rect x="706.2" y="67.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="709.2" y="78.0"></text>
</g>
<g>
<title>__libc_pread64 (5 samples, 0.14%)</title><rect x="706.2" y="51.0" width="1.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="709.2" y="62.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="707.9" y="51.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="710.9" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="708.2" y="99.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.2" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.06%)</title><rect x="708.2" y="83.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="711.2" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.06%)</title><rect x="708.9" y="115.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="711.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.06%)</title><rect x="708.9" y="99.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="711.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (31 samples, 0.88%)</title><rect x="709.5" y="163.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="712.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (31 samples, 0.88%)</title><rect x="709.5" y="147.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="712.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.03%)</title><rect x="709.5" y="131.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="712.5" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="709.5" y="115.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.5" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="709.5" y="99.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.5" y="110.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="709.5" y="83.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.5" y="94.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="709.5" y="67.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="712.5" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.73%)</title><rect x="709.9" y="131.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.9" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.06%)</title><rect x="709.9" y="115.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.9" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.06%)</title><rect x="709.9" y="99.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="712.9" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (1 samples, 0.03%)</title><rect x="709.9" y="83.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="712.9" y="94.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="710.2" y="83.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="713.2" y="94.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="710.2" y="67.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="713.2" y="78.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="710.2" y="51.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.2" y="62.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.03%)</title><rect x="710.2" y="35.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="713.2" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (15 samples, 0.42%)</title><rect x="710.5" y="115.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="713.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (15 samples, 0.42%)</title><rect x="710.5" y="99.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="713.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (15 samples, 0.42%)</title><rect x="710.5" y="83.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="713.5" y="94.0"></text>
</g>
<g>
<title>__libc_pread64 (12 samples, 0.34%)</title><rect x="711.2" y="67.0" width="4.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="714.2" y="78.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="715.2" y="67.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="718.2" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.25%)</title><rect x="715.5" y="115.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.5" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.06%)</title><rect x="716.9" y="99.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="719.9" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.06%)</title><rect x="716.9" y="83.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.9" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="717.2" y="67.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="720.2" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.08%)</title><rect x="717.5" y="99.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="720.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (4 samples, 0.11%)</title><rect x="718.5" y="131.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="721.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.06%)</title><rect x="719.2" y="115.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="722.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (44 samples, 1.24%)</title><rect x="719.9" y="179.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="722.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (44 samples, 1.24%)</title><rect x="719.9" y="163.0" width="14.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="722.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (4 samples, 0.11%)</title><rect x="719.9" y="147.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="722.9" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (4 samples, 0.11%)</title><rect x="719.9" y="131.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="722.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (38 samples, 1.07%)</title><rect x="721.2" y="147.0" width="12.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="724.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (27 samples, 0.76%)</title><rect x="721.2" y="131.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="724.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (27 samples, 0.76%)</title><rect x="721.2" y="115.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (27 samples, 0.76%)</title><rect x="721.2" y="99.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="724.2" y="110.0"></text>
</g>
<g>
<title>__libc_pread64 (22 samples, 0.62%)</title><rect x="721.9" y="83.0" width="7.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="724.9" y="94.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="729.2" y="83.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="732.2" y="94.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="729.5" y="83.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="732.5" y="94.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="729.9" y="83.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="732.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.31%)</title><rect x="730.2" y="131.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="733.2" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.17%)</title><rect x="730.9" y="115.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="733.9" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.17%)</title><rect x="730.9" y="99.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="733.9" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.11%)</title><rect x="731.5" y="83.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.5" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.nextIndex (1 samples, 0.03%)</title><rect x="732.2" y="67.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="735.2" y="78.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="732.5" y="67.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="735.5" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.08%)</title><rect x="732.9" y="115.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="735.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.06%)</title><rect x="733.9" y="147.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="736.9" y="158.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (2 samples, 0.06%)</title><rect x="734.5" y="339.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="737.5" y="350.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (2 samples, 0.06%)</title><rect x="734.5" y="323.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.5" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (2 samples, 0.06%)</title><rect x="734.5" y="307.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="737.5" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.03%)</title><rect x="734.5" y="291.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="737.5" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$75/869776578.getAsBoolean (1 samples, 0.03%)</title><rect x="734.5" y="275.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="737.5" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (1 samples, 0.03%)</title><rect x="734.5" y="259.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="737.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (1 samples, 0.03%)</title><rect x="734.5" y="243.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="734.5" y="227.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="737.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="734.5" y="211.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="737.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.03%)</title><rect x="734.5" y="195.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="737.5" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (1 samples, 0.03%)</title><rect x="734.9" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="737.9" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.03%)</title><rect x="734.9" y="275.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.9" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.03%)</title><rect x="734.9" y="259.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="737.9" y="270.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (734 samples, 20.74%)</title><rect x="735.2" y="371.0" width="244.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="738.2" y="382.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.03%)</title><rect x="735.2" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.2" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="735.2" y="339.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="738.2" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="735.2" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="738.2" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.prevEntry (1 samples, 0.03%)</title><rect x="735.2" y="307.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="738.2" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.predecessor (1 samples, 0.03%)</title><rect x="735.2" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="738.2" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2 samples, 0.06%)</title><rect x="735.5" y="355.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="738.5" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2 samples, 0.06%)</title><rect x="735.5" y="339.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="738.5" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (2 samples, 0.06%)</title><rect x="735.5" y="323.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.5" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (2 samples, 0.06%)</title><rect x="735.5" y="307.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="738.5" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (2 samples, 0.06%)</title><rect x="735.5" y="291.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="738.5" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.03%)</title><rect x="735.9" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="738.9" y="286.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="735.9" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="735.9" y="243.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="738.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="735.9" y="227.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="738.9" y="238.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="735.9" y="211.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="738.9" y="222.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="735.9" y="195.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="738.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$79/423943441.accept (731 samples, 20.66%)</title><rect x="736.2" y="355.0" width="243.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="739.2" y="366.0">ru/mail/polis/dao/re1nex/NewDAO$..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIterator$5 (731 samples, 20.66%)</title><rect x="736.2" y="339.0" width="243.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="739.2" y="350.0">ru/mail/polis/dao/re1nex/NewDAO...</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.iterator (731 samples, 20.66%)</title><rect x="736.2" y="323.0" width="243.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.2" y="334.0">ru/mail/polis/dao/re1nex/SSTable..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt; (731 samples, 20.66%)</title><rect x="736.2" y="307.0" width="243.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="739.2" y="318.0">ru/mail/polis/dao/re1nex/SSTable..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.binarySearch (730 samples, 20.63%)</title><rect x="736.5" y="291.0" width="243.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="739.5" y="302.0">ru/mail/polis/dao/re1nex/SSTable..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.14%)</title><rect x="736.5" y="275.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.5" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.11%)</title><rect x="736.9" y="259.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="739.9" y="270.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.06%)</title><rect x="737.5" y="243.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="740.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (725 samples, 20.49%)</title><rect x="738.2" y="275.0" width="241.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="741.2" y="286.0">ru/mail/polis/dao/re1nex/SSTable..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (35 samples, 0.99%)</title><rect x="738.5" y="259.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="741.5" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (6 samples, 0.17%)</title><rect x="738.9" y="243.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="741.9" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (6 samples, 0.17%)</title><rect x="738.9" y="227.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="741.9" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (5 samples, 0.14%)</title><rect x="739.2" y="211.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="742.2" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.14%)</title><rect x="739.2" y="195.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.2" y="206.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="739.2" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="742.2" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="739.5" y="179.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="742.5" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.08%)</title><rect x="739.9" y="179.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="742.9" y="190.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="739.9" y="163.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.9" y="174.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="740.2" y="163.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="743.2" y="174.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="740.5" y="163.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="743.5" y="174.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (1 samples, 0.03%)</title><rect x="740.9" y="243.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="743.9" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (27 samples, 0.76%)</title><rect x="741.2" y="243.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="744.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (25 samples, 0.71%)</title><rect x="741.9" y="227.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="744.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (10 samples, 0.28%)</title><rect x="746.9" y="211.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="749.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.11%)</title><rect x="747.5" y="195.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="750.5" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.11%)</title><rect x="747.5" y="179.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="750.5" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.06%)</title><rect x="748.2" y="163.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="751.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.11%)</title><rect x="748.9" y="195.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="751.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.11%)</title><rect x="748.9" y="179.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="751.9" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.08%)</title><rect x="749.2" y="163.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="752.2" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (6 samples, 0.17%)</title><rect x="750.2" y="259.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (251 samples, 7.09%)</title><rect x="752.2" y="259.0" width="83.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="755.2" y="270.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.20%)</title><rect x="752.5" y="243.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="755.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="752.9" y="227.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="755.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.17%)</title><rect x="752.9" y="211.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="755.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (243 samples, 6.87%)</title><rect x="754.9" y="243.0" width="81.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.9" y="254.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.ensureOpen (2 samples, 0.06%)</title><rect x="756.2" y="227.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="759.2" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.03%)</title><rect x="756.5" y="211.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="759.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (237 samples, 6.70%)</title><rect x="756.9" y="227.0" width="79.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="759.9" y="238.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (31 samples, 0.88%)</title><rect x="759.2" y="211.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.2" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (30 samples, 0.85%)</title><rect x="759.2" y="195.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="762.2" y="206.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 0.11%)</title><rect x="760.2" y="179.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="763.2" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel$1.&lt;init&gt; (1 samples, 0.03%)</title><rect x="761.5" y="179.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.5" y="190.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="761.5" y="163.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="764.5" y="174.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (21 samples, 0.59%)</title><rect x="761.9" y="179.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="764.9" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (20 samples, 0.57%)</title><rect x="762.2" y="163.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="765.2" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (20 samples, 0.57%)</title><rect x="762.2" y="147.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="765.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="768.9" y="179.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="771.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="769.2" y="195.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="772.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.06%)</title><rect x="769.5" y="211.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="772.5" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.06%)</title><rect x="769.5" y="195.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="772.5" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="769.9" y="179.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="772.9" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="769.9" y="163.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="772.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (181 samples, 5.11%)</title><rect x="770.2" y="211.0" width="60.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.2" y="222.0">sun/ni..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (5 samples, 0.14%)</title><rect x="770.2" y="195.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="773.2" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="770.2" y="179.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.2" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.11%)</title><rect x="770.5" y="179.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.5" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.08%)</title><rect x="770.9" y="163.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="773.9" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.08%)</title><rect x="770.9" y="147.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="773.9" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.08%)</title><rect x="770.9" y="131.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="773.9" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.08%)</title><rect x="770.9" y="115.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="773.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (151 samples, 4.27%)</title><rect x="771.9" y="195.0" width="50.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="774.9" y="206.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (151 samples, 4.27%)</title><rect x="771.9" y="179.0" width="50.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.9" y="190.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (151 samples, 4.27%)</title><rect x="771.9" y="163.0" width="50.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.9" y="174.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.03%)</title><rect x="774.2" y="147.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="777.2" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (133 samples, 3.76%)</title><rect x="774.5" y="147.0" width="44.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="777.5" y="158.0">__li..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.20%)</title><rect x="818.9" y="147.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="821.9" y="158.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.08%)</title><rect x="821.2" y="147.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="824.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (25 samples, 0.71%)</title><rect x="822.2" y="195.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="825.2" y="206.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.03%)</title><rect x="824.6" y="179.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="827.6" y="190.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.03%)</title><rect x="824.6" y="163.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="827.6" y="174.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.03%)</title><rect x="824.6" y="147.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="827.6" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.25%)</title><rect x="824.9" y="179.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="827.9" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.23%)</title><rect x="825.2" y="163.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="828.2" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.17%)</title><rect x="825.9" y="147.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="828.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (8 samples, 0.23%)</title><rect x="827.9" y="179.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="830.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (16 samples, 0.45%)</title><rect x="830.6" y="211.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="833.6" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="834.2" y="195.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="837.2" y="206.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="834.2" y="179.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="837.2" y="190.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="834.2" y="163.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="837.2" y="174.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.03%)</title><rect x="834.2" y="147.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="837.2" y="158.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="834.6" y="195.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="837.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.08%)</title><rect x="834.9" y="195.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="837.9" y="206.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.03%)</title><rect x="835.6" y="179.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="838.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (432 samples, 12.21%)</title><rect x="835.9" y="259.0" width="144.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.9" y="270.0">sun/nio/ch/FileCha..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.ensureOpen (2 samples, 0.06%)</title><rect x="836.6" y="243.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="839.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (428 samples, 12.09%)</title><rect x="837.2" y="243.0" width="142.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="840.2" y="254.0">sun/nio/ch/FileCha..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (11 samples, 0.31%)</title><rect x="839.2" y="227.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="842.2" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (10 samples, 0.28%)</title><rect x="839.6" y="211.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="842.6" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="842.6" y="195.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="845.6" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/SharedSecrets.getJavaLangAccess (1 samples, 0.03%)</title><rect x="842.6" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="845.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.06%)</title><rect x="842.9" y="227.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="845.9" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.06%)</title><rect x="842.9" y="211.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.9" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.06%)</title><rect x="842.9" y="195.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="845.9" y="206.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.06%)</title><rect x="842.9" y="179.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="845.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (385 samples, 10.88%)</title><rect x="843.6" y="227.0" width="128.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.6" y="238.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (9 samples, 0.25%)</title><rect x="843.6" y="211.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="846.6" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (7 samples, 0.20%)</title><rect x="844.2" y="195.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="847.2" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (1 samples, 0.03%)</title><rect x="844.9" y="179.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.9" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.11%)</title><rect x="845.2" y="179.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="848.2" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.11%)</title><rect x="845.2" y="163.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="848.2" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.11%)</title><rect x="845.2" y="147.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="848.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (308 samples, 8.70%)</title><rect x="846.6" y="211.0" width="102.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="849.6" y="222.0">sun/nio/ch/I..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.08%)</title><rect x="846.6" y="195.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="849.6" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.08%)</title><rect x="846.6" y="179.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="849.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.08%)</title><rect x="846.6" y="163.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="849.6" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.08%)</title><rect x="846.6" y="147.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="849.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (305 samples, 8.62%)</title><rect x="847.6" y="195.0" width="101.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="850.6" y="206.0">sun/nio/ch/F..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (304 samples, 8.59%)</title><rect x="847.9" y="179.0" width="101.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="850.9" y="190.0">sun/nio/ch/F..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (4 samples, 0.11%)</title><rect x="852.2" y="163.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="855.2" y="174.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.06%)</title><rect x="852.9" y="147.0" width="0.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="855.9" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (272 samples, 7.69%)</title><rect x="853.6" y="163.0" width="90.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="856.6" y="174.0">__libc_pre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (9 samples, 0.25%)</title><rect x="944.3" y="163.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="947.3" y="174.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.08%)</title><rect x="947.3" y="163.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="950.3" y="174.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="948.3" y="163.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="951.3" y="174.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.06%)</title><rect x="948.6" y="163.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="951.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (68 samples, 1.92%)</title><rect x="949.3" y="211.0" width="22.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="952.3" y="222.0">s..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (28 samples, 0.79%)</title><rect x="954.9" y="195.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="957.9" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (26 samples, 0.73%)</title><rect x="955.6" y="179.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="958.6" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (13 samples, 0.37%)</title><rect x="959.9" y="163.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="962.9" y="174.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="963.6" y="147.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="966.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.03%)</title><rect x="963.9" y="147.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="966.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (23 samples, 0.65%)</title><rect x="964.3" y="195.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="967.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="971.6" y="179.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="974.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (12 samples, 0.34%)</title><rect x="971.9" y="227.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="974.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (12 samples, 0.34%)</title><rect x="971.9" y="211.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="974.9" y="222.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (2 samples, 0.06%)</title><rect x="975.3" y="195.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="978.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (12 samples, 0.34%)</title><rect x="975.9" y="227.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="978.9" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="979.6" y="211.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="982.6" y="222.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="979.6" y="195.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="982.6" y="206.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="979.6" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="982.6" y="190.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.03%)</title><rect x="979.6" y="163.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="982.6" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.03%)</title><rect x="979.9" y="371.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="982.9" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.03%)</title><rect x="979.9" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="982.9" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.03%)</title><rect x="979.9" y="339.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="982.9" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.03%)</title><rect x="979.9" y="323.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="982.9" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="979.9" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="982.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.03%)</title><rect x="980.3" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="983.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.03%)</title><rect x="980.3" y="355.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="983.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.03%)</title><rect x="980.3" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="983.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="980.3" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="983.3" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.03%)</title><rect x="980.3" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="983.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (18 samples, 0.51%)</title><rect x="980.6" y="371.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="983.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (18 samples, 0.51%)</title><rect x="980.6" y="355.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="983.6" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (18 samples, 0.51%)</title><rect x="980.6" y="339.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="983.6" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.03%)</title><rect x="980.6" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="983.6" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.03%)</title><rect x="980.6" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="983.6" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1 samples, 0.03%)</title><rect x="980.6" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="983.6" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.03%)</title><rect x="980.6" y="275.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="983.6" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.03%)</title><rect x="980.6" y="259.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="983.6" y="270.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="980.6" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="983.6" y="254.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="980.6" y="227.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="983.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.03%)</title><rect x="980.6" y="211.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="983.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.03%)</title><rect x="980.6" y="195.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="983.6" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (17 samples, 0.48%)</title><rect x="980.9" y="323.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="983.9" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (16 samples, 0.45%)</title><rect x="981.3" y="307.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="984.3" y="318.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (16 samples, 0.45%)</title><rect x="981.3" y="291.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="984.3" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (16 samples, 0.45%)</title><rect x="981.3" y="275.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="984.3" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16 samples, 0.45%)</title><rect x="981.3" y="259.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="984.3" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (16 samples, 0.45%)</title><rect x="981.3" y="243.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="984.3" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (16 samples, 0.45%)</title><rect x="981.3" y="227.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="984.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (16 samples, 0.45%)</title><rect x="981.3" y="211.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="984.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (16 samples, 0.45%)</title><rect x="981.3" y="195.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="984.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (16 samples, 0.45%)</title><rect x="981.3" y="179.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="984.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="981.3" y="163.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="984.3" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="981.3" y="147.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="984.3" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="981.3" y="131.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="984.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (3 samples, 0.08%)</title><rect x="981.6" y="163.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="984.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (3 samples, 0.08%)</title><rect x="981.6" y="147.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="984.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (3 samples, 0.08%)</title><rect x="981.6" y="131.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="984.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.03%)</title><rect x="981.6" y="115.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="984.6" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="981.6" y="99.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="984.6" y="110.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="981.6" y="83.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="984.6" y="94.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="981.6" y="67.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="984.6" y="78.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="981.6" y="51.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="984.6" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="981.9" y="115.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="984.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="981.9" y="99.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="984.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (2 samples, 0.06%)</title><rect x="981.9" y="83.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="984.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (2 samples, 0.06%)</title><rect x="981.9" y="67.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="984.9" y="78.0"></text>
</g>
<g>
<title>__libc_pread64 (1 samples, 0.03%)</title><rect x="981.9" y="51.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="984.9" y="62.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="982.3" y="51.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="985.3" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (7 samples, 0.20%)</title><rect x="982.6" y="163.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="985.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (4 samples, 0.11%)</title><rect x="982.6" y="147.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="985.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (4 samples, 0.11%)</title><rect x="982.6" y="131.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="985.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (4 samples, 0.11%)</title><rect x="982.6" y="115.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="985.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.11%)</title><rect x="982.6" y="99.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="985.6" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.11%)</title><rect x="982.6" y="83.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="985.6" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (4 samples, 0.11%)</title><rect x="982.6" y="67.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="985.6" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (4 samples, 0.11%)</title><rect x="982.6" y="51.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="985.6" y="62.0"></text>
</g>
<g>
<title>__libc_pread64 (4 samples, 0.11%)</title><rect x="982.6" y="35.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="985.6" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (3 samples, 0.08%)</title><rect x="983.9" y="147.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="986.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (3 samples, 0.08%)</title><rect x="983.9" y="131.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="986.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.08%)</title><rect x="983.9" y="115.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="986.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.03%)</title><rect x="983.9" y="99.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="986.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (1 samples, 0.03%)</title><rect x="983.9" y="83.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="986.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.03%)</title><rect x="983.9" y="67.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="986.9" y="78.0"></text>
</g>
<g>
<title>__libc_pread64 (1 samples, 0.03%)</title><rect x="983.9" y="51.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="986.9" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="984.3" y="99.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="987.3" y="110.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.03%)</title><rect x="984.3" y="83.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.3" y="94.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.03%)</title><rect x="984.3" y="67.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.3" y="78.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.03%)</title><rect x="984.3" y="51.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.3" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="984.6" y="83.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="987.6" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (5 samples, 0.14%)</title><rect x="984.9" y="163.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (5 samples, 0.14%)</title><rect x="984.9" y="147.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="987.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.14%)</title><rect x="984.9" y="131.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="987.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.11%)</title><rect x="984.9" y="115.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="987.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (4 samples, 0.11%)</title><rect x="984.9" y="99.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="987.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (4 samples, 0.11%)</title><rect x="984.9" y="83.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="987.9" y="94.0"></text>
</g>
<g>
<title>__libc_pread64 (3 samples, 0.08%)</title><rect x="984.9" y="67.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="987.9" y="78.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="985.9" y="67.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="988.9" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="986.3" y="115.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="989.3" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="986.3" y="99.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="989.3" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="986.3" y="83.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="989.3" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="986.3" y="67.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="989.3" y="78.0"></text>
</g>
<g>
<title>jlong_arraycopy (1 samples, 0.03%)</title><rect x="986.3" y="51.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="989.3" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (9 samples, 0.25%)</title><rect x="986.6" y="371.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="989.6" y="382.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.06%)</title><rect x="986.6" y="355.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="989.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (1 samples, 0.03%)</title><rect x="986.6" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="989.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="986.6" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="989.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="986.6" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="989.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (1 samples, 0.03%)</title><rect x="986.6" y="291.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="989.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (1 samples, 0.03%)</title><rect x="986.6" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="989.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (1 samples, 0.03%)</title><rect x="986.6" y="259.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="989.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="986.6" y="243.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="989.6" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.03%)</title><rect x="986.9" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="989.9" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (1 samples, 0.03%)</title><rect x="986.9" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="989.9" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.03%)</title><rect x="986.9" y="307.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="989.9" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.03%)</title><rect x="986.9" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="989.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 0.17%)</title><rect x="987.3" y="355.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="990.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 0.17%)</title><rect x="987.3" y="339.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="990.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 0.17%)</title><rect x="987.3" y="323.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="990.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (6 samples, 0.17%)</title><rect x="987.3" y="307.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="990.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (1 samples, 0.03%)</title><rect x="989.3" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="992.3" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (1 samples, 0.03%)</title><rect x="989.3" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="992.3" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (1 samples, 0.03%)</title><rect x="989.3" y="323.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="992.3" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="989.3" y="307.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.proxy (66 samples, 1.86%)</title><rect x="989.6" y="451.0" width="22.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="992.6" y="462.0">r..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="989.9" y="435.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="992.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="989.9" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="992.9" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1 samples, 0.03%)</title><rect x="989.9" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="992.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (63 samples, 1.78%)</title><rect x="990.3" y="435.0" width="21.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="993.3" y="446.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (63 samples, 1.78%)</title><rect x="990.3" y="419.0" width="21.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="993.3" y="430.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (21 samples, 0.59%)</title><rect x="990.3" y="403.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="993.3" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="990.3" y="387.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="993.3" y="398.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="990.6" y="371.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="993.6" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="990.6" y="355.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.6" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="990.6" y="339.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="993.6" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="990.6" y="323.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="993.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (19 samples, 0.54%)</title><rect x="990.9" y="387.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="993.9" y="398.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (8 samples, 0.23%)</title><rect x="991.9" y="371.0" width="2.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="994.9" y="382.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="992.3" y="355.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="995.3" y="366.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="992.6" y="355.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.6" y="366.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="992.9" y="355.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.9" y="366.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.11%)</title><rect x="993.3" y="355.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="996.3" y="366.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="993.3" y="339.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.3" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.03%)</title><rect x="993.6" y="339.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="996.6" y="350.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.06%)</title><rect x="993.9" y="339.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="996.9" y="350.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="994.3" y="323.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="997.3" y="334.0"></text>
</g>
<g>
<title>recv (8 samples, 0.23%)</title><rect x="994.6" y="371.0" width="2.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="997.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (16 samples, 0.45%)</title><rect x="997.3" y="403.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1000.3" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="997.3" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1000.3" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="997.3" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1000.3" y="382.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="997.6" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1000.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.06%)</title><rect x="997.9" y="387.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1000.9" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.06%)</title><rect x="997.9" y="371.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1000.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.06%)</title><rect x="997.9" y="355.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1000.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (7 samples, 0.20%)</title><rect x="998.6" y="387.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.6" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.17%)</title><rect x="998.9" y="371.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1001.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.17%)</title><rect x="998.9" y="355.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1001.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1000.9" y="387.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1003.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.06%)</title><rect x="1001.6" y="387.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1004.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="1002.3" y="387.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1005.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="1002.3" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1005.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="1002.3" y="355.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1005.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (7 samples, 0.20%)</title><rect x="1002.6" y="403.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1005.6" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1002.6" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1005.6" y="398.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1002.6" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1005.6" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1002.6" y="355.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1005.6" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.14%)</title><rect x="1002.9" y="387.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1005.9" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.06%)</title><rect x="1002.9" y="371.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1005.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.06%)</title><rect x="1002.9" y="355.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1005.9" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.08%)</title><rect x="1003.6" y="371.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1006.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.08%)</title><rect x="1003.6" y="355.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1006.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1003.6" y="339.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1006.6" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.06%)</title><rect x="1003.9" y="339.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1006.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1004.3" y="323.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1007.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.03%)</title><rect x="1004.6" y="387.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1007.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="1004.6" y="371.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1007.6" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.03%)</title><rect x="1004.6" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1007.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="1004.9" y="403.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1007.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="1004.9" y="387.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1007.9" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="1004.9" y="371.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1007.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (12 samples, 0.34%)</title><rect x="1005.3" y="403.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1008.3" y="414.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (3 samples, 0.08%)</title><rect x="1005.6" y="387.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1008.6" y="398.0"></text>
</g>
<g>
<title>setsockopt (8 samples, 0.23%)</title><rect x="1006.6" y="387.0" width="2.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1009.6" y="398.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (4 samples, 0.11%)</title><rect x="1009.3" y="403.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1012.3" y="414.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="1009.3" y="387.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1012.3" y="398.0"></text>
</g>
<g>
<title>__send (2 samples, 0.06%)</title><rect x="1009.6" y="387.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1012.6" y="398.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.03%)</title><rect x="1010.3" y="387.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1013.3" y="398.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (2 samples, 0.06%)</title><rect x="1010.6" y="403.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1013.6" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.03%)</title><rect x="1010.9" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1013.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1011.3" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1014.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (9 samples, 0.25%)</title><rect x="1011.6" y="467.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1014.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.25%)</title><rect x="1011.6" y="451.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1014.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.20%)</title><rect x="1011.9" y="435.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1014.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.06%)</title><rect x="1011.9" y="419.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1014.9" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.06%)</title><rect x="1011.9" y="403.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1014.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.06%)</title><rect x="1011.9" y="387.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1014.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.06%)</title><rect x="1011.9" y="371.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1014.9" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1012.3" y="355.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1015.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (5 samples, 0.14%)</title><rect x="1012.6" y="419.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1015.6" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (5 samples, 0.14%)</title><rect x="1012.6" y="403.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1015.6" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (4 samples, 0.11%)</title><rect x="1012.9" y="387.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1015.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (4 samples, 0.11%)</title><rect x="1012.9" y="371.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1015.9" y="382.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.06%)</title><rect x="1012.9" y="355.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1015.9" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="1013.3" y="339.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1016.3" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1013.3" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1016.3" y="334.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="1013.6" y="355.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1016.6" y="366.0"></text>
</g>
<g>
<title>__send (1 samples, 0.03%)</title><rect x="1014.0" y="355.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1017.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="1014.3" y="435.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1017.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.mergeGetResponses (6 samples, 0.17%)</title><rect x="1014.6" y="467.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1017.6" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.03%)</title><rect x="1014.6" y="451.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1017.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1015.0" y="451.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1018.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="1015.6" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1018.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.getResponseFromValues (2 samples, 0.06%)</title><rect x="1016.0" y="451.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1019.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.06%)</title><rect x="1016.0" y="435.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1016.0" y="419.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.0" y="430.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (88 samples, 2.49%)</title><rect x="1016.6" y="595.0" width="29.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1019.6" y="606.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 0.11%)</title><rect x="1016.6" y="579.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1019.6" y="590.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 0.11%)</title><rect x="1016.6" y="563.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1019.6" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (4 samples, 0.11%)</title><rect x="1016.6" y="547.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1019.6" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (21 samples, 0.59%)</title><rect x="1018.0" y="579.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1021.0" y="590.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1018.0" y="563.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1021.0" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.03%)</title><rect x="1018.0" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1021.0" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (1 samples, 0.03%)</title><rect x="1018.3" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1021.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (19 samples, 0.54%)</title><rect x="1018.6" y="563.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1021.6" y="574.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.03%)</title><rect x="1019.3" y="547.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1022.3" y="558.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.06%)</title><rect x="1019.6" y="547.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1022.6" y="558.0"></text>
</g>
<g>
<title>epoll_wait (14 samples, 0.40%)</title><rect x="1020.3" y="547.0" width="4.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1023.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (63 samples, 1.78%)</title><rect x="1025.0" y="579.0" width="21.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1028.0" y="590.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (61 samples, 1.72%)</title><rect x="1025.0" y="563.0" width="20.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1028.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (50 samples, 1.41%)</title><rect x="1025.0" y="547.0" width="16.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1028.0" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (32 samples, 0.90%)</title><rect x="1026.6" y="531.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1029.6" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (31 samples, 0.88%)</title><rect x="1027.0" y="515.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1030.0" y="526.0"></text>
</g>
<g>
<title>RequestHandler3_handleRequest.handleRequest (26 samples, 0.73%)</title><rect x="1027.0" y="499.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1030.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6 samples, 0.17%)</title><rect x="1027.0" y="483.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1030.0" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.17%)</title><rect x="1027.0" y="467.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1030.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.06%)</title><rect x="1028.0" y="451.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1031.0" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.06%)</title><rect x="1028.0" y="435.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1031.0" y="446.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.06%)</title><rect x="1028.0" y="419.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1031.0" y="430.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="1028.6" y="451.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1031.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.handleRequest (20 samples, 0.57%)</title><rect x="1029.0" y="483.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1032.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.handleRequest (20 samples, 0.57%)</title><rect x="1029.0" y="467.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1032.0" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/926150093.linkToTargetMethod (1 samples, 0.03%)</title><rect x="1029.0" y="451.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1032.0" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="1029.0" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1032.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$67/856457076.get$Lambda (1 samples, 0.03%)</title><rect x="1029.0" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1032.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.executeTask (19 samples, 0.54%)</title><rect x="1029.3" y="451.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (19 samples, 0.54%)</title><rect x="1029.3" y="435.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1032.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (17 samples, 0.48%)</title><rect x="1030.0" y="419.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1033.0" y="430.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.03%)</title><rect x="1030.0" y="403.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.06%)</title><rect x="1030.3" y="403.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1033.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="1030.6" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1033.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="1030.6" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1033.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="1030.6" y="355.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1033.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="1031.0" y="403.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1034.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="1031.0" y="387.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1034.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.06%)</title><rect x="1031.0" y="371.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1034.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.06%)</title><rect x="1031.0" y="355.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1034.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.06%)</title><rect x="1031.0" y="339.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1034.0" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.06%)</title><rect x="1031.0" y="323.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.0" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.06%)</title><rect x="1031.0" y="307.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1034.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 0.34%)</title><rect x="1031.6" y="403.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1034.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.34%)</title><rect x="1031.6" y="387.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1034.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.34%)</title><rect x="1031.6" y="371.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1034.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.31%)</title><rect x="1032.0" y="355.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1035.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (11 samples, 0.31%)</title><rect x="1032.0" y="339.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1035.0" y="350.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.03%)</title><rect x="1032.0" y="323.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1035.0" y="334.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="1032.3" y="323.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.3" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.08%)</title><rect x="1032.6" y="323.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1035.6" y="334.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="1032.6" y="307.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1035.6" y="318.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1033.0" y="307.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1036.0" y="318.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="1033.3" y="307.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.3" y="318.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1033.6" y="323.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1036.6" y="334.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.03%)</title><rect x="1033.6" y="307.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1036.6" y="318.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.14%)</title><rect x="1034.0" y="323.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1037.0" y="334.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.03%)</title><rect x="1035.6" y="499.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1038.6" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="1035.6" y="483.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1038.6" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="1035.6" y="467.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1038.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="1035.6" y="451.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1038.6" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="1035.6" y="435.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1038.6" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.11%)</title><rect x="1036.0" y="499.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1039.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.11%)</title><rect x="1036.0" y="483.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1039.0" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.11%)</title><rect x="1036.0" y="467.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1039.0" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1036.0" y="451.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.0" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1036.0" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.0" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1036.0" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1039.0" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1036.0" y="403.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1039.0" y="414.0"></text>
</g>
<g>
<title>RequestHandler3_handleRequest.handleRequest (1 samples, 0.03%)</title><rect x="1036.3" y="451.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1039.3" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="1036.6" y="451.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1039.6" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1037.0" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1040.0" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1037.0" y="435.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1040.0" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1037.0" y="419.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 0.28%)</title><rect x="1037.3" y="531.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1040.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.08%)</title><rect x="1037.6" y="515.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1040.6" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.08%)</title><rect x="1037.6" y="499.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.6" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.06%)</title><rect x="1037.6" y="483.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.6" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1037.6" y="467.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1040.6" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="1037.6" y="451.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.6" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="1037.6" y="435.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.6" y="446.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.03%)</title><rect x="1037.6" y="419.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1040.6" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1038.0" y="435.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1041.0" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.03%)</title><rect x="1038.0" y="419.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.0" y="430.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="1038.3" y="483.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1041.3" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.11%)</title><rect x="1038.6" y="515.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1041.6" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.11%)</title><rect x="1038.6" y="499.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1041.6" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.06%)</title><rect x="1040.0" y="515.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1043.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1040.3" y="499.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1043.3" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="1040.6" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1043.6" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="1041.0" y="531.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1044.0" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1041.3" y="515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1044.3" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (11 samples, 0.31%)</title><rect x="1041.6" y="547.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1044.6" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (11 samples, 0.31%)</title><rect x="1041.6" y="531.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1044.6" y="542.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 0.14%)</title><rect x="1042.6" y="515.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1045.6" y="526.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="1043.3" y="499.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.3" y="510.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.06%)</title><rect x="1043.6" y="499.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1046.6" y="510.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="1044.0" y="483.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.0" y="494.0"></text>
</g>
<g>
<title>recv (2 samples, 0.06%)</title><rect x="1044.3" y="515.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1047.3" y="526.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.03%)</title><rect x="1045.0" y="515.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1048.0" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="1045.3" y="563.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.3" y="574.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1045.6" y="547.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1048.6" y="558.0"></text>
</g>
<g>
<title>start_thread (431 samples, 12.18%)</title><rect x="1046.0" y="595.0" width="143.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1049.0" y="606.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (431 samples, 12.18%)</title><rect x="1046.0" y="579.0" width="143.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1049.0" y="590.0">thread_native_entr..</text>
</g>
<g>
<title>Thread::call_run() (431 samples, 12.18%)</title><rect x="1046.0" y="563.0" width="143.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.0" y="574.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (427 samples, 12.07%)</title><rect x="1046.0" y="547.0" width="142.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1049.0" y="558.0">GangWorker::loop()</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (257 samples, 7.26%)</title><rect x="1046.0" y="531.0" width="85.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1049.0" y="542.0">G1CMConcur..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.98] (1 samples, 0.03%)</title><rect x="1046.0" y="515.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.0" y="526.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (256 samples, 7.23%)</title><rect x="1046.3" y="515.0" width="85.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.3" y="526.0">G1CMTask::..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.98] (3 samples, 0.08%)</title><rect x="1046.6" y="499.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1049.6" y="510.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (34 samples, 0.96%)</title><rect x="1047.6" y="499.0" width="11.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.6" y="510.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (28 samples, 0.79%)</title><rect x="1047.6" y="483.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.6" y="494.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (21 samples, 0.59%)</title><rect x="1050.0" y="467.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.0" y="478.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.03%)</title><rect x="1051.0" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.0" y="462.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (16 samples, 0.45%)</title><rect x="1051.3" y="451.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.3" y="462.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (9 samples, 0.25%)</title><rect x="1053.3" y="435.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1056.3" y="446.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1055.6" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.6" y="430.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.03%)</title><rect x="1056.0" y="419.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1059.0" y="430.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1056.3" y="435.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.3" y="446.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1056.6" y="451.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1059.6" y="462.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (6 samples, 0.17%)</title><rect x="1057.0" y="483.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1060.0" y="494.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.06%)</title><rect x="1057.0" y="467.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1060.0" y="478.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (2 samples, 0.06%)</title><rect x="1057.0" y="451.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.0" y="462.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1057.6" y="467.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.6" y="478.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;567350ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)4, 567350ul&gt;::oop_access_barrier(oopDesc*, void*, oopDesc*) (1 samples, 0.03%)</title><rect x="1057.6" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.6" y="462.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.08%)</title><rect x="1058.0" y="467.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.0" y="478.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (2 samples, 0.06%)</title><rect x="1058.3" y="451.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.3" y="462.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) (1 samples, 0.03%)</title><rect x="1059.0" y="499.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1062.0" y="510.0"></text>
</g>
<g>
<title>G1CMTask::get_entries_from_global_stack() (1 samples, 0.03%)</title><rect x="1059.0" y="483.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.0" y="494.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.395] (1 samples, 0.03%)</title><rect x="1059.3" y="499.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.3" y="510.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (214 samples, 6.05%)</title><rect x="1059.6" y="499.0" width="71.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.6" y="510.0">G1CMTask..</text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (3 samples, 0.08%)</title><rect x="1069.0" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1072.0" y="494.0"></text>
</g>
<g>
<title>getrusage (3 samples, 0.08%)</title><rect x="1069.0" y="467.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1072.0" y="478.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (180 samples, 5.09%)</title><rect x="1070.0" y="483.0" width="60.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.0" y="494.0">void G..</text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (3 samples, 0.08%)</title><rect x="1076.3" y="467.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.3" y="478.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (2 samples, 0.06%)</title><rect x="1077.3" y="467.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.3" y="478.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.06%)</title><rect x="1078.0" y="467.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.0" y="478.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (153 samples, 4.32%)</title><rect x="1078.6" y="467.0" width="51.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1081.6" y="478.0">void ..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (123 samples, 3.48%)</title><rect x="1086.3" y="451.0" width="41.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.3" y="462.0">G1C..</text>
</g>
<g>
<title>oopDesc::size() (23 samples, 0.65%)</title><rect x="1118.3" y="435.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.3" y="446.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (4 samples, 0.11%)</title><rect x="1126.0" y="435.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.0" y="446.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1127.3" y="451.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.3" y="462.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (6 samples, 0.17%)</title><rect x="1127.6" y="451.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.6" y="462.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1129.6" y="467.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.6" y="478.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.03%)</title><rect x="1129.6" y="451.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.6" y="462.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.08%)</title><rect x="1130.0" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.0" y="494.0"></text>
</g>
<g>
<title>G1ConcurrentMark::try_stealing(unsigned int, int*, G1TaskQueueEntry&amp;) (1 samples, 0.03%)</title><rect x="1131.0" y="499.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.0" y="510.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.03%)</title><rect x="1131.3" y="499.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.3" y="510.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1131.7" y="531.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.7" y="542.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (1 samples, 0.03%)</title><rect x="1131.7" y="515.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.7" y="526.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1131.7" y="499.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.7" y="510.0"></text>
</g>
<g>
<title>G1CMBitMap::clear_range(MemRegion) (1 samples, 0.03%)</title><rect x="1131.7" y="483.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.7" y="494.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="1131.7" y="467.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1134.7" y="478.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1132.0" y="531.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.0" y="542.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.03%)</title><rect x="1132.0" y="515.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.0" y="526.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1132.0" y="499.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.0" y="510.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 0.25%)</title><rect x="1132.3" y="531.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.3" y="542.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.17%)</title><rect x="1132.3" y="515.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.3" y="526.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.17%)</title><rect x="1132.3" y="499.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1135.3" y="510.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1134.3" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.3" y="526.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1134.3" y="499.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.3" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.03%)</title><rect x="1134.3" y="483.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.3" y="494.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.03%)</title><rect x="1134.3" y="467.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.3" y="478.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.03%)</title><rect x="1134.3" y="451.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.3" y="462.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.03%)</title><rect x="1134.3" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.3" y="446.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.03%)</title><rect x="1134.3" y="419.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.3" y="430.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1134.7" y="515.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.7" y="526.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="1134.7" y="499.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.7" y="510.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1134.7" y="483.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.7" y="494.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1135.0" y="515.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.0" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1135.0" y="499.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.0" y="510.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1135.0" y="483.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.0" y="494.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1135.0" y="467.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.0" y="478.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.03%)</title><rect x="1135.0" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.0" y="462.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (1 samples, 0.03%)</title><rect x="1135.0" y="435.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.0" y="446.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)1&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="1135.0" y="419.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.0" y="430.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (8 samples, 0.23%)</title><rect x="1135.3" y="531.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.3" y="542.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (2 samples, 0.06%)</title><rect x="1135.3" y="515.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.3" y="526.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (2 samples, 0.06%)</title><rect x="1135.3" y="499.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.3" y="510.0"></text>
</g>
<g>
<title>bool clean_if_nmethod_is_unloaded&lt;CompiledIC&gt;(CompiledIC*, unsigned char*, CompiledMethod*, bool, bool) (1 samples, 0.03%)</title><rect x="1135.7" y="483.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1138.7" y="494.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="1135.7" y="467.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.7" y="478.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel_postponed() (1 samples, 0.03%)</title><rect x="1136.0" y="515.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.0" y="526.0"></text>
</g>
<g>
<title>ResolvedMethodTable::unlink() (1 samples, 0.03%)</title><rect x="1136.3" y="515.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.3" y="526.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_unlink(OopStorage::ParState&lt;false, false&gt;*, BoolObjectClosure*, int*, int*) (1 samples, 0.03%)</title><rect x="1136.7" y="515.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.7" y="526.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (2 samples, 0.06%)</title><rect x="1137.0" y="515.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.0" y="526.0"></text>
</g>
<g>
<title>nmethod::do_unloading_jvmci() (1 samples, 0.03%)</title><rect x="1137.7" y="515.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.7" y="526.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (150 samples, 4.24%)</title><rect x="1138.0" y="531.0" width="50.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.0" y="542.0">G1Reb..</text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (150 samples, 4.24%)</title><rect x="1138.0" y="515.0" width="50.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.0" y="526.0">HeapR..</text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (147 samples, 4.15%)</title><rect x="1138.0" y="499.0" width="49.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.0" y="510.0">G1Reb..</text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.03%)</title><rect x="1168.7" y="483.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.7" y="494.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (4 samples, 0.11%)</title><rect x="1169.0" y="483.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.0" y="494.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.234] (11 samples, 0.31%)</title><rect x="1170.3" y="483.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.3" y="494.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (38 samples, 1.07%)</title><rect x="1174.0" y="483.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.0" y="494.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (3 samples, 0.08%)</title><rect x="1180.3" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="478.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (2 samples, 0.06%)</title><rect x="1181.3" y="467.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="478.0"></text>
</g>
<g>
<title>BitMap::par_at_put(unsigned long, bool) (1 samples, 0.03%)</title><rect x="1181.3" y="451.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1181.7" y="451.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.234] (14 samples, 0.40%)</title><rect x="1182.0" y="467.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1186.7" y="483.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.7" y="494.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.03%)</title><rect x="1186.7" y="467.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="478.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (2 samples, 0.06%)</title><rect x="1187.0" y="499.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="510.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;TypeArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1187.7" y="499.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="510.0"></text>
</g>
<g>
<title>ParKnownGarbageTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1188.0" y="531.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.0" y="542.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (1 samples, 0.03%)</title><rect x="1188.0" y="515.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="526.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.08%)</title><rect x="1188.3" y="547.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="558.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.08%)</title><rect x="1188.3" y="531.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="542.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.08%)</title><rect x="1188.3" y="515.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="526.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.08%)</title><rect x="1188.3" y="499.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.3" y="510.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples, 0.08%)</title><rect x="1188.3" y="483.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="494.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.08%)</title><rect x="1188.3" y="467.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.03%)</title><rect x="1188.3" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.03%)</title><rect x="1188.3" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.3" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (2 samples, 0.06%)</title><rect x="1188.7" y="451.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.7" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.03%)</title><rect x="1188.7" y="435.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.7" y="446.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1188.7" y="419.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.7" y="430.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.03%)</title><rect x="1189.0" y="435.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.0" y="446.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.03%)</title><rect x="1189.3" y="547.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.3" y="558.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.03%)</title><rect x="1189.3" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.3" y="542.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.03%)</title><rect x="1189.3" y="515.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.3" y="526.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.03%)</title><rect x="1189.3" y="499.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.3" y="510.0"></text>
</g>
<g>
<title>VM_CGC_Operation::doit() (1 samples, 0.03%)</title><rect x="1189.3" y="483.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.3" y="494.0"></text>
</g>
<g>
<title>G1ConcurrentMark::remark() (1 samples, 0.03%)</title><rect x="1189.3" y="467.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.3" y="478.0"></text>
</g>
<g>
<title>G1ConcurrentMark::flush_all_task_caches() (1 samples, 0.03%)</title><rect x="1189.3" y="451.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.3" y="462.0"></text>
</g>
<g>
<title>G1RegionMarkStatsCache::evict_all() (1 samples, 0.03%)</title><rect x="1189.3" y="435.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="1189.7" y="595.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1192.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="1189.7" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1192.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="1189.7" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1192.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="1189.7" y="547.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1192.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="1189.7" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1192.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.03%)</title><rect x="1189.7" y="515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1192.7" y="526.0"></text>
</g>
</g>
</svg>
