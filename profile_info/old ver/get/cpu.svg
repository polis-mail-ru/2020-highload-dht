<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="645"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="645"> </text>
<g id="frames">
<g>
<title>all (2,953 samples, 100.00%)</title><rect x="10.0" y="611.0" width="1180.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="13.0" y="622.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.17%)</title><rect x="10.0" y="595.0" width="2.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.03%)</title><rect x="10.0" y="579.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.10%)</title><rect x="10.4" y="579.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.4" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.10%)</title><rect x="10.4" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.4" y="574.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.07%)</title><rect x="10.4" y="547.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.4" y="558.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.07%)</title><rect x="10.4" y="531.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.4" y="542.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="11.2" y="547.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.2" y="558.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.03%)</title><rect x="11.2" y="531.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="11.6" y="579.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.6" y="590.0"></text>
</g>
<g>
<title>[unknown_Java] (24 samples, 0.81%)</title><rect x="12.0" y="595.0" width="9.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="15.0" y="606.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.07%)</title><rect x="12.0" y="579.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.0" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (13 samples, 0.44%)</title><rect x="12.8" y="579.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.8" y="590.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (13 samples, 0.44%)</title><rect x="12.8" y="563.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.8" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="18.0" y="579.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="21.0" y="590.0"></text>
</g>
<g>
<title>sha256_implCompress (8 samples, 0.27%)</title><rect x="18.4" y="579.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="21.4" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,448 samples, 82.90%)</title><rect x="21.6" y="595.0" width="978.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.6" y="606.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,448 samples, 82.90%)</title><rect x="21.6" y="579.0" width="978.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.6" y="590.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,448 samples, 82.90%)</title><rect x="21.6" y="563.0" width="978.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.6" y="574.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.03%)</title><rect x="22.4" y="547.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="22.4" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.03%)</title><rect x="22.4" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.03%)</title><rect x="22.4" y="499.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (217 samples, 7.35%)</title><rect x="22.8" y="547.0" width="86.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.8" y="558.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (209 samples, 7.08%)</title><rect x="24.8" y="531.0" width="83.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.8" y="542.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (7 samples, 0.24%)</title><rect x="26.4" y="515.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.24%)</title><rect x="26.4" y="499.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.24%)</title><rect x="26.4" y="483.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.24%)</title><rect x="26.4" y="467.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="29.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.03%)</title><rect x="28.8" y="451.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (185 samples, 6.26%)</title><rect x="29.2" y="515.0" width="73.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.2" y="526.0">java/uti..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (11 samples, 0.37%)</title><rect x="29.2" y="499.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.2" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.07%)</title><rect x="32.8" y="483.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.10%)</title><rect x="33.6" y="499.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.27%)</title><rect x="34.8" y="499.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.20%)</title><rect x="38.0" y="499.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.20%)</title><rect x="38.0" y="483.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="38.4" y="467.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="41.4" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="38.4" y="451.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="41.4" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="38.4" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="41.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.14%)</title><rect x="38.8" y="467.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="41.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (157 samples, 5.32%)</title><rect x="40.4" y="499.0" width="62.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.4" y="510.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (157 samples, 5.32%)</title><rect x="40.4" y="483.0" width="62.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.4" y="494.0">jdk/in..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.03%)</title><rect x="43.6" y="467.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="46.6" y="478.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="44.0" y="467.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="47.0" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.03%)</title><rect x="44.4" y="467.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="47.4" y="478.0"></text>
</g>
<g>
<title>Unsafe_Park (92 samples, 3.12%)</title><rect x="44.8" y="467.0" width="36.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="47.8" y="478.0">Uns..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="48.4" y="451.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="51.4" y="462.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.10%)</title><rect x="48.8" y="451.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="51.8" y="462.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (37 samples, 1.25%)</title><rect x="50.0" y="451.0" width="14.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="53.0" y="462.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.03%)</title><rect x="57.6" y="435.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="60.6" y="446.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (8 samples, 0.27%)</title><rect x="58.0" y="435.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="61.0" y="446.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (5 samples, 0.17%)</title><rect x="59.2" y="419.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="62.2" y="430.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="61.1" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="64.1" y="446.0"></text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.27%)</title><rect x="61.5" y="435.0" width="3.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="64.5" y="446.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="64.7" y="451.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="67.7" y="462.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="65.1" y="451.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="68.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (4 samples, 0.14%)</title><rect x="65.5" y="451.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="68.5" y="462.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.07%)</title><rect x="67.1" y="451.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="70.1" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 0.17%)</title><rect x="67.9" y="451.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="70.9" y="462.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (18 samples, 0.61%)</title><rect x="69.9" y="451.0" width="7.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="72.9" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="77.1" y="451.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="80.1" y="462.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="77.5" y="451.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="80.5" y="462.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.14%)</title><rect x="77.9" y="451.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="80.9" y="462.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (4 samples, 0.14%)</title><rect x="79.5" y="451.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="82.5" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.03%)</title><rect x="81.1" y="451.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="84.1" y="462.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 1.59%)</title><rect x="81.5" y="467.0" width="18.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="84.5" y="478.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (8 samples, 0.27%)</title><rect x="81.5" y="451.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="84.5" y="462.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="84.7" y="451.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="87.7" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_wait (31 samples, 1.05%)</title><rect x="85.1" y="451.0" width="12.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="88.1" y="462.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.17%)</title><rect x="97.5" y="451.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="100.5" y="462.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="99.5" y="451.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="102.5" y="462.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="99.9" y="451.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="102.9" y="462.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (7 samples, 0.24%)</title><rect x="100.3" y="467.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="103.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="103.1" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="103.1" y="499.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="106.1" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.03%)</title><rect x="103.1" y="483.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="106.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="103.1" y="467.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 0.41%)</title><rect x="103.5" y="515.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="106.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.41%)</title><rect x="103.5" y="499.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.41%)</title><rect x="103.5" y="483.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.41%)</title><rect x="103.5" y="467.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 0.34%)</title><rect x="104.3" y="451.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="107.3" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.03%)</title><rect x="104.3" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="107.3" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.17%)</title><rect x="104.7" y="435.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="107.7" y="446.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="104.7" y="419.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="107.7" y="430.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="105.1" y="419.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="108.1" y="430.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="105.5" y="419.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="108.5" y="430.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="105.9" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="108.9" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="106.3" y="419.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="109.3" y="430.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.14%)</title><rect x="106.7" y="435.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="109.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$68/785022578.run (3 samples, 0.10%)</title><rect x="108.3" y="531.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$68/785022578.run (2,228 samples, 75.45%)</title><rect x="109.5" y="547.0" width="890.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.5" y="558.0">ru/mail/polis/service/re1nex/BaseService$$Lambda$68/785022578.run</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1 (2,228 samples, 75.45%)</title><rect x="109.5" y="531.0" width="890.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.5" y="542.0">ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.27%)</title><rect x="109.5" y="515.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="112.5" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.07%)</title><rect x="111.5" y="499.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.5" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.07%)</title><rect x="111.5" y="483.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.5" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="112.3" y="499.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.3" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="112.3" y="483.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponseLocal (1,245 samples, 42.16%)</title><rect x="112.7" y="515.0" width="497.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.7" y="526.0">ru/mail/polis/service/re1nex/ApiController.handleResponseLocal</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.07%)</title><rect x="112.7" y="499.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (1,243 samples, 42.09%)</title><rect x="113.5" y="499.0" width="496.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.5" y="510.0">ru/mail/polis/service/re1nex/ApiControllerImpl.get</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (1,193 samples, 40.40%)</title><rect x="113.5" y="483.0" width="476.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="116.5" y="494.0">ru/mail/polis/service/re1nex/ApiControllerImpl.get</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/953276539.linkToTargetMethod (1 samples, 0.03%)</title><rect x="115.5" y="467.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="118.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/235632877.invoke (1 samples, 0.03%)</title><rect x="115.5" y="451.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="118.5" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="115.5" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="118.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="115.9" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.9" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="115.9" y="451.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="118.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (1,177 samples, 39.86%)</title><rect x="116.3" y="467.0" width="470.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.3" y="478.0">ru/mail/polis/dao/DAO.getValue</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (90 samples, 3.05%)</title><rect x="116.7" y="451.0" width="36.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="119.7" y="462.0">ru/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (85 samples, 2.88%)</title><rect x="116.7" y="435.0" width="34.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.7" y="446.0">co..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (85 samples, 2.88%)</title><rect x="116.7" y="419.0" width="34.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="119.7" y="430.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (85 samples, 2.88%)</title><rect x="116.7" y="403.0" width="34.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.7" y="414.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (85 samples, 2.88%)</title><rect x="116.7" y="387.0" width="34.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="119.7" y="398.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (85 samples, 2.88%)</title><rect x="116.7" y="371.0" width="34.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.7" y="382.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (85 samples, 2.88%)</title><rect x="116.7" y="355.0" width="34.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.7" y="366.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (85 samples, 2.88%)</title><rect x="116.7" y="339.0" width="34.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.7" y="350.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (85 samples, 2.88%)</title><rect x="116.7" y="323.0" width="34.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.7" y="334.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (85 samples, 2.88%)</title><rect x="116.7" y="307.0" width="34.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.7" y="318.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (85 samples, 2.88%)</title><rect x="116.7" y="291.0" width="34.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.7" y="302.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (85 samples, 2.88%)</title><rect x="116.7" y="275.0" width="34.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.7" y="286.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (13 samples, 0.44%)</title><rect x="116.7" y="259.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (13 samples, 0.44%)</title><rect x="116.7" y="243.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (13 samples, 0.44%)</title><rect x="116.7" y="227.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="119.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (12 samples, 0.41%)</title><rect x="116.7" y="211.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.07%)</title><rect x="116.7" y="195.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.7" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="117.1" y="179.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.30%)</title><rect x="117.5" y="195.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (9 samples, 0.30%)</title><rect x="117.5" y="179.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (9 samples, 0.30%)</title><rect x="117.5" y="163.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="120.5" y="174.0"></text>
</g>
<g>
<title>__libc_pread64 (9 samples, 0.30%)</title><rect x="117.5" y="147.0" width="3.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="120.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="121.1" y="195.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="124.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="121.1" y="179.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="121.5" y="211.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="121.5" y="195.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (40 samples, 1.35%)</title><rect x="121.9" y="259.0" width="16.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (17 samples, 0.58%)</title><rect x="121.9" y="243.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="121.9" y="227.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="124.9" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="121.9" y="211.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="121.9" y="195.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.9" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="121.9" y="179.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (16 samples, 0.54%)</title><rect x="122.3" y="227.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="125.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (16 samples, 0.54%)</title><rect x="122.3" y="211.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.07%)</title><rect x="122.3" y="195.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.3" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.07%)</title><rect x="122.3" y="179.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="125.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (13 samples, 0.44%)</title><rect x="123.1" y="195.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.1" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="123.1" y="179.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="126.1" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="123.1" y="163.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (12 samples, 0.41%)</title><rect x="123.5" y="179.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (12 samples, 0.41%)</title><rect x="123.5" y="163.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (12 samples, 0.41%)</title><rect x="123.5" y="147.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.5" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (11 samples, 0.37%)</title><rect x="123.9" y="131.0" width="4.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="126.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="128.3" y="195.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (23 samples, 0.78%)</title><rect x="128.7" y="243.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="131.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (23 samples, 0.78%)</title><rect x="128.7" y="227.0" width="9.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="131.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.03%)</title><rect x="128.7" y="211.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="131.7" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="128.7" y="195.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.7" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="128.7" y="179.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.7" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="128.7" y="163.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.7" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="128.7" y="147.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="131.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (20 samples, 0.68%)</title><rect x="129.1" y="211.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (16 samples, 0.54%)</title><rect x="129.1" y="195.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.1" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="129.1" y="179.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.1" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="129.1" y="163.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="129.1" y="147.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="132.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (15 samples, 0.51%)</title><rect x="129.5" y="179.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (15 samples, 0.51%)</title><rect x="129.5" y="163.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.5" y="174.0"></text>
</g>
<g>
<title>__libc_pread64 (11 samples, 0.37%)</title><rect x="131.1" y="147.0" width="4.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="134.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.14%)</title><rect x="135.5" y="195.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.5" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.07%)</title><rect x="135.5" y="179.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.5" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="135.9" y="163.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.07%)</title><rect x="136.3" y="179.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="139.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="136.7" y="163.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="139.7" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="136.7" y="147.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="139.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="137.1" y="211.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="140.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="137.1" y="195.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="140.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="137.5" y="211.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (32 samples, 1.08%)</title><rect x="137.9" y="259.0" width="12.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="140.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (32 samples, 1.08%)</title><rect x="137.9" y="243.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (5 samples, 0.17%)</title><rect x="138.3" y="227.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="141.3" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (5 samples, 0.17%)</title><rect x="138.3" y="211.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="141.3" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.17%)</title><rect x="138.3" y="195.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.3" y="206.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.17%)</title><rect x="138.3" y="179.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.3" y="190.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.17%)</title><rect x="138.3" y="163.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="140.3" y="227.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="143.3" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="140.3" y="211.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="143.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.75%)</title><rect x="140.7" y="227.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.7" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="140.7" y="211.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (17 samples, 0.58%)</title><rect x="141.1" y="211.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="144.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (17 samples, 0.58%)</title><rect x="141.1" y="195.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="144.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (17 samples, 0.58%)</title><rect x="141.1" y="179.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="144.1" y="190.0"></text>
</g>
<g>
<title>__libc_pread64 (16 samples, 0.54%)</title><rect x="141.5" y="163.0" width="6.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="144.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.14%)</title><rect x="147.9" y="211.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="150.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="149.1" y="195.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.07%)</title><rect x="149.5" y="227.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="152.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="149.9" y="211.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="152.9" y="222.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="149.9" y="195.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="152.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="150.3" y="227.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4 samples, 0.14%)</title><rect x="150.7" y="435.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="153.7" y="446.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.14%)</title><rect x="150.7" y="419.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.7" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="151.1" y="403.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.1" y="414.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.07%)</title><rect x="151.5" y="403.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="154.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$132/859561879.apply (1 samples, 0.03%)</title><rect x="152.3" y="435.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="155.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.03%)</title><rect x="152.3" y="419.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.3" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="152.3" y="403.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.3" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="152.3" y="387.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="155.3" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="152.3" y="371.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="155.3" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="152.3" y="355.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="155.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.03%)</title><rect x="152.7" y="451.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="155.7" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="152.7" y="435.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.7" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="152.7" y="419.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.7" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="152.7" y="403.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="155.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="152.7" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.7" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="152.7" y="371.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="152.7" y="355.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="155.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (1,085 samples, 36.74%)</title><rect x="153.1" y="451.0" width="433.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="156.1" y="462.0">ru/mail/polis/dao/re1nex/NewDAO.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (129 samples, 4.37%)</title><rect x="155.1" y="435.0" width="51.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="158.1" y="446.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (129 samples, 4.37%)</title><rect x="155.1" y="419.0" width="51.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="158.1" y="430.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (2 samples, 0.07%)</title><rect x="156.7" y="403.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="159.7" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (1 samples, 0.03%)</title><rect x="157.5" y="403.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.5" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (105 samples, 3.56%)</title><rect x="157.8" y="403.0" width="42.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.8" y="414.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (105 samples, 3.56%)</title><rect x="157.8" y="387.0" width="42.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.8" y="398.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (105 samples, 3.56%)</title><rect x="157.8" y="371.0" width="42.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="160.8" y="382.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (105 samples, 3.56%)</title><rect x="157.8" y="355.0" width="42.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.8" y="366.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (105 samples, 3.56%)</title><rect x="157.8" y="339.0" width="42.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="160.8" y="350.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (105 samples, 3.56%)</title><rect x="157.8" y="323.0" width="42.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="160.8" y="334.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (103 samples, 3.49%)</title><rect x="157.8" y="307.0" width="41.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.8" y="318.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (102 samples, 3.45%)</title><rect x="158.2" y="291.0" width="40.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="161.2" y="302.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (102 samples, 3.45%)</title><rect x="158.2" y="275.0" width="40.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.2" y="286.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (102 samples, 3.45%)</title><rect x="158.2" y="259.0" width="40.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="161.2" y="270.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (13 samples, 0.44%)</title><rect x="158.2" y="243.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.07%)</title><rect x="158.2" y="227.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="158.2" y="211.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="158.2" y="195.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="161.2" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="158.2" y="179.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.2" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="158.2" y="163.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="158.2" y="147.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="161.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="158.6" y="163.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="158.6" y="147.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.6" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="158.6" y="131.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (1 samples, 0.03%)</title><rect x="158.6" y="115.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (11 samples, 0.37%)</title><rect x="159.0" y="227.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="162.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (11 samples, 0.37%)</title><rect x="159.0" y="211.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="162.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.10%)</title><rect x="159.0" y="195.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.0" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.10%)</title><rect x="159.0" y="179.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="162.0" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="159.8" y="163.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="162.8" y="174.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="159.8" y="147.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.8" y="158.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="159.8" y="131.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.8" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.20%)</title><rect x="160.2" y="195.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="163.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.20%)</title><rect x="160.2" y="179.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (6 samples, 0.20%)</title><rect x="160.2" y="163.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="163.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (6 samples, 0.20%)</title><rect x="160.2" y="147.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="163.2" y="158.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.03%)</title><rect x="160.2" y="131.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="163.2" y="142.0"></text>
</g>
<g>
<title>__libc_pread64 (4 samples, 0.14%)</title><rect x="160.6" y="131.0" width="1.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="163.6" y="142.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="162.2" y="131.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="165.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.07%)</title><rect x="162.6" y="195.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="163.0" y="179.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.0" y="190.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="163.0" y="163.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="166.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (46 samples, 1.56%)</title><rect x="163.4" y="243.0" width="18.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (17 samples, 0.58%)</title><rect x="163.4" y="227.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="163.4" y="211.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="166.4" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="163.4" y="195.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="163.4" y="179.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (16 samples, 0.54%)</title><rect x="163.8" y="211.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (16 samples, 0.54%)</title><rect x="163.8" y="195.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.8" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="164.6" y="179.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.6" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="164.6" y="163.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.6" y="174.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="164.6" y="147.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.6" y="158.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="164.6" y="131.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="167.6" y="142.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="164.6" y="115.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.37%)</title><rect x="165.0" y="179.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="168.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.30%)</title><rect x="165.0" y="163.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (9 samples, 0.30%)</title><rect x="165.0" y="147.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="168.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (9 samples, 0.30%)</title><rect x="165.0" y="131.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="168.0" y="142.0"></text>
</g>
<g>
<title>__libc_pread64 (7 samples, 0.24%)</title><rect x="165.8" y="115.0" width="2.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="168.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="168.6" y="163.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="171.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="168.6" y="147.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="169.0" y="163.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.0" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="169.0" y="147.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="172.0" y="158.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="169.0" y="131.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="172.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="169.4" y="179.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="169.8" y="179.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (29 samples, 0.98%)</title><rect x="170.2" y="227.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="173.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (29 samples, 0.98%)</title><rect x="170.2" y="211.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.07%)</title><rect x="171.4" y="195.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.4" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.07%)</title><rect x="171.4" y="179.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="174.4" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.07%)</title><rect x="171.4" y="163.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="174.4" y="174.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.07%)</title><rect x="171.4" y="147.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="174.4" y="158.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.07%)</title><rect x="171.4" y="131.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="174.4" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="172.2" y="195.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.2" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="172.2" y="179.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.2" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="172.2" y="163.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.2" y="174.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="172.2" y="147.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.2" y="158.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="172.2" y="131.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.75%)</title><rect x="172.6" y="195.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.6" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="172.6" y="179.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="175.6" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="172.6" y="163.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="175.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (16 samples, 0.54%)</title><rect x="173.0" y="179.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (15 samples, 0.51%)</title><rect x="173.4" y="163.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="176.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (15 samples, 0.51%)</title><rect x="173.4" y="147.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="176.4" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (12 samples, 0.41%)</title><rect x="173.8" y="131.0" width="4.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="176.8" y="142.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="178.6" y="131.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="181.6" y="142.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="179.0" y="131.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="182.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.14%)</title><rect x="179.4" y="179.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.14%)</title><rect x="179.4" y="163.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="182.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="181.0" y="179.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.0" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="181.0" y="163.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.0" y="174.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="181.0" y="147.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="184.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="181.4" y="195.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (43 samples, 1.46%)</title><rect x="181.8" y="243.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (43 samples, 1.46%)</title><rect x="181.8" y="227.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.8" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.10%)</title><rect x="182.2" y="211.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="185.2" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.10%)</title><rect x="182.2" y="195.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (3 samples, 0.10%)</title><rect x="183.4" y="211.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.4" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.10%)</title><rect x="183.4" y="195.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="186.4" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.10%)</title><rect x="183.4" y="179.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="186.4" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.10%)</title><rect x="183.4" y="163.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="186.4" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.10%)</title><rect x="183.4" y="147.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="186.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (34 samples, 1.15%)</title><rect x="184.6" y="211.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (29 samples, 0.98%)</title><rect x="184.6" y="195.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (29 samples, 0.98%)</title><rect x="184.6" y="179.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (29 samples, 0.98%)</title><rect x="184.6" y="163.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="187.6" y="174.0"></text>
</g>
<g>
<title>__libc_pread64 (24 samples, 0.81%)</title><rect x="185.4" y="147.0" width="9.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="188.4" y="158.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="195.0" y="147.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="198.0" y="158.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.07%)</title><rect x="195.4" y="147.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="198.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.17%)</title><rect x="196.2" y="195.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.2" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.14%)</title><rect x="196.2" y="179.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.2" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="196.6" y="163.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.6" y="174.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.07%)</title><rect x="197.0" y="163.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="200.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="197.8" y="179.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="197.8" y="163.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.8" y="174.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="197.8" y="147.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="200.8" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="198.2" y="211.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="201.2" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="198.2" y="195.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="201.2" y="206.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="198.2" y="179.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="201.2" y="190.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="198.2" y="163.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="201.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="198.6" y="211.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.6" y="222.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.07%)</title><rect x="199.0" y="307.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.0" y="318.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (2 samples, 0.07%)</title><rect x="199.0" y="291.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (2 samples, 0.07%)</title><rect x="199.0" y="275.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (2 samples, 0.07%)</title><rect x="199.0" y="259.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="202.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.07%)</title><rect x="199.0" y="243.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="202.0" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.07%)</title><rect x="199.0" y="227.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="199.4" y="211.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.4" y="222.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (17 samples, 0.58%)</title><rect x="199.8" y="403.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.8" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (17 samples, 0.58%)</title><rect x="199.8" y="387.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.8" y="398.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (17 samples, 0.58%)</title><rect x="199.8" y="371.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.8" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (2 samples, 0.07%)</title><rect x="200.2" y="355.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.2" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$126/31307001.getAsBoolean (2 samples, 0.07%)</title><rect x="200.2" y="339.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.2" y="350.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (2 samples, 0.07%)</title><rect x="200.2" y="323.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (2 samples, 0.07%)</title><rect x="200.2" y="307.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="200.2" y="291.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="200.2" y="275.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.03%)</title><rect x="200.2" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.2" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.03%)</title><rect x="200.6" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="203.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable$$Lambda$88/740886904.apply (1 samples, 0.03%)</title><rect x="200.6" y="275.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.lambda$iterator$0 (1 samples, 0.03%)</title><rect x="200.6" y="259.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.6" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.init (2 samples, 0.07%)</title><rect x="201.0" y="355.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.0" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$122/166914995.accept (1 samples, 0.03%)</title><rect x="201.4" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.4" y="350.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (12 samples, 0.41%)</title><rect x="201.8" y="355.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.8" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.14%)</title><rect x="203.0" y="339.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.0" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.14%)</title><rect x="203.0" y="323.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.0" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$126/31307001.get$Lambda (4 samples, 0.14%)</title><rect x="203.0" y="307.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.0" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$126/31307001.&lt;init&gt; (4 samples, 0.14%)</title><rect x="203.0" y="291.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.03%)</title><rect x="204.2" y="275.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.2" y="286.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (5 samples, 0.17%)</title><rect x="204.6" y="339.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.6" y="350.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (793 samples, 26.85%)</title><rect x="206.6" y="435.0" width="316.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.6" y="446.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (3 samples, 0.10%)</title><rect x="206.6" y="419.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.6" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (2 samples, 0.07%)</title><rect x="206.6" y="403.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.6" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next (2 samples, 0.07%)</title><rect x="206.6" y="387.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.6" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.prevEntry (2 samples, 0.07%)</title><rect x="206.6" y="371.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.6" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="207.4" y="403.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="210.4" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.03%)</title><rect x="207.4" y="387.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.4" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.03%)</title><rect x="207.4" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="210.4" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (27 samples, 0.91%)</title><rect x="207.8" y="419.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.8" y="430.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (27 samples, 0.91%)</title><rect x="207.8" y="403.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="210.8" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (17 samples, 0.58%)</title><rect x="207.8" y="387.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.8" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (3 samples, 0.10%)</title><rect x="208.6" y="371.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.6" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (2 samples, 0.07%)</title><rect x="209.0" y="355.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.0" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (12 samples, 0.41%)</title><rect x="209.8" y="371.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.8" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (10 samples, 0.34%)</title><rect x="210.6" y="355.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.6" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (7 samples, 0.24%)</title><rect x="211.8" y="339.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (5 samples, 0.17%)</title><rect x="212.2" y="323.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (5 samples, 0.17%)</title><rect x="212.2" y="307.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (4 samples, 0.14%)</title><rect x="212.6" y="291.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.6" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.07%)</title><rect x="213.4" y="275.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.4" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.07%)</title><rect x="213.4" y="259.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.4" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.03%)</title><rect x="213.8" y="243.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.8" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.03%)</title><rect x="213.8" y="227.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.8" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absHighest (1 samples, 0.03%)</title><rect x="213.8" y="211.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="214.2" y="323.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.2" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (3 samples, 0.10%)</title><rect x="214.6" y="387.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.6" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (7 samples, 0.24%)</title><rect x="215.8" y="387.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.8" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.&lt;init&gt; (6 samples, 0.20%)</title><rect x="215.8" y="371.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.8" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (5 samples, 0.17%)</title><rect x="216.2" y="355.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="219.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (1 samples, 0.03%)</title><rect x="217.8" y="339.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.8" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absHighest (1 samples, 0.03%)</title><rect x="218.2" y="371.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="221.2" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.tooLow (1 samples, 0.03%)</title><rect x="218.2" y="355.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="221.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (1 samples, 0.03%)</title><rect x="218.6" y="419.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="218.6" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (1 samples, 0.03%)</title><rect x="218.6" y="387.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (1 samples, 0.03%)</title><rect x="218.6" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$107/1999162735.accept (762 samples, 25.80%)</title><rect x="219.0" y="419.0" width="304.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.0" y="430.0">ru/mail/polis/dao/re1nex/NewDAO$$Lambda$1..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIterator$5 (762 samples, 25.80%)</title><rect x="219.0" y="403.0" width="304.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.0" y="414.0">ru/mail/polis/dao/re1nex/NewDAO.lambda$ce..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.iterator (762 samples, 25.80%)</title><rect x="219.0" y="387.0" width="304.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.0" y="398.0">ru/mail/polis/dao/re1nex/SSTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt; (762 samples, 25.80%)</title><rect x="219.0" y="371.0" width="304.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.0" y="382.0">ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.binarySearch (762 samples, 25.80%)</title><rect x="219.0" y="355.0" width="304.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.0" y="366.0">ru/mail/polis/dao/re1nex/SSTable.binarySe..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 0.41%)</title><rect x="219.0" y="339.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.0" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="219.8" y="323.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.8" y="334.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.20%)</title><rect x="220.2" y="323.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.2" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.10%)</title><rect x="221.4" y="307.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.4" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.10%)</title><rect x="221.4" y="291.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.4" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.10%)</title><rect x="222.6" y="323.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.6" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="223.0" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.0" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.03%)</title><rect x="223.4" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (750 samples, 25.40%)</title><rect x="223.8" y="339.0" width="299.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.8" y="350.0">ru/mail/polis/dao/re1nex/SSTable.key</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.10%)</title><rect x="223.8" y="323.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.8" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.10%)</title><rect x="223.8" y="307.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="226.8" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.10%)</title><rect x="223.8" y="291.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="226.8" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.10%)</title><rect x="223.8" y="275.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="226.8" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.10%)</title><rect x="223.8" y="259.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="226.8" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.10%)</title><rect x="223.8" y="243.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="226.8" y="254.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="223.8" y="227.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="226.8" y="238.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="224.2" y="227.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="227.2" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.03%)</title><rect x="224.6" y="227.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="227.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (256 samples, 8.67%)</title><rect x="225.0" y="323.0" width="102.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.0" y="334.0">ru/mail/poli..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (256 samples, 8.67%)</title><rect x="225.0" y="307.0" width="102.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.0" y="318.0">sun/nio/ch/F..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (256 samples, 8.67%)</title><rect x="225.0" y="291.0" width="102.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.0" y="302.0">sun/nio/ch/F..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.03%)</title><rect x="227.8" y="275.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (19 samples, 0.64%)</title><rect x="228.2" y="275.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.2" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (19 samples, 0.64%)</title><rect x="228.2" y="259.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.2" y="270.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="232.2" y="243.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="235.2" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="232.2" y="227.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="235.2" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (8 samples, 0.27%)</title><rect x="232.6" y="243.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.6" y="254.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (8 samples, 0.27%)</title><rect x="232.6" y="227.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.6" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (8 samples, 0.27%)</title><rect x="232.6" y="211.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (12 samples, 0.41%)</title><rect x="235.8" y="275.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="238.8" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (11 samples, 0.37%)</title><rect x="236.2" y="259.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.2" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (10 samples, 0.34%)</title><rect x="236.6" y="243.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.6" y="254.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (10 samples, 0.34%)</title><rect x="236.6" y="227.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.6" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (10 samples, 0.34%)</title><rect x="236.6" y="211.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (190 samples, 6.43%)</title><rect x="240.6" y="275.0" width="75.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="243.6" y="286.0">sun/nio/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.20%)</title><rect x="241.0" y="259.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.0" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.07%)</title><rect x="242.6" y="243.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.6" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.03%)</title><rect x="243.4" y="259.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.4" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.flip (1 samples, 0.03%)</title><rect x="243.4" y="243.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.flip (1 samples, 0.03%)</title><rect x="243.4" y="227.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (154 samples, 5.22%)</title><rect x="243.8" y="259.0" width="61.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.8" y="270.0">sun/ni..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="244.2" y="243.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.2" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="244.2" y="227.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (152 samples, 5.15%)</title><rect x="244.6" y="243.0" width="60.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.6" y="254.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (152 samples, 5.15%)</title><rect x="244.6" y="227.0" width="60.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.6" y="238.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (4 samples, 0.14%)</title><rect x="247.8" y="211.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="250.8" y="222.0"></text>
</g>
<g>
<title>__libc_pread64 (133 samples, 4.50%)</title><rect x="249.4" y="211.0" width="53.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="252.4" y="222.0">__lib..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="302.5" y="211.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="305.5" y="222.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.10%)</title><rect x="302.9" y="211.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="305.9" y="222.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="304.1" y="211.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="307.1" y="222.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.07%)</title><rect x="304.5" y="211.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="307.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (17 samples, 0.58%)</title><rect x="305.3" y="259.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.3" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.17%)</title><rect x="305.7" y="243.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.7" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.07%)</title><rect x="306.5" y="227.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="309.5" y="238.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="307.3" y="227.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="310.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (11 samples, 0.37%)</title><rect x="307.7" y="243.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.7" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="311.7" y="227.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (11 samples, 0.37%)</title><rect x="312.1" y="259.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="315.1" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.37%)</title><rect x="312.1" y="243.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="315.1" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="312.1" y="227.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.1" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (5 samples, 0.17%)</title><rect x="312.5" y="227.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="315.5" y="238.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.17%)</title><rect x="314.5" y="227.0" width="2.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="317.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (15 samples, 0.51%)</title><rect x="316.5" y="275.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (9 samples, 0.30%)</title><rect x="318.9" y="259.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.9" y="270.0"></text>
</g>
<g>
<title>pthread_self (2 samples, 0.07%)</title><rect x="321.7" y="243.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="324.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (12 samples, 0.41%)</title><rect x="322.5" y="275.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="325.5" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="326.9" y="259.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="329.9" y="270.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="326.9" y="243.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="329.9" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="326.9" y="227.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="329.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (491 samples, 16.63%)</title><rect x="327.3" y="323.0" width="196.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="330.3" y="334.0">sun/nio/ch/FileChannelImpl..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.03%)</title><rect x="327.7" y="307.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="330.7" y="318.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.03%)</title><rect x="327.7" y="291.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="330.7" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.03%)</title><rect x="327.7" y="275.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="330.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (489 samples, 16.56%)</title><rect x="328.1" y="307.0" width="195.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.1" y="318.0">sun/nio/ch/FileChannelImp..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (2 samples, 0.07%)</title><rect x="331.3" y="291.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="334.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (22 samples, 0.75%)</title><rect x="332.1" y="291.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="335.1" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (22 samples, 0.75%)</title><rect x="332.1" y="275.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.1" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.20%)</title><rect x="338.5" y="259.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.5" y="270.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.20%)</title><rect x="338.5" y="243.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.5" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.20%)</title><rect x="338.5" y="227.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="341.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (23 samples, 0.78%)</title><rect x="340.9" y="291.0" width="9.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="343.9" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (23 samples, 0.78%)</title><rect x="340.9" y="275.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="343.9" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (16 samples, 0.54%)</title><rect x="343.7" y="259.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="346.7" y="270.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (16 samples, 0.54%)</title><rect x="343.7" y="243.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.7" y="254.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (16 samples, 0.54%)</title><rect x="343.7" y="227.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="346.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (380 samples, 12.87%)</title><rect x="350.1" y="291.0" width="151.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="353.1" y="302.0">sun/nio/ch/IOUtil.r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (14 samples, 0.47%)</title><rect x="350.1" y="275.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.1" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.10%)</title><rect x="352.1" y="259.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.1" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.20%)</title><rect x="353.3" y="259.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (313 samples, 10.60%)</title><rect x="355.6" y="275.0" width="125.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.6" y="286.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="355.6" y="259.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="358.6" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="355.6" y="243.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="355.6" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="355.6" y="211.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="358.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (312 samples, 10.57%)</title><rect x="356.0" y="259.0" width="124.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="359.0" y="270.0">sun/nio/ch/File..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (312 samples, 10.57%)</title><rect x="356.0" y="243.0" width="124.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.0" y="254.0">sun/nio/ch/File..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.03%)</title><rect x="359.6" y="227.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="362.6" y="238.0"></text>
</g>
<g>
<title>__libc_pread64 (290 samples, 9.82%)</title><rect x="360.0" y="227.0" width="115.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="363.0" y="238.0">__libc_pread64</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.14%)</title><rect x="475.9" y="227.0" width="1.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="478.9" y="238.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (7 samples, 0.24%)</title><rect x="477.5" y="227.0" width="2.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="480.5" y="238.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="480.3" y="227.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="483.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (47 samples, 1.59%)</title><rect x="480.7" y="275.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.7" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.34%)</title><rect x="482.7" y="259.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.7" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="484.3" y="243.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.3" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="484.3" y="227.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="487.3" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (3 samples, 0.10%)</title><rect x="484.7" y="243.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="487.7" y="254.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.07%)</title><rect x="485.9" y="243.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="488.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (32 samples, 1.08%)</title><rect x="486.7" y="259.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="489.7" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.07%)</title><rect x="494.7" y="243.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="497.7" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.07%)</title><rect x="495.5" y="243.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.5" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.07%)</title><rect x="495.5" y="227.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="498.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.07%)</title><rect x="495.5" y="211.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="498.5" y="222.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.03%)</title><rect x="495.9" y="195.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="498.9" y="206.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.03%)</title><rect x="495.9" y="179.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="498.9" y="190.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.03%)</title><rect x="495.9" y="163.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="498.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (8 samples, 0.27%)</title><rect x="496.3" y="243.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.3" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.14%)</title><rect x="496.3" y="227.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="499.3" y="238.0"></text>
</g>
<g>
<title>jlong_arraycopy (1 samples, 0.03%)</title><rect x="497.9" y="227.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="500.9" y="238.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="498.3" y="227.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="501.3" y="238.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.03%)</title><rect x="499.1" y="227.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="502.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (6 samples, 0.20%)</title><rect x="499.5" y="275.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="502.5" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.20%)</title><rect x="499.5" y="259.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.5" y="270.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.14%)</title><rect x="500.3" y="243.0" width="1.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="503.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (29 samples, 0.98%)</title><rect x="501.9" y="291.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.9" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.14%)</title><rect x="506.3" y="275.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="509.3" y="286.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (3 samples, 0.10%)</title><rect x="506.7" y="259.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="509.7" y="270.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="506.7" y="243.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="509.7" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.07%)</title><rect x="507.1" y="243.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="510.1" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.03%)</title><rect x="507.1" y="227.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="510.1" y="238.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="507.5" y="227.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="510.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (14 samples, 0.47%)</title><rect x="507.9" y="275.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (25 samples, 0.85%)</title><rect x="513.5" y="291.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="516.5" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="523.1" y="275.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="526.1" y="286.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="523.1" y="259.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="526.1" y="270.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="523.1" y="243.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="526.1" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.27%)</title><rect x="523.5" y="435.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="526.5" y="446.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 0.17%)</title><rect x="524.3" y="419.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="527.3" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.03%)</title><rect x="526.3" y="419.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="529.3" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.07%)</title><rect x="526.7" y="435.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="529.7" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.07%)</title><rect x="526.7" y="419.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="529.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (10 samples, 0.34%)</title><rect x="527.5" y="435.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="530.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (10 samples, 0.34%)</title><rect x="527.5" y="419.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (10 samples, 0.34%)</title><rect x="527.5" y="403.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="530.5" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.24%)</title><rect x="527.5" y="387.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="530.5" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="527.5" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.5" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 0.10%)</title><rect x="527.9" y="371.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.9" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.07%)</title><rect x="528.3" y="355.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="531.3" y="366.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.03%)</title><rect x="528.7" y="339.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="531.7" y="350.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.10%)</title><rect x="529.1" y="371.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="532.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="530.3" y="387.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="533.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (2 samples, 0.07%)</title><rect x="530.7" y="387.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="533.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (2 samples, 0.07%)</title><rect x="530.7" y="371.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="533.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (101 samples, 3.42%)</title><rect x="531.5" y="435.0" width="40.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="534.5" y="446.0">ru/..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="531.5" y="419.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="534.5" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="531.9" y="419.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="534.9" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="531.9" y="403.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="534.9" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="531.9" y="387.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="534.9" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="531.9" y="371.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="534.9" y="382.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="531.9" y="355.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="534.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (99 samples, 3.35%)</title><rect x="532.3" y="419.0" width="39.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="535.3" y="430.0">ru/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (96 samples, 3.25%)</title><rect x="533.5" y="403.0" width="38.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.5" y="414.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 0.10%)</title><rect x="533.5" y="387.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="536.5" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (93 samples, 3.15%)</title><rect x="534.7" y="387.0" width="37.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="537.7" y="398.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (93 samples, 3.15%)</title><rect x="534.7" y="371.0" width="37.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="537.7" y="382.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (93 samples, 3.15%)</title><rect x="534.7" y="355.0" width="37.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.7" y="366.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (93 samples, 3.15%)</title><rect x="534.7" y="339.0" width="37.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="537.7" y="350.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (93 samples, 3.15%)</title><rect x="534.7" y="323.0" width="37.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.7" y="334.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (93 samples, 3.15%)</title><rect x="534.7" y="307.0" width="37.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.7" y="318.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (90 samples, 3.05%)</title><rect x="534.7" y="291.0" width="35.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.7" y="302.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (90 samples, 3.05%)</title><rect x="534.7" y="275.0" width="35.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="537.7" y="286.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (90 samples, 3.05%)</title><rect x="534.7" y="259.0" width="35.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.7" y="270.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (90 samples, 3.05%)</title><rect x="534.7" y="243.0" width="35.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="537.7" y="254.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (9 samples, 0.30%)</title><rect x="534.7" y="227.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (9 samples, 0.30%)</title><rect x="534.7" y="211.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (9 samples, 0.30%)</title><rect x="534.7" y="195.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="537.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8 samples, 0.27%)</title><rect x="534.7" y="179.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="537.7" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.27%)</title><rect x="534.7" y="163.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.7" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (8 samples, 0.27%)</title><rect x="534.7" y="147.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="537.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (8 samples, 0.27%)</title><rect x="534.7" y="131.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="537.7" y="142.0"></text>
</g>
<g>
<title>__libc_pread64 (8 samples, 0.27%)</title><rect x="534.7" y="115.0" width="3.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="537.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="537.9" y="179.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="540.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (38 samples, 1.29%)</title><rect x="538.3" y="227.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="541.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.07%)</title><rect x="538.3" y="211.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="541.3" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="538.3" y="195.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="541.3" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="538.3" y="179.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="541.3" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="538.3" y="163.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="541.3" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="538.3" y="147.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="541.3" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="538.3" y="131.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="541.3" y="142.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="538.3" y="115.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="541.3" y="126.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="538.3" y="99.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="541.3" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="538.7" y="195.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="541.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (12 samples, 0.41%)</title><rect x="539.1" y="211.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="542.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (12 samples, 0.41%)</title><rect x="539.1" y="195.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="542.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (12 samples, 0.41%)</title><rect x="539.1" y="179.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="542.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.37%)</title><rect x="539.1" y="163.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="542.1" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="539.1" y="147.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.30%)</title><rect x="539.5" y="147.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (9 samples, 0.30%)</title><rect x="539.5" y="131.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (9 samples, 0.30%)</title><rect x="539.5" y="115.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="542.5" y="126.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.03%)</title><rect x="539.5" y="99.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="542.5" y="110.0"></text>
</g>
<g>
<title>__libc_pread64 (7 samples, 0.24%)</title><rect x="539.9" y="99.0" width="2.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="542.9" y="110.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="542.7" y="99.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="545.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="543.1" y="147.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="543.1" y="131.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="546.1" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="543.5" y="163.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.5" y="174.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="543.5" y="147.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="546.5" y="158.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="543.5" y="131.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="546.5" y="142.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="543.5" y="115.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="546.5" y="126.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.03%)</title><rect x="543.5" y="99.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="546.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (24 samples, 0.81%)</title><rect x="543.9" y="211.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (24 samples, 0.81%)</title><rect x="543.9" y="195.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="546.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.07%)</title><rect x="543.9" y="179.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="546.9" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.07%)</title><rect x="543.9" y="163.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.9" y="174.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.07%)</title><rect x="543.9" y="147.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.9" y="158.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.07%)</title><rect x="543.9" y="131.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="546.9" y="142.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.07%)</title><rect x="543.9" y="115.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="546.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="544.7" y="179.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.7" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="544.7" y="163.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="547.7" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.51%)</title><rect x="545.1" y="179.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="548.1" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="545.1" y="163.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="548.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (12 samples, 0.41%)</title><rect x="545.5" y="163.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="548.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (12 samples, 0.41%)</title><rect x="545.5" y="147.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="548.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (12 samples, 0.41%)</title><rect x="545.5" y="131.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="548.5" y="142.0"></text>
</g>
<g>
<title>__libc_pread64 (11 samples, 0.37%)</title><rect x="545.9" y="115.0" width="4.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="548.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.07%)</title><rect x="550.3" y="163.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.07%)</title><rect x="550.3" y="147.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="553.3" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.10%)</title><rect x="551.0" y="179.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="554.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="551.8" y="163.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="554.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (3 samples, 0.10%)</title><rect x="552.2" y="179.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="555.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (43 samples, 1.46%)</title><rect x="553.4" y="227.0" width="17.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="556.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (43 samples, 1.46%)</title><rect x="553.4" y="211.0" width="17.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="556.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (5 samples, 0.17%)</title><rect x="553.4" y="195.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="556.4" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (5 samples, 0.17%)</title><rect x="553.4" y="179.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="556.4" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="555.0" y="163.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="558.0" y="174.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="555.0" y="147.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="558.0" y="158.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="555.0" y="131.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (33 samples, 1.12%)</title><rect x="555.4" y="195.0" width="13.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="558.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (24 samples, 0.81%)</title><rect x="555.4" y="179.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="558.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (24 samples, 0.81%)</title><rect x="555.4" y="163.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="558.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (24 samples, 0.81%)</title><rect x="555.4" y="147.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="558.4" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (23 samples, 0.78%)</title><rect x="555.4" y="131.0" width="9.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="558.4" y="142.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="564.6" y="131.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="567.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.27%)</title><rect x="565.0" y="179.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="568.0" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.07%)</title><rect x="566.2" y="163.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="569.2" y="174.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="566.6" y="147.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="569.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.10%)</title><rect x="567.0" y="163.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="570.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="568.2" y="179.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.2" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="568.2" y="163.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.2" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="568.2" y="147.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="571.2" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="568.2" y="131.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="571.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="568.6" y="195.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="571.6" y="206.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="568.6" y="179.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="571.6" y="190.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="568.6" y="163.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="571.6" y="174.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="568.6" y="147.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="571.6" y="158.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.03%)</title><rect x="568.6" y="131.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="571.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (4 samples, 0.14%)</title><rect x="569.0" y="195.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.0" y="206.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (3 samples, 0.10%)</title><rect x="570.6" y="291.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="573.6" y="302.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (3 samples, 0.10%)</title><rect x="570.6" y="275.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="573.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (3 samples, 0.10%)</title><rect x="570.6" y="259.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="573.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (3 samples, 0.10%)</title><rect x="570.6" y="243.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="573.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="570.6" y="227.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="573.6" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="570.6" y="211.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.03%)</title><rect x="571.0" y="227.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="574.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="571.0" y="211.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="574.0" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="571.0" y="195.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="574.0" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="571.0" y="179.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="574.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="571.0" y="163.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="574.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getValue (1 samples, 0.03%)</title><rect x="571.4" y="227.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (37 samples, 1.25%)</title><rect x="571.8" y="435.0" width="14.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="574.8" y="446.0"></text>
</g>
<g>
<title>java/util/Collection.stream (27 samples, 0.91%)</title><rect x="573.0" y="419.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="576.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (26 samples, 0.88%)</title><rect x="573.0" y="403.0" width="10.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="576.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (25 samples, 0.85%)</title><rect x="573.4" y="387.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="576.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="573.4" y="371.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="576.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (24 samples, 0.81%)</title><rect x="573.8" y="371.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="576.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (24 samples, 0.81%)</title><rect x="573.8" y="355.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="576.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (24 samples, 0.81%)</title><rect x="573.8" y="339.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.07%)</title><rect x="574.2" y="323.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="577.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="574.6" y="307.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="577.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="574.6" y="291.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="577.6" y="302.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="574.6" y="275.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="577.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="574.6" y="259.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="577.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (21 samples, 0.71%)</title><rect x="575.0" y="323.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 0.27%)</title><rect x="580.2" y="307.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="583.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.27%)</title><rect x="580.2" y="291.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.17%)</title><rect x="581.4" y="275.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.4" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.03%)</title><rect x="581.4" y="259.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="584.4" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="581.8" y="259.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.8" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="581.8" y="243.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.8" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.10%)</title><rect x="582.2" y="259.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="585.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.10%)</title><rect x="582.2" y="243.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="585.2" y="254.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.07%)</title><rect x="582.6" y="227.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="585.6" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.03%)</title><rect x="583.4" y="403.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (1 samples, 0.03%)</title><rect x="583.8" y="419.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.10%)</title><rect x="584.2" y="419.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.10%)</title><rect x="584.2" y="403.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="587.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.10%)</title><rect x="584.2" y="387.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="587.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (2 samples, 0.07%)</title><rect x="584.6" y="371.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="587.6" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (3 samples, 0.10%)</title><rect x="585.4" y="419.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="588.4" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (3 samples, 0.10%)</title><rect x="585.4" y="403.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="588.4" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.07%)</title><rect x="585.4" y="387.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="588.4" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.07%)</title><rect x="585.4" y="371.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="588.4" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$96/314690043.get$Lambda (2 samples, 0.07%)</title><rect x="585.4" y="355.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.4" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (1 samples, 0.03%)</title><rect x="586.2" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="589.2" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="586.2" y="371.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="589.2" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="586.2" y="355.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="589.2" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="586.2" y="339.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="589.2" y="350.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.03%)</title><rect x="586.2" y="323.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="589.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Value.getData (2 samples, 0.07%)</title><rect x="586.6" y="467.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="589.6" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.07%)</title><rect x="586.6" y="451.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="589.6" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="587.0" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="587.0" y="419.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="590.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="587.0" y="403.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="590.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Value.isTombstone (4 samples, 0.14%)</title><rect x="587.4" y="467.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="590.4" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="587.8" y="451.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="590.8" y="462.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="588.2" y="451.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="591.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (3 samples, 0.10%)</title><rect x="589.0" y="467.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="592.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.10%)</title><rect x="589.0" y="451.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="592.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.10%)</title><rect x="589.0" y="435.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="592.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="589.0" y="419.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="592.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="589.0" y="403.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="592.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (1 samples, 0.03%)</title><rect x="589.4" y="387.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.03%)</title><rect x="589.8" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="592.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (50 samples, 1.69%)</title><rect x="590.2" y="483.0" width="20.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="593.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (50 samples, 1.69%)</title><rect x="590.2" y="467.0" width="20.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="593.2" y="478.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="591.4" y="451.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="594.4" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="591.4" y="435.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.4" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="591.4" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="594.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="591.4" y="403.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (44 samples, 1.49%)</title><rect x="591.8" y="451.0" width="17.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="594.8" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.44%)</title><rect x="591.8" y="435.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="594.8" y="446.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.14%)</title><rect x="595.4" y="419.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="598.4" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.14%)</title><rect x="595.4" y="403.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="598.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.14%)</title><rect x="595.4" y="387.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="598.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (31 samples, 1.05%)</title><rect x="597.0" y="435.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="600.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (31 samples, 1.05%)</title><rect x="597.0" y="419.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="600.0" y="430.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="597.4" y="403.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="600.4" y="414.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="597.4" y="387.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="600.4" y="398.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.17%)</title><rect x="597.8" y="403.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="600.8" y="414.0"></text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.03%)</title><rect x="599.8" y="403.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="602.8" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (20 samples, 0.68%)</title><rect x="600.2" y="403.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.2" y="414.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (19 samples, 0.64%)</title><rect x="600.6" y="387.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="603.6" y="398.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (8 samples, 0.27%)</title><rect x="601.0" y="371.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="604.0" y="382.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.07%)</title><rect x="601.4" y="355.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="604.4" y="366.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="602.2" y="355.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="605.2" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.14%)</title><rect x="602.6" y="355.0" width="1.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="605.6" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.03%)</title><rect x="603.8" y="339.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="606.8" y="350.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="604.2" y="371.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="607.2" y="382.0"></text>
</g>
<g>
<title>__send (6 samples, 0.20%)</title><rect x="604.6" y="371.0" width="2.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="607.6" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.07%)</title><rect x="607.0" y="371.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="610.0" y="382.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.03%)</title><rect x="607.8" y="371.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="610.8" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.10%)</title><rect x="608.2" y="403.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="611.2" y="414.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="608.2" y="387.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="611.2" y="398.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.07%)</title><rect x="608.6" y="387.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="611.6" y="398.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.07%)</title><rect x="608.6" y="371.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="611.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.07%)</title><rect x="609.4" y="451.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="612.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.sendReplica (975 samples, 33.02%)</title><rect x="610.2" y="515.0" width="389.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="613.2" y="526.0">ru/mail/polis/service/re1nex/ApiControllerImpl.sendRe..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendReplica (975 samples, 33.02%)</title><rect x="610.2" y="499.0" width="389.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="613.2" y="510.0">ru/mail/polis/service/re1nex/ApiController.sendReplica</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.severalNodesForKey (29 samples, 0.98%)</title><rect x="610.2" y="483.0" width="11.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.2" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.03%)</title><rect x="610.2" y="467.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="613.2" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.03%)</title><rect x="610.2" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="613.2" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="610.2" y="435.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="613.2" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="610.2" y="419.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="613.2" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.03%)</title><rect x="610.2" y="403.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="613.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="610.2" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="613.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="610.2" y="371.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.2" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (13 samples, 0.44%)</title><rect x="610.6" y="467.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="613.6" y="478.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (4 samples, 0.14%)</title><rect x="610.6" y="451.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="613.6" y="462.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (4 samples, 0.14%)</title><rect x="610.6" y="435.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="613.6" y="446.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (4 samples, 0.14%)</title><rect x="610.6" y="419.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="613.6" y="430.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (4 samples, 0.14%)</title><rect x="610.6" y="403.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="613.6" y="414.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (4 samples, 0.14%)</title><rect x="610.6" y="387.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="613.6" y="398.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bBig (2 samples, 0.07%)</title><rect x="610.6" y="371.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="613.6" y="382.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (1 samples, 0.03%)</title><rect x="611.0" y="355.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="614.0" y="366.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (2 samples, 0.07%)</title><rect x="611.4" y="371.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="614.4" y="382.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompressCheck (2 samples, 0.07%)</title><rect x="611.4" y="355.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="614.4" y="366.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (1 samples, 0.03%)</title><rect x="611.4" y="339.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="614.4" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="611.8" y="339.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="614.8" y="350.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (9 samples, 0.30%)</title><rect x="612.2" y="451.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="615.2" y="462.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (9 samples, 0.30%)</title><rect x="612.2" y="435.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="615.2" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (9 samples, 0.30%)</title><rect x="612.2" y="419.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="615.2" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (6 samples, 0.20%)</title><rect x="612.2" y="403.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="615.2" y="414.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (6 samples, 0.20%)</title><rect x="612.2" y="387.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.2" y="398.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (6 samples, 0.20%)</title><rect x="612.2" y="371.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.2" y="382.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (6 samples, 0.20%)</title><rect x="612.2" y="355.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="615.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (6 samples, 0.20%)</title><rect x="612.2" y="339.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="615.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (6 samples, 0.20%)</title><rect x="612.2" y="323.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="615.2" y="334.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (6 samples, 0.20%)</title><rect x="612.2" y="307.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.2" y="318.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (3 samples, 0.10%)</title><rect x="614.6" y="403.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="617.6" y="414.0"></text>
</g>
<g>
<title>java/security/Provider.getService (3 samples, 0.10%)</title><rect x="614.6" y="387.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.10%)</title><rect x="614.6" y="371.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="617.6" y="382.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (2 samples, 0.07%)</title><rect x="615.0" y="355.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="618.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.07%)</title><rect x="615.0" y="339.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="618.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.getNodesFromMap (15 samples, 0.51%)</title><rect x="615.8" y="467.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.8" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (4 samples, 0.14%)</title><rect x="615.8" y="451.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="618.8" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (4 samples, 0.14%)</title><rect x="615.8" y="435.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="618.8" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (2 samples, 0.07%)</title><rect x="615.8" y="419.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="618.8" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (2 samples, 0.07%)</title><rect x="616.6" y="419.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="619.6" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$ValueIterator.next (1 samples, 0.03%)</title><rect x="617.4" y="451.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="620.4" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.03%)</title><rect x="617.4" y="435.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="620.4" y="446.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (10 samples, 0.34%)</title><rect x="617.8" y="451.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="620.8" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (9 samples, 0.30%)</title><rect x="618.2" y="435.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.2" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.07%)</title><rect x="619.0" y="419.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="619.4" y="403.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="622.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="619.4" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="622.4" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="619.4" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="622.4" y="382.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.03%)</title><rect x="619.4" y="355.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.4" y="366.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.03%)</title><rect x="619.4" y="339.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="622.4" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (5 samples, 0.17%)</title><rect x="619.8" y="419.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.8" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (1 samples, 0.03%)</title><rect x="619.8" y="403.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="622.8" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (4 samples, 0.14%)</title><rect x="620.2" y="403.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (943 samples, 31.93%)</title><rect x="621.8" y="483.0" width="376.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="624.8" y="494.0">ru/mail/polis/service/re1nex/ApiControllerImpl.hand..</text>
</g>
<g>
<title>java/util/TreeMap.put (2 samples, 0.07%)</title><rect x="625.0" y="467.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.0" y="478.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="625.8" y="467.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="628.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponseLocal (1 samples, 0.03%)</title><rect x="626.2" y="467.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="629.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.handleResponses (885 samples, 29.97%)</title><rect x="626.6" y="467.0" width="353.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="629.6" y="478.0">ru/mail/polis/service/re1nex/ApiControllerImpl.h..</text>
</g>
<g>
<title>java/util/TreeSet.iterator (1 samples, 0.03%)</title><rect x="627.0" y="451.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="630.0" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="627.0" y="435.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="630.0" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (1 samples, 0.03%)</title><rect x="627.0" y="419.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="630.0" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="627.0" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="630.0" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="627.0" y="387.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="630.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.removeLocal (6 samples, 0.20%)</title><rect x="627.4" y="451.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="630.4" y="462.0"></text>
</g>
<g>
<title>java/util/TreeSet.remove (6 samples, 0.20%)</title><rect x="627.4" y="435.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="630.4" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (6 samples, 0.20%)</title><rect x="627.4" y="419.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="630.4" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.deleteEntry (6 samples, 0.20%)</title><rect x="627.4" y="403.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="630.4" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.03%)</title><rect x="629.0" y="387.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="632.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (1 samples, 0.03%)</title><rect x="629.0" y="371.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="632.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.proxy (1 samples, 0.03%)</title><rect x="629.4" y="387.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl$$Lambda$76/953298494.handleLocalResponse (668 samples, 22.62%)</title><rect x="629.8" y="451.0" width="266.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.8" y="462.0">ru/mail/polis/service/re1nex/ApiCont..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.lambda$handleResponses$0 (668 samples, 22.62%)</title><rect x="629.8" y="435.0" width="266.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="632.8" y="446.0">ru/mail/polis/service/re1nex/ApiCont..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.get (668 samples, 22.62%)</title><rect x="629.8" y="419.0" width="266.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="632.8" y="430.0">ru/mail/polis/service/re1nex/ApiCont..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/953276539.linkToTargetMethod (1 samples, 0.03%)</title><rect x="630.2" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="633.2" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/235632877.invoke (1 samples, 0.03%)</title><rect x="630.2" y="387.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="633.2" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/31996640.invokeStatic (1 samples, 0.03%)</title><rect x="630.2" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.2" y="382.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.03%)</title><rect x="630.2" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="633.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.stringSize (1 samples, 0.03%)</title><rect x="630.2" y="339.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="633.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.03%)</title><rect x="630.6" y="403.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (660 samples, 22.35%)</title><rect x="631.0" y="403.0" width="263.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.0" y="414.0">ru/mail/polis/dao/DAO.getValue</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (49 samples, 1.66%)</title><rect x="631.4" y="387.0" width="19.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.4" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (47 samples, 1.59%)</title><rect x="631.4" y="371.0" width="18.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="634.4" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.03%)</title><rect x="631.4" y="355.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="634.4" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.03%)</title><rect x="631.4" y="339.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="634.4" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1 samples, 0.03%)</title><rect x="631.4" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.4" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.03%)</title><rect x="631.4" y="307.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="634.4" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1 samples, 0.03%)</title><rect x="631.4" y="291.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="634.4" y="302.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="631.4" y="275.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="634.4" y="286.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="631.4" y="259.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.03%)</title><rect x="631.4" y="243.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="634.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.03%)</title><rect x="631.4" y="227.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="634.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="631.4" y="211.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="634.4" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="631.4" y="195.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.4" y="206.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.03%)</title><rect x="631.4" y="179.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="634.4" y="190.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (46 samples, 1.56%)</title><rect x="631.8" y="355.0" width="18.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.8" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (46 samples, 1.56%)</title><rect x="631.8" y="339.0" width="18.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="634.8" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (46 samples, 1.56%)</title><rect x="631.8" y="323.0" width="18.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.8" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (46 samples, 1.56%)</title><rect x="631.8" y="307.0" width="18.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.8" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (46 samples, 1.56%)</title><rect x="631.8" y="291.0" width="18.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.8" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (46 samples, 1.56%)</title><rect x="631.8" y="275.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.8" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (46 samples, 1.56%)</title><rect x="631.8" y="259.0" width="18.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (46 samples, 1.56%)</title><rect x="631.8" y="243.0" width="18.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (46 samples, 1.56%)</title><rect x="631.8" y="227.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (46 samples, 1.56%)</title><rect x="631.8" y="211.0" width="18.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="634.8" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (9 samples, 0.30%)</title><rect x="631.8" y="195.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.8" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="631.8" y="179.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.8" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="631.8" y="163.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="634.8" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="631.8" y="147.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="634.8" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="631.8" y="131.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="634.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="631.8" y="115.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="631.8" y="99.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.8" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (8 samples, 0.27%)</title><rect x="632.2" y="179.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (8 samples, 0.27%)</title><rect x="632.2" y="163.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.03%)</title><rect x="632.2" y="147.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="635.2" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="632.2" y="131.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="632.6" y="147.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.6" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="632.6" y="131.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.17%)</title><rect x="633.0" y="147.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="636.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.14%)</title><rect x="633.0" y="131.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (4 samples, 0.14%)</title><rect x="633.0" y="115.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="636.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (4 samples, 0.14%)</title><rect x="633.0" y="99.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="636.0" y="110.0"></text>
</g>
<g>
<title>__libc_pread64 (4 samples, 0.14%)</title><rect x="633.0" y="83.0" width="1.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="636.0" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="634.6" y="131.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.6" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="634.6" y="115.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.6" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="634.6" y="99.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="637.6" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="635.0" y="147.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (21 samples, 0.71%)</title><rect x="635.4" y="195.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="635.4" y="179.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.4" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="635.4" y="163.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.4" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="635.4" y="147.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.4" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="635.4" y="131.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="635.4" y="115.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="635.4" y="99.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (6 samples, 0.20%)</title><rect x="635.8" y="179.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (6 samples, 0.20%)</title><rect x="635.8" y="163.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (6 samples, 0.20%)</title><rect x="635.8" y="147.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.8" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.20%)</title><rect x="635.8" y="131.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.8" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.14%)</title><rect x="635.8" y="115.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (4 samples, 0.14%)</title><rect x="635.8" y="99.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.8" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (4 samples, 0.14%)</title><rect x="635.8" y="83.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.8" y="94.0"></text>
</g>
<g>
<title>__libc_pread64 (4 samples, 0.14%)</title><rect x="635.8" y="67.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="638.8" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="637.4" y="115.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="640.4" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="637.4" y="99.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.4" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="637.8" y="115.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.8" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="637.8" y="99.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.8" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="637.8" y="83.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.8" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (14 samples, 0.47%)</title><rect x="638.2" y="179.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="641.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (14 samples, 0.47%)</title><rect x="638.2" y="163.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="641.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.07%)</title><rect x="638.2" y="147.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="641.2" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.07%)</title><rect x="638.2" y="131.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.2" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.07%)</title><rect x="638.2" y="115.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.2" y="126.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.07%)</title><rect x="638.2" y="99.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="641.2" y="110.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.07%)</title><rect x="638.2" y="83.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.2" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 0.30%)</title><rect x="639.0" y="147.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="642.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (7 samples, 0.24%)</title><rect x="639.4" y="131.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="642.4" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (7 samples, 0.24%)</title><rect x="639.4" y="115.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="642.4" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (7 samples, 0.24%)</title><rect x="639.4" y="99.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="642.4" y="110.0"></text>
</g>
<g>
<title>__libc_pread64 (7 samples, 0.24%)</title><rect x="639.4" y="83.0" width="2.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="642.4" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="642.2" y="131.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.2" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="642.2" y="115.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="645.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.07%)</title><rect x="642.6" y="147.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="645.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="643.4" y="147.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="646.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (16 samples, 0.54%)</title><rect x="643.8" y="195.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="646.8" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (16 samples, 0.54%)</title><rect x="643.8" y="179.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="646.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.03%)</title><rect x="643.8" y="163.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="646.8" y="174.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="643.8" y="147.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.8" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="644.2" y="163.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.2" y="174.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="644.2" y="147.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.2" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="644.2" y="131.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="647.2" y="142.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="644.2" y="115.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.2" y="126.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="644.2" y="99.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.2" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.37%)</title><rect x="644.6" y="163.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="647.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.27%)</title><rect x="644.6" y="147.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="647.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (8 samples, 0.27%)</title><rect x="644.6" y="131.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="647.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (8 samples, 0.27%)</title><rect x="644.6" y="115.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="647.6" y="126.0"></text>
</g>
<g>
<title>__libc_pread64 (7 samples, 0.24%)</title><rect x="644.6" y="99.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="647.6" y="110.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="647.4" y="99.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="650.4" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.07%)</title><rect x="647.8" y="147.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="650.8" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.07%)</title><rect x="647.8" y="131.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="650.8" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (2 samples, 0.07%)</title><rect x="647.8" y="115.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="650.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (2 samples, 0.07%)</title><rect x="647.8" y="99.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="650.8" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="648.6" y="147.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="651.6" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="648.6" y="131.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="651.6" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="648.6" y="115.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="651.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.10%)</title><rect x="649.0" y="163.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="652.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="649.7" y="147.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="652.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.07%)</title><rect x="650.1" y="371.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="653.1" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.07%)</title><rect x="650.1" y="355.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.03%)</title><rect x="650.9" y="387.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="653.9" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.03%)</title><rect x="650.9" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.9" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.03%)</title><rect x="650.9" y="355.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.9" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="650.9" y="339.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="650.9" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="653.9" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="650.9" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="650.9" y="291.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.9" y="302.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="650.9" y="275.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="653.9" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="650.9" y="259.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="653.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (609 samples, 20.62%)</title><rect x="651.3" y="387.0" width="243.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="654.3" y="398.0">ru/mail/polis/dao/re1nex/NewDAO...</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (120 samples, 4.06%)</title><rect x="651.3" y="371.0" width="48.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="654.3" y="382.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (120 samples, 4.06%)</title><rect x="651.3" y="355.0" width="48.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="654.3" y="366.0">com/..</text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.03%)</title><rect x="651.7" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="654.7" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.10%)</title><rect x="652.1" y="339.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="655.1" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (1 samples, 0.03%)</title><rect x="652.9" y="323.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="655.9" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (111 samples, 3.76%)</title><rect x="653.3" y="339.0" width="44.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.3" y="350.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (111 samples, 3.76%)</title><rect x="653.3" y="323.0" width="44.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="656.3" y="334.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (1 samples, 0.03%)</title><rect x="653.3" y="307.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="656.3" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="653.3" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.3" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (110 samples, 3.73%)</title><rect x="653.7" y="307.0" width="44.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="656.7" y="318.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (110 samples, 3.73%)</title><rect x="653.7" y="291.0" width="44.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="656.7" y="302.0">java..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (109 samples, 3.69%)</title><rect x="653.7" y="275.0" width="43.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="656.7" y="286.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (109 samples, 3.69%)</title><rect x="653.7" y="259.0" width="43.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="656.7" y="270.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (108 samples, 3.66%)</title><rect x="653.7" y="243.0" width="43.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="656.7" y="254.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (107 samples, 3.62%)</title><rect x="654.1" y="227.0" width="42.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.1" y="238.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (107 samples, 3.62%)</title><rect x="654.1" y="211.0" width="42.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="657.1" y="222.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (107 samples, 3.62%)</title><rect x="654.1" y="195.0" width="42.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.1" y="206.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (13 samples, 0.44%)</title><rect x="654.1" y="179.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="657.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.10%)</title><rect x="654.1" y="163.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="657.1" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.10%)</title><rect x="654.1" y="147.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.1" y="158.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="654.1" y="131.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="657.1" y="142.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="654.1" y="115.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="657.1" y="126.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="654.1" y="99.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="657.1" y="110.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="654.1" y="83.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="657.1" y="94.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="654.1" y="67.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="657.1" y="78.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="654.1" y="51.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="657.1" y="62.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="654.1" y="35.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="657.1" y="46.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="654.5" y="131.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.5" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="654.5" y="115.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (10 samples, 0.34%)</title><rect x="655.3" y="163.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (9 samples, 0.30%)</title><rect x="655.7" y="147.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="658.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (7 samples, 0.24%)</title><rect x="655.7" y="131.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="658.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (5 samples, 0.17%)</title><rect x="655.7" y="115.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="658.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (5 samples, 0.17%)</title><rect x="655.7" y="99.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="658.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (5 samples, 0.17%)</title><rect x="655.7" y="83.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.7" y="94.0"></text>
</g>
<g>
<title>__libc_pread64 (5 samples, 0.17%)</title><rect x="655.7" y="67.0" width="2.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="658.7" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="657.7" y="115.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="660.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="657.7" y="99.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="660.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="658.1" y="115.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="661.1" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="658.1" y="99.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="661.1" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="658.1" y="83.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="661.1" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.07%)</title><rect x="658.5" y="131.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="661.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (48 samples, 1.63%)</title><rect x="659.3" y="179.0" width="19.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="662.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (16 samples, 0.54%)</title><rect x="659.3" y="163.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="662.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="659.3" y="147.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="662.3" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="659.3" y="131.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="659.3" y="115.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="662.3" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="659.3" y="99.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.3" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (15 samples, 0.51%)</title><rect x="659.7" y="147.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (15 samples, 0.51%)</title><rect x="659.7" y="131.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.10%)</title><rect x="659.7" y="115.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="662.7" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.10%)</title><rect x="659.7" y="99.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="662.7" y="110.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="660.5" y="83.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.5" y="94.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="660.5" y="67.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.5" y="78.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="660.5" y="51.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.5" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="660.9" y="115.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="663.9" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="660.9" y="99.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="663.9" y="110.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="660.9" y="83.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.9" y="94.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="660.9" y="67.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.9" y="78.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="660.9" y="51.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.9" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (10 samples, 0.34%)</title><rect x="661.3" y="115.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="664.3" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.30%)</title><rect x="661.3" y="99.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="664.3" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (9 samples, 0.30%)</title><rect x="661.3" y="83.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="664.3" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (9 samples, 0.30%)</title><rect x="661.3" y="67.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="664.3" y="78.0"></text>
</g>
<g>
<title>__libc_pread64 (9 samples, 0.30%)</title><rect x="661.3" y="51.0" width="3.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="664.3" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="664.9" y="99.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="667.9" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="664.9" y="83.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="665.3" y="115.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.3" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="665.3" y="99.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.3" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (32 samples, 1.08%)</title><rect x="665.7" y="163.0" width="12.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="668.7" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (31 samples, 1.05%)</title><rect x="666.1" y="147.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="669.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.10%)</title><rect x="666.1" y="131.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="669.1" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.10%)</title><rect x="666.1" y="115.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="669.1" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.07%)</title><rect x="666.5" y="99.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="669.5" y="110.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.07%)</title><rect x="666.5" y="83.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="669.5" y="94.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.07%)</title><rect x="666.5" y="67.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="669.5" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="667.3" y="131.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.3" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="667.3" y="115.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="670.3" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="667.3" y="99.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="670.3" y="110.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="667.3" y="83.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="670.3" y="94.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="667.3" y="67.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="670.3" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.88%)</title><rect x="667.7" y="131.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="670.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (22 samples, 0.75%)</title><rect x="667.7" y="115.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="670.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (22 samples, 0.75%)</title><rect x="667.7" y="99.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (22 samples, 0.75%)</title><rect x="667.7" y="83.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="670.7" y="94.0"></text>
</g>
<g>
<title>__libc_pread64 (17 samples, 0.58%)</title><rect x="668.9" y="67.0" width="6.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="671.9" y="78.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="675.7" y="67.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="678.7" y="78.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="676.1" y="67.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="679.1" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.14%)</title><rect x="676.5" y="115.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="679.5" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="676.5" y="99.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="679.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.10%)</title><rect x="676.9" y="99.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.9" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="677.7" y="83.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="680.7" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.03%)</title><rect x="678.1" y="131.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="681.1" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="678.1" y="115.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="681.1" y="126.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.03%)</title><rect x="678.1" y="99.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="681.1" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (46 samples, 1.56%)</title><rect x="678.5" y="179.0" width="18.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="681.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (46 samples, 1.56%)</title><rect x="678.5" y="163.0" width="18.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (4 samples, 0.14%)</title><rect x="678.5" y="147.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="681.5" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (4 samples, 0.14%)</title><rect x="678.5" y="131.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="681.5" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="679.7" y="115.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.7" y="126.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="679.7" y="99.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="682.7" y="110.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="679.7" y="83.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.7" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="680.1" y="147.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="683.1" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="680.1" y="131.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="683.1" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.22%)</title><rect x="680.5" y="147.0" width="14.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (32 samples, 1.08%)</title><rect x="680.5" y="131.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="683.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (32 samples, 1.08%)</title><rect x="680.5" y="115.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="683.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (32 samples, 1.08%)</title><rect x="680.5" y="99.0" width="12.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="683.5" y="110.0"></text>
</g>
<g>
<title>__libc_pread64 (29 samples, 0.98%)</title><rect x="680.5" y="83.0" width="11.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="683.5" y="94.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.10%)</title><rect x="692.1" y="83.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="695.1" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.10%)</title><rect x="693.3" y="131.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="696.3" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.07%)</title><rect x="693.7" y="115.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="696.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="694.1" y="99.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.1" y="110.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.03%)</title><rect x="694.1" y="83.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="697.1" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="694.5" y="131.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="697.5" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="694.5" y="115.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.5" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="694.5" y="99.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="697.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (4 samples, 0.14%)</title><rect x="694.9" y="147.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="697.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="696.1" y="131.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="699.1" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="696.5" y="147.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="699.5" y="158.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="696.9" y="243.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="699.9" y="254.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="696.9" y="227.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="699.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.03%)</title><rect x="696.9" y="211.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="699.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.03%)</title><rect x="696.9" y="195.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="699.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="696.9" y="179.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="699.9" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="696.9" y="163.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="699.9" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="696.9" y="147.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="699.9" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="696.9" y="131.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.9" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="696.9" y="115.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="699.9" y="126.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.03%)</title><rect x="697.3" y="275.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="700.3" y="286.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (4 samples, 0.14%)</title><rect x="697.7" y="339.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="700.7" y="350.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (3 samples, 0.10%)</title><rect x="698.1" y="323.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="701.1" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (3 samples, 0.10%)</title><rect x="698.1" y="307.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="701.1" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.init (1 samples, 0.03%)</title><rect x="698.1" y="291.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="701.1" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (2 samples, 0.07%)</title><rect x="698.5" y="291.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="701.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="698.9" y="275.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="701.9" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="698.9" y="259.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="701.9" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$126/31307001.get$Lambda (1 samples, 0.03%)</title><rect x="698.9" y="243.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="701.9" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$126/31307001.&lt;init&gt; (1 samples, 0.03%)</title><rect x="698.9" y="227.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="701.9" y="238.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (406 samples, 13.75%)</title><rect x="699.3" y="371.0" width="162.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="702.3" y="382.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (17 samples, 0.58%)</title><rect x="699.3" y="355.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="702.3" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (16 samples, 0.54%)</title><rect x="699.7" y="339.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="702.7" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (13 samples, 0.44%)</title><rect x="700.1" y="323.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="703.1" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="700.1" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="703.1" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="700.1" y="291.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="703.1" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (12 samples, 0.41%)</title><rect x="700.5" y="307.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.5" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (12 samples, 0.41%)</title><rect x="700.5" y="291.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="703.5" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (9 samples, 0.30%)</title><rect x="701.7" y="275.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="704.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (8 samples, 0.27%)</title><rect x="702.1" y="259.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="705.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (8 samples, 0.27%)</title><rect x="702.1" y="243.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="705.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (7 samples, 0.24%)</title><rect x="702.5" y="227.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="705.5" y="238.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="704.5" y="211.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="707.5" y="222.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.03%)</title><rect x="704.9" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="707.9" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (2 samples, 0.07%)</title><rect x="705.3" y="323.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="708.3" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.&lt;init&gt; (2 samples, 0.07%)</title><rect x="705.3" y="307.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="708.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$107/1999162735.accept (389 samples, 13.17%)</title><rect x="706.1" y="355.0" width="155.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="709.1" y="366.0">ru/mail/polis/dao/re..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIterator$5 (389 samples, 13.17%)</title><rect x="706.1" y="339.0" width="155.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.1" y="350.0">ru/mail/polis/dao/re..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.iterator (389 samples, 13.17%)</title><rect x="706.1" y="323.0" width="155.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="709.1" y="334.0">ru/mail/polis/dao/re..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt; (389 samples, 13.17%)</title><rect x="706.1" y="307.0" width="155.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.1" y="318.0">ru/mail/polis/dao/re..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.binarySearch (389 samples, 13.17%)</title><rect x="706.1" y="291.0" width="155.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.1" y="302.0">ru/mail/polis/dao/re..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.10%)</title><rect x="706.5" y="275.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.5" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="707.3" y="259.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="710.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (385 samples, 13.04%)</title><rect x="707.7" y="275.0" width="153.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.7" y="286.0">ru/mail/polis/dao/r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.07%)</title><rect x="707.7" y="259.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.7" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="707.7" y="243.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="710.7" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.07%)</title><rect x="707.7" y="227.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="710.7" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.07%)</title><rect x="707.7" y="211.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="710.7" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.07%)</title><rect x="707.7" y="195.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="710.7" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="707.7" y="179.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="710.7" y="190.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="707.7" y="163.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="710.7" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="708.1" y="163.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="711.1" y="174.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="708.1" y="147.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="711.1" y="158.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="708.1" y="131.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="711.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (159 samples, 5.38%)</title><rect x="708.5" y="259.0" width="63.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="711.5" y="270.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="708.5" y="243.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="708.5" y="227.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.5" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="708.5" y="211.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="711.5" y="222.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="708.5" y="195.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="711.5" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="708.5" y="179.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="711.5" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="708.5" y="163.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="711.5" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="708.5" y="147.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="711.5" y="158.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="708.5" y="131.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="711.5" y="142.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="708.5" y="115.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="711.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (158 samples, 5.35%)</title><rect x="708.9" y="243.0" width="63.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="711.9" y="254.0">sun/nio..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.03%)</title><rect x="708.9" y="227.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="711.9" y="238.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.03%)</title><rect x="708.9" y="211.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="711.9" y="222.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.03%)</title><rect x="708.9" y="195.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="711.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (157 samples, 5.32%)</title><rect x="709.3" y="227.0" width="62.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.3" y="238.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (14 samples, 0.47%)</title><rect x="710.1" y="211.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="713.1" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (14 samples, 0.47%)</title><rect x="710.1" y="195.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.1" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.17%)</title><rect x="713.7" y="179.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="716.7" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.17%)</title><rect x="713.7" y="163.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="716.7" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.17%)</title><rect x="713.7" y="147.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="716.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (9 samples, 0.30%)</title><rect x="715.7" y="211.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="718.7" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (9 samples, 0.30%)</title><rect x="715.7" y="195.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="718.7" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.24%)</title><rect x="716.5" y="179.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="719.5" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (7 samples, 0.24%)</title><rect x="716.5" y="163.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="719.5" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (7 samples, 0.24%)</title><rect x="716.5" y="147.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (117 samples, 3.96%)</title><rect x="719.3" y="211.0" width="46.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="722.3" y="222.0">sun/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.10%)</title><rect x="719.7" y="195.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="722.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (91 samples, 3.08%)</title><rect x="720.9" y="195.0" width="36.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="723.9" y="206.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (90 samples, 3.05%)</title><rect x="721.3" y="179.0" width="35.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.3" y="190.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (90 samples, 3.05%)</title><rect x="721.3" y="163.0" width="35.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="724.3" y="174.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.03%)</title><rect x="722.5" y="147.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="725.5" y="158.0"></text>
</g>
<g>
<title>__libc_pread64 (86 samples, 2.91%)</title><rect x="722.9" y="147.0" width="34.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="725.9" y="158.0">__..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (20 samples, 0.68%)</title><rect x="757.2" y="195.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="760.2" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.30%)</title><rect x="757.2" y="179.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.2" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.07%)</title><rect x="758.4" y="163.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="761.4" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.07%)</title><rect x="759.2" y="163.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.2" y="174.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.07%)</title><rect x="760.0" y="163.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="763.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (11 samples, 0.37%)</title><rect x="760.8" y="179.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.07%)</title><rect x="765.2" y="195.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="768.2" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.07%)</title><rect x="765.2" y="179.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="768.2" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="765.2" y="163.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.2" y="174.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="765.6" y="163.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="768.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (13 samples, 0.44%)</title><rect x="766.0" y="211.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="769.0" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="768.8" y="195.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="771.8" y="206.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="768.8" y="179.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="771.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (5 samples, 0.17%)</title><rect x="769.2" y="195.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="772.2" y="206.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.03%)</title><rect x="770.8" y="179.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="773.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (2 samples, 0.07%)</title><rect x="771.2" y="211.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="774.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (224 samples, 7.59%)</title><rect x="772.0" y="259.0" width="89.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="775.0" y="270.0">sun/nio/ch..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.03%)</title><rect x="772.0" y="243.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="775.0" y="254.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.03%)</title><rect x="772.0" y="227.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="775.0" y="238.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.03%)</title><rect x="772.0" y="211.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="775.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.ensureOpen (1 samples, 0.03%)</title><rect x="772.4" y="243.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="775.4" y="254.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.03%)</title><rect x="772.4" y="227.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="775.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (222 samples, 7.52%)</title><rect x="772.8" y="243.0" width="88.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="775.8" y="254.0">sun/nio/ch..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.03%)</title><rect x="775.6" y="227.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (13 samples, 0.44%)</title><rect x="776.0" y="227.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="779.0" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (13 samples, 0.44%)</title><rect x="776.0" y="211.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="779.0" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="780.8" y="195.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="783.8" y="206.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="780.8" y="179.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="783.8" y="190.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="780.8" y="163.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="783.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (10 samples, 0.34%)</title><rect x="781.2" y="227.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="784.2" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (10 samples, 0.34%)</title><rect x="781.2" y="211.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.2" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (10 samples, 0.34%)</title><rect x="781.2" y="195.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="784.2" y="206.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (10 samples, 0.34%)</title><rect x="781.2" y="179.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="784.2" y="190.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (10 samples, 0.34%)</title><rect x="781.2" y="163.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="784.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (168 samples, 5.69%)</title><rect x="785.2" y="227.0" width="67.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="788.2" y="238.0">sun/nio..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="785.6" y="211.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.6" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="785.6" y="195.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (137 samples, 4.64%)</title><rect x="786.0" y="211.0" width="54.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.0" y="222.0">sun/n..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="786.0" y="195.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="789.0" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="786.0" y="179.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="789.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="786.0" y="163.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.0" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="786.0" y="147.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="789.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (136 samples, 4.61%)</title><rect x="786.4" y="195.0" width="54.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="789.4" y="206.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (136 samples, 4.61%)</title><rect x="786.4" y="179.0" width="54.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="789.4" y="190.0">sun/n..</text>
</g>
<g>
<title>__libc_pread64 (124 samples, 4.20%)</title><rect x="788.8" y="163.0" width="49.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="791.8" y="174.0">__lib..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="838.4" y="163.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="841.4" y="174.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (5 samples, 0.17%)</title><rect x="838.8" y="163.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="841.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (23 samples, 0.78%)</title><rect x="840.8" y="211.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="843.8" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.34%)</title><rect x="841.2" y="195.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="844.2" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.07%)</title><rect x="843.6" y="179.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="846.6" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="844.0" y="163.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="847.0" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="844.4" y="179.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.4" y="190.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="844.8" y="179.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="847.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (12 samples, 0.41%)</title><rect x="845.2" y="195.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="848.2" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (1 samples, 0.03%)</title><rect x="848.7" y="179.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="851.7" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.03%)</title><rect x="848.7" y="163.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="851.7" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="849.1" y="179.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.1" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="849.1" y="163.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="849.1" y="147.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="849.5" y="179.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.5" y="190.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="849.5" y="163.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="852.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (6 samples, 0.20%)</title><rect x="849.9" y="211.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="852.9" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.20%)</title><rect x="849.9" y="195.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="852.9" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.10%)</title><rect x="850.3" y="179.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="853.3" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="851.1" y="163.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="854.1" y="174.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.07%)</title><rect x="851.5" y="179.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="854.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (8 samples, 0.27%)</title><rect x="852.3" y="227.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.3" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="853.5" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="856.5" y="222.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="853.5" y="195.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="856.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (4 samples, 0.14%)</title><rect x="853.9" y="211.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="856.9" y="222.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (2 samples, 0.07%)</title><rect x="854.3" y="195.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="857.3" y="206.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="855.1" y="195.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="858.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (15 samples, 0.51%)</title><rect x="855.5" y="227.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="858.5" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="861.1" y="211.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="864.1" y="222.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="861.1" y="195.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.1" y="206.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="861.1" y="179.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="864.1" y="190.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.03%)</title><rect x="861.1" y="163.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="864.1" y="174.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (1 samples, 0.03%)</title><rect x="861.5" y="371.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="864.5" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1 samples, 0.03%)</title><rect x="861.5" y="355.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="864.5" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.10%)</title><rect x="861.9" y="371.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="864.9" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.03%)</title><rect x="862.3" y="355.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="865.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.03%)</title><rect x="862.7" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="865.7" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.10%)</title><rect x="863.1" y="371.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="866.1" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.07%)</title><rect x="863.5" y="355.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="866.5" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.03%)</title><rect x="863.9" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="866.9" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.03%)</title><rect x="863.9" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="866.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.03%)</title><rect x="864.3" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="867.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.03%)</title><rect x="864.3" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.03%)</title><rect x="864.3" y="339.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="867.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="864.3" y="323.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (61 samples, 2.07%)</title><rect x="864.7" y="371.0" width="24.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="867.7" y="382.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (61 samples, 2.07%)</title><rect x="864.7" y="355.0" width="24.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="867.7" y="366.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (59 samples, 2.00%)</title><rect x="865.5" y="339.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="868.5" y="350.0">c..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (59 samples, 2.00%)</title><rect x="865.5" y="323.0" width="23.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="868.5" y="334.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (59 samples, 2.00%)</title><rect x="865.5" y="307.0" width="23.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="868.5" y="318.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (59 samples, 2.00%)</title><rect x="865.5" y="291.0" width="23.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="868.5" y="302.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (59 samples, 2.00%)</title><rect x="865.5" y="275.0" width="23.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="868.5" y="286.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (59 samples, 2.00%)</title><rect x="865.5" y="259.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="868.5" y="270.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (59 samples, 2.00%)</title><rect x="865.5" y="243.0" width="23.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="868.5" y="254.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (59 samples, 2.00%)</title><rect x="865.5" y="227.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="868.5" y="238.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (59 samples, 2.00%)</title><rect x="865.5" y="211.0" width="23.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.5" y="222.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (59 samples, 2.00%)</title><rect x="865.5" y="195.0" width="23.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="868.5" y="206.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (59 samples, 2.00%)</title><rect x="865.5" y="179.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="868.5" y="190.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (7 samples, 0.24%)</title><rect x="865.5" y="163.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (7 samples, 0.24%)</title><rect x="865.5" y="147.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="868.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (7 samples, 0.24%)</title><rect x="865.5" y="131.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="868.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.10%)</title><rect x="865.5" y="115.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="868.5" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.07%)</title><rect x="865.9" y="99.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="868.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.14%)</title><rect x="866.7" y="115.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="869.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.14%)</title><rect x="866.7" y="99.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="869.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (4 samples, 0.14%)</title><rect x="866.7" y="83.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="869.7" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (4 samples, 0.14%)</title><rect x="866.7" y="67.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="869.7" y="78.0"></text>
</g>
<g>
<title>__libc_pread64 (3 samples, 0.10%)</title><rect x="867.1" y="51.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="870.1" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (22 samples, 0.75%)</title><rect x="868.3" y="163.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="871.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (9 samples, 0.30%)</title><rect x="868.3" y="147.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="871.3" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (9 samples, 0.30%)</title><rect x="868.3" y="131.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.3" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (9 samples, 0.30%)</title><rect x="868.3" y="115.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="871.3" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (2 samples, 0.07%)</title><rect x="868.3" y="99.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="871.3" y="110.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.07%)</title><rect x="868.3" y="83.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="871.3" y="94.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="868.7" y="67.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.7" y="78.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="868.7" y="51.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="871.7" y="62.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="868.7" y="35.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="871.7" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (7 samples, 0.24%)</title><rect x="869.1" y="99.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="872.1" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (5 samples, 0.17%)</title><rect x="869.1" y="83.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="872.1" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (5 samples, 0.17%)</title><rect x="869.1" y="67.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="872.1" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (5 samples, 0.17%)</title><rect x="869.1" y="51.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="872.1" y="62.0"></text>
</g>
<g>
<title>__libc_pread64 (4 samples, 0.14%)</title><rect x="869.5" y="35.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="872.5" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="871.1" y="83.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="874.1" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="871.1" y="67.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="874.1" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="871.5" y="83.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="874.5" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="871.5" y="67.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="874.5" y="78.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="871.5" y="51.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="874.5" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (13 samples, 0.44%)</title><rect x="871.9" y="147.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="874.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (13 samples, 0.44%)</title><rect x="871.9" y="131.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="874.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.03%)</title><rect x="871.9" y="115.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="874.9" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="871.9" y="99.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="874.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="872.3" y="115.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="875.3" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="872.3" y="99.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="875.3" y="110.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="872.3" y="83.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="875.3" y="94.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="872.3" y="67.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="875.3" y="78.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="872.3" y="51.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="875.3" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (10 samples, 0.34%)</title><rect x="872.7" y="115.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="875.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.30%)</title><rect x="872.7" y="99.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="875.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (9 samples, 0.30%)</title><rect x="872.7" y="83.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="875.7" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (9 samples, 0.30%)</title><rect x="872.7" y="67.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="875.7" y="78.0"></text>
</g>
<g>
<title>__libc_pread64 (7 samples, 0.24%)</title><rect x="873.5" y="51.0" width="2.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="876.5" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="876.3" y="99.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="879.3" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="876.3" y="83.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="879.3" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.03%)</title><rect x="876.7" y="115.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="879.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (30 samples, 1.02%)</title><rect x="877.1" y="163.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="880.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (30 samples, 1.02%)</title><rect x="877.1" y="147.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="880.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.10%)</title><rect x="877.1" y="131.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="880.1" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.10%)</title><rect x="877.1" y="115.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="880.1" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="877.9" y="99.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="880.9" y="110.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="877.9" y="83.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="880.9" y="94.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="877.9" y="67.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="880.9" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (1 samples, 0.03%)</title><rect x="878.3" y="131.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="881.3" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="878.3" y="115.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="881.3" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="878.3" y="99.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="881.3" y="110.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="878.3" y="83.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="881.3" y="94.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="878.3" y="67.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="881.3" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (23 samples, 0.78%)</title><rect x="878.7" y="131.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="881.7" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="878.7" y="115.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="881.7" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="878.7" y="99.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="881.7" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (16 samples, 0.54%)</title><rect x="879.1" y="115.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="882.1" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (15 samples, 0.51%)</title><rect x="879.5" y="99.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="882.5" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (14 samples, 0.47%)</title><rect x="879.9" y="83.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="882.9" y="94.0"></text>
</g>
<g>
<title>__libc_pread64 (12 samples, 0.41%)</title><rect x="880.3" y="67.0" width="4.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="883.3" y="78.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="885.1" y="67.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="888.1" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.20%)</title><rect x="885.5" y="115.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="888.5" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="885.5" y="99.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="888.5" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="885.5" y="83.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="888.5" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.17%)</title><rect x="885.9" y="99.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="888.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="887.5" y="83.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="890.5" y="94.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="887.5" y="67.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="890.5" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (3 samples, 0.10%)</title><rect x="887.9" y="131.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="890.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="888.7" y="115.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="891.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (14 samples, 0.47%)</title><rect x="889.1" y="371.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="892.1" y="382.0"></text>
</g>
<g>
<title>java/util/Collection.stream (13 samples, 0.44%)</title><rect x="889.1" y="355.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="892.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (11 samples, 0.37%)</title><rect x="889.5" y="339.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="892.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (11 samples, 0.37%)</title><rect x="889.5" y="323.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="892.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (10 samples, 0.34%)</title><rect x="889.9" y="307.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="892.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (9 samples, 0.30%)</title><rect x="890.3" y="291.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="893.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (9 samples, 0.30%)</title><rect x="890.3" y="275.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="893.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (9 samples, 0.30%)</title><rect x="890.3" y="259.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="893.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.10%)</title><rect x="892.7" y="243.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="895.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.10%)</title><rect x="892.7" y="227.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="895.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.07%)</title><rect x="893.1" y="211.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="896.1" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="893.5" y="195.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="896.5" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="893.5" y="179.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="896.5" y="190.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.03%)</title><rect x="893.5" y="163.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="896.5" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.03%)</title><rect x="893.9" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="896.9" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (1 samples, 0.03%)</title><rect x="894.3" y="355.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="897.3" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (1 samples, 0.03%)</title><rect x="894.3" y="339.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="897.3" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="894.3" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="897.3" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="894.3" y="307.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="897.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$96/314690043.get$Lambda (1 samples, 0.03%)</title><rect x="894.3" y="291.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="897.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (5 samples, 0.17%)</title><rect x="894.7" y="403.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="897.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.17%)</title><rect x="894.7" y="387.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="897.7" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.17%)</title><rect x="894.7" y="371.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="897.7" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.14%)</title><rect x="894.7" y="355.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="897.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.10%)</title><rect x="895.1" y="339.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="898.1" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="895.1" y="323.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="898.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="895.1" y="307.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="898.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="895.1" y="291.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="898.1" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="895.5" y="307.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="898.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (1 samples, 0.03%)</title><rect x="895.9" y="323.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="898.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.03%)</title><rect x="896.3" y="355.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="899.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiControllerImpl.proxy (209 samples, 7.08%)</title><rect x="896.7" y="451.0" width="83.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="899.7" y="462.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.17%)</title><rect x="898.3" y="435.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="901.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.14%)</title><rect x="898.3" y="419.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="901.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.03%)</title><rect x="899.1" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="902.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1 samples, 0.03%)</title><rect x="899.5" y="403.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="902.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="899.9" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="902.9" y="430.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="899.9" y="403.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="902.9" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="899.9" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="902.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (196 samples, 6.64%)</title><rect x="900.3" y="435.0" width="78.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="903.3" y="446.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (196 samples, 6.64%)</title><rect x="900.3" y="419.0" width="78.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="903.3" y="430.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (87 samples, 2.95%)</title><rect x="900.7" y="403.0" width="34.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="903.7" y="414.0">on..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="903.5" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="906.5" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="903.5" y="371.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="906.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (79 samples, 2.68%)</title><rect x="903.9" y="387.0" width="31.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="906.9" y="398.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (39 samples, 1.32%)</title><rect x="907.1" y="371.0" width="15.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="910.1" y="382.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.07%)</title><rect x="909.9" y="355.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="912.9" y="366.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (8 samples, 0.27%)</title><rect x="910.7" y="355.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.7" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.03%)</title><rect x="913.9" y="355.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.9" y="366.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.07%)</title><rect x="914.3" y="355.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="917.3" y="366.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (15 samples, 0.51%)</title><rect x="915.1" y="355.0" width="6.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="918.1" y="366.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.07%)</title><rect x="917.5" y="339.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.5" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.10%)</title><rect x="918.3" y="339.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="921.3" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.10%)</title><rect x="919.5" y="339.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="922.5" y="350.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.03%)</title><rect x="920.7" y="339.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="923.7" y="350.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.14%)</title><rect x="921.1" y="355.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="924.1" y="366.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.07%)</title><rect x="922.7" y="371.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="925.7" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.07%)</title><rect x="923.5" y="371.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="926.5" y="382.0"></text>
</g>
<g>
<title>recv (27 samples, 0.91%)</title><rect x="924.3" y="371.0" width="10.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="927.3" y="382.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.03%)</title><rect x="935.1" y="371.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="938.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (43 samples, 1.46%)</title><rect x="935.5" y="403.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="938.5" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (32 samples, 1.08%)</title><rect x="935.9" y="387.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="938.9" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="939.1" y="371.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="942.1" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.75%)</title><rect x="939.9" y="371.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="942.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="941.5" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="944.5" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.58%)</title><rect x="941.9" y="355.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="944.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (9 samples, 0.30%)</title><rect x="948.6" y="387.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="951.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.14%)</title><rect x="950.6" y="371.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="953.6" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.14%)</title><rect x="950.6" y="355.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="953.6" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="951.8" y="339.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="954.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="952.2" y="387.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="955.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (13 samples, 0.44%)</title><rect x="952.6" y="403.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="955.6" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.27%)</title><rect x="953.8" y="387.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="956.8" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.03%)</title><rect x="954.6" y="371.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="957.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.03%)</title><rect x="954.6" y="355.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="957.6" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.17%)</title><rect x="955.0" y="371.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="958.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.17%)</title><rect x="955.0" y="355.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="958.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="955.0" y="339.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="958.0" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.14%)</title><rect x="955.4" y="339.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="958.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="956.2" y="323.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="959.2" y="334.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (1 samples, 0.03%)</title><rect x="956.6" y="323.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="959.6" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.07%)</title><rect x="957.0" y="387.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="960.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.14%)</title><rect x="957.8" y="403.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="960.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="959.0" y="387.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="962.0" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="959.0" y="371.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="962.0" y="382.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (19 samples, 0.64%)</title><rect x="959.4" y="403.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="962.4" y="414.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (2 samples, 0.07%)</title><rect x="960.2" y="387.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="963.2" y="398.0"></text>
</g>
<g>
<title>setsockopt (15 samples, 0.51%)</title><rect x="961.0" y="387.0" width="6.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="964.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (21 samples, 0.71%)</title><rect x="967.0" y="403.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="970.0" y="414.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (12 samples, 0.41%)</title><rect x="967.4" y="387.0" width="4.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="970.4" y="398.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.07%)</title><rect x="967.8" y="371.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="970.8" y="382.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="968.6" y="371.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="971.6" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.17%)</title><rect x="969.0" y="371.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="972.0" y="382.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="970.2" y="355.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="973.2" y="366.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.03%)</title><rect x="970.6" y="355.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="973.6" y="366.0"></text>
</g>
<g>
<title>memmove@plt (2 samples, 0.07%)</title><rect x="971.0" y="371.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="974.0" y="382.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="971.8" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.8" y="382.0"></text>
</g>
<g>
<title>__send (8 samples, 0.27%)</title><rect x="972.2" y="387.0" width="3.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="975.2" y="398.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (3 samples, 0.10%)</title><rect x="975.4" y="403.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="978.4" y="414.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.03%)</title><rect x="975.8" y="387.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="978.8" y="398.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.03%)</title><rect x="975.8" y="371.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="978.8" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.03%)</title><rect x="975.8" y="355.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="978.8" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.03%)</title><rect x="975.8" y="339.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="978.8" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::ReenterI(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="975.8" y="323.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.8" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.03%)</title><rect x="975.8" y="307.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="978.8" y="318.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (1 samples, 0.03%)</title><rect x="976.2" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="979.2" y="398.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (5 samples, 0.17%)</title><rect x="976.6" y="403.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="979.6" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (1 samples, 0.03%)</title><rect x="978.2" y="387.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="981.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (2 samples, 0.07%)</title><rect x="978.6" y="435.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="981.6" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.07%)</title><rect x="979.4" y="435.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="982.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (25 samples, 0.85%)</title><rect x="980.2" y="467.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="983.2" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (25 samples, 0.85%)</title><rect x="980.2" y="451.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="983.2" y="462.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="981.4" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="984.4" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="981.4" y="419.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="984.4" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="981.4" y="403.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="984.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (20 samples, 0.68%)</title><rect x="981.8" y="435.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="984.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.10%)</title><rect x="981.8" y="419.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="984.8" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.07%)</title><rect x="982.2" y="403.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="985.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.07%)</title><rect x="982.2" y="387.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="985.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.07%)</title><rect x="982.2" y="371.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="985.2" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="982.6" y="355.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="985.6" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (17 samples, 0.58%)</title><rect x="983.0" y="419.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="986.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 0.54%)</title><rect x="983.4" y="403.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="986.4" y="414.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.07%)</title><rect x="983.4" y="387.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="986.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (11 samples, 0.37%)</title><rect x="984.2" y="387.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="987.2" y="398.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (9 samples, 0.30%)</title><rect x="985.0" y="371.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="988.0" y="382.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.03%)</title><rect x="985.8" y="355.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="988.8" y="366.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="986.2" y="355.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="989.2" y="366.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="986.6" y="355.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="989.6" y="366.0"></text>
</g>
<g>
<title>__send (3 samples, 0.10%)</title><rect x="987.0" y="355.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="990.0" y="366.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.03%)</title><rect x="988.2" y="355.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="991.2" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.10%)</title><rect x="988.6" y="387.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="991.6" y="398.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.10%)</title><rect x="988.6" y="371.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="991.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.03%)</title><rect x="989.8" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="992.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.mergeGetResponses (21 samples, 0.71%)</title><rect x="990.2" y="467.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="993.2" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.07%)</title><rect x="991.0" y="451.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="994.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (12 samples, 0.41%)</title><rect x="991.8" y="451.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="994.8" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.27%)</title><rect x="993.4" y="435.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="996.4" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.27%)</title><rect x="993.4" y="419.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="996.4" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="996.2" y="403.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="999.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (4 samples, 0.14%)</title><rect x="996.6" y="451.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="999.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.07%)</title><rect x="997.4" y="435.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1000.4" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.03%)</title><rect x="997.8" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1000.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.getResponseFromValues (1 samples, 0.03%)</title><rect x="998.2" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1001.2" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (1 samples, 0.03%)</title><rect x="998.2" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1001.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="998.2" y="419.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1001.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (3 samples, 0.10%)</title><rect x="998.6" y="483.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1001.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.10%)</title><rect x="998.6" y="467.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1001.6" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.10%)</title><rect x="998.6" y="451.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1001.6" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.10%)</title><rect x="998.6" y="435.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1001.6" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.10%)</title><rect x="998.6" y="419.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1001.6" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.10%)</title><rect x="998.6" y="403.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.10%)</title><rect x="998.6" y="387.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1001.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.07%)</title><rect x="999.0" y="371.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1002.0" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="999.4" y="355.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1002.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="999.8" y="595.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1002.8" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="999.8" y="579.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1002.8" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="999.8" y="563.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1002.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="999.8" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1002.8" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="999.8" y="531.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1002.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.03%)</title><rect x="999.8" y="515.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1002.8" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (310 samples, 10.50%)</title><rect x="1000.2" y="595.0" width="123.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1003.2" y="606.0">one/nio/server/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.03%)</title><rect x="1000.6" y="579.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1003.6" y="590.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.27%)</title><rect x="1001.0" y="579.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1004.0" y="590.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.27%)</title><rect x="1001.0" y="563.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1004.0" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (5 samples, 0.17%)</title><rect x="1002.2" y="547.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1005.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.03%)</title><rect x="1003.8" y="531.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1006.8" y="542.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (86 samples, 2.91%)</title><rect x="1004.2" y="579.0" width="34.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1007.2" y="590.0">on..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1004.2" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.2" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1004.2" y="547.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1007.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1004.2" y="531.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.2" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1004.2" y="515.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1007.2" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1004.2" y="499.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1007.2" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="1004.2" y="483.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.2" y="494.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (6 samples, 0.20%)</title><rect x="1004.6" y="563.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1007.6" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (5 samples, 0.17%)</title><rect x="1004.6" y="547.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1007.6" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (1 samples, 0.03%)</title><rect x="1006.6" y="547.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1009.6" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (79 samples, 2.68%)</title><rect x="1007.0" y="563.0" width="31.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1010.0" y="574.0">on..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.14%)</title><rect x="1011.0" y="547.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1014.0" y="558.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.03%)</title><rect x="1012.6" y="547.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1015.6" y="558.0"></text>
</g>
<g>
<title>clock_gettime (28 samples, 0.95%)</title><rect x="1013.0" y="547.0" width="11.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1016.0" y="558.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.10%)</title><rect x="1021.0" y="531.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1024.0" y="542.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.17%)</title><rect x="1022.2" y="531.0" width="2.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1025.2" y="542.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.17%)</title><rect x="1022.2" y="515.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1025.2" y="526.0"></text>
</g>
<g>
<title>epoll_wait (35 samples, 1.19%)</title><rect x="1024.2" y="547.0" width="14.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1027.2" y="558.0"></text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.03%)</title><rect x="1038.2" y="547.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1041.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (214 samples, 7.25%)</title><rect x="1038.6" y="579.0" width="85.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1041.6" y="590.0">one/nio/ne..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1041.0" y="563.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1044.0" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1041.0" y="547.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1044.0" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="1041.0" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1044.0" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (206 samples, 6.98%)</title><rect x="1041.4" y="563.0" width="82.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1044.4" y="574.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (132 samples, 4.47%)</title><rect x="1041.8" y="547.0" width="52.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1044.8" y="558.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (86 samples, 2.91%)</title><rect x="1046.5" y="531.0" width="34.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1049.5" y="542.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (85 samples, 2.88%)</title><rect x="1046.9" y="515.0" width="34.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1049.9" y="526.0">on..</text>
</g>
<g>
<title>RequestHandler2_handleRequest.handleRequest (69 samples, 2.34%)</title><rect x="1047.3" y="499.0" width="27.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1050.3" y="510.0">R..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.14%)</title><rect x="1047.7" y="483.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1050.7" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.07%)</title><rect x="1048.5" y="467.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1051.5" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.07%)</title><rect x="1048.5" y="451.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1051.5" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (7 samples, 0.24%)</title><rect x="1049.3" y="483.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1052.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.24%)</title><rect x="1049.3" y="467.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1052.3" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.10%)</title><rect x="1050.5" y="451.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1053.5" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.10%)</title><rect x="1050.5" y="435.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1053.5" y="446.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1050.9" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1053.9" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1050.9" y="403.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.9" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1050.9" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.9" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1050.9" y="371.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1053.9" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1050.9" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.9" y="366.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="1050.9" y="339.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.9" y="350.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="1051.3" y="419.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1054.3" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1051.7" y="451.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1054.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.handleRequest (57 samples, 1.93%)</title><rect x="1052.1" y="483.0" width="22.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1055.1" y="494.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.handleRequest (57 samples, 1.93%)</title><rect x="1052.1" y="467.0" width="22.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1055.1" y="478.0">r..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/720764787.linkToTargetMethod (3 samples, 0.10%)</title><rect x="1052.1" y="451.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1055.1" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.10%)</title><rect x="1052.1" y="435.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1055.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$68/785022578.get$Lambda (3 samples, 0.10%)</title><rect x="1052.1" y="419.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1055.1" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1052.5" y="403.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1055.5" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1052.5" y="387.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.5" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1052.5" y="371.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.5" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1052.5" y="355.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.5" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1052.5" y="339.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.5" y="350.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="1052.5" y="323.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.5" y="334.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="1052.5" y="307.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="1052.9" y="403.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1055.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.executeTask (54 samples, 1.83%)</title><rect x="1053.3" y="451.0" width="21.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1056.3" y="462.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (52 samples, 1.76%)</title><rect x="1053.7" y="435.0" width="20.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1056.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (51 samples, 1.73%)</title><rect x="1054.1" y="419.0" width="20.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1057.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (7 samples, 0.24%)</title><rect x="1054.1" y="403.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1057.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.07%)</title><rect x="1056.1" y="387.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1059.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.07%)</title><rect x="1056.1" y="371.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1059.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.07%)</title><rect x="1056.1" y="355.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1059.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.07%)</title><rect x="1056.9" y="403.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1059.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="1057.3" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1060.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="1057.3" y="371.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1060.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="1057.3" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1060.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="1057.3" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1060.3" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="1057.3" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1060.3" y="334.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1057.3" y="307.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1060.3" y="318.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.03%)</title><rect x="1057.3" y="291.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1060.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (41 samples, 1.39%)</title><rect x="1057.7" y="403.0" width="16.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1060.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (41 samples, 1.39%)</title><rect x="1057.7" y="387.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1060.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (40 samples, 1.35%)</title><rect x="1058.1" y="371.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1061.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (40 samples, 1.35%)</title><rect x="1058.1" y="355.0" width="16.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1061.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (40 samples, 1.35%)</title><rect x="1058.1" y="339.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1061.1" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.07%)</title><rect x="1058.9" y="323.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1061.9" y="334.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="1059.7" y="323.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.7" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark (22 samples, 0.75%)</title><rect x="1060.1" y="323.0" width="8.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1063.1" y="334.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="1061.3" y="307.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1064.3" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.03%)</title><rect x="1061.7" y="307.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.7" y="318.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (6 samples, 0.20%)</title><rect x="1062.1" y="307.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1065.1" y="318.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="1064.5" y="307.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.5" y="318.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="1064.9" y="307.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1067.9" y="318.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (6 samples, 0.20%)</title><rect x="1065.3" y="307.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.3" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.07%)</title><rect x="1067.7" y="307.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1070.7" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.03%)</title><rect x="1068.5" y="307.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1071.5" y="318.0"></text>
</g>
<g>
<title>__pthread_cond_signal (11 samples, 0.37%)</title><rect x="1068.9" y="323.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1071.9" y="334.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1073.3" y="323.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1076.3" y="334.0"></text>
</g>
<g>
<title>pthread_cond_signal@plt (1 samples, 0.03%)</title><rect x="1073.7" y="323.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1076.7" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="1074.1" y="403.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1077.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="1074.5" y="435.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1077.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.24%)</title><rect x="1074.9" y="499.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1077.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.24%)</title><rect x="1074.9" y="483.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1077.9" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.17%)</title><rect x="1074.9" y="467.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1077.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.07%)</title><rect x="1076.9" y="467.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1079.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.07%)</title><rect x="1076.9" y="451.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1079.9" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.07%)</title><rect x="1076.9" y="435.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1079.9" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1077.3" y="419.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1080.3" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (8 samples, 0.27%)</title><rect x="1077.7" y="499.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1080.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.27%)</title><rect x="1077.7" y="483.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1080.7" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.27%)</title><rect x="1077.7" y="467.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1080.7" y="478.0"></text>
</g>
<g>
<title>RequestHandler2_handleRequest.handleRequest (5 samples, 0.17%)</title><rect x="1078.1" y="451.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1081.1" y="462.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.07%)</title><rect x="1080.1" y="451.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1083.1" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16 samples, 0.54%)</title><rect x="1080.9" y="531.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1083.9" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1082.5" y="515.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.5" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1082.5" y="499.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.5" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1082.5" y="483.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.5" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1082.5" y="467.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.5" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1082.5" y="451.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.5" y="462.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="1082.5" y="435.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.20%)</title><rect x="1082.9" y="515.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1085.9" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.10%)</title><rect x="1083.3" y="499.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.3" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (3 samples, 0.10%)</title><rect x="1083.3" y="483.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.3" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.07%)</title><rect x="1083.7" y="467.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1086.7" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="1083.7" y="451.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.7" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1084.1" y="435.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.1" y="446.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="1084.1" y="419.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1087.1" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.07%)</title><rect x="1084.5" y="499.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1087.5" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.07%)</title><rect x="1084.5" y="483.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1087.5" y="494.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="1084.5" y="467.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1087.5" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="1084.9" y="467.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1087.9" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.14%)</title><rect x="1085.3" y="515.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1088.3" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.14%)</title><rect x="1085.3" y="499.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1088.3" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1086.5" y="483.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.5" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1086.5" y="467.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1089.5" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1086.5" y="451.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.5" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1086.5" y="435.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.5" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1086.5" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1089.5" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="1086.5" y="403.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.5" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="1086.5" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.5" y="398.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.03%)</title><rect x="1086.5" y="371.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.5" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="1086.5" y="355.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1089.5" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="1086.9" y="515.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1089.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.27%)</title><rect x="1087.3" y="531.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1090.3" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.07%)</title><rect x="1089.7" y="515.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1092.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.07%)</title><rect x="1089.7" y="499.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1092.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (2 samples, 0.07%)</title><rect x="1090.5" y="531.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1093.5" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.27%)</title><rect x="1091.3" y="531.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1094.3" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.27%)</title><rect x="1091.3" y="515.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1094.3" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1093.3" y="499.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.3" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1093.3" y="483.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.3" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1093.3" y="467.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.3" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1093.7" y="499.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.7" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1093.7" y="483.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.7" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1093.7" y="467.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.7" y="478.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1093.7" y="451.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1096.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1094.1" y="499.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1097.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1094.1" y="483.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1097.1" y="494.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.03%)</title><rect x="1094.1" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1097.1" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1094.1" y="451.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.1" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1094.1" y="435.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1094.1" y="419.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.1" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1094.1" y="403.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.1" y="414.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.03%)</title><rect x="1094.1" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (73 samples, 2.47%)</title><rect x="1094.5" y="547.0" width="29.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1097.5" y="558.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (73 samples, 2.47%)</title><rect x="1094.5" y="531.0" width="29.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1097.5" y="542.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (24 samples, 0.81%)</title><rect x="1101.3" y="515.0" width="9.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1104.3" y="526.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 0.24%)</title><rect x="1101.7" y="499.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1104.7" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.07%)</title><rect x="1104.5" y="499.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.5" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.03%)</title><rect x="1105.3" y="499.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.3" y="510.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.07%)</title><rect x="1105.7" y="499.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1108.7" y="510.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 0.34%)</title><rect x="1106.5" y="499.0" width="4.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1109.5" y="510.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="1107.3" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.3" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1107.7" y="483.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.7" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.07%)</title><rect x="1108.1" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.1" y="494.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.14%)</title><rect x="1108.9" y="483.0" width="1.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1111.9" y="494.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.10%)</title><rect x="1109.3" y="467.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.3" y="478.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="1110.5" y="499.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.5" y="510.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.07%)</title><rect x="1110.9" y="515.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1113.9" y="526.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.10%)</title><rect x="1111.7" y="515.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1114.7" y="526.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="1112.9" y="515.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1115.9" y="526.0"></text>
</g>
<g>
<title>recv (26 samples, 0.88%)</title><rect x="1113.3" y="515.0" width="10.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1116.3" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="1123.7" y="563.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.7" y="574.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1123.7" y="547.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1126.7" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="1123.7" y="531.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1126.7" y="542.0"></text>
</g>
<g>
<title>start_thread (165 samples, 5.59%)</title><rect x="1124.1" y="595.0" width="65.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1127.1" y="606.0">start_t..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (165 samples, 5.59%)</title><rect x="1124.1" y="579.0" width="65.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1127.1" y="590.0">thread_..</text>
</g>
<g>
<title>Thread::call_run() (165 samples, 5.59%)</title><rect x="1124.1" y="563.0" width="65.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.1" y="574.0">Thread:..</text>
</g>
<g>
<title>GangWorker::loop() (165 samples, 5.59%)</title><rect x="1124.1" y="547.0" width="65.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.1" y="558.0">GangWor..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (117 samples, 3.96%)</title><rect x="1124.1" y="531.0" width="46.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.1" y="542.0">G1CM..</text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (117 samples, 3.96%)</title><rect x="1124.1" y="515.0" width="46.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.1" y="526.0">G1CM..</text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (15 samples, 0.51%)</title><rect x="1124.5" y="499.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.5" y="510.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (11 samples, 0.37%)</title><rect x="1124.9" y="483.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.9" y="494.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (7 samples, 0.24%)</title><rect x="1126.5" y="467.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.5" y="478.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (4 samples, 0.14%)</title><rect x="1127.3" y="451.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.3" y="462.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (4 samples, 0.14%)</title><rect x="1127.3" y="435.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.3" y="446.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.03%)</title><rect x="1128.5" y="419.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.5" y="430.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1128.9" y="451.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.9" y="462.0"></text>
</g>
<g>
<title>G1CMIsAliveClosure::do_object_b(oopDesc*) (1 samples, 0.03%)</title><rect x="1128.9" y="435.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.9" y="446.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (1 samples, 0.03%)</title><rect x="1129.3" y="483.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.3" y="494.0"></text>
</g>
<g>
<title>getrusage (1 samples, 0.03%)</title><rect x="1129.3" y="467.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1132.3" y="478.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (2 samples, 0.07%)</title><rect x="1129.7" y="483.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.7" y="494.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.07%)</title><rect x="1129.7" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.7" y="478.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.03%)</title><rect x="1129.7" y="451.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.7" y="462.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.03%)</title><rect x="1130.1" y="451.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.1" y="462.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (101 samples, 3.42%)</title><rect x="1130.5" y="499.0" width="40.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.5" y="510.0">G1C..</text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (1 samples, 0.03%)</title><rect x="1138.1" y="483.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.1" y="494.0"></text>
</g>
<g>
<title>getrusage (1 samples, 0.03%)</title><rect x="1138.1" y="467.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1141.1" y="478.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.03%)</title><rect x="1138.5" y="483.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.5" y="494.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (79 samples, 2.68%)</title><rect x="1138.9" y="483.0" width="31.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.9" y="494.0">vo..</text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (2 samples, 0.07%)</title><rect x="1140.8" y="467.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.8" y="478.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (3 samples, 0.10%)</title><rect x="1141.6" y="467.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.6" y="478.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (69 samples, 2.34%)</title><rect x="1142.8" y="467.0" width="27.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.8" y="478.0">v..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (52 samples, 1.76%)</title><rect x="1147.2" y="451.0" width="20.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.2" y="462.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.14%)</title><rect x="1166.0" y="435.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.0" y="446.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.03%)</title><rect x="1167.6" y="435.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.6" y="446.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.03%)</title><rect x="1168.0" y="451.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="462.0"></text>
</g>
<g>
<title>oopDesc::size() (2 samples, 0.07%)</title><rect x="1168.4" y="451.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.4" y="462.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (3 samples, 0.10%)</title><rect x="1169.2" y="451.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.2" y="462.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1170.4" y="483.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.4" y="494.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 0.20%)</title><rect x="1170.8" y="531.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.8" y="542.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.10%)</title><rect x="1170.8" y="515.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.8" y="526.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.10%)</title><rect x="1170.8" y="499.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1173.8" y="510.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.10%)</title><rect x="1172.0" y="515.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.0" y="526.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker() (1 samples, 0.03%)</title><rect x="1172.0" y="499.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.0" y="510.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1172.4" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.4" y="510.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1172.4" y="483.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.4" y="494.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1172.4" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="478.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.03%)</title><rect x="1172.4" y="451.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.4" y="462.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1172.8" y="499.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.8" y="510.0"></text>
</g>
<g>
<title>JNIHandles::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="1172.8" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.8" y="494.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (2 samples, 0.07%)</title><rect x="1173.2" y="531.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.2" y="542.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (2 samples, 0.07%)</title><rect x="1173.2" y="515.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="526.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (39 samples, 1.32%)</title><rect x="1174.0" y="531.0" width="15.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.0" y="542.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (39 samples, 1.32%)</title><rect x="1174.0" y="515.0" width="15.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.0" y="526.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (36 samples, 1.22%)</title><rect x="1174.0" y="499.0" width="14.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.0" y="510.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (2 samples, 0.07%)</title><rect x="1181.6" y="483.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.6" y="494.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (14 samples, 0.47%)</title><rect x="1182.4" y="483.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.4" y="494.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.03%)</title><rect x="1186.4" y="467.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.4" y="478.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.234] (3 samples, 0.10%)</title><rect x="1186.8" y="467.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.8" y="478.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1188.0" y="483.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.0" y="494.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.03%)</title><rect x="1188.0" y="467.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="478.0"></text>
</g>
<g>
<title>BitMap::par_at_put(unsigned long, bool) (1 samples, 0.03%)</title><rect x="1188.0" y="451.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.0" y="462.0"></text>
</g>
<g>
<title>java_lang_Class::oop_size(oopDesc*) (1 samples, 0.03%)</title><rect x="1188.4" y="499.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.4" y="510.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1188.8" y="499.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="510.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1189.2" y="499.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.2" y="510.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1189.6" y="531.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.6" y="542.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.03%)</title><rect x="1189.6" y="515.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.6" y="526.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.66] (1 samples, 0.03%)</title><rect x="1189.6" y="499.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.6" y="510.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1189.6" y="483.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.6" y="494.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="1189.6" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.6" y="478.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1189.6" y="451.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.6" y="462.0"></text>
</g>
</g>
</svg>
