<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="373"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="373"> </text>
<g id="frames">
<g>
<title>all (375 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="350.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (234 samples, 62.40%)</title><rect x="10.0" y="323.0" width="736.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (234 samples, 62.40%)</title><rect x="10.0" y="307.0" width="736.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (234 samples, 62.40%)</title><rect x="10.0" y="291.0" width="736.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (103 samples, 27.47%)</title><rect x="10.0" y="275.0" width="324.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.getT..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (98 samples, 26.13%)</title><rect x="25.7" y="259.0" width="308.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.7" y="270.0">java/util/concurrent/ArrayBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (1 samples, 0.27%)</title><rect x="25.7" y="243.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.27%)</title><rect x="25.7" y="227.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.27%)</title><rect x="25.7" y="211.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (79 samples, 21.07%)</title><rect x="28.9" y="243.0" width="248.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.9" y="254.0">java/util/concurrent/locks/Abstra..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.27%)</title><rect x="28.9" y="227.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.27%)</title><rect x="32.0" y="227.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 1.60%)</title><rect x="35.2" y="227.0" width="18.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.27%)</title><rect x="50.9" y="211.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.27%)</title><rect x="50.9" y="195.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.9" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.27%)</title><rect x="50.9" y="179.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="53.9" y="190.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.27%)</title><rect x="50.9" y="163.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="53.9" y="174.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.27%)</title><rect x="50.9" y="147.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="53.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.07%)</title><rect x="54.1" y="227.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.07%)</title><rect x="54.1" y="211.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.53%)</title><rect x="57.2" y="195.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.27%)</title><rect x="60.3" y="179.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="63.3" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.27%)</title><rect x="60.3" y="163.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.3" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.27%)</title><rect x="60.3" y="147.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="63.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.27%)</title><rect x="63.5" y="195.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="66.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (67 samples, 17.87%)</title><rect x="66.6" y="227.0" width="210.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.6" y="238.0">java/util/concurrent/locks/L..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (67 samples, 17.87%)</title><rect x="66.6" y="211.0" width="210.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.6" y="222.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (47 samples, 12.53%)</title><rect x="72.9" y="195.0" width="147.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="75.9" y="206.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.27%)</title><rect x="85.5" y="179.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="88.5" y="190.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 2.67%)</title><rect x="88.7" y="179.0" width="31.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="91.7" y="190.0">Pa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.07%)</title><rect x="98.1" y="163.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="101.1" y="174.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (3 samples, 0.80%)</title><rect x="101.3" y="147.0" width="9.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="104.3" y="158.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.80%)</title><rect x="110.7" y="163.0" width="9.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="113.7" y="174.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.27%)</title><rect x="120.1" y="179.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="123.1" y="190.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.27%)</title><rect x="123.3" y="179.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="126.3" y="190.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (26 samples, 6.93%)</title><rect x="126.4" y="179.0" width="81.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="129.4" y="190.0">__pthread..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.53%)</title><rect x="208.2" y="179.0" width="6.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="211.2" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.27%)</title><rect x="214.5" y="179.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="217.5" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.27%)</title><rect x="217.7" y="179.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="220.7" y="190.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 4.53%)</title><rect x="220.8" y="195.0" width="53.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="223.8" y="206.0">[unkn..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.27%)</title><rect x="220.8" y="179.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="223.8" y="190.0"></text>
</g>
<g>
<title>__pthread_cond_wait (15 samples, 4.00%)</title><rect x="224.0" y="179.0" width="47.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="227.0" y="190.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.27%)</title><rect x="271.2" y="179.0" width="3.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="274.2" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.27%)</title><rect x="274.3" y="195.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="277.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 1.33%)</title><rect x="277.5" y="243.0" width="15.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 1.33%)</title><rect x="277.5" y="227.0" width="15.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (4 samples, 1.07%)</title><rect x="277.5" y="211.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.53%)</title><rect x="283.8" y="195.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.53%)</title><rect x="283.8" y="179.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.8" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.53%)</title><rect x="283.8" y="163.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.8" y="174.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.53%)</title><rect x="283.8" y="147.0" width="6.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="286.8" y="158.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.27%)</title><rect x="286.9" y="131.0" width="3.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="289.9" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.27%)</title><rect x="290.1" y="211.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="293.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.27%)</title><rect x="290.1" y="195.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.27%)</title><rect x="290.1" y="179.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 3.47%)</title><rect x="293.2" y="243.0" width="40.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.2" y="254.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 3.47%)</title><rect x="293.2" y="227.0" width="40.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.2" y="238.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 3.47%)</title><rect x="293.2" y="211.0" width="40.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.2" y="222.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 3.47%)</title><rect x="293.2" y="195.0" width="40.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.2" y="206.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 3.47%)</title><rect x="293.2" y="179.0" width="40.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.2" y="190.0">jdk..</text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.27%)</title><rect x="293.2" y="163.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="296.2" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.27%)</title><rect x="296.3" y="163.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="299.3" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 1.60%)</title><rect x="299.5" y="163.0" width="18.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="302.5" y="174.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.53%)</title><rect x="302.6" y="147.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="305.6" y="158.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.53%)</title><rect x="308.9" y="147.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="311.9" y="158.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.27%)</title><rect x="315.2" y="147.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="318.2" y="158.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 1.33%)</title><rect x="318.4" y="163.0" width="15.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="321.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$66/300021782.run (131 samples, 34.93%)</title><rect x="334.1" y="275.0" width="412.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.1" y="286.0">ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambd..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$put$2 (131 samples, 34.93%)</title><rect x="334.1" y="259.0" width="412.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="337.1" y="270.0">ru/mail/polis/service/re1nex/AsyncTopologyService.lambda..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.80%)</title><rect x="343.5" y="243.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="346.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.80%)</title><rect x="343.5" y="227.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="346.5" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.80%)</title><rect x="343.5" y="211.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.80%)</title><rect x="343.5" y="195.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="346.5" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.80%)</title><rect x="343.5" y="179.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="346.5" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.80%)</title><rect x="343.5" y="163.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="346.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.80%)</title><rect x="343.5" y="147.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="346.5" y="158.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.27%)</title><rect x="349.8" y="131.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.isLocal (1 samples, 0.27%)</title><rect x="353.0" y="243.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.isLocal (1 samples, 0.27%)</title><rect x="353.0" y="227.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="356.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.27%)</title><rect x="353.0" y="211.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (1 samples, 0.27%)</title><rect x="353.0" y="195.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="356.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (9 samples, 2.40%)</title><rect x="356.1" y="243.0" width="28.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="359.1" y="254.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (9 samples, 2.40%)</title><rect x="356.1" y="227.0" width="28.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.1" y="238.0">ru..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.27%)</title><rect x="356.1" y="211.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="359.1" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="356.1" y="195.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.1" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="356.1" y="179.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="359.1" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.27%)</title><rect x="356.1" y="163.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="359.1" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.27%)</title><rect x="356.1" y="147.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="359.1" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.27%)</title><rect x="356.1" y="131.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="359.1" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.27%)</title><rect x="356.1" y="115.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="359.1" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.27%)</title><rect x="356.1" y="99.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="359.1" y="110.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.27%)</title><rect x="356.1" y="83.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="359.1" y="94.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.27%)</title><rect x="356.1" y="67.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="359.1" y="78.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.27%)</title><rect x="356.1" y="51.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="359.1" y="62.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.firstKey (1 samples, 0.27%)</title><rect x="359.3" y="211.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.3" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.subLowest (1 samples, 0.27%)</title><rect x="359.3" y="195.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="362.3" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (1 samples, 0.27%)</title><rect x="359.3" y="179.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.3" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (1 samples, 0.27%)</title><rect x="359.3" y="163.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="362.3" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.isEmpty (3 samples, 0.80%)</title><rect x="362.4" y="211.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.4" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.isEmpty (3 samples, 0.80%)</title><rect x="362.4" y="195.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.4" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (3 samples, 0.80%)</title><rect x="362.4" y="179.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="365.4" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (2 samples, 0.53%)</title><rect x="365.6" y="163.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="368.6" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.53%)</title><rect x="365.6" y="147.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.6" y="158.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.27%)</title><rect x="368.7" y="131.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="371.7" y="142.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.27%)</title><rect x="368.7" y="115.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="371.7" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.27%)</title><rect x="368.7" y="99.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="371.7" y="110.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (3 samples, 0.80%)</title><rect x="371.9" y="211.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="374.9" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (3 samples, 0.80%)</title><rect x="371.9" y="195.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.9" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.53%)</title><rect x="375.0" y="179.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.0" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.27%)</title><rect x="381.3" y="211.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="384.3" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.27%)</title><rect x="381.3" y="195.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.3" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (1 samples, 0.27%)</title><rect x="381.3" y="179.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="384.3" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (1 samples, 0.27%)</title><rect x="381.3" y="163.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.3" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.27%)</title><rect x="381.3" y="147.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="384.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (28 samples, 7.47%)</title><rect x="384.5" y="243.0" width="88.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.5" y="254.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (3 samples, 0.80%)</title><rect x="384.5" y="227.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (3 samples, 0.80%)</title><rect x="384.5" y="211.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="387.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (3 samples, 0.80%)</title><rect x="384.5" y="195.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.5" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.53%)</title><rect x="384.5" y="179.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="387.5" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.27%)</title><rect x="387.6" y="163.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.27%)</title><rect x="390.7" y="179.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (1 samples, 0.27%)</title><rect x="390.7" y="163.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="393.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.sizeInBytes (1 samples, 0.27%)</title><rect x="393.9" y="227.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.get (1 samples, 0.27%)</title><rect x="393.9" y="211.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="396.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (24 samples, 6.40%)</title><rect x="397.0" y="227.0" width="75.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="400.0" y="238.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (15 samples, 4.00%)</title><rect x="397.0" y="211.0" width="47.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="400.0" y="222.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (15 samples, 4.00%)</title><rect x="397.0" y="195.0" width="47.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="400.0" y="206.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (10 samples, 2.67%)</title><rect x="412.8" y="179.0" width="31.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.8" y="190.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 2.67%)</title><rect x="412.8" y="163.0" width="31.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="415.8" y="174.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 2.67%)</title><rect x="412.8" y="147.0" width="31.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="415.8" y="158.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (10 samples, 2.67%)</title><rect x="412.8" y="131.0" width="31.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.8" y="142.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.53%)</title><rect x="437.9" y="115.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.9" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.53%)</title><rect x="437.9" y="99.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.9" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (9 samples, 2.40%)</title><rect x="444.2" y="211.0" width="28.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="447.2" y="222.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (9 samples, 2.40%)</title><rect x="444.2" y="195.0" width="28.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="447.2" y="206.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (1 samples, 0.27%)</title><rect x="447.4" y="179.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.27%)</title><rect x="450.5" y="179.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="453.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6 samples, 1.60%)</title><rect x="453.7" y="179.0" width="18.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 1.60%)</title><rect x="453.7" y="163.0" width="18.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="456.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 1.60%)</title><rect x="453.7" y="147.0" width="18.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.7" y="158.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 1.60%)</title><rect x="453.7" y="131.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.7" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.53%)</title><rect x="463.1" y="115.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.1" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.53%)</title><rect x="463.1" y="99.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="466.1" y="110.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.27%)</title><rect x="469.4" y="115.0" width="3.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="472.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.getByteBufferKey (3 samples, 0.80%)</title><rect x="472.6" y="243.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="475.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.80%)</title><rect x="472.6" y="227.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="475.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.80%)</title><rect x="472.6" y="211.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="475.6" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.80%)</title><rect x="472.6" y="195.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.80%)</title><rect x="472.6" y="179.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="475.6" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.53%)</title><rect x="475.7" y="163.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.7" y="174.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.27%)</title><rect x="478.9" y="147.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.proxy (76 samples, 20.27%)</title><rect x="482.0" y="243.0" width="239.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.0" y="254.0">ru/mail/polis/service/re1nex/Asy..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 1.07%)</title><rect x="482.0" y="227.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.0" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1024597427.invoke (4 samples, 1.07%)</title><rect x="482.0" y="211.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="485.0" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.80%)</title><rect x="485.1" y="195.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.1" y="206.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixCoder (3 samples, 0.80%)</title><rect x="485.1" y="179.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.1" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.27%)</title><rect x="491.4" y="163.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="494.4" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 1.60%)</title><rect x="494.6" y="227.0" width="18.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="497.6" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 1.60%)</title><rect x="494.6" y="211.0" width="18.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="497.6" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (45 samples, 12.00%)</title><rect x="513.5" y="227.0" width="141.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="516.5" y="238.0">one/nio/http/HttpC..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (45 samples, 12.00%)</title><rect x="513.5" y="211.0" width="141.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="516.5" y="222.0">one/nio/http/HttpC..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (20 samples, 5.33%)</title><rect x="519.8" y="195.0" width="62.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="522.8" y="206.0">one/ni..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 1.07%)</title><rect x="519.8" y="179.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="522.8" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.27%)</title><rect x="526.1" y="163.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="529.1" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="529.2" y="163.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="532.2" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.27%)</title><rect x="529.2" y="147.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="532.2" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.27%)</title><rect x="529.2" y="131.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="532.2" y="142.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="529.2" y="115.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="532.2" y="126.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (16 samples, 4.27%)</title><rect x="532.3" y="179.0" width="50.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="535.3" y="190.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (3 samples, 0.80%)</title><rect x="535.5" y="163.0" width="9.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="538.5" y="174.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.27%)</title><rect x="535.5" y="147.0" width="3.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="538.5" y="158.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.27%)</title><rect x="538.6" y="147.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="541.6" y="158.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.27%)</title><rect x="541.8" y="147.0" width="3.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="544.8" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.27%)</title><rect x="541.8" y="131.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="544.8" y="142.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 1.07%)</title><rect x="544.9" y="163.0" width="12.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="547.9" y="174.0"></text>
</g>
<g>
<title>recv (8 samples, 2.13%)</title><rect x="557.5" y="163.0" width="25.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="560.5" y="174.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (7 samples, 1.87%)</title><rect x="582.7" y="195.0" width="22.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="585.7" y="206.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (4 samples, 1.07%)</title><rect x="582.7" y="179.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="585.7" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.80%)</title><rect x="585.8" y="163.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.8" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.80%)</title><rect x="585.8" y="147.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="588.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.80%)</title><rect x="595.3" y="179.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="598.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.27%)</title><rect x="601.6" y="163.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="604.6" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.27%)</title><rect x="601.6" y="147.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="604.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (5 samples, 1.33%)</title><rect x="604.7" y="195.0" width="15.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="607.7" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.53%)</title><rect x="614.2" y="179.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="617.2" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.53%)</title><rect x="614.2" y="163.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="617.2" y="174.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.53%)</title><rect x="614.2" y="147.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.2" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.27%)</title><rect x="620.5" y="195.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="623.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.27%)</title><rect x="620.5" y="179.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.5" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.27%)</title><rect x="620.5" y="163.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="623.5" y="174.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (3 samples, 0.80%)</title><rect x="623.6" y="195.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.6" y="206.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (1 samples, 0.27%)</title><rect x="623.6" y="179.0" width="3.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="626.6" y="190.0"></text>
</g>
<g>
<title>setsockopt (2 samples, 0.53%)</title><rect x="626.7" y="179.0" width="6.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="629.7" y="190.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (4 samples, 1.07%)</title><rect x="633.0" y="195.0" width="12.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="636.0" y="206.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (2 samples, 0.53%)</title><rect x="636.2" y="179.0" width="6.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="639.2" y="190.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.27%)</title><rect x="639.3" y="163.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="642.3" y="174.0"></text>
</g>
<g>
<title>__send (1 samples, 0.27%)</title><rect x="642.5" y="179.0" width="3.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="645.5" y="190.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (3 samples, 0.80%)</title><rect x="645.6" y="195.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.6" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.27%)</title><rect x="651.9" y="179.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="654.9" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (1 samples, 0.27%)</title><rect x="651.9" y="163.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="654.9" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (21 samples, 5.60%)</title><rect x="655.1" y="227.0" width="66.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="658.1" y="238.0">one/nio..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.27%)</title><rect x="655.1" y="211.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.1" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.27%)</title><rect x="655.1" y="195.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="658.1" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.27%)</title><rect x="655.1" y="179.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.1" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (19 samples, 5.07%)</title><rect x="658.2" y="211.0" width="59.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="661.2" y="222.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 1.07%)</title><rect x="658.2" y="195.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="661.2" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.53%)</title><rect x="664.5" y="179.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.5" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.53%)</title><rect x="664.5" y="163.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="667.5" y="174.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.53%)</title><rect x="664.5" y="147.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="667.5" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 4.00%)</title><rect x="670.8" y="195.0" width="47.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="673.8" y="206.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 4.00%)</title><rect x="670.8" y="179.0" width="47.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.8" y="190.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14 samples, 3.73%)</title><rect x="670.8" y="163.0" width="44.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.8" y="174.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (14 samples, 3.73%)</title><rect x="670.8" y="147.0" width="44.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.8" y="158.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (5 samples, 1.33%)</title><rect x="673.9" y="131.0" width="15.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="676.9" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 1.07%)</title><rect x="677.1" y="115.0" width="12.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="680.1" y="126.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.27%)</title><rect x="686.5" y="99.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="689.5" y="110.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.27%)</title><rect x="686.5" y="83.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="689.5" y="94.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.27%)</title><rect x="689.7" y="131.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="692.7" y="142.0"></text>
</g>
<g>
<title>__send (7 samples, 1.87%)</title><rect x="692.8" y="131.0" width="22.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="695.8" y="142.0">_..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.27%)</title><rect x="714.9" y="163.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="717.9" y="174.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.27%)</title><rect x="714.9" y="147.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="717.9" y="158.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="714.9" y="131.0" width="3.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="717.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.27%)</title><rect x="718.0" y="211.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="721.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.27%)</title><rect x="718.0" y="195.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.0" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.27%)</title><rect x="718.0" y="179.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="721.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.sendResponse (8 samples, 2.13%)</title><rect x="721.1" y="243.0" width="25.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="724.1" y="254.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (8 samples, 2.13%)</title><rect x="721.1" y="227.0" width="25.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="724.1" y="238.0">o..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.27%)</title><rect x="721.1" y="211.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="724.1" y="222.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.27%)</title><rect x="721.1" y="195.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="724.1" y="206.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.27%)</title><rect x="721.1" y="179.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="724.1" y="190.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.27%)</title><rect x="721.1" y="163.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="724.1" y="174.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.27%)</title><rect x="724.3" y="211.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="727.3" y="222.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.27%)</title><rect x="724.3" y="195.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="727.3" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.27%)</title><rect x="724.3" y="179.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="727.3" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (5 samples, 1.33%)</title><rect x="727.4" y="211.0" width="15.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="730.4" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.53%)</title><rect x="727.4" y="195.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.4" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 0.80%)</title><rect x="733.7" y="195.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="736.7" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 0.80%)</title><rect x="733.7" y="179.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="736.7" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (3 samples, 0.80%)</title><rect x="733.7" y="163.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="736.7" y="174.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (3 samples, 0.80%)</title><rect x="733.7" y="147.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="736.7" y="158.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.27%)</title><rect x="733.7" y="131.0" width="3.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="736.7" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.27%)</title><rect x="733.7" y="115.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="736.7" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.27%)</title><rect x="733.7" y="99.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="736.7" y="110.0"></text>
</g>
<g>
<title>__send (1 samples, 0.27%)</title><rect x="736.9" y="131.0" width="3.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="739.9" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.27%)</title><rect x="740.0" y="131.0" width="3.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="743.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.27%)</title><rect x="743.2" y="211.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="746.2" y="222.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (121 samples, 32.27%)</title><rect x="746.3" y="323.0" width="380.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="749.3" y="334.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.80%)</title><rect x="749.5" y="307.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="752.5" y="318.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (3 samples, 0.80%)</title><rect x="749.5" y="291.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="752.5" y="302.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.27%)</title><rect x="752.6" y="275.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="755.6" y="286.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.27%)</title><rect x="755.8" y="275.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.8" y="286.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (40 samples, 10.67%)</title><rect x="758.9" y="307.0" width="125.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="761.9" y="318.0">one/nio/net/Nat..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="758.9" y="291.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="761.9" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="758.9" y="275.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="761.9" y="286.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (5 samples, 1.33%)</title><rect x="762.1" y="291.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="765.1" y="302.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.53%)</title><rect x="762.1" y="275.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.1" y="286.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getInt (1 samples, 0.27%)</title><rect x="765.2" y="259.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="768.2" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getInt (1 samples, 0.27%)</title><rect x="765.2" y="243.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="768.2" y="254.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (3 samples, 0.80%)</title><rect x="768.3" y="275.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="771.3" y="286.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (34 samples, 9.07%)</title><rect x="777.8" y="291.0" width="107.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="780.8" y="302.0">one/nio/net/N..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 1.60%)</title><rect x="790.4" y="275.0" width="18.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="793.4" y="286.0"></text>
</g>
<g>
<title>clock_gettime (9 samples, 2.40%)</title><rect x="809.3" y="275.0" width="28.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="812.3" y="286.0">cl..</text>
</g>
<g>
<title>epoll_wait (15 samples, 4.00%)</title><rect x="837.6" y="275.0" width="47.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="840.6" y="286.0">epol..</text>
</g>
<g>
<title>one/nio/net/Session.process (77 samples, 20.53%)</title><rect x="884.8" y="307.0" width="242.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="887.8" y="318.0">one/nio/net/Session.process</text>
</g>
<g>
<title>[unknown] (1 samples, 0.27%)</title><rect x="887.9" y="291.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="890.9" y="302.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.27%)</title><rect x="887.9" y="275.0" width="3.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="890.9" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.27%)</title><rect x="887.9" y="259.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="890.9" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (75 samples, 20.00%)</title><rect x="891.1" y="291.0" width="236.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="894.1" y="302.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (55 samples, 14.67%)</title><rect x="894.2" y="275.0" width="173.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="897.2" y="286.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (37 samples, 9.87%)</title><rect x="894.2" y="259.0" width="116.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="897.2" y="270.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (35 samples, 9.33%)</title><rect x="900.5" y="243.0" width="110.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="903.5" y="254.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (35 samples, 9.33%)</title><rect x="900.5" y="227.0" width="110.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="903.5" y="238.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (4 samples, 1.07%)</title><rect x="900.5" y="211.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="903.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 1.07%)</title><rect x="900.5" y="195.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="903.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.27%)</title><rect x="909.9" y="179.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="912.9" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.27%)</title><rect x="909.9" y="163.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="912.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.put (31 samples, 8.27%)</title><rect x="913.1" y="211.0" width="97.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="916.1" y="222.0">ru/mail/pol..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.80%)</title><rect x="916.2" y="195.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="919.2" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.80%)</title><rect x="916.2" y="179.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="919.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$66/300021782.get$Lambda (3 samples, 0.80%)</title><rect x="916.2" y="163.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="919.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.executeTask (2 samples, 0.53%)</title><rect x="919.4" y="147.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="922.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.executeTask (27 samples, 7.20%)</title><rect x="925.7" y="195.0" width="84.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="928.7" y="206.0">ru/mail/po..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (1 samples, 0.27%)</title><rect x="928.8" y="179.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="931.8" y="190.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.27%)</title><rect x="928.8" y="163.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="931.8" y="174.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.27%)</title><rect x="928.8" y="147.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="931.8" y="158.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (1 samples, 0.27%)</title><rect x="928.8" y="131.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="931.8" y="142.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/ThrowableProxy.&lt;init&gt; (1 samples, 0.27%)</title><rect x="928.8" y="115.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="931.8" y="126.0"></text>
</g>
<g>
<title>java/lang/Throwable.getStackTrace (1 samples, 0.27%)</title><rect x="928.8" y="99.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="931.8" y="110.0"></text>
</g>
<g>
<title>java/lang/Object.clone (1 samples, 0.27%)</title><rect x="928.8" y="83.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="931.8" y="94.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;540784ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)9, 540784ul&gt;::access_barrier(oopDesc*, oopDesc*, unsigned long) (1 samples, 0.27%)</title><rect x="928.8" y="67.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.8" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (25 samples, 6.67%)</title><rect x="932.0" y="179.0" width="78.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="935.0" y="190.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (24 samples, 6.40%)</title><rect x="935.1" y="163.0" width="75.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="938.1" y="174.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.53%)</title><rect x="944.6" y="147.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="947.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.53%)</title><rect x="944.6" y="131.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="947.6" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.53%)</title><rect x="944.6" y="115.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="947.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.53%)</title><rect x="944.6" y="99.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="947.6" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (1 samples, 0.27%)</title><rect x="944.6" y="83.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="947.6" y="94.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.27%)</title><rect x="944.6" y="67.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="947.6" y="78.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.27%)</title><rect x="944.6" y="51.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="947.6" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.27%)</title><rect x="947.7" y="83.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="950.7" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 1.33%)</title><rect x="950.9" y="147.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="953.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 1.07%)</title><rect x="954.0" y="131.0" width="12.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="957.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.80%)</title><rect x="954.0" y="115.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="957.0" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.80%)</title><rect x="954.0" y="99.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="957.0" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.80%)</title><rect x="954.0" y="83.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.0" y="94.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.80%)</title><rect x="954.0" y="67.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="957.0" y="78.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.53%)</title><rect x="954.0" y="51.0" width="6.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="957.0" y="62.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.27%)</title><rect x="954.0" y="35.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="957.0" y="46.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.27%)</title><rect x="957.1" y="35.0" width="3.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="960.1" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.27%)</title><rect x="960.3" y="51.0" width="3.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="963.3" y="62.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.27%)</title><rect x="960.3" y="35.0" width="3.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="963.3" y="46.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.27%)</title><rect x="963.4" y="115.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="966.4" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.27%)</title><rect x="963.4" y="99.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="966.4" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.27%)</title><rect x="963.4" y="83.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="966.4" y="94.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.27%)</title><rect x="963.4" y="67.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="966.4" y="78.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.27%)</title><rect x="963.4" y="51.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="966.4" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 3.73%)</title><rect x="966.6" y="147.0" width="44.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="969.6" y="158.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 3.73%)</title><rect x="966.6" y="131.0" width="44.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="969.6" y="142.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 3.73%)</title><rect x="966.6" y="115.0" width="44.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="969.6" y="126.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 3.73%)</title><rect x="966.6" y="99.0" width="44.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="969.6" y="110.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 3.73%)</title><rect x="966.6" y="83.0" width="44.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="969.6" y="94.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 2.40%)</title><rect x="969.7" y="67.0" width="28.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="972.7" y="78.0">Un..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.27%)</title><rect x="972.9" y="51.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.9" y="62.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.27%)</title><rect x="976.0" y="51.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="979.0" y="62.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.27%)</title><rect x="979.2" y="51.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="982.2" y="62.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.80%)</title><rect x="982.3" y="51.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="985.3" y="62.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.27%)</title><rect x="991.8" y="51.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="994.8" y="62.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.27%)</title><rect x="994.9" y="51.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="997.9" y="62.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.80%)</title><rect x="998.1" y="67.0" width="9.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1001.1" y="78.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.27%)</title><rect x="1007.5" y="67.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1010.5" y="78.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 1.60%)</title><rect x="1010.6" y="259.0" width="18.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1013.6" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.80%)</title><rect x="1010.6" y="243.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1013.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.80%)</title><rect x="1010.6" y="227.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1013.6" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.80%)</title><rect x="1020.1" y="243.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1023.1" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.80%)</title><rect x="1029.5" y="259.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1032.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.80%)</title><rect x="1029.5" y="243.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1032.5" y="254.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.53%)</title><rect x="1029.5" y="227.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1032.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.53%)</title><rect x="1029.5" y="211.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1032.5" y="222.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="1035.8" y="227.0" width="3.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1038.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.27%)</title><rect x="1039.0" y="259.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1042.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.27%)</title><rect x="1039.0" y="243.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.27%)</title><rect x="1039.0" y="227.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1042.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.27%)</title><rect x="1039.0" y="211.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1042.0" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 2.13%)</title><rect x="1042.1" y="259.0" width="25.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1045.1" y="270.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.80%)</title><rect x="1057.8" y="243.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1060.8" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.27%)</title><rect x="1064.1" y="227.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1067.1" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="1064.1" y="211.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.1" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.27%)</title><rect x="1064.1" y="195.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.1" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.27%)</title><rect x="1064.1" y="179.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.1" y="190.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.27%)</title><rect x="1064.1" y="163.0" width="3.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1067.1" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (19 samples, 5.07%)</title><rect x="1067.3" y="275.0" width="59.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1070.3" y="286.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (18 samples, 4.80%)</title><rect x="1067.3" y="259.0" width="56.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1070.3" y="270.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (4 samples, 1.07%)</title><rect x="1083.0" y="243.0" width="12.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1086.0" y="254.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.80%)</title><rect x="1086.2" y="227.0" width="9.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1089.2" y="238.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.27%)</title><rect x="1089.3" y="211.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.3" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.27%)</title><rect x="1092.5" y="211.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.5" y="222.0"></text>
</g>
<g>
<title>recv (9 samples, 2.40%)</title><rect x="1095.6" y="243.0" width="28.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1098.6" y="254.0">recv</text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.27%)</title><rect x="1123.9" y="259.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1126.9" y="270.0"></text>
</g>
<g>
<title>start_thread (20 samples, 5.33%)</title><rect x="1127.1" y="323.0" width="62.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1130.1" y="334.0">start_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (20 samples, 5.33%)</title><rect x="1127.1" y="307.0" width="62.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1130.1" y="318.0">thread..</text>
</g>
<g>
<title>Thread::call_run() (20 samples, 5.33%)</title><rect x="1127.1" y="291.0" width="62.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.1" y="302.0">Thread..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 5.33%)</title><rect x="1127.1" y="275.0" width="62.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.1" y="286.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 5.33%)</title><rect x="1127.1" y="259.0" width="62.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.1" y="270.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 3.20%)</title><rect x="1127.1" y="243.0" width="37.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.1" y="254.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 3.20%)</title><rect x="1127.1" y="227.0" width="37.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.1" y="238.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 1.87%)</title><rect x="1142.8" y="211.0" width="22.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.8" y="222.0">G..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.53%)</title><rect x="1158.5" y="195.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.5" y="206.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (8 samples, 2.13%)</title><rect x="1164.8" y="243.0" width="25.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.8" y="254.0">G..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (8 samples, 2.13%)</title><rect x="1164.8" y="227.0" width="25.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.8" y="238.0">G..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (8 samples, 2.13%)</title><rect x="1164.8" y="211.0" width="25.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.8" y="222.0">G..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (8 samples, 2.13%)</title><rect x="1164.8" y="195.0" width="25.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.8" y="206.0">D..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 2.13%)</title><rect x="1164.8" y="179.0" width="25.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.8" y="190.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (6 samples, 1.60%)</title><rect x="1164.8" y="163.0" width="18.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.8" y="174.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.80%)</title><rect x="1174.3" y="147.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.3" y="158.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (2 samples, 0.53%)</title><rect x="1183.7" y="163.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="174.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.53%)</title><rect x="1183.7" y="147.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.7" y="158.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.520] (1 samples, 0.27%)</title><rect x="1183.7" y="131.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="142.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.27%)</title><rect x="1186.9" y="131.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.9" y="142.0"></text>
</g>
</g>
</svg>
