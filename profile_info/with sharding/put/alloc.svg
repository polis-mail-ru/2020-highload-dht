<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="565"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="565"> </text>
<g id="frames">
<g>
<title>all (7,252 samples, 100.00%)</title><rect x="10.0" y="531.0" width="1180.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="542.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (5,144 samples, 70.93%)</title><rect x="10.0" y="515.0" width="837.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="526.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5,144 samples, 70.93%)</title><rect x="10.0" y="499.0" width="837.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="510.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5,144 samples, 70.93%)</title><rect x="10.0" y="483.0" width="837.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="494.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (81 samples, 1.12%)</title><rect x="10.0" y="467.0" width="13.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (81 samples, 1.12%)</title><rect x="10.0" y="451.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (78 samples, 1.08%)</title><rect x="10.0" y="435.0" width="12.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (78 samples, 1.08%)</title><rect x="10.0" y="419.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (78 samples, 1.08%)</title><rect x="10.0" y="403.0" width="12.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.04%)</title><rect x="22.7" y="435.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.04%)</title><rect x="22.7" y="419.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.04%)</title><rect x="22.7" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.04%)</title><rect x="22.7" y="387.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.7" y="398.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (3 samples, 0.04%)</title><rect x="22.7" y="371.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="25.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$66/300021782.run (5,063 samples, 69.82%)</title><rect x="23.2" y="467.0" width="823.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.2" y="478.0">ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$66/300021782.run</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$put$2 (5,063 samples, 69.82%)</title><rect x="23.2" y="451.0" width="823.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.2" y="462.0">ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$put$2</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (96 samples, 1.32%)</title><rect x="23.2" y="435.0" width="15.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (96 samples, 1.32%)</title><rect x="23.2" y="419.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.2" y="430.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (96 samples, 1.32%)</title><rect x="23.2" y="403.0" width="15.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="26.2" y="414.0"></text>
</g>
<g>
<title>one.nio.http.Response (52 samples, 0.72%)</title><rect x="38.8" y="435.0" width="8.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="41.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (187 samples, 2.58%)</title><rect x="47.3" y="435.0" width="30.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.3" y="446.0">on..</text>
</g>
<g>
<title>byte[] (79 samples, 1.09%)</title><rect x="47.3" y="419.0" width="12.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="50.3" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (63 samples, 0.87%)</title><rect x="60.1" y="419.0" width="10.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="63.1" y="430.0"></text>
</g>
<g>
<title>java.lang.String (45 samples, 0.62%)</title><rect x="70.4" y="419.0" width="7.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="73.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (254 samples, 3.50%)</title><rect x="77.7" y="435.0" width="41.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.7" y="446.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (254 samples, 3.50%)</title><rect x="77.7" y="419.0" width="41.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.7" y="430.0">ru/..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (74 samples, 1.02%)</title><rect x="77.7" y="403.0" width="12.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.7" y="414.0"></text>
</g>
<g>
<title>java.lang.Integer (74 samples, 1.02%)</title><rect x="77.7" y="387.0" width="12.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="80.7" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.isEmpty (78 samples, 1.08%)</title><rect x="89.7" y="403.0" width="12.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.7" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (78 samples, 1.08%)</title><rect x="89.7" y="387.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.7" y="398.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (78 samples, 1.08%)</title><rect x="89.7" y="371.0" width="12.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="92.7" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (102 samples, 1.41%)</title><rect x="102.4" y="403.0" width="16.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="105.4" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (102 samples, 1.41%)</title><rect x="102.4" y="387.0" width="16.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.4" y="398.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (102 samples, 1.41%)</title><rect x="102.4" y="371.0" width="16.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="105.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (269 samples, 3.71%)</title><rect x="119.0" y="435.0" width="43.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.0" y="446.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (16 samples, 0.22%)</title><rect x="119.0" y="419.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="122.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (16 samples, 0.22%)</title><rect x="119.0" y="403.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="122.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (16 samples, 0.22%)</title><rect x="119.0" y="387.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="122.0" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (16 samples, 0.22%)</title><rect x="119.0" y="371.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="122.0" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (16 samples, 0.22%)</title><rect x="119.0" y="355.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="122.0" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.15%)</title><rect x="119.0" y="339.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.0" y="350.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (11 samples, 0.15%)</title><rect x="119.0" y="323.0" width="1.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="122.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (5 samples, 0.07%)</title><rect x="120.8" y="339.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="123.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (5 samples, 0.07%)</title><rect x="120.8" y="323.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.8" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (5 samples, 0.07%)</title><rect x="120.8" y="307.0" width="0.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="123.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (253 samples, 3.49%)</title><rect x="121.6" y="419.0" width="41.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="124.6" y="430.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (177 samples, 2.44%)</title><rect x="121.6" y="403.0" width="28.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.6" y="414.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (177 samples, 2.44%)</title><rect x="121.6" y="387.0" width="28.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="124.6" y="398.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (33 samples, 0.46%)</title><rect x="150.4" y="403.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="153.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (33 samples, 0.46%)</title><rect x="150.4" y="387.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.4" y="398.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Index (9 samples, 0.12%)</title><rect x="150.4" y="371.0" width="1.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="153.4" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (24 samples, 0.33%)</title><rect x="151.9" y="371.0" width="3.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="154.9" y="382.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Value (43 samples, 0.59%)</title><rect x="155.8" y="403.0" width="7.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="158.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.getByteBufferKey (192 samples, 2.65%)</title><rect x="162.8" y="435.0" width="31.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="165.8" y="446.0">ru..</text>
</g>
<g>
<title>java/lang/String.getBytes (108 samples, 1.49%)</title><rect x="162.8" y="419.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="165.8" y="430.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (108 samples, 1.49%)</title><rect x="162.8" y="403.0" width="17.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="165.8" y="414.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (108 samples, 1.49%)</title><rect x="162.8" y="387.0" width="17.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.8" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (108 samples, 1.49%)</title><rect x="162.8" y="371.0" width="17.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="165.8" y="382.0"></text>
</g>
<g>
<title>byte[] (108 samples, 1.49%)</title><rect x="162.8" y="355.0" width="17.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="165.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (84 samples, 1.16%)</title><rect x="180.4" y="419.0" width="13.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="183.4" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (84 samples, 1.16%)</title><rect x="180.4" y="403.0" width="13.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="183.4" y="414.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (84 samples, 1.16%)</title><rect x="180.4" y="387.0" width="13.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="183.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.proxy (3,736 samples, 51.52%)</title><rect x="194.0" y="435.0" width="607.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="197.0" y="446.0">ru/mail/polis/service/re1nex/AsyncTopologyService.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,733 samples, 51.48%)</title><rect x="194.2" y="419.0" width="607.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.2" y="430.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,733 samples, 51.48%)</title><rect x="194.2" y="403.0" width="607.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.2" y="414.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (3,669 samples, 50.59%)</title><rect x="194.4" y="387.0" width="597.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.4" y="398.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (1,093 samples, 15.07%)</title><rect x="194.4" y="371.0" width="177.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="197.4" y="382.0">byte[]</text>
</g>
<g>
<title>byte[] (2,576 samples, 35.52%)</title><rect x="372.2" y="371.0" width="419.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="375.2" y="382.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (61 samples, 0.84%)</title><rect x="791.4" y="387.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="794.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (58 samples, 0.80%)</title><rect x="791.5" y="371.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="794.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (58 samples, 0.80%)</title><rect x="791.5" y="355.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="794.5" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (58 samples, 0.80%)</title><rect x="791.5" y="339.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="794.5" y="350.0"></text>
</g>
<g>
<title>char[] (53 samples, 0.73%)</title><rect x="791.5" y="323.0" width="8.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="794.5" y="334.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.04%)</title><rect x="800.1" y="323.0" width="0.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="803.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="800.6" y="323.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="800.6" y="307.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="803.6" y="318.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.03%)</title><rect x="800.6" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.6" y="302.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.03%)</title><rect x="800.6" y="275.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="803.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.03%)</title><rect x="801.0" y="371.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="804.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="801.0" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.0" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="801.0" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="804.0" y="350.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.03%)</title><rect x="801.0" y="323.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="804.0" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (2 samples, 0.03%)</title><rect x="801.3" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="804.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.03%)</title><rect x="801.3" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="804.3" y="382.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.03%)</title><rect x="801.3" y="355.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="804.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.03%)</title><rect x="801.6" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="804.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2 samples, 0.03%)</title><rect x="801.6" y="403.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="804.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="801.6" y="387.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="804.6" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.03%)</title><rect x="801.6" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="804.6" y="382.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.03%)</title><rect x="801.6" y="355.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="804.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.sendResponse (277 samples, 3.82%)</title><rect x="801.9" y="435.0" width="45.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="804.9" y="446.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (277 samples, 3.82%)</title><rect x="801.9" y="419.0" width="45.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="804.9" y="430.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (277 samples, 3.82%)</title><rect x="801.9" y="403.0" width="45.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="804.9" y="414.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (193 samples, 2.66%)</title><rect x="801.9" y="387.0" width="31.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="804.9" y="398.0">on..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (193 samples, 2.66%)</title><rect x="801.9" y="371.0" width="31.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="804.9" y="382.0">on..</text>
</g>
<g>
<title>byte[] (193 samples, 2.66%)</title><rect x="801.9" y="355.0" width="31.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="804.9" y="366.0">by..</text>
</g>
<g>
<title>one/nio/net/Session.write (84 samples, 1.16%)</title><rect x="833.3" y="387.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.3" y="398.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (84 samples, 1.16%)</title><rect x="833.3" y="371.0" width="13.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="836.3" y="382.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,108 samples, 29.07%)</title><rect x="847.0" y="515.0" width="343.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="850.0" y="526.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (115 samples, 1.59%)</title><rect x="847.0" y="499.0" width="18.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="850.0" y="510.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (115 samples, 1.59%)</title><rect x="847.0" y="483.0" width="18.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="850.0" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,993 samples, 27.48%)</title><rect x="865.7" y="499.0" width="324.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="868.7" y="510.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,993 samples, 27.48%)</title><rect x="865.7" y="483.0" width="324.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="868.7" y="494.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,993 samples, 27.48%)</title><rect x="865.7" y="467.0" width="324.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.7" y="478.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (357 samples, 4.92%)</title><rect x="865.7" y="451.0" width="58.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="868.7" y="462.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (357 samples, 4.92%)</title><rect x="865.7" y="435.0" width="58.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="868.7" y="446.0">one/ni..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (211 samples, 2.91%)</title><rect x="865.7" y="419.0" width="34.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="868.7" y="430.0">Re..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (112 samples, 1.54%)</title><rect x="865.7" y="403.0" width="18.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (112 samples, 1.54%)</title><rect x="865.7" y="387.0" width="18.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="868.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (112 samples, 1.54%)</title><rect x="865.7" y="371.0" width="18.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="868.7" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (112 samples, 1.54%)</title><rect x="865.7" y="355.0" width="18.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="868.7" y="366.0"></text>
</g>
<g>
<title>java.lang.String (60 samples, 0.83%)</title><rect x="865.7" y="339.0" width="9.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="868.7" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (52 samples, 0.72%)</title><rect x="875.5" y="339.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="878.5" y="350.0"></text>
</g>
<g>
<title>byte[] (52 samples, 0.72%)</title><rect x="875.5" y="323.0" width="8.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="878.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.put (99 samples, 1.37%)</title><rect x="883.9" y="403.0" width="16.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="886.9" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (86 samples, 1.19%)</title><rect x="883.9" y="387.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="886.9" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (86 samples, 1.19%)</title><rect x="883.9" y="371.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$66/300021782.get$Lambda (86 samples, 1.19%)</title><rect x="883.9" y="355.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="886.9" y="366.0"></text>
</g>
<g>
<title>ru.mail.polis.service.re1nex.AsyncTopologyService$$Lambda$66 (86 samples, 1.19%)</title><rect x="883.9" y="339.0" width="14.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="886.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.executeTask (13 samples, 0.18%)</title><rect x="897.9" y="387.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="900.9" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (9 samples, 0.12%)</title><rect x="897.9" y="371.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="900.9" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (9 samples, 0.12%)</title><rect x="897.9" y="355.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="900.9" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (9 samples, 0.12%)</title><rect x="897.9" y="339.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="900.9" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (9 samples, 0.12%)</title><rect x="897.9" y="323.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="900.9" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (9 samples, 0.12%)</title><rect x="897.9" y="307.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="900.9" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (9 samples, 0.12%)</title><rect x="897.9" y="291.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="900.9" y="302.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (9 samples, 0.12%)</title><rect x="897.9" y="275.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.9" y="286.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (9 samples, 0.12%)</title><rect x="897.9" y="259.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="900.9" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (9 samples, 0.12%)</title><rect x="897.9" y="243.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="900.9" y="254.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (9 samples, 0.12%)</title><rect x="897.9" y="227.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="900.9" y="238.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (8 samples, 0.11%)</title><rect x="897.9" y="211.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="900.9" y="222.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (8 samples, 0.11%)</title><rect x="897.9" y="195.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="900.9" y="206.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.convert (6 samples, 0.08%)</title><rect x="897.9" y="179.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="900.9" y="190.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.throwableProxyToString (6 samples, 0.08%)</title><rect x="897.9" y="163.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="900.9" y="174.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.recursiveAppend (5 samples, 0.07%)</title><rect x="897.9" y="147.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="900.9" y="158.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.subjoinSTEPArray (5 samples, 0.07%)</title><rect x="897.9" y="131.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="900.9" y="142.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/StackTraceElementProxy.toString (5 samples, 0.07%)</title><rect x="897.9" y="115.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="900.9" y="126.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/StackTraceElementProxy.getSTEAsString (5 samples, 0.07%)</title><rect x="897.9" y="99.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="900.9" y="110.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.toString (2 samples, 0.03%)</title><rect x="897.9" y="83.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.9" y="94.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.03%)</title><rect x="898.4" y="83.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="901.4" y="94.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="898.4" y="67.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="901.4" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="898.4" y="51.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="901.4" y="62.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.03%)</title><rect x="898.4" y="35.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="901.4" y="46.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.06%)</title><rect x="899.4" y="371.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="902.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.04%)</title><rect x="899.4" y="355.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="902.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="899.4" y="339.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="902.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="899.4" y="323.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="902.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.04%)</title><rect x="899.4" y="307.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="902.4" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (3 samples, 0.04%)</title><rect x="899.4" y="291.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="902.4" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (146 samples, 2.01%)</title><rect x="900.0" y="419.0" width="23.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="903.0" y="430.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (146 samples, 2.01%)</title><rect x="900.0" y="403.0" width="23.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="903.0" y="414.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (146 samples, 2.01%)</title><rect x="900.0" y="387.0" width="23.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.0" y="398.0">j..</text>
</g>
<g>
<title>java.lang.String (57 samples, 0.79%)</title><rect x="900.0" y="371.0" width="9.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="903.0" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (89 samples, 1.23%)</title><rect x="909.3" y="371.0" width="14.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="912.3" y="382.0"></text>
</g>
<g>
<title>byte[] (89 samples, 1.23%)</title><rect x="909.3" y="355.0" width="14.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="912.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (668 samples, 9.21%)</title><rect x="923.8" y="451.0" width="108.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.8" y="462.0">one/nio/http/..</text>
</g>
<g>
<title>one.nio.http.Request (114 samples, 1.57%)</title><rect x="923.8" y="435.0" width="18.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="926.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (219 samples, 3.02%)</title><rect x="942.3" y="435.0" width="35.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="945.3" y="446.0">one..</text>
</g>
<g>
<title>java.lang.String[] (219 samples, 3.02%)</title><rect x="942.3" y="419.0" width="35.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="945.3" y="430.0">jav..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (335 samples, 4.62%)</title><rect x="978.0" y="435.0" width="54.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="981.0" y="446.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (335 samples, 4.62%)</title><rect x="978.0" y="419.0" width="54.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="981.0" y="430.0">one/n..</text>
</g>
<g>
<title>char[] (164 samples, 2.26%)</title><rect x="978.0" y="403.0" width="26.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="981.0" y="414.0">c..</text>
</g>
<g>
<title>java.lang.String (76 samples, 1.05%)</title><rect x="1004.7" y="403.0" width="12.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1007.7" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (95 samples, 1.31%)</title><rect x="1017.0" y="403.0" width="15.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1020.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (95 samples, 1.31%)</title><rect x="1017.0" y="387.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1020.0" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (95 samples, 1.31%)</title><rect x="1017.0" y="371.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1020.0" y="382.0"></text>
</g>
<g>
<title>byte[] (95 samples, 1.31%)</title><rect x="1017.0" y="355.0" width="15.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1020.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (87 samples, 1.20%)</title><rect x="1032.5" y="451.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1035.5" y="462.0"></text>
</g>
<g>
<title>byte[] (87 samples, 1.20%)</title><rect x="1032.5" y="435.0" width="14.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1035.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (115 samples, 1.59%)</title><rect x="1046.6" y="451.0" width="18.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1049.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.substring (115 samples, 1.59%)</title><rect x="1046.6" y="435.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1049.6" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (115 samples, 1.59%)</title><rect x="1046.6" y="419.0" width="18.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1049.6" y="430.0"></text>
</g>
<g>
<title>java.lang.String (53 samples, 0.73%)</title><rect x="1046.6" y="403.0" width="8.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1049.6" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (62 samples, 0.85%)</title><rect x="1055.3" y="403.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1058.3" y="414.0"></text>
</g>
<g>
<title>byte[] (62 samples, 0.85%)</title><rect x="1055.3" y="387.0" width="10.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1058.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (766 samples, 10.56%)</title><rect x="1065.4" y="451.0" width="124.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1068.4" y="462.0">one/nio/util/Ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (766 samples, 10.56%)</title><rect x="1065.4" y="435.0" width="124.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1068.4" y="446.0">one/nio/util/Ut..</text>
</g>
<g>
<title>char[] (346 samples, 4.77%)</title><rect x="1065.4" y="419.0" width="56.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1068.4" y="430.0">char[]</text>
</g>
<g>
<title>java.lang.String (143 samples, 1.97%)</title><rect x="1121.7" y="419.0" width="23.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1124.7" y="430.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (277 samples, 3.82%)</title><rect x="1144.9" y="419.0" width="45.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1147.9" y="430.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (277 samples, 3.82%)</title><rect x="1144.9" y="403.0" width="45.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1147.9" y="414.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (277 samples, 3.82%)</title><rect x="1144.9" y="387.0" width="45.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1147.9" y="398.0">java..</text>
</g>
<g>
<title>byte[] (277 samples, 3.82%)</title><rect x="1144.9" y="371.0" width="45.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1147.9" y="382.0">byte[]</text>
</g>
</g>
</svg>
