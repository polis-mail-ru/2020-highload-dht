<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="453"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="453"> </text>
<g id="frames">
<g>
<title>all (342 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="430.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (290 samples, 84.80%)</title><rect x="10.0" y="403.0" width="1000.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="414.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (290 samples, 84.80%)</title><rect x="10.0" y="387.0" width="1000.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="398.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (290 samples, 84.80%)</title><rect x="10.0" y="371.0" width="1000.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="382.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.05%)</title><rect x="10.0" y="355.0" width="24.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (7 samples, 2.05%)</title><rect x="10.0" y="339.0" width="24.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="350.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (7 samples, 2.05%)</title><rect x="10.0" y="323.0" width="24.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (7 samples, 2.05%)</title><rect x="10.0" y="307.0" width="24.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="318.0">j..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (7 samples, 2.05%)</title><rect x="10.0" y="291.0" width="24.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="13.0" y="302.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$69/108509771.run (283 samples, 82.75%)</title><rect x="34.2" y="355.0" width="976.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.2" y="366.0">ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$69/108509771.run</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$get$1 (283 samples, 82.75%)</title><rect x="34.2" y="339.0" width="976.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.2" y="350.0">ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$get$1</text>
</g>
<g>
<title>one.nio.http.Response (2 samples, 0.58%)</title><rect x="34.2" y="323.0" width="6.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="37.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (12 samples, 3.51%)</title><rect x="41.1" y="323.0" width="41.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.1" y="334.0">one..</text>
</g>
<g>
<title>byte[] (3 samples, 0.88%)</title><rect x="41.1" y="307.0" width="10.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="44.1" y="318.0"></text>
</g>
<g>
<title>java.lang.String[] (6 samples, 1.75%)</title><rect x="51.4" y="307.0" width="20.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="54.4" y="318.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.88%)</title><rect x="72.1" y="307.0" width="10.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="75.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (184 samples, 53.80%)</title><rect x="82.5" y="323.0" width="634.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.5" y="334.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (23 samples, 6.73%)</title><rect x="82.5" y="307.0" width="79.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="85.5" y="318.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (23 samples, 6.73%)</title><rect x="82.5" y="291.0" width="79.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.5" y="302.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (23 samples, 6.73%)</title><rect x="82.5" y="275.0" width="79.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="85.5" y="286.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (23 samples, 6.73%)</title><rect x="82.5" y="259.0" width="79.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.5" y="270.0">com/googl..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (23 samples, 6.73%)</title><rect x="82.5" y="243.0" width="79.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.5" y="254.0">ru/mail/p..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 1.17%)</title><rect x="82.5" y="227.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="85.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (4 samples, 1.17%)</title><rect x="82.5" y="211.0" width="13.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.5" y="222.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (4 samples, 1.17%)</title><rect x="82.5" y="195.0" width="13.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.5" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (4 samples, 1.17%)</title><rect x="82.5" y="179.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.5" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (4 samples, 1.17%)</title><rect x="82.5" y="163.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.5" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (4 samples, 1.17%)</title><rect x="82.5" y="147.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.5" y="158.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$109/1770332374.getAsBoolean (4 samples, 1.17%)</title><rect x="82.5" y="131.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="85.5" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (4 samples, 1.17%)</title><rect x="82.5" y="115.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.5" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (4 samples, 1.17%)</title><rect x="82.5" y="99.0" width="13.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.5" y="110.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (4 samples, 1.17%)</title><rect x="82.5" y="83.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.5" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable$$Lambda$78/219785976.apply (4 samples, 1.17%)</title><rect x="82.5" y="67.0" width="13.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.lambda$iterator$0 (4 samples, 1.17%)</title><rect x="82.5" y="51.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.5" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (4 samples, 1.17%)</title><rect x="82.5" y="35.0" width="13.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="85.5" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$122/1776747945.apply (19 samples, 5.56%)</title><rect x="96.3" y="227.0" width="65.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.3" y="238.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (19 samples, 5.56%)</title><rect x="96.3" y="211.0" width="65.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.3" y="222.0">ru/mail..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (19 samples, 5.56%)</title><rect x="96.3" y="195.0" width="65.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.3" y="206.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (19 samples, 5.56%)</title><rect x="96.3" y="179.0" width="65.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="99.3" y="190.0">java.ni..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (15 samples, 4.39%)</title><rect x="161.8" y="307.0" width="51.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.8" y="318.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (15 samples, 4.39%)</title><rect x="161.8" y="291.0" width="51.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="164.8" y="302.0">com/g..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$146/1857329428.apply (15 samples, 4.39%)</title><rect x="161.8" y="275.0" width="51.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="164.8" y="286.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$iterator$4 (15 samples, 4.39%)</title><rect x="161.8" y="259.0" width="51.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.8" y="270.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (12 samples, 3.51%)</title><rect x="161.8" y="243.0" width="41.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="164.8" y="254.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (12 samples, 3.51%)</title><rect x="161.8" y="227.0" width="41.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.8" y="238.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (12 samples, 3.51%)</title><rect x="161.8" y="211.0" width="41.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="164.8" y="222.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Value.getData (3 samples, 0.88%)</title><rect x="203.2" y="243.0" width="10.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.88%)</title><rect x="203.2" y="227.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.2" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.88%)</title><rect x="203.2" y="211.0" width="10.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="206.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (6 samples, 1.75%)</title><rect x="213.6" y="307.0" width="20.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="216.6" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (6 samples, 1.75%)</title><rect x="213.6" y="291.0" width="20.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.6" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (6 samples, 1.75%)</title><rect x="213.6" y="275.0" width="20.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.6" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (6 samples, 1.75%)</title><rect x="213.6" y="259.0" width="20.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="216.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.iterator (140 samples, 40.94%)</title><rect x="234.3" y="307.0" width="483.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.3" y="318.0">ru/mail/polis/dao/re1nex/NewDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (8 samples, 2.34%)</title><rect x="234.3" y="291.0" width="27.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.3" y="302.0">c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (8 samples, 2.34%)</title><rect x="234.3" y="275.0" width="27.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="237.3" y="286.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (132 samples, 38.60%)</title><rect x="261.9" y="291.0" width="455.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.9" y="302.0">ru/mail/polis/dao/re1nex/NewDAO.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (55 samples, 16.08%)</title><rect x="261.9" y="275.0" width="189.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.9" y="286.0">com/google/common/collect..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (4 samples, 1.17%)</title><rect x="261.9" y="259.0" width="13.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="264.9" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (51 samples, 14.91%)</title><rect x="275.7" y="259.0" width="175.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.7" y="270.0">com/google/common/colle..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (6 samples, 1.75%)</title><rect x="275.7" y="243.0" width="20.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="278.7" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.29%)</title><rect x="296.4" y="243.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.4" y="254.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (1 samples, 0.29%)</title><rect x="296.4" y="227.0" width="3.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="299.4" y="238.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (11 samples, 3.22%)</title><rect x="299.8" y="243.0" width="38.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="302.8" y="254.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (5 samples, 1.46%)</title><rect x="337.8" y="243.0" width="17.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.8" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (5 samples, 1.46%)</title><rect x="337.8" y="227.0" width="17.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="340.8" y="238.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (28 samples, 8.19%)</title><rect x="355.0" y="243.0" width="96.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="358.0" y="254.0">java/util/S..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (28 samples, 8.19%)</title><rect x="355.0" y="227.0" width="96.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.0" y="238.0">java/util/s..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (28 samples, 8.19%)</title><rect x="355.0" y="211.0" width="96.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.0" y="222.0">java/util/s..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (4 samples, 1.17%)</title><rect x="355.0" y="195.0" width="13.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="358.0" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$109/1770332374.getAsBoolean (4 samples, 1.17%)</title><rect x="355.0" y="179.0" width="13.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.0" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (4 samples, 1.17%)</title><rect x="355.0" y="163.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="358.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (4 samples, 1.17%)</title><rect x="355.0" y="147.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.0" y="158.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (4 samples, 1.17%)</title><rect x="355.0" y="131.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="358.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable$$Lambda$78/219785976.apply (4 samples, 1.17%)</title><rect x="355.0" y="115.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="358.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.lambda$iterator$0 (4 samples, 1.17%)</title><rect x="355.0" y="99.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="358.0" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (4 samples, 1.17%)</title><rect x="355.0" y="83.0" width="13.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="358.0" y="94.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (24 samples, 7.02%)</title><rect x="368.8" y="195.0" width="82.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.8" y="206.0">java/util..</text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (2 samples, 0.58%)</title><rect x="368.8" y="179.0" width="6.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="371.8" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.88%)</title><rect x="375.7" y="179.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.7" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.88%)</title><rect x="375.7" y="163.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.7" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$101/1964553633.get$Lambda (2 samples, 0.58%)</title><rect x="375.7" y="147.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="378.7" y="158.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$101 (2 samples, 0.58%)</title><rect x="375.7" y="131.0" width="6.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="378.7" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$109/1770332374.get$Lambda (1 samples, 0.29%)</title><rect x="382.6" y="147.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.6" y="158.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$109 (1 samples, 0.29%)</title><rect x="382.6" y="131.0" width="3.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="385.6" y="142.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (4 samples, 1.17%)</title><rect x="386.1" y="179.0" width="13.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="389.1" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (4 samples, 1.17%)</title><rect x="386.1" y="163.0" width="13.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="389.1" y="174.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (4 samples, 1.17%)</title><rect x="386.1" y="147.0" width="13.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="389.1" y="158.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (15 samples, 4.39%)</title><rect x="399.9" y="179.0" width="51.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.9" y="190.0">java/..</text>
</g>
<g>
<title>java.lang.Object[] (15 samples, 4.39%)</title><rect x="399.9" y="163.0" width="51.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="402.9" y="174.0">java...</text>
</g>
<g>
<title>java.util.ArrayList (9 samples, 2.63%)</title><rect x="451.6" y="275.0" width="31.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="454.6" y="286.0">ja..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 3.22%)</title><rect x="482.7" y="275.0" width="37.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.7" y="286.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (11 samples, 3.22%)</title><rect x="482.7" y="259.0" width="37.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.7" y="270.0">jav..</text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (11 samples, 3.22%)</title><rect x="482.7" y="243.0" width="37.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="485.7" y="254.0">jav..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.58%)</title><rect x="520.6" y="275.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="523.6" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (2 samples, 0.58%)</title><rect x="520.6" y="259.0" width="6.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="523.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (15 samples, 4.39%)</title><rect x="527.5" y="275.0" width="51.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="530.5" y="286.0">ru/ma..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (5 samples, 1.46%)</title><rect x="527.5" y="259.0" width="17.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="530.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (10 samples, 2.92%)</title><rect x="544.8" y="259.0" width="34.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="547.8" y="270.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (10 samples, 2.92%)</title><rect x="544.8" y="243.0" width="34.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="547.8" y="254.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (10 samples, 2.92%)</title><rect x="544.8" y="227.0" width="34.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.8" y="238.0">co..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (10 samples, 2.92%)</title><rect x="544.8" y="211.0" width="34.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="547.8" y="222.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (10 samples, 2.92%)</title><rect x="544.8" y="195.0" width="34.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.8" y="206.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (10 samples, 2.92%)</title><rect x="544.8" y="179.0" width="34.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="547.8" y="190.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (10 samples, 2.92%)</title><rect x="544.8" y="163.0" width="34.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="547.8" y="174.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$109/1770332374.getAsBoolean (10 samples, 2.92%)</title><rect x="544.8" y="147.0" width="34.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="547.8" y="158.0">ja..</text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (10 samples, 2.92%)</title><rect x="544.8" y="131.0" width="34.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.8" y="142.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (10 samples, 2.92%)</title><rect x="544.8" y="115.0" width="34.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="547.8" y="126.0">ja..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (10 samples, 2.92%)</title><rect x="544.8" y="99.0" width="34.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="547.8" y="110.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable$$Lambda$78/219785976.apply (10 samples, 2.92%)</title><rect x="544.8" y="83.0" width="34.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.8" y="94.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.lambda$iterator$0 (10 samples, 2.92%)</title><rect x="544.8" y="67.0" width="34.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="547.8" y="78.0">ru..</text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (10 samples, 2.92%)</title><rect x="544.8" y="51.0" width="34.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="547.8" y="62.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (40 samples, 11.70%)</title><rect x="579.3" y="275.0" width="138.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="582.3" y="286.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/util/Collection.stream (10 samples, 2.92%)</title><rect x="579.3" y="259.0" width="34.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="582.3" y="270.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (3 samples, 0.88%)</title><rect x="579.3" y="243.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.3" y="254.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (3 samples, 0.88%)</title><rect x="579.3" y="227.0" width="10.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="582.3" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (7 samples, 2.05%)</title><rect x="589.6" y="243.0" width="24.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="592.6" y="254.0">j..</text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (7 samples, 2.05%)</title><rect x="589.6" y="227.0" width="24.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="592.6" y="238.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (5 samples, 1.46%)</title><rect x="613.8" y="259.0" width="17.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (5 samples, 1.46%)</title><rect x="613.8" y="243.0" width="17.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="616.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (5 samples, 1.46%)</title><rect x="613.8" y="227.0" width="17.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="616.8" y="238.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (5 samples, 1.46%)</title><rect x="613.8" y="211.0" width="17.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="616.8" y="222.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (17 samples, 4.97%)</title><rect x="631.1" y="259.0" width="58.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="634.1" y="270.0">java/u..</text>
</g>
<g>
<title>java/util/Spliterators.iterator (4 samples, 1.17%)</title><rect x="631.1" y="243.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.1" y="254.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (4 samples, 1.17%)</title><rect x="631.1" y="227.0" width="13.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="634.1" y="238.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (13 samples, 3.80%)</title><rect x="644.9" y="243.0" width="44.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.9" y="254.0">java..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.58%)</title><rect x="644.9" y="227.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.9" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.58%)</title><rect x="644.9" y="211.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="647.9" y="222.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$84/1298528170.get$Lambda (2 samples, 0.58%)</title><rect x="644.9" y="195.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.9" y="206.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$84 (2 samples, 0.58%)</title><rect x="644.9" y="179.0" width="6.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="647.9" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (11 samples, 3.22%)</title><rect x="651.8" y="227.0" width="37.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="654.8" y="238.0">jav..</text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (11 samples, 3.22%)</title><rect x="651.8" y="211.0" width="37.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="654.8" y="222.0">jav..</text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (8 samples, 2.34%)</title><rect x="689.7" y="259.0" width="27.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="692.7" y="270.0">j..</text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (8 samples, 2.34%)</title><rect x="689.7" y="243.0" width="27.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="692.7" y="254.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (30 samples, 8.77%)</title><rect x="717.3" y="323.0" width="103.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="720.3" y="334.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (30 samples, 8.77%)</title><rect x="717.3" y="307.0" width="103.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="720.3" y="318.0">ru/mail/poli..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (15 samples, 4.39%)</title><rect x="717.3" y="291.0" width="51.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="720.3" y="302.0">java/..</text>
</g>
<g>
<title>java.lang.Integer (15 samples, 4.39%)</title><rect x="717.3" y="275.0" width="51.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="720.3" y="286.0">java...</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.isEmpty (4 samples, 1.17%)</title><rect x="769.1" y="291.0" width="13.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="772.1" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (4 samples, 1.17%)</title><rect x="769.1" y="275.0" width="13.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="772.1" y="286.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (4 samples, 1.17%)</title><rect x="769.1" y="259.0" width="13.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="772.1" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (11 samples, 3.22%)</title><rect x="782.9" y="291.0" width="37.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.9" y="302.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap.tailMap (11 samples, 3.22%)</title><rect x="782.9" y="275.0" width="37.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.9" y="286.0">jav..</text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (11 samples, 3.22%)</title><rect x="782.9" y="259.0" width="37.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="785.9" y="270.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.byteBufferToByte (5 samples, 1.46%)</title><rect x="820.8" y="323.0" width="17.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="823.8" y="334.0"></text>
</g>
<g>
<title>byte[] (5 samples, 1.46%)</title><rect x="820.8" y="307.0" width="17.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="823.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.getByteBufferKey (20 samples, 5.85%)</title><rect x="838.1" y="323.0" width="69.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.1" y="334.0">ru/mail..</text>
</g>
<g>
<title>java/lang/String.getBytes (9 samples, 2.63%)</title><rect x="838.1" y="307.0" width="31.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="841.1" y="318.0">ja..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (9 samples, 2.63%)</title><rect x="838.1" y="291.0" width="31.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="841.1" y="302.0">ja..</text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (9 samples, 2.63%)</title><rect x="838.1" y="275.0" width="31.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="841.1" y="286.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 2.63%)</title><rect x="838.1" y="259.0" width="31.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="841.1" y="270.0">ja..</text>
</g>
<g>
<title>byte[] (9 samples, 2.63%)</title><rect x="838.1" y="243.0" width="31.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="841.1" y="254.0">by..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 3.22%)</title><rect x="869.1" y="307.0" width="38.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="872.1" y="318.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 3.22%)</title><rect x="869.1" y="291.0" width="38.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="872.1" y="302.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11 samples, 3.22%)</title><rect x="869.1" y="275.0" width="38.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="872.1" y="286.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.sendResponse (30 samples, 8.77%)</title><rect x="907.1" y="323.0" width="103.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="910.1" y="334.0">ru/mail/poli..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (30 samples, 8.77%)</title><rect x="907.1" y="307.0" width="103.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="910.1" y="318.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (30 samples, 8.77%)</title><rect x="907.1" y="291.0" width="103.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="910.1" y="302.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (21 samples, 6.14%)</title><rect x="907.1" y="275.0" width="72.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="910.1" y="286.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (21 samples, 6.14%)</title><rect x="907.1" y="259.0" width="72.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="910.1" y="270.0">one/nio/..</text>
</g>
<g>
<title>byte[] (21 samples, 6.14%)</title><rect x="907.1" y="243.0" width="72.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="910.1" y="254.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 2.63%)</title><rect x="979.5" y="275.0" width="31.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="982.5" y="286.0">on..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (9 samples, 2.63%)</title><rect x="979.5" y="259.0" width="31.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="982.5" y="270.0">on..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (52 samples, 15.20%)</title><rect x="1010.6" y="403.0" width="179.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1013.6" y="414.0">one/nio/server/Selector..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (7 samples, 2.05%)</title><rect x="1010.6" y="387.0" width="24.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1013.6" y="398.0">o..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (7 samples, 2.05%)</title><rect x="1010.6" y="371.0" width="24.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1013.6" y="382.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.process (45 samples, 13.16%)</title><rect x="1034.7" y="387.0" width="155.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1037.7" y="398.0">one/nio/net/Session...</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (45 samples, 13.16%)</title><rect x="1034.7" y="371.0" width="155.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1037.7" y="382.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (45 samples, 13.16%)</title><rect x="1034.7" y="355.0" width="155.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1037.7" y="366.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (11 samples, 3.22%)</title><rect x="1034.7" y="339.0" width="38.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1037.7" y="350.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (11 samples, 3.22%)</title><rect x="1034.7" y="323.0" width="38.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1037.7" y="334.0">one..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (10 samples, 2.92%)</title><rect x="1034.7" y="307.0" width="34.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1037.7" y="318.0">Re..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6 samples, 1.75%)</title><rect x="1034.7" y="291.0" width="20.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1037.7" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 1.75%)</title><rect x="1034.7" y="275.0" width="20.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1037.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 1.75%)</title><rect x="1034.7" y="259.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1037.7" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 1.75%)</title><rect x="1034.7" y="243.0" width="20.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1037.7" y="254.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.88%)</title><rect x="1034.7" y="227.0" width="10.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1037.7" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.88%)</title><rect x="1045.1" y="227.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1048.1" y="238.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.88%)</title><rect x="1045.1" y="211.0" width="10.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1048.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.get (4 samples, 1.17%)</title><rect x="1055.4" y="291.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1058.4" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 1.17%)</title><rect x="1055.4" y="275.0" width="13.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1058.4" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 1.17%)</title><rect x="1055.4" y="259.0" width="13.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1058.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$69/108509771.get$Lambda (4 samples, 1.17%)</title><rect x="1055.4" y="243.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1058.4" y="254.0"></text>
</g>
<g>
<title>ru.mail.polis.service.re1nex.AsyncTopologyService$$Lambda$69 (4 samples, 1.17%)</title><rect x="1055.4" y="227.0" width="13.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1058.4" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.29%)</title><rect x="1069.2" y="307.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1072.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.29%)</title><rect x="1069.2" y="291.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1072.2" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.29%)</title><rect x="1069.2" y="275.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1072.2" y="286.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.29%)</title><rect x="1069.2" y="259.0" width="3.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1072.2" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21 samples, 6.14%)</title><rect x="1072.7" y="339.0" width="72.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1075.7" y="350.0">one/nio/..</text>
</g>
<g>
<title>one.nio.http.Request (3 samples, 0.88%)</title><rect x="1072.7" y="323.0" width="10.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1075.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8 samples, 2.34%)</title><rect x="1083.0" y="323.0" width="27.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1086.0" y="334.0">o..</text>
</g>
<g>
<title>java.lang.String[] (8 samples, 2.34%)</title><rect x="1083.0" y="307.0" width="27.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1086.0" y="318.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 2.92%)</title><rect x="1110.6" y="323.0" width="34.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1113.6" y="334.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 2.92%)</title><rect x="1110.6" y="307.0" width="34.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1113.6" y="318.0">on..</text>
</g>
<g>
<title>char[] (5 samples, 1.46%)</title><rect x="1110.6" y="291.0" width="17.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1113.6" y="302.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.29%)</title><rect x="1127.9" y="291.0" width="3.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1130.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 1.17%)</title><rect x="1131.3" y="291.0" width="13.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1134.3" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 1.17%)</title><rect x="1131.3" y="275.0" width="13.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1134.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 1.17%)</title><rect x="1131.3" y="259.0" width="13.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1134.3" y="270.0"></text>
</g>
<g>
<title>byte[] (4 samples, 1.17%)</title><rect x="1131.3" y="243.0" width="13.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1134.3" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 3.80%)</title><rect x="1145.1" y="339.0" width="44.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1148.1" y="350.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 3.80%)</title><rect x="1145.1" y="323.0" width="44.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1148.1" y="334.0">one/..</text>
</g>
<g>
<title>char[] (5 samples, 1.46%)</title><rect x="1145.1" y="307.0" width="17.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1148.1" y="318.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.29%)</title><rect x="1162.4" y="307.0" width="3.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1165.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 2.05%)</title><rect x="1165.8" y="307.0" width="24.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1168.8" y="318.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 2.05%)</title><rect x="1165.8" y="291.0" width="24.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1168.8" y="302.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (7 samples, 2.05%)</title><rect x="1165.8" y="275.0" width="24.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1168.8" y="286.0">j..</text>
</g>
<g>
<title>byte[] (7 samples, 2.05%)</title><rect x="1165.8" y="259.0" width="24.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1168.8" y="270.0">b..</text>
</g>
</g>
</svg>
