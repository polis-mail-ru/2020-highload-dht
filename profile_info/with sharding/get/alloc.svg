<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (12,851 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (8,738 samples, 67.99%)</title><rect x="10.0" y="547.0" width="802.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,738 samples, 67.99%)</title><rect x="10.0" y="531.0" width="802.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,738 samples, 67.99%)</title><rect x="10.0" y="515.0" width="802.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (23 samples, 0.18%)</title><rect x="10.0" y="499.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (23 samples, 0.18%)</title><rect x="10.0" y="483.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (23 samples, 0.18%)</title><rect x="10.0" y="467.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (23 samples, 0.18%)</title><rect x="10.0" y="451.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (23 samples, 0.18%)</title><rect x="10.0" y="435.0" width="2.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$71/1647560262.run (8,715 samples, 67.82%)</title><rect x="12.1" y="499.0" width="800.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.1" y="510.0">ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$71/1647560262.run</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$get$1 (8,715 samples, 67.82%)</title><rect x="12.1" y="483.0" width="800.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.1" y="494.0">ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$get$1</text>
</g>
<g>
<title>one.nio.http.Response (3 samples, 0.02%)</title><rect x="12.1" y="467.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="15.1" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (18 samples, 0.14%)</title><rect x="12.4" y="467.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.4" y="478.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.08%)</title><rect x="12.4" y="451.0" width="0.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="15.4" y="462.0"></text>
</g>
<g>
<title>java.lang.String[] (5 samples, 0.04%)</title><rect x="13.3" y="451.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="16.3" y="462.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.02%)</title><rect x="13.8" y="451.0" width="0.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="16.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (2,386 samples, 18.57%)</title><rect x="14.0" y="467.0" width="219.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.0" y="478.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (255 samples, 1.98%)</title><rect x="14.0" y="451.0" width="23.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="462.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (255 samples, 1.98%)</title><rect x="14.0" y="435.0" width="23.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.0" y="446.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (255 samples, 1.98%)</title><rect x="14.0" y="419.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.0" y="430.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (255 samples, 1.98%)</title><rect x="14.0" y="403.0" width="23.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.0" y="414.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (255 samples, 1.98%)</title><rect x="14.0" y="387.0" width="23.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.0" y="398.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (217 samples, 1.69%)</title><rect x="14.0" y="371.0" width="20.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.0" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (27 samples, 0.21%)</title><rect x="14.0" y="355.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.0" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (27 samples, 0.21%)</title><rect x="14.0" y="339.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.0" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (27 samples, 0.21%)</title><rect x="14.0" y="323.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (27 samples, 0.21%)</title><rect x="14.0" y="307.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (27 samples, 0.21%)</title><rect x="14.0" y="291.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.0" y="302.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (27 samples, 0.21%)</title><rect x="14.0" y="275.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="286.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (27 samples, 0.21%)</title><rect x="14.0" y="259.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (27 samples, 0.21%)</title><rect x="14.0" y="243.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (27 samples, 0.21%)</title><rect x="14.0" y="227.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (27 samples, 0.21%)</title><rect x="14.0" y="211.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.0" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (27 samples, 0.21%)</title><rect x="14.0" y="195.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.0" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (27 samples, 0.21%)</title><rect x="14.0" y="179.0" width="2.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="17.0" y="190.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (190 samples, 1.48%)</title><rect x="16.5" y="355.0" width="17.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.5" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (190 samples, 1.48%)</title><rect x="16.5" y="339.0" width="17.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.5" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (190 samples, 1.48%)</title><rect x="16.5" y="323.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.5" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (190 samples, 1.48%)</title><rect x="16.5" y="307.0" width="17.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.5" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (190 samples, 1.48%)</title><rect x="16.5" y="291.0" width="17.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.5" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (190 samples, 1.48%)</title><rect x="16.5" y="275.0" width="17.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.5" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (161 samples, 1.25%)</title><rect x="16.5" y="259.0" width="14.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (161 samples, 1.25%)</title><rect x="16.5" y="243.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (161 samples, 1.25%)</title><rect x="16.5" y="227.0" width="14.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (161 samples, 1.25%)</title><rect x="16.5" y="211.0" width="14.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (56 samples, 0.44%)</title><rect x="16.5" y="195.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.5" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (43 samples, 0.33%)</title><rect x="16.5" y="179.0" width="4.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="19.5" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.10%)</title><rect x="20.5" y="179.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.5" y="190.0"></text>
</g>
<g>
<title>byte[] (13 samples, 0.10%)</title><rect x="20.5" y="163.0" width="1.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="23.5" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (5 samples, 0.04%)</title><rect x="21.7" y="195.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="24.7" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Value (3 samples, 0.02%)</title><rect x="22.1" y="195.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="25.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (27 samples, 0.21%)</title><rect x="22.4" y="195.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.4" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (27 samples, 0.21%)</title><rect x="22.4" y="179.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.4" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 0.16%)</title><rect x="22.4" y="163.0" width="1.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="25.4" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.05%)</title><rect x="24.3" y="163.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.3" y="174.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.05%)</title><rect x="24.3" y="147.0" width="0.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="27.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (70 samples, 0.54%)</title><rect x="24.9" y="195.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (52 samples, 0.40%)</title><rect x="24.9" y="179.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.9" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (35 samples, 0.27%)</title><rect x="24.9" y="163.0" width="3.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="27.9" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (17 samples, 0.13%)</title><rect x="28.1" y="163.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.1" y="174.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.13%)</title><rect x="28.1" y="147.0" width="1.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="31.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (18 samples, 0.14%)</title><rect x="29.6" y="179.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (18 samples, 0.14%)</title><rect x="29.6" y="163.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.6" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (14 samples, 0.11%)</title><rect x="29.6" y="147.0" width="1.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="32.6" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="30.9" y="147.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.9" y="158.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.03%)</title><rect x="30.9" y="131.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="33.9" y="142.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (29 samples, 0.23%)</title><rect x="31.3" y="259.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.3" y="270.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (29 samples, 0.23%)</title><rect x="31.3" y="243.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (29 samples, 0.23%)</title><rect x="31.3" y="227.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (29 samples, 0.23%)</title><rect x="31.3" y="211.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="34.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (29 samples, 0.23%)</title><rect x="31.3" y="195.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.3" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (29 samples, 0.23%)</title><rect x="31.3" y="179.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.3" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (29 samples, 0.23%)</title><rect x="31.3" y="163.0" width="2.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="34.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$74/813290444.apply (38 samples, 0.30%)</title><rect x="34.0" y="371.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (38 samples, 0.30%)</title><rect x="34.0" y="355.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.0" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (38 samples, 0.30%)</title><rect x="34.0" y="339.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="37.0" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (38 samples, 0.30%)</title><rect x="34.0" y="323.0" width="3.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="37.0" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (21 samples, 0.16%)</title><rect x="37.5" y="451.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.5" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (21 samples, 0.16%)</title><rect x="37.5" y="435.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$78/52772263.apply (21 samples, 0.16%)</title><rect x="37.5" y="419.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$iterator$4 (21 samples, 0.16%)</title><rect x="37.5" y="403.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (12 samples, 0.09%)</title><rect x="37.6" y="387.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.6" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (12 samples, 0.09%)</title><rect x="37.6" y="371.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.6" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (12 samples, 0.09%)</title><rect x="37.6" y="355.0" width="1.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="40.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Value.getData (7 samples, 0.05%)</title><rect x="38.7" y="387.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.7" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (7 samples, 0.05%)</title><rect x="38.7" y="371.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="41.7" y="382.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (7 samples, 0.05%)</title><rect x="38.7" y="355.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="41.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (7 samples, 0.05%)</title><rect x="39.4" y="451.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.4" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (7 samples, 0.05%)</title><rect x="39.4" y="435.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.4" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (7 samples, 0.05%)</title><rect x="39.4" y="419.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.4" y="430.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (7 samples, 0.05%)</title><rect x="39.4" y="403.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="42.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (5 samples, 0.04%)</title><rect x="40.0" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.0" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (5 samples, 0.04%)</title><rect x="40.0" y="435.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="43.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (5 samples, 0.04%)</title><rect x="40.0" y="419.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.0" y="430.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5 samples, 0.04%)</title><rect x="40.0" y="403.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="43.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.iterator (2,098 samples, 16.33%)</title><rect x="40.5" y="451.0" width="192.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.5" y="462.0">ru/mail/polis/dao/re1nex/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (3 samples, 0.02%)</title><rect x="40.5" y="435.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.5" y="446.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (3 samples, 0.02%)</title><rect x="40.5" y="419.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="43.5" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (3 samples, 0.02%)</title><rect x="40.8" y="435.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.8" y="446.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (3 samples, 0.02%)</title><rect x="40.8" y="419.0" width="0.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="43.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (5 samples, 0.04%)</title><rect x="41.0" y="435.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (5 samples, 0.04%)</title><rect x="41.0" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (5 samples, 0.04%)</title><rect x="41.0" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.0" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.04%)</title><rect x="41.0" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.0" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (5 samples, 0.04%)</title><rect x="41.0" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (3 samples, 0.02%)</title><rect x="41.2" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (3 samples, 0.02%)</title><rect x="41.2" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.2" y="350.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (3 samples, 0.02%)</title><rect x="41.2" y="323.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="44.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (2,087 samples, 16.24%)</title><rect x="41.5" y="435.0" width="191.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.5" y="446.0">ru/mail/polis/dao/re1nex/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (314 samples, 2.44%)</title><rect x="41.5" y="419.0" width="28.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.5" y="430.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (313 samples, 2.44%)</title><rect x="41.6" y="403.0" width="28.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.6" y="414.0">co..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (4 samples, 0.03%)</title><rect x="41.6" y="387.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="44.6" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (13 samples, 0.10%)</title><rect x="42.0" y="387.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.0" y="398.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (13 samples, 0.10%)</title><rect x="42.0" y="371.0" width="1.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="45.0" y="382.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (5 samples, 0.04%)</title><rect x="43.1" y="387.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="46.1" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (4 samples, 0.03%)</title><rect x="43.6" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="46.6" y="398.0"></text>
</g>
<g>
<title>java.lang.Object[] (4 samples, 0.03%)</title><rect x="43.6" y="371.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="46.6" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (267 samples, 2.08%)</title><rect x="44.0" y="387.0" width="24.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.0" y="398.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (267 samples, 2.08%)</title><rect x="44.0" y="371.0" width="24.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.0" y="382.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (8 samples, 0.06%)</title><rect x="44.0" y="355.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="47.0" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.06%)</title><rect x="44.0" y="339.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.0" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (8 samples, 0.06%)</title><rect x="44.0" y="323.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="47.0" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (259 samples, 2.02%)</title><rect x="44.7" y="355.0" width="23.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.7" y="366.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (259 samples, 2.02%)</title><rect x="44.7" y="339.0" width="23.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.7" y="350.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (259 samples, 2.02%)</title><rect x="44.7" y="323.0" width="23.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.7" y="334.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (259 samples, 2.02%)</title><rect x="44.7" y="307.0" width="23.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.7" y="318.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (237 samples, 1.84%)</title><rect x="44.7" y="291.0" width="21.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.7" y="302.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (237 samples, 1.84%)</title><rect x="44.7" y="275.0" width="21.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="47.7" y="286.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (237 samples, 1.84%)</title><rect x="44.7" y="259.0" width="21.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.7" y="270.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (237 samples, 1.84%)</title><rect x="44.7" y="243.0" width="21.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.7" y="254.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (96 samples, 0.75%)</title><rect x="44.7" y="227.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.7" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (66 samples, 0.51%)</title><rect x="44.7" y="211.0" width="6.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="47.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (30 samples, 0.23%)</title><rect x="50.8" y="211.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.8" y="222.0"></text>
</g>
<g>
<title>byte[] (30 samples, 0.23%)</title><rect x="50.8" y="195.0" width="2.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="53.8" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (11 samples, 0.09%)</title><rect x="53.5" y="227.0" width="1.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="56.5" y="238.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Value (6 samples, 0.05%)</title><rect x="54.5" y="227.0" width="0.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="57.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (33 samples, 0.26%)</title><rect x="55.1" y="227.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.1" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (33 samples, 0.26%)</title><rect x="55.1" y="211.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.1" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (23 samples, 0.18%)</title><rect x="55.1" y="195.0" width="2.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="58.1" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.08%)</title><rect x="57.2" y="195.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.2" y="206.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.08%)</title><rect x="57.2" y="179.0" width="0.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="60.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (91 samples, 0.71%)</title><rect x="58.1" y="227.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.1" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (57 samples, 0.44%)</title><rect x="58.1" y="211.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.1" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (34 samples, 0.26%)</title><rect x="58.1" y="195.0" width="3.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="61.1" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (23 samples, 0.18%)</title><rect x="61.2" y="195.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.2" y="206.0"></text>
</g>
<g>
<title>byte[] (23 samples, 0.18%)</title><rect x="61.2" y="179.0" width="2.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="64.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (34 samples, 0.26%)</title><rect x="63.3" y="211.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (34 samples, 0.26%)</title><rect x="63.3" y="195.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.3" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (24 samples, 0.19%)</title><rect x="63.3" y="179.0" width="2.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="66.3" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.08%)</title><rect x="65.6" y="179.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.6" y="190.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.08%)</title><rect x="65.6" y="163.0" width="0.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="68.6" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (22 samples, 0.17%)</title><rect x="66.5" y="291.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.5" y="302.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (22 samples, 0.17%)</title><rect x="66.5" y="275.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (22 samples, 0.17%)</title><rect x="66.5" y="259.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (22 samples, 0.17%)</title><rect x="66.5" y="243.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (22 samples, 0.17%)</title><rect x="66.5" y="227.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.5" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (22 samples, 0.17%)</title><rect x="66.5" y="211.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.5" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (22 samples, 0.17%)</title><rect x="66.5" y="195.0" width="2.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="69.5" y="206.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (20 samples, 0.16%)</title><rect x="68.5" y="387.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.5" y="398.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (20 samples, 0.16%)</title><rect x="68.5" y="371.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.5" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (20 samples, 0.16%)</title><rect x="68.5" y="355.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.5" y="366.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (19 samples, 0.15%)</title><rect x="68.6" y="339.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.6" y="350.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (4 samples, 0.03%)</title><rect x="68.6" y="323.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="71.6" y="334.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (14 samples, 0.11%)</title><rect x="69.0" y="323.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="72.0" y="334.0"></text>
</g>
<g>
<title>java.lang.Object[] (14 samples, 0.11%)</title><rect x="69.0" y="307.0" width="1.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="72.0" y="318.0"></text>
</g>
<g>
<title>java.util.ArrayList (3 samples, 0.02%)</title><rect x="70.3" y="419.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="73.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1,615 samples, 12.57%)</title><rect x="70.6" y="419.0" width="148.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="73.6" y="430.0">java/lang/Iterable...</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (5 samples, 0.04%)</title><rect x="70.6" y="403.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.6" y="414.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (5 samples, 0.04%)</title><rect x="70.6" y="387.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.6" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (5 samples, 0.04%)</title><rect x="70.6" y="371.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="73.6" y="382.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (5 samples, 0.04%)</title><rect x="70.6" y="355.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="73.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$72/1215814195.accept (1,610 samples, 12.53%)</title><rect x="71.1" y="403.0" width="147.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.1" y="414.0">ru/mail/polis/dao/r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIterator$5 (1,610 samples, 12.53%)</title><rect x="71.1" y="387.0" width="147.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="74.1" y="398.0">ru/mail/polis/dao/r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.iterator (1,610 samples, 12.53%)</title><rect x="71.1" y="371.0" width="147.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.1" y="382.0">ru/mail/polis/dao/r..</text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.SSTable$1 (9 samples, 0.07%)</title><rect x="71.1" y="355.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="74.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt; (1,601 samples, 12.46%)</title><rect x="71.9" y="355.0" width="147.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="74.9" y="366.0">ru/mail/polis/dao/r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.binarySearch (1,601 samples, 12.46%)</title><rect x="71.9" y="339.0" width="147.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.9" y="350.0">ru/mail/polis/dao/r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (1,601 samples, 12.46%)</title><rect x="71.9" y="323.0" width="147.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.9" y="334.0">ru/mail/polis/dao/r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,111 samples, 8.65%)</title><rect x="71.9" y="307.0" width="102.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.9" y="318.0">java/nio/Byt..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (689 samples, 5.36%)</title><rect x="71.9" y="291.0" width="63.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="74.9" y="302.0">java.ni..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (422 samples, 3.28%)</title><rect x="135.2" y="291.0" width="38.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.2" y="302.0">jav..</text>
</g>
<g>
<title>byte[] (422 samples, 3.28%)</title><rect x="135.2" y="275.0" width="38.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="138.2" y="286.0">byt..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (490 samples, 3.81%)</title><rect x="173.9" y="307.0" width="45.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.9" y="318.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (490 samples, 3.81%)</title><rect x="173.9" y="291.0" width="45.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="176.9" y="302.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (333 samples, 2.59%)</title><rect x="173.9" y="275.0" width="30.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="176.9" y="286.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (157 samples, 1.22%)</title><rect x="204.5" y="275.0" width="14.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.5" y="286.0"></text>
</g>
<g>
<title>byte[] (157 samples, 1.22%)</title><rect x="204.5" y="259.0" width="14.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="207.5" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5 samples, 0.04%)</title><rect x="218.9" y="419.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.9" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.04%)</title><rect x="218.9" y="403.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$72/1215814195.get$Lambda (5 samples, 0.04%)</title><rect x="218.9" y="387.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.9" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.NewDAO$$Lambda$72 (5 samples, 0.04%)</title><rect x="218.9" y="371.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="221.9" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.02%)</title><rect x="219.4" y="419.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.4" y="430.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.02%)</title><rect x="219.4" y="403.0" width="0.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="222.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (107 samples, 0.83%)</title><rect x="219.6" y="419.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.6" y="430.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (4 samples, 0.03%)</title><rect x="219.6" y="403.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="222.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (103 samples, 0.80%)</title><rect x="220.0" y="403.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.0" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (103 samples, 0.80%)</title><rect x="220.0" y="387.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.0" y="398.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (10 samples, 0.08%)</title><rect x="220.0" y="371.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.0" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (10 samples, 0.08%)</title><rect x="220.0" y="355.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.0" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (10 samples, 0.08%)</title><rect x="220.0" y="339.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.0" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.08%)</title><rect x="220.0" y="323.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.0" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.08%)</title><rect x="220.0" y="307.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.0" y="318.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (10 samples, 0.08%)</title><rect x="220.0" y="291.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.0" y="302.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (10 samples, 0.08%)</title><rect x="220.0" y="275.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (10 samples, 0.08%)</title><rect x="220.0" y="259.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (10 samples, 0.08%)</title><rect x="220.0" y="243.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (10 samples, 0.08%)</title><rect x="220.0" y="227.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.0" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (10 samples, 0.08%)</title><rect x="220.0" y="211.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.0" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (10 samples, 0.08%)</title><rect x="220.0" y="195.0" width="0.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="223.0" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (93 samples, 0.72%)</title><rect x="220.9" y="371.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.9" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (93 samples, 0.72%)</title><rect x="220.9" y="355.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.9" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (93 samples, 0.72%)</title><rect x="220.9" y="339.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.9" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (93 samples, 0.72%)</title><rect x="220.9" y="323.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.9" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (93 samples, 0.72%)</title><rect x="220.9" y="307.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (93 samples, 0.72%)</title><rect x="220.9" y="291.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.9" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (73 samples, 0.57%)</title><rect x="220.9" y="275.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (73 samples, 0.57%)</title><rect x="220.9" y="259.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (73 samples, 0.57%)</title><rect x="220.9" y="243.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (73 samples, 0.57%)</title><rect x="220.9" y="227.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (29 samples, 0.23%)</title><rect x="220.9" y="211.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.9" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (21 samples, 0.16%)</title><rect x="220.9" y="195.0" width="1.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="223.9" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.06%)</title><rect x="222.8" y="195.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.8" y="206.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.06%)</title><rect x="222.8" y="179.0" width="0.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="225.8" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (5 samples, 0.04%)</title><rect x="223.6" y="211.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="226.6" y="222.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Value (4 samples, 0.03%)</title><rect x="224.0" y="211.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="227.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (10 samples, 0.08%)</title><rect x="224.4" y="211.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.4" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (10 samples, 0.08%)</title><rect x="224.4" y="195.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.4" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5 samples, 0.04%)</title><rect x="224.4" y="179.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="227.4" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.04%)</title><rect x="224.9" y="179.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.9" y="190.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.04%)</title><rect x="224.9" y="163.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="227.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (25 samples, 0.19%)</title><rect x="225.3" y="211.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (18 samples, 0.14%)</title><rect x="225.3" y="195.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.3" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (12 samples, 0.09%)</title><rect x="225.3" y="179.0" width="1.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="228.3" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.05%)</title><rect x="226.4" y="179.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.4" y="190.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.05%)</title><rect x="226.4" y="163.0" width="0.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="229.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (7 samples, 0.05%)</title><rect x="227.0" y="195.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.0" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.05%)</title><rect x="227.0" y="179.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.0" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5 samples, 0.04%)</title><rect x="227.0" y="163.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="230.0" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (20 samples, 0.16%)</title><rect x="227.6" y="275.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.6" y="286.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (20 samples, 0.16%)</title><rect x="227.6" y="259.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (20 samples, 0.16%)</title><rect x="227.6" y="243.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (20 samples, 0.16%)</title><rect x="227.6" y="227.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (20 samples, 0.16%)</title><rect x="227.6" y="211.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.6" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (20 samples, 0.16%)</title><rect x="227.6" y="195.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.6" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (20 samples, 0.16%)</title><rect x="227.6" y="179.0" width="1.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="230.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (40 samples, 0.31%)</title><rect x="229.5" y="419.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.5" y="430.0"></text>
</g>
<g>
<title>java/util/Collection.stream (13 samples, 0.10%)</title><rect x="229.5" y="403.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (3 samples, 0.02%)</title><rect x="229.5" y="387.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.5" y="398.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (3 samples, 0.02%)</title><rect x="229.5" y="371.0" width="0.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="232.5" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (10 samples, 0.08%)</title><rect x="229.7" y="387.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.7" y="398.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (10 samples, 0.08%)</title><rect x="229.7" y="371.0" width="0.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="232.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (4 samples, 0.03%)</title><rect x="230.7" y="403.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (4 samples, 0.03%)</title><rect x="230.7" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (4 samples, 0.03%)</title><rect x="230.7" y="371.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.7" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (4 samples, 0.03%)</title><rect x="230.7" y="355.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="233.7" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (14 samples, 0.11%)</title><rect x="231.1" y="403.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="234.1" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (12 samples, 0.09%)</title><rect x="231.3" y="387.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.3" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5 samples, 0.04%)</title><rect x="231.3" y="371.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.3" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.04%)</title><rect x="231.3" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.3" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$68/89587797.get$Lambda (5 samples, 0.04%)</title><rect x="231.3" y="339.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.3" y="350.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$68 (5 samples, 0.04%)</title><rect x="231.3" y="323.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="234.3" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (7 samples, 0.05%)</title><rect x="231.7" y="371.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.7" y="382.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (7 samples, 0.05%)</title><rect x="231.7" y="355.0" width="0.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="234.7" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (8 samples, 0.06%)</title><rect x="232.4" y="403.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.4" y="414.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (8 samples, 0.06%)</title><rect x="232.4" y="387.0" width="0.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="235.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (60 samples, 0.47%)</title><rect x="233.1" y="467.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (60 samples, 0.47%)</title><rect x="233.1" y="451.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (17 samples, 0.13%)</title><rect x="233.1" y="435.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.1" y="446.0"></text>
</g>
<g>
<title>java.lang.Integer (17 samples, 0.13%)</title><rect x="233.1" y="419.0" width="1.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="236.1" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.isEmpty (16 samples, 0.12%)</title><rect x="234.7" y="435.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.7" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (16 samples, 0.12%)</title><rect x="234.7" y="419.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.7" y="430.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (16 samples, 0.12%)</title><rect x="234.7" y="403.0" width="1.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="237.7" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (27 samples, 0.21%)</title><rect x="236.2" y="435.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.2" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (27 samples, 0.21%)</title><rect x="236.2" y="419.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.2" y="430.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (27 samples, 0.21%)</title><rect x="236.2" y="403.0" width="2.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="239.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.byteBufferToByte (6 samples, 0.05%)</title><rect x="238.6" y="467.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="241.6" y="478.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.05%)</title><rect x="238.6" y="451.0" width="0.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="241.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.getByteBufferKey (109 samples, 0.85%)</title><rect x="239.2" y="467.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.2" y="478.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (81 samples, 0.63%)</title><rect x="239.2" y="451.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.2" y="462.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (81 samples, 0.63%)</title><rect x="239.2" y="435.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.2" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (81 samples, 0.63%)</title><rect x="239.2" y="419.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.2" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (81 samples, 0.63%)</title><rect x="239.2" y="403.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="242.2" y="414.0"></text>
</g>
<g>
<title>byte[] (81 samples, 0.63%)</title><rect x="239.2" y="387.0" width="7.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="242.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (28 samples, 0.22%)</title><rect x="246.6" y="451.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (28 samples, 0.22%)</title><rect x="246.6" y="435.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="249.6" y="446.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (28 samples, 0.22%)</title><rect x="246.6" y="419.0" width="2.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="249.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.proxy (6,109 samples, 47.54%)</title><rect x="249.2" y="467.0" width="560.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.2" y="478.0">ru/mail/polis/service/re1nex/AsyncTopologyService.proxy</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (27 samples, 0.21%)</title><rect x="249.2" y="451.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.2" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1024597427.invoke (27 samples, 0.21%)</title><rect x="249.2" y="435.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.2" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (27 samples, 0.21%)</title><rect x="249.2" y="419.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.2" y="430.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (12 samples, 0.09%)</title><rect x="249.2" y="403.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="252.2" y="414.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.09%)</title><rect x="249.2" y="387.0" width="1.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="252.2" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (15 samples, 0.12%)</title><rect x="250.3" y="403.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (15 samples, 0.12%)</title><rect x="250.3" y="387.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.3" y="398.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.12%)</title><rect x="250.3" y="371.0" width="1.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="253.3" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (5,964 samples, 46.41%)</title><rect x="251.7" y="451.0" width="547.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.7" y="462.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (5,964 samples, 46.41%)</title><rect x="251.7" y="435.0" width="547.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.7" y="446.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (15 samples, 0.12%)</title><rect x="251.7" y="419.0" width="1.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="254.7" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (5,413 samples, 42.12%)</title><rect x="253.1" y="419.0" width="497.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.1" y="430.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (1,011 samples, 7.87%)</title><rect x="253.1" y="403.0" width="92.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="256.1" y="414.0">byte[]</text>
</g>
<g>
<title>byte[] (4,402 samples, 34.25%)</title><rect x="345.9" y="403.0" width="404.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="348.9" y="414.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (444 samples, 3.45%)</title><rect x="750.1" y="419.0" width="40.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="753.1" y="430.0">one..</text>
</g>
<g>
<title>byte[] (25 samples, 0.19%)</title><rect x="750.1" y="403.0" width="2.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="753.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (39 samples, 0.30%)</title><rect x="752.4" y="403.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="755.4" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (39 samples, 0.30%)</title><rect x="752.4" y="387.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="755.4" y="398.0"></text>
</g>
<g>
<title>java.lang.String (17 samples, 0.13%)</title><rect x="752.4" y="371.0" width="1.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="755.4" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (22 samples, 0.17%)</title><rect x="753.9" y="371.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="756.9" y="382.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.17%)</title><rect x="753.9" y="355.0" width="2.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="756.9" y="366.0"></text>
</g>
<g>
<title>one.nio.http.Response (14 samples, 0.11%)</title><rect x="756.0" y="403.0" width="1.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="759.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (319 samples, 2.48%)</title><rect x="757.2" y="403.0" width="29.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.2" y="414.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (319 samples, 2.48%)</title><rect x="757.2" y="387.0" width="29.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="760.2" y="398.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (319 samples, 2.48%)</title><rect x="757.2" y="371.0" width="29.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="760.2" y="382.0">on..</text>
</g>
<g>
<title>char[] (166 samples, 1.29%)</title><rect x="757.2" y="355.0" width="15.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="760.2" y="366.0"></text>
</g>
<g>
<title>java.lang.String (49 samples, 0.38%)</title><rect x="772.5" y="355.0" width="4.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="775.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (104 samples, 0.81%)</title><rect x="777.0" y="355.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="780.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (104 samples, 0.81%)</title><rect x="777.0" y="339.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (104 samples, 0.81%)</title><rect x="777.0" y="323.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="780.0" y="334.0"></text>
</g>
<g>
<title>byte[] (104 samples, 0.81%)</title><rect x="777.0" y="307.0" width="9.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="780.0" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (16 samples, 0.12%)</title><rect x="786.5" y="403.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="789.5" y="414.0"></text>
</g>
<g>
<title>java.lang.String[] (16 samples, 0.12%)</title><rect x="786.5" y="387.0" width="1.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="789.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (31 samples, 0.24%)</title><rect x="788.0" y="403.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (31 samples, 0.24%)</title><rect x="788.0" y="387.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.0" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (31 samples, 0.24%)</title><rect x="788.0" y="371.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.0" y="382.0"></text>
</g>
<g>
<title>java.lang.String (16 samples, 0.12%)</title><rect x="788.0" y="355.0" width="1.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="791.0" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (15 samples, 0.12%)</title><rect x="789.5" y="355.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="792.5" y="366.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.12%)</title><rect x="789.5" y="339.0" width="1.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="792.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (43 samples, 0.33%)</title><rect x="790.9" y="419.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="793.9" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (43 samples, 0.33%)</title><rect x="790.9" y="403.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="793.9" y="414.0"></text>
</g>
<g>
<title>byte[] (43 samples, 0.33%)</title><rect x="790.9" y="387.0" width="3.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="793.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (28 samples, 0.22%)</title><rect x="794.8" y="419.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="797.8" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (28 samples, 0.22%)</title><rect x="794.8" y="403.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.8" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (28 samples, 0.22%)</title><rect x="794.8" y="387.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="797.8" y="398.0"></text>
</g>
<g>
<title>java.lang.String (16 samples, 0.12%)</title><rect x="794.8" y="371.0" width="1.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="797.8" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (12 samples, 0.09%)</title><rect x="796.3" y="371.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.3" y="382.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.09%)</title><rect x="796.3" y="355.0" width="1.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="799.3" y="366.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (21 samples, 0.16%)</title><rect x="797.4" y="419.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="800.4" y="430.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (21 samples, 0.16%)</title><rect x="797.4" y="403.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.4" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (21 samples, 0.16%)</title><rect x="797.4" y="387.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.4" y="398.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (21 samples, 0.16%)</title><rect x="797.4" y="371.0" width="1.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="800.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (118 samples, 0.92%)</title><rect x="799.3" y="451.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.3" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (118 samples, 0.92%)</title><rect x="799.3" y="435.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="802.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (89 samples, 0.69%)</title><rect x="799.3" y="419.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="802.3" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (89 samples, 0.69%)</title><rect x="799.3" y="403.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="802.3" y="414.0"></text>
</g>
<g>
<title>byte[] (89 samples, 0.69%)</title><rect x="799.3" y="387.0" width="8.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="802.3" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (29 samples, 0.23%)</title><rect x="807.5" y="419.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.5" y="430.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (29 samples, 0.23%)</title><rect x="807.5" y="403.0" width="2.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="810.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.sendResponse (24 samples, 0.19%)</title><rect x="810.1" y="467.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.1" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (24 samples, 0.19%)</title><rect x="810.1" y="451.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="813.1" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (24 samples, 0.19%)</title><rect x="810.1" y="435.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="813.1" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (20 samples, 0.16%)</title><rect x="810.1" y="419.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.1" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (20 samples, 0.16%)</title><rect x="810.1" y="403.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="813.1" y="414.0"></text>
</g>
<g>
<title>byte[] (20 samples, 0.16%)</title><rect x="810.1" y="387.0" width="1.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="813.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 0.03%)</title><rect x="812.0" y="419.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="815.0" y="430.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (4 samples, 0.03%)</title><rect x="812.0" y="403.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="815.0" y="414.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (4,113 samples, 32.01%)</title><rect x="812.3" y="547.0" width="377.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="815.3" y="558.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (184 samples, 1.43%)</title><rect x="812.3" y="531.0" width="16.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="815.3" y="542.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (184 samples, 1.43%)</title><rect x="812.3" y="515.0" width="16.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="815.3" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (3,929 samples, 30.57%)</title><rect x="829.2" y="531.0" width="360.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="832.2" y="542.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,929 samples, 30.57%)</title><rect x="829.2" y="515.0" width="360.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="832.2" y="526.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,929 samples, 30.57%)</title><rect x="829.2" y="499.0" width="360.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.2" y="510.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,410 samples, 10.97%)</title><rect x="829.2" y="483.0" width="129.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="832.2" y="494.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,410 samples, 10.97%)</title><rect x="829.2" y="467.0" width="129.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="832.2" y="478.0">one/nio/http/Htt..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (1,115 samples, 8.68%)</title><rect x="829.2" y="451.0" width="102.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.2" y="462.0">RequestHandl..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (286 samples, 2.23%)</title><rect x="829.2" y="435.0" width="26.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.2" y="446.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (286 samples, 2.23%)</title><rect x="829.2" y="419.0" width="26.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="832.2" y="430.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (286 samples, 2.23%)</title><rect x="829.2" y="403.0" width="26.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="832.2" y="414.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (286 samples, 2.23%)</title><rect x="829.2" y="387.0" width="26.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="832.2" y="398.0">j..</text>
</g>
<g>
<title>java.lang.String (134 samples, 1.04%)</title><rect x="829.2" y="371.0" width="12.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="832.2" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (152 samples, 1.18%)</title><rect x="841.5" y="371.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.5" y="382.0"></text>
</g>
<g>
<title>byte[] (152 samples, 1.18%)</title><rect x="841.5" y="355.0" width="14.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="844.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.get (829 samples, 6.45%)</title><rect x="855.5" y="435.0" width="76.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="858.5" y="446.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (173 samples, 1.35%)</title><rect x="855.5" y="419.0" width="15.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.5" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (173 samples, 1.35%)</title><rect x="855.5" y="403.0" width="15.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="858.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$71/1647560262.get$Lambda (173 samples, 1.35%)</title><rect x="855.5" y="387.0" width="15.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="858.5" y="398.0"></text>
</g>
<g>
<title>ru.mail.polis.service.re1nex.AsyncTopologyService$$Lambda$71 (173 samples, 1.35%)</title><rect x="855.5" y="371.0" width="15.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="858.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.executeTask (656 samples, 5.10%)</title><rect x="871.4" y="419.0" width="60.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.4" y="430.0">ru/mai..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (552 samples, 4.30%)</title><rect x="871.4" y="403.0" width="50.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="874.4" y="414.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (552 samples, 4.30%)</title><rect x="871.4" y="387.0" width="50.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="874.4" y="398.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (552 samples, 4.30%)</title><rect x="871.4" y="371.0" width="50.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="874.4" y="382.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (525 samples, 4.09%)</title><rect x="871.6" y="355.0" width="48.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="874.6" y="366.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (525 samples, 4.09%)</title><rect x="871.6" y="339.0" width="48.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="874.6" y="350.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (525 samples, 4.09%)</title><rect x="871.6" y="323.0" width="48.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="874.6" y="334.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (525 samples, 4.09%)</title><rect x="871.6" y="307.0" width="48.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="874.6" y="318.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (525 samples, 4.09%)</title><rect x="871.6" y="291.0" width="48.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="874.6" y="302.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (525 samples, 4.09%)</title><rect x="871.6" y="275.0" width="48.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="874.6" y="286.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (525 samples, 4.09%)</title><rect x="871.6" y="259.0" width="48.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="874.6" y="270.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (422 samples, 3.28%)</title><rect x="871.6" y="243.0" width="38.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.6" y="254.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (422 samples, 3.28%)</title><rect x="871.6" y="227.0" width="38.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="874.6" y="238.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.convert (297 samples, 2.31%)</title><rect x="871.6" y="211.0" width="27.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="874.6" y="222.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.throwableProxyToString (297 samples, 2.31%)</title><rect x="871.6" y="195.0" width="27.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="874.6" y="206.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.recursiveAppend (219 samples, 1.70%)</title><rect x="871.6" y="179.0" width="20.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="874.6" y="190.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.subjoinSTEPArray (219 samples, 1.70%)</title><rect x="871.6" y="163.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="874.6" y="174.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/StackTraceElementProxy.toString (219 samples, 1.70%)</title><rect x="871.6" y="147.0" width="20.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="874.6" y="158.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/StackTraceElementProxy.getSTEAsString (219 samples, 1.70%)</title><rect x="871.6" y="131.0" width="20.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="874.6" y="142.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (8 samples, 0.06%)</title><rect x="871.6" y="115.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="874.6" y="126.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.toString (143 samples, 1.11%)</title><rect x="872.3" y="115.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="875.3" y="126.0"></text>
</g>
<g>
<title>byte[] (25 samples, 0.19%)</title><rect x="872.3" y="99.0" width="2.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="875.3" y="110.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (5 samples, 0.04%)</title><rect x="874.6" y="99.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="877.6" y="110.0"></text>
</g>
<g>
<title>java.lang.String (15 samples, 0.12%)</title><rect x="875.1" y="99.0" width="1.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="878.1" y="110.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (11 samples, 0.09%)</title><rect x="876.4" y="99.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="879.4" y="110.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (11 samples, 0.09%)</title><rect x="876.4" y="83.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="879.4" y="94.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.09%)</title><rect x="876.4" y="67.0" width="1.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="879.4" y="78.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (52 samples, 0.40%)</title><rect x="877.4" y="99.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="880.4" y="110.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (52 samples, 0.40%)</title><rect x="877.4" y="83.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="880.4" y="94.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (52 samples, 0.40%)</title><rect x="877.4" y="67.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="880.4" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (52 samples, 0.40%)</title><rect x="877.4" y="51.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="880.4" y="62.0"></text>
</g>
<g>
<title>byte[] (51 samples, 0.40%)</title><rect x="877.4" y="35.0" width="4.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="880.4" y="46.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (35 samples, 0.27%)</title><rect x="882.2" y="99.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="885.2" y="110.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (35 samples, 0.27%)</title><rect x="882.2" y="83.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="885.2" y="94.0"></text>
</g>
<g>
<title>java.lang.String (8 samples, 0.06%)</title><rect x="882.2" y="67.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="885.2" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (27 samples, 0.21%)</title><rect x="882.9" y="67.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="885.9" y="78.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.20%)</title><rect x="882.9" y="51.0" width="2.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="885.9" y="62.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (13 samples, 0.10%)</title><rect x="885.4" y="115.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="888.4" y="126.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (13 samples, 0.10%)</title><rect x="885.4" y="99.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="888.4" y="110.0"></text>
</g>
<g>
<title>byte[] (13 samples, 0.10%)</title><rect x="885.4" y="83.0" width="1.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="888.4" y="94.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 0.17%)</title><rect x="886.6" y="115.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="889.6" y="126.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (22 samples, 0.17%)</title><rect x="886.6" y="99.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="889.6" y="110.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (22 samples, 0.17%)</title><rect x="886.6" y="83.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="889.6" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (22 samples, 0.17%)</title><rect x="886.6" y="67.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="889.6" y="78.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.17%)</title><rect x="886.6" y="51.0" width="2.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="889.6" y="62.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (33 samples, 0.26%)</title><rect x="888.6" y="115.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="891.6" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (33 samples, 0.26%)</title><rect x="888.6" y="99.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="891.6" y="110.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.09%)</title><rect x="888.6" y="83.0" width="1.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="891.6" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (21 samples, 0.16%)</title><rect x="889.7" y="83.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="892.7" y="94.0"></text>
</g>
<g>
<title>byte[] (21 samples, 0.16%)</title><rect x="889.7" y="67.0" width="2.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="892.7" y="78.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (51 samples, 0.40%)</title><rect x="891.8" y="179.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="894.8" y="190.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (51 samples, 0.40%)</title><rect x="891.8" y="163.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="894.8" y="174.0"></text>
</g>
<g>
<title>byte[] (49 samples, 0.38%)</title><rect x="891.9" y="147.0" width="4.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="894.9" y="158.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (26 samples, 0.20%)</title><rect x="896.4" y="179.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="899.4" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (26 samples, 0.20%)</title><rect x="896.4" y="163.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="899.4" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (26 samples, 0.20%)</title><rect x="896.4" y="147.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="899.4" y="158.0"></text>
</g>
<g>
<title>byte[] (25 samples, 0.19%)</title><rect x="896.5" y="131.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="899.5" y="142.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (54 samples, 0.42%)</title><rect x="898.8" y="211.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="901.8" y="222.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (54 samples, 0.42%)</title><rect x="898.8" y="195.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="901.8" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (54 samples, 0.42%)</title><rect x="898.8" y="179.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="901.8" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (54 samples, 0.42%)</title><rect x="898.8" y="163.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="901.8" y="174.0"></text>
</g>
<g>
<title>byte[] (6 samples, 0.05%)</title><rect x="898.8" y="147.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="901.8" y="158.0"></text>
</g>
<g>
<title>byte[] (48 samples, 0.37%)</title><rect x="899.4" y="147.0" width="4.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="902.4" y="158.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (71 samples, 0.55%)</title><rect x="903.8" y="211.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="906.8" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (71 samples, 0.55%)</title><rect x="903.8" y="195.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="906.8" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (70 samples, 0.54%)</title><rect x="903.9" y="179.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="906.9" y="190.0"></text>
</g>
<g>
<title>byte[] (68 samples, 0.53%)</title><rect x="904.1" y="163.0" width="6.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="907.1" y="174.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.convertToBytes (103 samples, 0.80%)</title><rect x="910.3" y="243.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="913.3" y="254.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (103 samples, 0.80%)</title><rect x="910.3" y="227.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="913.3" y="238.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (103 samples, 0.80%)</title><rect x="910.3" y="211.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="913.3" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (103 samples, 0.80%)</title><rect x="910.3" y="195.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="913.3" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (103 samples, 0.80%)</title><rect x="910.3" y="179.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="913.3" y="190.0"></text>
</g>
<g>
<title>byte[] (102 samples, 0.79%)</title><rect x="910.4" y="163.0" width="9.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="913.4" y="174.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (25 samples, 0.19%)</title><rect x="919.8" y="355.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="922.8" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/ThrowableProxy.&lt;init&gt; (24 samples, 0.19%)</title><rect x="919.9" y="339.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="922.9" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/ThrowableProxyUtil.steArrayToStepArray (6 samples, 0.05%)</title><rect x="919.9" y="323.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="922.9" y="334.0"></text>
</g>
<g>
<title>ch.qos.logback.classic.spi.StackTraceElementProxy (5 samples, 0.04%)</title><rect x="920.0" y="307.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="923.0" y="318.0"></text>
</g>
<g>
<title>java/lang/Throwable.getStackTrace (18 samples, 0.14%)</title><rect x="920.4" y="323.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="923.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Throwable.getOurStackTrace (18 samples, 0.14%)</title><rect x="920.4" y="307.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.4" y="318.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.of (18 samples, 0.14%)</title><rect x="920.4" y="291.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="923.4" y="302.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement (16 samples, 0.12%)</title><rect x="920.6" y="275.0" width="1.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="923.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (90 samples, 0.70%)</title><rect x="922.1" y="403.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="925.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.reject (89 samples, 0.69%)</title><rect x="922.2" y="387.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="925.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$AbortPolicy.rejectedExecution (89 samples, 0.69%)</title><rect x="922.2" y="371.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="925.2" y="382.0"></text>
</g>
<g>
<title>java/lang/Object.toString (12 samples, 0.09%)</title><rect x="922.3" y="355.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="925.3" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 0.06%)</title><rect x="922.5" y="339.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="925.5" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.06%)</title><rect x="922.5" y="323.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="925.5" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.06%)</title><rect x="922.5" y="307.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="925.5" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.06%)</title><rect x="922.5" y="291.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="925.5" y="302.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.06%)</title><rect x="922.5" y="275.0" width="0.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="925.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 0.12%)</title><rect x="923.5" y="355.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="926.5" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 0.12%)</title><rect x="923.5" y="339.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="926.5" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (15 samples, 0.12%)</title><rect x="923.5" y="323.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="926.5" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 0.12%)</title><rect x="923.5" y="307.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.5" y="318.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.06%)</title><rect x="923.5" y="291.0" width="0.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="926.5" y="302.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.05%)</title><rect x="924.3" y="291.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="927.3" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (15 samples, 0.12%)</title><rect x="924.9" y="355.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="927.9" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (15 samples, 0.12%)</title><rect x="924.9" y="339.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="927.9" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (15 samples, 0.12%)</title><rect x="924.9" y="323.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="927.9" y="334.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.06%)</title><rect x="924.9" y="307.0" width="0.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="927.9" y="318.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.05%)</title><rect x="925.6" y="307.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="928.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/RejectedExecutionException.&lt;init&gt; (19 samples, 0.15%)</title><rect x="926.3" y="355.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="929.3" y="366.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (19 samples, 0.15%)</title><rect x="926.3" y="339.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="929.3" y="350.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (19 samples, 0.15%)</title><rect x="926.3" y="323.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="929.3" y="334.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (19 samples, 0.15%)</title><rect x="926.3" y="307.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="929.3" y="318.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (19 samples, 0.15%)</title><rect x="926.3" y="291.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="929.3" y="302.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (19 samples, 0.15%)</title><rect x="926.3" y="275.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="929.3" y="286.0"></text>
</g>
<g>
<title>int[] (6 samples, 0.05%)</title><rect x="926.3" y="259.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="929.3" y="270.0"></text>
</g>
<g>
<title>java.lang.Object[] (4 samples, 0.03%)</title><rect x="926.9" y="259.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="929.9" y="270.0"></text>
</g>
<g>
<title>long[] (3 samples, 0.02%)</title><rect x="927.4" y="259.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="930.4" y="270.0"></text>
</g>
<g>
<title>short[] (4 samples, 0.03%)</title><rect x="927.7" y="259.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="930.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.toString (25 samples, 0.19%)</title><rect x="928.0" y="355.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="931.0" y="366.0"></text>
</g>
<g>
<title>java/lang/Object.toString (5 samples, 0.04%)</title><rect x="928.0" y="339.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="931.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 0.08%)</title><rect x="928.6" y="339.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="931.6" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.08%)</title><rect x="928.6" y="323.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="931.6" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.08%)</title><rect x="928.6" y="307.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="931.6" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.08%)</title><rect x="928.6" y="291.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="931.6" y="302.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.05%)</title><rect x="928.6" y="275.0" width="0.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="931.6" y="286.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.02%)</title><rect x="929.2" y="275.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="932.2" y="286.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (9 samples, 0.07%)</title><rect x="929.5" y="339.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.5" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.07%)</title><rect x="929.5" y="323.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="932.5" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (8 samples, 0.06%)</title><rect x="929.6" y="307.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.6" y="318.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.06%)</title><rect x="929.6" y="291.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="932.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.sendErrorResponse (14 samples, 0.11%)</title><rect x="930.3" y="403.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="933.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (13 samples, 0.10%)</title><rect x="930.3" y="387.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="933.3" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13 samples, 0.10%)</title><rect x="930.3" y="371.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="933.3" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.06%)</title><rect x="930.3" y="355.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="933.3" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (8 samples, 0.06%)</title><rect x="930.3" y="339.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="933.3" y="350.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.06%)</title><rect x="930.3" y="323.0" width="0.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="933.3" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (5 samples, 0.04%)</title><rect x="931.1" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="934.1" y="366.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (5 samples, 0.04%)</title><rect x="931.1" y="339.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="934.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (295 samples, 2.30%)</title><rect x="931.6" y="451.0" width="27.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="934.6" y="462.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (295 samples, 2.30%)</title><rect x="931.6" y="435.0" width="27.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="934.6" y="446.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (295 samples, 2.30%)</title><rect x="931.6" y="419.0" width="27.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="934.6" y="430.0">j..</text>
</g>
<g>
<title>java.lang.String (146 samples, 1.14%)</title><rect x="931.6" y="403.0" width="13.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="934.6" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (149 samples, 1.16%)</title><rect x="945.0" y="403.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="948.0" y="414.0"></text>
</g>
<g>
<title>byte[] (149 samples, 1.16%)</title><rect x="945.0" y="387.0" width="13.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="948.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1,493 samples, 11.62%)</title><rect x="958.7" y="483.0" width="137.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="961.7" y="494.0">one/nio/http/Http..</text>
</g>
<g>
<title>one.nio.http.Request (194 samples, 1.51%)</title><rect x="958.7" y="467.0" width="17.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="961.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (502 samples, 3.91%)</title><rect x="976.5" y="467.0" width="46.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="979.5" y="478.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (488 samples, 3.80%)</title><rect x="976.5" y="451.0" width="44.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="979.5" y="462.0">java..</text>
</g>
<g>
<title>java.lang.String[] (14 samples, 0.11%)</title><rect x="1021.3" y="451.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1024.3" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (797 samples, 6.20%)</title><rect x="1022.6" y="467.0" width="73.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1025.6" y="478.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (797 samples, 6.20%)</title><rect x="1022.6" y="451.0" width="73.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1025.6" y="462.0">one/nio/..</text>
</g>
<g>
<title>char[] (425 samples, 3.31%)</title><rect x="1022.6" y="435.0" width="39.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1025.6" y="446.0">cha..</text>
</g>
<g>
<title>java.lang.String (155 samples, 1.21%)</title><rect x="1061.6" y="435.0" width="14.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1064.6" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (217 samples, 1.69%)</title><rect x="1075.9" y="435.0" width="19.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.9" y="446.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (217 samples, 1.69%)</title><rect x="1075.9" y="419.0" width="19.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1078.9" y="430.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (217 samples, 1.69%)</title><rect x="1075.9" y="403.0" width="19.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1078.9" y="414.0"></text>
</g>
<g>
<title>byte[] (217 samples, 1.69%)</title><rect x="1075.9" y="387.0" width="19.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1078.9" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,026 samples, 7.98%)</title><rect x="1095.8" y="483.0" width="94.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1098.8" y="494.0">one/nio/uti..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,026 samples, 7.98%)</title><rect x="1095.8" y="467.0" width="94.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1098.8" y="478.0">one/nio/uti..</text>
</g>
<g>
<title>char[] (484 samples, 3.77%)</title><rect x="1095.8" y="451.0" width="44.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1098.8" y="462.0">char[]</text>
</g>
<g>
<title>java.lang.String (191 samples, 1.49%)</title><rect x="1140.2" y="451.0" width="17.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1143.2" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (351 samples, 2.73%)</title><rect x="1157.8" y="451.0" width="32.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1160.8" y="462.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (351 samples, 2.73%)</title><rect x="1157.8" y="435.0" width="32.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1160.8" y="446.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (351 samples, 2.73%)</title><rect x="1157.8" y="419.0" width="32.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1160.8" y="430.0">ja..</text>
</g>
<g>
<title>byte[] (351 samples, 2.73%)</title><rect x="1157.8" y="403.0" width="32.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1160.8" y="414.0">by..</text>
</g>
</g>
</svg>
