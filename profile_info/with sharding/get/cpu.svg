<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="421"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="421"> </text>
<g id="frames">
<g>
<title>all (186 samples, 100.00%)</title><rect x="10.0" y="387.0" width="1180.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="13.0" y="398.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.54%)</title><rect x="10.0" y="371.0" width="6.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.54%)</title><rect x="10.0" y="355.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 2.69%)</title><rect x="16.3" y="371.0" width="31.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="19.3" y="382.0">[u..</text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.54%)</title><rect x="16.3" y="355.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="19.3" y="366.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.54%)</title><rect x="22.7" y="355.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.7" y="366.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.54%)</title><rect x="29.0" y="355.0" width="6.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="32.0" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (2 samples, 1.08%)</title><rect x="35.4" y="355.0" width="12.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="38.4" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 1.08%)</title><rect x="35.4" y="339.0" width="12.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="38.4" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.54%)</title><rect x="41.7" y="323.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="44.7" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.run (103 samples, 55.38%)</title><rect x="48.1" y="371.0" width="653.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.1" y="382.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (103 samples, 55.38%)</title><rect x="48.1" y="355.0" width="653.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.1" y="366.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (103 samples, 55.38%)</title><rect x="48.1" y="339.0" width="653.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.1" y="350.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (50 samples, 26.88%)</title><rect x="54.4" y="323.0" width="317.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="57.4" y="334.0">java/util/concurrent/ThreadPoolExecutor.get..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (46 samples, 24.73%)</title><rect x="73.4" y="307.0" width="291.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.4" y="318.0">java/util/concurrent/ArrayBlockingQueue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (42 samples, 22.58%)</title><rect x="73.4" y="291.0" width="266.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.4" y="302.0">java/util/concurrent/locks/AbstractQ..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (40 samples, 21.51%)</title><rect x="86.1" y="275.0" width="253.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.1" y="286.0">java/util/concurrent/locks/LockSup..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (38 samples, 20.43%)</title><rect x="98.8" y="259.0" width="241.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="101.8" y="270.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (28 samples, 15.05%)</title><rect x="98.8" y="243.0" width="177.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="101.8" y="254.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.54%)</title><rect x="98.8" y="227.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="101.8" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 4.84%)</title><rect x="105.2" y="227.0" width="57.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="108.2" y="238.0">Parker..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.54%)</title><rect x="136.9" y="211.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="139.9" y="222.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 1.61%)</title><rect x="143.2" y="211.0" width="19.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="146.2" y="222.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (14 samples, 7.53%)</title><rect x="162.3" y="227.0" width="88.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="165.3" y="238.0">__pthread_..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.54%)</title><rect x="251.1" y="227.0" width="6.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="254.1" y="238.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.54%)</title><rect x="257.4" y="227.0" width="6.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="260.4" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 1.08%)</title><rect x="263.8" y="227.0" width="12.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="266.8" y="238.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 4.84%)</title><rect x="276.5" y="243.0" width="57.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="279.5" y="254.0">[unkno..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.54%)</title><rect x="276.5" y="227.0" width="6.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="279.5" y="238.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.54%)</title><rect x="282.8" y="227.0" width="6.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="285.8" y="238.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 2.69%)</title><rect x="289.1" y="227.0" width="31.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="292.1" y="238.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 1.08%)</title><rect x="320.9" y="227.0" width="12.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="323.9" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.54%)</title><rect x="333.5" y="243.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="336.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 2.15%)</title><rect x="339.9" y="291.0" width="25.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.9" y="302.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 2.15%)</title><rect x="339.9" y="275.0" width="25.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.9" y="286.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 2.15%)</title><rect x="339.9" y="259.0" width="25.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="342.9" y="270.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 2.15%)</title><rect x="339.9" y="243.0" width="25.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="342.9" y="254.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 1.08%)</title><rect x="352.6" y="227.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.6" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.54%)</title><rect x="352.6" y="211.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="355.6" y="222.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.54%)</title><rect x="358.9" y="211.0" width="6.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="361.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.54%)</title><rect x="365.3" y="307.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="368.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService$$Lambda$69/108509771.run (52 samples, 27.96%)</title><rect x="371.6" y="323.0" width="329.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.6" y="334.0">ru/mail/polis/service/re1nex/AsyncTopologySer..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.lambda$get$1 (52 samples, 27.96%)</title><rect x="371.6" y="307.0" width="329.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="374.6" y="318.0">ru/mail/polis/service/re1nex/AsyncTopologySer..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (32 samples, 17.20%)</title><rect x="371.6" y="291.0" width="203.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.6" y="302.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1 samples, 0.54%)</title><rect x="371.6" y="275.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.6" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.54%)</title><rect x="371.6" y="259.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="374.6" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.54%)</title><rect x="371.6" y="243.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="374.6" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1 samples, 0.54%)</title><rect x="371.6" y="227.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="374.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.54%)</title><rect x="371.6" y="211.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="374.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$122/1776747945.apply (1 samples, 0.54%)</title><rect x="371.6" y="195.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.54%)</title><rect x="371.6" y="179.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.6" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.54%)</title><rect x="371.6" y="163.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="374.6" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.54%)</title><rect x="371.6" y="147.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="374.6" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.54%)</title><rect x="371.6" y="131.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="374.6" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.54%)</title><rect x="371.6" y="115.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.6" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.54%)</title><rect x="371.6" y="99.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.6" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.54%)</title><rect x="371.6" y="83.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="374.6" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.54%)</title><rect x="371.6" y="67.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.6" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (1 samples, 0.54%)</title><rect x="378.0" y="275.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.0" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (1 samples, 0.54%)</title><rect x="378.0" y="259.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.iterator (30 samples, 16.13%)</title><rect x="384.3" y="275.0" width="190.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.3" y="286.0">ru/mail/polis/dao/re1nex/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.54%)</title><rect x="390.6" y="259.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="393.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (28 samples, 15.05%)</title><rect x="397.0" y="259.0" width="177.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="400.0" y="270.0">ru/mail/polis/dao/re1ne..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (5 samples, 2.69%)</title><rect x="403.3" y="243.0" width="31.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="254.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (5 samples, 2.69%)</title><rect x="403.3" y="227.0" width="31.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="406.3" y="238.0">co..</text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.54%)</title><rect x="416.0" y="211.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.0" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (1 samples, 0.54%)</title><rect x="416.0" y="195.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.0" y="206.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.54%)</title><rect x="416.0" y="179.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.0" y="190.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (2 samples, 1.08%)</title><rect x="422.4" y="211.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.4" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (2 samples, 1.08%)</title><rect x="422.4" y="195.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.4" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (2 samples, 1.08%)</title><rect x="422.4" y="179.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.4" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (2 samples, 1.08%)</title><rect x="422.4" y="163.0" width="12.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="425.4" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$109/1770332374.getAsBoolean (2 samples, 1.08%)</title><rect x="422.4" y="147.0" width="12.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.4" y="158.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (2 samples, 1.08%)</title><rect x="422.4" y="131.0" width="12.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="425.4" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (1 samples, 0.54%)</title><rect x="428.7" y="115.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.7" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.54%)</title><rect x="428.7" y="99.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="431.7" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.54%)</title><rect x="428.7" y="83.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.7" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (1 samples, 0.54%)</title><rect x="428.7" y="67.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="431.7" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.54%)</title><rect x="428.7" y="51.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="431.7" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (1 samples, 0.54%)</title><rect x="435.1" y="243.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1 samples, 0.54%)</title><rect x="435.1" y="227.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="438.1" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.54%)</title><rect x="435.1" y="211.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.1" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.54%)</title><rect x="435.1" y="195.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.1" y="206.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1 samples, 0.54%)</title><rect x="435.1" y="179.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="438.1" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1 samples, 0.54%)</title><rect x="435.1" y="163.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="438.1" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1 samples, 0.54%)</title><rect x="435.1" y="147.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.1" y="158.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.54%)</title><rect x="435.1" y="131.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="438.1" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$109/1770332374.getAsBoolean (1 samples, 0.54%)</title><rect x="435.1" y="115.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.1" y="126.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (1 samples, 0.54%)</title><rect x="435.1" y="99.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.1" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (1 samples, 0.54%)</title><rect x="435.1" y="83.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.1" y="94.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.54%)</title><rect x="435.1" y="67.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.1" y="78.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$101/1964553633.accept (1 samples, 0.54%)</title><rect x="435.1" y="51.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="438.1" y="62.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.accept (1 samples, 0.54%)</title><rect x="435.1" y="35.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="438.1" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (21 samples, 11.29%)</title><rect x="441.4" y="243.0" width="133.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="444.4" y="254.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/util/Collection.stream (19 samples, 10.22%)</title><rect x="441.4" y="227.0" width="120.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.4" y="238.0">java/util/Colle..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (19 samples, 10.22%)</title><rect x="441.4" y="211.0" width="120.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="444.4" y="222.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (19 samples, 10.22%)</title><rect x="441.4" y="195.0" width="120.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.4" y="206.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (19 samples, 10.22%)</title><rect x="441.4" y="179.0" width="120.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="444.4" y="190.0">java/util/concu..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.54%)</title><rect x="447.7" y="163.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="450.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (17 samples, 9.14%)</title><rect x="454.1" y="163.0" width="107.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="457.1" y="174.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (17 samples, 9.14%)</title><rect x="454.1" y="147.0" width="107.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="457.1" y="158.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (16 samples, 8.60%)</title><rect x="460.4" y="131.0" width="101.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="463.4" y="142.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (5 samples, 2.69%)</title><rect x="530.2" y="115.0" width="31.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="533.2" y="126.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 2.69%)</title><rect x="530.2" y="99.0" width="31.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.2" y="110.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 2.69%)</title><rect x="530.2" y="83.0" width="31.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="533.2" y="94.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 2.69%)</title><rect x="530.2" y="67.0" width="31.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="533.2" y="78.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.54%)</title><rect x="536.6" y="51.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="539.6" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.54%)</title><rect x="536.6" y="35.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="539.6" y="46.0"></text>
</g>
<g>
<title>vectorizedMismatch (3 samples, 1.61%)</title><rect x="542.9" y="51.0" width="19.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="545.9" y="62.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (1 samples, 0.54%)</title><rect x="561.9" y="227.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="564.9" y="238.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (1 samples, 0.54%)</title><rect x="561.9" y="211.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="564.9" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.54%)</title><rect x="561.9" y="195.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="564.9" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.54%)</title><rect x="561.9" y="179.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="564.9" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.54%)</title><rect x="568.3" y="227.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="571.3" y="238.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.54%)</title><rect x="568.3" y="211.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="571.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (2 samples, 1.08%)</title><rect x="574.6" y="291.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="577.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.primaryFor (2 samples, 1.08%)</title><rect x="574.6" y="275.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="577.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.54%)</title><rect x="574.6" y="259.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="577.6" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.54%)</title><rect x="581.0" y="259.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="584.0" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.54%)</title><rect x="581.0" y="243.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="584.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.54%)</title><rect x="581.0" y="227.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="584.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.getByteBufferKey (2 samples, 1.08%)</title><rect x="587.3" y="291.0" width="12.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="590.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.54%)</title><rect x="587.3" y="275.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="590.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.54%)</title><rect x="587.3" y="259.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="590.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.54%)</title><rect x="587.3" y="243.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="590.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.54%)</title><rect x="587.3" y="227.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="590.3" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.54%)</title><rect x="587.3" y="211.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="590.3" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.54%)</title><rect x="593.7" y="275.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="596.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.sendResponse (16 samples, 8.60%)</title><rect x="600.0" y="291.0" width="101.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.0" y="302.0">ru/mail/poli..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (16 samples, 8.60%)</title><rect x="600.0" y="275.0" width="101.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="603.0" y="286.0">one/nio/http..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.54%)</title><rect x="600.0" y="259.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="603.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.54%)</title><rect x="600.0" y="243.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="603.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.54%)</title><rect x="600.0" y="227.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15 samples, 8.06%)</title><rect x="606.3" y="259.0" width="95.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="609.3" y="270.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 2.15%)</title><rect x="606.3" y="243.0" width="25.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="609.3" y="254.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 1.08%)</title><rect x="619.0" y="227.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="622.0" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 1.08%)</title><rect x="619.0" y="211.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="622.0" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 1.08%)</title><rect x="619.0" y="195.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="622.0" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 1.08%)</title><rect x="619.0" y="179.0" width="12.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.0" y="190.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 1.08%)</title><rect x="619.0" y="163.0" width="12.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="622.0" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 5.91%)</title><rect x="631.7" y="243.0" width="69.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.7" y="254.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 5.91%)</title><rect x="631.7" y="227.0" width="69.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="634.7" y="238.0">one/nio..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.54%)</title><rect x="631.7" y="211.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="634.7" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 5.38%)</title><rect x="638.1" y="211.0" width="63.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="641.1" y="222.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (10 samples, 5.38%)</title><rect x="638.1" y="195.0" width="63.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="641.1" y="206.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (7 samples, 3.76%)</title><rect x="650.8" y="179.0" width="44.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="653.8" y="190.0">Java..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.54%)</title><rect x="669.8" y="163.0" width="6.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="672.8" y="174.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.54%)</title><rect x="676.1" y="163.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="679.1" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.54%)</title><rect x="682.5" y="163.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="685.5" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.54%)</title><rect x="688.8" y="163.0" width="6.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="691.8" y="174.0"></text>
</g>
<g>
<title>__send (1 samples, 0.54%)</title><rect x="695.2" y="179.0" width="6.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="698.2" y="190.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (77 samples, 41.40%)</title><rect x="701.5" y="371.0" width="488.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="704.5" y="382.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 1.08%)</title><rect x="720.5" y="355.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="723.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (30 samples, 16.13%)</title><rect x="733.2" y="355.0" width="190.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.2" y="366.0">one/nio/net/NativeSelecto..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (1 samples, 0.54%)</title><rect x="745.9" y="339.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="748.9" y="350.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (1 samples, 0.54%)</title><rect x="745.9" y="323.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="748.9" y="334.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (27 samples, 14.52%)</title><rect x="752.3" y="339.0" width="171.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.3" y="350.0">one/nio/net/NativeSele..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 1.61%)</title><rect x="771.3" y="323.0" width="19.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="774.3" y="334.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 3.23%)</title><rect x="790.3" y="323.0" width="38.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="793.3" y="334.0">Jav..</text>
</g>
<g>
<title>clock_gettime (7 samples, 3.76%)</title><rect x="828.4" y="323.0" width="44.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="831.4" y="334.0">cloc..</text>
</g>
<g>
<title>epoll_wait (8 samples, 4.30%)</title><rect x="872.8" y="323.0" width="50.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="875.8" y="334.0">epoll..</text>
</g>
<g>
<title>one/nio/net/Session.process (42 samples, 22.58%)</title><rect x="923.5" y="355.0" width="266.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="926.5" y="366.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (40 samples, 21.51%)</title><rect x="929.9" y="339.0" width="253.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="932.9" y="350.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (26 samples, 13.98%)</title><rect x="929.9" y="323.0" width="164.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="932.9" y="334.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.54%)</title><rect x="1031.4" y="307.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1034.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8 samples, 4.30%)</title><rect x="1037.7" y="307.0" width="50.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.7" y="318.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (7 samples, 3.76%)</title><rect x="1044.1" y="291.0" width="44.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1047.1" y="302.0">one/..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (7 samples, 3.76%)</title><rect x="1044.1" y="275.0" width="44.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1047.1" y="286.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.54%)</title><rect x="1044.1" y="259.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1047.1" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.54%)</title><rect x="1044.1" y="243.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1047.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.54%)</title><rect x="1044.1" y="227.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1047.1" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.54%)</title><rect x="1044.1" y="211.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1047.1" y="222.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.54%)</title><rect x="1044.1" y="195.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1047.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.get (6 samples, 3.23%)</title><rect x="1050.4" y="259.0" width="38.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1053.4" y="270.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyService.executeTask (6 samples, 3.23%)</title><rect x="1050.4" y="243.0" width="38.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1053.4" y="254.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 3.23%)</title><rect x="1050.4" y="227.0" width="38.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1053.4" y="238.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (5 samples, 2.69%)</title><rect x="1056.8" y="211.0" width="31.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1059.8" y="222.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.54%)</title><rect x="1063.1" y="195.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1066.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.54%)</title><rect x="1063.1" y="179.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1066.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.54%)</title><rect x="1063.1" y="163.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1066.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.54%)</title><rect x="1063.1" y="147.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1066.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.61%)</title><rect x="1069.5" y="195.0" width="19.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1072.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.61%)</title><rect x="1069.5" y="179.0" width="19.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1072.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.61%)</title><rect x="1069.5" y="163.0" width="19.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1072.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.61%)</title><rect x="1069.5" y="147.0" width="19.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1072.5" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 1.61%)</title><rect x="1069.5" y="131.0" width="19.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1072.5" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 1.61%)</title><rect x="1069.5" y="115.0" width="19.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1072.5" y="126.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.54%)</title><rect x="1069.5" y="99.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.5" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 1.08%)</title><rect x="1075.8" y="99.0" width="12.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1078.8" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.54%)</title><rect x="1088.5" y="307.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1091.5" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (14 samples, 7.53%)</title><rect x="1094.8" y="323.0" width="88.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1097.8" y="334.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (14 samples, 7.53%)</title><rect x="1094.8" y="307.0" width="88.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1097.8" y="318.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (6 samples, 3.23%)</title><rect x="1094.8" y="291.0" width="38.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1097.8" y="302.0">Jav..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.54%)</title><rect x="1101.2" y="275.0" width="6.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1104.2" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 1.61%)</title><rect x="1107.5" y="275.0" width="19.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1110.5" y="286.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 1.08%)</title><rect x="1113.9" y="259.0" width="12.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1116.9" y="270.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.54%)</title><rect x="1126.6" y="275.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.6" y="286.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.54%)</title><rect x="1132.9" y="291.0" width="6.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1135.9" y="302.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.54%)</title><rect x="1139.2" y="291.0" width="6.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1142.2" y="302.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.54%)</title><rect x="1145.6" y="291.0" width="6.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1148.6" y="302.0"></text>
</g>
<g>
<title>recv (5 samples, 2.69%)</title><rect x="1151.9" y="291.0" width="31.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1154.9" y="302.0">recv</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.54%)</title><rect x="1183.7" y="339.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="350.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.54%)</title><rect x="1183.7" y="323.0" width="6.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1186.7" y="334.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="1183.7" y="307.0" width="6.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1186.7" y="318.0"></text>
</g>
</g>
</svg>
