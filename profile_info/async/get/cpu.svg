<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (4,281 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="10.0" y="947.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="931.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="915.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="10.0" y="899.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="10.0" y="883.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="10.0" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (66 samples, 1.54%)</title><rect x="10.3" y="947.0" width="18.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.3" y="958.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (66 samples, 1.54%)</title><rect x="10.3" y="931.0" width="18.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.3" y="942.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.02%)</title><rect x="10.3" y="915.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.3" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (64 samples, 1.49%)</title><rect x="10.6" y="915.0" width="17.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.6" y="926.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.05%)</title><rect x="11.1" y="899.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.1" y="910.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="11.4" y="883.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="14.4" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (55 samples, 1.28%)</title><rect x="11.7" y="899.0" width="15.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.7" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (26 samples, 0.61%)</title><rect x="13.6" y="883.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.6" y="894.0"></text>
</g>
<g>
<title>SpinPause (13 samples, 0.30%)</title><rect x="20.7" y="883.0" width="3.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="23.7" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.14%)</title><rect x="24.3" y="883.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="27.3" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="26.0" y="883.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="29.0" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="26.3" y="883.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="29.3" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.02%)</title><rect x="26.5" y="883.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="29.5" y="894.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.07%)</title><rect x="26.8" y="899.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="29.8" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="27.6" y="899.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="30.6" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.02%)</title><rect x="27.9" y="899.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="30.9" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="28.2" y="915.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="31.2" y="926.0"></text>
</g>
<g>
<title>[no_Java_frame] (9 samples, 0.21%)</title><rect x="28.5" y="947.0" width="2.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="31.5" y="958.0"></text>
</g>
<g>
<title>[not_walkable_Java] (13 samples, 0.30%)</title><rect x="30.9" y="947.0" width="3.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="33.9" y="958.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="30.9" y="931.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="33.9" y="942.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (2 samples, 0.05%)</title><rect x="31.2" y="931.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="34.2" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.14%)</title><rect x="31.8" y="931.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="34.8" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.14%)</title><rect x="31.8" y="915.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="34.8" y="926.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.07%)</title><rect x="31.8" y="899.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="34.8" y="910.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.02%)</title><rect x="31.8" y="883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="34.8" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.05%)</title><rect x="32.1" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="35.1" y="894.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="32.3" y="867.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="35.3" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.07%)</title><rect x="32.6" y="899.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="35.6" y="910.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.02%)</title><rect x="32.9" y="883.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="35.9" y="894.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.02%)</title><rect x="33.2" y="883.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="36.2" y="894.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="33.2" y="867.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="36.2" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="33.4" y="931.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="36.4" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (3 samples, 0.07%)</title><rect x="33.7" y="931.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="36.7" y="942.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.26%)</title><rect x="34.5" y="947.0" width="3.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="37.5" y="958.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="34.5" y="931.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="37.5" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 0.09%)</title><rect x="34.8" y="931.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="37.8" y="942.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="35.9" y="931.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="38.9" y="942.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (5 samples, 0.12%)</title><rect x="36.2" y="931.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="39.2" y="942.0"></text>
</g>
<g>
<title>[unknown_Java] (22 samples, 0.51%)</title><rect x="37.6" y="947.0" width="6.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="40.6" y="958.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.05%)</title><rect x="37.6" y="931.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="40.6" y="942.0"></text>
</g>
<g>
<title>G1BarrierSet::invalidate(MemRegion) (1 samples, 0.02%)</title><rect x="38.1" y="931.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="41.1" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.07%)</title><rect x="38.4" y="931.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="41.4" y="942.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="38.7" y="915.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="41.7" y="926.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="38.9" y="915.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="41.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="39.2" y="931.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="42.2" y="942.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.02%)</title><rect x="39.2" y="915.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="42.2" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.02%)</title><rect x="39.5" y="931.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="42.5" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_signal (8 samples, 0.19%)</title><rect x="39.8" y="931.0" width="2.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="42.8" y="942.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.07%)</title><rect x="42.0" y="931.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="45.0" y="942.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="42.8" y="931.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="45.8" y="942.0"></text>
</g>
<g>
<title>sha256_implCompress (2 samples, 0.05%)</title><rect x="43.1" y="931.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="46.1" y="942.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.05%)</title><rect x="43.6" y="947.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="46.6" y="958.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.05%)</title><rect x="43.6" y="931.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="46.6" y="942.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="43.6" y="915.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="46.6" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,007 samples, 70.24%)</title><rect x="44.2" y="947.0" width="828.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.2" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,007 samples, 70.24%)</title><rect x="44.2" y="931.0" width="828.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.2" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,007 samples, 70.24%)</title><rect x="44.2" y="915.0" width="828.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.2" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (808 samples, 18.87%)</title><rect x="45.6" y="899.0" width="222.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.6" y="910.0">java/util/concurrent/Completa..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (616 samples, 14.39%)</title><rect x="46.1" y="883.0" width="169.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.1" y="894.0">java/util/concurrent/C..</text>
</g>
<g>
<title>itable stub (3 samples, 0.07%)</title><rect x="47.2" y="867.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="50.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (529 samples, 12.36%)</title><rect x="48.0" y="867.0" width="145.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.0" y="878.0">java/util/concurre..</text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="49.7" y="851.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="52.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.02%)</title><rect x="50.2" y="851.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="50.2" y="835.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.2" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$181/741792946.apply (520 samples, 12.15%)</title><rect x="50.5" y="851.0" width="143.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.5" y="862.0">jdk/internal/net/h..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$2 (518 samples, 12.10%)</title><rect x="51.1" y="835.0" width="142.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.1" y="846.0">jdk/internal/net/h..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsyncImpl (518 samples, 12.10%)</title><rect x="51.1" y="819.0" width="142.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.1" y="830.0">jdk/internal/net/h..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (3 samples, 0.07%)</title><rect x="51.6" y="803.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (3 samples, 0.07%)</title><rect x="51.6" y="787.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (2 samples, 0.05%)</title><rect x="51.6" y="771.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="52.2" y="771.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="55.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (3 samples, 0.07%)</title><rect x="52.4" y="803.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (3 samples, 0.07%)</title><rect x="52.4" y="787.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.4" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsync (441 samples, 10.30%)</title><rect x="53.3" y="803.0" width="121.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.3" y="814.0">jdk/internal/ne..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl (441 samples, 10.30%)</title><rect x="53.3" y="787.0" width="121.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.3" y="798.0">jdk/internal/ne..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl0 (441 samples, 10.30%)</title><rect x="53.3" y="771.0" width="121.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.3" y="782.0">jdk/internal/ne..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (235 samples, 5.49%)</title><rect x="53.3" y="755.0" width="64.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.3" y="766.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (235 samples, 5.49%)</title><rect x="53.3" y="739.0" width="64.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.3" y="750.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (233 samples, 5.44%)</title><rect x="53.3" y="723.0" width="64.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.3" y="734.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$369/2088470337.apply (232 samples, 5.42%)</title><rect x="53.6" y="707.0" width="63.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.6" y="718.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (1 samples, 0.02%)</title><rect x="53.6" y="691.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.6" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$9 (231 samples, 5.40%)</title><rect x="53.8" y="691.0" width="63.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.8" y="702.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (231 samples, 5.40%)</title><rect x="53.8" y="675.0" width="63.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.8" y="686.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$213/704007913.apply (231 samples, 5.40%)</title><rect x="53.8" y="659.0" width="63.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.8" y="670.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (231 samples, 5.40%)</title><rect x="53.8" y="643.0" width="63.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.8" y="654.0">jdk/int..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (3 samples, 0.07%)</title><rect x="53.8" y="627.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (3 samples, 0.07%)</title><rect x="53.8" y="611.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (3 samples, 0.07%)</title><rect x="53.8" y="595.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (1 samples, 0.02%)</title><rect x="54.4" y="579.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="57.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (3 samples, 0.07%)</title><rect x="54.7" y="627.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (3 samples, 0.07%)</title><rect x="54.7" y="611.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.05%)</title><rect x="54.9" y="595.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="57.9" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.05%)</title><rect x="54.9" y="579.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="57.9" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (225 samples, 5.26%)</title><rect x="55.5" y="627.0" width="62.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.5" y="638.0">jdk/in..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.05%)</title><rect x="55.5" y="611.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.05%)</title><rect x="55.5" y="595.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.5" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.&lt;init&gt; (1 samples, 0.02%)</title><rect x="55.8" y="579.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (186 samples, 4.34%)</title><rect x="56.0" y="611.0" width="51.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.0" y="622.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (185 samples, 4.32%)</title><rect x="56.3" y="595.0" width="51.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.3" y="606.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.07%)</title><rect x="56.6" y="579.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.6" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="56.6" y="563.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="59.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$436/719435531.apply (1 samples, 0.02%)</title><rect x="56.9" y="563.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="59.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$438/1095477642.apply (1 samples, 0.02%)</title><rect x="57.1" y="563.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$436/719435531.apply (179 samples, 4.18%)</title><rect x="57.4" y="579.0" width="49.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.4" y="590.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendHeadersAsync$4 (179 samples, 4.18%)</title><rect x="57.4" y="563.0" width="49.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="60.4" y="574.0">jdk/i..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="57.7" y="547.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.7" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="57.7" y="531.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.7" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$453/1005406349.get$Lambda (1 samples, 0.02%)</title><rect x="57.7" y="515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.02%)</title><rect x="58.0" y="547.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.02%)</title><rect x="58.0" y="531.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="61.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (12 samples, 0.28%)</title><rect x="58.2" y="547.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="61.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (12 samples, 0.28%)</title><rect x="58.2" y="531.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.add (4 samples, 0.09%)</title><rect x="58.2" y="515.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.offerLast (4 samples, 0.09%)</title><rect x="58.2" y="499.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.linkLast (4 samples, 0.09%)</title><rect x="58.2" y="483.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.2" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.07%)</title><rect x="58.5" y="467.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (3 samples, 0.07%)</title><rect x="58.5" y="451.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="61.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (8 samples, 0.19%)</title><rect x="59.3" y="515.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (8 samples, 0.19%)</title><rect x="59.3" y="499.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="62.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (8 samples, 0.19%)</title><rect x="59.3" y="483.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="62.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (8 samples, 0.19%)</title><rect x="59.3" y="467.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="62.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription$PullTask.run (1 samples, 0.02%)</title><rect x="59.3" y="451.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.3" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (1 samples, 0.02%)</title><rect x="59.3" y="435.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="62.3" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (1 samples, 0.02%)</title><rect x="59.3" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.3" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.02%)</title><rect x="59.3" y="403.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.02%)</title><rect x="59.3" y="387.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.3" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="59.3" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.3" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (7 samples, 0.16%)</title><rect x="59.6" y="451.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="62.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$341/145997440.run (2 samples, 0.05%)</title><rect x="59.6" y="435.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (1 samples, 0.02%)</title><rect x="59.9" y="419.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (5 samples, 0.12%)</title><rect x="60.2" y="435.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.hasOutgoing (4 samples, 0.09%)</title><rect x="60.4" y="419.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.isEmpty (4 samples, 0.09%)</title><rect x="60.4" y="403.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (4 samples, 0.09%)</title><rect x="60.4" y="387.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.4" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.connectFlows (45 samples, 1.05%)</title><rect x="61.5" y="547.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.5" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (45 samples, 1.05%)</title><rect x="61.5" y="531.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.5" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.subscribe (10 samples, 0.23%)</title><rect x="61.8" y="515.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.8" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (10 samples, 0.23%)</title><rect x="61.8" y="499.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.8" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (10 samples, 0.23%)</title><rect x="61.8" y="483.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (10 samples, 0.23%)</title><rect x="61.8" y="467.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="64.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (10 samples, 0.23%)</title><rect x="61.8" y="451.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.8" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="62.1" y="435.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="65.1" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.05%)</title><rect x="62.1" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="65.1" y="430.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.02%)</title><rect x="62.1" y="403.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="65.1" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="62.4" y="403.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="65.4" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.02%)</title><rect x="62.4" y="387.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="65.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (7 samples, 0.16%)</title><rect x="62.6" y="435.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.6" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="64.3" y="419.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="67.3" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="64.3" y="403.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="67.3" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="64.3" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="67.3" y="398.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="64.3" y="371.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="67.3" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (34 samples, 0.79%)</title><rect x="64.6" y="515.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (34 samples, 0.79%)</title><rect x="64.6" y="499.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (32 samples, 0.75%)</title><rect x="64.6" y="483.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.6" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (28 samples, 0.65%)</title><rect x="64.6" y="467.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (28 samples, 0.65%)</title><rect x="64.6" y="451.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.6" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.23%)</title><rect x="66.0" y="435.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="69.0" y="446.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (9 samples, 0.21%)</title><rect x="66.2" y="419.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="69.2" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.02%)</title><rect x="66.5" y="403.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="69.5" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.14%)</title><rect x="66.8" y="403.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="69.8" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (2 samples, 0.05%)</title><rect x="66.8" y="387.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="69.8" y="398.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.09%)</title><rect x="67.3" y="387.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="70.3" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (1 samples, 0.02%)</title><rect x="68.4" y="403.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="71.4" y="414.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (1 samples, 0.02%)</title><rect x="68.4" y="387.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="71.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (13 samples, 0.30%)</title><rect x="68.7" y="435.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.7" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.07%)</title><rect x="70.9" y="419.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="73.9" y="430.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (3 samples, 0.07%)</title><rect x="70.9" y="403.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="73.9" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.02%)</title><rect x="70.9" y="387.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="73.9" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="71.2" y="387.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="74.2" y="398.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.05%)</title><rect x="71.2" y="371.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="74.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (2 samples, 0.05%)</title><rect x="71.7" y="419.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.7" y="430.0"></text>
</g>
<g>
<title>__libc_write (2 samples, 0.05%)</title><rect x="71.7" y="403.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="74.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.isStopped (4 samples, 0.09%)</title><rect x="72.3" y="467.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.3" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.02%)</title><rect x="73.1" y="451.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="76.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.&lt;init&gt; (1 samples, 0.02%)</title><rect x="73.4" y="483.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.4" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (1 samples, 0.02%)</title><rect x="73.7" y="483.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="76.7" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="73.7" y="467.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.7" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.headers (119 samples, 2.78%)</title><rect x="73.9" y="547.0" width="32.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.9" y="558.0">jd..</text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.05%)</title><rect x="74.5" y="531.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.5" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.05%)</title><rect x="74.5" y="515.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.hostString (2 samples, 0.05%)</title><rect x="74.5" y="499.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="77.5" y="510.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="75.1" y="531.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.1" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="75.1" y="515.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.09%)</title><rect x="75.3" y="531.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.3" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.09%)</title><rect x="75.3" y="515.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="78.3" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.09%)</title><rect x="75.3" y="499.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.3" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.09%)</title><rect x="75.3" y="483.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders0 (71 samples, 1.66%)</title><rect x="76.4" y="531.0" width="19.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.4" y="542.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate.and (1 samples, 0.02%)</title><rect x="76.4" y="515.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.4" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="76.4" y="499.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.4" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="76.4" y="483.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.4" y="494.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate$$Lambda$454/669478227.get$Lambda (1 samples, 0.02%)</title><rect x="76.4" y="467.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectCookies (8 samples, 0.19%)</title><rect x="76.7" y="515.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.7" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (8 samples, 0.19%)</title><rect x="76.7" y="499.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.7" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 0.19%)</title><rect x="76.7" y="483.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.7" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (8 samples, 0.19%)</title><rect x="76.7" y="467.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.7" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (8 samples, 0.19%)</title><rect x="76.7" y="451.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.7" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (8 samples, 0.19%)</title><rect x="76.7" y="435.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.7" y="446.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (5 samples, 0.12%)</title><rect x="77.5" y="419.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.5" y="430.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (5 samples, 0.12%)</title><rect x="77.5" y="403.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.5" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (5 samples, 0.12%)</title><rect x="77.5" y="387.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="80.5" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders1 (30 samples, 0.70%)</title><rect x="78.9" y="515.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="81.9" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.02%)</title><rect x="85.2" y="499.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="88.2" y="510.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.02%)</title><rect x="85.2" y="483.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.2" y="494.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.02%)</title><rect x="85.2" y="467.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.2" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (1 samples, 0.02%)</title><rect x="85.5" y="499.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.5" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (1 samples, 0.02%)</title><rect x="85.5" y="483.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.5" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (1 samples, 0.02%)</title><rect x="85.5" y="467.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="88.5" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (1 samples, 0.02%)</title><rect x="85.5" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.5" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.02%)</title><rect x="85.5" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="88.5" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.02%)</title><rect x="85.5" y="419.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.5" y="430.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate$$Lambda$454/669478227.test (2 samples, 0.05%)</title><rect x="85.8" y="499.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.8" y="510.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate.lambda$and$0 (2 samples, 0.05%)</title><rect x="85.8" y="483.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$83/324457684.test (2 samples, 0.05%)</title><rect x="85.8" y="467.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$10 (2 samples, 0.05%)</title><rect x="85.8" y="451.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="88.8" y="462.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$72/1810899357.test (2 samples, 0.05%)</title><rect x="85.8" y="435.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.8" y="446.0"></text>
</g>
<g>
<title>java/util/function/Predicate.lambda$negate$1 (2 samples, 0.05%)</title><rect x="85.8" y="419.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.8" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$71/594427726.test (2 samples, 0.05%)</title><rect x="85.8" y="403.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="88.8" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$3 (2 samples, 0.05%)</title><rect x="85.8" y="387.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.05%)</title><rect x="85.8" y="371.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="85.8" y="355.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="85.8" y="339.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.8" y="350.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="86.4" y="499.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="89.4" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="86.6" y="499.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="89.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.build (32 samples, 0.75%)</title><rect x="87.2" y="515.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.2" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (32 samples, 0.75%)</title><rect x="87.2" y="499.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.2" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (32 samples, 0.75%)</title><rect x="87.2" y="483.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.2" y="494.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="88.0" y="467.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="91.0" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (28 samples, 0.65%)</title><rect x="88.3" y="467.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="91.3" y="478.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$141/1757337625.accept (25 samples, 0.58%)</title><rect x="88.8" y="451.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.8" y="462.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (24 samples, 0.56%)</title><rect x="89.1" y="435.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.1" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (14 samples, 0.33%)</title><rect x="89.9" y="419.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.9" y="430.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$147/136542916.accept (14 samples, 0.33%)</title><rect x="89.9" y="403.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.9" y="414.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (13 samples, 0.30%)</title><rect x="90.2" y="387.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.trim (7 samples, 0.16%)</title><rect x="91.9" y="371.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.9" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (7 samples, 0.16%)</title><rect x="91.9" y="355.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="94.9" y="366.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="92.7" y="339.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="95.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$68/960733886.test (2 samples, 0.05%)</title><rect x="93.2" y="339.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.2" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (7 samples, 0.16%)</title><rect x="93.8" y="419.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.8" y="430.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (5 samples, 0.12%)</title><rect x="94.1" y="403.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (5 samples, 0.12%)</title><rect x="94.1" y="387.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="97.1" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (5 samples, 0.12%)</title><rect x="94.1" y="371.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.1" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.02%)</title><rect x="95.4" y="403.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.4" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.02%)</title><rect x="95.7" y="451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="98.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.hostString (5 samples, 0.12%)</title><rect x="96.0" y="531.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.05%)</title><rect x="96.0" y="515.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.0" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="96.0" y="499.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="99.0" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="96.0" y="483.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="99.0" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="96.0" y="467.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="99.0" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="96.0" y="451.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="99.0" y="462.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (1 samples, 0.02%)</title><rect x="96.3" y="499.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.3" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.05%)</title><rect x="96.5" y="515.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.5" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (2 samples, 0.05%)</title><rect x="96.5" y="499.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.5" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1782580546.invoke (2 samples, 0.05%)</title><rect x="96.5" y="483.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.5" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.05%)</title><rect x="96.5" y="467.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.5" y="478.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (2 samples, 0.05%)</title><rect x="96.5" y="451.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.5" y="462.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.02%)</title><rect x="96.8" y="435.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="99.8" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.secure (1 samples, 0.02%)</title><rect x="97.1" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.1" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.requestURI (8 samples, 0.19%)</title><rect x="97.4" y="531.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.4" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.getPathAndQuery (8 samples, 0.19%)</title><rect x="97.4" y="515.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.encode (8 samples, 0.19%)</title><rect x="97.4" y="499.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="100.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="98.2" y="483.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.2" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.02%)</title><rect x="98.2" y="467.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.2" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.09%)</title><rect x="98.5" y="483.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="101.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (26 samples, 0.61%)</title><rect x="99.6" y="531.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.6" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="99.9" y="515.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="102.9" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.07%)</title><rect x="100.1" y="515.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="103.1" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (1 samples, 0.02%)</title><rect x="100.7" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.7" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.02%)</title><rect x="100.7" y="483.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.7" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.02%)</title><rect x="100.7" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.7" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (11 samples, 0.26%)</title><rect x="101.0" y="515.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="104.0" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (11 samples, 0.26%)</title><rect x="101.0" y="499.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.0" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (10 samples, 0.23%)</title><rect x="101.2" y="483.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="104.2" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (10 samples, 0.23%)</title><rect x="101.2" y="467.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="104.2" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.19%)</title><rect x="101.8" y="451.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.8" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.09%)</title><rect x="102.1" y="435.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="105.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders0 (3 samples, 0.07%)</title><rect x="103.2" y="435.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.2" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (10 samples, 0.23%)</title><rect x="104.0" y="515.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.09%)</title><rect x="104.5" y="499.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.5" y="510.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.09%)</title><rect x="104.5" y="483.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.5" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (4 samples, 0.09%)</title><rect x="104.5" y="467.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="107.5" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (4 samples, 0.09%)</title><rect x="105.6" y="499.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.05%)</title><rect x="106.7" y="579.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.05%)</title><rect x="106.7" y="563.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="109.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.setRetryOnError (2 samples, 0.05%)</title><rect x="107.3" y="611.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="110.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.&lt;init&gt; (34 samples, 0.79%)</title><rect x="107.9" y="611.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (33 samples, 0.77%)</title><rect x="107.9" y="595.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.9" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (33 samples, 0.77%)</title><rect x="107.9" y="579.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="110.9" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (33 samples, 0.77%)</title><rect x="107.9" y="563.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (21 samples, 0.49%)</title><rect x="111.2" y="547.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (20 samples, 0.47%)</title><rect x="111.4" y="531.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.4" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription$PullTask.run (1 samples, 0.02%)</title><rect x="111.4" y="515.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="114.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (1 samples, 0.02%)</title><rect x="111.4" y="499.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (1 samples, 0.02%)</title><rect x="111.4" y="483.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="114.4" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.02%)</title><rect x="111.4" y="467.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.02%)</title><rect x="111.4" y="451.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.4" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="111.4" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="114.4" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (13 samples, 0.30%)</title><rect x="111.7" y="515.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.7" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$341/145997440.run (12 samples, 0.28%)</title><rect x="112.0" y="499.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.0" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (11 samples, 0.26%)</title><rect x="112.3" y="483.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (7 samples, 0.16%)</title><rect x="112.5" y="467.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (4 samples, 0.09%)</title><rect x="112.5" y="451.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="115.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.onSubscribe (3 samples, 0.07%)</title><rect x="113.6" y="451.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="116.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (3 samples, 0.07%)</title><rect x="113.6" y="435.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="116.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (3 samples, 0.07%)</title><rect x="113.6" y="419.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (3 samples, 0.07%)</title><rect x="113.6" y="403.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.6" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (3 samples, 0.07%)</title><rect x="114.5" y="467.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="117.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (1 samples, 0.02%)</title><rect x="114.5" y="451.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="114.5" y="435.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.5" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="114.5" y="419.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.5" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (2 samples, 0.05%)</title><rect x="114.7" y="451.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (2 samples, 0.05%)</title><rect x="114.7" y="435.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="117.7" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (2 samples, 0.05%)</title><rect x="114.7" y="419.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="117.7" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.on (2 samples, 0.05%)</title><rect x="114.7" y="403.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (2 samples, 0.05%)</title><rect x="114.7" y="387.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.7" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (6 samples, 0.14%)</title><rect x="115.3" y="515.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="118.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (3 samples, 0.07%)</title><rect x="116.1" y="499.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.1" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (3 samples, 0.07%)</title><rect x="116.1" y="483.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$341/145997440.run (1 samples, 0.02%)</title><rect x="116.7" y="467.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="119.7" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (1 samples, 0.02%)</title><rect x="116.7" y="451.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="119.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (1 samples, 0.02%)</title><rect x="116.7" y="435.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="119.7" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (1 samples, 0.02%)</title><rect x="116.7" y="419.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="119.7" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (1 samples, 0.02%)</title><rect x="116.7" y="403.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (1 samples, 0.02%)</title><rect x="116.7" y="387.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="119.7" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.on (1 samples, 0.02%)</title><rect x="116.7" y="371.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="119.7" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (1 samples, 0.02%)</title><rect x="116.7" y="355.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.7" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.&lt;init&gt; (1 samples, 0.02%)</title><rect x="116.9" y="595.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.9" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="116.9" y="579.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="119.9" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="116.9" y="563.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="119.9" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="116.9" y="547.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="119.9" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="116.9" y="531.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="119.9" y="542.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="116.9" y="515.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="119.9" y="526.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (1 samples, 0.02%)</title><rect x="116.9" y="499.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="119.9" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.connected (1 samples, 0.02%)</title><rect x="117.2" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.05%)</title><rect x="117.5" y="723.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="120.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (3 samples, 0.07%)</title><rect x="118.0" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (3 samples, 0.07%)</title><rect x="118.0" y="739.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="121.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.05%)</title><rect x="118.3" y="723.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.3" y="734.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="118.3" y="707.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="121.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.establishExchange (203 samples, 4.74%)</title><rect x="118.9" y="755.0" width="55.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="121.9" y="766.0">jdk/i..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="119.4" y="739.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="122.4" y="750.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.02%)</title><rect x="119.4" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="122.4" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.80] (1 samples, 0.02%)</title><rect x="119.4" y="707.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="122.4" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.02%)</title><rect x="119.4" y="691.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="122.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (3 samples, 0.07%)</title><rect x="119.7" y="739.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (3 samples, 0.07%)</title><rect x="119.7" y="723.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="122.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="120.0" y="707.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$361/1092332279.apply (1 samples, 0.02%)</title><rect x="120.0" y="691.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.0" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$361/1092332279.apply (1 samples, 0.02%)</title><rect x="120.3" y="707.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="123.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$establishExchange$2 (1 samples, 0.02%)</title><rect x="120.3" y="691.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (1 samples, 0.02%)</title><rect x="120.3" y="675.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.02%)</title><rect x="120.3" y="659.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="120.3" y="643.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.19%)</title><rect x="120.5" y="739.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.19%)</title><rect x="120.5" y="723.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="123.5" y="734.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="121.9" y="707.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="124.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.02%)</title><rect x="122.2" y="707.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="125.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$356/142089639.accept (1 samples, 0.02%)</title><rect x="122.5" y="707.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.5" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkCancelled (1 samples, 0.02%)</title><rect x="122.7" y="739.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="125.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.get (188 samples, 4.39%)</title><rect x="123.0" y="739.0" width="51.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="126.0" y="750.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createHttp1Exchange (188 samples, 4.39%)</title><rect x="123.0" y="723.0" width="51.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="126.0" y="734.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.&lt;init&gt; (186 samples, 4.34%)</title><rect x="123.3" y="707.0" width="51.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="126.3" y="718.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.&lt;init&gt; (15 samples, 0.35%)</title><rect x="125.2" y="691.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.2" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlink (1 samples, 0.02%)</title><rect x="128.2" y="675.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="131.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.&lt;init&gt; (1 samples, 0.02%)</title><rect x="128.5" y="675.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="131.5" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.02%)</title><rect x="128.8" y="675.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.8" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.synchronizedScheduler (1 samples, 0.02%)</title><rect x="129.1" y="675.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="132.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.&lt;init&gt; (8 samples, 0.19%)</title><rect x="129.4" y="691.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="132.4" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="131.3" y="675.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="134.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.getConnection (58 samples, 1.35%)</title><rect x="131.6" y="691.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.6" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.getConnection (58 samples, 1.35%)</title><rect x="131.6" y="675.0" width="15.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.6" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (14 samples, 0.33%)</title><rect x="133.2" y="659.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="136.2" y="670.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (14 samples, 0.33%)</title><rect x="133.2" y="643.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="136.2" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (13 samples, 0.30%)</title><rect x="133.2" y="627.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="136.2" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (12 samples, 0.28%)</title><rect x="133.2" y="611.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="136.2" y="622.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="136.5" y="611.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="139.5" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (1 samples, 0.02%)</title><rect x="136.8" y="627.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="139.8" y="638.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title><rect x="136.8" y="611.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="139.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.findConnection (38 samples, 0.89%)</title><rect x="137.1" y="659.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="140.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 0.30%)</title><rect x="137.1" y="643.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="140.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.14%)</title><rect x="137.1" y="627.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.1" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (1 samples, 0.02%)</title><rect x="137.3" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.equals (4 samples, 0.09%)</title><rect x="137.6" y="611.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="140.6" y="622.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.equals (2 samples, 0.05%)</title><rect x="137.6" y="595.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="140.6" y="606.0"></text>
</g>
<g>
<title>java/util/Objects.equals (2 samples, 0.05%)</title><rect x="138.2" y="595.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.2" y="606.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.equals (2 samples, 0.05%)</title><rect x="138.2" y="579.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="141.2" y="590.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.equals (2 samples, 0.05%)</title><rect x="138.2" y="563.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="141.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.16%)</title><rect x="138.7" y="627.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.7" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.hashCode (7 samples, 0.16%)</title><rect x="138.7" y="611.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.7" y="622.0"></text>
</g>
<g>
<title>java/util/Objects.hash (7 samples, 0.16%)</title><rect x="138.7" y="595.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.7" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (3 samples, 0.07%)</title><rect x="139.8" y="579.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="142.8" y="590.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.hashCode (2 samples, 0.05%)</title><rect x="140.1" y="563.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="143.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.remove (25 samples, 0.58%)</title><rect x="140.7" y="643.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.7" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (2 samples, 0.05%)</title><rect x="142.3" y="627.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="145.3" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (2 samples, 0.05%)</title><rect x="142.3" y="611.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.3" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (1 samples, 0.02%)</title><rect x="142.3" y="595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="145.3" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedList.checkPositionIndex (1 samples, 0.02%)</title><rect x="142.6" y="595.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.6" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.next (1 samples, 0.02%)</title><rect x="142.9" y="627.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.9" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.remove (15 samples, 0.35%)</title><rect x="143.1" y="627.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.1" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlink (3 samples, 0.07%)</title><rect x="146.4" y="611.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.4" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedList.node (1 samples, 0.02%)</title><rect x="147.3" y="627.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="150.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.getAddress (98 samples, 2.29%)</title><rect x="147.5" y="691.0" width="27.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.5" y="702.0">j..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (92 samples, 2.15%)</title><rect x="149.2" y="675.0" width="25.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="152.2" y="686.0">j..</text>
</g>
<g>
<title>JVM_DoPrivileged (65 samples, 1.52%)</title><rect x="149.5" y="659.0" width="17.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="152.5" y="670.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.02%)</title><rect x="150.9" y="643.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="153.9" y="654.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.02%)</title><rect x="151.1" y="643.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="154.1" y="654.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.02%)</title><rect x="151.4" y="643.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="154.4" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (5 samples, 0.12%)</title><rect x="151.7" y="643.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="154.7" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.267] (5 samples, 0.12%)</title><rect x="151.7" y="627.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="154.7" y="638.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.02%)</title><rect x="153.1" y="643.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="156.1" y="654.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.02%)</title><rect x="153.3" y="643.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="156.3" y="654.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (9 samples, 0.21%)</title><rect x="153.6" y="643.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="156.6" y="654.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.02%)</title><rect x="154.2" y="627.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="157.2" y="638.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.02%)</title><rect x="154.4" y="627.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="157.4" y="638.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.02%)</title><rect x="154.7" y="627.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="157.7" y="638.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.05%)</title><rect x="155.0" y="627.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="158.0" y="638.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.02%)</title><rect x="155.5" y="627.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="158.5" y="638.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="155.8" y="627.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="158.8" y="638.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="156.1" y="643.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="159.1" y="654.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.02%)</title><rect x="156.4" y="643.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="159.4" y="654.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.05%)</title><rect x="156.6" y="643.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="159.6" y="654.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.05%)</title><rect x="157.2" y="643.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="160.2" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="157.7" y="643.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="160.7" y="654.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.02%)</title><rect x="158.0" y="643.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="161.0" y="654.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.02%)</title><rect x="158.3" y="643.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="161.3" y="654.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.02%)</title><rect x="158.6" y="643.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="161.6" y="654.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (13 samples, 0.30%)</title><rect x="158.8" y="643.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="161.8" y="654.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.02%)</title><rect x="158.8" y="627.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="161.8" y="638.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="159.1" y="627.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="162.1" y="638.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (9 samples, 0.21%)</title><rect x="159.4" y="627.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="162.4" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.07%)</title><rect x="159.4" y="611.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="162.4" y="622.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="159.9" y="595.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="162.9" y="606.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.09%)</title><rect x="160.2" y="611.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="163.2" y="622.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.05%)</title><rect x="161.3" y="611.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="164.3" y="622.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (2 samples, 0.05%)</title><rect x="161.9" y="627.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="164.9" y="638.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (18 samples, 0.42%)</title><rect x="162.4" y="643.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="165.4" y="654.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (7 samples, 0.16%)</title><rect x="163.3" y="627.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="166.3" y="638.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (5 samples, 0.12%)</title><rect x="163.8" y="611.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="166.8" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (8 samples, 0.19%)</title><rect x="165.2" y="627.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="168.2" y="638.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (5 samples, 0.12%)</title><rect x="166.0" y="611.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="169.0" y="622.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.07%)</title><rect x="166.3" y="595.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="169.3" y="606.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.07%)</title><rect x="166.3" y="579.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="169.3" y="590.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="167.1" y="595.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="170.1" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.07%)</title><rect x="167.4" y="659.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="170.4" y="670.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.05%)</title><rect x="168.2" y="659.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="171.2" y="670.0"></text>
</g>
<g>
<title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedAction_2 (1 samples, 0.02%)</title><rect x="168.8" y="659.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="171.8" y="670.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (1 samples, 0.02%)</title><rect x="169.0" y="659.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="172.0" y="670.0"></text>
</g>
<g>
<title>call_stub (3 samples, 0.07%)</title><rect x="169.3" y="659.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="172.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl$$Lambda$241/940228546.run (15 samples, 0.35%)</title><rect x="170.1" y="659.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="173.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.lambda$getAddress$5 (14 samples, 0.33%)</title><rect x="170.4" y="643.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.4" y="654.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (14 samples, 0.33%)</title><rect x="170.4" y="627.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.4" y="638.0"></text>
</g>
<g>
<title>java/net/InetAddress.getByName (14 samples, 0.33%)</title><rect x="170.4" y="611.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.4" y="622.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (14 samples, 0.33%)</title><rect x="170.4" y="595.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.4" y="606.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (13 samples, 0.30%)</title><rect x="170.7" y="579.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.7" y="590.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName0 (10 samples, 0.23%)</title><rect x="171.5" y="563.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="174.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.07%)</title><rect x="171.8" y="547.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.05%)</title><rect x="172.1" y="531.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListSet.iterator (6 samples, 0.14%)</title><rect x="172.6" y="547.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$KeySet.iterator (3 samples, 0.07%)</title><rect x="173.2" y="531.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="176.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$KeyIterator.&lt;init&gt; (3 samples, 0.07%)</title><rect x="173.2" y="515.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.2" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="173.7" y="499.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="176.7" y="510.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="174.0" y="531.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="177.0" y="542.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.02%)</title><rect x="174.3" y="659.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="177.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.02%)</title><rect x="174.6" y="707.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.6" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerTimer (35 samples, 0.82%)</title><rect x="174.8" y="803.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.8" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.19%)</title><rect x="176.8" y="787.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="179.8" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (8 samples, 0.19%)</title><rect x="176.8" y="771.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="179.8" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.19%)</title><rect x="176.8" y="755.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="179.8" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (6 samples, 0.14%)</title><rect x="177.0" y="739.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="180.0" y="750.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="178.7" y="739.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="181.7" y="750.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (7 samples, 0.16%)</title><rect x="179.0" y="787.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.0" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (6 samples, 0.14%)</title><rect x="179.2" y="771.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.05%)</title><rect x="179.5" y="755.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="182.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.05%)</title><rect x="179.5" y="739.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 0.05%)</title><rect x="179.5" y="723.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="182.5" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.02%)</title><rect x="180.1" y="755.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.1" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/TimeoutEvent.compareTo (2 samples, 0.05%)</title><rect x="180.3" y="755.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.3" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.wakeupSelector (13 samples, 0.30%)</title><rect x="180.9" y="787.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="183.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (13 samples, 0.30%)</title><rect x="180.9" y="771.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="183.9" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="182.5" y="755.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="185.5" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.05%)</title><rect x="182.5" y="739.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="185.5" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="182.5" y="723.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="185.5" y="734.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.05%)</title><rect x="182.5" y="707.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="185.5" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (5 samples, 0.12%)</title><rect x="183.1" y="755.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.1" y="766.0"></text>
</g>
<g>
<title>__libc_write (4 samples, 0.09%)</title><rect x="183.4" y="739.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="186.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.getExchange (3 samples, 0.07%)</title><rect x="184.5" y="803.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.5" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="184.5" y="787.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="187.5" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="184.8" y="787.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="187.8" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.05%)</title><rect x="184.8" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="187.8" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.80] (2 samples, 0.05%)</title><rect x="184.8" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="187.8" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.requestFilters (24 samples, 0.56%)</title><rect x="185.3" y="803.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.3" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.request (22 samples, 0.51%)</title><rect x="185.3" y="787.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="188.3" y="798.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (1 samples, 0.02%)</title><rect x="185.9" y="771.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="188.9" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getCache (19 samples, 0.44%)</title><rect x="186.1" y="771.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.1" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.07%)</title><rect x="188.1" y="755.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="191.1" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (3 samples, 0.07%)</title><rect x="188.1" y="739.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="191.1" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.07%)</title><rect x="188.1" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="191.1" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (3 samples, 0.07%)</title><rect x="188.1" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="191.1" y="718.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (9 samples, 0.21%)</title><rect x="188.9" y="755.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="191.9" y="766.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.eq (1 samples, 0.02%)</title><rect x="188.9" y="739.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (1 samples, 0.02%)</title><rect x="188.9" y="723.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="191.9" y="734.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.getTable (1 samples, 0.02%)</title><rect x="189.2" y="739.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.2" y="750.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.expungeStaleEntries (1 samples, 0.02%)</title><rect x="189.2" y="723.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.poll (1 samples, 0.02%)</title><rect x="189.2" y="707.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="192.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.reallyPoll (1 samples, 0.02%)</title><rect x="189.2" y="691.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="192.2" y="702.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.hash (7 samples, 0.16%)</title><rect x="189.4" y="739.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.4" y="750.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (7 samples, 0.16%)</title><rect x="189.4" y="723.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.4" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="189.7" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="192.7" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="190.0" y="707.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="193.0" y="718.0"></text>
</g>
<g>
<title>JVM_IHashCode (4 samples, 0.09%)</title><rect x="190.3" y="707.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="193.3" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="190.3" y="691.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="193.3" y="702.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.02%)</title><rect x="190.5" y="691.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="193.5" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (2 samples, 0.05%)</title><rect x="190.8" y="691.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="193.8" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RedirectFilter.request (2 samples, 0.05%)</title><rect x="191.4" y="787.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="194.4" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.of (7 samples, 0.16%)</title><rect x="191.9" y="803.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="194.9" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.&lt;init&gt; (7 samples, 0.16%)</title><rect x="191.9" y="787.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="194.9" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/TimeoutEvent.&lt;init&gt; (7 samples, 0.16%)</title><rect x="191.9" y="771.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.9" y="782.0"></text>
</g>
<g>
<title>java/time/Instant.now (7 samples, 0.16%)</title><rect x="191.9" y="755.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.9" y="766.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (7 samples, 0.16%)</title><rect x="191.9" y="739.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.9" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (7 samples, 0.16%)</title><rect x="191.9" y="723.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.9" y="734.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (4 samples, 0.09%)</title><rect x="192.5" y="707.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="195.5" y="718.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="192.7" y="691.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="195.7" y="702.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (1 samples, 0.02%)</title><rect x="193.3" y="691.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="196.3" y="702.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="193.3" y="675.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="196.3" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="193.3" y="659.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="196.3" y="670.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (1 samples, 0.02%)</title><rect x="193.6" y="707.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="196.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (76 samples, 1.78%)</title><rect x="193.8" y="867.0" width="21.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (74 samples, 1.73%)</title><rect x="194.4" y="851.0" width="20.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (9 samples, 0.21%)</title><rect x="194.4" y="835.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.4" y="846.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="195.0" y="819.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="198.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="195.5" y="819.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="195.8" y="819.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.05%)</title><rect x="195.8" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="198.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="195.8" y="787.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="195.8" y="771.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="195.8" y="755.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="198.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="195.8" y="739.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="195.8" y="723.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="198.8" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="195.8" y="707.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.8" y="718.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="195.8" y="691.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="198.8" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="195.8" y="675.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="198.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.02%)</title><rect x="196.1" y="787.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="196.1" y="771.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="199.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.02%)</title><rect x="196.1" y="755.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="196.1" y="739.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.1" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils$$Lambda$528/67792651.accept (2 samples, 0.05%)</title><rect x="196.3" y="819.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.3" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils$$Lambda$528/67792651.accept (65 samples, 1.52%)</title><rect x="196.9" y="835.0" width="17.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="199.9" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.lambda$sendResponse$0 (65 samples, 1.52%)</title><rect x="196.9" y="819.0" width="17.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.9" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (55 samples, 1.28%)</title><rect x="196.9" y="803.0" width="15.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="199.9" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (55 samples, 1.28%)</title><rect x="196.9" y="787.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.07%)</title><rect x="198.0" y="771.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.07%)</title><rect x="198.0" y="755.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.07%)</title><rect x="198.0" y="739.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="198.0" y="723.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="201.0" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="198.0" y="707.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="201.0" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="198.3" y="723.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="201.3" y="734.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="198.3" y="707.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="201.3" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="198.3" y="691.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="201.3" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (42 samples, 0.98%)</title><rect x="198.8" y="771.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.26%)</title><rect x="199.1" y="755.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="201.3" y="739.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="201.3" y="723.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="204.3" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="201.3" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="204.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="201.3" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="204.3" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="201.3" y="675.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="204.3" y="686.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="201.3" y="659.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="204.3" y="670.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.05%)</title><rect x="201.6" y="739.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="201.6" y="723.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="201.6" y="707.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.6" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="201.6" y="691.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.6" y="702.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.05%)</title><rect x="201.6" y="675.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.6" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 0.70%)</title><rect x="202.1" y="755.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.1" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 0.70%)</title><rect x="202.1" y="739.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.1" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 0.05%)</title><rect x="202.4" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.4" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (27 samples, 0.63%)</title><rect x="202.9" y="723.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.9" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (27 samples, 0.63%)</title><rect x="202.9" y="707.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.9" y="718.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (9 samples, 0.21%)</title><rect x="203.8" y="691.0" width="2.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="206.8" y="702.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.02%)</title><rect x="204.3" y="675.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="207.3" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.12%)</title><rect x="204.6" y="675.0" width="1.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="207.6" y="686.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="204.9" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="207.9" y="670.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.02%)</title><rect x="205.2" y="659.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="208.2" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="205.4" y="659.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="208.4" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.02%)</title><rect x="205.7" y="659.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="208.7" y="670.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.02%)</title><rect x="206.0" y="675.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="209.0" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="206.3" y="691.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="209.3" y="702.0"></text>
</g>
<g>
<title>__send (13 samples, 0.30%)</title><rect x="206.5" y="691.0" width="3.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="209.5" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.02%)</title><rect x="210.1" y="691.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="213.1" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.14%)</title><rect x="210.4" y="771.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.07%)</title><rect x="211.2" y="755.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.2" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.07%)</title><rect x="211.2" y="739.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="214.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ResponseBuilder.getResponse (10 samples, 0.23%)</title><rect x="212.0" y="803.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/857068247.linkToTargetMethod (3 samples, 0.07%)</title><rect x="212.3" y="787.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.3" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/720467292.invoke (3 samples, 0.07%)</title><rect x="212.3" y="771.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.3" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1376790324.invokeStatic (1 samples, 0.02%)</title><rect x="212.3" y="755.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="215.3" y="766.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.02%)</title><rect x="212.3" y="739.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.stringSize (1 samples, 0.02%)</title><rect x="212.3" y="723.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.3" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="212.3" y="707.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="215.3" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/464676531.invokeStatic (2 samples, 0.05%)</title><rect x="212.6" y="755.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.05%)</title><rect x="212.6" y="739.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.05%)</title><rect x="212.6" y="723.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.6" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.14%)</title><rect x="213.1" y="787.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.1" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="214.2" y="771.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="217.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="214.2" y="755.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="217.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="214.2" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="217.2" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="214.2" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="217.2" y="734.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="214.2" y="707.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="217.2" y="718.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.02%)</title><rect x="214.2" y="691.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="217.2" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="214.5" y="771.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="217.5" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$193/1622429746.get (2 samples, 0.05%)</title><rect x="214.8" y="867.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="217.8" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$639/310460158.get (1 samples, 0.02%)</title><rect x="215.3" y="867.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.3" y="878.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="215.6" y="867.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="218.6" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$639/310460158.get (190 samples, 4.44%)</title><rect x="215.9" y="883.0" width="52.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.9" y="894.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.lambda$get$11 (190 samples, 4.44%)</title><rect x="215.9" y="867.0" width="52.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.9" y="878.0">ru/ma..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="216.7" y="851.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="219.7" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="216.7" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="219.7" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="216.7" y="819.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="219.7" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="216.7" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="219.7" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="216.7" y="787.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="219.7" y="798.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="216.7" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="219.7" y="782.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="216.7" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="219.7" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (178 samples, 4.16%)</title><rect x="217.0" y="851.0" width="49.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.0" y="862.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.02%)</title><rect x="217.0" y="835.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.0" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (8 samples, 0.19%)</title><rect x="217.3" y="835.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.3" y="846.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (5 samples, 0.12%)</title><rect x="217.6" y="819.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.6" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (3 samples, 0.07%)</title><rect x="217.8" y="803.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.8" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (2 samples, 0.05%)</title><rect x="218.1" y="787.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (2 samples, 0.05%)</title><rect x="218.1" y="771.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (2 samples, 0.05%)</title><rect x="218.1" y="755.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.02%)</title><rect x="218.1" y="739.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$689/1973218.getAsBoolean (1 samples, 0.02%)</title><rect x="218.1" y="723.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (1 samples, 0.02%)</title><rect x="218.1" y="707.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="221.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (1 samples, 0.02%)</title><rect x="218.1" y="691.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (1 samples, 0.02%)</title><rect x="218.1" y="675.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (1 samples, 0.02%)</title><rect x="218.4" y="739.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.4" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.02%)</title><rect x="218.7" y="803.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.7" y="814.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.02%)</title><rect x="218.7" y="787.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="218.7" y="771.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="221.7" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="218.7" y="755.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="221.7" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$693/988629209.apply (2 samples, 0.05%)</title><rect x="218.9" y="819.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.9" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (2 samples, 0.05%)</title><rect x="218.9" y="803.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.9" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.02%)</title><rect x="219.2" y="787.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.2" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.02%)</title><rect x="219.2" y="771.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.2" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="219.2" y="755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.2" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="219.2" y="739.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="222.2" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="219.2" y="723.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.2" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="219.2" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="219.2" y="691.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.2" y="702.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.02%)</title><rect x="219.2" y="675.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.2" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (169 samples, 3.95%)</title><rect x="219.5" y="835.0" width="46.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.5" y="846.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (25 samples, 0.58%)</title><rect x="219.5" y="819.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.5" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="219.5" y="803.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="222.5" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (24 samples, 0.56%)</title><rect x="219.8" y="803.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.8" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.02%)</title><rect x="220.3" y="787.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.3" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.02%)</title><rect x="220.6" y="787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.6" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (1 samples, 0.02%)</title><rect x="220.9" y="787.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.9" y="798.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1 samples, 0.02%)</title><rect x="220.9" y="771.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.9" y="782.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1 samples, 0.02%)</title><rect x="221.1" y="787.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="224.1" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1 samples, 0.02%)</title><rect x="221.1" y="771.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.1" y="782.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1 samples, 0.02%)</title><rect x="221.1" y="755.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.1" y="766.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1 samples, 0.02%)</title><rect x="221.1" y="739.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="224.1" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (18 samples, 0.42%)</title><rect x="221.4" y="787.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (18 samples, 0.42%)</title><rect x="221.4" y="771.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (18 samples, 0.42%)</title><rect x="221.4" y="755.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (5 samples, 0.12%)</title><rect x="221.7" y="739.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$689/1973218.getAsBoolean (3 samples, 0.07%)</title><rect x="222.2" y="723.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="225.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (3 samples, 0.07%)</title><rect x="222.2" y="707.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (2 samples, 0.05%)</title><rect x="222.5" y="691.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.05%)</title><rect x="222.5" y="675.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.05%)</title><rect x="222.5" y="659.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.05%)</title><rect x="222.5" y="643.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.05%)</title><rect x="222.5" y="627.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.5" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (12 samples, 0.28%)</title><rect x="223.1" y="739.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.1" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.05%)</title><rect x="224.4" y="723.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.4" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.05%)</title><rect x="224.4" y="707.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="227.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$671/795899443.get$Lambda (1 samples, 0.02%)</title><rect x="224.4" y="691.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.4" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="224.4" y="675.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="227.4" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="224.4" y="659.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="227.4" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="224.4" y="643.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="227.4" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="224.4" y="627.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="227.4" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="224.4" y="611.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="227.4" y="622.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="224.4" y="595.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="227.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$689/1973218.get$Lambda (1 samples, 0.02%)</title><rect x="224.7" y="691.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.7" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="224.7" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="227.7" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="224.7" y="659.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="227.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="224.7" y="643.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="227.7" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="224.7" y="627.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="227.7" y="638.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="224.7" y="611.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="227.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (3 samples, 0.07%)</title><rect x="225.0" y="723.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.02%)</title><rect x="225.3" y="707.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.02%)</title><rect x="225.3" y="691.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.02%)</title><rect x="225.3" y="675.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.02%)</title><rect x="225.5" y="707.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="225.8" y="723.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.8" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.12%)</title><rect x="226.4" y="819.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.4" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="226.9" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="229.9" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.02%)</title><rect x="226.9" y="787.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="229.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="226.9" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="229.9" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="226.9" y="755.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="229.9" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="226.9" y="739.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="229.9" y="750.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="226.9" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="229.9" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="226.9" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="229.9" y="718.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="226.9" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="229.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.02%)</title><rect x="227.2" y="803.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.2" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (1 samples, 0.02%)</title><rect x="227.5" y="803.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.size (2 samples, 0.05%)</title><rect x="227.8" y="819.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.size (2 samples, 0.05%)</title><rect x="227.8" y="803.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (3 samples, 0.07%)</title><rect x="228.3" y="819.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (3 samples, 0.07%)</title><rect x="228.3" y="803.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (3 samples, 0.07%)</title><rect x="228.3" y="787.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.07%)</title><rect x="228.3" y="771.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 0.07%)</title><rect x="228.3" y="755.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.07%)</title><rect x="228.3" y="739.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (2 samples, 0.05%)</title><rect x="228.6" y="723.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.02%)</title><rect x="228.9" y="707.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.02%)</title><rect x="228.9" y="691.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.02%)</title><rect x="228.9" y="675.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (4 samples, 0.09%)</title><rect x="229.1" y="819.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.1" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (4 samples, 0.09%)</title><rect x="229.1" y="803.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.1" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.07%)</title><rect x="229.4" y="787.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.4" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (3 samples, 0.07%)</title><rect x="229.4" y="771.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.4" y="782.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (3 samples, 0.07%)</title><rect x="229.4" y="755.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (2 samples, 0.05%)</title><rect x="229.7" y="739.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (2 samples, 0.05%)</title><rect x="229.7" y="723.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (2 samples, 0.05%)</title><rect x="229.7" y="707.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="232.7" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="230.0" y="691.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.0" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="230.0" y="675.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$671/795899443.get$Lambda (1 samples, 0.02%)</title><rect x="230.0" y="659.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.0" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (130 samples, 3.04%)</title><rect x="230.2" y="819.0" width="35.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.2" y="830.0">ru/..</text>
</g>
<g>
<title>java/util/Collection.stream (119 samples, 2.78%)</title><rect x="230.2" y="803.0" width="32.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.2" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (110 samples, 2.57%)</title><rect x="230.2" y="787.0" width="30.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.2" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (109 samples, 2.55%)</title><rect x="230.5" y="771.0" width="30.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.5" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (109 samples, 2.55%)</title><rect x="230.5" y="755.0" width="30.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.5" y="766.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/VarHandle.acquireFence (1 samples, 0.02%)</title><rect x="231.3" y="739.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (1 samples, 0.02%)</title><rect x="231.6" y="739.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.02%)</title><rect x="231.6" y="723.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.02%)</title><rect x="231.6" y="707.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (104 samples, 2.43%)</title><rect x="231.9" y="739.0" width="28.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.9" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (104 samples, 2.43%)</title><rect x="231.9" y="723.0" width="28.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.9" y="734.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.02%)</title><rect x="232.7" y="707.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="235.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.07%)</title><rect x="233.0" y="707.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.0" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.07%)</title><rect x="233.0" y="691.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.0" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.07%)</title><rect x="233.0" y="675.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.0" y="686.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.05%)</title><rect x="233.0" y="659.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.0" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="233.5" y="659.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.5" y="670.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.02%)</title><rect x="233.5" y="643.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="236.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (97 samples, 2.27%)</title><rect x="233.8" y="707.0" width="26.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.8" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (38 samples, 0.89%)</title><rect x="250.1" y="691.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (33 samples, 0.77%)</title><rect x="251.5" y="675.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.5" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (33 samples, 0.77%)</title><rect x="251.5" y="659.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.5" y="670.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.14%)</title><rect x="251.5" y="643.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.5" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (27 samples, 0.63%)</title><rect x="253.1" y="643.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.1" y="654.0"></text>
</g>
<g>
<title>vectorizedMismatch (8 samples, 0.19%)</title><rect x="258.3" y="627.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="261.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (9 samples, 0.21%)</title><rect x="260.6" y="787.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="263.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.07%)</title><rect x="261.4" y="771.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="264.4" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.07%)</title><rect x="261.4" y="755.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="264.4" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.07%)</title><rect x="261.4" y="739.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="264.4" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="261.4" y="723.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="264.4" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="261.4" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="264.4" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="261.4" y="691.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="264.4" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title><rect x="261.4" y="675.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="264.4" y="686.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.02%)</title><rect x="261.4" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="264.4" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="261.7" y="691.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="264.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="261.7" y="675.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="264.7" y="686.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="261.9" y="723.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="264.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (2 samples, 0.05%)</title><rect x="262.2" y="771.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="265.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (2 samples, 0.05%)</title><rect x="262.2" y="755.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (2 samples, 0.05%)</title><rect x="262.2" y="739.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.02%)</title><rect x="262.8" y="771.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.characteristics (1 samples, 0.02%)</title><rect x="262.8" y="755.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (1 samples, 0.02%)</title><rect x="263.0" y="803.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (7 samples, 0.16%)</title><rect x="263.3" y="803.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (7 samples, 0.16%)</title><rect x="263.3" y="787.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (7 samples, 0.16%)</title><rect x="263.3" y="771.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (4 samples, 0.09%)</title><rect x="264.1" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (1 samples, 0.02%)</title><rect x="265.0" y="739.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (2 samples, 0.05%)</title><rect x="265.2" y="803.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.2" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (1 samples, 0.02%)</title><rect x="265.2" y="787.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="265.2" y="771.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="268.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="265.2" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="268.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="265.2" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="268.2" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="265.2" y="723.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="268.2" y="734.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.02%)</title><rect x="265.2" y="707.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="268.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (1 samples, 0.02%)</title><rect x="265.5" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.5" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="265.5" y="771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.5" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="265.5" y="755.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.5" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$650/142146322.get$Lambda (1 samples, 0.02%)</title><rect x="265.5" y="739.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.5" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.02%)</title><rect x="265.8" y="803.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Value.getData (4 samples, 0.09%)</title><rect x="266.1" y="851.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.1" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.09%)</title><rect x="266.1" y="835.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.1" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.09%)</title><rect x="266.1" y="819.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.1" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="266.1" y="803.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="266.1" y="787.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.1" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.07%)</title><rect x="266.3" y="771.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="269.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.byteBufferToByte (1 samples, 0.02%)</title><rect x="267.2" y="851.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.2" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.02%)</title><rect x="267.2" y="835.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.2" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="267.2" y="819.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.2" y="830.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="267.2" y="803.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="270.2" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (3 samples, 0.07%)</title><rect x="267.4" y="851.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.4" y="862.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.05%)</title><rect x="267.4" y="835.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.4" y="846.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.05%)</title><rect x="267.4" y="819.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.4" y="830.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.05%)</title><rect x="267.4" y="803.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.4" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.05%)</title><rect x="267.4" y="787.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="267.7" y="771.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="270.7" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="267.7" y="755.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="270.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="267.7" y="739.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="270.7" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="267.7" y="723.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="270.7" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="267.7" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="270.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="267.7" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="270.7" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="268.0" y="835.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.0" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="268.0" y="819.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (93 samples, 2.17%)</title><rect x="268.3" y="899.0" width="25.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.3" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (20 samples, 0.47%)</title><rect x="268.3" y="883.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (17 samples, 0.40%)</title><rect x="269.1" y="867.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (17 samples, 0.40%)</title><rect x="269.1" y="851.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (15 samples, 0.35%)</title><rect x="269.6" y="835.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="272.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 0.33%)</title><rect x="269.9" y="819.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (14 samples, 0.33%)</title><rect x="269.9" y="803.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 0.33%)</title><rect x="269.9" y="787.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (14 samples, 0.33%)</title><rect x="269.9" y="771.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.05%)</title><rect x="270.5" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.05%)</title><rect x="270.5" y="739.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.05%)</title><rect x="270.5" y="723.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.05%)</title><rect x="270.5" y="707.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.05%)</title><rect x="270.5" y="691.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="271.0" y="755.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="271.0" y="739.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="271.0" y="723.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="271.0" y="707.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="271.0" y="691.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.0" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="271.3" y="675.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="271.3" y="659.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="274.3" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.02%)</title><rect x="271.3" y="643.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="274.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.19%)</title><rect x="271.6" y="755.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.19%)</title><rect x="271.6" y="739.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.19%)</title><rect x="271.6" y="723.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.19%)</title><rect x="271.6" y="707.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.02%)</title><rect x="271.9" y="691.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.14%)</title><rect x="272.1" y="691.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="275.1" y="702.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="272.1" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="275.1" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="272.4" y="675.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="275.4" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.02%)</title><rect x="272.7" y="675.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="275.7" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="272.7" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="275.7" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.07%)</title><rect x="273.0" y="675.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="276.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (73 samples, 1.71%)</title><rect x="273.8" y="883.0" width="20.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (9 samples, 0.21%)</title><rect x="273.8" y="867.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (8 samples, 0.19%)</title><rect x="274.1" y="851.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.1" y="862.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="274.9" y="835.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="277.9" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$235/2044206769.accept (2 samples, 0.05%)</title><rect x="275.4" y="835.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils$$Lambda$230/1479809634.accept (1 samples, 0.02%)</title><rect x="276.0" y="835.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (64 samples, 1.49%)</title><rect x="276.3" y="867.0" width="17.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.3" y="878.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.07%)</title><rect x="276.8" y="851.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="279.8" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$210/380517882.apply (1 samples, 0.02%)</title><rect x="277.6" y="851.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.6" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$235/2044206769.accept (43 samples, 1.00%)</title><rect x="277.9" y="851.0" width="11.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.9" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.lambda$mergeAndSendResponse$13 (42 samples, 0.98%)</title><rect x="277.9" y="835.0" width="11.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.9" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.sendResponse (31 samples, 0.72%)</title><rect x="277.9" y="819.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.9" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (30 samples, 0.70%)</title><rect x="278.2" y="803.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.07%)</title><rect x="278.2" y="787.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.07%)</title><rect x="278.2" y="771.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.07%)</title><rect x="278.2" y="755.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="281.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="278.2" y="739.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="281.2" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="278.2" y="723.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="281.2" y="734.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="278.5" y="739.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="281.5" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="278.7" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="281.7" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="278.7" y="723.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="281.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (22 samples, 0.51%)</title><rect x="279.0" y="787.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.07%)</title><rect x="279.0" y="771.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.0" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (19 samples, 0.44%)</title><rect x="279.8" y="771.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.8" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (19 samples, 0.44%)</title><rect x="279.8" y="755.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.8" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (17 samples, 0.40%)</title><rect x="280.4" y="739.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (17 samples, 0.40%)</title><rect x="280.4" y="723.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.4" y="734.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (11 samples, 0.26%)</title><rect x="280.4" y="707.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="283.4" y="718.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.02%)</title><rect x="281.8" y="691.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="284.8" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="282.1" y="691.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="285.1" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.07%)</title><rect x="282.3" y="691.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="285.3" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.05%)</title><rect x="282.6" y="675.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="285.6" y="686.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.02%)</title><rect x="282.9" y="659.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="285.9" y="670.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.02%)</title><rect x="283.2" y="691.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="286.2" y="702.0"></text>
</g>
<g>
<title>__send (6 samples, 0.14%)</title><rect x="283.4" y="707.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="286.4" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.12%)</title><rect x="285.1" y="787.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="286.2" y="771.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="286.2" y="755.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$640/980730005.mergeResponse (11 samples, 0.26%)</title><rect x="286.5" y="819.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.5" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.lambda$handleResponses$3 (11 samples, 0.26%)</title><rect x="286.5" y="803.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.5" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.mergeGetResponseBuilders (10 samples, 0.23%)</title><rect x="286.7" y="787.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.getResponseFromValues (1 samples, 0.02%)</title><rect x="287.3" y="771.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ResponseBuilder.getResponse (1 samples, 0.02%)</title><rect x="287.3" y="755.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.3" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ResponseBuilder.&lt;init&gt; (2 samples, 0.05%)</title><rect x="287.6" y="771.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ResponseBuilder.&lt;init&gt; (2 samples, 0.05%)</title><rect x="287.6" y="755.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.6" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="287.8" y="739.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="290.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ResponseBuilder.getResponse (3 samples, 0.07%)</title><rect x="288.1" y="771.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.1" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/857068247.linkToTargetMethod (2 samples, 0.05%)</title><rect x="288.1" y="755.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.1" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/720467292.invoke (2 samples, 0.05%)</title><rect x="288.1" y="739.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.1" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="288.1" y="723.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.1" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.02%)</title><rect x="288.1" y="707.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.1" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.02%)</title><rect x="288.1" y="691.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.1" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1376790324.invokeStatic (1 samples, 0.02%)</title><rect x="288.4" y="723.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.4" y="734.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.02%)</title><rect x="288.4" y="707.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.stringSize (1 samples, 0.02%)</title><rect x="288.4" y="691.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="291.4" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="288.4" y="675.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="291.4" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.02%)</title><rect x="288.7" y="755.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.7" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ResponseBuilder.getStatusCode (2 samples, 0.05%)</title><rect x="288.9" y="771.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="289.2" y="755.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.mergeGetResponseBuilders (1 samples, 0.02%)</title><rect x="289.5" y="835.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils$$Lambda$230/1479809634.accept (15 samples, 0.35%)</title><rect x="289.8" y="851.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.8" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.lambda$collateFutures$0 (15 samples, 0.35%)</title><rect x="289.8" y="835.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (10 samples, 0.23%)</title><rect x="290.0" y="819.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (10 samples, 0.23%)</title><rect x="290.0" y="803.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.07%)</title><rect x="292.0" y="787.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="295.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.07%)</title><rect x="292.0" y="771.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.07%)</title><rect x="292.0" y="755.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="292.0" y="739.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="292.3" y="739.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.05%)</title><rect x="292.3" y="723.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="292.3" y="707.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="292.3" y="691.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="292.3" y="675.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="292.3" y="659.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="292.3" y="643.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="292.3" y="627.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.02%)</title><rect x="292.5" y="707.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="295.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title><rect x="292.5" y="691.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.02%)</title><rect x="292.5" y="675.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="295.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title><rect x="292.5" y="659.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.02%)</title><rect x="292.5" y="643.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.add (4 samples, 0.09%)</title><rect x="292.8" y="819.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.8" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="293.6" y="803.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="293.6" y="787.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="296.6" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.02%)</title><rect x="293.6" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="296.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="293.6" y="755.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="296.6" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="293.6" y="739.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="296.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (50 samples, 1.17%)</title><rect x="293.9" y="899.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (50 samples, 1.17%)</title><rect x="293.9" y="883.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (50 samples, 1.17%)</title><rect x="293.9" y="867.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.02%)</title><rect x="296.4" y="851.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="299.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (40 samples, 0.93%)</title><rect x="296.7" y="851.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.7" y="862.0"></text>
</g>
<g>
<title>itable stub (9 samples, 0.21%)</title><rect x="299.7" y="835.0" width="2.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="302.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (7 samples, 0.16%)</title><rect x="302.2" y="835.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (2 samples, 0.05%)</title><rect x="304.1" y="835.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="307.1" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$193/1622429746.get (1 samples, 0.02%)</title><rect x="304.7" y="835.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="307.7" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$462/1898580517.run (1 samples, 0.02%)</title><rect x="304.9" y="835.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="307.9" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (6 samples, 0.14%)</title><rect x="305.2" y="835.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$112/637964804.run (3 samples, 0.07%)</title><rect x="306.9" y="835.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="309.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (899 samples, 21.00%)</title><rect x="307.7" y="899.0" width="247.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.7" y="910.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (524 samples, 12.24%)</title><rect x="311.3" y="883.0" width="144.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.3" y="894.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (452 samples, 10.56%)</title><rect x="314.3" y="867.0" width="124.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.3" y="878.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.02%)</title><rect x="314.9" y="851.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.9" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="314.9" y="835.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="317.9" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="314.9" y="819.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="317.9" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="314.9" y="803.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="317.9" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="314.9" y="787.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="317.9" y="798.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="314.9" y="771.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="317.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.02%)</title><rect x="315.1" y="851.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="318.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.02%)</title><rect x="315.1" y="835.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.1" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="315.1" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="318.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (32 samples, 0.75%)</title><rect x="315.4" y="851.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (32 samples, 0.75%)</title><rect x="315.4" y="835.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="318.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (32 samples, 0.75%)</title><rect x="315.4" y="819.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.4" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.09%)</title><rect x="323.1" y="803.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.1" y="814.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.05%)</title><rect x="323.1" y="787.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="326.1" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="323.1" y="771.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="326.1" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="323.4" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="326.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="323.7" y="787.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="326.7" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.05%)</title><rect x="323.7" y="771.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="326.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (86 samples, 2.01%)</title><rect x="324.2" y="851.0" width="23.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="327.2" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (86 samples, 2.01%)</title><rect x="324.2" y="835.0" width="23.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.2" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (65 samples, 1.52%)</title><rect x="328.4" y="819.0" width="17.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (65 samples, 1.52%)</title><rect x="328.4" y="803.0" width="17.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.4" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (63 samples, 1.47%)</title><rect x="328.9" y="787.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="331.9" y="798.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="329.7" y="771.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="332.7" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="330.0" y="771.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="333.0" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (25 samples, 0.58%)</title><rect x="330.3" y="771.0" width="6.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="333.3" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="330.6" y="755.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="333.6" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="330.8" y="755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="333.8" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.02%)</title><rect x="331.1" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="334.1" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.07%)</title><rect x="331.4" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="334.4" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (8 samples, 0.19%)</title><rect x="332.2" y="755.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="335.2" y="766.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="334.1" y="739.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="337.1" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.05%)</title><rect x="334.4" y="755.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="337.4" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.05%)</title><rect x="335.0" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="338.0" y="766.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="335.5" y="755.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="338.5" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.07%)</title><rect x="336.1" y="755.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="339.1" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.02%)</title><rect x="336.9" y="755.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="339.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="337.2" y="771.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="340.2" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="337.2" y="755.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="340.2" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (32 samples, 0.75%)</title><rect x="337.5" y="771.0" width="8.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="340.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (6 samples, 0.14%)</title><rect x="346.3" y="819.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="349.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (16 samples, 0.37%)</title><rect x="347.9" y="851.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (16 samples, 0.37%)</title><rect x="347.9" y="835.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (311 samples, 7.26%)</title><rect x="352.3" y="851.0" width="85.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.3" y="862.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (308 samples, 7.19%)</title><rect x="353.2" y="835.0" width="84.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.2" y="846.0">jdk/intern..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="354.5" y="819.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="357.5" y="830.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="354.8" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="357.8" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="355.1" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="358.1" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (180 samples, 4.20%)</title><rect x="355.4" y="819.0" width="49.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="358.4" y="830.0">Unsaf..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (4 samples, 0.09%)</title><rect x="359.0" y="803.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="362.0" y="814.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (7 samples, 0.16%)</title><rect x="360.1" y="803.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="363.1" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.05%)</title><rect x="362.0" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="365.0" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (61 samples, 1.42%)</title><rect x="362.5" y="803.0" width="16.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="365.5" y="814.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="372.2" y="787.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="375.2" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (15 samples, 0.35%)</title><rect x="372.5" y="787.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="375.5" y="798.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (5 samples, 0.12%)</title><rect x="375.2" y="771.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="378.2" y="782.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.07%)</title><rect x="376.6" y="787.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="379.6" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.12%)</title><rect x="377.4" y="787.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="380.4" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.05%)</title><rect x="378.8" y="787.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="381.8" y="798.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (3 samples, 0.07%)</title><rect x="379.4" y="803.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="382.4" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.09%)</title><rect x="380.2" y="803.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="383.2" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (2 samples, 0.05%)</title><rect x="381.3" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="384.3" y="814.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="381.8" y="803.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="384.8" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (70 samples, 1.64%)</title><rect x="382.1" y="803.0" width="19.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="385.1" y="814.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.05%)</title><rect x="401.4" y="803.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="404.4" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (3 samples, 0.07%)</title><rect x="402.0" y="803.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="405.0" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.05%)</title><rect x="402.8" y="803.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="405.8" y="814.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (4 samples, 0.09%)</title><rect x="403.3" y="803.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="406.3" y="814.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (2 samples, 0.05%)</title><rect x="404.4" y="803.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="407.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (116 samples, 2.71%)</title><rect x="405.0" y="819.0" width="32.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="408.0" y="830.0">[u..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (7 samples, 0.16%)</title><rect x="405.0" y="803.0" width="1.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="408.0" y="814.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.07%)</title><rect x="406.9" y="803.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="409.9" y="814.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (2 samples, 0.05%)</title><rect x="407.7" y="803.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="410.7" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_wait (87 samples, 2.03%)</title><rect x="408.3" y="803.0" width="24.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="411.3" y="814.0">_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (11 samples, 0.26%)</title><rect x="432.3" y="803.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="435.3" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.07%)</title><rect x="435.3" y="803.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="438.3" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.05%)</title><rect x="436.1" y="803.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="439.1" y="814.0"></text>
</g>
<g>
<title>_pthread_cleanup_pop (1 samples, 0.02%)</title><rect x="436.7" y="803.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="439.7" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.09%)</title><rect x="437.0" y="819.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="440.0" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.07%)</title><rect x="438.1" y="851.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="441.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.14%)</title><rect x="438.9" y="867.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.14%)</title><rect x="438.9" y="851.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (6 samples, 0.14%)</title><rect x="438.9" y="835.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="441.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.02%)</title><rect x="438.9" y="819.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="441.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.07%)</title><rect x="439.2" y="819.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="442.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.07%)</title><rect x="439.2" y="803.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.2" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.07%)</title><rect x="439.2" y="787.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="442.2" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.05%)</title><rect x="439.2" y="771.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="442.2" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="439.4" y="755.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="442.4" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title><rect x="439.7" y="771.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="442.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="440.0" y="819.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="443.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="440.0" y="803.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="443.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="440.3" y="819.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (55 samples, 1.28%)</title><rect x="440.5" y="867.0" width="15.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="443.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (55 samples, 1.28%)</title><rect x="440.5" y="851.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="443.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (55 samples, 1.28%)</title><rect x="440.5" y="835.0" width="15.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (55 samples, 1.28%)</title><rect x="440.5" y="819.0" width="15.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="443.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 0.07%)</title><rect x="443.9" y="803.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="446.9" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (40 samples, 0.93%)</title><rect x="444.7" y="803.0" width="11.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="447.7" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.02%)</title><rect x="444.7" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="447.7" y="798.0"></text>
</g>
<g>
<title>Unsafe_Unpark (26 samples, 0.61%)</title><rect x="445.0" y="787.0" width="7.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="448.0" y="798.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.05%)</title><rect x="445.5" y="771.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="448.5" y="782.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="446.1" y="771.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="449.1" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.02%)</title><rect x="446.3" y="771.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="449.3" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="446.6" y="771.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="449.6" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (8 samples, 0.19%)</title><rect x="446.9" y="771.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="449.9" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (3 samples, 0.07%)</title><rect x="449.1" y="771.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="452.1" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.05%)</title><rect x="449.9" y="771.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="452.9" y="782.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="450.5" y="771.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="453.5" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.09%)</title><rect x="451.0" y="771.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="454.0" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (13 samples, 0.30%)</title><rect x="452.1" y="787.0" width="3.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="455.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (1 samples, 0.02%)</title><rect x="455.7" y="883.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="458.7" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (1 samples, 0.02%)</title><rect x="455.7" y="867.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="458.7" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.hasOutgoing (1 samples, 0.02%)</title><rect x="455.7" y="851.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.isEmpty (1 samples, 0.02%)</title><rect x="455.7" y="835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="458.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (1 samples, 0.02%)</title><rect x="455.7" y="819.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="458.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (361 samples, 8.43%)</title><rect x="456.0" y="883.0" width="99.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="459.0" y="894.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (235 samples, 5.49%)</title><rect x="456.3" y="867.0" width="64.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="459.3" y="878.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 0.47%)</title><rect x="456.5" y="851.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="459.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (20 samples, 0.47%)</title><rect x="456.5" y="835.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (20 samples, 0.47%)</title><rect x="456.5" y="819.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="459.5" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="461.8" y="803.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.8" y="814.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="461.8" y="787.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="464.8" y="798.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="461.8" y="771.0" width="0.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="464.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (28 samples, 0.65%)</title><rect x="462.0" y="851.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="465.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 0.65%)</title><rect x="462.0" y="835.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="465.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 0.54%)</title><rect x="463.4" y="819.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.54%)</title><rect x="463.4" y="803.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="466.4" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.54%)</title><rect x="463.4" y="787.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="466.4" y="798.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.05%)</title><rect x="463.4" y="771.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="466.4" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (11 samples, 0.26%)</title><rect x="464.0" y="771.0" width="3.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="467.0" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.02%)</title><rect x="464.0" y="755.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="467.0" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="464.2" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="467.2" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.07%)</title><rect x="464.5" y="755.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="467.5" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="465.4" y="755.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="468.4" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.12%)</title><rect x="465.6" y="755.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="468.6" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 0.23%)</title><rect x="467.0" y="771.0" width="2.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="470.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (3 samples, 0.07%)</title><rect x="469.8" y="851.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="472.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (3 samples, 0.07%)</title><rect x="469.8" y="835.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="472.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (182 samples, 4.25%)</title><rect x="470.6" y="851.0" width="50.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="473.6" y="862.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (180 samples, 4.20%)</title><rect x="471.1" y="835.0" width="49.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="474.1" y="846.0">jdk/i..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="472.2" y="819.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="475.2" y="830.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="472.5" y="819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="475.5" y="830.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="472.8" y="819.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="475.8" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.05%)</title><rect x="473.1" y="819.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="476.1" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.02%)</title><rect x="473.6" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="476.6" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (96 samples, 2.24%)</title><rect x="473.9" y="819.0" width="26.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="476.9" y="830.0">U..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title><rect x="474.7" y="803.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="477.7" y="814.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.05%)</title><rect x="475.0" y="803.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="478.0" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="475.6" y="803.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="478.6" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.02%)</title><rect x="475.8" y="803.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="478.8" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (34 samples, 0.79%)</title><rect x="476.1" y="803.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="479.1" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.16%)</title><rect x="481.3" y="787.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="484.3" y="798.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (4 samples, 0.09%)</title><rect x="482.2" y="771.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="485.2" y="782.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.07%)</title><rect x="483.3" y="787.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="486.3" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.12%)</title><rect x="484.1" y="787.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="487.1" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.05%)</title><rect x="485.5" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="488.5" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (2 samples, 0.05%)</title><rect x="486.0" y="803.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="489.0" y="814.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="486.6" y="803.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="489.6" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (40 samples, 0.93%)</title><rect x="486.9" y="803.0" width="11.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="489.9" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title><rect x="497.9" y="803.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="500.9" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (8 samples, 0.19%)</title><rect x="498.2" y="803.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="501.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 1.61%)</title><rect x="500.4" y="819.0" width="19.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="503.4" y="830.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (4 samples, 0.09%)</title><rect x="500.4" y="803.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="503.4" y="814.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.07%)</title><rect x="501.5" y="803.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="504.5" y="814.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (2 samples, 0.05%)</title><rect x="502.3" y="803.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="505.3" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_wait (53 samples, 1.24%)</title><rect x="502.8" y="803.0" width="14.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="505.8" y="814.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.07%)</title><rect x="517.4" y="803.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="520.4" y="814.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="518.3" y="803.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="521.3" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.02%)</title><rect x="518.5" y="803.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="521.5" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.05%)</title><rect x="518.8" y="803.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="521.8" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.12%)</title><rect x="519.4" y="819.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="522.4" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="520.8" y="851.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="523.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (73 samples, 1.71%)</title><rect x="521.0" y="867.0" width="20.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="524.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (70 samples, 1.64%)</title><rect x="521.0" y="851.0" width="19.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="524.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (59 samples, 1.38%)</title><rect x="523.0" y="835.0" width="16.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="526.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (41 samples, 0.96%)</title><rect x="523.8" y="819.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="526.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (3 samples, 0.07%)</title><rect x="530.1" y="803.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="533.1" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (3 samples, 0.07%)</title><rect x="530.1" y="787.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="533.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.02%)</title><rect x="531.0" y="803.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="531.0" y="787.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="534.0" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.02%)</title><rect x="531.0" y="771.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="534.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (14 samples, 0.33%)</title><rect x="531.2" y="803.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.2" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (14 samples, 0.33%)</title><rect x="531.2" y="787.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="534.2" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (12 samples, 0.28%)</title><rect x="531.2" y="771.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="534.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.05%)</title><rect x="534.5" y="771.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="537.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (11 samples, 0.26%)</title><rect x="535.1" y="819.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="538.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 0.23%)</title><rect x="535.4" y="803.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="538.4" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (10 samples, 0.23%)</title><rect x="535.4" y="787.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="538.4" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park (6 samples, 0.14%)</title><rect x="535.4" y="771.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="538.4" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="535.4" y="755.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="538.4" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.02%)</title><rect x="535.6" y="739.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="538.6" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.02%)</title><rect x="535.9" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="538.9" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="536.2" y="755.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="539.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.09%)</title><rect x="537.0" y="771.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="540.0" y="782.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.02%)</title><rect x="537.0" y="755.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="540.0" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.05%)</title><rect x="537.3" y="755.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="540.3" y="766.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="537.8" y="755.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="540.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.05%)</title><rect x="538.1" y="819.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="541.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.02%)</title><rect x="538.7" y="819.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="541.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="538.9" y="819.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="541.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="538.9" y="803.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="541.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.02%)</title><rect x="538.9" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="541.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.09%)</title><rect x="539.2" y="835.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="542.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.09%)</title><rect x="539.2" y="819.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.07%)</title><rect x="539.2" y="803.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="542.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="540.0" y="803.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="543.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="540.0" y="787.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="543.0" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.07%)</title><rect x="540.3" y="851.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="543.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (52 samples, 1.21%)</title><rect x="541.2" y="867.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="544.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (52 samples, 1.21%)</title><rect x="541.2" y="851.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (52 samples, 1.21%)</title><rect x="541.2" y="835.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="544.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (52 samples, 1.21%)</title><rect x="541.2" y="819.0" width="14.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.2" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (52 samples, 1.21%)</title><rect x="541.2" y="803.0" width="14.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="544.2" y="814.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="541.4" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="544.4" y="798.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="541.7" y="787.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="544.7" y="798.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (4 samples, 0.09%)</title><rect x="542.0" y="787.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="545.0" y="798.0"></text>
</g>
<g>
<title>Unsafe_Unpark (22 samples, 0.51%)</title><rect x="543.1" y="787.0" width="6.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="546.1" y="798.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.07%)</title><rect x="544.2" y="771.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="547.2" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.14%)</title><rect x="545.0" y="771.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="548.0" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="546.1" y="755.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="549.1" y="766.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="546.4" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="549.4" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="546.7" y="771.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="549.7" y="782.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="546.9" y="771.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="549.9" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.14%)</title><rect x="547.5" y="771.0" width="1.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="550.5" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (22 samples, 0.51%)</title><rect x="549.1" y="787.0" width="6.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="552.1" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="555.2" y="787.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="558.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$462/1898580517.run (121 samples, 2.83%)</title><rect x="555.5" y="899.0" width="33.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="558.5" y="910.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (121 samples, 2.83%)</title><rect x="555.5" y="883.0" width="33.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="558.5" y="894.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (121 samples, 2.83%)</title><rect x="555.5" y="867.0" width="33.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="558.5" y="878.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (106 samples, 2.48%)</title><rect x="559.3" y="851.0" width="29.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="562.3" y="862.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (106 samples, 2.48%)</title><rect x="559.3" y="835.0" width="29.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="562.3" y="846.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (106 samples, 2.48%)</title><rect x="559.3" y="819.0" width="29.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="562.3" y="830.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (104 samples, 2.43%)</title><rect x="559.6" y="803.0" width="28.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="562.6" y="814.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (103 samples, 2.41%)</title><rect x="559.9" y="787.0" width="28.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="562.9" y="798.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (103 samples, 2.41%)</title><rect x="559.9" y="771.0" width="28.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.9" y="782.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (103 samples, 2.41%)</title><rect x="559.9" y="755.0" width="28.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.9" y="766.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (102 samples, 2.38%)</title><rect x="560.2" y="739.0" width="28.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="563.2" y="750.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getOutgoing (47 samples, 1.10%)</title><rect x="561.0" y="723.0" width="13.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="564.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (36 samples, 0.84%)</title><rect x="561.8" y="707.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="564.8" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (36 samples, 0.84%)</title><rect x="561.8" y="691.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="564.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (29 samples, 0.68%)</title><rect x="563.5" y="675.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="566.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (29 samples, 0.68%)</title><rect x="563.5" y="659.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="566.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (13 samples, 0.30%)</title><rect x="563.8" y="643.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="566.8" y="654.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.07%)</title><rect x="565.1" y="627.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="568.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$484/1129193864.apply (3 samples, 0.07%)</title><rect x="566.0" y="627.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="569.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$sendRequestBody$6 (1 samples, 0.02%)</title><rect x="566.5" y="611.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="569.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getResponseAsync (1 samples, 0.02%)</title><rect x="566.5" y="595.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="569.5" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readHeadersAsync (1 samples, 0.02%)</title><rect x="566.5" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="569.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApplyAsync (1 samples, 0.02%)</title><rect x="566.5" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="569.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (1 samples, 0.02%)</title><rect x="566.5" y="547.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="569.5" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$191/1057916871.apply (2 samples, 0.05%)</title><rect x="566.8" y="627.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="569.8" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (2 samples, 0.05%)</title><rect x="566.8" y="611.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (2 samples, 0.05%)</title><rect x="566.8" y="595.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="569.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (2 samples, 0.05%)</title><rect x="566.8" y="579.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="569.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (2 samples, 0.05%)</title><rect x="566.8" y="563.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.8" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.05%)</title><rect x="566.8" y="547.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="569.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$558/902590235.run (2 samples, 0.05%)</title><rect x="566.8" y="531.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="569.8" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$3 (2 samples, 0.05%)</title><rect x="566.8" y="515.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="569.8" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (2 samples, 0.05%)</title><rect x="566.8" y="499.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="569.8" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.05%)</title><rect x="566.8" y="483.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="569.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.05%)</title><rect x="566.8" y="467.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="569.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (2 samples, 0.05%)</title><rect x="566.8" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="569.8" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (2 samples, 0.05%)</title><rect x="566.8" y="435.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="569.8" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (2 samples, 0.05%)</title><rect x="566.8" y="419.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="569.8" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$341/145997440.run (2 samples, 0.05%)</title><rect x="566.8" y="403.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.8" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (2 samples, 0.05%)</title><rect x="566.8" y="387.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.tryAsyncReceive (2 samples, 0.05%)</title><rect x="566.8" y="371.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.8" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (2 samples, 0.05%)</title><rect x="566.8" y="355.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="569.8" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (2 samples, 0.05%)</title><rect x="566.8" y="339.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="569.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (2 samples, 0.05%)</title><rect x="566.8" y="323.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.8" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (2 samples, 0.05%)</title><rect x="566.8" y="307.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.8" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (2 samples, 0.05%)</title><rect x="566.8" y="291.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="569.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$567/106021012.run (2 samples, 0.05%)</title><rect x="566.8" y="275.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="569.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (2 samples, 0.05%)</title><rect x="566.8" y="259.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="569.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.closeOrReturnToCache (2 samples, 0.05%)</title><rect x="566.8" y="243.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (2 samples, 0.05%)</title><rect x="566.8" y="227.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="569.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (2 samples, 0.05%)</title><rect x="566.8" y="211.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="569.8" y="222.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="566.8" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="569.8" y="206.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="566.8" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="569.8" y="190.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="566.8" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="569.8" y="174.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.02%)</title><rect x="566.8" y="147.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="569.8" y="158.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.add (1 samples, 0.02%)</title><rect x="567.1" y="195.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="570.1" y="206.0"></text>
</g>
<g>
<title>java/time/Instant.plus (1 samples, 0.02%)</title><rect x="567.1" y="179.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="570.1" y="190.0"></text>
</g>
<g>
<title>java/time/Instant.plusSeconds (1 samples, 0.02%)</title><rect x="567.1" y="163.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.1" y="174.0"></text>
</g>
<g>
<title>java/time/Instant.plus (1 samples, 0.02%)</title><rect x="567.1" y="147.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="570.1" y="158.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (1 samples, 0.02%)</title><rect x="567.1" y="131.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="570.1" y="142.0"></text>
</g>
<g>
<title>java/time/Instant.create (1 samples, 0.02%)</title><rect x="567.1" y="115.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="570.1" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (15 samples, 0.35%)</title><rect x="567.3" y="643.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="570.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (14 samples, 0.33%)</title><rect x="567.6" y="627.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="570.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 0.09%)</title><rect x="567.6" y="611.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="570.6" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="568.2" y="595.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="571.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$439/1214099568.apply (1 samples, 0.02%)</title><rect x="568.4" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="571.4" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$439/1214099568.apply (10 samples, 0.23%)</title><rect x="568.7" y="611.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="571.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$7 (10 samples, 0.23%)</title><rect x="568.7" y="595.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="571.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (10 samples, 0.23%)</title><rect x="568.7" y="579.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="571.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$207/1245067522.apply (7 samples, 0.16%)</title><rect x="568.7" y="563.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="571.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.sendRequestBody (7 samples, 0.16%)</title><rect x="568.7" y="547.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="571.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.02%)</title><rect x="568.7" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.7" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.wrapForLog (2 samples, 0.05%)</title><rect x="569.0" y="531.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="572.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Log.requests (2 samples, 0.05%)</title><rect x="569.0" y="515.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (1 samples, 0.02%)</title><rect x="569.3" y="499.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="572.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendBodyAsync (4 samples, 0.09%)</title><rect x="569.5" y="531.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="572.5" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (4 samples, 0.09%)</title><rect x="569.5" y="515.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="572.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (4 samples, 0.09%)</title><rect x="569.5" y="499.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="572.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (4 samples, 0.09%)</title><rect x="569.5" y="483.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="572.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (4 samples, 0.09%)</title><rect x="569.5" y="467.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="572.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1BodySubscriber.completeSubscriber (2 samples, 0.05%)</title><rect x="570.1" y="451.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="573.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$213/704007913.apply (3 samples, 0.07%)</title><rect x="570.6" y="563.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="573.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (3 samples, 0.07%)</title><rect x="570.6" y="547.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="573.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (1 samples, 0.02%)</title><rect x="571.2" y="531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="574.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (1 samples, 0.02%)</title><rect x="571.2" y="515.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="574.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="571.2" y="499.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="574.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlink (1 samples, 0.02%)</title><rect x="571.5" y="675.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="574.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.pollFirst (8 samples, 0.19%)</title><rect x="571.7" y="707.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="574.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlink (5 samples, 0.12%)</title><rect x="572.6" y="691.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="575.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlinkLast (4 samples, 0.09%)</title><rect x="572.8" y="675.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="575.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.skipDeletedSuccessors (2 samples, 0.05%)</title><rect x="573.4" y="659.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="576.4" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="573.7" y="643.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="576.7" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="573.7" y="627.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="576.7" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.hasOutgoing (1 samples, 0.02%)</title><rect x="574.0" y="723.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="577.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.isEmpty (1 samples, 0.02%)</title><rect x="574.0" y="707.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="577.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (1 samples, 0.02%)</title><rect x="574.0" y="691.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="577.0" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (1 samples, 0.02%)</title><rect x="574.2" y="723.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (50 samples, 1.17%)</title><rect x="574.5" y="723.0" width="13.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.5" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (50 samples, 1.17%)</title><rect x="574.5" y="707.0" width="13.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="577.5" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (50 samples, 1.17%)</title><rect x="574.5" y="691.0" width="13.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="577.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getOutgoing (1 samples, 0.02%)</title><rect x="574.8" y="675.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.8" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (48 samples, 1.12%)</title><rect x="575.1" y="675.0" width="13.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="578.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$494/565247082.run (5 samples, 0.12%)</title><rect x="575.3" y="659.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (5 samples, 0.12%)</title><rect x="575.3" y="643.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (4 samples, 0.09%)</title><rect x="575.6" y="627.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="578.6" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (2 samples, 0.05%)</title><rect x="575.9" y="611.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="578.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.05%)</title><rect x="575.9" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="578.9" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.05%)</title><rect x="575.9" y="579.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="578.9" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.debugState (1 samples, 0.02%)</title><rect x="576.4" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="579.4" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (42 samples, 0.98%)</title><rect x="576.7" y="659.0" width="11.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="579.7" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (37 samples, 0.86%)</title><rect x="576.7" y="643.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="579.7" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (37 samples, 0.86%)</title><rect x="576.7" y="627.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="579.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.07%)</title><rect x="576.7" y="611.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="579.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.07%)</title><rect x="576.7" y="595.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="579.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.07%)</title><rect x="576.7" y="579.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="579.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.07%)</title><rect x="576.7" y="563.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.02%)</title><rect x="577.3" y="547.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="580.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (34 samples, 0.79%)</title><rect x="577.5" y="611.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="580.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (29 samples, 0.68%)</title><rect x="578.9" y="595.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="581.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.get (9 samples, 0.21%)</title><rect x="578.9" y="579.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="581.9" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.21%)</title><rect x="578.9" y="563.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="581.9" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (9 samples, 0.21%)</title><rect x="578.9" y="547.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="581.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.02%)</title><rect x="580.8" y="531.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="583.8" y="542.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.02%)</title><rect x="581.1" y="531.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="584.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (20 samples, 0.47%)</title><rect x="581.4" y="579.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="584.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (19 samples, 0.44%)</title><rect x="581.7" y="563.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.7" y="574.0"></text>
</g>
<g>
<title>convertLongReturnVal (1 samples, 0.02%)</title><rect x="582.8" y="547.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="585.8" y="558.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="583.0" y="547.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="586.0" y="558.0"></text>
</g>
<g>
<title>writev (13 samples, 0.30%)</title><rect x="583.3" y="547.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="586.3" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (4 samples, 0.09%)</title><rect x="586.9" y="643.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="589.9" y="654.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.hasNext (1 samples, 0.02%)</title><rect x="587.5" y="627.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="590.5" y="638.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.next (1 samples, 0.02%)</title><rect x="587.7" y="627.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="590.7" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.remaining (1 samples, 0.02%)</title><rect x="588.0" y="643.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="591.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (1 samples, 0.02%)</title><rect x="588.3" y="803.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.3" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (1 samples, 0.02%)</title><rect x="588.3" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="591.3" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.debugState (1 samples, 0.02%)</title><rect x="588.6" y="851.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="591.6" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (729 samples, 17.03%)</title><rect x="588.8" y="899.0" width="201.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.8" y="910.0">jdk/internal/net/http/comm..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (729 samples, 17.03%)</title><rect x="588.8" y="883.0" width="201.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="591.8" y="894.0">jdk/internal/net/http/comm..</text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription$PullTask.run (2 samples, 0.05%)</title><rect x="588.8" y="867.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.8" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (2 samples, 0.05%)</title><rect x="588.8" y="851.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="591.8" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (2 samples, 0.05%)</title><rect x="588.8" y="835.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="591.8" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (2 samples, 0.05%)</title><rect x="588.8" y="819.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="591.8" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (2 samples, 0.05%)</title><rect x="588.8" y="803.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="591.8" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.05%)</title><rect x="588.8" y="787.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="591.8" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (397 samples, 9.27%)</title><rect x="589.4" y="867.0" width="109.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="592.4" y="878.0">jdk/internal/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$341/145997440.run (397 samples, 9.27%)</title><rect x="589.4" y="851.0" width="109.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="592.4" y="862.0">jdk/internal/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (395 samples, 9.23%)</title><rect x="589.9" y="835.0" width="108.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="592.9" y="846.0">jdk/internal/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkForErrors (1 samples, 0.02%)</title><rect x="589.9" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="592.9" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkRequestMore (28 samples, 0.65%)</title><rect x="590.2" y="819.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="593.2" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.requestMore (28 samples, 0.65%)</title><rect x="590.2" y="803.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.2" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (28 samples, 0.65%)</title><rect x="590.2" y="787.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="593.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (28 samples, 0.65%)</title><rect x="590.2" y="771.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="593.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (28 samples, 0.65%)</title><rect x="590.2" y="755.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.02%)</title><rect x="590.2" y="739.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="593.2" y="750.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (1 samples, 0.02%)</title><rect x="590.2" y="723.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="593.2" y="734.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.findKey (1 samples, 0.02%)</title><rect x="590.2" y="707.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (27 samples, 0.63%)</title><rect x="590.5" y="739.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="593.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (27 samples, 0.63%)</title><rect x="590.5" y="723.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.5" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (24 samples, 0.56%)</title><rect x="591.3" y="707.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="594.3" y="718.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (3 samples, 0.07%)</title><rect x="591.3" y="691.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="594.3" y="702.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.findKey (3 samples, 0.07%)</title><rect x="591.3" y="675.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (1 samples, 0.02%)</title><rect x="592.1" y="691.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="595.1" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="592.1" y="675.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="595.1" y="686.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.02%)</title><rect x="592.1" y="659.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="595.1" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.80] (1 samples, 0.02%)</title><rect x="592.1" y="643.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="595.1" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="592.1" y="627.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="595.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (20 samples, 0.47%)</title><rect x="592.4" y="691.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="595.4" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.07%)</title><rect x="593.5" y="675.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="596.5" y="686.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (3 samples, 0.07%)</title><rect x="593.5" y="659.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="596.5" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.07%)</title><rect x="593.5" y="643.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="596.5" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.02%)</title><rect x="593.5" y="627.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="596.5" y="638.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.05%)</title><rect x="593.8" y="627.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="596.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (13 samples, 0.30%)</title><rect x="594.3" y="675.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="597.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (9 samples, 0.21%)</title><rect x="595.5" y="659.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="598.5" y="670.0"></text>
</g>
<g>
<title>__libc_write (8 samples, 0.19%)</title><rect x="595.5" y="643.0" width="2.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="598.5" y="654.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="597.7" y="643.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="600.7" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (1 samples, 0.02%)</title><rect x="597.9" y="819.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="600.9" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (1 samples, 0.02%)</title><rect x="597.9" y="803.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="600.9" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.hasDemand (4 samples, 0.09%)</title><rect x="598.2" y="819.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="601.2" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.get (1 samples, 0.02%)</title><rect x="599.0" y="803.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="602.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (361 samples, 8.43%)</title><rect x="599.3" y="819.0" width="99.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="602.3" y="830.0">jdk/internal..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (3 samples, 0.07%)</title><rect x="599.6" y="803.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="602.6" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.increase (2 samples, 0.05%)</title><rect x="599.6" y="787.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="602.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.getAndAccumulate (1 samples, 0.02%)</title><rect x="599.6" y="771.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="602.6" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (1 samples, 0.02%)</title><rect x="599.9" y="771.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="602.9" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="600.1" y="787.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.1" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (1 samples, 0.02%)</title><rect x="600.1" y="771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.1" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (354 samples, 8.27%)</title><rect x="600.4" y="803.0" width="97.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="603.4" y="814.0">jdk/interna..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (354 samples, 8.27%)</title><rect x="600.4" y="787.0" width="97.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.4" y="798.0">jdk/interna..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="600.4" y="771.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="603.4" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (353 samples, 8.25%)</title><rect x="600.7" y="771.0" width="97.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="603.7" y="782.0">jdk/interna..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (216 samples, 5.05%)</title><rect x="601.5" y="755.0" width="59.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="604.5" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.02%)</title><rect x="601.5" y="739.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="604.5" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="601.5" y="723.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="604.5" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="601.5" y="707.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="604.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (215 samples, 5.02%)</title><rect x="601.8" y="739.0" width="59.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="604.8" y="750.0">java/u..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="601.8" y="723.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="604.8" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.02%)</title><rect x="601.8" y="707.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="604.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (214 samples, 5.00%)</title><rect x="602.1" y="723.0" width="59.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="605.1" y="734.0">java/u..</text>
</g>
<g>
<title>itable stub (3 samples, 0.07%)</title><rect x="602.9" y="707.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="605.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (207 samples, 4.84%)</title><rect x="603.7" y="707.0" width="57.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="606.7" y="718.0">java/u..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (207 samples, 4.84%)</title><rect x="603.7" y="691.0" width="57.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="606.7" y="702.0">jdk/in..</text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="603.7" y="675.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="606.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (205 samples, 4.79%)</title><rect x="604.3" y="675.0" width="56.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="607.3" y="686.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (191 samples, 4.46%)</title><rect x="604.8" y="659.0" width="52.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.8" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (180 samples, 4.20%)</title><rect x="604.8" y="643.0" width="49.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.8" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (180 samples, 4.20%)</title><rect x="604.8" y="627.0" width="49.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="607.8" y="638.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (146 samples, 3.41%)</title><rect x="604.8" y="611.0" width="40.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="607.8" y="622.0">jav..</text>
</g>
<g>
<title>itable stub (4 samples, 0.09%)</title><rect x="605.7" y="595.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="608.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 0.09%)</title><rect x="606.8" y="595.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="609.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (4 samples, 0.09%)</title><rect x="606.8" y="579.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="609.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="607.9" y="595.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.tryPushStack (1 samples, 0.02%)</title><rect x="607.9" y="579.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="610.9" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.02%)</title><rect x="607.9" y="563.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="610.9" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.02%)</title><rect x="607.9" y="547.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="610.9" y="558.0"></text>
</g>
<g>
<title>java/util/function/Function$$Lambda$31/1197365356.apply (3 samples, 0.07%)</title><rect x="608.1" y="595.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="611.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$191/1057916871.apply (104 samples, 2.43%)</title><rect x="609.0" y="595.0" width="28.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="612.0" y="606.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (103 samples, 2.41%)</title><rect x="609.2" y="579.0" width="28.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="612.2" y="590.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (3 samples, 0.07%)</title><rect x="609.2" y="563.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="612.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (3 samples, 0.07%)</title><rect x="609.2" y="547.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="612.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (99 samples, 2.31%)</title><rect x="610.1" y="563.0" width="27.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="613.1" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.02%)</title><rect x="610.3" y="547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="613.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.02%)</title><rect x="610.3" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="613.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (97 samples, 2.27%)</title><rect x="610.6" y="547.0" width="26.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="613.6" y="558.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (81 samples, 1.89%)</title><rect x="610.6" y="531.0" width="22.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="613.6" y="542.0">j..</text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (27 samples, 0.63%)</title><rect x="610.9" y="515.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="613.9" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (7 samples, 0.16%)</title><rect x="610.9" y="499.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="613.9" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 0.16%)</title><rect x="610.9" y="483.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="613.9" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (6 samples, 0.14%)</title><rect x="611.2" y="467.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="614.2" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (6 samples, 0.14%)</title><rect x="611.2" y="451.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="614.2" y="462.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (6 samples, 0.14%)</title><rect x="611.2" y="435.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="614.2" y="446.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (6 samples, 0.14%)</title><rect x="611.2" y="419.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="614.2" y="430.0"></text>
</g>
<g>
<title>java/lang/String.coder (4 samples, 0.09%)</title><rect x="611.7" y="403.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="614.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.getBody (2 samples, 0.05%)</title><rect x="612.3" y="387.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="615.3" y="398.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.02%)</title><rect x="612.8" y="499.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="615.8" y="510.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.02%)</title><rect x="612.8" y="483.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="615.8" y="494.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (19 samples, 0.44%)</title><rect x="613.1" y="499.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="616.1" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (19 samples, 0.44%)</title><rect x="613.1" y="483.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="616.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (19 samples, 0.44%)</title><rect x="613.1" y="467.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="616.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (19 samples, 0.44%)</title><rect x="613.1" y="451.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.1" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (11 samples, 0.26%)</title><rect x="613.1" y="435.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="616.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (3 samples, 0.07%)</title><rect x="613.1" y="419.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="616.1" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.02%)</title><rect x="613.6" y="403.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="616.6" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (8 samples, 0.19%)</title><rect x="613.9" y="419.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="616.9" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (8 samples, 0.19%)</title><rect x="613.9" y="403.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.9" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (1 samples, 0.02%)</title><rect x="614.5" y="387.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="617.5" y="398.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (5 samples, 0.12%)</title><rect x="614.7" y="387.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="617.7" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5$1.accept (5 samples, 0.12%)</title><rect x="614.7" y="371.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="617.7" y="382.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$546/1409960794.applyAsLong (5 samples, 0.12%)</title><rect x="614.7" y="355.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.7" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.12%)</title><rect x="614.7" y="339.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="617.7" y="350.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (3 samples, 0.07%)</title><rect x="615.3" y="323.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="618.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.07%)</title><rect x="615.3" y="307.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="618.3" y="318.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (8 samples, 0.19%)</title><rect x="616.1" y="435.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="619.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5.opWrapSink (2 samples, 0.05%)</title><rect x="617.8" y="419.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="620.8" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5$1.&lt;init&gt; (2 samples, 0.05%)</title><rect x="617.8" y="403.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="620.8" y="414.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (2 samples, 0.05%)</title><rect x="617.8" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="620.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.12%)</title><rect x="618.3" y="515.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="621.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.05%)</title><rect x="618.3" y="499.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.07%)</title><rect x="618.9" y="499.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="621.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.07%)</title><rect x="618.9" y="483.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="621.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.&lt;init&gt; (1 samples, 0.02%)</title><rect x="619.7" y="515.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="622.7" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.fixupContentLen (1 samples, 0.02%)</title><rect x="620.0" y="515.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.02%)</title><rect x="620.0" y="499.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="623.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.02%)</title><rect x="620.0" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.0" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (41 samples, 0.96%)</title><rect x="620.3" y="515.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="623.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$558/902590235.run (41 samples, 0.96%)</title><rect x="620.3" y="499.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="623.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$3 (41 samples, 0.96%)</title><rect x="620.3" y="483.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="623.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.07%)</title><rect x="620.3" y="467.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="623.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.05%)</title><rect x="620.5" y="451.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="623.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (21 samples, 0.49%)</title><rect x="621.1" y="467.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="624.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.isEmpty (6 samples, 0.14%)</title><rect x="621.1" y="451.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="624.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (6 samples, 0.14%)</title><rect x="621.1" y="435.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="624.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (15 samples, 0.35%)</title><rect x="622.7" y="451.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="625.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (15 samples, 0.35%)</title><rect x="622.7" y="435.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="625.7" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$ClientRefCountTracker.acquire (1 samples, 0.02%)</title><rect x="626.9" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="629.9" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.addTrailingOperation (14 samples, 0.33%)</title><rect x="627.2" y="467.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="630.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.add (14 samples, 0.33%)</title><rect x="627.2" y="451.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="630.2" y="462.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.put (8 samples, 0.19%)</title><rect x="627.7" y="435.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="630.7" y="446.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (1 samples, 0.02%)</title><rect x="627.7" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="630.7" y="430.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.hash (7 samples, 0.16%)</title><rect x="628.0" y="419.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="631.0" y="430.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (7 samples, 0.16%)</title><rect x="628.0" y="403.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="631.0" y="414.0"></text>
</g>
<g>
<title>JVM_IHashCode (6 samples, 0.14%)</title><rect x="628.0" y="387.0" width="1.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="631.0" y="398.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.05%)</title><rect x="628.0" y="371.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="631.0" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (3 samples, 0.07%)</title><rect x="628.5" y="371.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="631.5" y="382.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.02%)</title><rect x="629.1" y="355.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="632.1" y="366.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="629.4" y="371.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="632.4" y="382.0"></text>
</g>
<g>
<title>Java_java_lang_System_identityHashCode (1 samples, 0.02%)</title><rect x="629.6" y="387.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="632.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.09%)</title><rect x="629.9" y="435.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="632.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.09%)</title><rect x="629.9" y="419.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="632.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.05%)</title><rect x="630.5" y="403.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="633.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent.&lt;init&gt; (1 samples, 0.02%)</title><rect x="631.0" y="467.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.0" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="631.0" y="451.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.0" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/404214852.invoke (1 samples, 0.02%)</title><rect x="631.0" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="634.0" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="631.0" y="419.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.0" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.02%)</title><rect x="631.0" y="403.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="634.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.02%)</title><rect x="631.0" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="634.0" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="631.0" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="634.0" y="382.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="631.0" y="355.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="634.0" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="631.0" y="339.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="634.0" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="631.0" y="323.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="634.0" y="334.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="631.0" y="307.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="634.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent.getBodyParser (1 samples, 0.02%)</title><rect x="631.3" y="467.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="634.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.&lt;init&gt; (1 samples, 0.02%)</title><rect x="631.3" y="451.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="634.3" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="631.3" y="435.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="634.3" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/404214852.invoke (1 samples, 0.02%)</title><rect x="631.3" y="419.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.3" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="631.3" y="403.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.3" y="414.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.02%)</title><rect x="631.3" y="387.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.3" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="631.3" y="371.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="634.3" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="631.3" y="355.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="634.3" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.getBody (3 samples, 0.07%)</title><rect x="631.6" y="515.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (3 samples, 0.07%)</title><rect x="631.6" y="499.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="634.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (3 samples, 0.07%)</title><rect x="631.6" y="483.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (3 samples, 0.07%)</title><rect x="631.6" y="467.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.&lt;init&gt; (2 samples, 0.05%)</title><rect x="631.6" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="634.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (2 samples, 0.05%)</title><rect x="631.6" y="435.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="634.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.02%)</title><rect x="632.1" y="451.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="635.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (2 samples, 0.05%)</title><rect x="632.4" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (2 samples, 0.05%)</title><rect x="632.4" y="499.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseInfoImpl.&lt;init&gt; (1 samples, 0.02%)</title><rect x="632.9" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="635.9" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.02%)</title><rect x="632.9" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/GetBodyHandler.apply (15 samples, 0.35%)</title><rect x="633.2" y="531.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.2" y="542.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (15 samples, 0.35%)</title><rect x="633.2" y="515.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="636.2" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (7 samples, 0.16%)</title><rect x="633.2" y="499.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.2" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.14%)</title><rect x="633.5" y="483.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="636.5" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (5 samples, 0.12%)</title><rect x="633.8" y="467.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.8" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (5 samples, 0.12%)</title><rect x="633.8" y="451.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.8" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (5 samples, 0.12%)</title><rect x="633.8" y="435.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="636.8" y="446.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.09%)</title><rect x="634.0" y="419.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.09%)</title><rect x="634.0" y="403.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="637.0" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (4 samples, 0.09%)</title><rect x="634.0" y="387.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.0" y="398.0"></text>
</g>
<g>
<title>java/util/Collection.stream (3 samples, 0.07%)</title><rect x="635.1" y="499.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.1" y="510.0"></text>
</g>
<g>
<title>java/util/List.spliterator (2 samples, 0.05%)</title><rect x="635.1" y="483.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.1" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.&lt;init&gt; (2 samples, 0.05%)</title><rect x="635.1" y="467.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.02%)</title><rect x="635.7" y="483.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (1 samples, 0.02%)</title><rect x="635.7" y="467.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.02%)</title><rect x="635.7" y="451.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.7" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (1 samples, 0.02%)</title><rect x="635.7" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.7" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (5 samples, 0.12%)</title><rect x="636.0" y="499.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="639.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.12%)</title><rect x="636.0" y="483.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="639.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (5 samples, 0.12%)</title><rect x="636.0" y="467.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="639.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (5 samples, 0.12%)</title><rect x="636.0" y="451.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.0" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (5 samples, 0.12%)</title><rect x="636.0" y="435.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (2 samples, 0.05%)</title><rect x="636.2" y="419.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="639.2" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.02%)</title><rect x="636.5" y="403.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.5" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.05%)</title><rect x="636.8" y="419.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.8" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.02%)</title><rect x="636.8" y="403.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="639.8" y="414.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (1 samples, 0.02%)</title><rect x="636.8" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="639.8" y="398.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.get (1 samples, 0.02%)</title><rect x="636.8" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.8" y="382.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$List12.get (1 samples, 0.02%)</title><rect x="636.8" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.8" y="366.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.02%)</title><rect x="637.1" y="403.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.getExchange (1 samples, 0.02%)</title><rect x="637.3" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="640.3" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$441/2133978669.apply (27 samples, 0.63%)</title><rect x="637.6" y="595.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="640.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$6 (27 samples, 0.63%)</title><rect x="637.6" y="579.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="640.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseFilters (26 samples, 0.61%)</title><rect x="637.6" y="563.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.6" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedList$DescendingIterator.next (1 samples, 0.02%)</title><rect x="638.2" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.2" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.previous (1 samples, 0.02%)</title><rect x="638.2" y="531.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="641.2" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedList.descendingIterator (5 samples, 0.12%)</title><rect x="638.5" y="547.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="641.5" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedList$DescendingIterator.&lt;init&gt; (5 samples, 0.12%)</title><rect x="638.5" y="531.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="641.5" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (3 samples, 0.07%)</title><rect x="638.5" y="515.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.5" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedList.size (2 samples, 0.05%)</title><rect x="639.3" y="515.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.response (16 samples, 0.37%)</title><rect x="639.8" y="547.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getCache (16 samples, 0.37%)</title><rect x="639.8" y="531.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.8" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="640.9" y="515.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="643.9" y="526.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="640.9" y="499.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="643.9" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="640.9" y="483.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="643.9" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.02%)</title><rect x="640.9" y="467.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="643.9" y="478.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (11 samples, 0.26%)</title><rect x="641.2" y="515.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.2" y="526.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.getTable (2 samples, 0.05%)</title><rect x="641.2" y="499.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="644.2" y="510.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.expungeStaleEntries (2 samples, 0.05%)</title><rect x="641.2" y="483.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="644.2" y="494.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.poll (2 samples, 0.05%)</title><rect x="641.2" y="467.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="644.2" y="478.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.reallyPoll (2 samples, 0.05%)</title><rect x="641.2" y="451.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="644.2" y="462.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.hash (9 samples, 0.21%)</title><rect x="641.8" y="499.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="644.8" y="510.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (9 samples, 0.21%)</title><rect x="641.8" y="483.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="644.8" y="494.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.07%)</title><rect x="642.0" y="467.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="645.0" y="478.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="642.9" y="467.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="645.9" y="478.0"></text>
</g>
<g>
<title>JVM_IHashCode (3 samples, 0.07%)</title><rect x="643.1" y="467.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="646.1" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (1 samples, 0.02%)</title><rect x="643.7" y="451.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="646.7" y="462.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.02%)</title><rect x="644.0" y="467.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="647.0" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RedirectFilter.response (2 samples, 0.05%)</title><rect x="644.2" y="547.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="647.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RedirectFilter.handleResponse (2 samples, 0.05%)</title><rect x="644.2" y="531.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.statusCode (2 samples, 0.05%)</title><rect x="644.2" y="515.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="647.2" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (1 samples, 0.02%)</title><rect x="644.8" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="647.8" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.02%)</title><rect x="644.8" y="547.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.02%)</title><rect x="644.8" y="531.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="647.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (25 samples, 0.58%)</title><rect x="645.1" y="611.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="648.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (23 samples, 0.54%)</title><rect x="645.6" y="595.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="648.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.05%)</title><rect x="645.6" y="579.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$442/1523195787.apply (1 samples, 0.02%)</title><rect x="645.9" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$442/1523195787.apply (21 samples, 0.49%)</title><rect x="646.2" y="579.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="649.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$7 (21 samples, 0.49%)</title><rect x="646.2" y="563.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="649.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.cancelTimer (20 samples, 0.47%)</title><rect x="646.2" y="547.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="649.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.cancelTimer (20 samples, 0.47%)</title><rect x="646.2" y="531.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="649.2" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.07%)</title><rect x="646.7" y="515.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="649.7" y="526.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (3 samples, 0.07%)</title><rect x="646.7" y="499.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="649.7" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.07%)</title><rect x="646.7" y="483.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="649.7" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (3 samples, 0.07%)</title><rect x="646.7" y="467.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="649.7" y="478.0"></text>
</g>
<g>
<title>java/util/TreeSet.remove (15 samples, 0.35%)</title><rect x="647.5" y="515.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="650.5" y="526.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (1 samples, 0.02%)</title><rect x="647.5" y="499.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="650.5" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (14 samples, 0.33%)</title><rect x="647.8" y="499.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="650.8" y="510.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="648.1" y="483.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="651.1" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.deleteEntry (4 samples, 0.09%)</title><rect x="648.6" y="483.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="651.6" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterDeletion (2 samples, 0.05%)</title><rect x="649.2" y="467.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="652.2" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.leftOf (1 samples, 0.02%)</title><rect x="649.5" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="652.5" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (5 samples, 0.12%)</title><rect x="649.8" y="483.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.8" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.deleteEntry (1 samples, 0.02%)</title><rect x="650.6" y="467.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="653.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/TimeoutEvent.compareTo (1 samples, 0.02%)</title><rect x="650.9" y="467.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="653.9" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/TimeoutEvent.compareTo (2 samples, 0.05%)</title><rect x="651.1" y="483.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="654.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (1 samples, 0.02%)</title><rect x="651.7" y="547.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="654.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.02%)</title><rect x="651.7" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="654.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="651.7" y="515.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="654.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (8 samples, 0.19%)</title><rect x="652.0" y="611.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="655.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeRelay (6 samples, 0.14%)</title><rect x="652.5" y="595.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="655.5" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (6 samples, 0.14%)</title><rect x="652.5" y="579.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="655.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (6 samples, 0.14%)</title><rect x="652.5" y="563.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="655.5" y="574.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="654.2" y="611.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="657.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$519/1406514091.apply (11 samples, 0.26%)</title><rect x="654.4" y="643.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="657.4" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readHeadersAsync$0 (11 samples, 0.26%)</title><rect x="654.4" y="627.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.4" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.unsubscribe (2 samples, 0.05%)</title><rect x="654.4" y="611.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.4" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (9 samples, 0.21%)</title><rect x="655.0" y="611.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="658.0" y="622.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (7 samples, 0.16%)</title><rect x="655.0" y="595.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="658.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.16%)</title><rect x="655.0" y="579.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="658.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.16%)</title><rect x="655.0" y="563.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="658.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (2 samples, 0.05%)</title><rect x="656.9" y="595.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="659.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.getLocalAddress (2 samples, 0.05%)</title><rect x="656.9" y="579.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpen (2 samples, 0.05%)</title><rect x="656.9" y="563.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.9" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (2 samples, 0.05%)</title><rect x="656.9" y="547.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (12 samples, 0.28%)</title><rect x="657.5" y="659.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (8 samples, 0.19%)</title><rect x="657.5" y="643.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="660.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.09%)</title><rect x="659.7" y="643.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="662.7" y="654.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="659.7" y="627.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="662.7" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$519/1406514091.apply (2 samples, 0.05%)</title><rect x="660.2" y="627.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.2" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.02%)</title><rect x="660.8" y="707.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.8" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (133 samples, 3.11%)</title><rect x="661.1" y="755.0" width="36.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="664.1" y="766.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.canContinueParsing (3 samples, 0.07%)</title><rect x="664.1" y="739.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="667.1" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeHeader (18 samples, 0.42%)</title><rect x="664.9" y="739.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="667.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (13 samples, 0.30%)</title><rect x="666.3" y="723.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="669.3" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (13 samples, 0.30%)</title><rect x="666.3" y="707.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeStatusLine (7 samples, 0.16%)</title><rect x="669.9" y="739.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="672.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 0.16%)</title><rect x="669.9" y="723.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.9" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.16%)</title><rect x="669.9" y="707.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.9" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readStatusLineFeed (8 samples, 0.19%)</title><rect x="671.8" y="739.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.8" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="673.7" y="723.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="676.7" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrEndHeaders (34 samples, 0.79%)</title><rect x="674.0" y="739.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.0" y="750.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (34 samples, 0.79%)</title><rect x="674.0" y="723.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="677.0" y="734.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (33 samples, 0.77%)</title><rect x="674.3" y="707.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="677.3" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="675.7" y="691.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="678.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (27 samples, 0.63%)</title><rect x="675.9" y="691.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="678.9" y="702.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$141/1757337625.accept (25 samples, 0.58%)</title><rect x="676.5" y="675.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="679.5" y="686.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (24 samples, 0.56%)</title><rect x="676.8" y="659.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="679.8" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (9 samples, 0.21%)</title><rect x="678.1" y="643.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.1" y="654.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$147/136542916.accept (6 samples, 0.14%)</title><rect x="678.1" y="627.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="681.1" y="638.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (5 samples, 0.12%)</title><rect x="678.4" y="611.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="681.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.trim (4 samples, 0.09%)</title><rect x="678.4" y="595.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="681.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (4 samples, 0.09%)</title><rect x="678.4" y="579.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="681.4" y="590.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.07%)</title><rect x="678.4" y="563.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="681.4" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$68/960733886.test (1 samples, 0.02%)</title><rect x="679.2" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="682.2" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="679.5" y="595.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="682.5" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="679.5" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.5" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="679.5" y="563.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="682.5" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="679.5" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="682.5" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="679.5" y="531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="682.5" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="679.5" y="515.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="682.5" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.02%)</title><rect x="679.5" y="499.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="682.5" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="679.5" y="483.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="682.5" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="679.5" y="467.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="682.5" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="679.5" y="451.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="682.5" y="462.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.02%)</title><rect x="679.5" y="435.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="682.5" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (3 samples, 0.07%)</title><rect x="679.8" y="627.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="682.8" y="638.0"></text>
</g>
<g>
<title>java/util/List.copyOf (2 samples, 0.05%)</title><rect x="680.6" y="643.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="683.6" y="654.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections.listCopy (2 samples, 0.05%)</title><rect x="680.6" y="627.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="683.6" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (1 samples, 0.02%)</title><rect x="680.6" y="611.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="683.6" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="680.6" y="595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="683.6" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="680.6" y="579.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="683.6" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.02%)</title><rect x="680.6" y="563.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="683.6" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="680.6" y="547.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="683.6" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="680.6" y="531.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="683.6" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="680.6" y="515.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="683.6" y="526.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="680.6" y="499.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="683.6" y="510.0"></text>
</g>
<g>
<title>java/util/List.of (1 samples, 0.02%)</title><rect x="680.9" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="683.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="680.9" y="595.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="683.9" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="680.9" y="579.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="683.9" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="680.9" y="563.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="683.9" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (8 samples, 0.19%)</title><rect x="681.2" y="643.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="684.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.09%)</title><rect x="681.7" y="627.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="684.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.09%)</title><rect x="681.7" y="611.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="684.7" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (4 samples, 0.09%)</title><rect x="681.7" y="595.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="684.7" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (2 samples, 0.05%)</title><rect x="682.8" y="627.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="685.8" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrSecondCR (52 samples, 1.21%)</title><rect x="683.4" y="739.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="686.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.addHeaderFromString (52 samples, 1.21%)</title><rect x="683.4" y="723.0" width="14.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="686.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.26%)</title><rect x="683.4" y="707.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="686.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.26%)</title><rect x="683.4" y="691.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="686.4" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (11 samples, 0.26%)</title><rect x="683.4" y="675.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.4" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="685.6" y="659.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="688.6" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="685.9" y="659.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="688.9" y="670.0"></text>
</g>
<g>
<title>java/lang/String.isEmpty (1 samples, 0.02%)</title><rect x="686.4" y="707.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="689.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (13 samples, 0.30%)</title><rect x="686.7" y="707.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.7" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (8 samples, 0.19%)</title><rect x="687.8" y="691.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.8" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="690.0" y="691.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="693.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.trim (7 samples, 0.16%)</title><rect x="690.3" y="707.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="693.3" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (7 samples, 0.16%)</title><rect x="690.3" y="691.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="693.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfAbsent (1 samples, 0.02%)</title><rect x="691.9" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="694.9" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (2 samples, 0.05%)</title><rect x="692.2" y="707.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="695.2" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="692.8" y="707.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="695.8" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="692.8" y="691.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="695.8" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="692.8" y="675.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="695.8" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="692.8" y="659.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.8" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="692.8" y="643.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.8" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="692.8" y="627.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="695.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfAbsent (17 samples, 0.40%)</title><rect x="693.0" y="707.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="696.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.09%)</title><rect x="695.5" y="691.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.5" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.05%)</title><rect x="696.1" y="675.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="699.1" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.05%)</title><rect x="696.1" y="659.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="699.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.07%)</title><rect x="696.6" y="691.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="699.6" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser$$Lambda$532/205363253.apply (1 samples, 0.02%)</title><rect x="697.4" y="691.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="700.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.lambda$addHeaderFromString$0 (1 samples, 0.02%)</title><rect x="697.4" y="675.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.4" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="697.4" y="659.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="700.4" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="697.4" y="643.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="700.4" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="697.4" y="627.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="700.4" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="697.4" y="611.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="700.4" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="697.4" y="595.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="700.4" y="606.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.02%)</title><rect x="697.4" y="579.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="700.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$384/137700567.accept (1 samples, 0.02%)</title><rect x="697.7" y="755.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="700.7" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.advance (1 samples, 0.02%)</title><rect x="697.7" y="739.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.unsubscribe (1 samples, 0.02%)</title><rect x="697.7" y="723.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.7" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.tryDecrement (3 samples, 0.07%)</title><rect x="698.0" y="803.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="701.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.decreaseAndGet (3 samples, 0.07%)</title><rect x="698.0" y="787.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="701.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.get (2 samples, 0.05%)</title><rect x="698.3" y="771.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="701.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (330 samples, 7.71%)</title><rect x="698.8" y="867.0" width="91.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="701.8" y="878.0">jdk/intern..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (329 samples, 7.69%)</title><rect x="699.1" y="851.0" width="90.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="702.1" y="862.0">jdk/intern..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (328 samples, 7.66%)</title><rect x="699.1" y="835.0" width="90.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.1" y="846.0">jdk/intern..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$341/145997440.run (328 samples, 7.66%)</title><rect x="699.1" y="819.0" width="90.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="702.1" y="830.0">jdk/intern..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (327 samples, 7.64%)</title><rect x="699.4" y="803.0" width="90.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="702.4" y="814.0">jdk/intern..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkForErrors (1 samples, 0.02%)</title><rect x="699.4" y="787.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="702.4" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (16 samples, 0.37%)</title><rect x="699.6" y="787.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.6" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (13 samples, 0.30%)</title><rect x="699.6" y="771.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.6" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (6 samples, 0.14%)</title><rect x="701.6" y="755.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="704.6" y="766.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="701.6" y="739.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="704.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onSubscribe (2 samples, 0.05%)</title><rect x="702.1" y="739.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="705.1" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="702.1" y="723.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="705.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="702.1" y="707.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="705.1" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (1 samples, 0.02%)</title><rect x="702.1" y="691.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="702.1" y="675.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="705.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="702.1" y="659.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="705.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.compareAndSet (1 samples, 0.02%)</title><rect x="702.1" y="643.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$NullSubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="702.4" y="723.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="705.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.compareAndSet (1 samples, 0.02%)</title><rect x="702.4" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.4" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="702.4" y="691.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onSubscribe (2 samples, 0.05%)</title><rect x="702.7" y="739.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="705.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.onSubscribe (3 samples, 0.07%)</title><rect x="703.2" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="706.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (3 samples, 0.07%)</title><rect x="703.2" y="755.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="706.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (3 samples, 0.07%)</title><rect x="703.2" y="739.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="706.2" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (3 samples, 0.07%)</title><rect x="703.2" y="723.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="706.2" y="734.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="703.5" y="707.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="706.5" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (1 samples, 0.02%)</title><rect x="703.8" y="707.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="706.8" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.hasDemand (1 samples, 0.02%)</title><rect x="704.1" y="787.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.1" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.get (1 samples, 0.02%)</title><rect x="704.1" y="771.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="707.1" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.tryAsyncReceive (297 samples, 6.94%)</title><rect x="704.3" y="787.0" width="81.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="707.3" y="798.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (297 samples, 6.94%)</title><rect x="704.3" y="771.0" width="81.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="707.3" y="782.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (297 samples, 6.94%)</title><rect x="704.3" y="755.0" width="81.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="707.3" y="766.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (297 samples, 6.94%)</title><rect x="704.3" y="739.0" width="81.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="707.3" y="750.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (297 samples, 6.94%)</title><rect x="704.3" y="723.0" width="81.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="707.3" y="734.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (295 samples, 6.89%)</title><rect x="704.9" y="707.0" width="81.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="707.9" y="718.0">jdk/inter..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (10 samples, 0.23%)</title><rect x="704.9" y="691.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.9" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (10 samples, 0.23%)</title><rect x="704.9" y="675.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="707.9" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (6 samples, 0.14%)</title><rect x="704.9" y="659.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="707.9" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title><rect x="704.9" y="643.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="707.9" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="705.4" y="627.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="708.4" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.09%)</title><rect x="705.4" y="611.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="708.4" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="706.3" y="595.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="709.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="706.3" y="579.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.3" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.02%)</title><rect x="706.3" y="563.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="709.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (2 samples, 0.05%)</title><rect x="706.5" y="659.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="709.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.02%)</title><rect x="707.1" y="659.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.1" y="670.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.02%)</title><rect x="707.4" y="659.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="710.4" y="670.0"></text>
</g>
<g>
<title>java/util/List.of (1 samples, 0.02%)</title><rect x="707.6" y="691.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.6" y="702.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$List12.&lt;init&gt; (1 samples, 0.02%)</title><rect x="707.6" y="675.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.6" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$567/106021012.run (193 samples, 4.51%)</title><rect x="707.9" y="691.0" width="53.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="710.9" y="702.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (193 samples, 4.51%)</title><rect x="707.9" y="675.0" width="53.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="710.9" y="686.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.closeOrReturnToCache (193 samples, 4.51%)</title><rect x="707.9" y="659.0" width="53.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="710.9" y="670.0">jdk/i..</text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (8 samples, 0.19%)</title><rect x="707.9" y="643.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.9" y="654.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (6 samples, 0.14%)</title><rect x="707.9" y="627.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.9" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.14%)</title><rect x="707.9" y="611.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.9" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (6 samples, 0.14%)</title><rect x="707.9" y="595.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.9" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (6 samples, 0.14%)</title><rect x="707.9" y="579.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="710.9" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (6 samples, 0.14%)</title><rect x="707.9" y="563.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="710.9" y="574.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.09%)</title><rect x="708.5" y="547.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.09%)</title><rect x="708.5" y="531.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (4 samples, 0.09%)</title><rect x="708.5" y="515.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="711.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.add (1 samples, 0.02%)</title><rect x="709.3" y="499.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="712.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (2 samples, 0.05%)</title><rect x="709.6" y="627.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.02%)</title><rect x="709.8" y="611.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="712.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (1 samples, 0.02%)</title><rect x="709.8" y="595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="712.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (1 samples, 0.02%)</title><rect x="709.8" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="712.8" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.02%)</title><rect x="709.8" y="563.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="712.8" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.02%)</title><rect x="709.8" y="547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="712.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (184 samples, 4.30%)</title><rect x="710.1" y="643.0" width="50.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="713.1" y="654.0">jdk/i..</text>
</g>
<g>
<title>java/time/Instant.now (4 samples, 0.09%)</title><rect x="710.1" y="627.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.1" y="638.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (4 samples, 0.09%)</title><rect x="710.1" y="611.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="713.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (3 samples, 0.07%)</title><rect x="710.4" y="595.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.4" y="606.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (3 samples, 0.07%)</title><rect x="710.4" y="579.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="713.4" y="590.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="710.7" y="563.0" width="0.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="713.7" y="574.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (1 samples, 0.02%)</title><rect x="710.9" y="563.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="713.9" y="574.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="710.9" y="547.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="713.9" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (180 samples, 4.20%)</title><rect x="711.2" y="627.0" width="49.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="714.2" y="638.0">jdk/i..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (27 samples, 0.63%)</title><rect x="714.0" y="611.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="717.0" y="622.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (27 samples, 0.63%)</title><rect x="714.0" y="595.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="717.0" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (27 samples, 0.63%)</title><rect x="714.0" y="579.0" width="7.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="717.0" y="590.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (23 samples, 0.54%)</title><rect x="714.0" y="563.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="717.0" y="574.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.09%)</title><rect x="720.3" y="563.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="723.3" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.add (100 samples, 2.34%)</title><rect x="721.4" y="611.0" width="27.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="724.4" y="622.0">j..</text>
</g>
<g>
<title>java/time/Instant.plus (41 samples, 0.96%)</title><rect x="727.2" y="595.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.2" y="606.0"></text>
</g>
<g>
<title>java/time/Instant.plusSeconds (41 samples, 0.96%)</title><rect x="727.2" y="579.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.2" y="590.0"></text>
</g>
<g>
<title>java/time/Instant.plus (41 samples, 0.96%)</title><rect x="727.2" y="563.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.2" y="574.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (5 samples, 0.12%)</title><rect x="737.1" y="547.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="740.1" y="558.0"></text>
</g>
<g>
<title>java/time/Instant.create (5 samples, 0.12%)</title><rect x="737.1" y="531.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="740.1" y="542.0"></text>
</g>
<g>
<title>java/time/Instant.truncatedTo (4 samples, 0.09%)</title><rect x="738.5" y="595.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="741.5" y="606.0"></text>
</g>
<g>
<title>java/time/Instant.plusNanos (4 samples, 0.09%)</title><rect x="738.5" y="579.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="741.5" y="590.0"></text>
</g>
<g>
<title>java/time/Instant.plus (4 samples, 0.09%)</title><rect x="738.5" y="563.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="741.5" y="574.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (3 samples, 0.07%)</title><rect x="738.8" y="547.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="741.8" y="558.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (1 samples, 0.02%)</title><rect x="739.1" y="531.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="742.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Math.floorMod (1 samples, 0.02%)</title><rect x="739.3" y="531.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="742.3" y="542.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (1 samples, 0.02%)</title><rect x="739.3" y="515.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="742.3" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (4 samples, 0.09%)</title><rect x="739.6" y="595.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="742.6" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (4 samples, 0.09%)</title><rect x="739.6" y="579.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="742.6" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (3 samples, 0.07%)</title><rect x="739.6" y="563.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="742.6" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedList.checkPositionIndex (1 samples, 0.02%)</title><rect x="740.4" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="743.4" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.add (2 samples, 0.05%)</title><rect x="740.7" y="595.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="743.7" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkBefore (2 samples, 0.05%)</title><rect x="740.7" y="579.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="743.7" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.next (1 samples, 0.02%)</title><rect x="741.3" y="595.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="744.3" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedList.add (20 samples, 0.47%)</title><rect x="741.5" y="595.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="744.5" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (20 samples, 0.47%)</title><rect x="741.5" y="579.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="744.5" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryEntry.&lt;init&gt; (7 samples, 0.16%)</title><rect x="747.1" y="595.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="750.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.putConnection (6 samples, 0.14%)</title><rect x="749.0" y="611.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="752.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.14%)</title><rect x="749.0" y="595.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="752.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.07%)</title><rect x="749.0" y="579.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="752.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.equals (2 samples, 0.05%)</title><rect x="749.3" y="563.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.3" y="574.0"></text>
</g>
<g>
<title>java/util/Objects.equals (2 samples, 0.05%)</title><rect x="749.3" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="752.3" y="558.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.equals (2 samples, 0.05%)</title><rect x="749.3" y="531.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.3" y="542.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.equals (2 samples, 0.05%)</title><rect x="749.3" y="515.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.07%)</title><rect x="749.8" y="579.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.hashCode (3 samples, 0.07%)</title><rect x="749.8" y="563.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="752.8" y="574.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.hashCode (1 samples, 0.02%)</title><rect x="749.8" y="547.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.8" y="558.0"></text>
</g>
<g>
<title>java/util/Objects.hash (2 samples, 0.05%)</title><rect x="750.1" y="547.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="753.1" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (2 samples, 0.05%)</title><rect x="750.1" y="531.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="753.1" y="542.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.hashCode (2 samples, 0.05%)</title><rect x="750.1" y="515.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="753.1" y="526.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.hashCode (2 samples, 0.05%)</title><rect x="750.1" y="499.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.1" y="510.0"></text>
</g>
<g>
<title>java/net/Inet4Address.hashCode (2 samples, 0.05%)</title><rect x="750.1" y="483.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.registerCleanupTrigger (37 samples, 0.86%)</title><rect x="750.6" y="611.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.6" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (37 samples, 0.86%)</title><rect x="750.6" y="595.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.subscribe (10 samples, 0.23%)</title><rect x="750.6" y="579.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="753.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (10 samples, 0.23%)</title><rect x="750.6" y="563.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="753.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (10 samples, 0.23%)</title><rect x="750.6" y="547.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (7 samples, 0.16%)</title><rect x="750.6" y="531.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="753.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (7 samples, 0.16%)</title><rect x="750.6" y="515.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="753.6" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="750.9" y="499.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="753.9" y="510.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.05%)</title><rect x="750.9" y="483.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="753.9" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="750.9" y="467.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="753.9" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (1 samples, 0.02%)</title><rect x="750.9" y="451.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="753.9" y="462.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="751.2" y="451.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="754.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (4 samples, 0.09%)</title><rect x="751.5" y="499.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="754.5" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="752.3" y="483.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="755.3" y="494.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.02%)</title><rect x="752.3" y="467.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="755.3" y="478.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.02%)</title><rect x="752.3" y="451.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="755.3" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.dropSubscription (3 samples, 0.07%)</title><rect x="752.6" y="531.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="755.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.reset (2 samples, 0.05%)</title><rect x="752.8" y="515.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="755.8" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="753.1" y="499.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="756.1" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.02%)</title><rect x="753.1" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="756.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.subscribe (3 samples, 0.07%)</title><rect x="753.4" y="579.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="756.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (3 samples, 0.07%)</title><rect x="753.4" y="563.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="756.4" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (3 samples, 0.07%)</title><rect x="753.4" y="547.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="756.4" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (3 samples, 0.07%)</title><rect x="753.4" y="531.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="756.4" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (3 samples, 0.07%)</title><rect x="753.4" y="515.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="756.4" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.07%)</title><rect x="753.4" y="499.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="756.4" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.07%)</title><rect x="753.4" y="483.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.4" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.07%)</title><rect x="753.4" y="467.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="756.4" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.07%)</title><rect x="753.4" y="451.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.4" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (3 samples, 0.07%)</title><rect x="753.4" y="435.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="756.4" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.subscribe (3 samples, 0.07%)</title><rect x="753.4" y="419.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="756.4" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (24 samples, 0.56%)</title><rect x="754.2" y="579.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="757.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (24 samples, 0.56%)</title><rect x="754.2" y="563.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="757.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (23 samples, 0.54%)</title><rect x="754.2" y="547.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="757.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (22 samples, 0.51%)</title><rect x="754.2" y="531.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="757.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (22 samples, 0.51%)</title><rect x="754.2" y="515.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="757.2" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.16%)</title><rect x="754.8" y="499.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="757.8" y="510.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (7 samples, 0.16%)</title><rect x="754.8" y="483.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="757.8" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.12%)</title><rect x="755.0" y="467.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="758.0" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (5 samples, 0.12%)</title><rect x="755.0" y="451.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="758.0" y="462.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (1 samples, 0.02%)</title><rect x="756.4" y="467.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.4" y="478.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title><rect x="756.4" y="451.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="759.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (13 samples, 0.30%)</title><rect x="756.7" y="499.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.7" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="758.1" y="483.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="761.1" y="494.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.05%)</title><rect x="758.1" y="467.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="761.1" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="758.1" y="451.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="761.1" y="462.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.05%)</title><rect x="758.1" y="435.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="761.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (6 samples, 0.14%)</title><rect x="758.6" y="483.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="761.6" y="494.0"></text>
</g>
<g>
<title>__libc_write (5 samples, 0.12%)</title><rect x="758.6" y="467.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="761.6" y="478.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="760.0" y="467.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="763.0" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.isStopped (1 samples, 0.02%)</title><rect x="760.3" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="763.3" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="760.3" y="515.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="763.3" y="526.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.02%)</title><rect x="760.3" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="763.3" y="510.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.02%)</title><rect x="760.3" y="483.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="763.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (1 samples, 0.02%)</title><rect x="760.6" y="547.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (1 samples, 0.02%)</title><rect x="760.6" y="531.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.isOpen (1 samples, 0.02%)</title><rect x="760.8" y="643.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.connected (1 samples, 0.02%)</title><rect x="760.8" y="627.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="763.8" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$573/1624205294.accept (11 samples, 0.26%)</title><rect x="761.1" y="691.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="764.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$1 (11 samples, 0.26%)</title><rect x="761.1" y="675.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="764.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onComplete (11 samples, 0.26%)</title><rect x="761.1" y="659.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="764.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (8 samples, 0.19%)</title><rect x="761.1" y="643.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="764.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (8 samples, 0.19%)</title><rect x="761.1" y="627.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="764.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.19%)</title><rect x="761.1" y="611.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="764.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.19%)</title><rect x="761.1" y="595.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (5 samples, 0.12%)</title><rect x="761.1" y="579.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.1" y="590.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="761.1" y="563.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="764.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations$$Lambda$595/1364654810.accept (3 samples, 0.07%)</title><rect x="761.7" y="563.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="764.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations$$Lambda$595/1364654810.accept (3 samples, 0.07%)</title><rect x="762.5" y="579.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="765.5" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.lambda$add$0 (3 samples, 0.07%)</title><rect x="762.5" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="765.5" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.remove (3 samples, 0.07%)</title><rect x="762.5" y="547.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="765.5" y="558.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.remove (2 samples, 0.05%)</title><rect x="762.8" y="531.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="765.8" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$392/998733248.accept (3 samples, 0.07%)</title><rect x="763.3" y="643.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="766.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.advance (3 samples, 0.07%)</title><rect x="763.3" y="627.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="766.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.unsubscribe (2 samples, 0.05%)</title><rect x="763.6" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="766.6" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onComplete (72 samples, 1.68%)</title><rect x="764.1" y="691.0" width="19.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="767.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.complete (72 samples, 1.68%)</title><rect x="764.1" y="675.0" width="19.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="767.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onComplete (72 samples, 1.68%)</title><rect x="764.1" y="659.0" width="19.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="767.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onComplete (72 samples, 1.68%)</title><rect x="764.1" y="643.0" width="19.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="767.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (70 samples, 1.64%)</title><rect x="764.4" y="627.0" width="19.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="767.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (70 samples, 1.64%)</title><rect x="764.4" y="611.0" width="19.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="767.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (6 samples, 0.14%)</title><rect x="764.4" y="595.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.02%)</title><rect x="764.4" y="579.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="764.4" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="767.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.02%)</title><rect x="764.7" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="767.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/GetBodyHandler$$Lambda$706/845313759.apply (1 samples, 0.02%)</title><rect x="764.7" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="767.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.02%)</title><rect x="765.0" y="579.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="768.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/GetBodyHandler$$Lambda$706/845313759.apply (3 samples, 0.07%)</title><rect x="765.2" y="579.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="768.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/GetBodyHandler.lambda$apply$0 (3 samples, 0.07%)</title><rect x="765.2" y="563.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="768.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (2 samples, 0.05%)</title><rect x="765.5" y="547.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="768.5" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (2 samples, 0.05%)</title><rect x="765.5" y="531.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="768.5" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.02%)</title><rect x="765.5" y="515.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="768.5" y="526.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.02%)</title><rect x="765.5" y="499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="768.5" y="510.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.02%)</title><rect x="765.5" y="483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="768.5" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="765.8" y="515.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="768.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (64 samples, 1.49%)</title><rect x="766.1" y="595.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (64 samples, 1.49%)</title><rect x="766.1" y="579.0" width="17.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="769.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 0.09%)</title><rect x="766.1" y="563.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="769.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$608/356097117.accept (4 samples, 0.09%)</title><rect x="766.1" y="547.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.1" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$608/356097117.accept (60 samples, 1.40%)</title><rect x="767.2" y="563.0" width="16.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="770.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$4 (57 samples, 1.33%)</title><rect x="768.0" y="547.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (57 samples, 1.33%)</title><rect x="768.0" y="531.0" width="15.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="771.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (57 samples, 1.33%)</title><rect x="768.0" y="515.0" width="15.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="771.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (7 samples, 0.16%)</title><rect x="768.3" y="499.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (6 samples, 0.14%)</title><rect x="768.3" y="483.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="771.3" y="494.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.07%)</title><rect x="768.3" y="467.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="771.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$619/314910917.apply (3 samples, 0.07%)</title><rect x="769.1" y="467.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="772.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$619/314910917.apply (1 samples, 0.02%)</title><rect x="769.9" y="483.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="772.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$3 (1 samples, 0.02%)</title><rect x="769.9" y="467.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (2 samples, 0.05%)</title><rect x="770.2" y="499.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="773.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeRelay (1 samples, 0.02%)</title><rect x="770.5" y="483.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.5" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.02%)</title><rect x="770.5" y="467.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="770.5" y="451.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (47 samples, 1.10%)</title><rect x="770.8" y="499.0" width="12.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.05%)</title><rect x="770.8" y="483.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="773.8" y="494.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.02%)</title><rect x="770.8" y="467.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="773.8" y="478.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.02%)</title><rect x="770.8" y="451.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="773.8" y="462.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.02%)</title><rect x="770.8" y="435.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="773.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="771.0" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="774.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (1 samples, 0.02%)</title><rect x="771.0" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (45 samples, 1.05%)</title><rect x="771.3" y="483.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (43 samples, 1.00%)</title><rect x="771.3" y="467.0" width="11.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="774.3" y="478.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.07%)</title><rect x="771.9" y="451.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="774.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (29 samples, 0.68%)</title><rect x="772.7" y="451.0" width="8.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="775.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (29 samples, 0.68%)</title><rect x="772.7" y="435.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="775.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalPush (28 samples, 0.65%)</title><rect x="773.0" y="419.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="776.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (26 samples, 0.61%)</title><rect x="773.2" y="403.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.2" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (1 samples, 0.02%)</title><rect x="773.5" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="776.5" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title><rect x="773.5" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="776.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 0.56%)</title><rect x="773.8" y="387.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="776.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (24 samples, 0.56%)</title><rect x="773.8" y="371.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.8" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark (15 samples, 0.35%)</title><rect x="773.8" y="355.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="776.8" y="366.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.05%)</title><rect x="773.8" y="339.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.8" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="774.3" y="339.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="777.3" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.07%)</title><rect x="774.6" y="339.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="777.6" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title><rect x="775.4" y="339.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="778.4" y="350.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="775.7" y="339.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="778.7" y="350.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.05%)</title><rect x="776.0" y="339.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="779.0" y="350.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="776.5" y="339.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="779.5" y="350.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.07%)</title><rect x="777.1" y="339.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="780.1" y="350.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.14%)</title><rect x="777.9" y="355.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="780.9" y="366.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.05%)</title><rect x="779.6" y="355.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="782.6" y="366.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="780.1" y="355.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="783.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.getProbe (1 samples, 0.02%)</title><rect x="780.4" y="403.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalPush (1 samples, 0.02%)</title><rect x="780.7" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="783.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (1 samples, 0.02%)</title><rect x="780.7" y="435.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="783.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="781.0" y="451.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$616/762811245.accept (5 samples, 0.12%)</title><rect x="781.2" y="451.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="784.2" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$613/1259413759.accept (1 samples, 0.02%)</title><rect x="782.6" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$$Lambda$196/1405076149.accept (1 samples, 0.02%)</title><rect x="782.9" y="451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="785.9" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$616/762811245.accept (1 samples, 0.02%)</title><rect x="783.2" y="467.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$readBodyAsync$0 (1 samples, 0.02%)</title><rect x="783.2" y="451.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="786.2" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$$Lambda$196/1405076149.accept (1 samples, 0.02%)</title><rect x="783.4" y="467.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="786.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.lambda$sendAsync$0 (1 samples, 0.02%)</title><rect x="783.4" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="786.4" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.unreference (1 samples, 0.02%)</title><rect x="783.4" y="435.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="786.4" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.facade (1 samples, 0.02%)</title><rect x="783.4" y="419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="786.4" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.join (1 samples, 0.02%)</title><rect x="783.7" y="627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="786.7" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.02%)</title><rect x="783.7" y="611.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="786.7" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="783.7" y="595.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="786.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onNext (2 samples, 0.05%)</title><rect x="784.0" y="691.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="787.0" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onNext (2 samples, 0.05%)</title><rect x="784.0" y="675.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onNext (2 samples, 0.05%)</title><rect x="784.0" y="659.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="787.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onNext (2 samples, 0.05%)</title><rect x="784.0" y="643.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="787.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onNext (2 samples, 0.05%)</title><rect x="784.0" y="627.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="787.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onNext (2 samples, 0.05%)</title><rect x="784.0" y="611.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.0" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.addAll (2 samples, 0.05%)</title><rect x="784.0" y="595.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="787.0" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="784.0" y="579.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="787.0" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.02%)</title><rect x="784.0" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.0" y="574.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="784.3" y="579.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="787.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.tryDecrement (1 samples, 0.02%)</title><rect x="784.5" y="691.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="787.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.decreaseAndGet (1 samples, 0.02%)</title><rect x="784.5" y="675.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="787.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.compareAndSet (1 samples, 0.02%)</title><rect x="784.5" y="659.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="787.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.sliceWithLimitedCapacity (5 samples, 0.12%)</title><rect x="784.8" y="691.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="787.8" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title><rect x="784.8" y="675.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.8" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.slice (4 samples, 0.09%)</title><rect x="785.1" y="675.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.1" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.05%)</title><rect x="785.4" y="659.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="788.4" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="785.4" y="643.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.4" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="785.4" y="627.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="788.4" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="785.6" y="611.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="788.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="785.6" y="595.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.join (1 samples, 0.02%)</title><rect x="785.9" y="659.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="788.9" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (12 samples, 0.28%)</title><rect x="786.2" y="787.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="789.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (2 samples, 0.05%)</title><rect x="786.2" y="771.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="789.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="786.5" y="755.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="789.5" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="786.5" y="739.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (10 samples, 0.23%)</title><rect x="786.7" y="771.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="789.7" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (10 samples, 0.23%)</title><rect x="786.7" y="755.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="789.7" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (10 samples, 0.23%)</title><rect x="786.7" y="739.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="789.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (6 samples, 0.14%)</title><rect x="787.0" y="723.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="790.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (2 samples, 0.05%)</title><rect x="787.0" y="707.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="790.0" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.05%)</title><rect x="787.0" y="691.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="790.0" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.05%)</title><rect x="787.0" y="675.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="790.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (2 samples, 0.05%)</title><rect x="787.0" y="659.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="790.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 0.09%)</title><rect x="787.6" y="707.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="790.6" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.07%)</title><rect x="787.6" y="691.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="790.6" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (3 samples, 0.07%)</title><rect x="787.6" y="675.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="790.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (1 samples, 0.02%)</title><rect x="788.4" y="691.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="791.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.02%)</title><rect x="788.4" y="675.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="791.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.02%)</title><rect x="788.4" y="659.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="791.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (1 samples, 0.02%)</title><rect x="788.4" y="643.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (1 samples, 0.02%)</title><rect x="788.4" y="627.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="791.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.02%)</title><rect x="788.4" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="791.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.02%)</title><rect x="788.4" y="595.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (1 samples, 0.02%)</title><rect x="788.4" y="579.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$191/1057916871.apply (1 samples, 0.02%)</title><rect x="788.4" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.4" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (1 samples, 0.02%)</title><rect x="788.4" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="791.4" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (1 samples, 0.02%)</title><rect x="788.4" y="531.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="791.4" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (1 samples, 0.02%)</title><rect x="788.4" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="791.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (1 samples, 0.02%)</title><rect x="788.4" y="499.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.4" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (1 samples, 0.02%)</title><rect x="788.4" y="483.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="791.4" y="494.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (1 samples, 0.02%)</title><rect x="788.4" y="467.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="791.4" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.02%)</title><rect x="788.4" y="451.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="791.4" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.02%)</title><rect x="788.4" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="791.4" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="788.4" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.4" y="430.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (1 samples, 0.02%)</title><rect x="788.4" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (1 samples, 0.02%)</title><rect x="788.4" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.02%)</title><rect x="788.4" y="371.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="791.4" y="382.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="788.4" y="355.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="791.4" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (1 samples, 0.02%)</title><rect x="788.7" y="723.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="791.7" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.canContinueParsing (1 samples, 0.02%)</title><rect x="788.7" y="707.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.7" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.on (2 samples, 0.05%)</title><rect x="788.9" y="723.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="791.9" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (2 samples, 0.05%)</title><rect x="788.9" y="707.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.9" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (1 samples, 0.02%)</title><rect x="789.5" y="835.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="792.5" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (1 samples, 0.02%)</title><rect x="789.5" y="819.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="792.5" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$112/637964804.run (302 samples, 7.05%)</title><rect x="789.8" y="899.0" width="83.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="792.8" y="910.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.lambda$handleRequest$1 (302 samples, 7.05%)</title><rect x="789.8" y="883.0" width="83.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="792.8" y="894.0">ru/mail/p..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (12 samples, 0.28%)</title><rect x="790.1" y="867.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="793.1" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.07%)</title><rect x="792.3" y="851.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="795.3" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.07%)</title><rect x="792.3" y="835.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="795.3" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="793.1" y="851.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="796.1" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="793.1" y="835.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="796.1" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="793.1" y="819.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="796.1" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="793.1" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="796.1" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="793.1" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="796.1" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="793.1" y="771.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="796.1" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="793.1" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="796.1" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponseLocal (24 samples, 0.56%)</title><rect x="793.4" y="867.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="796.4" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.get (24 samples, 0.56%)</title><rect x="793.4" y="851.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="796.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="793.4" y="835.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="796.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.get (23 samples, 0.54%)</title><rect x="793.6" y="835.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="796.6" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.07%)</title><rect x="793.6" y="819.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.6" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.07%)</title><rect x="793.6" y="803.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="796.6" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$639/310460158.get$Lambda (3 samples, 0.07%)</title><rect x="793.6" y="787.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="794.2" y="771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="797.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="794.2" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="797.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (20 samples, 0.47%)</title><rect x="794.5" y="819.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="797.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (20 samples, 0.47%)</title><rect x="794.5" y="803.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="797.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (20 samples, 0.47%)</title><rect x="794.5" y="787.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (20 samples, 0.47%)</title><rect x="794.5" y="771.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (3 samples, 0.07%)</title><rect x="794.5" y="755.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.07%)</title><rect x="794.5" y="739.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="797.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.07%)</title><rect x="794.5" y="723.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="797.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.07%)</title><rect x="794.5" y="707.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (3 samples, 0.07%)</title><rect x="794.5" y="691.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 0.40%)</title><rect x="795.3" y="755.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="798.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 0.40%)</title><rect x="795.3" y="739.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 0.40%)</title><rect x="795.3" y="723.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="798.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 0.40%)</title><rect x="795.3" y="707.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="798.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (17 samples, 0.40%)</title><rect x="795.3" y="691.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.3" y="702.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="795.8" y="675.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="798.8" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (10 samples, 0.23%)</title><rect x="796.1" y="675.0" width="2.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="799.1" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="796.4" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="799.4" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.05%)</title><rect x="796.7" y="659.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="799.7" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="797.2" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="800.2" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.12%)</title><rect x="797.5" y="659.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="800.5" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.09%)</title><rect x="798.9" y="675.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="801.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendReplica (265 samples, 6.19%)</title><rect x="800.0" y="867.0" width="73.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="803.0" y="878.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.severalNodesForKey (44 samples, 1.03%)</title><rect x="800.0" y="851.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="803.0" y="862.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (5 samples, 0.12%)</title><rect x="800.0" y="835.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="803.0" y="846.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (5 samples, 0.12%)</title><rect x="800.0" y="819.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="803.0" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (5 samples, 0.12%)</title><rect x="800.0" y="803.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="803.0" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (5 samples, 0.12%)</title><rect x="800.0" y="787.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.0" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (4 samples, 0.09%)</title><rect x="800.0" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="803.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (1 samples, 0.02%)</title><rect x="800.8" y="755.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="803.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.compareTo (1 samples, 0.02%)</title><rect x="800.8" y="739.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="803.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.compare (1 samples, 0.02%)</title><rect x="800.8" y="723.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="803.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.proxyRequestBuilder (1 samples, 0.02%)</title><rect x="801.1" y="771.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="804.1" y="782.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (3 samples, 0.07%)</title><rect x="801.4" y="835.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.4" y="846.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (3 samples, 0.07%)</title><rect x="801.4" y="819.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="804.4" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (22 samples, 0.51%)</title><rect x="802.2" y="835.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="805.2" y="846.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (5 samples, 0.12%)</title><rect x="802.2" y="819.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.2" y="830.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (5 samples, 0.12%)</title><rect x="802.2" y="803.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="805.2" y="814.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (5 samples, 0.12%)</title><rect x="802.2" y="787.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="805.2" y="798.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (5 samples, 0.12%)</title><rect x="802.2" y="771.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="805.2" y="782.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implDigest (5 samples, 0.12%)</title><rect x="802.2" y="755.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.2" y="766.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bBig (3 samples, 0.07%)</title><rect x="802.2" y="739.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="805.2" y="750.0"></text>
</g>
<g>
<title>sha256_implCompress (2 samples, 0.05%)</title><rect x="802.2" y="723.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="805.2" y="734.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (1 samples, 0.02%)</title><rect x="802.7" y="723.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="805.7" y="734.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompress (2 samples, 0.05%)</title><rect x="803.0" y="739.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="806.0" y="750.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.implCompressCheck (2 samples, 0.05%)</title><rect x="803.0" y="723.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="806.0" y="734.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="803.0" y="707.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="806.0" y="718.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iBig64 (1 samples, 0.02%)</title><rect x="803.3" y="707.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.3" y="718.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (17 samples, 0.40%)</title><rect x="803.6" y="819.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.6" y="830.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (17 samples, 0.40%)</title><rect x="803.6" y="803.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="806.6" y="814.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (17 samples, 0.40%)</title><rect x="803.6" y="787.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="806.6" y="798.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (9 samples, 0.21%)</title><rect x="803.6" y="771.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="806.6" y="782.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (8 samples, 0.19%)</title><rect x="803.6" y="755.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.6" y="766.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (7 samples, 0.16%)</title><rect x="803.6" y="739.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (3 samples, 0.07%)</title><rect x="803.6" y="723.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="806.6" y="734.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (3 samples, 0.07%)</title><rect x="803.6" y="707.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="806.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (3 samples, 0.07%)</title><rect x="803.6" y="691.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.6" y="702.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (1 samples, 0.02%)</title><rect x="803.8" y="675.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="806.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Class.newReflectionData (1 samples, 0.02%)</title><rect x="803.8" y="659.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="806.8" y="670.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor7.newInstance (1 samples, 0.02%)</title><rect x="804.1" y="675.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="807.1" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.09%)</title><rect x="804.4" y="723.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="807.4" y="734.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.checkAccess (1 samples, 0.02%)</title><rect x="804.4" y="707.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.4" y="718.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.verifyAccess (1 samples, 0.02%)</title><rect x="804.4" y="691.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="807.4" y="702.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.slowVerifyAccess (1 samples, 0.02%)</title><rect x="804.4" y="675.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="807.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.verifyMemberAccess (1 samples, 0.02%)</title><rect x="804.4" y="659.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="807.4" y="670.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.07%)</title><rect x="804.7" y="707.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="807.7" y="718.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.checkAccess (1 samples, 0.02%)</title><rect x="804.7" y="691.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="807.7" y="702.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor7.newInstance (2 samples, 0.05%)</title><rect x="804.9" y="691.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.9" y="702.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2$SHA256.&lt;init&gt; (1 samples, 0.02%)</title><rect x="805.2" y="675.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="808.2" y="686.0"></text>
</g>
<g>
<title>sun/security/provider/SHA2.&lt;init&gt; (1 samples, 0.02%)</title><rect x="805.2" y="659.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="808.2" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="805.2" y="643.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="808.2" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="805.2" y="627.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="808.2" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="805.2" y="611.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="808.2" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="805.2" y="595.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="808.2" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="805.2" y="579.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="808.2" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.02%)</title><rect x="805.2" y="563.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="808.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.02%)</title><rect x="805.5" y="739.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="808.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="805.5" y="723.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="808.5" y="734.0"></text>
</g>
<g>
<title>java/security/Provider.getService (1 samples, 0.02%)</title><rect x="805.8" y="755.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="808.8" y="766.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (8 samples, 0.19%)</title><rect x="806.0" y="771.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="809.0" y="782.0"></text>
</g>
<g>
<title>java/security/Provider.getService (5 samples, 0.12%)</title><rect x="806.6" y="755.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="809.6" y="766.0"></text>
</g>
<g>
<title>java/security/Provider.ensureLegacyParsed (1 samples, 0.02%)</title><rect x="806.6" y="739.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="809.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.09%)</title><rect x="806.9" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.9" y="750.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (1 samples, 0.02%)</title><rect x="807.7" y="723.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="810.7" y="734.0"></text>
</g>
<g>
<title>java/util/Objects.hash (1 samples, 0.02%)</title><rect x="807.7" y="707.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="810.7" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (1 samples, 0.02%)</title><rect x="807.7" y="691.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.7" y="702.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (1 samples, 0.02%)</title><rect x="808.0" y="755.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.0" y="766.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (1 samples, 0.02%)</title><rect x="808.0" y="739.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="811.0" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.getNodesFromMap (14 samples, 0.33%)</title><rect x="808.2" y="835.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="811.2" y="846.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (6 samples, 0.14%)</title><rect x="808.2" y="819.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.2" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (6 samples, 0.14%)</title><rect x="808.2" y="803.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.2" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (5 samples, 0.12%)</title><rect x="808.2" y="787.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.2" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="808.5" y="771.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.5" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (3 samples, 0.07%)</title><rect x="808.8" y="771.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.8" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (2 samples, 0.05%)</title><rect x="808.8" y="755.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.8" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.05%)</title><rect x="808.8" y="739.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="811.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="809.1" y="723.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="812.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="809.1" y="707.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.1" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.02%)</title><rect x="809.1" y="691.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="812.1" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.getChar (1 samples, 0.02%)</title><rect x="809.1" y="675.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.1" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.02%)</title><rect x="809.3" y="755.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="812.3" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.02%)</title><rect x="809.6" y="787.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.6" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap$Values.iterator (1 samples, 0.02%)</title><rect x="809.9" y="819.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="812.9" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap$ValueIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="809.9" y="803.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="812.9" y="814.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (7 samples, 0.16%)</title><rect x="810.2" y="819.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="813.2" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (7 samples, 0.16%)</title><rect x="810.2" y="803.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="813.2" y="814.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="810.2" y="787.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="813.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.05%)</title><rect x="810.7" y="787.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="813.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.05%)</title><rect x="810.7" y="771.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="813.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 0.05%)</title><rect x="810.7" y="755.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="813.7" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="811.0" y="739.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="814.0" y="750.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (2 samples, 0.05%)</title><rect x="811.3" y="787.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (1 samples, 0.02%)</title><rect x="811.6" y="771.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="814.6" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.02%)</title><rect x="811.8" y="787.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.8" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.handleResponses (219 samples, 5.12%)</title><rect x="812.1" y="851.0" width="60.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.1" y="862.0">ru/mai..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.09%)</title><rect x="812.1" y="835.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="815.1" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.09%)</title><rect x="812.1" y="819.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="815.1" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$114/599301499.get$Lambda (1 samples, 0.02%)</title><rect x="812.1" y="803.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="815.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$114/599301499.&lt;init&gt; (1 samples, 0.02%)</title><rect x="812.1" y="787.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="815.1" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$119/692123147.get$Lambda (3 samples, 0.07%)</title><rect x="812.4" y="803.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$119/692123147.&lt;init&gt; (3 samples, 0.07%)</title><rect x="812.4" y="787.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.handleResponses (206 samples, 4.81%)</title><rect x="813.2" y="835.0" width="56.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="816.2" y="846.0">ru/mai..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.02%)</title><rect x="813.5" y="819.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.5" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (1 samples, 0.02%)</title><rect x="813.5" y="803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.5" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (1 samples, 0.02%)</title><rect x="813.8" y="819.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="816.8" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.02%)</title><rect x="813.8" y="803.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.8" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.02%)</title><rect x="813.8" y="787.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="816.8" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (2 samples, 0.05%)</title><rect x="814.0" y="819.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.0" y="830.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (1 samples, 0.02%)</title><rect x="814.6" y="819.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.6" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (1 samples, 0.02%)</title><rect x="814.6" y="803.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.6" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientFacade.sendAsync (131 samples, 3.06%)</title><rect x="814.9" y="819.0" width="36.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="817.9" y="830.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (131 samples, 3.06%)</title><rect x="814.9" y="803.0" width="36.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="817.9" y="814.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (131 samples, 3.06%)</title><rect x="814.9" y="787.0" width="36.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.9" y="798.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (131 samples, 3.06%)</title><rect x="814.9" y="771.0" width="36.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.9" y="782.0">jdk..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.02%)</title><rect x="815.4" y="755.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="818.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (2 samples, 0.05%)</title><rect x="815.7" y="755.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="818.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.05%)</title><rect x="815.7" y="739.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="818.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.&lt;init&gt; (89 samples, 2.08%)</title><rect x="816.2" y="755.0" width="24.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="819.2" y="766.0">j..</text>
</g>
<g>
<title>java/lang/String.toLowerCase (1 samples, 0.02%)</title><rect x="816.8" y="739.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="819.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (1 samples, 0.02%)</title><rect x="816.8" y="723.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="819.8" y="734.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (3 samples, 0.07%)</title><rect x="817.1" y="739.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="820.1" y="750.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (1 samples, 0.02%)</title><rect x="817.1" y="723.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="820.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.02%)</title><rect x="817.1" y="707.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="820.1" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.02%)</title><rect x="817.1" y="691.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="820.1" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="817.1" y="675.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="820.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (2 samples, 0.05%)</title><rect x="817.3" y="723.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="820.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.05%)</title><rect x="817.3" y="707.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="820.3" y="718.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.02%)</title><rect x="817.3" y="691.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="820.3" y="702.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.02%)</title><rect x="817.3" y="675.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="820.3" y="686.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.02%)</title><rect x="817.3" y="659.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="820.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (1 samples, 0.02%)</title><rect x="817.6" y="691.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="820.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.02%)</title><rect x="817.6" y="675.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="820.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.02%)</title><rect x="817.6" y="659.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="820.6" y="670.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (17 samples, 0.40%)</title><rect x="817.9" y="739.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="820.9" y="750.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (16 samples, 0.37%)</title><rect x="817.9" y="723.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="820.9" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (15 samples, 0.35%)</title><rect x="818.2" y="707.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="821.2" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (14 samples, 0.33%)</title><rect x="818.4" y="691.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="821.4" y="702.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$141/1757337625.accept (14 samples, 0.33%)</title><rect x="818.4" y="675.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.4" y="686.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (13 samples, 0.30%)</title><rect x="818.7" y="659.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="821.7" y="670.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 0.26%)</title><rect x="819.0" y="643.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.0" y="654.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$147/136542916.accept (9 samples, 0.21%)</title><rect x="819.0" y="627.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="822.0" y="638.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (9 samples, 0.21%)</title><rect x="819.0" y="611.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="822.0" y="622.0"></text>
</g>
<g>
<title>java/lang/String.trim (3 samples, 0.07%)</title><rect x="819.3" y="595.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (3 samples, 0.07%)</title><rect x="819.3" y="579.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="822.3" y="590.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="819.5" y="563.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="822.5" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$70/360207322.test (5 samples, 0.12%)</title><rect x="820.1" y="595.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="823.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$2 (5 samples, 0.12%)</title><rect x="820.1" y="579.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="823.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$69/875917495.test (2 samples, 0.05%)</title><rect x="820.4" y="563.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="823.4" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (2 samples, 0.05%)</title><rect x="820.4" y="547.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="823.4" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (2 samples, 0.05%)</title><rect x="820.4" y="531.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="823.4" y="542.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (2 samples, 0.05%)</title><rect x="820.4" y="515.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="823.4" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (2 samples, 0.05%)</title><rect x="820.4" y="499.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="823.4" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.05%)</title><rect x="820.4" y="483.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="823.4" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.05%)</title><rect x="820.4" y="467.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="823.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.05%)</title><rect x="820.4" y="451.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="823.4" y="462.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.05%)</title><rect x="820.4" y="435.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="823.4" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 0.05%)</title><rect x="820.4" y="419.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="823.4" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidName (1 samples, 0.02%)</title><rect x="820.9" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="823.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidValue (1 samples, 0.02%)</title><rect x="821.2" y="563.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="824.2" y="574.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$AbstractImmutableList.iterator (1 samples, 0.02%)</title><rect x="821.5" y="627.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="824.5" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.02%)</title><rect x="821.5" y="611.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="824.5" y="622.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.next (1 samples, 0.02%)</title><rect x="821.7" y="627.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="824.7" y="638.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$List12.get (1 samples, 0.02%)</title><rect x="821.7" y="611.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="824.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.trim (1 samples, 0.02%)</title><rect x="822.0" y="643.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="825.0" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (1 samples, 0.02%)</title><rect x="822.0" y="627.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="825.0" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="822.0" y="611.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="825.0" y="622.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.02%)</title><rect x="822.3" y="723.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="825.3" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.characteristics (2 samples, 0.05%)</title><rect x="822.6" y="739.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="825.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkURI (1 samples, 0.02%)</title><rect x="823.1" y="739.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="826.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (1 samples, 0.02%)</title><rect x="823.1" y="723.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="826.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.retrieveProxy (61 samples, 1.42%)</title><rect x="823.4" y="739.0" width="16.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.4" y="750.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector.select (61 samples, 1.42%)</title><rect x="823.4" y="723.0" width="16.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.02%)</title><rect x="823.4" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="823.4" y="691.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="826.4" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="823.4" y="675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="826.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (1 samples, 0.02%)</title><rect x="823.7" y="707.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="826.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (1 samples, 0.02%)</title><rect x="823.7" y="691.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="826.7" y="702.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (59 samples, 1.38%)</title><rect x="824.0" y="707.0" width="16.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="827.0" y="718.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (39 samples, 0.91%)</title><rect x="824.0" y="691.0" width="10.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="827.0" y="702.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.02%)</title><rect x="824.2" y="675.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="827.2" y="686.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.02%)</title><rect x="824.5" y="675.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="827.5" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.267] (1 samples, 0.02%)</title><rect x="824.8" y="675.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="827.8" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.05%)</title><rect x="825.1" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="828.1" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.267] (1 samples, 0.02%)</title><rect x="825.3" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="828.3" y="670.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 0.14%)</title><rect x="825.6" y="675.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="828.6" y="686.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.05%)</title><rect x="826.2" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="829.2" y="670.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.05%)</title><rect x="826.7" y="659.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="829.7" y="670.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.05%)</title><rect x="827.3" y="675.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.3" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="827.8" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="830.8" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (2 samples, 0.05%)</title><rect x="828.1" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="831.1" y="686.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.05%)</title><rect x="828.6" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="831.6" y="686.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.02%)</title><rect x="829.2" y="675.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="832.2" y="686.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (7 samples, 0.16%)</title><rect x="829.5" y="675.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="832.5" y="686.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.07%)</title><rect x="830.3" y="659.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.3" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.07%)</title><rect x="830.3" y="643.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="833.3" y="654.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.02%)</title><rect x="831.1" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="834.1" y="670.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (12 samples, 0.28%)</title><rect x="831.4" y="675.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="834.4" y="686.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.05%)</title><rect x="832.5" y="659.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="835.5" y="670.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (2 samples, 0.05%)</title><rect x="832.5" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="835.5" y="654.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.02%)</title><rect x="833.1" y="659.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="836.1" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.12%)</title><rect x="833.3" y="659.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="836.3" y="670.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.02%)</title><rect x="833.6" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.6" y="654.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.07%)</title><rect x="833.9" y="643.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="836.9" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.07%)</title><rect x="833.9" y="627.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="836.9" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.07%)</title><rect x="833.9" y="611.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="836.9" y="622.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.02%)</title><rect x="834.7" y="691.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="837.7" y="702.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.02%)</title><rect x="835.0" y="691.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="838.0" y="702.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.02%)</title><rect x="835.3" y="691.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="838.3" y="702.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (16 samples, 0.37%)</title><rect x="835.5" y="691.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="838.5" y="702.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (16 samples, 0.37%)</title><rect x="835.5" y="675.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="838.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.14%)</title><rect x="836.4" y="659.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="839.4" y="670.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.14%)</title><rect x="836.4" y="643.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.4" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.14%)</title><rect x="836.4" y="627.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="839.4" y="638.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="837.7" y="611.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="840.7" y="622.0"></text>
</g>
<g>
<title>sun/net/NetProperties.get (7 samples, 0.16%)</title><rect x="838.0" y="659.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="841.0" y="670.0"></text>
</g>
<g>
<title>java/lang/System.getProperty (1 samples, 0.02%)</title><rect x="838.0" y="643.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="841.0" y="654.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.02%)</title><rect x="838.0" y="627.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="841.0" y="638.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.02%)</title><rect x="838.0" y="611.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.02%)</title><rect x="838.0" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="841.0" y="606.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (6 samples, 0.14%)</title><rect x="838.3" y="643.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="841.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.14%)</title><rect x="838.3" y="627.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="841.3" y="638.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.14%)</title><rect x="838.3" y="611.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="841.3" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (6 samples, 0.14%)</title><rect x="838.3" y="595.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="841.3" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="839.7" y="579.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="842.7" y="590.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.02%)</title><rect x="839.9" y="691.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="842.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.&lt;init&gt; (1 samples, 0.02%)</title><rect x="840.2" y="739.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="843.2" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap.&lt;init&gt; (1 samples, 0.02%)</title><rect x="840.2" y="723.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="843.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.retrieveProxy (1 samples, 0.02%)</title><rect x="840.2" y="707.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="843.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidName (1 samples, 0.02%)</title><rect x="840.5" y="739.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="843.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.&lt;init&gt; (24 samples, 0.56%)</title><rect x="840.8" y="755.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="843.8" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.&lt;init&gt; (4 samples, 0.09%)</title><rect x="841.3" y="739.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="844.3" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.filterChain (18 samples, 0.42%)</title><rect x="842.4" y="739.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="845.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/FilterFactory.getFilterChain (15 samples, 0.35%)</title><rect x="843.2" y="723.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="846.2" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="844.4" y="707.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="847.4" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.02%)</title><rect x="844.4" y="691.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="847.4" y="702.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.02%)</title><rect x="844.4" y="675.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="847.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="844.6" y="707.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="847.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="844.6" y="691.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="847.6" y="702.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (3 samples, 0.07%)</title><rect x="844.9" y="707.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (2 samples, 0.05%)</title><rect x="844.9" y="691.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="847.9" y="702.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (2 samples, 0.05%)</title><rect x="844.9" y="675.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="847.9" y="686.0"></text>
</g>
<g>
<title>jdk/internal/reflect/ReflectionFactory.copyConstructor (1 samples, 0.02%)</title><rect x="845.5" y="691.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="848.5" y="702.0"></text>
</g>
<g>
<title>java/lang/reflect/ReflectAccess.copyConstructor (1 samples, 0.02%)</title><rect x="845.5" y="675.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="848.5" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.copy (1 samples, 0.02%)</title><rect x="845.5" y="659.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="848.5" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="845.5" y="643.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="848.5" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="845.5" y="627.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="848.5" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="845.5" y="611.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="848.5" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="845.5" y="595.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="848.5" y="606.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.02%)</title><rect x="845.5" y="579.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="848.5" y="590.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.02%)</title><rect x="845.5" y="563.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="848.5" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.09%)</title><rect x="845.7" y="707.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="848.7" y="718.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.checkAccess (1 samples, 0.02%)</title><rect x="846.6" y="691.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="849.6" y="702.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.verifyAccess (1 samples, 0.02%)</title><rect x="846.6" y="675.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="849.6" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.slowVerifyAccess (1 samples, 0.02%)</title><rect x="846.6" y="659.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="849.6" y="670.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.verifyMemberAccess (1 samples, 0.02%)</title><rect x="846.6" y="643.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="849.6" y="654.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor11.newInstance (2 samples, 0.05%)</title><rect x="846.8" y="707.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="849.8" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync (13 samples, 0.30%)</title><rect x="847.4" y="755.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="850.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (7 samples, 0.16%)</title><rect x="847.4" y="739.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="850.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.16%)</title><rect x="847.4" y="723.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="850.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.02%)</title><rect x="847.4" y="707.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="850.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.02%)</title><rect x="847.4" y="691.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="850.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (6 samples, 0.14%)</title><rect x="847.7" y="707.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="850.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (2 samples, 0.05%)</title><rect x="847.7" y="691.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="850.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="847.7" y="675.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="850.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="847.7" y="659.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="850.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="847.7" y="643.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="850.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.05%)</title><rect x="847.7" y="627.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="850.7" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.05%)</title><rect x="847.7" y="611.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="850.7" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.05%)</title><rect x="847.7" y="595.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="850.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.09%)</title><rect x="848.2" y="691.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.09%)</title><rect x="848.2" y="675.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="851.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.09%)</title><rect x="848.2" y="659.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.09%)</title><rect x="848.2" y="643.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="851.2" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="849.0" y="627.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.0" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.02%)</title><rect x="849.0" y="611.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="852.0" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="849.0" y="595.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="852.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync0 (6 samples, 0.14%)</title><rect x="849.3" y="739.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="852.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (6 samples, 0.14%)</title><rect x="849.3" y="723.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (5 samples, 0.12%)</title><rect x="849.6" y="707.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.6" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.05%)</title><rect x="850.4" y="691.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="853.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.05%)</title><rect x="850.4" y="675.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="853.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.removeLocal (2 samples, 0.05%)</title><rect x="851.0" y="819.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="854.0" y="830.0"></text>
</g>
<g>
<title>java/util/TreeSet.remove (2 samples, 0.05%)</title><rect x="851.0" y="803.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.0" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (2 samples, 0.05%)</title><rect x="851.0" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="854.0" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="851.0" y="771.0" width="0.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="854.0" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="851.2" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.2" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.deleteEntry (1 samples, 0.02%)</title><rect x="851.2" y="755.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="854.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$637/600928666.handleLocalResponse (6 samples, 0.14%)</title><rect x="851.5" y="819.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="854.5" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.lambda$handleResponses$1 (6 samples, 0.14%)</title><rect x="851.5" y="803.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.5" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.get (6 samples, 0.14%)</title><rect x="851.5" y="787.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="854.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (6 samples, 0.14%)</title><rect x="851.5" y="771.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (6 samples, 0.14%)</title><rect x="851.5" y="755.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="854.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 0.14%)</title><rect x="851.5" y="739.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="854.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (6 samples, 0.14%)</title><rect x="851.5" y="723.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="854.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.05%)</title><rect x="851.5" y="707.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="854.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.05%)</title><rect x="851.5" y="691.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.05%)</title><rect x="851.5" y="675.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.05%)</title><rect x="851.5" y="659.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="854.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.05%)</title><rect x="851.5" y="643.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="852.1" y="707.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="852.1" y="691.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="855.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="852.1" y="675.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="852.1" y="659.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="855.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="852.1" y="643.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="852.1" y="627.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="855.1" y="638.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="852.1" y="611.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="855.1" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="852.1" y="595.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="855.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.07%)</title><rect x="852.3" y="707.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="855.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.07%)</title><rect x="852.3" y="691.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="855.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.07%)</title><rect x="852.3" y="675.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="855.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.07%)</title><rect x="852.3" y="659.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="855.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.07%)</title><rect x="852.3" y="643.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="855.3" y="654.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.02%)</title><rect x="852.3" y="627.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="855.3" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.02%)</title><rect x="852.3" y="611.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="855.3" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.05%)</title><rect x="852.6" y="627.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="855.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl$$Lambda$638/616184970.requestBuild (61 samples, 1.42%)</title><rect x="853.2" y="819.0" width="16.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="856.2" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.lambda$handleResponses$2 (61 samples, 1.42%)</title><rect x="853.2" y="803.0" width="16.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="856.2" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.build (19 samples, 0.44%)</title><rect x="853.2" y="787.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="856.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ImmutableHttpRequest.&lt;init&gt; (19 samples, 0.44%)</title><rect x="853.2" y="771.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="856.2" y="782.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (17 samples, 0.40%)</title><rect x="853.2" y="755.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="856.2" y="766.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (16 samples, 0.37%)</title><rect x="853.4" y="739.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="856.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="854.0" y="723.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="857.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="854.0" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="857.0" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="854.3" y="723.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="857.3" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (12 samples, 0.28%)</title><rect x="854.6" y="723.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="857.6" y="734.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$141/1757337625.accept (9 samples, 0.21%)</title><rect x="855.1" y="707.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.1" y="718.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (9 samples, 0.21%)</title><rect x="855.1" y="691.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="858.1" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (7 samples, 0.16%)</title><rect x="855.7" y="675.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="858.7" y="686.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$147/136542916.accept (7 samples, 0.16%)</title><rect x="855.7" y="659.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="858.7" y="670.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (5 samples, 0.12%)</title><rect x="856.2" y="643.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="859.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String.trim (3 samples, 0.07%)</title><rect x="856.5" y="627.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="859.5" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (3 samples, 0.07%)</title><rect x="856.5" y="611.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="859.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$69/875917495.test (1 samples, 0.02%)</title><rect x="857.0" y="595.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="860.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$69/875917495.test (1 samples, 0.02%)</title><rect x="857.3" y="627.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="860.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (1 samples, 0.02%)</title><rect x="857.3" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="860.3" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.02%)</title><rect x="857.3" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="860.3" y="606.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (1 samples, 0.02%)</title><rect x="857.3" y="579.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="860.3" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.02%)</title><rect x="857.3" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="860.3" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.02%)</title><rect x="857.3" y="547.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="860.3" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.02%)</title><rect x="857.3" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="860.3" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.02%)</title><rect x="857.6" y="707.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="860.6" y="718.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$141/1757337625.accept (1 samples, 0.02%)</title><rect x="857.6" y="691.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="860.6" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (2 samples, 0.05%)</title><rect x="857.9" y="755.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiUtils.proxyRequestBuilder (42 samples, 0.98%)</title><rect x="858.4" y="787.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="861.4" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.05%)</title><rect x="858.4" y="771.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="861.4" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (2 samples, 0.05%)</title><rect x="858.4" y="755.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="861.4" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1782580546.invoke (2 samples, 0.05%)</title><rect x="858.4" y="739.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="861.4" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="858.4" y="723.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="861.4" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="858.4" y="707.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="861.4" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/476800120.invoke (1 samples, 0.02%)</title><rect x="858.7" y="723.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="861.7" y="734.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (32 samples, 0.75%)</title><rect x="859.0" y="771.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="862.0" y="782.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (32 samples, 0.75%)</title><rect x="859.0" y="755.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="862.0" y="766.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (29 samples, 0.68%)</title><rect x="859.8" y="739.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="862.8" y="750.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (7 samples, 0.16%)</title><rect x="859.8" y="723.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="862.8" y="734.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (7 samples, 0.16%)</title><rect x="859.8" y="707.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="862.8" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="861.4" y="691.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="864.4" y="702.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (22 samples, 0.51%)</title><rect x="861.7" y="723.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="864.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="863.4" y="707.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="866.4" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="863.4" y="691.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="866.4" y="702.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="863.4" y="675.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="866.4" y="686.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (7 samples, 0.16%)</title><rect x="863.6" y="707.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="866.6" y="718.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (1 samples, 0.02%)</title><rect x="863.6" y="691.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="866.6" y="702.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (1 samples, 0.02%)</title><rect x="863.6" y="675.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="866.6" y="686.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (4 samples, 0.09%)</title><rect x="863.9" y="691.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="866.9" y="702.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.07%)</title><rect x="864.2" y="675.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="867.2" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.07%)</title><rect x="864.2" y="659.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.2" y="670.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseIPv4Address (2 samples, 0.05%)</title><rect x="865.0" y="691.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="868.0" y="702.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scanIPv4Address (2 samples, 0.05%)</title><rect x="865.0" y="675.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="868.0" y="686.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (2 samples, 0.05%)</title><rect x="865.0" y="659.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="868.0" y="670.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (8 samples, 0.19%)</title><rect x="865.6" y="707.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="868.6" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.07%)</title><rect x="866.1" y="691.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="869.1" y="702.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.07%)</title><rect x="867.0" y="691.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.07%)</title><rect x="867.0" y="675.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="870.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.07%)</title><rect x="867.0" y="659.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="870.0" y="670.0"></text>
</g>
<g>
<title>java/net/http/HttpRequest.newBuilder (3 samples, 0.07%)</title><rect x="867.8" y="771.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="870.8" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.&lt;init&gt; (3 samples, 0.07%)</title><rect x="867.8" y="755.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.8" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.&lt;init&gt; (2 samples, 0.05%)</title><rect x="868.1" y="739.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="871.1" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap.&lt;init&gt; (2 samples, 0.05%)</title><rect x="868.1" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="871.1" y="734.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (1 samples, 0.02%)</title><rect x="868.3" y="707.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="871.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.header (5 samples, 0.12%)</title><rect x="868.6" y="771.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="871.6" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.header (5 samples, 0.12%)</title><rect x="868.6" y="755.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.6" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkNameAndValue (4 samples, 0.09%)</title><rect x="868.6" y="739.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="871.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$69/875917495.test (4 samples, 0.09%)</title><rect x="868.6" y="723.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="871.6" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (4 samples, 0.09%)</title><rect x="868.6" y="707.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="871.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (4 samples, 0.09%)</title><rect x="868.6" y="691.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="871.6" y="702.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (4 samples, 0.09%)</title><rect x="868.6" y="675.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="871.6" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (4 samples, 0.09%)</title><rect x="868.6" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="871.6" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (4 samples, 0.09%)</title><rect x="868.6" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="871.6" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (4 samples, 0.09%)</title><rect x="868.6" y="627.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="871.6" y="638.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.09%)</title><rect x="868.6" y="611.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="871.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.09%)</title><rect x="868.6" y="595.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="871.6" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (4 samples, 0.09%)</title><rect x="868.6" y="579.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="871.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.addHeader (1 samples, 0.02%)</title><rect x="869.7" y="739.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="872.7" y="750.0"></text>
</g>
<g>
<title>java/util/Map.computeIfAbsent (1 samples, 0.02%)</title><rect x="869.7" y="723.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="872.7" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.02%)</title><rect x="869.7" y="707.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="872.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="869.7" y="691.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="872.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.02%)</title><rect x="869.7" y="675.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="872.7" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.02%)</title><rect x="869.7" y="659.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="872.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncApiControllerImpl.mergeAndSendResponse (9 samples, 0.21%)</title><rect x="870.0" y="835.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="873.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (2 samples, 0.05%)</title><rect x="870.0" y="819.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="873.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.05%)</title><rect x="870.0" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="873.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.02%)</title><rect x="870.3" y="787.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="873.3" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="870.3" y="771.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="873.3" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="870.3" y="755.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="873.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="870.3" y="739.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="873.3" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="870.3" y="723.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="873.3" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="870.3" y="707.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="873.3" y="718.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.02%)</title><rect x="870.3" y="691.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="873.3" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.collateFutures (7 samples, 0.16%)</title><rect x="870.5" y="819.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="873.5" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (7 samples, 0.16%)</title><rect x="870.5" y="803.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="873.5" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils$$Lambda$224/1601412013.accept (7 samples, 0.16%)</title><rect x="870.5" y="787.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="873.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.lambda$collateFutures$1 (7 samples, 0.16%)</title><rect x="870.5" y="771.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="873.5" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.02%)</title><rect x="870.5" y="755.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="873.5" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.02%)</title><rect x="870.5" y="739.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="873.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils$$Lambda$230/1479809634.get$Lambda (1 samples, 0.02%)</title><rect x="870.5" y="723.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="873.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (6 samples, 0.14%)</title><rect x="870.8" y="755.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="873.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.09%)</title><rect x="871.4" y="739.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="874.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="871.6" y="723.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="874.6" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="871.6" y="707.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="874.6" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="871.6" y="691.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="874.6" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="871.6" y="675.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="874.6" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="871.6" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="874.6" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="871.6" y="643.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.6" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="871.6" y="627.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="874.6" y="638.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="871.6" y="611.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="874.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="871.9" y="723.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="874.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.05%)</title><rect x="871.9" y="707.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="874.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.02%)</title><rect x="872.2" y="691.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="875.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.02%)</title><rect x="872.2" y="675.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="875.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.02%)</title><rect x="872.2" y="659.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="875.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.02%)</title><rect x="872.2" y="643.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="875.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.02%)</title><rect x="872.2" y="627.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="875.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (2 samples, 0.05%)</title><rect x="872.5" y="851.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="875.5" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.05%)</title><rect x="872.5" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="875.5" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.02%)</title><rect x="872.7" y="819.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="875.7" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="872.7" y="803.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="875.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="872.7" y="787.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="875.7" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.02%)</title><rect x="872.7" y="771.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="875.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinWorkerThread.run (140 samples, 3.27%)</title><rect x="873.0" y="947.0" width="38.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="876.0" y="958.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.runWorker (140 samples, 3.27%)</title><rect x="873.0" y="931.0" width="38.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="876.0" y="942.0">jav..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="874.1" y="915.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="877.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.scan (44 samples, 1.03%)</title><rect x="874.7" y="915.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="877.7" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LILL_Z (1 samples, 0.02%)</title><rect x="878.0" y="899.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="881.0" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$Array.compareAndSet (1 samples, 0.02%)</title><rect x="878.0" y="883.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="881.0" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_L (2 samples, 0.05%)</title><rect x="878.3" y="899.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="881.3" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$Array.getAcquire (2 samples, 0.05%)</title><rect x="878.3" y="883.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="881.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.topLevelExec (29 samples, 0.68%)</title><rect x="878.8" y="899.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="881.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.doExec (29 samples, 0.68%)</title><rect x="878.8" y="883.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="881.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.exec (29 samples, 0.68%)</title><rect x="878.8" y="867.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="881.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (29 samples, 0.68%)</title><rect x="878.8" y="851.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="881.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (18 samples, 0.42%)</title><rect x="878.8" y="835.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="881.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (18 samples, 0.42%)</title><rect x="878.8" y="819.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="881.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (17 samples, 0.40%)</title><rect x="879.1" y="803.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="882.1" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="879.4" y="787.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="882.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (15 samples, 0.35%)</title><rect x="879.6" y="787.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="882.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.02%)</title><rect x="879.6" y="771.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="882.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 0.33%)</title><rect x="879.9" y="771.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="882.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (14 samples, 0.33%)</title><rect x="879.9" y="755.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="882.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (5 samples, 0.12%)</title><rect x="880.5" y="739.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="883.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.12%)</title><rect x="880.5" y="723.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="883.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.12%)</title><rect x="880.5" y="707.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="883.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.12%)</title><rect x="880.5" y="691.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="883.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (5 samples, 0.12%)</title><rect x="880.5" y="675.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="883.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="881.8" y="739.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="884.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="881.8" y="723.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="884.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="881.8" y="707.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="884.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="881.8" y="691.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="884.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="881.8" y="675.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="884.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.14%)</title><rect x="882.1" y="739.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="885.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.14%)</title><rect x="882.1" y="723.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="885.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.14%)</title><rect x="882.1" y="707.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="885.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.14%)</title><rect x="882.1" y="691.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="885.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.14%)</title><rect x="882.1" y="675.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="885.1" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="882.1" y="659.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="885.1" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.05%)</title><rect x="882.4" y="659.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="885.4" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title><rect x="882.4" y="643.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="885.4" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="882.7" y="643.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="885.7" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.07%)</title><rect x="882.9" y="659.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="885.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.26%)</title><rect x="883.8" y="835.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (27 samples, 0.63%)</title><rect x="886.8" y="915.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="889.8" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (21 samples, 0.49%)</title><rect x="888.5" y="899.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="891.5" y="910.0"></text>
</g>
<g>
<title>Unsafe_Park (9 samples, 0.21%)</title><rect x="888.7" y="883.0" width="2.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="891.7" y="894.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="888.7" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="891.7" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.09%)</title><rect x="889.0" y="867.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="892.0" y="878.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="889.8" y="851.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="892.8" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="890.1" y="867.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="893.1" y="878.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.02%)</title><rect x="890.9" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="893.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.26%)</title><rect x="891.2" y="883.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="894.2" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_wait (9 samples, 0.21%)</title><rect x="891.2" y="867.0" width="2.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="894.2" y="878.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="893.7" y="867.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="896.7" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.02%)</title><rect x="894.0" y="867.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="897.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkUntil (61 samples, 1.42%)</title><rect x="894.2" y="915.0" width="16.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="897.2" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (61 samples, 1.42%)</title><rect x="894.2" y="899.0" width="16.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="897.2" y="910.0"></text>
</g>
<g>
<title>Unsafe_Park (37 samples, 0.86%)</title><rect x="894.8" y="883.0" width="10.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="897.8" y="894.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (4 samples, 0.09%)</title><rect x="895.1" y="867.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="898.1" y="878.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="896.2" y="867.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="899.2" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 0.33%)</title><rect x="896.4" y="867.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="899.4" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.07%)</title><rect x="898.1" y="851.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="901.1" y="862.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="898.7" y="835.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="901.7" y="846.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="898.9" y="851.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="901.9" y="862.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (4 samples, 0.09%)</title><rect x="899.2" y="851.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="902.2" y="862.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.07%)</title><rect x="899.5" y="835.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="902.5" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="899.8" y="819.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="902.8" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="900.3" y="867.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.3" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (12 samples, 0.28%)</title><rect x="900.6" y="867.0" width="3.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="903.6" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.05%)</title><rect x="903.9" y="867.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="906.9" y="878.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (2 samples, 0.05%)</title><rect x="904.4" y="867.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="907.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.51%)</title><rect x="905.0" y="883.0" width="6.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="908.0" y="894.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="905.0" y="867.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="908.0" y="878.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.05%)</title><rect x="905.3" y="867.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="908.3" y="878.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (19 samples, 0.44%)</title><rect x="905.8" y="867.0" width="5.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="908.8" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="911.1" y="915.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="914.1" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title><rect x="911.6" y="947.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="914.6" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.02%)</title><rect x="911.6" y="931.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="914.6" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (1 samples, 0.02%)</title><rect x="911.6" y="915.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="914.6" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.findKey (1 samples, 0.02%)</title><rect x="911.6" y="899.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="914.6" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.run (374 samples, 8.74%)</title><rect x="911.9" y="947.0" width="103.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="914.9" y="958.0">jdk/internal..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.23%)</title><rect x="914.9" y="931.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="917.9" y="942.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (9 samples, 0.21%)</title><rect x="915.2" y="915.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="918.2" y="926.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.02%)</title><rect x="915.5" y="899.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="918.5" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.14%)</title><rect x="915.7" y="899.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.7" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (2 samples, 0.05%)</title><rect x="915.7" y="883.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="918.7" y="894.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.09%)</title><rect x="916.3" y="883.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="919.3" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (1 samples, 0.02%)</title><rect x="917.4" y="899.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="920.4" y="910.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (1 samples, 0.02%)</title><rect x="917.4" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="920.4" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (19 samples, 0.44%)</title><rect x="917.7" y="931.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="920.7" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.findKey (19 samples, 0.44%)</title><rect x="917.7" y="915.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.7" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.clear (4 samples, 0.09%)</title><rect x="922.9" y="931.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="925.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.02%)</title><rect x="923.2" y="915.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="926.2" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.purgeTimeoutsAndReturnNextDeadline (2 samples, 0.05%)</title><rect x="923.5" y="915.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.5" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (92 samples, 2.15%)</title><rect x="924.0" y="931.0" width="25.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="927.0" y="942.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$449/992417271.accept (86 samples, 2.01%)</title><rect x="924.3" y="915.0" width="23.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="927.3" y="926.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$3 (86 samples, 2.01%)</title><rect x="924.3" y="899.0" width="23.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="927.3" y="910.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.handleEvent (86 samples, 2.01%)</title><rect x="924.3" y="883.0" width="23.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="927.3" y="894.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowEvent.handle (86 samples, 2.01%)</title><rect x="924.3" y="867.0" width="23.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="927.3" y="878.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadEvent.signalEvent (86 samples, 2.01%)</title><rect x="924.3" y="851.0" width="23.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="927.3" y="862.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (3 samples, 0.07%)</title><rect x="924.3" y="835.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="927.3" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (3 samples, 0.07%)</title><rect x="924.3" y="819.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.3" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (1 samples, 0.02%)</title><rect x="924.3" y="803.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="927.3" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.findKey (1 samples, 0.02%)</title><rect x="924.3" y="787.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="927.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.02%)</title><rect x="924.3" y="771.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="927.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (2 samples, 0.05%)</title><rect x="924.6" y="803.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="927.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.02%)</title><rect x="924.8" y="787.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="927.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.02%)</title><rect x="924.8" y="771.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="927.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.02%)</title><rect x="924.8" y="755.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="927.8" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable (83 samples, 1.94%)</title><rect x="925.1" y="835.0" width="22.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="928.1" y="846.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (83 samples, 1.94%)</title><rect x="925.1" y="819.0" width="22.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="928.1" y="830.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (83 samples, 1.94%)</title><rect x="925.1" y="803.0" width="22.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="928.1" y="814.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.02%)</title><rect x="925.1" y="787.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="928.1" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (82 samples, 1.92%)</title><rect x="925.4" y="787.0" width="22.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="928.4" y="798.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (82 samples, 1.92%)</title><rect x="925.4" y="771.0" width="22.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="928.4" y="782.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$283/637420944.run (78 samples, 1.82%)</title><rect x="925.7" y="755.0" width="21.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="928.7" y="766.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (78 samples, 1.82%)</title><rect x="925.7" y="739.0" width="21.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="928.7" y="750.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (26 samples, 0.61%)</title><rect x="925.7" y="723.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="928.7" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (25 samples, 0.58%)</title><rect x="925.9" y="707.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="928.9" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.asyncReceive (25 samples, 0.58%)</title><rect x="925.9" y="691.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="928.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (25 samples, 0.58%)</title><rect x="925.9" y="675.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="928.9" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (25 samples, 0.58%)</title><rect x="925.9" y="659.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="928.9" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (22 samples, 0.51%)</title><rect x="926.8" y="643.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="929.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (20 samples, 0.47%)</title><rect x="927.0" y="627.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="930.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (20 samples, 0.47%)</title><rect x="927.0" y="611.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="930.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (13 samples, 0.30%)</title><rect x="927.0" y="595.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="930.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 0.30%)</title><rect x="927.0" y="579.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="930.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.30%)</title><rect x="927.0" y="563.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="930.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.30%)</title><rect x="927.0" y="547.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="930.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 0.30%)</title><rect x="927.0" y="531.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="930.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 0.30%)</title><rect x="927.0" y="515.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="930.0" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 0.14%)</title><rect x="927.0" y="499.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="930.0" y="510.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="927.3" y="483.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.3" y="494.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="927.6" y="483.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="930.6" y="494.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="927.9" y="483.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="930.9" y="494.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title><rect x="928.1" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.1" y="494.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.02%)</title><rect x="928.4" y="483.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="931.4" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="928.7" y="499.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="931.7" y="510.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="928.7" y="483.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="931.7" y="494.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.14%)</title><rect x="929.0" y="499.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="932.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.16%)</title><rect x="930.6" y="595.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="933.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.16%)</title><rect x="930.6" y="579.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="933.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.16%)</title><rect x="930.6" y="563.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="933.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.16%)</title><rect x="930.6" y="547.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="933.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (1 samples, 0.02%)</title><rect x="932.6" y="627.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="935.6" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (1 samples, 0.02%)</title><rect x="932.8" y="723.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="935.8" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (7 samples, 0.16%)</title><rect x="933.1" y="723.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="936.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (5 samples, 0.12%)</title><rect x="933.7" y="707.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="936.7" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (3 samples, 0.07%)</title><rect x="934.2" y="691.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="937.2" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (2 samples, 0.05%)</title><rect x="934.5" y="675.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="937.5" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (2 samples, 0.05%)</title><rect x="934.5" y="659.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="937.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.readAvailable (44 samples, 1.03%)</title><rect x="935.0" y="723.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="938.0" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (2 samples, 0.05%)</title><rect x="935.6" y="707.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="938.6" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (40 samples, 0.93%)</title><rect x="936.1" y="707.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="939.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.09%)</title><rect x="936.1" y="691.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="939.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.09%)</title><rect x="936.1" y="675.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="939.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.09%)</title><rect x="936.1" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="939.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.09%)</title><rect x="936.1" y="643.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="939.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 0.84%)</title><rect x="937.2" y="691.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="940.2" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 0.84%)</title><rect x="937.2" y="675.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="940.2" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.14%)</title><rect x="937.2" y="659.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="940.2" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 0.12%)</title><rect x="937.5" y="643.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="940.5" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="938.6" y="627.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="941.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (30 samples, 0.70%)</title><rect x="938.9" y="659.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="941.9" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (30 samples, 0.70%)</title><rect x="938.9" y="643.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="941.9" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (26 samples, 0.61%)</title><rect x="940.0" y="627.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="943.0" y="638.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.05%)</title><rect x="940.3" y="611.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="943.3" y="622.0"></text>
</g>
<g>
<title>__errno_location (1 samples, 0.02%)</title><rect x="940.8" y="611.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="943.8" y="622.0"></text>
</g>
<g>
<title>__read (21 samples, 0.49%)</title><rect x="941.1" y="611.0" width="5.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="944.1" y="622.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.02%)</title><rect x="946.9" y="611.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="949.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (3 samples, 0.07%)</title><rect x="947.2" y="755.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="950.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (2 samples, 0.05%)</title><rect x="947.4" y="739.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="950.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$452/1901706323.accept (5 samples, 0.12%)</title><rect x="948.0" y="915.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="951.0" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$5 (5 samples, 0.12%)</title><rect x="948.0" y="899.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="951.0" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$448/1963952344.run (5 samples, 0.12%)</title><rect x="948.0" y="883.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="951.0" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$2 (5 samples, 0.12%)</title><rect x="948.0" y="867.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="951.0" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.resetInterestOps (5 samples, 0.12%)</title><rect x="948.0" y="851.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="951.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.07%)</title><rect x="948.5" y="835.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="951.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.07%)</title><rect x="948.5" y="819.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="951.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.07%)</title><rect x="948.5" y="803.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="951.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.07%)</title><rect x="948.5" y="787.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="951.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.05%)</title><rect x="949.4" y="931.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="952.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.05%)</title><rect x="949.4" y="915.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="952.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.02%)</title><rect x="949.9" y="931.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="952.9" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (15 samples, 0.35%)</title><rect x="950.2" y="931.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="953.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (7 samples, 0.16%)</title><rect x="952.4" y="915.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="955.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (2 samples, 0.05%)</title><rect x="952.4" y="899.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="955.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.05%)</title><rect x="952.4" y="883.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="955.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.02%)</title><rect x="952.4" y="867.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="955.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.02%)</title><rect x="952.4" y="851.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="955.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.02%)</title><rect x="952.7" y="867.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="955.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (1 samples, 0.02%)</title><rect x="952.7" y="851.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (1 samples, 0.02%)</title><rect x="952.7" y="835.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.02%)</title><rect x="952.7" y="819.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (1 samples, 0.02%)</title><rect x="952.7" y="803.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (5 samples, 0.12%)</title><rect x="953.0" y="899.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="956.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (5 samples, 0.12%)</title><rect x="953.0" y="883.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="956.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (5 samples, 0.12%)</title><rect x="953.0" y="867.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="956.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.09%)</title><rect x="953.0" y="851.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="956.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (4 samples, 0.09%)</title><rect x="953.0" y="835.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="956.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (4 samples, 0.09%)</title><rect x="953.0" y="819.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="956.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (3 samples, 0.07%)</title><rect x="953.0" y="803.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="956.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$444/922607877.accept (3 samples, 0.07%)</title><rect x="953.0" y="787.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.0" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.05%)</title><rect x="953.2" y="771.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="956.2" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.05%)</title><rect x="953.2" y="755.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.2" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.05%)</title><rect x="953.2" y="739.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="956.2" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.05%)</title><rect x="953.2" y="723.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.2" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (2 samples, 0.05%)</title><rect x="953.2" y="707.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment$$Lambda$443/596491627.test (1 samples, 0.02%)</title><rect x="953.8" y="803.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="956.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.02%)</title><rect x="954.1" y="851.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.1" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AsyncTriggerEvent.handle (56 samples, 1.31%)</title><rect x="954.3" y="931.0" width="15.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="957.3" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$301/1523868633.run (43 samples, 1.00%)</title><rect x="954.3" y="915.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="957.3" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handleSubscribeEvent (43 samples, 1.00%)</title><rect x="954.3" y="899.0" width="11.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="957.3" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Logger.log (1 samples, 0.02%)</title><rect x="954.3" y="883.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="957.3" y="894.0"></text>
</g>
<g>
<title>java/lang/System$Logger.log (1 samples, 0.02%)</title><rect x="954.3" y="867.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="957.3" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (42 samples, 0.98%)</title><rect x="954.6" y="883.0" width="11.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="957.6" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (42 samples, 0.98%)</title><rect x="954.6" y="867.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="957.6" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (42 samples, 0.98%)</title><rect x="954.6" y="851.0" width="11.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="957.6" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (42 samples, 0.98%)</title><rect x="954.6" y="835.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="957.6" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$283/637420944.run (39 samples, 0.91%)</title><rect x="954.6" y="819.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="957.6" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (39 samples, 0.91%)</title><rect x="954.6" y="803.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="957.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="954.9" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="957.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.02%)</title><rect x="954.9" y="771.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="957.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title><rect x="954.9" y="755.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="957.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title><rect x="954.9" y="739.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="954.9" y="723.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="957.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="954.9" y="707.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="957.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="954.9" y="691.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (35 samples, 0.82%)</title><rect x="955.2" y="787.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="958.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (31 samples, 0.72%)</title><rect x="956.3" y="771.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="959.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.onSubscribe (6 samples, 0.14%)</title><rect x="956.5" y="755.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="959.5" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (6 samples, 0.14%)</title><rect x="956.5" y="739.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="959.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (6 samples, 0.14%)</title><rect x="956.5" y="723.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="959.5" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (6 samples, 0.14%)</title><rect x="956.5" y="707.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="959.5" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (6 samples, 0.14%)</title><rect x="956.5" y="691.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="959.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (6 samples, 0.14%)</title><rect x="956.5" y="675.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="959.5" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (6 samples, 0.14%)</title><rect x="956.5" y="659.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="959.5" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (1 samples, 0.02%)</title><rect x="956.5" y="643.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="959.5" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (4 samples, 0.09%)</title><rect x="956.8" y="643.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="959.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.02%)</title><rect x="957.6" y="627.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="960.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.02%)</title><rect x="957.6" y="611.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="960.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.02%)</title><rect x="957.6" y="595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="960.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (1 samples, 0.02%)</title><rect x="957.9" y="643.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="960.9" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.02%)</title><rect x="957.9" y="627.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="960.9" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (24 samples, 0.56%)</title><rect x="958.2" y="755.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="961.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (14 samples, 0.33%)</title><rect x="960.9" y="739.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="963.9" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (14 samples, 0.33%)</title><rect x="960.9" y="723.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="963.9" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (13 samples, 0.30%)</title><rect x="961.2" y="707.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="964.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 0.28%)</title><rect x="961.5" y="691.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="964.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 0.28%)</title><rect x="961.5" y="675.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="964.5" y="686.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.02%)</title><rect x="961.5" y="659.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.5" y="670.0"></text>
</g>
<g>
<title>SATBMarkQueue::should_enqueue_buffer() (1 samples, 0.02%)</title><rect x="961.5" y="643.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="964.5" y="654.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (1 samples, 0.02%)</title><rect x="961.5" y="627.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="964.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (9 samples, 0.21%)</title><rect x="961.8" y="659.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="964.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="961.8" y="643.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="964.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="961.8" y="627.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="964.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="961.8" y="611.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="964.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.02%)</title><rect x="961.8" y="595.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="964.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.02%)</title><rect x="961.8" y="579.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="964.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title><rect x="961.8" y="563.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="964.8" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.02%)</title><rect x="961.8" y="547.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="964.8" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="961.8" y="531.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="964.8" y="542.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.02%)</title><rect x="961.8" y="515.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="964.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="962.0" y="595.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="965.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.16%)</title><rect x="962.3" y="643.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="965.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.16%)</title><rect x="962.3" y="627.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="965.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.16%)</title><rect x="962.3" y="611.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="965.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.16%)</title><rect x="962.3" y="595.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="965.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.16%)</title><rect x="962.3" y="579.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="965.3" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.07%)</title><rect x="962.6" y="563.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="965.6" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.02%)</title><rect x="963.2" y="547.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="966.2" y="558.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.07%)</title><rect x="963.4" y="563.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="966.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="964.3" y="659.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="967.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="964.3" y="643.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="967.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="964.3" y="627.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="967.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.05%)</title><rect x="964.3" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="967.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.readAvailable (1 samples, 0.02%)</title><rect x="964.8" y="787.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="967.8" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (1 samples, 0.02%)</title><rect x="964.8" y="771.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="967.8" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.tryDecrement (1 samples, 0.02%)</title><rect x="965.1" y="787.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="968.1" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.decreaseAndGet (1 samples, 0.02%)</title><rect x="965.1" y="771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="968.1" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (1 samples, 0.02%)</title><rect x="965.1" y="755.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="968.1" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (3 samples, 0.07%)</title><rect x="965.4" y="819.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="968.4" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$320/1685040699.run (13 samples, 0.30%)</title><rect x="966.2" y="915.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="969.2" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.startSubscription (13 samples, 0.30%)</title><rect x="966.2" y="899.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="969.2" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (9 samples, 0.21%)</title><rect x="967.0" y="883.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="970.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.16%)</title><rect x="967.3" y="867.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="970.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (7 samples, 0.16%)</title><rect x="967.3" y="851.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="970.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (4 samples, 0.09%)</title><rect x="967.3" y="835.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="970.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="967.3" y="819.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="970.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="967.3" y="803.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="970.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title><rect x="967.3" y="787.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="970.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="967.3" y="771.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="970.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="967.3" y="755.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="970.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title><rect x="967.3" y="739.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="970.3" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title><rect x="967.3" y="723.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="970.3" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.02%)</title><rect x="967.3" y="707.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="970.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title><rect x="967.6" y="787.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="970.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title><rect x="967.6" y="771.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="970.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="967.8" y="819.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="970.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="967.8" y="803.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="970.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="967.8" y="787.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="970.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.05%)</title><rect x="967.8" y="771.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="970.8" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.05%)</title><rect x="967.8" y="755.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="970.8" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="967.8" y="739.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="970.8" y="750.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.02%)</title><rect x="967.8" y="723.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="970.8" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.02%)</title><rect x="968.1" y="739.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="971.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.07%)</title><rect x="968.4" y="835.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="971.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.07%)</title><rect x="968.4" y="819.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="971.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.07%)</title><rect x="968.4" y="803.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="971.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.07%)</title><rect x="968.4" y="787.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="971.4" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$462/1898580517.run (1 samples, 0.02%)</title><rect x="969.2" y="867.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="972.2" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (1 samples, 0.02%)</title><rect x="969.2" y="851.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="972.2" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (1 samples, 0.02%)</title><rect x="969.2" y="835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="972.2" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (1 samples, 0.02%)</title><rect x="969.2" y="819.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="972.2" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="969.2" y="803.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="972.2" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.02%)</title><rect x="969.2" y="787.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="972.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.02%)</title><rect x="969.2" y="771.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="972.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (1 samples, 0.02%)</title><rect x="969.5" y="883.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="972.5" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (1 samples, 0.02%)</title><rect x="969.5" y="867.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="972.5" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.onSubscribe (1 samples, 0.02%)</title><rect x="969.5" y="851.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="972.5" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (1 samples, 0.02%)</title><rect x="969.5" y="835.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="972.5" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (1 samples, 0.02%)</title><rect x="969.5" y="819.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="972.5" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (1 samples, 0.02%)</title><rect x="969.5" y="803.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="972.5" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (1 samples, 0.02%)</title><rect x="969.5" y="787.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="972.5" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (1 samples, 0.02%)</title><rect x="969.5" y="771.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="972.5" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.02%)</title><rect x="969.5" y="755.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="972.5" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (1 samples, 0.02%)</title><rect x="969.5" y="739.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="972.5" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="969.5" y="723.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="972.5" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.02%)</title><rect x="969.5" y="707.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="972.5" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="969.5" y="691.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="972.5" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.02%)</title><rect x="969.5" y="675.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="972.5" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.02%)</title><rect x="969.5" y="659.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="972.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (30 samples, 0.70%)</title><rect x="969.8" y="931.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="972.8" y="942.0"></text>
</g>
<g>
<title>java/time/Instant.now (6 samples, 0.14%)</title><rect x="970.0" y="915.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="973.0" y="926.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (6 samples, 0.14%)</title><rect x="970.0" y="899.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="973.0" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (3 samples, 0.07%)</title><rect x="970.9" y="883.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="973.9" y="894.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (3 samples, 0.07%)</title><rect x="970.9" y="867.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="973.9" y="878.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (3 samples, 0.07%)</title><rect x="970.9" y="851.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="973.9" y="862.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="971.1" y="835.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="974.1" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="971.4" y="819.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="974.4" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (23 samples, 0.54%)</title><rect x="971.7" y="915.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="974.7" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (15 samples, 0.35%)</title><rect x="972.8" y="899.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.8" y="910.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (15 samples, 0.35%)</title><rect x="972.8" y="883.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="975.8" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (15 samples, 0.35%)</title><rect x="972.8" y="867.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="975.8" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (11 samples, 0.26%)</title><rect x="972.8" y="851.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="975.8" y="862.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.09%)</title><rect x="975.8" y="851.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="978.8" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (3 samples, 0.07%)</title><rect x="976.9" y="899.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="979.9" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.purgeUntil (1 samples, 0.02%)</title><rect x="977.8" y="899.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="980.8" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.events (1 samples, 0.02%)</title><rect x="978.0" y="931.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="981.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.02%)</title><rect x="978.0" y="915.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="981.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="978.0" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.0" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="978.0" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="981.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="978.0" y="867.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.0" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="978.0" y="851.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.0" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="978.0" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.0" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (4 samples, 0.09%)</title><rect x="978.3" y="931.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="981.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.07%)</title><rect x="978.6" y="915.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="981.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.07%)</title><rect x="978.6" y="899.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="981.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.07%)</title><rect x="978.6" y="883.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="981.6" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.purgeTimeoutsAndReturnNextDeadline (21 samples, 0.49%)</title><rect x="979.4" y="931.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="982.4" y="942.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.02%)</title><rect x="979.7" y="915.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="982.7" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.12%)</title><rect x="980.0" y="915.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="983.0" y="926.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (5 samples, 0.12%)</title><rect x="980.0" y="899.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="983.0" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.12%)</title><rect x="980.0" y="883.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="983.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (2 samples, 0.05%)</title><rect x="980.0" y="867.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="983.0" y="878.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.07%)</title><rect x="980.5" y="867.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="983.5" y="878.0"></text>
</g>
<g>
<title>java/time/Instant.now (9 samples, 0.21%)</title><rect x="981.3" y="915.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="984.3" y="926.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (9 samples, 0.21%)</title><rect x="981.3" y="899.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="984.3" y="910.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (4 samples, 0.09%)</title><rect x="981.6" y="883.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="984.6" y="894.0"></text>
</g>
<g>
<title>java/time/Instant.create (4 samples, 0.09%)</title><rect x="981.6" y="867.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="984.6" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="982.4" y="851.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.4" y="862.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.02%)</title><rect x="982.4" y="835.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.4" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.02%)</title><rect x="982.4" y="819.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.4" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (4 samples, 0.09%)</title><rect x="982.7" y="883.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="985.7" y="894.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (4 samples, 0.09%)</title><rect x="982.7" y="867.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="985.7" y="878.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="983.0" y="851.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="986.0" y="862.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (2 samples, 0.05%)</title><rect x="983.3" y="851.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="986.3" y="862.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="983.3" y="835.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="986.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="983.3" y="819.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="986.3" y="830.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (1 samples, 0.02%)</title><rect x="983.8" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="986.8" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.02%)</title><rect x="983.8" y="899.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="986.8" y="910.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.02%)</title><rect x="983.8" y="883.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="986.8" y="894.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (4 samples, 0.09%)</title><rect x="984.1" y="915.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="987.1" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (4 samples, 0.09%)</title><rect x="984.1" y="899.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="987.1" y="910.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (4 samples, 0.09%)</title><rect x="984.1" y="883.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.1" y="894.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (4 samples, 0.09%)</title><rect x="984.1" y="867.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="987.1" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (87 samples, 2.03%)</title><rect x="985.2" y="931.0" width="24.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="988.2" y="942.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (87 samples, 2.03%)</title><rect x="985.2" y="915.0" width="24.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="988.2" y="926.0">s..</text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (83 samples, 1.94%)</title><rect x="985.5" y="899.0" width="22.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="988.5" y="910.0">s..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="985.8" y="883.0" width="0.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="988.8" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (32 samples, 0.75%)</title><rect x="986.0" y="883.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="989.0" y="894.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="987.7" y="867.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="990.7" y="878.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPoll_wait (1 samples, 0.02%)</title><rect x="988.2" y="867.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="991.2" y="878.0"></text>
</g>
<g>
<title>epoll_wait (23 samples, 0.54%)</title><rect x="988.5" y="867.0" width="6.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="991.5" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (34 samples, 0.79%)</title><rect x="994.8" y="883.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="997.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.09%)</title><rect x="994.8" y="867.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="997.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.09%)</title><rect x="994.8" y="851.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="997.8" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.clearInterrupt (26 samples, 0.61%)</title><rect x="996.0" y="867.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="999.0" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.07%)</title><rect x="996.2" y="851.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="999.2" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="996.2" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="999.2" y="846.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.05%)</title><rect x="996.5" y="835.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.5" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="996.5" y="819.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="999.5" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (2 samples, 0.05%)</title><rect x="996.5" y="803.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.5" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (22 samples, 0.51%)</title><rect x="997.1" y="851.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1000.1" y="862.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="997.3" y="835.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1000.3" y="846.0"></text>
</g>
<g>
<title>__read (20 samples, 0.47%)</title><rect x="997.6" y="835.0" width="5.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1000.6" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.09%)</title><rect x="1003.1" y="867.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1006.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.05%)</title><rect x="1003.4" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1006.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.05%)</title><rect x="1003.4" y="835.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1006.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.05%)</title><rect x="1003.4" y="819.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1006.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.02%)</title><rect x="1003.9" y="851.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1006.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.02%)</title><rect x="1003.9" y="835.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1006.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="1003.9" y="819.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1006.9" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (7 samples, 0.16%)</title><rect x="1004.2" y="883.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1007.2" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (6 samples, 0.14%)</title><rect x="1004.5" y="867.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1007.5" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.02%)</title><rect x="1005.9" y="851.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1008.9" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.02%)</title><rect x="1006.2" y="883.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1009.2" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.02%)</title><rect x="1006.2" y="867.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1009.2" y="878.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="1006.2" y="851.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1009.2" y="862.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title><rect x="1006.2" y="835.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1009.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title><rect x="1006.2" y="819.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1009.2" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (6 samples, 0.14%)</title><rect x="1006.4" y="883.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1009.4" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (6 samples, 0.14%)</title><rect x="1006.4" y="867.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1009.4" y="878.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.14%)</title><rect x="1006.4" y="851.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1009.4" y="862.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.14%)</title><rect x="1006.4" y="835.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1009.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.14%)</title><rect x="1006.4" y="819.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1009.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.02%)</title><rect x="1008.1" y="883.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1011.1" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.02%)</title><rect x="1008.1" y="867.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1011.1" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (2 samples, 0.05%)</title><rect x="1008.4" y="899.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1011.4" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.05%)</title><rect x="1008.4" y="883.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1011.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.02%)</title><rect x="1008.9" y="899.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1011.9" y="910.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.02%)</title><rect x="1008.9" y="883.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1011.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.02%)</title><rect x="1008.9" y="867.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1011.9" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (9 samples, 0.21%)</title><rect x="1009.2" y="931.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1012.2" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (8 samples, 0.19%)</title><rect x="1009.5" y="915.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1012.5" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (7 samples, 0.16%)</title><rect x="1009.5" y="899.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1012.5" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (3 samples, 0.07%)</title><rect x="1009.5" y="883.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1012.5" y="894.0"></text>
</g>
<g>
<title>epoll_wait (3 samples, 0.07%)</title><rect x="1009.5" y="867.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1012.5" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (3 samples, 0.07%)</title><rect x="1010.3" y="883.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1013.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.02%)</title><rect x="1010.3" y="867.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1013.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.02%)</title><rect x="1010.3" y="851.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1013.3" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.05%)</title><rect x="1010.6" y="867.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1013.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.05%)</title><rect x="1010.6" y="851.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1013.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.05%)</title><rect x="1010.6" y="835.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1013.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.05%)</title><rect x="1010.6" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1013.6" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (1 samples, 0.02%)</title><rect x="1011.1" y="883.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1014.1" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.02%)</title><rect x="1011.1" y="867.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1014.1" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (1 samples, 0.02%)</title><rect x="1011.1" y="851.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1014.1" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.02%)</title><rect x="1011.4" y="899.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1014.4" y="910.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.02%)</title><rect x="1011.4" y="883.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1014.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.02%)</title><rect x="1011.4" y="867.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1014.4" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (6 samples, 0.14%)</title><rect x="1011.7" y="931.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1014.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (4 samples, 0.09%)</title><rect x="1012.2" y="915.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1015.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (4 samples, 0.09%)</title><rect x="1012.2" y="899.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1015.2" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (6 samples, 0.14%)</title><rect x="1013.3" y="931.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1016.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (6 samples, 0.14%)</title><rect x="1013.3" y="915.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1016.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.02%)</title><rect x="1014.7" y="899.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1017.7" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1014.7" y="883.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1017.7" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="1014.7" y="867.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1017.7" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (291 samples, 6.80%)</title><rect x="1015.0" y="947.0" width="80.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1018.0" y="958.0">one/nio/s..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1015.2" y="931.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1018.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1015.2" y="915.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1018.2" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="1015.2" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1018.2" y="910.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="1015.5" y="931.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1018.5" y="942.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.07%)</title><rect x="1015.8" y="931.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1018.8" y="942.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (86 samples, 2.01%)</title><rect x="1016.6" y="931.0" width="23.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1019.6" y="942.0">o..</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.02%)</title><rect x="1019.7" y="915.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.7" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="1019.9" y="915.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.9" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="1019.9" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1022.9" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (73 samples, 1.71%)</title><rect x="1020.2" y="915.0" width="20.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1023.2" y="926.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.07%)</title><rect x="1022.7" y="899.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1025.7" y="910.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.07%)</title><rect x="1023.5" y="899.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1026.5" y="910.0"></text>
</g>
<g>
<title>clock_gettime (27 samples, 0.63%)</title><rect x="1024.3" y="899.0" width="7.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1027.3" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.02%)</title><rect x="1029.9" y="883.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1032.9" y="894.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.14%)</title><rect x="1030.1" y="883.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1033.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.12%)</title><rect x="1030.4" y="867.0" width="1.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1033.4" y="878.0"></text>
</g>
<g>
<title>epoll_wait (31 samples, 0.72%)</title><rect x="1031.8" y="899.0" width="8.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1034.8" y="910.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (198 samples, 4.63%)</title><rect x="1040.3" y="931.0" width="54.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1043.3" y="942.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (188 samples, 4.39%)</title><rect x="1043.1" y="915.0" width="51.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1046.1" y="926.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (139 samples, 3.25%)</title><rect x="1043.1" y="899.0" width="38.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1046.1" y="910.0">one..</text>
</g>
<g>
<title>RequestHandler3_handleRequest.handleRequest (3 samples, 0.07%)</title><rect x="1043.6" y="883.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1046.6" y="894.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.07%)</title><rect x="1044.5" y="883.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1047.5" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (93 samples, 2.17%)</title><rect x="1045.3" y="883.0" width="25.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1048.3" y="894.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (91 samples, 2.13%)</title><rect x="1045.8" y="867.0" width="25.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1048.8" y="878.0">o..</text>
</g>
<g>
<title>RequestHandler3_handleRequest.handleRequest (56 samples, 1.31%)</title><rect x="1045.8" y="851.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1048.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.12%)</title><rect x="1045.8" y="835.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1048.8" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.07%)</title><rect x="1046.1" y="819.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1049.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.07%)</title><rect x="1046.1" y="803.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1049.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1046.9" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1049.9" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1046.9" y="803.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1049.9" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (9 samples, 0.21%)</title><rect x="1047.2" y="835.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1050.2" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.21%)</title><rect x="1047.2" y="819.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1050.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.12%)</title><rect x="1047.8" y="803.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1050.8" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.12%)</title><rect x="1047.8" y="787.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1050.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="1048.0" y="771.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.0" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="1048.0" y="755.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1051.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.07%)</title><rect x="1048.3" y="771.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1051.3" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1049.1" y="803.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1052.1" y="814.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.02%)</title><rect x="1049.4" y="803.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1052.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/FullAsyncTopologyReplicaService.handleRequest (42 samples, 0.98%)</title><rect x="1049.7" y="835.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1052.7" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.handleRequest (42 samples, 0.98%)</title><rect x="1049.7" y="819.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1052.7" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1762000431.linkToTargetMethod (4 samples, 0.09%)</title><rect x="1049.7" y="803.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1052.7" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.09%)</title><rect x="1049.7" y="787.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1052.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService$$Lambda$112/637964804.get$Lambda (4 samples, 0.09%)</title><rect x="1049.7" y="771.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1052.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.07%)</title><rect x="1050.0" y="755.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1053.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseService.executeTask (38 samples, 0.89%)</title><rect x="1050.8" y="803.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1053.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (37 samples, 0.86%)</title><rect x="1051.1" y="787.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1054.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (37 samples, 0.86%)</title><rect x="1051.1" y="771.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1054.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (8 samples, 0.19%)</title><rect x="1051.6" y="755.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1054.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (8 samples, 0.19%)</title><rect x="1051.6" y="739.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1054.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (8 samples, 0.19%)</title><rect x="1051.6" y="723.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1054.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (8 samples, 0.19%)</title><rect x="1051.6" y="707.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (8 samples, 0.19%)</title><rect x="1051.6" y="691.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1054.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.14%)</title><rect x="1053.8" y="755.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1056.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.14%)</title><rect x="1053.8" y="739.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1056.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.14%)</title><rect x="1053.8" y="723.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1056.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.14%)</title><rect x="1053.8" y="707.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1056.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.14%)</title><rect x="1053.8" y="691.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1056.8" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="1054.1" y="675.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1057.1" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.05%)</title><rect x="1054.1" y="659.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1057.1" y="670.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="1054.1" y="643.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.1" y="654.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.02%)</title><rect x="1054.4" y="643.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.4" y="654.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title><rect x="1054.4" y="627.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1057.4" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.07%)</title><rect x="1054.7" y="675.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1057.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 0.49%)</title><rect x="1055.5" y="755.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1058.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 0.49%)</title><rect x="1055.5" y="739.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1058.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 0.49%)</title><rect x="1055.5" y="723.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1058.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 0.49%)</title><rect x="1055.5" y="707.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1058.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.02%)</title><rect x="1055.5" y="691.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1058.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 0.47%)</title><rect x="1055.8" y="691.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1058.8" y="702.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.02%)</title><rect x="1056.0" y="675.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.0" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.02%)</title><rect x="1056.3" y="675.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.3" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.09%)</title><rect x="1056.6" y="675.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1059.6" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.02%)</title><rect x="1056.6" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.6" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.05%)</title><rect x="1056.9" y="659.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.9" y="670.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.02%)</title><rect x="1057.4" y="659.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1060.4" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (11 samples, 0.26%)</title><rect x="1057.7" y="675.0" width="3.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1060.7" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1060.7" y="675.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1063.7" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.02%)</title><rect x="1061.0" y="675.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1064.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (20 samples, 0.47%)</title><rect x="1061.3" y="851.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1064.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (19 samples, 0.44%)</title><rect x="1061.6" y="835.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1064.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (16 samples, 0.37%)</title><rect x="1062.1" y="819.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1065.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.equals (12 samples, 0.28%)</title><rect x="1063.2" y="803.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1066.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.07%)</title><rect x="1064.6" y="787.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1067.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="1065.4" y="787.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1068.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.07%)</title><rect x="1065.7" y="787.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1068.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.02%)</title><rect x="1066.5" y="819.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1069.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.02%)</title><rect x="1066.5" y="803.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1069.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.02%)</title><rect x="1066.5" y="787.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1069.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (15 samples, 0.35%)</title><rect x="1066.8" y="851.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1069.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.substring (14 samples, 0.33%)</title><rect x="1067.1" y="835.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1070.1" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (14 samples, 0.33%)</title><rect x="1067.1" y="819.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.12%)</title><rect x="1067.1" y="803.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1070.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1068.2" y="787.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1071.2" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.21%)</title><rect x="1068.4" y="803.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1071.4" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="1070.4" y="787.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.4" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1070.4" y="771.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1070.4" y="755.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.4" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.02%)</title><rect x="1070.4" y="739.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1073.4" y="750.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.02%)</title><rect x="1070.6" y="787.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.6" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (17 samples, 0.40%)</title><rect x="1070.9" y="883.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1073.9" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.07%)</title><rect x="1070.9" y="867.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1073.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title><rect x="1070.9" y="851.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1073.9" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="1071.2" y="851.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1074.2" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="1071.2" y="835.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1074.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1071.2" y="819.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1074.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.02%)</title><rect x="1071.2" y="803.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1074.2" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="1071.2" y="787.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="1071.5" y="819.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1074.5" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.28%)</title><rect x="1071.8" y="867.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1074.8" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.28%)</title><rect x="1071.8" y="851.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1074.8" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="1073.4" y="835.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.4" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="1073.4" y="819.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.4" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title><rect x="1073.4" y="803.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.4" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="1073.4" y="787.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.4" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="1073.4" y="771.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.4" y="782.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (2 samples, 0.05%)</title><rect x="1073.4" y="755.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.4" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="1074.0" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="1074.0" y="819.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.05%)</title><rect x="1074.0" y="803.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.0" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="1074.0" y="787.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.0" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.02%)</title><rect x="1074.0" y="771.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1077.0" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1074.2" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1074.5" y="835.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1077.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1074.5" y="819.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1077.5" y="830.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.02%)</title><rect x="1074.8" y="803.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1077.8" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="1074.8" y="787.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.8" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1074.8" y="771.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1077.8" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1074.8" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.8" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="1074.8" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.8" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1074.8" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.8" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="1074.8" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.8" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.05%)</title><rect x="1075.1" y="867.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1078.1" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.14%)</title><rect x="1075.6" y="883.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1078.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.09%)</title><rect x="1076.2" y="867.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1079.2" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.09%)</title><rect x="1076.2" y="851.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1079.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.05%)</title><rect x="1076.2" y="835.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1079.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.05%)</title><rect x="1076.2" y="819.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1079.2" y="830.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.02%)</title><rect x="1076.4" y="803.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1079.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.05%)</title><rect x="1076.7" y="835.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1079.7" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.07%)</title><rect x="1077.3" y="883.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1080.3" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.07%)</title><rect x="1078.1" y="883.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1081.1" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.21%)</title><rect x="1078.9" y="883.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1081.9" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.21%)</title><rect x="1078.9" y="867.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1081.9" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.14%)</title><rect x="1078.9" y="851.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.9" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.14%)</title><rect x="1078.9" y="835.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.9" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.14%)</title><rect x="1078.9" y="819.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.9" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.14%)</title><rect x="1078.9" y="803.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.9" y="814.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (3 samples, 0.07%)</title><rect x="1078.9" y="787.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.9" y="798.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.02%)</title><rect x="1079.5" y="771.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1082.5" y="782.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="1079.7" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.7" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="1080.0" y="787.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1083.0" y="798.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.02%)</title><rect x="1080.0" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.0" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.02%)</title><rect x="1080.0" y="755.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.0" y="766.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.02%)</title><rect x="1080.3" y="787.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.3" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="1080.6" y="851.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1083.6" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="1080.6" y="835.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.02%)</title><rect x="1080.6" y="819.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1083.6" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="1080.6" y="803.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.6" y="814.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title><rect x="1080.6" y="787.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1080.8" y="851.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1083.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1080.8" y="835.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1083.8" y="846.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.05%)</title><rect x="1080.8" y="819.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1083.8" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="1080.8" y="803.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.8" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1081.1" y="787.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.1" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="1081.1" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.1" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="1081.1" y="755.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1084.1" y="766.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title><rect x="1081.1" y="739.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.1" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.02%)</title><rect x="1081.4" y="899.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1084.4" y="910.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (48 samples, 1.12%)</title><rect x="1081.7" y="899.0" width="13.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1084.7" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (45 samples, 1.05%)</title><rect x="1082.5" y="883.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1085.5" y="894.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (19 samples, 0.44%)</title><rect x="1084.2" y="867.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1087.2" y="878.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="1084.7" y="851.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1087.7" y="862.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.02%)</title><rect x="1085.3" y="851.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1088.3" y="862.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="1085.5" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1088.5" y="862.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (13 samples, 0.30%)</title><rect x="1085.8" y="851.0" width="3.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1088.8" y="862.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title><rect x="1086.9" y="835.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.9" y="846.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.02%)</title><rect x="1087.2" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.2" y="846.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="1087.5" y="835.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.5" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.05%)</title><rect x="1087.7" y="835.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.7" y="846.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.09%)</title><rect x="1088.3" y="835.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1091.3" y="846.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.02%)</title><rect x="1089.1" y="819.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.1" y="830.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="1089.4" y="867.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1092.4" y="878.0"></text>
</g>
<g>
<title>recv (17 samples, 0.40%)</title><rect x="1089.9" y="867.0" width="4.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1092.9" y="878.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.02%)</title><rect x="1094.6" y="867.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1097.6" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.02%)</title><rect x="1094.9" y="931.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.9" y="942.0"></text>
</g>
<g>
<title>start_thread (344 samples, 8.04%)</title><rect x="1095.2" y="947.0" width="94.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1098.2" y="958.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (344 samples, 8.04%)</title><rect x="1095.2" y="931.0" width="94.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1098.2" y="942.0">thread_nati..</text>
</g>
<g>
<title>Thread::call_run() (344 samples, 8.04%)</title><rect x="1095.2" y="915.0" width="94.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1098.2" y="926.0">Thread::cal..</text>
</g>
<g>
<title>GangWorker::loop() (321 samples, 7.50%)</title><rect x="1095.2" y="899.0" width="88.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.2" y="910.0">GangWorker..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (230 samples, 5.37%)</title><rect x="1095.2" y="883.0" width="63.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.2" y="894.0">G1CMCon..</text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (230 samples, 5.37%)</title><rect x="1095.2" y="867.0" width="63.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.2" y="878.0">G1CMTas..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.98] (1 samples, 0.02%)</title><rect x="1095.5" y="851.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.5" y="862.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (88 samples, 2.06%)</title><rect x="1095.7" y="851.0" width="24.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.7" y="862.0">G..</text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.395] (1 samples, 0.02%)</title><rect x="1095.7" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.7" y="846.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (63 samples, 1.47%)</title><rect x="1096.0" y="835.0" width="17.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.0" y="846.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.05%)</title><rect x="1097.9" y="819.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.9" y="830.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (54 samples, 1.26%)</title><rect x="1098.5" y="819.0" width="14.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.5" y="830.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.02%)</title><rect x="1100.1" y="803.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.1" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (45 samples, 1.05%)</title><rect x="1100.4" y="803.0" width="12.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.4" y="814.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (35 samples, 0.82%)</title><rect x="1101.5" y="787.0" width="9.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.5" y="798.0"></text>
</g>
<g>
<title>oopDesc::size() (2 samples, 0.05%)</title><rect x="1110.3" y="771.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.3" y="782.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.02%)</title><rect x="1110.9" y="771.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.9" y="782.0"></text>
</g>
<g>
<title>oopDesc::size() (2 samples, 0.05%)</title><rect x="1111.2" y="787.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.2" y="798.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (4 samples, 0.09%)</title><rect x="1111.7" y="787.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.7" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1112.8" y="803.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.8" y="814.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.02%)</title><rect x="1112.8" y="787.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.8" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1113.1" y="803.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.1" y="814.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (24 samples, 0.56%)</title><rect x="1113.4" y="835.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.4" y="846.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.02%)</title><rect x="1115.3" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.3" y="830.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.02%)</title><rect x="1115.6" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.6" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (10 samples, 0.23%)</title><rect x="1115.9" y="819.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.9" y="830.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (9 samples, 0.21%)</title><rect x="1116.1" y="803.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.1" y="814.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.02%)</title><rect x="1118.1" y="787.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.1" y="798.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.02%)</title><rect x="1118.3" y="787.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.3" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (5 samples, 0.12%)</title><rect x="1118.6" y="819.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.6" y="830.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (3 samples, 0.07%)</title><rect x="1119.2" y="803.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.2" y="814.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) (1 samples, 0.02%)</title><rect x="1120.0" y="851.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.0" y="862.0"></text>
</g>
<g>
<title>G1CMTask::get_entries_from_global_stack() (1 samples, 0.02%)</title><rect x="1120.0" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.0" y="846.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (139 samples, 3.25%)</title><rect x="1120.3" y="851.0" width="38.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1123.3" y="862.0">G1C..</text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.05%)</title><rect x="1127.2" y="835.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.2" y="846.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (109 samples, 2.55%)</title><rect x="1127.7" y="835.0" width="30.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.7" y="846.0">vo..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.02%)</title><rect x="1131.8" y="819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.8" y="830.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (3 samples, 0.07%)</title><rect x="1132.1" y="819.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.1" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (90 samples, 2.10%)</title><rect x="1132.9" y="819.0" width="24.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.9" y="830.0">v..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (72 samples, 1.68%)</title><rect x="1136.0" y="803.0" width="19.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.0" y="814.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (1 samples, 0.02%)</title><rect x="1152.8" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.8" y="798.0"></text>
</g>
<g>
<title>getrusage (1 samples, 0.02%)</title><rect x="1152.8" y="771.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1155.8" y="782.0"></text>
</g>
<g>
<title>oopDesc::size() (9 samples, 0.21%)</title><rect x="1153.1" y="787.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.1" y="798.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.02%)</title><rect x="1155.5" y="787.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.5" y="798.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.02%)</title><rect x="1155.8" y="803.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.8" y="814.0"></text>
</g>
<g>
<title>oopDesc::size() (2 samples, 0.05%)</title><rect x="1156.1" y="803.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.1" y="814.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (4 samples, 0.09%)</title><rect x="1156.6" y="803.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.6" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.07%)</title><rect x="1157.8" y="835.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.8" y="846.0"></text>
</g>
<g>
<title>G1CMRootRegionScanTask::work(unsigned int) (2 samples, 0.05%)</title><rect x="1158.6" y="883.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.6" y="894.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RootRegionScanClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RootRegionScanClosure*, oopDesc*, Klass*) (2 samples, 0.05%)</title><rect x="1158.6" y="867.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.6" y="878.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.02%)</title><rect x="1159.1" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.1" y="894.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.02%)</title><rect x="1159.1" y="867.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.1" y="878.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.02%)</title><rect x="1159.1" y="851.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.1" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (43 samples, 1.00%)</title><rect x="1159.4" y="883.0" width="11.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.4" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (22 samples, 0.51%)</title><rect x="1159.4" y="867.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.4" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.02%)</title><rect x="1159.4" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.4" y="862.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1159.4" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.4" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (16 samples, 0.37%)</title><rect x="1159.7" y="851.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.7" y="862.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="1161.6" y="835.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1164.6" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 0.14%)</title><rect x="1162.2" y="835.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.2" y="846.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (1 samples, 0.02%)</title><rect x="1163.3" y="819.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="830.0"></text>
</g>
<g>
<title>G1Allocator::survivor_attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)</title><rect x="1163.3" y="803.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1163.5" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.5" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1163.8" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.8" y="846.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.12%)</title><rect x="1164.1" y="851.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1167.1" y="862.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (12 samples, 0.28%)</title><rect x="1165.5" y="867.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.5" y="878.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (12 samples, 0.28%)</title><rect x="1165.5" y="851.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.5" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (12 samples, 0.28%)</title><rect x="1165.5" y="835.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.5" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (12 samples, 0.28%)</title><rect x="1165.5" y="819.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.5" y="830.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (11 samples, 0.26%)</title><rect x="1165.7" y="803.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.7" y="814.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (10 samples, 0.23%)</title><rect x="1166.0" y="787.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.0" y="798.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (10 samples, 0.23%)</title><rect x="1166.0" y="771.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.0" y="782.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.02%)</title><rect x="1166.8" y="755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.8" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateBoundedDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate_bounded&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*, MemRegion) (1 samples, 0.02%)</title><rect x="1167.1" y="755.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.1" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (5 samples, 0.12%)</title><rect x="1167.4" y="755.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.4" y="766.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (5 samples, 0.12%)</title><rect x="1168.8" y="867.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.8" y="878.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (5 samples, 0.12%)</title><rect x="1168.8" y="851.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.8" y="862.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (5 samples, 0.12%)</title><rect x="1168.8" y="835.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.8" y="846.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (5 samples, 0.12%)</title><rect x="1168.8" y="819.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.8" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 0.07%)</title><rect x="1168.8" y="803.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.8" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.05%)</title><rect x="1168.8" y="787.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.8" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1169.3" y="787.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.3" y="798.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.02%)</title><rect x="1169.6" y="803.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="814.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.02%)</title><rect x="1169.9" y="803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.09%)</title><rect x="1170.2" y="867.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.2" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.07%)</title><rect x="1170.2" y="851.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.2" y="862.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.02%)</title><rect x="1170.2" y="835.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.2" y="846.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.02%)</title><rect x="1170.2" y="819.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.2" y="830.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.02%)</title><rect x="1170.2" y="803.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.2" y="814.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)1&gt;::do_oop(oopDesc**) (1 samples, 0.02%)</title><rect x="1170.2" y="787.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.2" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.05%)</title><rect x="1170.4" y="835.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="846.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.05%)</title><rect x="1170.4" y="819.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.4" y="830.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.05%)</title><rect x="1170.4" y="803.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="814.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (2 samples, 0.05%)</title><rect x="1170.4" y="787.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="798.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(unsigned int*) (1 samples, 0.02%)</title><rect x="1170.4" y="771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.4" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.02%)</title><rect x="1170.4" y="755.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1170.4" y="739.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="750.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)1&gt;::do_oop(unsigned int*) (1 samples, 0.02%)</title><rect x="1170.7" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.7" y="782.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.02%)</title><rect x="1171.0" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.0" y="862.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (45 samples, 1.05%)</title><rect x="1171.3" y="883.0" width="12.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.3" y="894.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (45 samples, 1.05%)</title><rect x="1171.3" y="867.0" width="12.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.3" y="878.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (44 samples, 1.03%)</title><rect x="1171.3" y="851.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.3" y="862.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.02%)</title><rect x="1178.4" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.02%)</title><rect x="1178.4" y="819.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.02%)</title><rect x="1178.7" y="835.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="846.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.234] (2 samples, 0.05%)</title><rect x="1179.0" y="835.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="846.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (13 samples, 0.30%)</title><rect x="1179.5" y="835.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="846.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (4 samples, 0.09%)</title><rect x="1180.9" y="819.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="830.0"></text>
</g>
<g>
<title>BitMap::par_at_put(unsigned long, bool) (3 samples, 0.07%)</title><rect x="1181.2" y="803.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="814.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.234] (4 samples, 0.09%)</title><rect x="1182.0" y="819.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.0" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1183.1" y="835.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.1" y="846.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.02%)</title><rect x="1183.4" y="851.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (22 samples, 0.51%)</title><rect x="1183.7" y="899.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="910.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (22 samples, 0.51%)</title><rect x="1183.7" y="883.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.7" y="894.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (22 samples, 0.51%)</title><rect x="1183.7" y="867.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="878.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (21 samples, 0.49%)</title><rect x="1183.7" y="851.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="862.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (21 samples, 0.49%)</title><rect x="1183.7" y="835.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="846.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (10 samples, 0.23%)</title><rect x="1183.7" y="819.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.7" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.02%)</title><rect x="1183.7" y="803.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.7" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.02%)</title><rect x="1183.7" y="787.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 0.21%)</title><rect x="1183.9" y="803.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="814.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.02%)</title><rect x="1183.9" y="787.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1186.9" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.02%)</title><rect x="1184.2" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="798.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.02%)</title><rect x="1184.5" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.02%)</title><rect x="1184.8" y="787.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.02%)</title><rect x="1184.8" y="771.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.02%)</title><rect x="1184.8" y="755.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.02%)</title><rect x="1185.0" y="787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.05%)</title><rect x="1185.3" y="787.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.02%)</title><rect x="1185.3" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.02%)</title><rect x="1185.6" y="771.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.6" y="782.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.02%)</title><rect x="1185.6" y="755.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.02%)</title><rect x="1185.9" y="787.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="798.0"></text>
</g>
<g>
<title>indOffset8Oper::in_RegMask(int) const (1 samples, 0.02%)</title><rect x="1185.9" y="771.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.02%)</title><rect x="1186.1" y="787.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.02%)</title><rect x="1186.1" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.1" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 0.14%)</title><rect x="1186.4" y="819.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.4" y="830.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.02%)</title><rect x="1186.4" y="803.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.4" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.02%)</title><rect x="1186.4" y="787.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.4" y="798.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (3 samples, 0.07%)</title><rect x="1186.7" y="803.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 0.07%)</title><rect x="1186.7" y="787.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.02%)</title><rect x="1186.7" y="771.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.02%)</title><rect x="1187.0" y="771.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.0" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.02%)</title><rect x="1187.0" y="755.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.02%)</title><rect x="1187.0" y="739.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.02%)</title><rect x="1187.0" y="723.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.02%)</title><rect x="1187.0" y="707.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.02%)</title><rect x="1187.2" y="771.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (2 samples, 0.05%)</title><rect x="1187.5" y="803.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.02%)</title><rect x="1187.5" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.02%)</title><rect x="1187.8" y="787.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.02%)</title><rect x="1187.8" y="771.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.02%)</title><rect x="1187.8" y="755.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.8" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.02%)</title><rect x="1187.8" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.8" y="750.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.05%)</title><rect x="1188.1" y="819.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.07%)</title><rect x="1188.6" y="819.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.07%)</title><rect x="1188.6" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.07%)</title><rect x="1188.6" y="787.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.07%)</title><rect x="1188.6" y="771.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.07%)</title><rect x="1188.6" y="755.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.07%)</title><rect x="1188.6" y="739.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.6" y="750.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.02%)</title><rect x="1188.6" y="723.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.6" y="734.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.02%)</title><rect x="1188.6" y="707.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.6" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1188.6" y="691.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.6" y="702.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1188.6" y="675.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1188.9" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1188.9" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1188.9" y="691.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1188.9" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1188.9" y="659.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1188.9" y="643.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1188.9" y="627.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1188.9" y="611.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1188.9" y="595.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1188.9" y="579.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1188.9" y="563.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1188.9" y="547.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1188.9" y="531.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1188.9" y="515.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1188.9" y="499.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1188.9" y="483.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1188.9" y="467.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1188.9" y="451.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.9" y="435.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1188.9" y="419.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1188.9" y="403.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1188.9" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1188.9" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1188.9" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.9" y="339.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1188.9" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1188.9" y="307.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1188.9" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1188.9" y="275.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1188.9" y="259.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.9" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1188.9" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1188.9" y="211.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1188.9" y="195.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.02%)</title><rect x="1188.9" y="179.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1188.9" y="163.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="174.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1188.9" y="147.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.02%)</title><rect x="1188.9" y="131.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) [clone .part.166] (1 samples, 0.02%)</title><rect x="1188.9" y="115.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::make_unsafe_address(Node*&amp;, Node*, BasicType, bool) (1 samples, 0.02%)</title><rect x="1188.9" y="99.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="110.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1188.9" y="83.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="94.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1188.9" y="67.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.02%)</title><rect x="1188.9" y="51.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.9" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.02%)</title><rect x="1188.9" y="35.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1189.2" y="451.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.2" y="462.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.02%)</title><rect x="1189.2" y="435.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.2" y="446.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.02%)</title><rect x="1189.4" y="851.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.4" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.02%)</title><rect x="1189.4" y="835.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.4" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.02%)</title><rect x="1189.4" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.4" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.02%)</title><rect x="1189.4" y="803.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.4" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.02%)</title><rect x="1189.4" y="787.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.4" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.02%)</title><rect x="1189.4" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.4" y="782.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.02%)</title><rect x="1189.4" y="755.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.4" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.02%)</title><rect x="1189.4" y="739.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.4" y="750.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.02%)</title><rect x="1189.4" y="723.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.4" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.02%)</title><rect x="1189.4" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.4" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.02%)</title><rect x="1189.4" y="691.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.4" y="702.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.02%)</title><rect x="1189.7" y="899.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.7" y="910.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.02%)</title><rect x="1189.7" y="883.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.7" y="894.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.02%)</title><rect x="1189.7" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.7" y="878.0"></text>
</g>
<g>
<title>ThreadSafepointState::examine_state_of_thread() (1 samples, 0.02%)</title><rect x="1189.7" y="851.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.7" y="862.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="1189.7" y="835.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.7" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="1189.7" y="819.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.7" y="830.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="1189.7" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.7" y="814.0"></text>
</g>
</g>
</svg>
