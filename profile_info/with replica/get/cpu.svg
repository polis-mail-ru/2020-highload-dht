<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="693"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="693"> </text>
<g id="frames">
<g>
<title>all (1,241 samples, 100.00%)</title><rect x="10.0" y="659.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="670.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.40%)</title><rect x="10.0" y="643.0" width="4.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="10.0" y="627.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.08%)</title><rect x="11.0" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.0" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.24%)</title><rect x="11.9" y="627.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.9" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.16%)</title><rect x="11.9" y="611.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.9" y="622.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="11.9" y="595.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.9" y="606.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="12.9" y="595.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.9" y="606.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.08%)</title><rect x="12.9" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.9" y="590.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="12.9" y="563.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.9" y="574.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.08%)</title><rect x="12.9" y="547.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.9" y="558.0"></text>
</g>
<g>
<title>frame::is_deoptimized_frame() const (1 samples, 0.08%)</title><rect x="13.8" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.8" y="622.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.08%)</title><rect x="14.8" y="643.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="17.8" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.08%)</title><rect x="14.8" y="627.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.8" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (751 samples, 60.52%)</title><rect x="15.7" y="643.0" width="714.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.7" y="654.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (751 samples, 60.52%)</title><rect x="15.7" y="627.0" width="714.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.7" y="638.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (751 samples, 60.52%)</title><rect x="15.7" y="611.0" width="714.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.7" y="622.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.24%)</title><rect x="16.7" y="595.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.24%)</title><rect x="16.7" y="579.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.24%)</title><rect x="16.7" y="563.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService$$Lambda$65/1563214758.run (2 samples, 0.16%)</title><rect x="17.6" y="547.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (233 samples, 18.78%)</title><rect x="19.5" y="595.0" width="221.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.5" y="606.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (232 samples, 18.69%)</title><rect x="20.5" y="579.0" width="220.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.5" y="590.0">java/util/concurrent/ArrayBlo..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (2 samples, 0.16%)</title><rect x="23.3" y="563.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.16%)</title><rect x="23.3" y="547.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.16%)</title><rect x="23.3" y="531.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.16%)</title><rect x="23.3" y="515.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (208 samples, 16.76%)</title><rect x="25.2" y="563.0" width="197.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.2" y="574.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (4 samples, 0.32%)</title><rect x="29.0" y="547.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.0" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.32%)</title><rect x="29.0" y="531.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.16%)</title><rect x="30.9" y="515.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.56%)</title><rect x="32.8" y="547.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.48%)</title><rect x="39.5" y="547.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.48%)</title><rect x="39.5" y="531.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.16%)</title><rect x="43.3" y="515.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.16%)</title><rect x="43.3" y="499.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.16%)</title><rect x="43.3" y="483.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.3" y="494.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.16%)</title><rect x="43.3" y="467.0" width="1.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="46.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (187 samples, 15.07%)</title><rect x="45.2" y="547.0" width="177.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.2" y="558.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*) (1 samples, 0.08%)</title><rect x="47.1" y="531.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="50.1" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (184 samples, 14.83%)</title><rect x="48.0" y="531.0" width="175.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.0" y="542.0">jdk/internal/misc/Unsa..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="57.5" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="60.5" y="526.0"></text>
</g>
<g>
<title>Unsafe_Park (115 samples, 9.27%)</title><rect x="58.5" y="515.0" width="109.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="61.5" y="526.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.24%)</title><rect x="61.3" y="499.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="64.3" y="510.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.32%)</title><rect x="64.2" y="499.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="67.2" y="510.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.16%)</title><rect x="68.0" y="499.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="71.0" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (34 samples, 2.74%)</title><rect x="69.9" y="499.0" width="32.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="72.9" y="510.0">Pa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.56%)</title><rect x="83.2" y="483.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="86.2" y="494.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.16%)</title><rect x="88.0" y="467.0" width="1.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="91.0" y="478.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.24%)</title><rect x="89.9" y="483.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="92.9" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (10 samples, 0.81%)</title><rect x="92.7" y="483.0" width="9.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="95.7" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.16%)</title><rect x="102.2" y="499.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="105.2" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.08%)</title><rect x="104.1" y="499.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="107.1" y="510.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="105.1" y="499.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="108.1" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.08%)</title><rect x="107.0" y="499.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="110.0" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (54 samples, 4.35%)</title><rect x="107.9" y="499.0" width="51.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="110.9" y="510.0">__pth..</text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.24%)</title><rect x="159.3" y="499.0" width="2.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="162.3" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="162.1" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="165.1" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="163.1" y="499.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="166.1" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (2 samples, 0.16%)</title><rect x="165.9" y="499.0" width="1.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="168.9" y="510.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 4.19%)</title><rect x="167.8" y="515.0" width="49.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="170.8" y="526.0">[unkn..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (10 samples, 0.81%)</title><rect x="167.8" y="499.0" width="9.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="170.8" y="510.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="177.3" y="499.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="180.3" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_wait (35 samples, 2.82%)</title><rect x="179.3" y="499.0" width="33.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="182.3" y="510.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.24%)</title><rect x="212.5" y="499.0" width="2.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="215.5" y="510.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="215.4" y="499.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="218.4" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.08%)</title><rect x="216.3" y="499.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="219.3" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 0.48%)</title><rect x="217.3" y="515.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="220.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 1.53%)</title><rect x="223.0" y="563.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.53%)</title><rect x="223.0" y="547.0" width="18.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.53%)</title><rect x="223.0" y="531.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 1.53%)</title><rect x="223.0" y="515.0" width="18.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.0" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (18 samples, 1.45%)</title><rect x="223.9" y="499.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.9" y="510.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.08%)</title><rect x="223.9" y="483.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="226.9" y="494.0"></text>
</g>
<g>
<title>Unsafe_Unpark (15 samples, 1.21%)</title><rect x="224.9" y="483.0" width="14.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="227.9" y="494.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="226.8" y="467.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="229.8" y="478.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="227.7" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="230.7" y="478.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.08%)</title><rect x="228.7" y="467.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="231.7" y="478.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (7 samples, 0.56%)</title><rect x="229.6" y="467.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="232.6" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="236.3" y="467.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="239.3" y="478.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.08%)</title><rect x="237.3" y="467.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="240.3" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.08%)</title><rect x="238.2" y="467.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="241.2" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.16%)</title><rect x="239.2" y="483.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="242.2" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService$$Lambda$65/1563214758.run (509 samples, 41.02%)</title><rect x="241.1" y="595.0" width="483.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.1" y="606.0">ru/mail/polis/service/re1nex/AsyncTopologyReplicaService$$Lambda$65..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.lambda$handleRequest$0 (509 samples, 41.02%)</title><rect x="241.1" y="579.0" width="483.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.1" y="590.0">ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.lambda$han..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.40%)</title><rect x="243.0" y="563.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendProxy (160 samples, 12.89%)</title><rect x="247.7" y="563.0" width="152.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.7" y="574.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.08%)</title><rect x="247.7" y="547.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.get (98 samples, 7.90%)</title><rect x="248.7" y="547.0" width="93.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.7" y="558.0">ru/mail/pol..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1109081256.linkToTargetMethod (4 samples, 0.32%)</title><rect x="251.5" y="531.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.5" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/382621994.invoke (4 samples, 0.32%)</title><rect x="251.5" y="515.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.5" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/961795109.invokeStatic (4 samples, 0.32%)</title><rect x="251.5" y="499.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.5" y="510.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (4 samples, 0.32%)</title><rect x="251.5" y="483.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.5" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.32%)</title><rect x="251.5" y="467.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="254.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (1 samples, 0.08%)</title><rect x="254.4" y="451.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="257.4" y="462.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="255.3" y="531.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="258.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.08%)</title><rect x="257.2" y="531.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.2" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="257.2" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="260.2" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="257.2" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="260.2" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="257.2" y="483.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="260.2" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="257.2" y="467.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="260.2" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="257.2" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="260.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (84 samples, 6.77%)</title><rect x="258.2" y="531.0" width="79.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.2" y="542.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (12 samples, 0.97%)</title><rect x="258.2" y="515.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.2" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (8 samples, 0.64%)</title><rect x="258.2" y="499.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.2" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (8 samples, 0.64%)</title><rect x="258.2" y="483.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.2" y="494.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (8 samples, 0.64%)</title><rect x="258.2" y="467.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.2" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (8 samples, 0.64%)</title><rect x="258.2" y="451.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="261.2" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (7 samples, 0.56%)</title><rect x="259.1" y="435.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.clear (3 samples, 0.24%)</title><rect x="259.1" y="419.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.1" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (4 samples, 0.32%)</title><rect x="262.0" y="419.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.0" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4 samples, 0.32%)</title><rect x="265.8" y="499.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.8" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.24%)</title><rect x="266.7" y="483.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.7" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.24%)</title><rect x="266.7" y="467.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.7" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.24%)</title><rect x="266.7" y="451.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.08%)</title><rect x="269.6" y="515.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.6" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.08%)</title><rect x="269.6" y="499.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (71 samples, 5.72%)</title><rect x="270.5" y="515.0" width="67.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="273.5" y="526.0">ru/mail..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (14 samples, 1.13%)</title><rect x="274.3" y="499.0" width="13.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.3" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (13 samples, 1.05%)</title><rect x="275.3" y="483.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.3" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (2 samples, 0.16%)</title><rect x="275.3" y="467.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.3" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (2 samples, 0.16%)</title><rect x="275.3" y="451.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.3" y="462.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (11 samples, 0.89%)</title><rect x="277.2" y="467.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.2" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (9 samples, 0.73%)</title><rect x="279.1" y="451.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.1" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (8 samples, 0.64%)</title><rect x="280.0" y="435.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.clear (1 samples, 0.08%)</title><rect x="281.0" y="419.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.08%)</title><rect x="281.0" y="403.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (2 samples, 0.16%)</title><rect x="281.9" y="419.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="284.9" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (4 samples, 0.32%)</title><rect x="283.8" y="419.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.8" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.16%)</title><rect x="283.8" y="403.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.8" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.08%)</title><rect x="284.8" y="387.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.8" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="284.8" y="371.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="287.8" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="284.8" y="355.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="287.8" y="366.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (2 samples, 0.16%)</title><rect x="285.7" y="403.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.7" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="285.7" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="288.7" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="285.7" y="371.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="288.7" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="285.7" y="355.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="288.7" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="285.7" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="288.7" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="285.7" y="323.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="288.7" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.08%)</title><rect x="285.7" y="307.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="288.7" y="318.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="286.7" y="387.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="289.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (2 samples, 0.16%)</title><rect x="287.6" y="499.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.16%)</title><rect x="287.6" y="483.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.16%)</title><rect x="287.6" y="467.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.6" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="287.6" y="451.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.6" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.16%)</title><rect x="287.6" y="435.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.6" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.16%)</title><rect x="287.6" y="419.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.6" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.16%)</title><rect x="287.6" y="403.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (51 samples, 4.11%)</title><rect x="289.5" y="499.0" width="48.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.5" y="510.0">ru/m..</text>
</g>
<g>
<title>java/util/Collection.stream (50 samples, 4.03%)</title><rect x="289.5" y="483.0" width="47.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.5" y="494.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (46 samples, 3.71%)</title><rect x="289.5" y="467.0" width="43.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.5" y="478.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (46 samples, 3.71%)</title><rect x="289.5" y="451.0" width="43.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.5" y="462.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (45 samples, 3.63%)</title><rect x="290.5" y="435.0" width="42.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.5" y="446.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (45 samples, 3.63%)</title><rect x="290.5" y="419.0" width="42.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.5" y="430.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (45 samples, 3.63%)</title><rect x="290.5" y="403.0" width="42.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.5" y="414.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.16%)</title><rect x="290.5" y="387.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.5" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.16%)</title><rect x="290.5" y="371.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="291.5" y="355.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.5" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.08%)</title><rect x="291.5" y="339.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (43 samples, 3.46%)</title><rect x="292.4" y="387.0" width="40.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.4" y="398.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.24%)</title><rect x="293.4" y="371.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (39 samples, 3.14%)</title><rect x="296.2" y="371.0" width="37.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.2" y="382.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (39 samples, 3.14%)</title><rect x="296.2" y="355.0" width="37.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.2" y="366.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (15 samples, 1.21%)</title><rect x="319.0" y="339.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.0" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (15 samples, 1.21%)</title><rect x="319.0" y="323.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="322.0" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (14 samples, 1.13%)</title><rect x="320.0" y="307.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.0" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (14 samples, 1.13%)</title><rect x="320.0" y="291.0" width="13.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.0" y="302.0"></text>
</g>
<g>
<title>vectorizedMismatch (7 samples, 0.56%)</title><rect x="326.6" y="275.0" width="6.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="329.6" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (4 samples, 0.32%)</title><rect x="333.3" y="467.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="336.3" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (4 samples, 0.32%)</title><rect x="333.3" y="451.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="336.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (1 samples, 0.08%)</title><rect x="336.1" y="435.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="339.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (1 samples, 0.08%)</title><rect x="337.1" y="483.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.1" y="494.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (1 samples, 0.08%)</title><rect x="337.1" y="467.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.1" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="337.1" y="451.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="340.1" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="337.1" y="435.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="340.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="337.1" y="419.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="340.1" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="337.1" y="403.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="340.1" y="414.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="337.1" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="340.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (4 samples, 0.32%)</title><rect x="338.0" y="531.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.0" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.32%)</title><rect x="338.0" y="515.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="341.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.32%)</title><rect x="338.0" y="499.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.0" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="339.9" y="483.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="342.9" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="339.9" y="467.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="342.9" y="478.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="340.9" y="483.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="343.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (61 samples, 4.92%)</title><rect x="341.8" y="547.0" width="58.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.8" y="558.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (61 samples, 4.92%)</title><rect x="341.8" y="531.0" width="58.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="344.8" y="542.0">one/ni..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (12 samples, 0.97%)</title><rect x="343.7" y="515.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="346.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.97%)</title><rect x="343.7" y="499.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.97%)</title><rect x="343.7" y="483.0" width="11.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.7" y="494.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.24%)</title><rect x="345.6" y="467.0" width="2.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="348.6" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.24%)</title><rect x="345.6" y="451.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="348.6" y="462.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.32%)</title><rect x="348.5" y="467.0" width="3.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="351.5" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.08%)</title><rect x="352.3" y="467.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.3" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.16%)</title><rect x="353.3" y="467.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="356.3" y="478.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.16%)</title><rect x="353.3" y="451.0" width="1.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="356.3" y="462.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="353.3" y="435.0" width="1.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="356.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (47 samples, 3.79%)</title><rect x="355.2" y="515.0" width="44.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.2" y="526.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 1.13%)</title><rect x="355.2" y="499.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.2" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.56%)</title><rect x="361.8" y="483.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.8" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.56%)</title><rect x="361.8" y="467.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.8" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.56%)</title><rect x="361.8" y="451.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="364.8" y="462.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="365.6" y="435.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="368.6" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="366.6" y="435.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="369.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 2.66%)</title><rect x="368.5" y="499.0" width="31.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="371.5" y="510.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (33 samples, 2.66%)</title><rect x="368.5" y="483.0" width="31.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="371.5" y="494.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (33 samples, 2.66%)</title><rect x="368.5" y="467.0" width="31.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.5" y="478.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (31 samples, 2.50%)</title><rect x="370.4" y="451.0" width="29.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.4" y="462.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (18 samples, 1.45%)</title><rect x="372.3" y="435.0" width="17.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="375.3" y="446.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.32%)</title><rect x="375.1" y="419.0" width="3.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="378.1" y="430.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.08%)</title><rect x="378.9" y="419.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="381.9" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="379.9" y="419.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="382.9" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.64%)</title><rect x="380.8" y="419.0" width="7.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="383.8" y="430.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.08%)</title><rect x="382.7" y="403.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="385.7" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.32%)</title><rect x="383.7" y="403.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="386.7" y="414.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.08%)</title><rect x="387.5" y="403.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="390.5" y="414.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.08%)</title><rect x="387.5" y="387.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="390.5" y="398.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.08%)</title><rect x="388.4" y="419.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="391.4" y="430.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="389.4" y="435.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="392.4" y="446.0"></text>
</g>
<g>
<title>__send (10 samples, 0.81%)</title><rect x="390.3" y="435.0" width="9.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="393.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendReplica (342 samples, 27.56%)</title><rect x="399.8" y="563.0" width="325.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.8" y="574.0">ru/mail/polis/service/re1nex/ApiController.s..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.severalNodesForKey (40 samples, 3.22%)</title><rect x="401.7" y="547.0" width="38.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.7" y="558.0">ru/..</text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.08%)</title><rect x="407.5" y="531.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.5" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.08%)</title><rect x="407.5" y="515.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="410.5" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (1 samples, 0.08%)</title><rect x="407.5" y="499.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.5" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (1 samples, 0.08%)</title><rect x="407.5" y="483.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.5" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.08%)</title><rect x="407.5" y="467.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="410.5" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.08%)</title><rect x="407.5" y="451.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.5" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.08%)</title><rect x="408.4" y="531.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (20 samples, 1.61%)</title><rect x="409.4" y="531.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.4" y="542.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (4 samples, 0.32%)</title><rect x="409.4" y="515.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.4" y="526.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (4 samples, 0.32%)</title><rect x="409.4" y="499.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="412.4" y="510.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (4 samples, 0.32%)</title><rect x="409.4" y="483.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.4" y="494.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (4 samples, 0.32%)</title><rect x="409.4" y="467.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.4" y="478.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implDigest (4 samples, 0.32%)</title><rect x="409.4" y="451.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.4" y="462.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bLittle4 (1 samples, 0.08%)</title><rect x="409.4" y="435.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.4" y="446.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implCompress (3 samples, 0.24%)</title><rect x="410.3" y="435.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="413.3" y="446.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.b2iLittle64 (2 samples, 0.16%)</title><rect x="411.3" y="419.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.3" y="430.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (12 samples, 0.97%)</title><rect x="413.2" y="515.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.2" y="526.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (12 samples, 0.97%)</title><rect x="413.2" y="499.0" width="11.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="416.2" y="510.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (2 samples, 0.16%)</title><rect x="413.2" y="483.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="416.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.16%)</title><rect x="413.2" y="467.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="416.2" y="478.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (10 samples, 0.81%)</title><rect x="415.1" y="483.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.1" y="494.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (4 samples, 0.32%)</title><rect x="415.1" y="467.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.1" y="478.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (3 samples, 0.24%)</title><rect x="415.1" y="451.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="417.0" y="435.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="417.0" y="419.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.0" y="430.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.checkSuperClass (1 samples, 0.08%)</title><rect x="417.9" y="451.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.9" y="462.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (1 samples, 0.08%)</title><rect x="417.9" y="435.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="420.9" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (6 samples, 0.48%)</title><rect x="418.9" y="467.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="421.9" y="478.0"></text>
</g>
<g>
<title>java/security/Provider.getService (5 samples, 0.40%)</title><rect x="418.9" y="451.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.40%)</title><rect x="418.9" y="435.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.9" y="446.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (1 samples, 0.08%)</title><rect x="423.6" y="451.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.6" y="462.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (1 samples, 0.08%)</title><rect x="423.6" y="435.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.6" y="446.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (4 samples, 0.32%)</title><rect x="424.6" y="515.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.6" y="526.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (1 samples, 0.08%)</title><rect x="425.5" y="499.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.5" y="510.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (1 samples, 0.08%)</title><rect x="425.5" y="483.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.5" y="494.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="425.5" y="467.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="428.5" y="478.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (2 samples, 0.16%)</title><rect x="426.5" y="499.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.getNodesFromMap (12 samples, 0.97%)</title><rect x="428.4" y="531.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="431.4" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (3 samples, 0.24%)</title><rect x="429.3" y="515.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="432.3" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (3 samples, 0.24%)</title><rect x="429.3" y="499.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="432.3" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (3 samples, 0.24%)</title><rect x="429.3" y="483.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.3" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (3 samples, 0.24%)</title><rect x="429.3" y="467.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.3" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (3 samples, 0.24%)</title><rect x="429.3" y="451.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.3" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (1 samples, 0.08%)</title><rect x="432.2" y="515.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="435.2" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="432.2" y="499.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="435.2" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (1 samples, 0.08%)</title><rect x="432.2" y="483.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="435.2" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (1 samples, 0.08%)</title><rect x="432.2" y="467.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.2" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (1 samples, 0.08%)</title><rect x="432.2" y="451.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.2" y="462.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (7 samples, 0.56%)</title><rect x="433.1" y="515.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="436.1" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (4 samples, 0.32%)</title><rect x="436.0" y="499.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="439.0" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.16%)</title><rect x="436.9" y="483.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="439.9" y="494.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (2 samples, 0.16%)</title><rect x="436.9" y="467.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="439.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (2 samples, 0.16%)</title><rect x="436.9" y="451.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="439.9" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.08%)</title><rect x="438.8" y="483.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="441.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.get (56 samples, 4.51%)</title><rect x="439.8" y="547.0" width="53.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="442.8" y="558.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1109081256.linkToTargetMethod (2 samples, 0.16%)</title><rect x="440.7" y="531.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="443.7" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/382621994.invoke (2 samples, 0.16%)</title><rect x="440.7" y="515.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="443.7" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/961795109.invokeStatic (2 samples, 0.16%)</title><rect x="440.7" y="499.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.16%)</title><rect x="440.7" y="483.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="443.7" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="440.7" y="467.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="443.7" y="478.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="441.7" y="451.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="444.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (52 samples, 4.19%)</title><rect x="442.6" y="531.0" width="49.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.6" y="542.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (2 samples, 0.16%)</title><rect x="442.6" y="515.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="445.6" y="526.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.08%)</title><rect x="443.6" y="499.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="446.6" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.08%)</title><rect x="443.6" y="483.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="446.6" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.08%)</title><rect x="443.6" y="467.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="446.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (8 samples, 0.64%)</title><rect x="444.5" y="515.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="447.5" y="526.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.16%)</title><rect x="444.5" y="499.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="447.5" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.16%)</title><rect x="444.5" y="483.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="447.5" y="494.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (2 samples, 0.16%)</title><rect x="444.5" y="467.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="447.5" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (2 samples, 0.16%)</title><rect x="444.5" y="451.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="447.5" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1 samples, 0.08%)</title><rect x="445.5" y="435.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.5" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.08%)</title><rect x="445.5" y="419.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="448.5" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.08%)</title><rect x="446.4" y="499.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="449.4" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (5 samples, 0.40%)</title><rect x="447.4" y="499.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.4" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.16%)</title><rect x="450.2" y="483.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="453.2" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.16%)</title><rect x="450.2" y="467.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.2" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.16%)</title><rect x="450.2" y="451.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="453.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (42 samples, 3.38%)</title><rect x="452.1" y="515.0" width="40.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="455.1" y="526.0">ru/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (6 samples, 0.48%)</title><rect x="452.1" y="499.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="455.1" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (6 samples, 0.48%)</title><rect x="452.1" y="483.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.1" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (1 samples, 0.08%)</title><rect x="453.1" y="467.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.1" y="478.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (4 samples, 0.32%)</title><rect x="454.0" y="467.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="457.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (4 samples, 0.32%)</title><rect x="454.0" y="451.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="457.0" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (4 samples, 0.32%)</title><rect x="454.0" y="435.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="457.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (3 samples, 0.24%)</title><rect x="455.0" y="419.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.08%)</title><rect x="457.8" y="499.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="460.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.08%)</title><rect x="457.8" y="483.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.08%)</title><rect x="457.8" y="467.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.8" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="457.8" y="451.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="460.8" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.08%)</title><rect x="457.8" y="435.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.8" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.08%)</title><rect x="457.8" y="419.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.8" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.08%)</title><rect x="457.8" y="403.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="460.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (2 samples, 0.16%)</title><rect x="458.8" y="499.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.8" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (2 samples, 0.16%)</title><rect x="458.8" y="483.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.8" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.16%)</title><rect x="458.8" y="467.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.8" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.16%)</title><rect x="458.8" y="451.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.8" y="462.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (2 samples, 0.16%)</title><rect x="458.8" y="435.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.8" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (2 samples, 0.16%)</title><rect x="458.8" y="419.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.8" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (2 samples, 0.16%)</title><rect x="458.8" y="403.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.8" y="414.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.clear (1 samples, 0.08%)</title><rect x="458.8" y="387.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.8" y="398.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (1 samples, 0.08%)</title><rect x="459.8" y="387.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="462.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (33 samples, 2.66%)</title><rect x="460.7" y="499.0" width="31.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.7" y="510.0">ru..</text>
</g>
<g>
<title>java/util/Collection.stream (31 samples, 2.50%)</title><rect x="462.6" y="483.0" width="29.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.6" y="494.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (30 samples, 2.42%)</title><rect x="462.6" y="467.0" width="28.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.6" y="478.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (30 samples, 2.42%)</title><rect x="462.6" y="451.0" width="28.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="465.6" y="462.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (30 samples, 2.42%)</title><rect x="462.6" y="435.0" width="28.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.6" y="446.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (1 samples, 0.08%)</title><rect x="462.6" y="419.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.08%)</title><rect x="462.6" y="403.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.08%)</title><rect x="462.6" y="387.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="462.6" y="371.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="462.6" y="355.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="465.6" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.08%)</title><rect x="462.6" y="339.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="465.6" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.08%)</title><rect x="462.6" y="323.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.6" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.08%)</title><rect x="462.6" y="307.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.6" y="318.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.08%)</title><rect x="462.6" y="291.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="465.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (29 samples, 2.34%)</title><rect x="463.6" y="419.0" width="27.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.6" y="430.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (29 samples, 2.34%)</title><rect x="463.6" y="403.0" width="27.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="466.6" y="414.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.16%)</title><rect x="463.6" y="387.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="466.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.16%)</title><rect x="463.6" y="371.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.16%)</title><rect x="463.6" y="355.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.6" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.16%)</title><rect x="463.6" y="339.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="466.6" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.16%)</title><rect x="463.6" y="323.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.6" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.16%)</title><rect x="463.6" y="307.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="466.6" y="318.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.08%)</title><rect x="464.5" y="291.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="467.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (27 samples, 2.18%)</title><rect x="465.5" y="387.0" width="25.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="468.5" y="398.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.08%)</title><rect x="467.4" y="371.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (24 samples, 1.93%)</title><rect x="468.3" y="371.0" width="22.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="471.3" y="382.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (24 samples, 1.93%)</title><rect x="468.3" y="355.0" width="22.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="471.3" y="366.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.48%)</title><rect x="485.4" y="339.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.4" y="350.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.48%)</title><rect x="485.4" y="323.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="488.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.32%)</title><rect x="487.3" y="307.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.3" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.32%)</title><rect x="487.3" y="291.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="490.3" y="302.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.16%)</title><rect x="489.2" y="275.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="492.2" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="491.1" y="467.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="494.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="491.1" y="451.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="494.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (1 samples, 0.08%)</title><rect x="492.1" y="531.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="495.1" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.08%)</title><rect x="492.1" y="515.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="495.1" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.08%)</title><rect x="492.1" y="499.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponses (211 samples, 17.00%)</title><rect x="493.0" y="547.0" width="200.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.0" y="558.0">ru/mail/polis/service/re1n..</text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.24%)</title><rect x="495.9" y="531.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="498.9" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.24%)</title><rect x="495.9" y="515.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.9" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.24%)</title><rect x="495.9" y="499.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="498.9" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.24%)</title><rect x="495.9" y="483.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="498.9" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.08%)</title><rect x="495.9" y="467.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="498.9" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.16%)</title><rect x="496.8" y="467.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="499.8" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.removeLocal (1 samples, 0.08%)</title><rect x="498.7" y="531.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="501.7" y="542.0"></text>
</g>
<g>
<title>java/util/TreeSet.remove (1 samples, 0.08%)</title><rect x="498.7" y="515.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="501.7" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (1 samples, 0.08%)</title><rect x="498.7" y="499.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.7" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.08%)</title><rect x="498.7" y="483.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.7" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.08%)</title><rect x="498.7" y="467.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.proxy (204 samples, 16.44%)</title><rect x="499.7" y="531.0" width="194.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.7" y="542.0">ru/mail/polis/service/re1..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="501.6" y="515.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="504.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="501.6" y="499.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="504.6" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (201 samples, 16.20%)</title><rect x="502.5" y="515.0" width="191.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="505.5" y="526.0">one/nio/http/HttpClient.i..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (200 samples, 16.12%)</title><rect x="503.5" y="499.0" width="190.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="506.5" y="510.0">one/nio/http/HttpClient.i..</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="504.4" y="483.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="507.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.24%)</title><rect x="505.4" y="483.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.24%)</title><rect x="505.4" y="467.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="508.4" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.24%)</title><rect x="505.4" y="451.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="508.4" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (99 samples, 7.98%)</title><rect x="508.2" y="483.0" width="94.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="511.2" y="494.0">one/nio/htt..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (15 samples, 1.21%)</title><rect x="516.8" y="467.0" width="14.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="519.8" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (14 samples, 1.13%)</title><rect x="517.8" y="451.0" width="13.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="520.8" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (14 samples, 1.13%)</title><rect x="517.8" y="435.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="520.8" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (12 samples, 0.97%)</title><rect x="517.8" y="419.0" width="11.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="520.8" y="430.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.40%)</title><rect x="517.8" y="403.0" width="4.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="520.8" y="414.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="522.5" y="403.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="525.5" y="414.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.08%)</title><rect x="522.5" y="387.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="525.5" y="398.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.08%)</title><rect x="523.5" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="526.5" y="398.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.08%)</title><rect x="524.4" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="527.4" y="414.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.08%)</title><rect x="525.4" y="403.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="528.4" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.16%)</title><rect x="526.3" y="403.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="529.3" y="414.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.16%)</title><rect x="526.3" y="387.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="529.3" y="398.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.08%)</title><rect x="526.3" y="371.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="529.3" y="382.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.08%)</title><rect x="527.3" y="371.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="530.3" y="382.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.08%)</title><rect x="528.2" y="403.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="531.2" y="414.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.16%)</title><rect x="529.2" y="419.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="532.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (73 samples, 5.88%)</title><rect x="531.1" y="467.0" width="69.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="534.1" y="478.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (21 samples, 1.69%)</title><rect x="533.9" y="451.0" width="20.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="536.9" y="462.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.16%)</title><rect x="537.7" y="435.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="540.7" y="446.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.16%)</title><rect x="539.6" y="435.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="542.6" y="446.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.08%)</title><rect x="541.5" y="435.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="544.5" y="446.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 0.81%)</title><rect x="542.5" y="435.0" width="9.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="545.5" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="543.4" y="419.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="546.4" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (5 samples, 0.40%)</title><rect x="544.4" y="419.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="547.4" y="430.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.24%)</title><rect x="549.1" y="419.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="552.1" y="430.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.16%)</title><rect x="550.1" y="403.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="553.1" y="414.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.16%)</title><rect x="552.0" y="435.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="555.0" y="446.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="553.9" y="451.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="556.9" y="462.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 0.73%)</title><rect x="554.8" y="451.0" width="8.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="557.8" y="462.0"></text>
</g>
<g>
<title>recv (38 samples, 3.06%)</title><rect x="563.4" y="451.0" width="36.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="566.4" y="462.0">recv</text>
</g>
<g>
<title>recv@plt (1 samples, 0.08%)</title><rect x="599.5" y="451.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="602.5" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1 samples, 0.08%)</title><rect x="600.5" y="467.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="603.5" y="478.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.08%)</title><rect x="601.4" y="467.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="604.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (27 samples, 2.18%)</title><rect x="602.4" y="483.0" width="25.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="605.4" y="494.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.16%)</title><rect x="603.3" y="467.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="606.3" y="478.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.16%)</title><rect x="603.3" y="451.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="606.3" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.16%)</title><rect x="603.3" y="435.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="606.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.08%)</title><rect x="604.3" y="419.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="607.3" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (21 samples, 1.69%)</title><rect x="605.2" y="467.0" width="20.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="608.2" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="611.9" y="451.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="614.9" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 1.05%)</title><rect x="612.8" y="451.0" width="12.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="615.8" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.89%)</title><rect x="614.7" y="435.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="617.7" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="624.2" y="419.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="627.2" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="624.2" y="403.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="627.2" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="624.2" y="387.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="627.2" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="624.2" y="371.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="627.2" y="382.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="624.2" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="627.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.24%)</title><rect x="625.2" y="467.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="628.2" y="478.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.24%)</title><rect x="625.2" y="451.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="628.2" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.24%)</title><rect x="625.2" y="435.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="628.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (16 samples, 1.29%)</title><rect x="628.0" y="483.0" width="15.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="631.0" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="630.0" y="467.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="633.0" y="478.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="630.9" y="467.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="633.9" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="630.9" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.9" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="630.9" y="435.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="633.9" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="630.9" y="419.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="633.9" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="630.9" y="403.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="633.9" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="630.9" y="387.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="633.9" y="398.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="630.9" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="633.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.97%)</title><rect x="631.9" y="467.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="634.9" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (12 samples, 0.97%)</title><rect x="631.9" y="451.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.9" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (12 samples, 0.97%)</title><rect x="631.9" y="435.0" width="11.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="634.9" y="446.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="642.3" y="419.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="645.3" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.24%)</title><rect x="643.3" y="483.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="646.3" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.16%)</title><rect x="644.2" y="467.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.2" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.16%)</title><rect x="644.2" y="451.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="647.2" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (22 samples, 1.77%)</title><rect x="646.1" y="483.0" width="20.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.1" y="494.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (5 samples, 0.40%)</title><rect x="646.1" y="467.0" width="4.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="649.1" y="478.0"></text>
</g>
<g>
<title>setsockopt (17 samples, 1.37%)</title><rect x="650.9" y="467.0" width="16.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="653.9" y="478.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (22 samples, 1.77%)</title><rect x="667.0" y="483.0" width="21.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="670.0" y="494.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (7 samples, 0.56%)</title><rect x="667.0" y="467.0" width="6.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="670.0" y="478.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.08%)</title><rect x="668.9" y="451.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="671.9" y="462.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="669.9" y="451.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="672.9" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.08%)</title><rect x="670.8" y="451.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="673.8" y="462.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.16%)</title><rect x="671.8" y="451.0" width="1.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="674.8" y="462.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.08%)</title><rect x="672.7" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="675.7" y="446.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="673.7" y="467.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="676.7" y="478.0"></text>
</g>
<g>
<title>__send (13 samples, 1.05%)</title><rect x="674.6" y="467.0" width="12.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="677.6" y="478.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.08%)</title><rect x="687.0" y="467.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="690.0" y="478.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (2 samples, 0.16%)</title><rect x="688.0" y="483.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="691.0" y="494.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (4 samples, 0.32%)</title><rect x="689.9" y="483.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.9" y="494.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (1 samples, 0.08%)</title><rect x="692.7" y="467.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="695.7" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (1 samples, 0.08%)</title><rect x="692.7" y="451.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="695.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (25 samples, 2.01%)</title><rect x="693.7" y="547.0" width="23.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="696.7" y="558.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (23 samples, 1.85%)</title><rect x="695.6" y="531.0" width="21.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="698.6" y="542.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.48%)</title><rect x="695.6" y="515.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.48%)</title><rect x="695.6" y="499.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.6" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.48%)</title><rect x="695.6" y="483.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="698.6" y="494.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.24%)</title><rect x="695.6" y="467.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="698.6" y="478.0"></text>
</g>
<g>
<title>gettimeofday@plt (2 samples, 0.16%)</title><rect x="698.4" y="467.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="701.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.08%)</title><rect x="700.3" y="467.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="703.3" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15 samples, 1.21%)</title><rect x="701.3" y="515.0" width="14.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.3" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.24%)</title><rect x="701.3" y="499.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="704.3" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.24%)</title><rect x="701.3" y="483.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.3" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.24%)</title><rect x="701.3" y="467.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="704.3" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.24%)</title><rect x="701.3" y="451.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.3" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (12 samples, 0.97%)</title><rect x="704.1" y="499.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="707.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (12 samples, 0.97%)</title><rect x="704.1" y="483.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="707.1" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (12 samples, 0.97%)</title><rect x="704.1" y="467.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="707.1" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.08%)</title><rect x="705.1" y="451.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.1" y="462.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (10 samples, 0.81%)</title><rect x="706.0" y="451.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="709.0" y="462.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.32%)</title><rect x="706.0" y="435.0" width="3.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="709.0" y="446.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="707.9" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="710.9" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.08%)</title><rect x="708.9" y="419.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="711.9" y="430.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="708.9" y="403.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="711.9" y="414.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.08%)</title><rect x="709.8" y="435.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="712.8" y="446.0"></text>
</g>
<g>
<title>__send (5 samples, 0.40%)</title><rect x="710.8" y="435.0" width="4.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="713.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.16%)</title><rect x="715.5" y="515.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="718.5" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.16%)</title><rect x="715.5" y="499.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="718.5" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.16%)</title><rect x="715.5" y="483.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="718.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.mergeGetResponses (8 samples, 0.64%)</title><rect x="717.4" y="547.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="720.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.24%)</title><rect x="722.2" y="531.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="725.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.08%)</title><rect x="724.1" y="515.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="727.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.08%)</title><rect x="724.1" y="499.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="727.1" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (5 samples, 0.40%)</title><rect x="725.0" y="595.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="728.0" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (5 samples, 0.40%)</title><rect x="725.0" y="579.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="728.0" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$118/275578367.run (5 samples, 0.40%)</title><rect x="725.0" y="563.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="728.0" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (5 samples, 0.40%)</title><rect x="725.0" y="547.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="728.0" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (5 samples, 0.40%)</title><rect x="725.0" y="531.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="728.0" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (5 samples, 0.40%)</title><rect x="725.0" y="515.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="728.0" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (4 samples, 0.32%)</title><rect x="726.0" y="499.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="729.0" y="510.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (4 samples, 0.32%)</title><rect x="726.0" y="483.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="729.0" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.32%)</title><rect x="726.0" y="467.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="729.0" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.32%)</title><rect x="726.0" y="451.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="729.0" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (4 samples, 0.32%)</title><rect x="726.0" y="435.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="729.0" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.16%)</title><rect x="726.0" y="419.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.16%)</title><rect x="726.0" y="403.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="729.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor42.invoke (2 samples, 0.16%)</title><rect x="726.0" y="387.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="729.0" y="398.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (2 samples, 0.16%)</title><rect x="726.0" y="371.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="729.0" y="382.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (2 samples, 0.16%)</title><rect x="726.0" y="355.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="729.0" y="366.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (2 samples, 0.16%)</title><rect x="726.0" y="339.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.0" y="350.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (2 samples, 0.16%)</title><rect x="726.0" y="323.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.0" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (2 samples, 0.16%)</title><rect x="726.0" y="307.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="729.0" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (2 samples, 0.16%)</title><rect x="726.0" y="291.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.0" y="302.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (2 samples, 0.16%)</title><rect x="726.0" y="275.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.0" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (2 samples, 0.16%)</title><rect x="726.0" y="259.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.0" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (2 samples, 0.16%)</title><rect x="726.0" y="243.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="729.0" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (2 samples, 0.16%)</title><rect x="726.0" y="227.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="729.0" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (2 samples, 0.16%)</title><rect x="726.0" y="211.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="729.0" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (2 samples, 0.16%)</title><rect x="726.0" y="195.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="729.0" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (2 samples, 0.16%)</title><rect x="726.0" y="179.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.0" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (2 samples, 0.16%)</title><rect x="726.0" y="163.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="729.0" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.16%)</title><rect x="726.0" y="147.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="729.0" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (2 samples, 0.16%)</title><rect x="726.0" y="131.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="729.0" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.16%)</title><rect x="726.0" y="115.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="729.0" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (2 samples, 0.16%)</title><rect x="726.0" y="99.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="729.0" y="110.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (2 samples, 0.16%)</title><rect x="726.0" y="83.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.0" y="94.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (2 samples, 0.16%)</title><rect x="726.0" y="67.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.0" y="78.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.08%)</title><rect x="726.0" y="51.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="729.0" y="62.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.08%)</title><rect x="726.0" y="35.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.0" y="46.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.08%)</title><rect x="726.9" y="51.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="729.9" y="62.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.08%)</title><rect x="726.9" y="35.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="729.9" y="46.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (2 samples, 0.16%)</title><rect x="727.9" y="419.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.9" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (2 samples, 0.16%)</title><rect x="727.9" y="403.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.9" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (2 samples, 0.16%)</title><rect x="727.9" y="387.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.9" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (2 samples, 0.16%)</title><rect x="727.9" y="371.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.9" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (2 samples, 0.16%)</title><rect x="727.9" y="355.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="730.9" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (2 samples, 0.16%)</title><rect x="727.9" y="339.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.9" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (2 samples, 0.16%)</title><rect x="727.9" y="323.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.9" y="334.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.16%)</title><rect x="727.9" y="307.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.16%)</title><rect x="727.9" y="291.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor7.invoke (2 samples, 0.16%)</title><rect x="727.9" y="275.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="730.9" y="286.0"></text>
</g>
<g>
<title>javax/management/ObjectName.readObject (2 samples, 0.16%)</title><rect x="727.9" y="259.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.9" y="270.0"></text>
</g>
<g>
<title>javax/management/ObjectName.construct (2 samples, 0.16%)</title><rect x="727.9" y="243.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="730.9" y="254.0"></text>
</g>
<g>
<title>javax/management/ObjectName.setCanonicalName (2 samples, 0.16%)</title><rect x="727.9" y="227.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="730.9" y="238.0"></text>
</g>
<g>
<title>java/lang/String.intern (1 samples, 0.08%)</title><rect x="727.9" y="211.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="730.9" y="222.0"></text>
</g>
<g>
<title>JVM_InternString (1 samples, 0.08%)</title><rect x="727.9" y="195.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="730.9" y="206.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.08%)</title><rect x="727.9" y="179.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="730.9" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.sort (1 samples, 0.08%)</title><rect x="728.8" y="211.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="731.8" y="222.0"></text>
</g>
<g>
<title>java/util/ComparableTimSort.sort (1 samples, 0.08%)</title><rect x="728.8" y="195.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.8" y="206.0"></text>
</g>
<g>
<title>java/util/ComparableTimSort.countRunAndMakeAscending (1 samples, 0.08%)</title><rect x="728.8" y="179.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.8" y="190.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (307 samples, 24.74%)</title><rect x="729.8" y="643.0" width="291.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="732.8" y="654.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.08%)</title><rect x="733.6" y="627.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="736.6" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.24%)</title><rect x="734.5" y="627.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.5" y="638.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (97 samples, 7.82%)</title><rect x="737.4" y="627.0" width="92.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="740.4" y="638.0">one/nio/net..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="738.3" y="611.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="741.3" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="738.3" y="595.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="741.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="738.3" y="579.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="741.3" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="738.3" y="563.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="741.3" y="574.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.08%)</title><rect x="738.3" y="547.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="741.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (95 samples, 7.66%)</title><rect x="739.3" y="611.0" width="90.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="742.3" y="622.0">one/nio/ne..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.40%)</title><rect x="746.0" y="595.0" width="4.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="749.0" y="606.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (8 samples, 0.64%)</title><rect x="750.7" y="595.0" width="7.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="753.7" y="606.0"></text>
</g>
<g>
<title>clock_gettime (36 samples, 2.90%)</title><rect x="758.3" y="595.0" width="34.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="761.3" y="606.0">cl..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="787.8" y="579.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="790.8" y="590.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.24%)</title><rect x="789.7" y="579.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="792.7" y="590.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="789.7" y="563.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="792.7" y="574.0"></text>
</g>
<g>
<title>epoll_wait (39 samples, 3.14%)</title><rect x="792.5" y="595.0" width="37.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="795.5" y="606.0">epo..</text>
</g>
<g>
<title>one/nio/net/Session.process (199 samples, 16.04%)</title><rect x="829.6" y="627.0" width="189.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="832.6" y="638.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (192 samples, 15.47%)</title><rect x="836.3" y="611.0" width="182.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="839.3" y="622.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.08%)</title><rect x="836.3" y="595.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="839.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.08%)</title><rect x="836.3" y="579.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="839.3" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.08%)</title><rect x="836.3" y="563.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="839.3" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.08%)</title><rect x="836.3" y="547.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="839.3" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (130 samples, 10.48%)</title><rect x="837.2" y="595.0" width="123.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="840.2" y="606.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (91 samples, 7.33%)</title><rect x="842.0" y="579.0" width="86.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="845.0" y="590.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (90 samples, 7.25%)</title><rect x="842.9" y="563.0" width="85.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.9" y="574.0">one/nio/ht..</text>
</g>
<g>
<title>RequestHandler2_handleRequest.handleRequest (68 samples, 5.48%)</title><rect x="843.9" y="547.0" width="64.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="846.9" y="558.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.16%)</title><rect x="843.9" y="531.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="846.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (13 samples, 1.05%)</title><rect x="845.8" y="531.0" width="12.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="848.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (13 samples, 1.05%)</title><rect x="845.8" y="515.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="848.8" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.24%)</title><rect x="848.6" y="499.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="851.6" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.24%)</title><rect x="848.6" y="483.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="851.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.32%)</title><rect x="851.5" y="499.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="854.5" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.32%)</title><rect x="851.5" y="483.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="854.5" y="494.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.08%)</title><rect x="854.4" y="467.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="857.4" y="478.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.16%)</title><rect x="855.3" y="499.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="858.3" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="857.2" y="499.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="860.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.handleRequest (53 samples, 4.27%)</title><rect x="858.2" y="531.0" width="50.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="861.2" y="542.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1282443776.linkToTargetMethod (3 samples, 0.24%)</title><rect x="858.2" y="515.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="861.2" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.24%)</title><rect x="858.2" y="499.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="861.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService$$Lambda$65/1563214758.get$Lambda (3 samples, 0.24%)</title><rect x="858.2" y="483.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="861.2" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="859.1" y="467.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="862.1" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="859.1" y="451.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="862.1" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.08%)</title><rect x="859.1" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="862.1" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="859.1" y="419.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.08%)</title><rect x="860.1" y="467.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="863.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseAsyncService.executeTask (50 samples, 4.03%)</title><rect x="861.0" y="515.0" width="47.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="864.0" y="526.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (50 samples, 4.03%)</title><rect x="861.0" y="499.0" width="47.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="864.0" y="510.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (45 samples, 3.63%)</title><rect x="865.8" y="483.0" width="42.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="868.8" y="494.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (7 samples, 0.56%)</title><rect x="866.7" y="467.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="869.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.56%)</title><rect x="866.7" y="451.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="869.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.56%)</title><rect x="866.7" y="435.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="869.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.56%)</title><rect x="866.7" y="419.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="869.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.32%)</title><rect x="873.4" y="467.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="876.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.32%)</title><rect x="873.4" y="451.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="876.4" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.16%)</title><rect x="875.3" y="435.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="878.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (33 samples, 2.66%)</title><rect x="877.2" y="467.0" width="31.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="880.2" y="478.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (33 samples, 2.66%)</title><rect x="877.2" y="451.0" width="31.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="880.2" y="462.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (33 samples, 2.66%)</title><rect x="877.2" y="435.0" width="31.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="880.2" y="446.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (33 samples, 2.66%)</title><rect x="877.2" y="419.0" width="31.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="880.2" y="430.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (32 samples, 2.58%)</title><rect x="878.1" y="403.0" width="30.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="881.1" y="414.0">jd..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="878.1" y="387.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="881.1" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="880.0" y="387.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="883.0" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.08%)</title><rect x="881.0" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="884.0" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.08%)</title><rect x="881.9" y="387.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="884.9" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark (12 samples, 0.97%)</title><rect x="882.9" y="387.0" width="11.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="885.9" y="398.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.08%)</title><rect x="882.9" y="371.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="885.9" y="382.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.16%)</title><rect x="883.8" y="371.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="886.8" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="885.7" y="371.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="888.7" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.08%)</title><rect x="886.7" y="371.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="889.7" y="382.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.08%)</title><rect x="887.6" y="371.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="890.6" y="382.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.16%)</title><rect x="888.6" y="371.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="891.6" y="382.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.08%)</title><rect x="890.5" y="371.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="893.5" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.24%)</title><rect x="891.4" y="371.0" width="2.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="894.4" y="382.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.24%)</title><rect x="894.3" y="387.0" width="2.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="897.3" y="398.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (3 samples, 0.24%)</title><rect x="894.3" y="371.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="897.3" y="382.0"></text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 0.81%)</title><rect x="897.1" y="387.0" width="9.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="900.1" y="398.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.16%)</title><rect x="906.6" y="387.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="909.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (11 samples, 0.89%)</title><rect x="908.5" y="547.0" width="10.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="911.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.89%)</title><rect x="908.5" y="531.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="911.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="908.5" y="515.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.64%)</title><rect x="911.4" y="515.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="914.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.64%)</title><rect x="911.4" y="499.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="914.4" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (8 samples, 0.64%)</title><rect x="911.4" y="483.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="914.4" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="915.2" y="467.0" width="3.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="918.2" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (10 samples, 0.81%)</title><rect x="919.0" y="547.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.81%)</title><rect x="919.0" y="531.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="922.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10 samples, 0.81%)</title><rect x="919.0" y="515.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.0" y="526.0"></text>
</g>
<g>
<title>RequestHandler2_handleRequest.handleRequest (5 samples, 0.40%)</title><rect x="919.0" y="499.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="922.0" y="510.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.32%)</title><rect x="923.8" y="499.0" width="3.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="926.8" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="927.6" y="499.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="930.6" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="927.6" y="483.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.6" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="927.6" y="467.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="930.6" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="927.6" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="930.6" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="927.6" y="435.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="930.6" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="927.6" y="419.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="930.6" y="430.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="927.6" y="403.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="930.6" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.08%)</title><rect x="927.6" y="387.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="930.6" y="398.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.08%)</title><rect x="927.6" y="371.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="930.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (18 samples, 1.45%)</title><rect x="928.5" y="579.0" width="17.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="931.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="929.5" y="563.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="932.5" y="574.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.08%)</title><rect x="929.5" y="547.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="932.5" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.08%)</title><rect x="930.4" y="563.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="933.4" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="930.4" y="547.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.4" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="930.4" y="531.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.4" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="930.4" y="515.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.4" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="930.4" y="499.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.4" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="930.4" y="483.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="933.4" y="494.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.08%)</title><rect x="930.4" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.4" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.64%)</title><rect x="931.4" y="563.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="934.4" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.56%)</title><rect x="932.3" y="547.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="935.3" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="937.1" y="531.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.1" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="937.1" y="515.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="940.1" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="937.1" y="499.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="940.1" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="937.1" y="483.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="940.1" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="937.1" y="467.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="940.1" y="478.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="937.1" y="451.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="940.1" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.08%)</title><rect x="937.1" y="435.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.1" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="938.0" y="531.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="941.0" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (7 samples, 0.56%)</title><rect x="939.0" y="563.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="942.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.56%)</title><rect x="945.6" y="579.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="948.6" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.16%)</title><rect x="950.4" y="563.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="953.4" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.16%)</title><rect x="950.4" y="547.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="953.4" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.73%)</title><rect x="952.3" y="579.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.64%)</title><rect x="953.2" y="563.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="956.2" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="959.9" y="547.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.9" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="959.9" y="531.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.9" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.08%)</title><rect x="959.9" y="515.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="962.9" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.08%)</title><rect x="959.9" y="499.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="962.9" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.08%)</title><rect x="959.9" y="483.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.9" y="494.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.08%)</title><rect x="959.9" y="467.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="962.9" y="478.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.16%)</title><rect x="960.8" y="595.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="963.8" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (59 samples, 4.75%)</title><rect x="962.7" y="595.0" width="56.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="965.7" y="606.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (56 samples, 4.51%)</title><rect x="965.6" y="579.0" width="53.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="968.6" y="590.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (29 samples, 2.34%)</title><rect x="970.4" y="563.0" width="27.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="973.4" y="574.0">J..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.16%)</title><rect x="976.1" y="547.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="979.1" y="558.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.08%)</title><rect x="978.0" y="547.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.0" y="558.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.08%)</title><rect x="978.9" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.9" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.08%)</title><rect x="979.9" y="547.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="982.9" y="558.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.08%)</title><rect x="980.8" y="547.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="983.8" y="558.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (14 samples, 1.13%)</title><rect x="981.8" y="547.0" width="13.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="984.8" y="558.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.16%)</title><rect x="985.6" y="531.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.6" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.08%)</title><rect x="987.5" y="531.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.5" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.16%)</title><rect x="988.4" y="531.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="991.4" y="542.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.40%)</title><rect x="990.3" y="531.0" width="4.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="993.3" y="542.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (5 samples, 0.40%)</title><rect x="990.3" y="515.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.3" y="526.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.24%)</title><rect x="995.1" y="547.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.1" y="558.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="997.9" y="563.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1000.9" y="574.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.24%)</title><rect x="998.9" y="563.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1001.9" y="574.0"></text>
</g>
<g>
<title>recv (18 samples, 1.45%)</title><rect x="1001.7" y="563.0" width="17.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1004.7" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.24%)</title><rect x="1018.8" y="627.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1021.8" y="638.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.24%)</title><rect x="1018.8" y="611.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1021.8" y="622.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="1019.8" y="595.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1022.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (1 samples, 0.08%)</title><rect x="1021.7" y="643.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1024.7" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.08%)</title><rect x="1021.7" y="627.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1024.7" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.08%)</title><rect x="1021.7" y="611.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1024.7" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.08%)</title><rect x="1021.7" y="595.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1024.7" y="606.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1 samples, 0.08%)</title><rect x="1021.7" y="579.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1024.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="1021.7" y="563.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1024.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1 samples, 0.08%)</title><rect x="1021.7" y="547.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1024.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.08%)</title><rect x="1021.7" y="531.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1024.7" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.08%)</title><rect x="1021.7" y="515.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1024.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.08%)</title><rect x="1021.7" y="499.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1024.7" y="510.0"></text>
</g>
<g>
<title>start_thread (176 samples, 14.18%)</title><rect x="1022.7" y="643.0" width="167.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1025.7" y="654.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (176 samples, 14.18%)</title><rect x="1022.7" y="627.0" width="167.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1025.7" y="638.0">thread_native_entry(T..</text>
</g>
<g>
<title>Thread::call_run() (176 samples, 14.18%)</title><rect x="1022.7" y="611.0" width="167.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.7" y="622.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (175 samples, 14.10%)</title><rect x="1022.7" y="595.0" width="166.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.7" y="606.0">GangWorker::loop()</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (123 samples, 9.91%)</title><rect x="1022.7" y="579.0" width="116.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.7" y="590.0">G1CMConcurrent..</text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (123 samples, 9.91%)</title><rect x="1022.7" y="563.0" width="116.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.7" y="574.0">G1CMTask::do_m..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.98] (1 samples, 0.08%)</title><rect x="1022.7" y="547.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.7" y="558.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (49 samples, 3.95%)</title><rect x="1023.6" y="547.0" width="46.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1026.6" y="558.0">G1CM..</text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (37 samples, 2.98%)</title><rect x="1024.6" y="531.0" width="35.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1027.6" y="542.0">G1C..</text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (27 samples, 2.18%)</title><rect x="1034.1" y="515.0" width="25.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.1" y="526.0">v..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.08%)</title><rect x="1037.9" y="499.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1040.9" y="510.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.08%)</title><rect x="1038.8" y="499.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.8" y="510.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (19 samples, 1.53%)</title><rect x="1039.8" y="499.0" width="18.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.8" y="510.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (14 samples, 1.13%)</title><rect x="1042.6" y="483.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1045.6" y="494.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.08%)</title><rect x="1055.0" y="467.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.0" y="478.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.08%)</title><rect x="1055.9" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.9" y="494.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.08%)</title><rect x="1056.9" y="483.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1059.9" y="494.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.16%)</title><rect x="1057.8" y="499.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1060.8" y="510.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (2 samples, 0.16%)</title><rect x="1057.8" y="483.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.8" y="494.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.08%)</title><rect x="1059.7" y="531.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.7" y="542.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (9 samples, 0.73%)</title><rect x="1060.7" y="531.0" width="8.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.7" y="542.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (6 samples, 0.48%)</title><rect x="1060.7" y="515.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1063.7" y="526.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (6 samples, 0.48%)</title><rect x="1060.7" y="499.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1063.7" y="510.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.08%)</title><rect x="1065.4" y="483.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.4" y="494.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.24%)</title><rect x="1066.4" y="515.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.4" y="526.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (3 samples, 0.24%)</title><rect x="1066.4" y="499.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.4" y="510.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.08%)</title><rect x="1068.3" y="483.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.3" y="494.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;TypeArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.08%)</title><rect x="1069.2" y="531.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.2" y="542.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (72 samples, 5.80%)</title><rect x="1070.2" y="547.0" width="68.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.2" y="558.0">G1CMTas..</text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (59 samples, 4.75%)</title><rect x="1082.6" y="531.0" width="56.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.6" y="542.0">void G..</text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (51 samples, 4.11%)</title><rect x="1090.2" y="515.0" width="48.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.2" y="526.0">void..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (37 samples, 2.98%)</title><rect x="1099.7" y="499.0" width="35.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.7" y="510.0">G1C..</text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.24%)</title><rect x="1132.0" y="483.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.0" y="494.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (4 samples, 0.32%)</title><rect x="1134.9" y="499.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.9" y="510.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.08%)</title><rect x="1138.7" y="547.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.7" y="558.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 0.73%)</title><rect x="1139.6" y="579.0" width="8.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.6" y="590.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.40%)</title><rect x="1139.6" y="563.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.6" y="574.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.40%)</title><rect x="1139.6" y="547.0" width="4.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1142.6" y="558.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.16%)</title><rect x="1144.4" y="563.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.4" y="574.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.16%)</title><rect x="1144.4" y="547.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.4" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.16%)</title><rect x="1144.4" y="531.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.4" y="542.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 0.16%)</title><rect x="1144.4" y="515.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.4" y="526.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.08%)</title><rect x="1144.4" y="499.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.4" y="510.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.08%)</title><rect x="1144.4" y="483.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.4" y="494.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.08%)</title><rect x="1144.4" y="467.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.4" y="478.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.08%)</title><rect x="1144.4" y="451.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.4" y="462.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1144.4" y="435.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.4" y="446.0"></text>
</g>
<g>
<title>PtrQueueSet::deallocate_buffer(BufferNode*) (1 samples, 0.08%)</title><rect x="1145.3" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.3" y="510.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.16%)</title><rect x="1146.3" y="563.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.3" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="1146.3" y="547.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.3" y="558.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="1146.3" y="531.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.3" y="542.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.16%)</title><rect x="1146.3" y="515.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.3" y="526.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.08%)</title><rect x="1146.3" y="499.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.3" y="510.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="1146.3" y="483.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.3" y="494.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1147.2" y="499.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.2" y="510.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.08%)</title><rect x="1147.2" y="483.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.2" y="494.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="1147.2" y="467.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.2" y="478.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.08%)</title><rect x="1148.2" y="579.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.2" y="590.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel_postponed() (1 samples, 0.08%)</title><rect x="1148.2" y="563.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.2" y="574.0"></text>
</g>
<g>
<title>bool clean_if_nmethod_is_unloaded&lt;CompiledIC&gt;(CompiledIC*, unsigned char*, CompiledMethod*, bool, bool) (1 samples, 0.08%)</title><rect x="1148.2" y="547.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1151.2" y="558.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.08%)</title><rect x="1148.2" y="531.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="542.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (42 samples, 3.38%)</title><rect x="1149.1" y="579.0" width="39.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.1" y="590.0">G1R..</text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (42 samples, 3.38%)</title><rect x="1149.1" y="563.0" width="39.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.1" y="574.0">Hea..</text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (39 samples, 3.14%)</title><rect x="1149.1" y="547.0" width="37.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.1" y="558.0">G1R..</text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.08%)</title><rect x="1170.0" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.0" y="542.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.08%)</title><rect x="1171.0" y="531.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.0" y="542.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.234] (2 samples, 0.16%)</title><rect x="1171.9" y="531.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.9" y="542.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (13 samples, 1.05%)</title><rect x="1173.8" y="531.0" width="12.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.8" y="542.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.08%)</title><rect x="1180.5" y="515.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="526.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (2 samples, 0.16%)</title><rect x="1181.4" y="515.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="526.0"></text>
</g>
<g>
<title>BitMap::par_at_put(unsigned long, bool) (1 samples, 0.08%)</title><rect x="1182.4" y="499.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.4" y="510.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.234] (3 samples, 0.24%)</title><rect x="1183.3" y="515.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="526.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (3 samples, 0.24%)</title><rect x="1186.2" y="547.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="558.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.08%)</title><rect x="1189.0" y="595.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.0" y="606.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.08%)</title><rect x="1189.0" y="579.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="590.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.08%)</title><rect x="1189.0" y="563.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="574.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="558.0"></text>
</g>
<g>
<title>GCTraceCPUTime::GCTraceCPUTime() (1 samples, 0.08%)</title><rect x="1189.0" y="531.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.0" y="542.0"></text>
</g>
</g>
</svg>
