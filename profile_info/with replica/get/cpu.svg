<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="453"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="453"> </text>
<g id="frames">
<g>
<title>all (685 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="430.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.29%)</title><rect x="10.0" y="403.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.15%)</title><rect x="10.0" y="387.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.15%)</title><rect x="10.0" y="371.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.15%)</title><rect x="10.0" y="355.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.15%)</title><rect x="10.0" y="339.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.15%)</title><rect x="11.7" y="387.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.7" y="398.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.29%)</title><rect x="13.4" y="403.0" width="3.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="16.4" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.29%)</title><rect x="13.4" y="387.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.4" y="398.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (2 samples, 0.29%)</title><rect x="13.4" y="371.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.run (415 samples, 60.58%)</title><rect x="16.9" y="403.0" width="714.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="414.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (415 samples, 60.58%)</title><rect x="16.9" y="387.0" width="714.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.9" y="398.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (415 samples, 60.58%)</title><rect x="16.9" y="371.0" width="714.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.9" y="382.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.44%)</title><rect x="16.9" y="355.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.44%)</title><rect x="16.9" y="339.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.44%)</title><rect x="16.9" y="323.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1 samples, 0.15%)</title><rect x="18.6" y="307.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.15%)</title><rect x="20.3" y="307.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (122 samples, 17.81%)</title><rect x="22.1" y="355.0" width="210.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.1" y="366.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (122 samples, 17.81%)</title><rect x="22.1" y="339.0" width="210.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.1" y="350.0">java/util/concurrent/ArrayBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (110 samples, 16.06%)</title><rect x="27.2" y="323.0" width="189.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.2" y="334.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.29%)</title><rect x="30.7" y="307.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="33.7" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.29%)</title><rect x="30.7" y="291.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.15%)</title><rect x="32.4" y="275.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.15%)</title><rect x="34.1" y="307.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.44%)</title><rect x="35.8" y="307.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.44%)</title><rect x="35.8" y="291.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="38.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.15%)</title><rect x="39.3" y="275.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.15%)</title><rect x="39.3" y="259.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.15%)</title><rect x="39.3" y="243.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="42.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (101 samples, 14.74%)</title><rect x="41.0" y="307.0" width="174.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.0" y="318.0">java/util/concurrent/l..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (101 samples, 14.74%)</title><rect x="41.0" y="291.0" width="174.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.0" y="302.0">jdk/internal/misc/Unsa..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.29%)</title><rect x="49.6" y="275.0" width="3.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="52.6" y="286.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.15%)</title><rect x="53.1" y="275.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="56.1" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.29%)</title><rect x="54.8" y="275.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="57.8" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park (74 samples, 10.80%)</title><rect x="58.2" y="275.0" width="127.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="61.2" y="286.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.29%)</title><rect x="60.0" y="259.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="63.0" y="270.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.29%)</title><rect x="63.4" y="259.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="66.4" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 3.94%)</title><rect x="66.8" y="259.0" width="46.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="69.8" y="270.0">Park..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (3 samples, 0.44%)</title><rect x="78.9" y="243.0" width="5.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="81.9" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.88%)</title><rect x="84.1" y="243.0" width="10.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="87.1" y="254.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.15%)</title><rect x="92.7" y="227.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="95.7" y="238.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.15%)</title><rect x="94.4" y="243.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="97.4" y="254.0"></text>
</g>
<g>
<title>__tls_get_addr (10 samples, 1.46%)</title><rect x="96.1" y="243.0" width="17.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="99.1" y="254.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.15%)</title><rect x="113.4" y="259.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="116.4" y="270.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.15%)</title><rect x="115.1" y="259.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="118.1" y="270.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.15%)</title><rect x="116.8" y="259.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="119.8" y="270.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (35 samples, 5.11%)</title><rect x="118.5" y="259.0" width="60.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="121.5" y="270.0">__pthr..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.15%)</title><rect x="178.8" y="259.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="181.8" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.29%)</title><rect x="180.5" y="259.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="183.5" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_trylock@plt (1 samples, 0.15%)</title><rect x="184.0" y="259.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="187.0" y="270.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 2.48%)</title><rect x="185.7" y="275.0" width="29.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="188.7" y="286.0">[u..</text>
</g>
<g>
<title>__pthread_cond_wait (10 samples, 1.46%)</title><rect x="185.7" y="259.0" width="17.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="188.7" y="270.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.44%)</title><rect x="202.9" y="259.0" width="5.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="205.9" y="270.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.15%)</title><rect x="208.1" y="259.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="211.1" y="270.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.29%)</title><rect x="209.8" y="259.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="212.8" y="270.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.15%)</title><rect x="213.3" y="259.0" width="1.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="216.3" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.15%)</title><rect x="215.0" y="307.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.15%)</title><rect x="216.7" y="323.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.15%)</title><rect x="216.7" y="307.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="219.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.15%)</title><rect x="216.7" y="291.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.15%)</title><rect x="216.7" y="275.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.15%)</title><rect x="216.7" y="259.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.15%)</title><rect x="216.7" y="243.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.7" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.15%)</title><rect x="216.7" y="227.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="219.7" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.15%)</title><rect x="216.7" y="211.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="219.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 1.17%)</title><rect x="218.4" y="323.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 1.17%)</title><rect x="218.4" y="307.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="221.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 1.17%)</title><rect x="218.4" y="291.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 1.17%)</title><rect x="218.4" y="275.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.4" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 1.17%)</title><rect x="218.4" y="259.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.4" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.15%)</title><rect x="218.4" y="243.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="221.4" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.73%)</title><rect x="220.2" y="243.0" width="8.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="223.2" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.15%)</title><rect x="220.2" y="227.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="223.2" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.29%)</title><rect x="221.9" y="227.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="224.9" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.29%)</title><rect x="225.3" y="227.0" width="3.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="228.3" y="238.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.29%)</title><rect x="228.8" y="243.0" width="3.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="231.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService$$Lambda$67/906100538.run (290 samples, 42.34%)</title><rect x="232.2" y="355.0" width="499.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.2" y="366.0">ru/mail/polis/service/re1nex/AsyncTopologyReplicaService$$Lambda$67/9..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.lambda$handleRequest$0 (290 samples, 42.34%)</title><rect x="232.2" y="339.0" width="499.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.2" y="350.0">ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.lambda$handl..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.73%)</title><rect x="232.2" y="323.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.15%)</title><rect x="239.1" y="307.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.1" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.15%)</title><rect x="239.1" y="291.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendProxy (89 samples, 12.99%)</title><rect x="240.8" y="323.0" width="153.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.8" y="334.0">ru/mail/polis/servi..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.get (64 samples, 9.34%)</title><rect x="240.8" y="307.0" width="110.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.8" y="318.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2109302251.linkToTargetMethod (2 samples, 0.29%)</title><rect x="246.0" y="291.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.0" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1117852348.invoke (2 samples, 0.29%)</title><rect x="246.0" y="275.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.0" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1116989918.invokeStatic (1 samples, 0.15%)</title><rect x="246.0" y="259.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.0" y="270.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.15%)</title><rect x="246.0" y="243.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.0" y="254.0"></text>
</g>
<g>
<title>java/lang/Long.stringSize (1 samples, 0.15%)</title><rect x="246.0" y="227.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.0" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1898332247.invoke (1 samples, 0.15%)</title><rect x="247.7" y="259.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.7" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.15%)</title><rect x="247.7" y="243.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="250.7" y="254.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.15%)</title><rect x="247.7" y="227.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.7" y="238.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.15%)</title><rect x="247.7" y="211.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.7" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.15%)</title><rect x="247.7" y="195.0" width="1.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="250.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.15%)</title><rect x="249.4" y="291.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.4" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.15%)</title><rect x="251.2" y="291.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (52 samples, 7.59%)</title><rect x="252.9" y="291.0" width="89.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.9" y="302.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2 samples, 0.29%)</title><rect x="252.9" y="275.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.15%)</title><rect x="252.9" y="259.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="255.9" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.15%)</title><rect x="252.9" y="243.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.9" y="254.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.15%)</title><rect x="252.9" y="227.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="255.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$128/1449907143.apply (1 samples, 0.15%)</title><rect x="254.6" y="259.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.15%)</title><rect x="254.6" y="243.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.6" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.15%)</title><rect x="254.6" y="227.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (50 samples, 7.30%)</title><rect x="256.3" y="275.0" width="86.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.3" y="286.0">ru/mail/po..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (4 samples, 0.58%)</title><rect x="258.1" y="259.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.1" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (4 samples, 0.58%)</title><rect x="258.1" y="243.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.1" y="254.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (4 samples, 0.58%)</title><rect x="258.1" y="227.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.1" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (4 samples, 0.58%)</title><rect x="258.1" y="211.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.1" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (4 samples, 0.58%)</title><rect x="258.1" y="195.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.1" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (3 samples, 0.44%)</title><rect x="259.8" y="179.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.8" y="190.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.15%)</title><rect x="263.2" y="163.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.2" y="174.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.15%)</title><rect x="263.2" y="147.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.2" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.29%)</title><rect x="264.9" y="259.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.9" y="270.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.15%)</title><rect x="264.9" y="243.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="267.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (1 samples, 0.15%)</title><rect x="266.7" y="243.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.7" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.15%)</title><rect x="268.4" y="259.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.4" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.15%)</title><rect x="268.4" y="243.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.4" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.15%)</title><rect x="268.4" y="227.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.4" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.15%)</title><rect x="268.4" y="211.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (42 samples, 6.13%)</title><rect x="270.1" y="259.0" width="72.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.1" y="270.0">ru/mail/..</text>
</g>
<g>
<title>java/util/Collection.stream (33 samples, 4.82%)</title><rect x="270.1" y="243.0" width="56.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.1" y="254.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (31 samples, 4.53%)</title><rect x="270.1" y="227.0" width="53.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.1" y="238.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (31 samples, 4.53%)</title><rect x="270.1" y="211.0" width="53.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.1" y="222.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (31 samples, 4.53%)</title><rect x="270.1" y="195.0" width="53.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.1" y="206.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (1 samples, 0.15%)</title><rect x="273.6" y="179.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.15%)</title><rect x="273.6" y="163.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (28 samples, 4.09%)</title><rect x="275.3" y="179.0" width="48.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.3" y="190.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (28 samples, 4.09%)</title><rect x="275.3" y="163.0" width="48.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.3" y="174.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.15%)</title><rect x="275.3" y="147.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (27 samples, 3.94%)</title><rect x="277.0" y="147.0" width="46.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.0" y="158.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (10 samples, 1.46%)</title><rect x="306.3" y="131.0" width="17.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="309.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 1.31%)</title><rect x="308.0" y="115.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.0" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 1.31%)</title><rect x="308.0" y="99.0" width="15.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="311.0" y="110.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 1.31%)</title><rect x="308.0" y="83.0" width="15.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.0" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.88%)</title><rect x="313.2" y="67.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.2" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.88%)</title><rect x="313.2" y="51.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="316.2" y="62.0"></text>
</g>
<g>
<title>vectorizedMismatch (4 samples, 0.58%)</title><rect x="316.6" y="35.0" width="6.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="319.6" y="46.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.29%)</title><rect x="323.5" y="227.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="326.5" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.15%)</title><rect x="325.2" y="211.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="328.2" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.15%)</title><rect x="325.2" y="195.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="328.2" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.15%)</title><rect x="325.2" y="179.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="328.2" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.15%)</title><rect x="325.2" y="163.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="328.2" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.15%)</title><rect x="325.2" y="147.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="328.2" y="158.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.15%)</title><rect x="325.2" y="131.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="328.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (2 samples, 0.29%)</title><rect x="327.0" y="243.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="330.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.29%)</title><rect x="330.4" y="243.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="333.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.29%)</title><rect x="330.4" y="227.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="333.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.29%)</title><rect x="330.4" y="211.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="333.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (2 samples, 0.29%)</title><rect x="330.4" y="195.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="333.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (2 samples, 0.29%)</title><rect x="330.4" y="179.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="333.4" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (2 samples, 0.29%)</title><rect x="333.9" y="243.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.9" y="254.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (1 samples, 0.15%)</title><rect x="333.9" y="227.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.9" y="238.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (1 samples, 0.15%)</title><rect x="335.6" y="227.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.6" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.15%)</title><rect x="335.6" y="211.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="338.6" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.15%)</title><rect x="335.6" y="195.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="338.6" y="206.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$89/1934011524.get$Lambda (1 samples, 0.15%)</title><rect x="335.6" y="179.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="338.6" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.15%)</title><rect x="335.6" y="163.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="338.6" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.15%)</title><rect x="335.6" y="147.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="338.6" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.15%)</title><rect x="335.6" y="131.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="338.6" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.15%)</title><rect x="335.6" y="115.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="338.6" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.15%)</title><rect x="335.6" y="99.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="338.6" y="110.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (3 samples, 0.44%)</title><rect x="337.3" y="243.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.3" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.15%)</title><rect x="340.7" y="227.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="343.7" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.15%)</title><rect x="340.7" y="211.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="343.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Value.getData (2 samples, 0.29%)</title><rect x="342.5" y="291.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="345.5" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.29%)</title><rect x="342.5" y="275.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="345.5" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.15%)</title><rect x="344.2" y="259.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.2" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="344.2" y="243.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="344.2" y="227.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.2" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="344.2" y="211.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="347.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.15%)</title><rect x="344.2" y="195.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="347.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (3 samples, 0.44%)</title><rect x="345.9" y="291.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="348.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.15%)</title><rect x="345.9" y="275.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="348.9" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.15%)</title><rect x="345.9" y="259.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="348.9" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.15%)</title><rect x="345.9" y="243.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="348.9" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.15%)</title><rect x="345.9" y="227.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.29%)</title><rect x="347.6" y="275.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="350.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.29%)</title><rect x="347.6" y="259.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="350.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.put (1 samples, 0.15%)</title><rect x="351.1" y="307.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (1 samples, 0.15%)</title><rect x="351.1" y="291.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.15%)</title><rect x="351.1" y="275.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.1" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.15%)</title><rect x="351.1" y="259.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.get (1 samples, 0.15%)</title><rect x="351.1" y="243.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (24 samples, 3.50%)</title><rect x="352.8" y="307.0" width="41.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="355.8" y="318.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (24 samples, 3.50%)</title><rect x="352.8" y="291.0" width="41.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="355.8" y="302.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.15%)</title><rect x="352.8" y="275.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.15%)</title><rect x="352.8" y="259.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="355.8" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.15%)</title><rect x="352.8" y="243.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="355.8" y="254.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.15%)</title><rect x="352.8" y="227.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="355.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (22 samples, 3.21%)</title><rect x="354.5" y="275.0" width="37.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.5" y="286.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 1.17%)</title><rect x="354.5" y="259.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.29%)</title><rect x="364.9" y="243.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="367.9" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.29%)</title><rect x="364.9" y="227.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.9" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.29%)</title><rect x="364.9" y="211.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.9" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 2.04%)</title><rect x="368.3" y="259.0" width="24.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.3" y="270.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 2.04%)</title><rect x="368.3" y="243.0" width="24.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="371.3" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.15%)</title><rect x="368.3" y="227.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.3" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (13 samples, 1.90%)</title><rect x="370.0" y="227.0" width="22.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="373.0" y="238.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (13 samples, 1.90%)</title><rect x="370.0" y="211.0" width="22.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="373.0" y="222.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.58%)</title><rect x="373.5" y="195.0" width="6.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="376.5" y="206.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.29%)</title><rect x="375.2" y="179.0" width="3.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="378.2" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.15%)</title><rect x="378.6" y="179.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="381.6" y="190.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.15%)</title><rect x="378.6" y="163.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="381.6" y="174.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.15%)</title><rect x="378.6" y="147.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="381.6" y="158.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.15%)</title><rect x="380.4" y="195.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="383.4" y="206.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.15%)</title><rect x="382.1" y="195.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="385.1" y="206.0"></text>
</g>
<g>
<title>__send (5 samples, 0.73%)</title><rect x="383.8" y="195.0" width="8.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="386.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.15%)</title><rect x="392.4" y="275.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.15%)</title><rect x="392.4" y="259.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="395.4" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.15%)</title><rect x="392.4" y="243.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="395.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendReplica (196 samples, 28.61%)</title><rect x="394.1" y="323.0" width="337.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.1" y="334.0">ru/mail/polis/service/re1nex/ApiController.sen..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.severalNodesForKey (25 samples, 3.65%)</title><rect x="394.1" y="307.0" width="43.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="397.1" y="318.0">ru/m..</text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.29%)</title><rect x="394.1" y="291.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.1" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.29%)</title><rect x="394.1" y="275.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="397.1" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (2 samples, 0.29%)</title><rect x="394.1" y="259.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.1" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (2 samples, 0.29%)</title><rect x="394.1" y="243.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (1 samples, 0.15%)</title><rect x="395.9" y="227.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="398.9" y="238.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (3 samples, 0.44%)</title><rect x="397.6" y="291.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="400.6" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.&lt;init&gt; (3 samples, 0.44%)</title><rect x="397.6" y="275.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="400.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.44%)</title><rect x="397.6" y="259.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (6 samples, 0.88%)</title><rect x="402.8" y="291.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.8" y="302.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (2 samples, 0.29%)</title><rect x="402.8" y="275.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="405.8" y="286.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (2 samples, 0.29%)</title><rect x="402.8" y="259.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="405.8" y="270.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (2 samples, 0.29%)</title><rect x="402.8" y="243.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="405.8" y="254.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (2 samples, 0.29%)</title><rect x="402.8" y="227.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="405.8" y="238.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (3 samples, 0.44%)</title><rect x="406.2" y="275.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.2" y="286.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (3 samples, 0.44%)</title><rect x="406.2" y="259.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.2" y="270.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (3 samples, 0.44%)</title><rect x="406.2" y="243.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.2" y="254.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (2 samples, 0.29%)</title><rect x="406.2" y="227.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="409.2" y="238.0"></text>
</g>
<g>
<title>java/security/Provider.getService (2 samples, 0.29%)</title><rect x="406.2" y="211.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.29%)</title><rect x="406.2" y="195.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="409.2" y="206.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.equals (1 samples, 0.15%)</title><rect x="406.2" y="179.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.15%)</title><rect x="406.2" y="163.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.2" y="174.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.15%)</title><rect x="406.2" y="147.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.2" y="158.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.hashCode (1 samples, 0.15%)</title><rect x="407.9" y="179.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.9" y="190.0"></text>
</g>
<g>
<title>java/util/Objects.hash (1 samples, 0.15%)</title><rect x="407.9" y="163.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.9" y="174.0"></text>
</g>
<g>
<title>sun/security/jca/Providers.getProviderList (1 samples, 0.15%)</title><rect x="409.6" y="227.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="412.6" y="238.0"></text>
</g>
<g>
<title>sun/security/jca/Providers.getThreadProviderList (1 samples, 0.15%)</title><rect x="409.6" y="211.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="412.6" y="222.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (1 samples, 0.15%)</title><rect x="411.4" y="275.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="414.4" y="286.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (1 samples, 0.15%)</title><rect x="411.4" y="259.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="414.4" y="270.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (1 samples, 0.15%)</title><rect x="411.4" y="243.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.4" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.15%)</title><rect x="411.4" y="227.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="414.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.getNodesFromMap (14 samples, 2.04%)</title><rect x="413.1" y="291.0" width="24.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="416.1" y="302.0">r..</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (3 samples, 0.44%)</title><rect x="413.1" y="275.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="416.1" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (3 samples, 0.44%)</title><rect x="413.1" y="259.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.1" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (2 samples, 0.29%)</title><rect x="413.1" y="243.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="416.1" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (2 samples, 0.29%)</title><rect x="413.1" y="227.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="416.1" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (1 samples, 0.15%)</title><rect x="414.8" y="211.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.8" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.15%)</title><rect x="414.8" y="195.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.8" y="206.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (1 samples, 0.15%)</title><rect x="414.8" y="179.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="417.8" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.15%)</title><rect x="416.5" y="243.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.5" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.&lt;init&gt; (1 samples, 0.15%)</title><rect x="416.5" y="227.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.5" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.&lt;init&gt; (1 samples, 0.15%)</title><rect x="416.5" y="211.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.5" y="222.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (1 samples, 0.15%)</title><rect x="416.5" y="195.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.5" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.values (2 samples, 0.29%)</title><rect x="418.3" y="275.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="421.3" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$Values.&lt;init&gt; (1 samples, 0.15%)</title><rect x="420.0" y="259.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="423.0" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.15%)</title><rect x="420.0" y="243.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="423.0" y="254.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.15%)</title><rect x="420.0" y="227.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="423.0" y="238.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (9 samples, 1.31%)</title><rect x="421.7" y="275.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="424.7" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (9 samples, 1.31%)</title><rect x="421.7" y="259.0" width="15.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="424.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.15%)</title><rect x="426.9" y="243.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="429.9" y="254.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.15%)</title><rect x="426.9" y="227.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="429.9" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.15%)</title><rect x="426.9" y="211.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="429.9" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.29%)</title><rect x="428.6" y="243.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="431.6" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (2 samples, 0.29%)</title><rect x="432.0" y="243.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (1 samples, 0.15%)</title><rect x="435.5" y="243.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.get (37 samples, 5.40%)</title><rect x="437.2" y="307.0" width="63.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.2" y="318.0">ru/mail..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2109302251.linkToTargetMethod (2 samples, 0.29%)</title><rect x="437.2" y="291.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.2" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1117852348.invoke (2 samples, 0.29%)</title><rect x="437.2" y="275.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="440.2" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.15%)</title><rect x="437.2" y="259.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="440.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.15%)</title><rect x="437.2" y="243.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="440.2" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.15%)</title><rect x="437.2" y="227.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="440.2" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1898332247.invoke (1 samples, 0.15%)</title><rect x="438.9" y="259.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.15%)</title><rect x="438.9" y="243.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.15%)</title><rect x="438.9" y="227.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.9" y="238.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.15%)</title><rect x="438.9" y="211.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.9" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.15%)</title><rect x="438.9" y="195.0" width="1.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="441.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.15%)</title><rect x="440.7" y="291.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="443.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.getValue (30 samples, 4.38%)</title><rect x="442.4" y="291.0" width="51.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.4" y="302.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 0.44%)</title><rect x="442.4" y="275.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.4" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.29%)</title><rect x="442.4" y="259.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.4" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.15%)</title><rect x="442.4" y="243.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="445.4" y="254.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (1 samples, 0.15%)</title><rect x="442.4" y="227.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.4" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (1 samples, 0.15%)</title><rect x="442.4" y="211.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="445.4" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1 samples, 0.15%)</title><rect x="442.4" y="195.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.4" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (1 samples, 0.15%)</title><rect x="442.4" y="179.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="445.4" y="190.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.15%)</title><rect x="442.4" y="163.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="445.4" y="174.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1 samples, 0.15%)</title><rect x="444.1" y="243.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.1" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1 samples, 0.15%)</title><rect x="444.1" y="227.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.1" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.15%)</title><rect x="445.8" y="259.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.8" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.15%)</title><rect x="445.8" y="243.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (27 samples, 3.94%)</title><rect x="447.5" y="275.0" width="46.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="450.5" y="286.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (2 samples, 0.29%)</title><rect x="447.5" y="259.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.5" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2 samples, 0.29%)</title><rect x="447.5" y="243.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.5" y="254.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (2 samples, 0.29%)</title><rect x="447.5" y="227.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="450.5" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (2 samples, 0.29%)</title><rect x="447.5" y="211.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.5" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (1 samples, 0.15%)</title><rect x="449.3" y="195.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.3" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (1 samples, 0.15%)</title><rect x="449.3" y="179.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.3" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.15%)</title><rect x="449.3" y="163.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="452.3" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.15%)</title><rect x="449.3" y="147.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.3" y="158.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$105/2098105718.get$Lambda (1 samples, 0.15%)</title><rect x="449.3" y="131.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.3" y="142.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.15%)</title><rect x="449.3" y="115.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="452.3" y="126.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.15%)</title><rect x="449.3" y="99.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="452.3" y="110.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.15%)</title><rect x="449.3" y="83.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="452.3" y="94.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.15%)</title><rect x="449.3" y="67.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="452.3" y="78.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.15%)</title><rect x="449.3" y="51.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="452.3" y="62.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.15%)</title><rect x="449.3" y="35.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="452.3" y="46.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.29%)</title><rect x="451.0" y="259.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="454.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (1 samples, 0.15%)</title><rect x="452.7" y="243.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="455.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.15%)</title><rect x="454.4" y="259.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.15%)</title><rect x="454.4" y="243.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.15%)</title><rect x="454.4" y="227.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="457.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (22 samples, 3.21%)</title><rect x="456.2" y="259.0" width="37.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="459.2" y="270.0">ru/..</text>
</g>
<g>
<title>java/util/Collection.stream (22 samples, 3.21%)</title><rect x="456.2" y="243.0" width="37.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="459.2" y="254.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (22 samples, 3.21%)</title><rect x="456.2" y="227.0" width="37.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="459.2" y="238.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (22 samples, 3.21%)</title><rect x="456.2" y="211.0" width="37.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.2" y="222.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (22 samples, 3.21%)</title><rect x="456.2" y="195.0" width="37.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.2" y="206.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.15%)</title><rect x="457.9" y="179.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (1 samples, 0.15%)</title><rect x="459.6" y="179.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="462.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.15%)</title><rect x="459.6" y="163.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="462.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.15%)</title><rect x="459.6" y="147.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="462.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.15%)</title><rect x="459.6" y="131.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="462.6" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.15%)</title><rect x="459.6" y="115.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.6" y="126.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.15%)</title><rect x="459.6" y="99.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="462.6" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="459.6" y="83.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="462.6" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.15%)</title><rect x="459.6" y="67.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="462.6" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (19 samples, 2.77%)</title><rect x="461.3" y="179.0" width="32.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.3" y="190.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (18 samples, 2.63%)</title><rect x="463.1" y="163.0" width="31.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.1" y="174.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.15%)</title><rect x="463.1" y="147.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="466.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.15%)</title><rect x="463.1" y="131.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="466.1" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.15%)</title><rect x="463.1" y="115.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="466.1" y="126.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.15%)</title><rect x="463.1" y="99.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="466.1" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="463.1" y="83.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="466.1" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.15%)</title><rect x="463.1" y="67.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="466.1" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (17 samples, 2.48%)</title><rect x="464.8" y="147.0" width="29.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.8" y="158.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (6 samples, 0.88%)</title><rect x="483.7" y="131.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="486.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.73%)</title><rect x="485.4" y="115.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.4" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.73%)</title><rect x="485.4" y="99.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.4" y="110.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.73%)</title><rect x="485.4" y="83.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="488.4" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.58%)</title><rect x="487.2" y="67.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.2" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.58%)</title><rect x="487.2" y="51.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.2" y="62.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.29%)</title><rect x="490.6" y="35.0" width="3.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="493.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Value.getData (1 samples, 0.15%)</title><rect x="494.1" y="291.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.1" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.15%)</title><rect x="494.1" y="275.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="497.1" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.15%)</title><rect x="494.1" y="259.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="497.1" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="494.1" y="243.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="497.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="494.1" y="227.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.1" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="494.1" y="211.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="497.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.15%)</title><rect x="494.1" y="195.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ByteBufferUtils.getByteBufferKey (3 samples, 0.44%)</title><rect x="495.8" y="291.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="498.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.15%)</title><rect x="495.8" y="275.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="498.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.15%)</title><rect x="495.8" y="259.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.8" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.15%)</title><rect x="495.8" y="243.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.8" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.15%)</title><rect x="495.8" y="227.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="498.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.29%)</title><rect x="497.5" y="275.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.29%)</title><rect x="497.5" y="259.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="500.5" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.29%)</title><rect x="497.5" y="243.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.29%)</title><rect x="497.5" y="227.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="500.5" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="499.2" y="211.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponses (112 samples, 16.35%)</title><rect x="500.9" y="307.0" width="193.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.9" y="318.0">ru/mail/polis/service/re1..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.proxy (110 samples, 16.06%)</title><rect x="504.4" y="291.0" width="189.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="507.4" y="302.0">ru/mail/polis/service/re1..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (109 samples, 15.91%)</title><rect x="506.1" y="275.0" width="187.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="509.1" y="286.0">one/nio/http/HttpClient...</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (107 samples, 15.62%)</title><rect x="509.6" y="259.0" width="184.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="512.6" y="270.0">one/nio/http/HttpClient...</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (43 samples, 6.28%)</title><rect x="511.3" y="243.0" width="74.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="514.3" y="254.0">one/nio/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.44%)</title><rect x="516.5" y="227.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="519.5" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.15%)</title><rect x="516.5" y="211.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="519.5" y="222.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.29%)</title><rect x="518.2" y="211.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="521.2" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.29%)</title><rect x="518.2" y="195.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="521.2" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.29%)</title><rect x="518.2" y="179.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="521.2" y="190.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.15%)</title><rect x="518.2" y="163.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="521.2" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.15%)</title><rect x="519.9" y="163.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="522.9" y="174.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.15%)</title><rect x="519.9" y="147.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="522.9" y="158.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.15%)</title><rect x="521.6" y="227.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="524.6" y="238.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.15%)</title><rect x="521.6" y="211.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="524.6" y="222.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (35 samples, 5.11%)</title><rect x="523.3" y="227.0" width="60.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="526.3" y="238.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (17 samples, 2.48%)</title><rect x="528.5" y="211.0" width="29.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="531.5" y="222.0">Ja..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.15%)</title><rect x="533.7" y="195.0" width="1.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="536.7" y="206.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.29%)</title><rect x="535.4" y="195.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="538.4" y="206.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.15%)</title><rect x="538.8" y="195.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="541.8" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.29%)</title><rect x="540.6" y="195.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="543.6" y="206.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.15%)</title><rect x="544.0" y="195.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="547.0" y="206.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 1.02%)</title><rect x="545.7" y="195.0" width="12.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="548.7" y="206.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.29%)</title><rect x="549.2" y="179.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="552.2" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.44%)</title><rect x="552.6" y="179.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="555.6" y="190.0"></text>
</g>
<g>
<title>recv (15 samples, 2.19%)</title><rect x="557.8" y="211.0" width="25.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="560.8" y="222.0">r..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1 samples, 0.15%)</title><rect x="583.6" y="227.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.6" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (16 samples, 2.34%)</title><rect x="585.4" y="243.0" width="27.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="588.4" y="254.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (8 samples, 1.17%)</title><rect x="587.1" y="227.0" width="13.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="590.1" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 1.17%)</title><rect x="587.1" y="211.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="590.1" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.88%)</title><rect x="590.5" y="195.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.5" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (7 samples, 1.02%)</title><rect x="600.9" y="227.0" width="12.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="603.9" y="238.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.29%)</title><rect x="609.5" y="211.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="612.5" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.29%)</title><rect x="609.5" y="195.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="612.5" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (8 samples, 1.17%)</title><rect x="612.9" y="243.0" width="13.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="615.9" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.15%)</title><rect x="616.4" y="227.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.4" y="238.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.73%)</title><rect x="618.1" y="227.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="621.1" y="238.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.15%)</title><rect x="618.1" y="211.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.1" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.15%)</title><rect x="618.1" y="195.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="621.1" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.58%)</title><rect x="619.8" y="211.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="622.8" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.58%)</title><rect x="619.8" y="195.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="622.8" y="206.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.15%)</title><rect x="619.8" y="179.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.8" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.44%)</title><rect x="621.5" y="179.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="624.5" y="190.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.15%)</title><rect x="625.0" y="163.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="628.0" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.58%)</title><rect x="626.7" y="243.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.29%)</title><rect x="630.1" y="227.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.1" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.29%)</title><rect x="630.1" y="211.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="633.1" y="222.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.15%)</title><rect x="633.6" y="243.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.6" y="254.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (13 samples, 1.90%)</title><rect x="635.3" y="243.0" width="22.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.3" y="254.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (2 samples, 0.29%)</title><rect x="642.2" y="227.0" width="3.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="645.2" y="238.0"></text>
</g>
<g>
<title>setsockopt (7 samples, 1.02%)</title><rect x="645.6" y="227.0" width="12.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="648.6" y="238.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (19 samples, 2.77%)</title><rect x="657.7" y="243.0" width="32.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.7" y="254.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (11 samples, 1.61%)</title><rect x="661.2" y="227.0" width="18.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="664.2" y="238.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.15%)</title><rect x="666.3" y="211.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="669.3" y="222.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.15%)</title><rect x="668.0" y="211.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="671.0" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.73%)</title><rect x="669.8" y="211.0" width="8.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="672.8" y="222.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.15%)</title><rect x="673.2" y="195.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="676.2" y="206.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.15%)</title><rect x="674.9" y="195.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="677.9" y="206.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.15%)</title><rect x="676.7" y="195.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="679.7" y="206.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.15%)</title><rect x="678.4" y="211.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="681.4" y="222.0"></text>
</g>
<g>
<title>__send (5 samples, 0.73%)</title><rect x="680.1" y="227.0" width="8.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="683.1" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.15%)</title><rect x="688.7" y="227.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="691.7" y="238.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (2 samples, 0.29%)</title><rect x="690.4" y="243.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="693.4" y="254.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (2 samples, 0.29%)</title><rect x="690.4" y="227.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="693.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (15 samples, 2.19%)</title><rect x="693.9" y="307.0" width="25.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="696.9" y="318.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15 samples, 2.19%)</title><rect x="693.9" y="291.0" width="25.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="696.9" y="302.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.15%)</title><rect x="695.6" y="275.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="698.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.15%)</title><rect x="695.6" y="259.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="698.6" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.15%)</title><rect x="695.6" y="243.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="698.6" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.15%)</title><rect x="695.6" y="227.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="698.6" y="238.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.15%)</title><rect x="695.6" y="211.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="698.6" y="222.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.15%)</title><rect x="695.6" y="195.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="698.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13 samples, 1.90%)</title><rect x="697.3" y="275.0" width="22.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="700.3" y="286.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.88%)</title><rect x="697.3" y="259.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="700.3" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.15%)</title><rect x="700.8" y="243.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="703.8" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.15%)</title><rect x="700.8" y="227.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="703.8" y="238.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.44%)</title><rect x="702.5" y="243.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="705.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.44%)</title><rect x="702.5" y="227.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="705.5" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.44%)</title><rect x="702.5" y="211.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="705.5" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.29%)</title><rect x="704.2" y="195.0" width="3.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="707.2" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 1.02%)</title><rect x="707.7" y="259.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="710.7" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 1.02%)</title><rect x="707.7" y="243.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="710.7" y="254.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.15%)</title><rect x="707.7" y="227.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="710.7" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 0.88%)</title><rect x="709.4" y="227.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="712.4" y="238.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (6 samples, 0.88%)</title><rect x="709.4" y="211.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="712.4" y="222.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (3 samples, 0.44%)</title><rect x="711.1" y="195.0" width="5.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="714.1" y="206.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.29%)</title><rect x="712.8" y="179.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="715.8" y="190.0"></text>
</g>
<g>
<title>__send (2 samples, 0.29%)</title><rect x="716.3" y="195.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="719.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.mergeGetResponses (7 samples, 1.02%)</title><rect x="719.7" y="307.0" width="12.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="722.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.44%)</title><rect x="719.7" y="291.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="722.7" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.44%)</title><rect x="724.9" y="291.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="727.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.29%)</title><rect x="726.6" y="275.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.29%)</title><rect x="726.6" y="259.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.6" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (1 samples, 0.15%)</title><rect x="730.1" y="291.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="733.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.15%)</title><rect x="730.1" y="275.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="733.1" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.15%)</title><rect x="730.1" y="259.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="733.1" y="270.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (179 samples, 26.13%)</title><rect x="731.8" y="403.0" width="308.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.8" y="414.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>[unknown] (1 samples, 0.15%)</title><rect x="735.2" y="387.0" width="1.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="738.2" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.15%)</title><rect x="735.2" y="371.0" width="1.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="738.2" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.15%)</title><rect x="735.2" y="355.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="738.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.44%)</title><rect x="736.9" y="387.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="739.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.15%)</title><rect x="742.1" y="387.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="745.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.15%)</title><rect x="743.8" y="387.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="746.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (60 samples, 8.76%)</title><rect x="745.6" y="387.0" width="103.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="748.6" y="398.0">one/nio/net/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.15%)</title><rect x="752.5" y="371.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="755.5" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.15%)</title><rect x="752.5" y="355.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="755.5" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.15%)</title><rect x="752.5" y="339.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="755.5" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.15%)</title><rect x="752.5" y="323.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="755.5" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.15%)</title><rect x="752.5" y="307.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="755.5" y="318.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.15%)</title><rect x="752.5" y="291.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="755.5" y="302.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (55 samples, 8.03%)</title><rect x="754.2" y="371.0" width="94.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="757.2" y="382.0">one/nio/net..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.58%)</title><rect x="761.1" y="355.0" width="6.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="764.1" y="366.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 0.88%)</title><rect x="768.0" y="355.0" width="10.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="771.0" y="366.0"></text>
</g>
<g>
<title>clock_gettime (20 samples, 2.92%)</title><rect x="778.3" y="355.0" width="34.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="781.3" y="366.0">cl..</text>
</g>
<g>
<title>clock_gettime (3 samples, 0.44%)</title><rect x="807.6" y="339.0" width="5.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="810.6" y="350.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.44%)</title><rect x="807.6" y="323.0" width="5.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="810.6" y="334.0"></text>
</g>
<g>
<title>clock_gettime@plt (2 samples, 0.29%)</title><rect x="812.7" y="355.0" width="3.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="815.7" y="366.0"></text>
</g>
<g>
<title>epoll_wait (19 samples, 2.77%)</title><rect x="816.2" y="355.0" width="32.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="819.2" y="366.0">ep..</text>
</g>
<g>
<title>one/nio/net/Session.process (110 samples, 16.06%)</title><rect x="848.9" y="387.0" width="189.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="851.9" y="398.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (104 samples, 15.18%)</title><rect x="857.5" y="371.0" width="179.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="860.5" y="382.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (73 samples, 10.66%)</title><rect x="859.3" y="355.0" width="125.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="862.3" y="366.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (45 samples, 6.57%)</title><rect x="871.3" y="339.0" width="77.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.3" y="350.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (45 samples, 6.57%)</title><rect x="871.3" y="323.0" width="77.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="874.3" y="334.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler1_handleRequest.handleRequest (32 samples, 4.67%)</title><rect x="873.0" y="307.0" width="55.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="876.0" y="318.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (7 samples, 1.02%)</title><rect x="873.0" y="291.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="876.0" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 1.02%)</title><rect x="873.0" y="275.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="876.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.15%)</title><rect x="874.8" y="259.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="877.8" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.15%)</title><rect x="874.8" y="243.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="877.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.29%)</title><rect x="876.5" y="259.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="879.5" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.29%)</title><rect x="876.5" y="243.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="879.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.15%)</title><rect x="878.2" y="227.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="881.2" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.15%)</title><rect x="879.9" y="259.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="882.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.29%)</title><rect x="881.6" y="259.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="884.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.handleRequest (25 samples, 3.65%)</title><rect x="885.1" y="291.0" width="43.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="888.1" y="302.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/842951970.linkToTargetMethod (1 samples, 0.15%)</title><rect x="885.1" y="275.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="888.1" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.15%)</title><rect x="885.1" y="259.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="888.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService$$Lambda$67/906100538.get$Lambda (1 samples, 0.15%)</title><rect x="885.1" y="243.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="888.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.15%)</title><rect x="885.1" y="227.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="888.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseAsyncService.executeTask (24 samples, 3.50%)</title><rect x="886.8" y="275.0" width="41.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="889.8" y="286.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (24 samples, 3.50%)</title><rect x="886.8" y="259.0" width="41.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="889.8" y="270.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (23 samples, 3.36%)</title><rect x="888.5" y="243.0" width="39.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="891.5" y="254.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.29%)</title><rect x="888.5" y="227.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="891.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.29%)</title><rect x="888.5" y="211.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="891.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.29%)</title><rect x="888.5" y="195.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="891.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.29%)</title><rect x="888.5" y="179.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="891.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.29%)</title><rect x="888.5" y="163.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="891.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.15%)</title><rect x="892.0" y="227.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="895.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.15%)</title><rect x="892.0" y="211.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="895.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.15%)</title><rect x="892.0" y="195.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="895.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 2.92%)</title><rect x="893.7" y="227.0" width="34.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="896.7" y="238.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 2.92%)</title><rect x="893.7" y="211.0" width="34.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="896.7" y="222.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 2.92%)</title><rect x="893.7" y="195.0" width="34.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="896.7" y="206.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 2.92%)</title><rect x="893.7" y="179.0" width="34.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="896.7" y="190.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.15%)</title><rect x="895.4" y="163.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="898.4" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (18 samples, 2.63%)</title><rect x="897.2" y="163.0" width="31.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="900.2" y="174.0">jd..</text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.15%)</title><rect x="898.9" y="147.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="901.9" y="158.0"></text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 1.17%)</title><rect x="900.6" y="147.0" width="13.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="903.6" y="158.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.15%)</title><rect x="904.0" y="131.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="907.0" y="142.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.15%)</title><rect x="905.8" y="131.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="908.8" y="142.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.15%)</title><rect x="907.5" y="131.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="910.5" y="142.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.15%)</title><rect x="909.2" y="131.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.2" y="142.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.29%)</title><rect x="910.9" y="131.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="913.9" y="142.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.15%)</title><rect x="914.4" y="147.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="917.4" y="158.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.15%)</title><rect x="914.4" y="131.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="917.4" y="142.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 1.02%)</title><rect x="916.1" y="147.0" width="12.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="919.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 1.02%)</title><rect x="928.2" y="307.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="931.2" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 1.02%)</title><rect x="928.2" y="291.0" width="12.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="931.2" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.44%)</title><rect x="928.2" y="275.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="931.2" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.58%)</title><rect x="933.3" y="275.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="936.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.58%)</title><rect x="933.3" y="259.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="936.3" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.58%)</title><rect x="933.3" y="243.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="936.3" y="254.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.15%)</title><rect x="938.5" y="227.0" width="1.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="941.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (5 samples, 0.73%)</title><rect x="940.2" y="307.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="943.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.73%)</title><rect x="940.2" y="291.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.2" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.73%)</title><rect x="940.2" y="275.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.2" y="286.0"></text>
</g>
<g>
<title>RequestHandler1_handleRequest.handleRequest (3 samples, 0.44%)</title><rect x="940.2" y="259.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="943.2" y="270.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.15%)</title><rect x="945.4" y="259.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="948.4" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.15%)</title><rect x="947.1" y="259.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="950.1" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.15%)</title><rect x="947.1" y="243.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="950.1" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.15%)</title><rect x="947.1" y="227.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="950.1" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.15%)</title><rect x="947.1" y="211.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="950.1" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.15%)</title><rect x="947.1" y="195.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.1" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.15%)</title><rect x="947.1" y="179.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="950.1" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (12 samples, 1.75%)</title><rect x="948.8" y="339.0" width="20.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="951.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.73%)</title><rect x="952.3" y="323.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="955.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.73%)</title><rect x="952.3" y="307.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="955.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.73%)</title><rect x="960.9" y="323.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="963.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.58%)</title><rect x="969.5" y="339.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="972.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.15%)</title><rect x="974.7" y="323.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="977.7" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.15%)</title><rect x="974.7" y="307.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="977.7" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.73%)</title><rect x="976.4" y="339.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="979.4" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.73%)</title><rect x="976.4" y="323.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="979.4" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.15%)</title><rect x="981.6" y="307.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="984.6" y="318.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.15%)</title><rect x="981.6" y="291.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.6" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.15%)</title><rect x="981.6" y="275.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.6" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.15%)</title><rect x="981.6" y="259.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="984.6" y="270.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.15%)</title><rect x="983.3" y="307.0" width="1.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="986.3" y="318.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.15%)</title><rect x="983.3" y="291.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="986.3" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (30 samples, 4.38%)</title><rect x="985.0" y="355.0" width="51.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="988.0" y="366.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (29 samples, 4.23%)</title><rect x="986.7" y="339.0" width="50.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="989.7" y="350.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (11 samples, 1.61%)</title><rect x="990.2" y="323.0" width="18.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="993.2" y="334.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.15%)</title><rect x="993.6" y="307.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="996.6" y="318.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.15%)</title><rect x="995.3" y="307.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.3" y="318.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.73%)</title><rect x="997.1" y="307.0" width="8.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1000.1" y="318.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.15%)</title><rect x="1000.5" y="291.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1003.5" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.15%)</title><rect x="1002.2" y="291.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.2" y="302.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.15%)</title><rect x="1004.0" y="291.0" width="1.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1007.0" y="302.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.29%)</title><rect x="1005.7" y="307.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.7" y="318.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.44%)</title><rect x="1009.1" y="323.0" width="5.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1012.1" y="334.0"></text>
</g>
<g>
<title>recv (13 samples, 1.90%)</title><rect x="1014.3" y="323.0" width="22.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1017.3" y="334.0">r..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.15%)</title><rect x="1036.7" y="371.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1039.7" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.15%)</title><rect x="1038.4" y="387.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1041.4" y="398.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.15%)</title><rect x="1038.4" y="371.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1041.4" y="382.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.15%)</title><rect x="1038.4" y="355.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1041.4" y="366.0"></text>
</g>
<g>
<title>start_thread (87 samples, 12.70%)</title><rect x="1040.1" y="403.0" width="149.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1043.1" y="414.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (87 samples, 12.70%)</title><rect x="1040.1" y="387.0" width="149.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1043.1" y="398.0">thread_native_entry..</text>
</g>
<g>
<title>Thread::call_run() (87 samples, 12.70%)</title><rect x="1040.1" y="371.0" width="149.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1043.1" y="382.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (87 samples, 12.70%)</title><rect x="1040.1" y="355.0" width="149.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1043.1" y="366.0">GangWorker::loop()</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (66 samples, 9.64%)</title><rect x="1040.1" y="339.0" width="113.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1043.1" y="350.0">G1CMConcurrent..</text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (66 samples, 9.64%)</title><rect x="1040.1" y="323.0" width="113.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.1" y="334.0">G1CMTask::do_m..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.98] (2 samples, 0.29%)</title><rect x="1041.9" y="307.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1044.9" y="318.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (46 samples, 6.72%)</title><rect x="1045.3" y="307.0" width="79.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.3" y="318.0">G1CMBitMa..</text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.395] (1 samples, 0.15%)</title><rect x="1045.3" y="291.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1048.3" y="302.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (1 samples, 0.15%)</title><rect x="1045.3" y="275.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.3" y="286.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.15%)</title><rect x="1045.3" y="259.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.3" y="270.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.15%)</title><rect x="1045.3" y="243.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1048.3" y="254.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.15%)</title><rect x="1045.3" y="227.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1048.3" y="238.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (35 samples, 5.11%)</title><rect x="1047.0" y="291.0" width="60.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.0" y="302.0">G1CMTa..</text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (29 samples, 4.23%)</title><rect x="1057.4" y="275.0" width="49.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.4" y="286.0">void ..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.15%)</title><rect x="1059.1" y="259.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.1" y="270.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (26 samples, 3.80%)</title><rect x="1060.8" y="259.0" width="44.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1063.8" y="270.0">void..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (17 samples, 2.48%)</title><rect x="1067.7" y="243.0" width="29.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.7" y="254.0">G1..</text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.15%)</title><rect x="1095.3" y="227.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.3" y="238.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.15%)</title><rect x="1097.0" y="243.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1100.0" y="254.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (4 samples, 0.58%)</title><rect x="1098.7" y="243.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.7" y="254.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.15%)</title><rect x="1105.6" y="259.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.6" y="270.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.15%)</title><rect x="1105.6" y="243.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.6" y="254.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.15%)</title><rect x="1107.3" y="291.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.3" y="302.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (8 samples, 1.17%)</title><rect x="1109.0" y="291.0" width="13.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.0" y="302.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.15%)</title><rect x="1110.8" y="275.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.8" y="286.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (5 samples, 0.73%)</title><rect x="1112.5" y="275.0" width="8.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.5" y="286.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (5 samples, 0.73%)</title><rect x="1112.5" y="259.0" width="8.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.5" y="270.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.15%)</title><rect x="1119.4" y="243.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.4" y="254.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.15%)</title><rect x="1121.1" y="275.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.1" y="286.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;TypeArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.15%)</title><rect x="1122.8" y="291.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.8" y="302.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) (2 samples, 0.29%)</title><rect x="1124.5" y="307.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.5" y="318.0"></text>
</g>
<g>
<title>G1CMTask::get_entries_from_global_stack() (2 samples, 0.29%)</title><rect x="1124.5" y="291.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.5" y="302.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.29%)</title><rect x="1124.5" y="275.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.5" y="286.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (15 samples, 2.19%)</title><rect x="1128.0" y="307.0" width="25.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.0" y="318.0">G..</text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (14 samples, 2.04%)</title><rect x="1129.7" y="291.0" width="24.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.7" y="302.0">v..</text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.15%)</title><rect x="1133.2" y="275.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.2" y="286.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (11 samples, 1.61%)</title><rect x="1134.9" y="275.0" width="18.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.9" y="286.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (9 samples, 1.31%)</title><rect x="1138.3" y="259.0" width="15.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.3" y="270.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (21 samples, 3.07%)</title><rect x="1153.8" y="339.0" width="36.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.8" y="350.0">G1R..</text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (21 samples, 3.07%)</title><rect x="1153.8" y="323.0" width="36.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.8" y="334.0">Hea..</text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (20 samples, 2.92%)</title><rect x="1153.8" y="307.0" width="34.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.8" y="318.0">G1..</text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (1 samples, 0.15%)</title><rect x="1172.8" y="291.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.8" y="302.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.15%)</title><rect x="1172.8" y="275.0" width="1.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1175.8" y="286.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (8 samples, 1.17%)</title><rect x="1174.5" y="291.0" width="13.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="302.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.234] (4 samples, 0.58%)</title><rect x="1181.4" y="275.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="286.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;TypeArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.15%)</title><rect x="1188.3" y="307.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="318.0"></text>
</g>
</g>
</svg>
