<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="373"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="373"> </text>
<g id="frames">
<g>
<title>all (611 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="350.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.33%)</title><rect x="10.0" y="323.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.33%)</title><rect x="10.0" y="307.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.33%)</title><rect x="10.0" y="291.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.16%)</title><rect x="10.0" y="275.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.16%)</title><rect x="11.9" y="275.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.9" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.run (389 samples, 63.67%)</title><rect x="13.9" y="323.0" width="751.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.9" y="334.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (389 samples, 63.67%)</title><rect x="13.9" y="307.0" width="751.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.9" y="318.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (389 samples, 63.67%)</title><rect x="13.9" y="291.0" width="751.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.9" y="302.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.49%)</title><rect x="19.7" y="275.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.7" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.49%)</title><rect x="19.7" y="259.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.7" y="270.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.49%)</title><rect x="19.7" y="243.0" width="5.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="22.7" y="254.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.16%)</title><rect x="19.7" y="227.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="22.7" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.16%)</title><rect x="21.6" y="227.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.6" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.16%)</title><rect x="23.5" y="227.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.16%)</title><rect x="25.5" y="275.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.16%)</title><rect x="25.5" y="259.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.16%)</title><rect x="25.5" y="243.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.65%)</title><rect x="27.4" y="275.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.16%)</title><rect x="31.2" y="259.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.16%)</title><rect x="31.2" y="243.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="34.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.16%)</title><rect x="33.2" y="259.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.16%)</title><rect x="33.2" y="243.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="36.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.16%)</title><rect x="33.2" y="227.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="36.2" y="238.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.16%)</title><rect x="33.2" y="211.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="36.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (119 samples, 19.48%)</title><rect x="35.1" y="275.0" width="229.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.1" y="286.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (119 samples, 19.48%)</title><rect x="35.1" y="259.0" width="229.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="38.1" y="270.0">java/util/concurrent/ArrayBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (104 samples, 17.02%)</title><rect x="37.0" y="243.0" width="200.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.0" y="254.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.16%)</title><rect x="44.8" y="227.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.8" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.16%)</title><rect x="44.8" y="211.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="47.8" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.16%)</title><rect x="44.8" y="195.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="47.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.16%)</title><rect x="46.7" y="227.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.7" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.16%)</title><rect x="46.7" y="211.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.49%)</title><rect x="48.6" y="227.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="51.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.82%)</title><rect x="54.4" y="227.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.82%)</title><rect x="54.4" y="211.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (90 samples, 14.73%)</title><rect x="64.1" y="227.0" width="173.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="67.1" y="238.0">java/util/concurrent/l..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (88 samples, 14.40%)</title><rect x="67.9" y="211.0" width="170.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.9" y="222.0">jdk/internal/misc/Unsa..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.16%)</title><rect x="71.8" y="195.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="74.8" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.16%)</title><rect x="73.7" y="195.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="76.7" y="206.0"></text>
</g>
<g>
<title>Unsafe_Park (54 samples, 8.84%)</title><rect x="75.7" y="195.0" width="104.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="78.7" y="206.0">Unsafe_Park</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.33%)</title><rect x="79.5" y="179.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="82.5" y="190.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 3.76%)</title><rect x="83.4" y="179.0" width="44.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="86.4" y="190.0">Park..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.33%)</title><rect x="98.8" y="163.0" width="3.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="101.8" y="174.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.82%)</title><rect x="102.7" y="163.0" width="9.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="105.7" y="174.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (3 samples, 0.49%)</title><rect x="106.6" y="147.0" width="5.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="109.6" y="158.0"></text>
</g>
<g>
<title>__tls_get_addr (8 samples, 1.31%)</title><rect x="112.4" y="163.0" width="15.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="115.4" y="174.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.16%)</title><rect x="127.8" y="179.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="130.8" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.16%)</title><rect x="129.7" y="179.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="132.7" y="190.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.16%)</title><rect x="131.7" y="179.0" width="1.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="134.7" y="190.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (22 samples, 3.60%)</title><rect x="133.6" y="179.0" width="42.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="136.6" y="190.0">__pt..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.16%)</title><rect x="176.1" y="179.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="179.1" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (1 samples, 0.16%)</title><rect x="178.0" y="179.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="181.0" y="190.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 4.58%)</title><rect x="180.0" y="195.0" width="54.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="183.0" y="206.0">[unkn..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (8 samples, 1.31%)</title><rect x="180.0" y="179.0" width="15.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="183.0" y="190.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.16%)</title><rect x="195.4" y="179.0" width="1.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="198.4" y="190.0"></text>
</g>
<g>
<title>__pthread_cond_wait (14 samples, 2.29%)</title><rect x="197.3" y="179.0" width="27.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="200.3" y="190.0">_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.33%)</title><rect x="224.4" y="179.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="227.4" y="190.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.16%)</title><rect x="228.2" y="179.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="231.2" y="190.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.16%)</title><rect x="230.2" y="179.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="233.2" y="190.0"></text>
</g>
<g>
<title>_pthread_cleanup_pop (1 samples, 0.16%)</title><rect x="232.1" y="179.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="235.1" y="190.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.33%)</title><rect x="234.0" y="195.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="237.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.16%)</title><rect x="237.9" y="243.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.16%)</title><rect x="237.9" y="227.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.16%)</title><rect x="237.9" y="211.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.16%)</title><rect x="237.9" y="195.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.16%)</title><rect x="237.9" y="179.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.9" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.16%)</title><rect x="237.9" y="163.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.9" y="174.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.16%)</title><rect x="237.9" y="147.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="240.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 2.13%)</title><rect x="239.8" y="243.0" width="25.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.8" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 2.13%)</title><rect x="239.8" y="227.0" width="25.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.8" y="238.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 2.13%)</title><rect x="239.8" y="211.0" width="25.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.8" y="222.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 2.13%)</title><rect x="239.8" y="195.0" width="25.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="242.8" y="206.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 1.64%)</title><rect x="245.6" y="179.0" width="19.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.6" y="190.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.16%)</title><rect x="245.6" y="163.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="248.6" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.16%)</title><rect x="247.5" y="163.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="250.5" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.49%)</title><rect x="249.5" y="163.0" width="5.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="252.5" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.16%)</title><rect x="249.5" y="147.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="252.5" y="158.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.16%)</title><rect x="251.4" y="147.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="254.4" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.16%)</title><rect x="253.3" y="147.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="256.3" y="158.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.82%)</title><rect x="255.3" y="163.0" width="9.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="258.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService$$Lambda$67/906100538.run (259 samples, 42.39%)</title><rect x="264.9" y="275.0" width="500.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.9" y="286.0">ru/mail/polis/service/re1nex/AsyncTopologyReplicaService$$Lambda$67/9..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.lambda$handleRequest$0 (259 samples, 42.39%)</title><rect x="264.9" y="259.0" width="500.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.9" y="270.0">ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.lambda$handl..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.98%)</title><rect x="268.8" y="243.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.49%)</title><rect x="274.6" y="227.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.6" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.49%)</title><rect x="274.6" y="211.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendProxy (74 samples, 12.11%)</title><rect x="280.4" y="243.0" width="142.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.4" y="254.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.put (49 samples, 8.02%)</title><rect x="280.4" y="227.0" width="94.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.4" y="238.0">ru/mail/pol..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.16%)</title><rect x="280.4" y="211.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.4" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.16%)</title><rect x="280.4" y="195.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="283.4" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.16%)</title><rect x="280.4" y="179.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="283.4" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.16%)</title><rect x="280.4" y="163.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="283.4" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.16%)</title><rect x="280.4" y="147.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="283.4" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.16%)</title><rect x="280.4" y="131.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="283.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (48 samples, 7.86%)</title><rect x="282.3" y="211.0" width="92.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.3" y="222.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.16%)</title><rect x="282.3" y="195.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.16%)</title><rect x="282.3" y="179.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.16%)</title><rect x="282.3" y="163.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.3" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (1 samples, 0.16%)</title><rect x="282.3" y="147.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.3" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.16%)</title><rect x="282.3" y="131.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="285.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (47 samples, 7.69%)</title><rect x="284.2" y="195.0" width="90.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.2" y="206.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.16%)</title><rect x="284.2" y="179.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="287.2" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.16%)</title><rect x="284.2" y="163.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="287.2" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.16%)</title><rect x="284.2" y="147.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="287.2" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.16%)</title><rect x="284.2" y="131.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="287.2" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.16%)</title><rect x="284.2" y="115.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="287.2" y="126.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.16%)</title><rect x="284.2" y="99.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="287.2" y="110.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.16%)</title><rect x="284.2" y="83.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="287.2" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (27 samples, 4.42%)</title><rect x="286.2" y="179.0" width="52.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.2" y="190.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (24 samples, 3.93%)</title><rect x="290.0" y="163.0" width="46.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.0" y="174.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (23 samples, 3.76%)</title><rect x="292.0" y="147.0" width="44.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.0" y="158.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 1.96%)</title><rect x="313.2" y="131.0" width="23.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.2" y="142.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 1.96%)</title><rect x="313.2" y="115.0" width="23.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.2" y="126.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (12 samples, 1.96%)</title><rect x="313.2" y="99.0" width="23.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="316.2" y="110.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 1.15%)</title><rect x="322.9" y="83.0" width="13.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.9" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (7 samples, 1.15%)</title><rect x="322.9" y="67.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="325.9" y="78.0"></text>
</g>
<g>
<title>vectorizedMismatch (3 samples, 0.49%)</title><rect x="330.6" y="51.0" width="5.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="333.6" y="62.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.16%)</title><rect x="336.4" y="163.0" width="1.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="339.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (19 samples, 3.11%)</title><rect x="338.3" y="179.0" width="36.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="341.3" y="190.0">jav..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.16%)</title><rect x="342.2" y="163.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="345.2" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.16%)</title><rect x="342.2" y="147.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="345.2" y="158.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.16%)</title><rect x="344.1" y="163.0" width="1.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="347.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (15 samples, 2.45%)</title><rect x="346.0" y="163.0" width="29.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.0" y="174.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.33%)</title><rect x="351.8" y="147.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.33%)</title><rect x="351.8" y="131.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="354.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (10 samples, 1.64%)</title><rect x="355.7" y="147.0" width="19.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.98%)</title><rect x="363.4" y="131.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.4" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.98%)</title><rect x="363.4" y="115.0" width="11.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.4" y="126.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.98%)</title><rect x="363.4" y="99.0" width="11.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.33%)</title><rect x="371.1" y="83.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="374.1" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.33%)</title><rect x="371.1" y="67.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="374.1" y="78.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.16%)</title><rect x="373.1" y="51.0" width="1.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="376.1" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (25 samples, 4.09%)</title><rect x="375.0" y="227.0" width="48.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.0" y="238.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (25 samples, 4.09%)</title><rect x="375.0" y="211.0" width="48.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="378.0" y="222.0">one/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.16%)</title><rect x="378.9" y="195.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="381.9" y="206.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.16%)</title><rect x="378.9" y="179.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="381.9" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.16%)</title><rect x="378.9" y="163.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="381.9" y="174.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.16%)</title><rect x="378.9" y="147.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="381.9" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (20 samples, 3.27%)</title><rect x="380.8" y="195.0" width="38.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="383.8" y="206.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.98%)</title><rect x="382.7" y="179.0" width="11.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="385.7" y="190.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.49%)</title><rect x="388.5" y="163.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="391.5" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.49%)</title><rect x="388.5" y="147.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.5" y="158.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.49%)</title><rect x="388.5" y="131.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="391.5" y="142.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 2.13%)</title><rect x="394.3" y="179.0" width="25.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.3" y="190.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 2.13%)</title><rect x="394.3" y="163.0" width="25.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.3" y="174.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (13 samples, 2.13%)</title><rect x="394.3" y="147.0" width="25.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="397.3" y="158.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (12 samples, 1.96%)</title><rect x="396.3" y="131.0" width="23.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="399.3" y="142.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (7 samples, 1.15%)</title><rect x="402.0" y="115.0" width="13.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="405.0" y="126.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.16%)</title><rect x="405.9" y="99.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="408.9" y="110.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.16%)</title><rect x="407.8" y="99.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="410.8" y="110.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.49%)</title><rect x="409.8" y="99.0" width="5.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="412.8" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.16%)</title><rect x="409.8" y="83.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="412.8" y="94.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.33%)</title><rect x="411.7" y="83.0" width="3.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="414.7" y="94.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.16%)</title><rect x="413.6" y="67.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="416.6" y="78.0"></text>
</g>
<g>
<title>__send (2 samples, 0.33%)</title><rect x="415.6" y="115.0" width="3.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="418.6" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.33%)</title><rect x="419.4" y="195.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="422.4" y="206.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.16%)</title><rect x="421.4" y="179.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.4" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.16%)</title><rect x="421.4" y="163.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="424.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendReplica (177 samples, 28.97%)</title><rect x="423.3" y="243.0" width="341.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.3" y="254.0">ru/mail/polis/service/re1nex/ApiController.sen..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.severalNodesForKey (21 samples, 3.44%)</title><rect x="425.2" y="227.0" width="40.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.2" y="238.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.calculateHash (8 samples, 1.31%)</title><rect x="425.2" y="211.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.2" y="222.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (2 samples, 0.33%)</title><rect x="425.2" y="195.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="428.2" y="206.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineDigest (2 samples, 0.33%)</title><rect x="425.2" y="179.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.2" y="190.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (2 samples, 0.33%)</title><rect x="425.2" y="163.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.2" y="174.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineDigest (2 samples, 0.33%)</title><rect x="425.2" y="147.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.2" y="158.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implDigest (2 samples, 0.33%)</title><rect x="425.2" y="131.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.2" y="142.0"></text>
</g>
<g>
<title>sun/security/provider/ByteArrayAccess.i2bLittle4 (1 samples, 0.16%)</title><rect x="425.2" y="115.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.2" y="126.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (1 samples, 0.16%)</title><rect x="425.2" y="99.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="428.2" y="110.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implCompress (1 samples, 0.16%)</title><rect x="427.2" y="115.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="430.2" y="126.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (6 samples, 0.98%)</title><rect x="429.1" y="195.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="432.1" y="206.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (6 samples, 0.98%)</title><rect x="429.1" y="179.0" width="11.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="432.1" y="190.0"></text>
</g>
<g>
<title>java/security/Security.getSpiClass (3 samples, 0.49%)</title><rect x="429.1" y="163.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="432.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.49%)</title><rect x="429.1" y="147.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="432.1" y="158.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.16%)</title><rect x="431.0" y="131.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="434.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.16%)</title><rect x="432.9" y="131.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.9" y="142.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (3 samples, 0.49%)</title><rect x="434.9" y="163.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="437.9" y="174.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (1 samples, 0.16%)</title><rect x="434.9" y="147.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="437.9" y="158.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (1 samples, 0.16%)</title><rect x="434.9" y="131.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="437.9" y="142.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (1 samples, 0.16%)</title><rect x="434.9" y="115.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="437.9" y="126.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (1 samples, 0.16%)</title><rect x="434.9" y="99.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="437.9" y="110.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (1 samples, 0.16%)</title><rect x="434.9" y="83.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="437.9" y="94.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (1 samples, 0.16%)</title><rect x="434.9" y="67.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.9" y="78.0"></text>
</g>
<g>
<title>java/lang/Class.reflectionData (1 samples, 0.16%)</title><rect x="434.9" y="51.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="437.9" y="62.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (2 samples, 0.33%)</title><rect x="436.8" y="147.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="439.8" y="158.0"></text>
</g>
<g>
<title>java/security/Provider.getService (2 samples, 0.33%)</title><rect x="436.8" y="131.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="439.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/ConsistentHashingTopology.getNodesFromMap (13 samples, 2.13%)</title><rect x="440.7" y="211.0" width="25.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="443.7" y="222.0">r..</text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (1 samples, 0.16%)</title><rect x="440.7" y="195.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.7" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.16%)</title><rect x="440.7" y="179.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="443.7" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.16%)</title><rect x="440.7" y="163.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="443.7" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.16%)</title><rect x="440.7" y="147.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="443.7" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.16%)</title><rect x="440.7" y="131.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="443.7" y="142.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (1 samples, 0.16%)</title><rect x="442.6" y="195.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.6" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (1 samples, 0.16%)</title><rect x="442.6" y="179.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.6" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (1 samples, 0.16%)</title><rect x="442.6" y="163.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.6" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (1 samples, 0.16%)</title><rect x="442.6" y="147.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.6" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (1 samples, 0.16%)</title><rect x="442.6" y="131.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.6" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap$ValueIterator.next (2 samples, 0.33%)</title><rect x="444.5" y="195.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="447.5" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (2 samples, 0.33%)</title><rect x="444.5" y="179.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="447.5" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (2 samples, 0.33%)</title><rect x="444.5" y="163.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="447.5" y="174.0"></text>
</g>
<g>
<title>sun/security/provider/MD5.implCompress (1 samples, 0.16%)</title><rect x="446.5" y="147.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="449.5" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap$Values.iterator (1 samples, 0.16%)</title><rect x="448.4" y="195.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.4" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.16%)</title><rect x="448.4" y="179.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="451.4" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.16%)</title><rect x="448.4" y="163.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.4" y="174.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (7 samples, 1.15%)</title><rect x="450.3" y="195.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="453.3" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (3 samples, 0.49%)</title><rect x="458.1" y="179.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.1" y="190.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.16%)</title><rect x="461.9" y="163.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.9" y="174.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.16%)</title><rect x="461.9" y="147.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.9" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.16%)</title><rect x="461.9" y="131.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.9" y="142.0"></text>
</g>
<g>
<title>java/util/TreeSet.size (1 samples, 0.16%)</title><rect x="463.8" y="195.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.handleResponses (111 samples, 18.17%)</title><rect x="465.8" y="227.0" width="214.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.8" y="238.0">ru/mail/polis/service/re1nex..</text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.16%)</title><rect x="473.5" y="211.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="476.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.proxy (106 samples, 17.35%)</title><rect x="475.4" y="211.0" width="204.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="478.4" y="222.0">ru/mail/polis/service/re1ne..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.16%)</title><rect x="475.4" y="195.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="478.4" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.16%)</title><rect x="475.4" y="179.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="478.4" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (105 samples, 17.18%)</title><rect x="477.4" y="195.0" width="202.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.4" y="206.0">one/nio/http/HttpClient.in..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (105 samples, 17.18%)</title><rect x="477.4" y="179.0" width="202.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="480.4" y="190.0">one/nio/http/HttpClient.in..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (41 samples, 6.71%)</title><rect x="479.3" y="163.0" width="79.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="482.3" y="174.0">one/nio/h..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.33%)</title><rect x="487.0" y="147.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="490.0" y="158.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.33%)</title><rect x="487.0" y="131.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="490.0" y="142.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.33%)</title><rect x="487.0" y="115.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="490.0" y="126.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.33%)</title><rect x="487.0" y="99.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="490.0" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.16%)</title><rect x="487.0" y="83.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="490.0" y="94.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.16%)</title><rect x="487.0" y="67.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="490.0" y="78.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.16%)</title><rect x="487.0" y="51.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="490.0" y="62.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.16%)</title><rect x="487.0" y="35.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="490.0" y="46.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.16%)</title><rect x="489.0" y="83.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="492.0" y="94.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.16%)</title><rect x="489.0" y="67.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="492.0" y="78.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (35 samples, 5.73%)</title><rect x="490.9" y="147.0" width="67.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="493.9" y="158.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (11 samples, 1.80%)</title><rect x="494.7" y="131.0" width="21.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="497.7" y="142.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.16%)</title><rect x="502.5" y="115.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="505.5" y="126.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.98%)</title><rect x="504.4" y="115.0" width="11.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="507.4" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.33%)</title><rect x="512.1" y="99.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="515.1" y="110.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.49%)</title><rect x="516.0" y="131.0" width="5.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="519.0" y="142.0"></text>
</g>
<g>
<title>recv (19 samples, 3.11%)</title><rect x="521.8" y="131.0" width="36.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="524.8" y="142.0">recv</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (22 samples, 3.60%)</title><rect x="558.5" y="163.0" width="42.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="561.5" y="174.0">one/..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.16%)</title><rect x="560.4" y="147.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.4" y="158.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.16%)</title><rect x="560.4" y="131.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="563.4" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.16%)</title><rect x="560.4" y="115.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.4" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.16%)</title><rect x="560.4" y="99.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="563.4" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (17 samples, 2.78%)</title><rect x="562.3" y="147.0" width="32.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="565.3" y="158.0">on..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.16%)</title><rect x="570.1" y="131.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="573.1" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 1.96%)</title><rect x="572.0" y="131.0" width="23.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="575.0" y="142.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 1.15%)</title><rect x="581.7" y="115.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="584.7" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.49%)</title><rect x="595.2" y="147.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="598.2" y="158.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.16%)</title><rect x="599.0" y="131.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="602.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.16%)</title><rect x="599.0" y="115.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="602.0" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (4 samples, 0.65%)</title><rect x="601.0" y="163.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="604.0" y="174.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.49%)</title><rect x="602.9" y="147.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.9" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.49%)</title><rect x="602.9" y="131.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="605.9" y="142.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.49%)</title><rect x="602.9" y="115.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="605.9" y="126.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.16%)</title><rect x="606.8" y="99.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="609.8" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.16%)</title><rect x="608.7" y="163.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="611.7" y="174.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (18 samples, 2.95%)</title><rect x="610.6" y="163.0" width="34.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="613.6" y="174.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (1 samples, 0.16%)</title><rect x="612.6" y="147.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="615.6" y="158.0"></text>
</g>
<g>
<title>setsockopt (16 samples, 2.62%)</title><rect x="614.5" y="147.0" width="30.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="617.5" y="158.0">se..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (15 samples, 2.45%)</title><rect x="645.4" y="163.0" width="29.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.4" y="174.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (6 samples, 0.98%)</title><rect x="649.2" y="147.0" width="11.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="652.2" y="158.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.33%)</title><rect x="651.2" y="131.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="654.2" y="142.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.33%)</title><rect x="655.0" y="131.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="658.0" y="142.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.16%)</title><rect x="657.0" y="115.0" width="1.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="660.0" y="126.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.16%)</title><rect x="658.9" y="131.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="661.9" y="142.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.16%)</title><rect x="660.8" y="147.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="663.8" y="158.0"></text>
</g>
<g>
<title>__send (6 samples, 0.98%)</title><rect x="662.8" y="147.0" width="11.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="665.8" y="158.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.16%)</title><rect x="674.4" y="163.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="677.4" y="174.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (2 samples, 0.33%)</title><rect x="676.3" y="163.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="679.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.put (29 samples, 4.75%)</title><rect x="680.1" y="227.0" width="56.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.1" y="238.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.upsert (29 samples, 4.75%)</title><rect x="680.1" y="211.0" width="56.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="683.1" y="222.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.16%)</title><rect x="680.1" y="195.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="683.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.16%)</title><rect x="680.1" y="179.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="683.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.16%)</title><rect x="680.1" y="163.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="683.1" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (1 samples, 0.16%)</title><rect x="680.1" y="147.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.upsert (28 samples, 4.58%)</title><rect x="682.1" y="195.0" width="54.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="685.1" y="206.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.containsKey (12 samples, 1.96%)</title><rect x="682.1" y="179.0" width="23.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="685.1" y="190.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (12 samples, 1.96%)</title><rect x="682.1" y="163.0" width="23.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="685.1" y="174.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.33%)</title><rect x="682.1" y="147.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="685.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (10 samples, 1.64%)</title><rect x="685.9" y="147.0" width="19.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="688.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 1.15%)</title><rect x="691.7" y="131.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="694.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 1.15%)</title><rect x="691.7" y="115.0" width="13.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.7" y="126.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 1.15%)</title><rect x="691.7" y="99.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.7" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.82%)</title><rect x="695.6" y="83.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="698.6" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.82%)</title><rect x="695.6" y="67.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="698.6" y="78.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.33%)</title><rect x="701.4" y="51.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="704.4" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (16 samples, 2.62%)</title><rect x="705.3" y="179.0" width="30.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="708.3" y="190.0">ja..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.33%)</title><rect x="707.2" y="163.0" width="3.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="710.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (1 samples, 0.16%)</title><rect x="711.0" y="163.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (12 samples, 1.96%)</title><rect x="713.0" y="163.0" width="23.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.0" y="174.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.16%)</title><rect x="714.9" y="147.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="717.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.33%)</title><rect x="716.8" y="147.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.33%)</title><rect x="716.8" y="131.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="719.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.33%)</title><rect x="716.8" y="115.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.33%)</title><rect x="716.8" y="99.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.8" y="110.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.33%)</title><rect x="716.8" y="83.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="719.8" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.33%)</title><rect x="716.8" y="67.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="719.8" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.33%)</title><rect x="716.8" y="51.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="719.8" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (8 samples, 1.31%)</title><rect x="720.7" y="147.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="723.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.82%)</title><rect x="726.5" y="131.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="729.5" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.82%)</title><rect x="726.5" y="115.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="729.5" y="126.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.82%)</title><rect x="726.5" y="99.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="729.5" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.49%)</title><rect x="730.4" y="83.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.4" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.49%)</title><rect x="730.4" y="67.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="733.4" y="78.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.16%)</title><rect x="734.2" y="51.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="737.2" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/ApiController.sendResponse (14 samples, 2.29%)</title><rect x="736.2" y="227.0" width="27.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="739.2" y="238.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (14 samples, 2.29%)</title><rect x="736.2" y="211.0" width="27.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="739.2" y="222.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.16%)</title><rect x="741.9" y="195.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="744.9" y="206.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.16%)</title><rect x="741.9" y="179.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="744.9" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.16%)</title><rect x="741.9" y="163.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="744.9" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.16%)</title><rect x="741.9" y="147.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="744.9" y="158.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.16%)</title><rect x="741.9" y="131.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="744.9" y="142.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.16%)</title><rect x="741.9" y="115.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="744.9" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (10 samples, 1.64%)</title><rect x="743.9" y="195.0" width="19.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="746.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.65%)</title><rect x="743.9" y="179.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="746.9" y="190.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.16%)</title><rect x="749.7" y="163.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="752.7" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.16%)</title><rect x="749.7" y="147.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="752.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.16%)</title><rect x="749.7" y="131.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="752.7" y="142.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.98%)</title><rect x="751.6" y="179.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="754.6" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.98%)</title><rect x="751.6" y="163.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="754.6" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 0.98%)</title><rect x="751.6" y="147.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="754.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.16%)</title><rect x="751.6" y="131.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="754.6" y="142.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (5 samples, 0.82%)</title><rect x="753.5" y="131.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="756.5" y="142.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.16%)</title><rect x="753.5" y="115.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="756.5" y="126.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.16%)</title><rect x="753.5" y="99.0" width="2.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="756.5" y="110.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.16%)</title><rect x="755.5" y="115.0" width="1.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="758.5" y="126.0"></text>
</g>
<g>
<title>__send (3 samples, 0.49%)</title><rect x="757.4" y="115.0" width="5.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="760.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MergeUtils.mergePutDeleteResponses (1 samples, 0.16%)</title><rect x="763.2" y="227.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.2" y="238.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (179 samples, 29.30%)</title><rect x="765.1" y="323.0" width="345.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="768.1" y="334.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.16%)</title><rect x="770.9" y="307.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.9" y="318.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.16%)</title><rect x="772.8" y="307.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="775.8" y="318.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.16%)</title><rect x="774.8" y="307.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="777.8" y="318.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (54 samples, 8.84%)</title><rect x="776.7" y="307.0" width="104.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="779.7" y="318.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (53 samples, 8.67%)</title><rect x="778.6" y="291.0" width="102.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="781.6" y="302.0">one/nio/net/..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.65%)</title><rect x="794.1" y="275.0" width="7.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="797.1" y="286.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (5 samples, 0.82%)</title><rect x="801.8" y="275.0" width="9.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="804.8" y="286.0"></text>
</g>
<g>
<title>clock_gettime (22 samples, 3.60%)</title><rect x="811.5" y="275.0" width="42.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="814.5" y="286.0">cloc..</text>
</g>
<g>
<title>clock_gettime (5 samples, 0.82%)</title><rect x="844.3" y="259.0" width="9.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="847.3" y="270.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.82%)</title><rect x="844.3" y="243.0" width="9.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="847.3" y="254.0"></text>
</g>
<g>
<title>epoll_wait (14 samples, 2.29%)</title><rect x="854.0" y="275.0" width="27.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="857.0" y="286.0">e..</text>
</g>
<g>
<title>one/nio/net/Session.process (118 samples, 19.31%)</title><rect x="881.0" y="307.0" width="227.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="884.0" y="318.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (115 samples, 18.82%)</title><rect x="886.8" y="291.0" width="222.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="889.8" y="302.0">one/nio/http/HttpSession.proc..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (78 samples, 12.77%)</title><rect x="886.8" y="275.0" width="150.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="889.8" y="286.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.33%)</title><rect x="894.5" y="259.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="897.5" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (54 samples, 8.84%)</title><rect x="898.4" y="259.0" width="104.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="901.4" y="270.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (53 samples, 8.67%)</title><rect x="900.3" y="243.0" width="102.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="903.3" y="254.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler1_handleRequest.handleRequest (48 samples, 7.86%)</title><rect x="900.3" y="227.0" width="92.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="903.3" y="238.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.16%)</title><rect x="900.3" y="211.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.3" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 0.33%)</title><rect x="902.2" y="211.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="905.2" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.16%)</title><rect x="904.2" y="195.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="907.2" y="206.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.16%)</title><rect x="904.2" y="179.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="907.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService.handleRequest (45 samples, 7.36%)</title><rect x="906.1" y="211.0" width="86.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="909.1" y="222.0">ru/mail/po..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/842951970.linkToTargetMethod (1 samples, 0.16%)</title><rect x="906.1" y="195.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="909.1" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.16%)</title><rect x="906.1" y="179.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="909.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/AsyncTopologyReplicaService$$Lambda$67/906100538.get$Lambda (1 samples, 0.16%)</title><rect x="906.1" y="163.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.16%)</title><rect x="906.1" y="147.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="909.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/BaseAsyncService.executeTask (44 samples, 7.20%)</title><rect x="908.0" y="195.0" width="85.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="911.0" y="206.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (42 samples, 6.87%)</title><rect x="911.9" y="179.0" width="81.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="914.9" y="190.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (42 samples, 6.87%)</title><rect x="911.9" y="163.0" width="81.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="914.9" y="174.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.16%)</title><rect x="913.8" y="147.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="916.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.16%)</title><rect x="913.8" y="131.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="916.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.16%)</title><rect x="913.8" y="115.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.8" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.16%)</title><rect x="913.8" y="99.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="916.8" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.16%)</title><rect x="913.8" y="83.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="916.8" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (40 samples, 6.55%)</title><rect x="915.8" y="147.0" width="77.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="918.8" y="158.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (40 samples, 6.55%)</title><rect x="915.8" y="131.0" width="77.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="918.8" y="142.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (40 samples, 6.55%)</title><rect x="915.8" y="115.0" width="77.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="918.8" y="126.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (40 samples, 6.55%)</title><rect x="915.8" y="99.0" width="77.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="918.8" y="110.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.33%)</title><rect x="915.8" y="83.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="918.8" y="94.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (38 samples, 6.22%)</title><rect x="919.6" y="83.0" width="73.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.6" y="94.0">jdk/inte..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.33%)</title><rect x="921.6" y="67.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="924.6" y="78.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.16%)</title><rect x="925.4" y="67.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.4" y="78.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.16%)</title><rect x="927.3" y="67.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="930.3" y="78.0"></text>
</g>
<g>
<title>Unsafe_Unpark (15 samples, 2.45%)</title><rect x="929.3" y="67.0" width="28.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="932.3" y="78.0">Un..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.16%)</title><rect x="929.3" y="51.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.3" y="62.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.16%)</title><rect x="931.2" y="51.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.2" y="62.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.16%)</title><rect x="933.1" y="51.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.1" y="62.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.65%)</title><rect x="935.1" y="51.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.1" y="62.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.16%)</title><rect x="942.8" y="51.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.8" y="62.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.16%)</title><rect x="944.7" y="51.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="947.7" y="62.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (3 samples, 0.49%)</title><rect x="946.7" y="51.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="949.7" y="62.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.49%)</title><rect x="952.5" y="51.0" width="5.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="955.5" y="62.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.33%)</title><rect x="958.2" y="67.0" width="3.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="961.2" y="78.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.33%)</title><rect x="958.2" y="51.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="961.2" y="62.0"></text>
</g>
<g>
<title>__pthread_cond_signal (11 samples, 1.80%)</title><rect x="962.1" y="67.0" width="21.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="965.1" y="78.0">_..</text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.82%)</title><rect x="983.4" y="67.0" width="9.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="986.4" y="78.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.33%)</title><rect x="993.0" y="227.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="996.0" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.33%)</title><rect x="993.0" y="211.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="996.0" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.33%)</title><rect x="993.0" y="195.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="996.0" y="206.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.33%)</title><rect x="993.0" y="179.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="996.0" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.33%)</title><rect x="993.0" y="163.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="996.0" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.49%)</title><rect x="996.9" y="227.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="999.9" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.49%)</title><rect x="996.9" y="211.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="999.9" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.49%)</title><rect x="996.9" y="195.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="999.9" y="206.0"></text>
</g>
<g>
<title>RequestHandler1_handleRequest.handleRequest (2 samples, 0.33%)</title><rect x="996.9" y="179.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="999.9" y="190.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.16%)</title><rect x="1000.7" y="179.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1003.7" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.98%)</title><rect x="1002.7" y="259.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1005.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.16%)</title><rect x="1002.7" y="243.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1005.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.16%)</title><rect x="1002.7" y="227.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1005.7" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.16%)</title><rect x="1002.7" y="211.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1005.7" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.16%)</title><rect x="1002.7" y="195.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1005.7" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.65%)</title><rect x="1004.6" y="243.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1007.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.65%)</title><rect x="1004.6" y="227.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1007.6" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.16%)</title><rect x="1012.3" y="243.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1015.3" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.16%)</title><rect x="1014.3" y="259.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1017.3" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 1.80%)</title><rect x="1016.2" y="259.0" width="21.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1019.2" y="270.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.65%)</title><rect x="1029.7" y="243.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1032.7" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (37 samples, 6.06%)</title><rect x="1037.4" y="275.0" width="71.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1040.4" y="286.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (36 samples, 5.89%)</title><rect x="1039.4" y="259.0" width="69.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1042.4" y="270.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (18 samples, 2.95%)</title><rect x="1041.3" y="243.0" width="34.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1044.3" y="254.0">Ja..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.65%)</title><rect x="1043.2" y="227.0" width="7.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1046.2" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.49%)</title><rect x="1050.9" y="227.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1053.9" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.16%)</title><rect x="1056.7" y="227.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1059.7" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.33%)</title><rect x="1058.7" y="227.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.7" y="238.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.98%)</title><rect x="1062.5" y="227.0" width="11.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1065.5" y="238.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.16%)</title><rect x="1064.5" y="211.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.5" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.33%)</title><rect x="1066.4" y="211.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.4" y="222.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.33%)</title><rect x="1070.3" y="211.0" width="3.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1073.3" y="222.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.16%)</title><rect x="1072.2" y="195.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.2" y="206.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.16%)</title><rect x="1074.1" y="227.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.1" y="238.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.16%)</title><rect x="1076.1" y="243.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1079.1" y="254.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.16%)</title><rect x="1078.0" y="243.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1081.0" y="254.0"></text>
</g>
<g>
<title>recv (15 samples, 2.45%)</title><rect x="1079.9" y="243.0" width="29.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1082.9" y="254.0">recv</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.16%)</title><rect x="1108.9" y="307.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.9" y="318.0"></text>
</g>
<g>
<title>start_thread (41 samples, 6.71%)</title><rect x="1110.8" y="323.0" width="79.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1113.8" y="334.0">start_thr..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (41 samples, 6.71%)</title><rect x="1110.8" y="307.0" width="79.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1113.8" y="318.0">thread_na..</text>
</g>
<g>
<title>Thread::call_run() (41 samples, 6.71%)</title><rect x="1110.8" y="291.0" width="79.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.8" y="302.0">Thread::c..</text>
</g>
<g>
<title>GangWorker::loop() (39 samples, 6.38%)</title><rect x="1110.8" y="275.0" width="75.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.8" y="286.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (39 samples, 6.38%)</title><rect x="1110.8" y="259.0" width="75.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.8" y="270.0">G1ParTas..</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (39 samples, 6.38%)</title><rect x="1110.8" y="243.0" width="75.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.8" y="254.0">G1RemSet..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (39 samples, 6.38%)</title><rect x="1110.8" y="227.0" width="75.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.8" y="238.0">G1RemSet..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (39 samples, 6.38%)</title><rect x="1110.8" y="211.0" width="75.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.8" y="222.0">G1Collec..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (39 samples, 6.38%)</title><rect x="1110.8" y="195.0" width="75.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.8" y="206.0">DirtyCar..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (39 samples, 6.38%)</title><rect x="1110.8" y="179.0" width="75.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.8" y="190.0">G1Refine..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.16%)</title><rect x="1112.7" y="163.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.7" y="174.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (34 samples, 5.56%)</title><rect x="1114.7" y="163.0" width="65.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.7" y="174.0">G1ParSc..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (21 samples, 3.44%)</title><rect x="1137.9" y="147.0" width="40.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.9" y="158.0">G1P..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (7 samples, 1.15%)</title><rect x="1164.9" y="131.0" width="13.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.9" y="142.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.16%)</title><rect x="1178.4" y="147.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="158.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (3 samples, 0.49%)</title><rect x="1180.3" y="163.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="174.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.33%)</title><rect x="1180.3" y="147.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="158.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.16%)</title><rect x="1182.3" y="131.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="142.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.16%)</title><rect x="1182.3" y="115.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="126.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.16%)</title><rect x="1184.2" y="147.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="158.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.33%)</title><rect x="1186.1" y="275.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="286.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.33%)</title><rect x="1186.1" y="259.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.1" y="270.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.33%)</title><rect x="1186.1" y="243.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.1" y="254.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.33%)</title><rect x="1186.1" y="227.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="238.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 0.33%)</title><rect x="1186.1" y="211.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="222.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (2 samples, 0.33%)</title><rect x="1186.1" y="195.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.1" y="206.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.16%)</title><rect x="1186.1" y="179.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="190.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.16%)</title><rect x="1186.1" y="163.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="174.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.16%)</title><rect x="1186.1" y="147.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.1" y="158.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.16%)</title><rect x="1186.1" y="131.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="142.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.16%)</title><rect x="1186.1" y="115.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.1" y="126.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.16%)</title><rect x="1186.1" y="99.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.1" y="110.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.16%)</title><rect x="1186.1" y="83.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="94.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.16%)</title><rect x="1188.1" y="179.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="190.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.16%)</title><rect x="1188.1" y="163.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.1" y="174.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.16%)</title><rect x="1188.1" y="147.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="158.0"></text>
</g>
</g>
</svg>
