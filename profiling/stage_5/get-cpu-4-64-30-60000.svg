<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="693"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="693"> </text>
<g id="frames">
<g>
<title>all (11,162 samples, 100.00%)</title><rect x="10.0" y="659.0" width="1180.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.0" y="670.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 0.05%)</title><rect x="10.2" y="643.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.2" y="654.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.04%)</title><rect x="10.8" y="643.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.8" y="654.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (10,751 samples, 96.32%)</title><rect x="11.4" y="643.0" width="1136.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.4" y="654.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (5 samples, 0.04%)</title><rect x="12.7" y="627.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.7" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (5 samples, 0.04%)</title><rect x="12.7" y="611.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.7" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (3 samples, 0.03%)</title><rect x="13.3" y="627.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.3" y="638.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (3 samples, 0.03%)</title><rect x="13.3" y="611.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (3 samples, 0.03%)</title><rect x="13.3" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (2,149 samples, 19.25%)</title><rect x="13.6" y="627.0" width="227.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.6" y="638.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.04%)</title><rect x="14.3" y="611.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.3" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (17 samples, 0.15%)</title><rect x="14.9" y="611.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2,119 samples, 18.98%)</title><rect x="16.8" y="611.0" width="224.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.8" y="622.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2,119 samples, 18.98%)</title><rect x="16.8" y="595.0" width="224.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="606.0">sun/nio/ch/SelectorImpl.lockAn..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (2,115 samples, 18.95%)</title><rect x="17.1" y="579.0" width="223.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="590.0">sun/nio/ch/KQueueSelectorImpl..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (2,006 samples, 17.97%)</title><rect x="17.6" y="563.0" width="212.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.6" y="574.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (3 samples, 0.03%)</title><rect x="28.5" y="547.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="31.5" y="558.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (13 samples, 0.12%)</title><rect x="28.8" y="547.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="31.8" y="558.0"></text>
</g>
<g>
<title>kevent (1,887 samples, 16.91%)</title><rect x="30.2" y="547.0" width="199.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="33.2" y="558.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (40 samples, 0.36%)</title><rect x="229.7" y="563.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.09%)</title><rect x="230.3" y="547.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.09%)</title><rect x="230.3" y="531.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.3" y="542.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (3 samples, 0.03%)</title><rect x="231.1" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getFilter (4 samples, 0.04%)</title><rect x="231.5" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.5" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getShort (4 samples, 0.04%)</title><rect x="231.5" y="531.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (19 samples, 0.17%)</title><rect x="231.9" y="547.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (13 samples, 0.12%)</title><rect x="231.9" y="531.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 0.12%)</title><rect x="231.9" y="515.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.11%)</title><rect x="232.0" y="499.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.04%)</title><rect x="232.2" y="483.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="235.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.04%)</title><rect x="232.6" y="483.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (4 samples, 0.04%)</title><rect x="233.4" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (10 samples, 0.09%)</title><rect x="233.9" y="563.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.9" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.03%)</title><rect x="234.6" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="237.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (41 samples, 0.37%)</title><rect x="235.0" y="563.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.0" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (41 samples, 0.37%)</title><rect x="235.0" y="547.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.0" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (5 samples, 0.04%)</title><rect x="235.0" y="531.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.0" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (34 samples, 0.30%)</title><rect x="235.5" y="531.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.5" y="542.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (33 samples, 0.30%)</title><rect x="235.5" y="515.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.5" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (33 samples, 0.30%)</title><rect x="235.5" y="499.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (4 samples, 0.04%)</title><rect x="239.3" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.3" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (4 samples, 0.04%)</title><rect x="239.3" y="547.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.3" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.04%)</title><rect x="239.3" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.3" y="542.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.04%)</title><rect x="239.3" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.3" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.04%)</title><rect x="239.3" y="499.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (9 samples, 0.08%)</title><rect x="239.7" y="563.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.7" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (8,581 samples, 76.88%)</title><rect x="240.8" y="627.0" width="907.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.8" y="638.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (8,568 samples, 76.76%)</title><rect x="241.2" y="611.0" width="905.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.2" y="622.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (8,024 samples, 71.89%)</title><rect x="243.0" y="595.0" width="848.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.0" y="606.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (7,857 samples, 70.39%)</title><rect x="247.8" y="579.0" width="830.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.8" y="590.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (7,845 samples, 70.28%)</title><rect x="249.0" y="563.0" width="829.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.0" y="574.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (7,779 samples, 69.69%)</title><rect x="249.1" y="547.0" width="822.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.1" y="558.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (31 samples, 0.28%)</title><rect x="249.1" y="531.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.04%)</title><rect x="249.7" y="515.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="252.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.04%)</title><rect x="249.7" y="499.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (8 samples, 0.07%)</title><rect x="250.2" y="515.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="253.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="250.7" y="499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.7" y="510.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (12 samples, 0.11%)</title><rect x="251.1" y="515.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.1" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.06%)</title><rect x="251.7" y="499.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.06%)</title><rect x="251.7" y="483.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.7" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.06%)</title><rect x="251.7" y="467.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (7,748 samples, 69.41%)</title><rect x="252.4" y="531.0" width="819.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.4" y="542.0">ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.08%)</title><rect x="254.2" y="515.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.2" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="254.7" y="499.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (3 samples, 0.03%)</title><rect x="255.2" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (16 samples, 0.14%)</title><rect x="255.5" y="515.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.5" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.05%)</title><rect x="255.9" y="499.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.9" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.04%)</title><rect x="256.0" y="483.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.05%)</title><rect x="256.5" y="499.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.5" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.05%)</title><rect x="256.5" y="483.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="259.5" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.04%)</title><rect x="256.6" y="467.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (10 samples, 0.09%)</title><rect x="257.2" y="515.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (7 samples, 0.06%)</title><rect x="257.5" y="499.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.5" y="510.0"></text>
</g>
<g>
<title>java/lang/String.length (7 samples, 0.06%)</title><rect x="257.5" y="483.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.5" y="494.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.03%)</title><rect x="257.9" y="467.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Coordinator.coordinateRequest (7,588 samples, 67.98%)</title><rect x="258.2" y="515.0" width="802.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="261.2" y="526.0">ru/mail/polis/service/stakenschneider/Coordinator.coordinateRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,417 samples, 12.69%)</title><rect x="259.4" y="499.0" width="149.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.4" y="510.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (20 samples, 0.18%)</title><rect x="261.0" y="483.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (19 samples, 0.17%)</title><rect x="261.1" y="467.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.1" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (19 samples, 0.17%)</title><rect x="261.1" y="451.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.1" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.06%)</title><rect x="262.3" y="435.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,369 samples, 12.26%)</title><rect x="263.3" y="483.0" width="144.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.3" y="494.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (73 samples, 0.65%)</title><rect x="263.4" y="467.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.4" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.06%)</title><rect x="264.8" y="451.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="267.8" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="265.5" y="451.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.5" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (49 samples, 0.44%)</title><rect x="265.9" y="451.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.9" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.05%)</title><rect x="265.9" y="435.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.9" y="446.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (4 samples, 0.04%)</title><rect x="266.1" y="419.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.1" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (15 samples, 0.13%)</title><rect x="266.6" y="435.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="269.6" y="446.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="267.8" y="419.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.8" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (28 samples, 0.25%)</title><rect x="268.2" y="435.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (27 samples, 0.24%)</title><rect x="268.3" y="419.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="268.3" y="403.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="271.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (24 samples, 0.22%)</title><rect x="268.6" y="403.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.05%)</title><rect x="270.5" y="387.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (6 samples, 0.05%)</title><rect x="270.5" y="371.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,295 samples, 11.60%)</title><rect x="271.1" y="467.0" width="136.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.1" y="478.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/Session.write (1,291 samples, 11.57%)</title><rect x="271.5" y="451.0" width="136.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.5" y="462.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,291 samples, 11.57%)</title><rect x="271.5" y="435.0" width="136.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.5" y="446.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (1,288 samples, 11.54%)</title><rect x="271.9" y="419.0" width="136.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.9" y="430.0">one/nio/net/JavaS..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.07%)</title><rect x="271.9" y="403.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.9" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.07%)</title><rect x="271.9" y="387.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.9" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="272.7" y="403.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="275.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1,272 samples, 11.40%)</title><rect x="273.2" y="403.0" width="134.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.2" y="414.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.05%)</title><rect x="274.0" y="387.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.03%)</title><rect x="274.3" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.03%)</title><rect x="274.3" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.03%)</title><rect x="274.3" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,197 samples, 10.72%)</title><rect x="274.6" y="387.0" width="126.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.6" y="398.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,197 samples, 10.72%)</title><rect x="274.6" y="371.0" width="126.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.6" y="382.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (12 samples, 0.11%)</title><rect x="275.9" y="355.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="278.9" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (12 samples, 0.11%)</title><rect x="275.9" y="339.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (10 samples, 0.09%)</title><rect x="276.1" y="323.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (10 samples, 0.09%)</title><rect x="276.1" y="307.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.1" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (10 samples, 0.09%)</title><rect x="276.1" y="291.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (7 samples, 0.06%)</title><rect x="276.4" y="275.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1,165 samples, 10.44%)</title><rect x="277.2" y="355.0" width="123.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.2" y="366.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (1,165 samples, 10.44%)</title><rect x="277.2" y="339.0" width="123.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.2" y="350.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1,165 samples, 10.44%)</title><rect x="277.2" y="323.0" width="123.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.2" y="334.0">sun/nio/ch/File..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (8 samples, 0.07%)</title><rect x="280.7" y="307.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="283.7" y="318.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.03%)</title><rect x="281.3" y="291.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="284.3" y="302.0"></text>
</g>
<g>
<title>write (1,122 samples, 10.05%)</title><rect x="281.8" y="307.0" width="118.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="284.8" y="318.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.06%)</title><rect x="400.4" y="355.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="403.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.04%)</title><rect x="400.7" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (62 samples, 0.56%)</title><rect x="401.1" y="387.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.1" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (33 samples, 0.30%)</title><rect x="401.3" y="371.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.3" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (8 samples, 0.07%)</title><rect x="403.9" y="355.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.9" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (8 samples, 0.07%)</title><rect x="403.9" y="339.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.9" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (8 samples, 0.07%)</title><rect x="403.9" y="323.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (28 samples, 0.25%)</title><rect x="404.7" y="371.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="407.7" y="382.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="404.7" y="355.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="407.7" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (25 samples, 0.22%)</title><rect x="405.1" y="355.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="408.1" y="366.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (3 samples, 0.03%)</title><rect x="405.5" y="339.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="408.5" y="350.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (5 samples, 0.04%)</title><rect x="405.8" y="339.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="408.8" y="350.0"></text>
</g>
<g>
<title>gettimeofday (12 samples, 0.11%)</title><rect x="406.4" y="339.0" width="1.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="409.4" y="350.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (12 samples, 0.11%)</title><rect x="406.4" y="323.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="409.4" y="334.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (5 samples, 0.04%)</title><rect x="407.2" y="307.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="410.2" y="318.0"></text>
</g>
<g>
<title>unsafe_arraycopy (3 samples, 0.03%)</title><rect x="407.7" y="403.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="410.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.07%)</title><rect x="408.0" y="483.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="408.3" y="467.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="411.3" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/TimestampRecord.merge (4 samples, 0.04%)</title><rect x="409.3" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="412.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Coordinator.coordinateGet (6,155 samples, 55.14%)</title><rect x="409.7" y="499.0" width="650.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="412.7" y="510.0">ru/mail/polis/service/stakenschneider/Coordinator.coordinateGet</text>
</g>
<g>
<title>java/lang/String.equals (9 samples, 0.08%)</title><rect x="411.6" y="483.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="414.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (5 samples, 0.04%)</title><rect x="412.6" y="483.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.6" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (14 samples, 0.13%)</title><rect x="413.2" y="483.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="416.2" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1610525991.invoke (14 samples, 0.13%)</title><rect x="413.2" y="467.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.2" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (14 samples, 0.13%)</title><rect x="413.2" y="451.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.2" y="462.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (10 samples, 0.09%)</title><rect x="413.3" y="435.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="416.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (9 samples, 0.08%)</title><rect x="413.4" y="419.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="416.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.06%)</title><rect x="413.6" y="403.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="416.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.07%)</title><rect x="414.7" y="483.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="417.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.07%)</title><rect x="414.7" y="467.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="417.7" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.07%)</title><rect x="414.7" y="451.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="417.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.06%)</title><rect x="414.8" y="435.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.8" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="415.1" y="419.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="418.1" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.04%)</title><rect x="415.7" y="483.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (24 samples, 0.22%)</title><rect x="416.2" y="483.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (23 samples, 0.21%)</title><rect x="416.2" y="467.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="419.2" y="478.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.04%)</title><rect x="418.1" y="451.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="421.1" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (4,074 samples, 36.50%)</title><rect x="418.7" y="483.0" width="430.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.7" y="494.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (21 samples, 0.19%)</title><rect x="418.7" y="467.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="421.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.06%)</title><rect x="420.1" y="451.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="423.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.04%)</title><rect x="420.3" y="435.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.3" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.04%)</title><rect x="420.3" y="419.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="423.3" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.04%)</title><rect x="420.3" y="403.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="423.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (4,053 samples, 36.31%)</title><rect x="420.9" y="467.0" width="428.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="423.9" y="478.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (4,052 samples, 36.30%)</title><rect x="421.0" y="451.0" width="428.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="424.0" y="462.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (13 samples, 0.12%)</title><rect x="422.0" y="435.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="425.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.10%)</title><rect x="422.2" y="419.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.2" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.05%)</title><rect x="422.7" y="403.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="425.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (2,431 samples, 21.78%)</title><rect x="423.3" y="435.0" width="257.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="426.3" y="446.0">one/nio/http/HttpClient$ResponseRe..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (18 samples, 0.16%)</title><rect x="423.9" y="419.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="426.9" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 0.15%)</title><rect x="424.0" y="403.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="427.0" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (17 samples, 0.15%)</title><rect x="424.0" y="387.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="427.0" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (17 samples, 0.15%)</title><rect x="424.0" y="371.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="427.0" y="382.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (6 samples, 0.05%)</title><rect x="424.4" y="355.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="427.4" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.03%)</title><rect x="424.4" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="427.4" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (3 samples, 0.03%)</title><rect x="424.4" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="427.4" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.03%)</title><rect x="424.4" y="307.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="427.4" y="318.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (7 samples, 0.06%)</title><rect x="425.0" y="355.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="428.0" y="366.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (7 samples, 0.06%)</title><rect x="425.0" y="339.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="428.0" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2,406 samples, 21.56%)</title><rect x="426.0" y="419.0" width="254.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="429.0" y="430.0">one/nio/net/JavaSocket.read</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.16%)</title><rect x="426.0" y="403.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="429.0" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (18 samples, 0.16%)</title><rect x="426.0" y="387.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="429.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (18 samples, 0.16%)</title><rect x="426.0" y="371.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2,388 samples, 21.39%)</title><rect x="427.9" y="403.0" width="252.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="430.9" y="414.0">sun/nio/ch/SocketChannelImpl.read</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (15 samples, 0.13%)</title><rect x="428.0" y="387.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="431.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (15 samples, 0.13%)</title><rect x="428.0" y="371.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (15 samples, 0.13%)</title><rect x="428.0" y="355.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (15 samples, 0.13%)</title><rect x="428.0" y="339.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="431.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (14 samples, 0.13%)</title><rect x="428.0" y="323.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="431.0" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="428.4" y="307.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="431.4" y="318.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.04%)</title><rect x="428.8" y="307.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="431.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2,350 samples, 21.05%)</title><rect x="429.6" y="387.0" width="248.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.6" y="398.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2,349 samples, 21.04%)</title><rect x="429.7" y="371.0" width="248.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="432.7" y="382.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2,321 samples, 20.79%)</title><rect x="430.1" y="355.0" width="245.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.1" y="366.0">sun/nio/ch/IOUtil.readIntoNativeB..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2,321 samples, 20.79%)</title><rect x="430.1" y="339.0" width="245.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="433.1" y="350.0">sun/nio/ch/SocketDispatcher.read</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2,321 samples, 20.79%)</title><rect x="430.1" y="323.0" width="245.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="433.1" y="334.0">sun/nio/ch/FileDispatcherImpl.read0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (10 samples, 0.09%)</title><rect x="442.9" y="307.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="445.9" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (2,188 samples, 19.60%)</title><rect x="444.2" y="307.0" width="231.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="447.2" y="318.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (24 samples, 0.22%)</title><rect x="675.5" y="355.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="678.5" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 0.11%)</title><rect x="675.8" y="339.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="678.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (9 samples, 0.08%)</title><rect x="677.1" y="339.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="680.1" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (4 samples, 0.04%)</title><rect x="677.4" y="323.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="680.4" y="334.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (4 samples, 0.04%)</title><rect x="677.4" y="307.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="680.4" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (4 samples, 0.04%)</title><rect x="677.4" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="680.4" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.rewind (4 samples, 0.04%)</title><rect x="677.4" y="275.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="680.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (3 samples, 0.03%)</title><rect x="677.5" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="680.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (22 samples, 0.20%)</title><rect x="678.0" y="387.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.0" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (17 samples, 0.15%)</title><rect x="678.0" y="371.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="681.0" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.05%)</title><rect x="679.2" y="355.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="682.2" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.05%)</title><rect x="679.2" y="339.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="682.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.05%)</title><rect x="679.2" y="323.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="682.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (5 samples, 0.04%)</title><rect x="679.8" y="371.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (122 samples, 1.09%)</title><rect x="680.3" y="435.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="683.3" y="446.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.04%)</title><rect x="680.3" y="419.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="683.3" y="430.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.04%)</title><rect x="680.3" y="403.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.04%)</title><rect x="680.9" y="419.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="683.9" y="430.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.04%)</title><rect x="680.9" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="683.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.08%)</title><rect x="681.4" y="419.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="684.4" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.04%)</title><rect x="681.9" y="403.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="684.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="681.9" y="387.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="684.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.mayHaveBody (5 samples, 0.04%)</title><rect x="682.4" y="419.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="685.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (56 samples, 0.50%)</title><rect x="682.9" y="419.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.9" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (53 samples, 0.47%)</title><rect x="683.2" y="403.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="686.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (51 samples, 0.46%)</title><rect x="683.4" y="387.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="686.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9 samples, 0.08%)</title><rect x="688.8" y="419.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="691.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (29 samples, 0.26%)</title><rect x="690.0" y="419.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="693.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.04%)</title><rect x="690.8" y="403.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="693.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.13%)</title><rect x="691.2" y="403.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="694.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="691.2" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="694.2" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.10%)</title><rect x="691.5" y="387.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="694.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="692.7" y="403.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="695.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (88 samples, 0.79%)</title><rect x="693.2" y="435.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="696.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (11 samples, 0.10%)</title><rect x="695.1" y="419.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="698.1" y="430.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (6 samples, 0.05%)</title><rect x="695.7" y="403.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.7" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (53 samples, 0.47%)</title><rect x="696.3" y="419.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.3" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.11%)</title><rect x="696.5" y="403.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="699.5" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (8 samples, 0.07%)</title><rect x="696.9" y="387.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="699.9" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (11 samples, 0.10%)</title><rect x="697.8" y="403.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="700.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="698.3" y="387.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="701.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (28 samples, 0.25%)</title><rect x="699.0" y="403.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="702.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (25 samples, 0.22%)</title><rect x="699.3" y="387.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="702.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.length (11 samples, 0.10%)</title><rect x="699.8" y="371.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.8" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.08%)</title><rect x="701.0" y="371.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="701.3" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="704.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="701.6" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.6" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.05%)</title><rect x="701.9" y="419.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.9" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (18 samples, 0.16%)</title><rect x="702.5" y="435.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="705.5" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.11%)</title><rect x="703.1" y="419.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="706.1" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.09%)</title><rect x="703.3" y="403.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="706.3" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="703.9" y="387.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="706.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setTimeout (3 samples, 0.03%)</title><rect x="704.4" y="435.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (3 samples, 0.03%)</title><rect x="704.4" y="419.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="707.4" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (1,320 samples, 11.83%)</title><rect x="704.8" y="435.0" width="139.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="707.8" y="446.0">one/nio/net/JavaS..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (939 samples, 8.41%)</title><rect x="704.8" y="419.0" width="99.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="707.8" y="430.0">java/nio/cha..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.07%)</title><rect x="705.3" y="403.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="708.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.07%)</title><rect x="705.3" y="387.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="708.3" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.05%)</title><rect x="705.5" y="371.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="708.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.05%)</title><rect x="705.5" y="355.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="708.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (926 samples, 8.30%)</title><rect x="706.1" y="403.0" width="97.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="709.1" y="414.0">java/nio/ch..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (914 samples, 8.19%)</title><rect x="707.4" y="387.0" width="96.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="710.4" y="398.0">java/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (913 samples, 8.18%)</title><rect x="707.5" y="371.0" width="96.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="710.5" y="382.0">sun/nio/ch/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (20 samples, 0.18%)</title><rect x="707.5" y="355.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="710.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (20 samples, 0.18%)</title><rect x="707.5" y="339.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="710.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (20 samples, 0.18%)</title><rect x="707.5" y="323.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="710.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (20 samples, 0.18%)</title><rect x="707.5" y="307.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (849 samples, 7.61%)</title><rect x="709.8" y="355.0" width="89.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="712.8" y="366.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (846 samples, 7.58%)</title><rect x="710.2" y="339.0" width="89.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.2" y="350.0">sun/nio/ch..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.03%)</title><rect x="710.3" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.3" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.03%)</title><rect x="710.3" y="307.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="713.3" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.03%)</title><rect x="710.3" y="291.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="713.3" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.03%)</title><rect x="710.3" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="713.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.03%)</title><rect x="710.3" y="259.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="713.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (811 samples, 7.27%)</title><rect x="710.6" y="323.0" width="85.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.6" y="334.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (811 samples, 7.27%)</title><rect x="710.6" y="307.0" width="85.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="713.6" y="318.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (811 samples, 7.27%)</title><rect x="710.6" y="291.0" width="85.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.6" y="302.0">sun/nio/ch..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.04%)</title><rect x="711.7" y="275.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="714.7" y="286.0"></text>
</g>
<g>
<title>write (796 samples, 7.13%)</title><rect x="712.2" y="275.0" width="84.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="715.2" y="286.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (31 samples, 0.28%)</title><rect x="796.3" y="323.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="799.3" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.09%)</title><rect x="796.8" y="307.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="799.8" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.06%)</title><rect x="797.2" y="291.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="800.2" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="797.5" y="275.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="800.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (16 samples, 0.14%)</title><rect x="797.9" y="307.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="800.9" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.04%)</title><rect x="799.0" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.0" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.04%)</title><rect x="799.0" y="275.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="802.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (32 samples, 0.29%)</title><rect x="799.6" y="355.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="802.6" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (12 samples, 0.11%)</title><rect x="800.3" y="339.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="803.3" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.04%)</title><rect x="801.1" y="323.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="804.1" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.04%)</title><rect x="801.1" y="307.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="804.1" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.04%)</title><rect x="801.1" y="291.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="804.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (13 samples, 0.12%)</title><rect x="801.6" y="339.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="804.6" y="350.0"></text>
</g>
<g>
<title>pthread_self (9 samples, 0.08%)</title><rect x="802.0" y="323.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="805.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (10 samples, 0.09%)</title><rect x="803.0" y="355.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.0" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.03%)</title><rect x="803.7" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="806.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (376 samples, 3.37%)</title><rect x="804.1" y="419.0" width="39.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="807.1" y="430.0">sun..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (374 samples, 3.35%)</title><rect x="804.3" y="403.0" width="39.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.3" y="414.0">jav..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.03%)</title><rect x="804.7" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="807.7" y="398.0"></text>
</g>
<g>
<title>I2C/C2I adapters (6 samples, 0.05%)</title><rect x="805.2" y="387.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="808.2" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (3 samples, 0.03%)</title><rect x="805.8" y="387.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="808.8" y="398.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (295 samples, 2.64%)</title><rect x="806.3" y="387.0" width="31.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="809.3" y="398.0">JV..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (7 samples, 0.06%)</title><rect x="809.6" y="371.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="812.6" y="382.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (7 samples, 0.06%)</title><rect x="809.6" y="355.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="812.6" y="366.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (6 samples, 0.05%)</title><rect x="810.4" y="371.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="813.4" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.03%)</title><rect x="811.0" y="371.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="814.0" y="382.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (5 samples, 0.04%)</title><rect x="811.3" y="371.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="814.3" y="382.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (9 samples, 0.08%)</title><rect x="812.1" y="371.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="815.1" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (21 samples, 0.19%)</title><rect x="813.3" y="371.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="816.3" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (15 samples, 0.13%)</title><rect x="813.7" y="355.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="816.7" y="366.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (11 samples, 0.10%)</title><rect x="814.1" y="339.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="817.1" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (4 samples, 0.04%)</title><rect x="815.6" y="371.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="818.6" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (60 samples, 0.54%)</title><rect x="816.4" y="371.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="819.4" y="382.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (4 samples, 0.04%)</title><rect x="818.2" y="355.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="821.2" y="366.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (4 samples, 0.04%)</title><rect x="818.6" y="355.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="821.6" y="366.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.04%)</title><rect x="819.6" y="355.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="822.6" y="366.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (14 samples, 0.13%)</title><rect x="820.0" y="355.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="823.0" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (8 samples, 0.07%)</title><rect x="820.4" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="823.4" y="350.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (7 samples, 0.06%)</title><rect x="822.0" y="355.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="825.0" y="366.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (30 samples, 0.27%)</title><rect x="822.8" y="371.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="825.8" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (16 samples, 0.14%)</title><rect x="823.4" y="355.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.4" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (10 samples, 0.09%)</title><rect x="823.4" y="339.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="826.4" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.04%)</title><rect x="824.4" y="339.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="827.4" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (5 samples, 0.04%)</title><rect x="824.4" y="323.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="827.4" y="334.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.04%)</title><rect x="825.1" y="355.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="828.1" y="366.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (5 samples, 0.04%)</title><rect x="825.5" y="355.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="828.5" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="826.2" y="371.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="829.2" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.07%)</title><rect x="826.9" y="371.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="829.9" y="382.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.05%)</title><rect x="827.1" y="355.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="830.1" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.04%)</title><rect x="827.2" y="339.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="830.2" y="350.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.04%)</title><rect x="828.1" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="831.1" y="382.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (8 samples, 0.07%)</title><rect x="828.6" y="371.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="831.6" y="382.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (5 samples, 0.04%)</title><rect x="828.9" y="355.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="831.9" y="366.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (76 samples, 0.68%)</title><rect x="829.4" y="371.0" width="8.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="832.4" y="382.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (4 samples, 0.04%)</title><rect x="829.4" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="832.4" y="366.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (27 samples, 0.24%)</title><rect x="829.8" y="355.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="832.8" y="366.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (16 samples, 0.14%)</title><rect x="831.0" y="339.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="834.0" y="350.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (44 samples, 0.39%)</title><rect x="832.8" y="355.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="835.8" y="366.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (13 samples, 0.12%)</title><rect x="833.2" y="339.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="836.2" y="350.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (8 samples, 0.07%)</title><rect x="833.7" y="323.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="836.7" y="334.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.04%)</title><rect x="834.1" y="307.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="837.1" y="318.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.04%)</title><rect x="834.2" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="837.2" y="302.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (4 samples, 0.04%)</title><rect x="834.2" y="275.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="837.2" y="286.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (26 samples, 0.23%)</title><rect x="834.7" y="339.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="837.7" y="350.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (11 samples, 0.10%)</title><rect x="835.1" y="323.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="838.1" y="334.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (3 samples, 0.03%)</title><rect x="835.7" y="307.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="838.7" y="318.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (8 samples, 0.07%)</title><rect x="836.6" y="323.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="839.6" y="334.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.04%)</title><rect x="837.4" y="387.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="840.4" y="398.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.03%)</title><rect x="838.2" y="387.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="841.2" y="398.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.04%)</title><rect x="838.5" y="387.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="841.5" y="398.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (4 samples, 0.04%)</title><rect x="838.9" y="387.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="841.9" y="398.0"></text>
</g>
<g>
<title>call_stub (13 samples, 0.12%)</title><rect x="839.8" y="387.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="842.8" y="398.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (4 samples, 0.04%)</title><rect x="841.2" y="387.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="844.2" y="398.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.04%)</title><rect x="841.7" y="387.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="844.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (9 samples, 0.08%)</title><rect x="842.1" y="387.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="845.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (4 samples, 0.04%)</title><rect x="842.6" y="371.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="845.6" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (4 samples, 0.04%)</title><rect x="842.6" y="355.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="845.6" y="366.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (7 samples, 0.06%)</title><rect x="843.1" y="387.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="846.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (4 samples, 0.04%)</title><rect x="843.9" y="419.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="846.9" y="430.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (26 samples, 0.23%)</title><rect x="844.3" y="435.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="847.3" y="446.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (5 samples, 0.04%)</title><rect x="844.5" y="419.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="847.5" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.03%)</title><rect x="844.6" y="403.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="847.6" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (11 samples, 0.10%)</title><rect x="845.0" y="419.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="848.0" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (11 samples, 0.10%)</title><rect x="845.0" y="403.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="848.0" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (10 samples, 0.09%)</title><rect x="845.2" y="387.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="848.2" y="398.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (8 samples, 0.07%)</title><rect x="846.2" y="419.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="849.2" y="430.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (8 samples, 0.07%)</title><rect x="846.2" y="403.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="849.2" y="414.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (22 samples, 0.20%)</title><rect x="847.1" y="435.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="850.1" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.06%)</title><rect x="847.9" y="419.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="850.9" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (7 samples, 0.06%)</title><rect x="847.9" y="403.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="850.9" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (5 samples, 0.04%)</title><rect x="848.1" y="387.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="851.1" y="398.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (6 samples, 0.05%)</title><rect x="848.7" y="419.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.7" y="430.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (6 samples, 0.05%)</title><rect x="848.7" y="403.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.7" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedList$Node.&lt;init&gt; (4 samples, 0.04%)</title><rect x="849.0" y="387.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="852.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (23 samples, 0.21%)</title><rect x="849.4" y="483.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.13%)</title><rect x="849.7" y="467.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="849.8" y="451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.8" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.09%)</title><rect x="850.1" y="451.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="853.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.05%)</title><rect x="851.2" y="467.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.2" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.04%)</title><rect x="851.3" y="451.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.3" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.04%)</title><rect x="851.4" y="435.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (22 samples, 0.20%)</title><rect x="851.8" y="483.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="854.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.07%)</title><rect x="851.8" y="467.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.07%)</title><rect x="851.8" y="451.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="854.8" y="462.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.03%)</title><rect x="852.7" y="467.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="855.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="853.0" y="467.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="856.0" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="853.0" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="856.0" y="462.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (8 samples, 0.07%)</title><rect x="853.3" y="467.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="856.3" y="478.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.05%)</title><rect x="853.5" y="451.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="856.5" y="462.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.05%)</title><rect x="853.5" y="435.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.5" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.05%)</title><rect x="853.5" y="419.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="856.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (20 samples, 0.18%)</title><rect x="854.1" y="483.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="857.1" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (17 samples, 0.15%)</title><rect x="854.5" y="467.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.5" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (11 samples, 0.10%)</title><rect x="855.1" y="451.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="858.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/TimestampRecord.fromBytes (5 samples, 0.04%)</title><rect x="856.3" y="483.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="859.3" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="856.3" y="467.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="859.3" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Coordinator.getWithTimestampMethodWrapper (1,809 samples, 16.21%)</title><rect x="856.8" y="483.0" width="191.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="859.8" y="494.0">ru/mail/polis/service/sta..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.05%)</title><rect x="857.7" y="467.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="860.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Coordinator.copyAndExtractWithTimestampFromByteBuffer (1,794 samples, 16.07%)</title><rect x="858.4" y="467.0" width="189.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="861.4" y="478.0">ru/mail/polis/service/sta..</text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (127 samples, 1.14%)</title><rect x="858.5" y="451.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="861.5" y="462.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (126 samples, 1.13%)</title><rect x="858.5" y="435.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="861.5" y="446.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (126 samples, 1.13%)</title><rect x="858.5" y="419.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="861.5" y="430.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (126 samples, 1.13%)</title><rect x="858.5" y="403.0" width="13.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="861.5" y="414.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (125 samples, 1.12%)</title><rect x="858.6" y="387.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="861.6" y="398.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (124 samples, 1.11%)</title><rect x="858.7" y="371.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="861.7" y="382.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (118 samples, 1.06%)</title><rect x="859.2" y="355.0" width="12.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="862.2" y="366.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (116 samples, 1.04%)</title><rect x="859.2" y="339.0" width="12.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="862.2" y="350.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (108 samples, 0.97%)</title><rect x="860.0" y="323.0" width="11.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="863.0" y="334.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (95 samples, 0.85%)</title><rect x="861.3" y="307.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="864.3" y="318.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (34 samples, 0.30%)</title><rect x="863.1" y="291.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="866.1" y="302.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (33 samples, 0.30%)</title><rect x="863.2" y="275.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="866.2" y="286.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (19 samples, 0.17%)</title><rect x="863.7" y="259.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="866.7" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (14 samples, 0.13%)</title><rect x="864.0" y="243.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.0" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (11 samples, 0.10%)</title><rect x="864.1" y="227.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="867.1" y="238.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (3 samples, 0.03%)</title><rect x="864.4" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="867.4" y="222.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.08%)</title><rect x="865.7" y="259.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="868.7" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.04%)</title><rect x="866.1" y="243.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="869.1" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="866.2" y="227.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="869.2" y="238.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (8 samples, 0.07%)</title><rect x="866.7" y="291.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="869.7" y="302.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (21 samples, 0.19%)</title><rect x="868.1" y="291.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="871.1" y="302.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (18 samples, 0.16%)</title><rect x="868.4" y="275.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="871.4" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (16 samples, 0.14%)</title><rect x="868.4" y="259.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="871.4" y="270.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.03%)</title><rect x="868.5" y="243.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="871.5" y="254.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (8 samples, 0.07%)</title><rect x="868.8" y="243.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="871.8" y="254.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (8 samples, 0.07%)</title><rect x="868.8" y="227.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="871.8" y="238.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (4 samples, 0.04%)</title><rect x="869.7" y="243.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.7" y="254.0"></text>
</g>
<g>
<title>nmethod::metadata_at(int) const (4 samples, 0.04%)</title><rect x="870.3" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="873.3" y="302.0"></text>
</g>
<g>
<title>oopDesc::release_obj_field_put(int, oopDesc*) (3 samples, 0.03%)</title><rect x="870.7" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="873.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.getRecordWithTimestamp (1,580 samples, 14.16%)</title><rect x="871.9" y="451.0" width="167.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.9" y="462.0">ru/mail/polis/dao/Roc..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,560 samples, 13.98%)</title><rect x="872.0" y="435.0" width="164.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="875.0" y="446.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,558 samples, 13.96%)</title><rect x="872.2" y="419.0" width="164.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="875.2" y="430.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,539 samples, 13.79%)</title><rect x="874.0" y="403.0" width="162.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="877.0" y="414.0">Java_org_rocksdb_Rock..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (6 samples, 0.05%)</title><rect x="875.8" y="387.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="878.8" y="398.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="877.0" y="387.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="880.0" y="398.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.06%)</title><rect x="877.3" y="387.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="880.3" y="398.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.04%)</title><rect x="878.0" y="387.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="881.0" y="398.0"></text>
</g>
<g>
<title>operator delete(void*) (5 samples, 0.04%)</title><rect x="878.6" y="387.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="881.6" y="398.0"></text>
</g>
<g>
<title>operator delete[](void*) (4 samples, 0.04%)</title><rect x="879.1" y="387.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="882.1" y="398.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.05%)</title><rect x="879.5" y="387.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="882.5" y="398.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (13 samples, 0.12%)</title><rect x="880.1" y="387.0" width="1.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="883.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (10 samples, 0.09%)</title><rect x="881.5" y="387.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="884.5" y="398.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,452 samples, 13.01%)</title><rect x="882.6" y="387.0" width="153.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="885.6" y="398.0">rocksdb_get_helper(..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (8 samples, 0.07%)</title><rect x="884.6" y="371.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="887.6" y="382.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (4 samples, 0.04%)</title><rect x="885.4" y="371.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.4" y="382.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.03%)</title><rect x="885.9" y="371.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.9" y="382.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.04%)</title><rect x="886.2" y="371.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.2" y="382.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (185 samples, 1.66%)</title><rect x="886.7" y="371.0" width="19.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="889.7" y="382.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (4 samples, 0.04%)</title><rect x="887.2" y="355.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="890.2" y="366.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (6 samples, 0.05%)</title><rect x="887.8" y="355.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="890.8" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.04%)</title><rect x="888.5" y="355.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="891.5" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="889.0" y="355.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="892.0" y="366.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (18 samples, 0.16%)</title><rect x="889.9" y="355.0" width="1.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="892.9" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="890.1" y="339.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="893.1" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.09%)</title><rect x="890.6" y="339.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="893.6" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="890.6" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="893.6" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.05%)</title><rect x="890.9" y="323.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="893.9" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.05%)</title><rect x="890.9" y="307.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.9" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="891.1" y="291.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="894.1" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.04%)</title><rect x="891.1" y="275.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="894.1" y="286.0"></text>
</g>
<g>
<title>jni_NewByteArray (112 samples, 1.00%)</title><rect x="891.8" y="355.0" width="11.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="894.8" y="366.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (6 samples, 0.05%)</title><rect x="892.3" y="339.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="895.3" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.04%)</title><rect x="892.9" y="339.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="895.9" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (3 samples, 0.03%)</title><rect x="893.6" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="896.6" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.05%)</title><rect x="893.9" y="339.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="896.9" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (11 samples, 0.10%)</title><rect x="894.6" y="339.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="897.6" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.07%)</title><rect x="894.9" y="323.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="897.9" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.05%)</title><rect x="895.2" y="307.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="898.2" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.04%)</title><rect x="895.3" y="291.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="898.3" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.04%)</title><rect x="895.3" y="275.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.3" y="286.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (74 samples, 0.66%)</title><rect x="895.8" y="339.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.8" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (60 samples, 0.54%)</title><rect x="896.7" y="323.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="899.7" y="334.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (3 samples, 0.03%)</title><rect x="896.9" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.9" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (48 samples, 0.43%)</title><rect x="897.2" y="307.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="900.2" y="318.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (7 samples, 0.06%)</title><rect x="897.7" y="291.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="900.7" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jfr_sampler() (3 samples, 0.03%)</title><rect x="898.1" y="275.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="901.1" y="286.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_dtrace_sampler() (3 samples, 0.03%)</title><rect x="898.4" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="901.4" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (5 samples, 0.04%)</title><rect x="899.0" y="291.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="902.0" y="302.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.03%)</title><rect x="899.2" y="275.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="902.2" y="286.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (6 samples, 0.05%)</title><rect x="899.6" y="291.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.6" y="302.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (6 samples, 0.05%)</title><rect x="900.3" y="291.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.3" y="302.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (6 samples, 0.05%)</title><rect x="901.0" y="291.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="904.0" y="302.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (4 samples, 0.04%)</title><rect x="901.6" y="291.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="904.6" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (6 samples, 0.05%)</title><rect x="902.5" y="307.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="905.5" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.04%)</title><rect x="903.1" y="323.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="906.1" y="334.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (23 samples, 0.21%)</title><rect x="903.6" y="355.0" width="2.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="906.6" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.09%)</title><rect x="904.9" y="339.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="907.9" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="905.0" y="323.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="908.0" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.04%)</title><rect x="905.4" y="323.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.4" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.04%)</title><rect x="905.5" y="307.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="908.5" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="905.6" y="291.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.6" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="905.6" y="275.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="908.6" y="286.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="906.4" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="909.4" y="382.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (4 samples, 0.04%)</title><rect x="906.8" y="371.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="909.8" y="382.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="907.2" y="371.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="910.2" y="382.0"></text>
</g>
<g>
<title>free (12 samples, 0.11%)</title><rect x="907.7" y="371.0" width="1.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="910.7" y="382.0"></text>
</g>
<g>
<title>szone_size (10 samples, 0.09%)</title><rect x="908.0" y="355.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="911.0" y="366.0"></text>
</g>
<g>
<title>tiny_size (10 samples, 0.09%)</title><rect x="908.0" y="339.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="911.0" y="350.0"></text>
</g>
<g>
<title>free_tiny (21 samples, 0.19%)</title><rect x="909.0" y="371.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="912.0" y="382.0"></text>
</g>
<g>
<title>tiny_free_no_lock (16 samples, 0.14%)</title><rect x="909.5" y="355.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="912.5" y="366.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (7 samples, 0.06%)</title><rect x="910.2" y="339.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="913.2" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (3 samples, 0.03%)</title><rect x="910.9" y="339.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="913.9" y="350.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (24 samples, 0.22%)</title><rect x="911.2" y="371.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="914.2" y="382.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.03%)</title><rect x="911.9" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="914.9" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.05%)</title><rect x="912.2" y="355.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="915.2" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.06%)</title><rect x="912.9" y="355.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.9" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="913.1" y="339.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="916.1" y="350.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (55 samples, 0.49%)</title><rect x="913.8" y="371.0" width="5.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="916.8" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (22 samples, 0.20%)</title><rect x="916.1" y="355.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="919.1" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (17 samples, 0.15%)</title><rect x="916.5" y="339.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="919.5" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (13 samples, 0.12%)</title><rect x="916.6" y="323.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="919.6" y="334.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (12 samples, 0.11%)</title><rect x="916.7" y="307.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="919.7" y="318.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (12 samples, 0.11%)</title><rect x="916.7" y="291.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="919.7" y="302.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (3 samples, 0.03%)</title><rect x="916.7" y="275.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="919.7" y="286.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (4 samples, 0.04%)</title><rect x="917.1" y="275.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.1" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="918.4" y="355.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="921.4" y="366.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (4 samples, 0.04%)</title><rect x="918.8" y="355.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.8" y="366.0"></text>
</g>
<g>
<title>jni_NewByteArray (5 samples, 0.04%)</title><rect x="919.6" y="371.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="922.6" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.04%)</title><rect x="920.1" y="371.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="923.1" y="382.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.05%)</title><rect x="920.5" y="371.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="923.5" y="382.0"></text>
</g>
<g>
<title>operator new(unsigned long) (52 samples, 0.47%)</title><rect x="921.4" y="371.0" width="5.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="924.4" y="382.0"></text>
</g>
<g>
<title>malloc (50 samples, 0.45%)</title><rect x="921.5" y="355.0" width="5.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="924.5" y="366.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.03%)</title><rect x="921.5" y="339.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="924.5" y="350.0"></text>
</g>
<g>
<title>malloc_zone_malloc (46 samples, 0.41%)</title><rect x="921.8" y="339.0" width="4.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="924.8" y="350.0"></text>
</g>
<g>
<title>default_zone_malloc (13 samples, 0.12%)</title><rect x="922.9" y="323.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="925.9" y="334.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (20 samples, 0.18%)</title><rect x="924.2" y="323.0" width="2.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="927.2" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (20 samples, 0.18%)</title><rect x="924.2" y="307.0" width="2.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="927.2" y="318.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="926.3" y="323.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="929.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,026 samples, 9.19%)</title><rect x="926.9" y="371.0" width="108.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="929.9" y="382.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (8 samples, 0.07%)</title><rect x="927.8" y="355.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="930.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,006 samples, 9.01%)</title><rect x="928.7" y="355.0" width="106.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="931.7" y="366.0">rocksdb::Comp..</text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (3 samples, 0.03%)</title><rect x="929.2" y="339.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="932.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (8 samples, 0.07%)</title><rect x="929.5" y="339.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="932.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (4 samples, 0.04%)</title><rect x="929.9" y="323.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="932.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (985 samples, 8.82%)</title><rect x="930.4" y="339.0" width="104.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="933.4" y="350.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (980 samples, 8.78%)</title><rect x="930.9" y="323.0" width="103.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.9" y="334.0">rocksdb::DBI..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (7 samples, 0.06%)</title><rect x="931.0" y="307.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="934.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.03%)</title><rect x="931.7" y="307.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.03%)</title><rect x="932.1" y="307.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="935.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (948 samples, 8.49%)</title><rect x="932.6" y="307.0" width="100.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="935.6" y="318.0">rocksdb::DBI..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (22 samples, 0.20%)</title><rect x="936.9" y="291.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="939.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (27 samples, 0.24%)</title><rect x="939.7" y="291.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.03%)</title><rect x="940.8" y="275.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="943.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (10 samples, 0.09%)</title><rect x="941.1" y="275.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.1" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="941.8" y="259.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="944.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.03%)</title><rect x="942.2" y="275.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="945.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (7 samples, 0.06%)</title><rect x="942.5" y="291.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="945.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.03%)</title><rect x="942.6" y="275.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (3 samples, 0.03%)</title><rect x="942.9" y="275.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (3 samples, 0.03%)</title><rect x="943.3" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="946.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.03%)</title><rect x="943.7" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (3 samples, 0.03%)</title><rect x="944.1" y="291.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (385 samples, 3.45%)</title><rect x="944.4" y="291.0" width="40.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.4" y="302.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.03%)</title><rect x="947.9" y="275.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="950.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (346 samples, 3.10%)</title><rect x="948.5" y="275.0" width="36.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="951.5" y="286.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (6 samples, 0.05%)</title><rect x="969.5" y="259.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="972.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (30 samples, 0.27%)</title><rect x="970.1" y="259.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.1" y="270.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (3 samples, 0.03%)</title><rect x="971.8" y="243.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="974.8" y="254.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (8 samples, 0.07%)</title><rect x="972.3" y="243.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="975.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (91 samples, 0.82%)</title><rect x="973.3" y="259.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.3" y="270.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (4 samples, 0.04%)</title><rect x="977.0" y="243.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="980.0" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (8 samples, 0.07%)</title><rect x="977.4" y="243.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="980.4" y="254.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.03%)</title><rect x="978.3" y="243.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="981.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (35 samples, 0.31%)</title><rect x="978.6" y="243.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.6" y="254.0"></text>
</g>
<g>
<title>_platform_memcmp (21 samples, 0.19%)</title><rect x="980.0" y="227.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="983.0" y="238.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (6 samples, 0.05%)</title><rect x="982.3" y="243.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (9 samples, 0.08%)</title><rect x="982.9" y="259.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.9" y="270.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (10 samples, 0.09%)</title><rect x="984.1" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.09%)</title><rect x="985.5" y="291.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (420 samples, 3.76%)</title><rect x="987.0" y="291.0" width="44.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="990.0" y="302.0">rock..</text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (3 samples, 0.03%)</title><rect x="989.7" y="275.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.7" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="989.7" y="259.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="992.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (387 samples, 3.47%)</title><rect x="990.3" y="275.0" width="40.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="993.3" y="286.0">roc..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (6 samples, 0.05%)</title><rect x="990.5" y="259.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (5 samples, 0.04%)</title><rect x="991.1" y="259.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="994.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (365 samples, 3.27%)</title><rect x="991.7" y="259.0" width="38.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="994.7" y="270.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.04%)</title><rect x="994.7" y="243.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="997.7" y="254.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="995.2" y="243.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="998.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (29 samples, 0.26%)</title><rect x="995.7" y="243.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (22 samples, 0.20%)</title><rect x="996.2" y="227.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (17 samples, 0.15%)</title><rect x="996.8" y="211.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="999.8" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (17 samples, 0.15%)</title><rect x="996.8" y="195.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="999.8" y="206.0"></text>
</g>
<g>
<title>malloc (17 samples, 0.15%)</title><rect x="996.8" y="179.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="999.8" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (16 samples, 0.14%)</title><rect x="996.9" y="163.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="999.9" y="174.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.03%)</title><rect x="996.9" y="147.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="999.9" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (12 samples, 0.11%)</title><rect x="997.2" y="147.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1000.2" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (12 samples, 0.11%)</title><rect x="997.2" y="131.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1000.2" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (8 samples, 0.07%)</title><rect x="997.6" y="115.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1000.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (18 samples, 0.16%)</title><rect x="998.8" y="243.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.8" y="254.0"></text>
</g>
<g>
<title>free (7 samples, 0.06%)</title><rect x="999.0" y="227.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1002.0" y="238.0"></text>
</g>
<g>
<title>szone_size (5 samples, 0.04%)</title><rect x="999.2" y="211.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1002.2" y="222.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.04%)</title><rect x="999.2" y="195.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1002.2" y="206.0"></text>
</g>
<g>
<title>free_tiny (7 samples, 0.06%)</title><rect x="999.7" y="227.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1002.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (116 samples, 1.04%)</title><rect x="1001.3" y="243.0" width="12.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (5 samples, 0.04%)</title><rect x="1002.7" y="227.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (5 samples, 0.04%)</title><rect x="1002.7" y="211.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1005.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (97 samples, 0.87%)</title><rect x="1003.2" y="227.0" width="10.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1006.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (82 samples, 0.73%)</title><rect x="1004.2" y="211.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1007.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (51 samples, 0.46%)</title><rect x="1005.0" y="195.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1008.0" y="206.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (4 samples, 0.04%)</title><rect x="1005.8" y="179.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1008.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (8 samples, 0.07%)</title><rect x="1006.6" y="179.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (20 samples, 0.18%)</title><rect x="1007.6" y="179.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1010.6" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.04%)</title><rect x="1008.7" y="163.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1011.7" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.04%)</title><rect x="1009.2" y="163.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1012.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (4 samples, 0.04%)</title><rect x="1009.8" y="179.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1012.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (16 samples, 0.14%)</title><rect x="1010.4" y="195.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (3 samples, 0.03%)</title><rect x="1010.5" y="179.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1013.5" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.03%)</title><rect x="1010.5" y="163.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1013.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (11 samples, 0.10%)</title><rect x="1010.8" y="179.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (11 samples, 0.10%)</title><rect x="1010.8" y="163.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.8" y="174.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (11 samples, 0.10%)</title><rect x="1010.8" y="147.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.8" y="158.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (11 samples, 0.10%)</title><rect x="1010.8" y="131.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1013.8" y="142.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (11 samples, 0.10%)</title><rect x="1010.8" y="115.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.8" y="126.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (10 samples, 0.09%)</title><rect x="1010.9" y="99.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1013.9" y="110.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (10 samples, 0.09%)</title><rect x="1010.9" y="83.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.9" y="94.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="1011.1" y="67.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.1" y="78.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (4 samples, 0.04%)</title><rect x="1011.3" y="51.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1014.3" y="62.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (3 samples, 0.03%)</title><rect x="1011.4" y="35.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1014.4" y="46.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::Value(rocksdb::Cache::Handle*) (4 samples, 0.04%)</title><rect x="1012.1" y="195.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1015.1" y="206.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (6 samples, 0.05%)</title><rect x="1012.8" y="211.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1015.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (4 samples, 0.04%)</title><rect x="1013.8" y="243.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (78 samples, 0.70%)</title><rect x="1014.4" y="243.0" width="8.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1017.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (4 samples, 0.04%)</title><rect x="1014.6" y="227.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1017.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (67 samples, 0.60%)</title><rect x="1015.0" y="227.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.0" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="1017.7" y="211.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1020.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (17 samples, 0.15%)</title><rect x="1018.0" y="211.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1021.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (19 samples, 0.17%)</title><rect x="1019.8" y="211.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.06%)</title><rect x="1020.9" y="195.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1023.9" y="206.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.04%)</title><rect x="1021.1" y="179.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1024.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (6 samples, 0.05%)</title><rect x="1022.7" y="243.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1025.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="1023.0" y="227.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (62 samples, 0.56%)</title><rect x="1023.4" y="243.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (3 samples, 0.03%)</title><rect x="1023.8" y="227.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (3 samples, 0.03%)</title><rect x="1024.1" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1027.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (51 samples, 0.46%)</title><rect x="1024.4" y="227.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1027.4" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (4 samples, 0.04%)</title><rect x="1027.0" y="211.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1030.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (17 samples, 0.15%)</title><rect x="1027.6" y="211.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1030.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (10 samples, 0.09%)</title><rect x="1027.9" y="195.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (4 samples, 0.04%)</title><rect x="1028.4" y="179.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1031.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (4 samples, 0.04%)</title><rect x="1029.0" y="195.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.04%)</title><rect x="1029.4" y="211.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1032.4" y="222.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.03%)</title><rect x="1029.5" y="195.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1032.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (3 samples, 0.03%)</title><rect x="1030.6" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1033.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="1030.9" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.9" y="270.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (13 samples, 0.12%)</title><rect x="1031.4" y="291.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (8 samples, 0.07%)</title><rect x="1032.8" y="307.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.8" y="318.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.04%)</title><rect x="1034.0" y="307.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1037.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (3 samples, 0.03%)</title><rect x="1034.5" y="339.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (5 samples, 0.04%)</title><rect x="1035.3" y="371.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.3" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (5 samples, 0.04%)</title><rect x="1036.1" y="387.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1039.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (8 samples, 0.07%)</title><rect x="1036.9" y="435.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1039.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.03%)</title><rect x="1037.2" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1040.2" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="1037.2" y="403.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1040.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/TimestampRecord.fromBytes (11 samples, 0.10%)</title><rect x="1037.8" y="435.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1040.8" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="1038.3" y="419.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1041.3" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (3 samples, 0.03%)</title><rect x="1038.6" y="419.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1041.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/TimestampRecord.toBytes (85 samples, 0.76%)</title><rect x="1039.0" y="451.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1042.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (26 samples, 0.23%)</title><rect x="1039.1" y="435.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1042.1" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (26 samples, 0.23%)</title><rect x="1039.1" y="419.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1042.1" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (19 samples, 0.17%)</title><rect x="1039.9" y="403.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.9" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.05%)</title><rect x="1041.3" y="387.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1044.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="1041.6" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1044.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="1041.6" y="355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1044.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (44 samples, 0.39%)</title><rect x="1042.1" y="435.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1045.1" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (39 samples, 0.35%)</title><rect x="1042.5" y="419.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1045.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (39 samples, 0.35%)</title><rect x="1042.5" y="403.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1045.5" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (27 samples, 0.24%)</title><rect x="1042.6" y="387.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1045.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (22 samples, 0.20%)</title><rect x="1043.1" y="371.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1046.1" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (6 samples, 0.05%)</title><rect x="1044.3" y="355.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1047.3" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="1045.1" y="355.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1048.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.05%)</title><rect x="1045.5" y="387.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1048.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (3 samples, 0.03%)</title><rect x="1046.3" y="387.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1049.3" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (12 samples, 0.11%)</title><rect x="1046.8" y="435.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1049.8" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (4 samples, 0.04%)</title><rect x="1047.5" y="419.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1050.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Coordinator.processResponses (114 samples, 1.02%)</title><rect x="1048.0" y="483.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1051.0" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (22 samples, 0.20%)</title><rect x="1048.6" y="467.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1051.6" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="1050.2" y="451.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1053.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/TimestampRecord.getValueAsBytes (7 samples, 0.06%)</title><rect x="1050.9" y="467.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1053.9" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (6 samples, 0.05%)</title><rect x="1051.0" y="451.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1054.0" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.05%)</title><rect x="1051.0" y="435.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/TimestampRecord.merge (74 samples, 0.66%)</title><rect x="1051.6" y="467.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1054.6" y="478.0"></text>
</g>
<g>
<title>java/util/Collection.stream (7 samples, 0.06%)</title><rect x="1053.9" y="451.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1056.9" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.spliterator (4 samples, 0.04%)</title><rect x="1053.9" y="435.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1056.9" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (3 samples, 0.03%)</title><rect x="1054.4" y="435.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1057.4" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (29 samples, 0.26%)</title><rect x="1055.5" y="451.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1058.5" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (28 samples, 0.25%)</title><rect x="1055.6" y="435.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1058.6" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (27 samples, 0.24%)</title><rect x="1055.6" y="419.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1058.6" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (26 samples, 0.23%)</title><rect x="1055.7" y="403.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1058.7" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (25 samples, 0.22%)</title><rect x="1055.7" y="387.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1058.7" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (22 samples, 0.20%)</title><rect x="1055.8" y="371.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1058.8" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (20 samples, 0.18%)</title><rect x="1056.1" y="355.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1059.1" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (13 samples, 0.12%)</title><rect x="1056.8" y="339.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1059.8" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.accept (3 samples, 0.03%)</title><rect x="1057.0" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1060.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/TimestampRecord$$Lambda$71/576603382.test (8 samples, 0.07%)</title><rect x="1057.3" y="323.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1060.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/TimestampRecord.toBytes (6 samples, 0.05%)</title><rect x="1059.4" y="467.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1062.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Nodes.getId (3 samples, 0.03%)</title><rect x="1060.1" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1063.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Nodes.getNodes (80 samples, 0.72%)</title><rect x="1060.4" y="515.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1063.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (79 samples, 0.71%)</title><rect x="1060.5" y="499.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1063.5" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (66 samples, 0.59%)</title><rect x="1060.6" y="483.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1063.6" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (4 samples, 0.04%)</title><rect x="1061.4" y="467.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1064.4" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (7 samples, 0.06%)</title><rect x="1061.9" y="467.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1064.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.add (36 samples, 0.32%)</title><rect x="1062.7" y="467.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1065.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (24 samples, 0.22%)</title><rect x="1062.8" y="451.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1065.8" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (18 samples, 0.16%)</title><rect x="1063.5" y="435.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1066.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.04%)</title><rect x="1064.2" y="419.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1067.2" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (4 samples, 0.04%)</title><rect x="1064.7" y="419.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1067.7" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/TimestampRecord.fromBytes (11 samples, 0.10%)</title><rect x="1065.4" y="451.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1068.4" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.04%)</title><rect x="1066.5" y="467.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1069.5" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1067.1" y="467.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1070.1" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (5 samples, 0.04%)</title><rect x="1067.6" y="483.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1070.6" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (5 samples, 0.04%)</title><rect x="1067.6" y="467.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1070.6" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="1067.8" y="451.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1070.8" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (6 samples, 0.05%)</title><rect x="1068.1" y="483.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1071.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (6 samples, 0.05%)</title><rect x="1068.1" y="467.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1071.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Nodes.replicas (15 samples, 0.13%)</title><rect x="1068.8" y="515.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1071.8" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (9 samples, 0.08%)</title><rect x="1069.5" y="499.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1072.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Replica.calculateRF (10 samples, 0.09%)</title><rect x="1070.4" y="515.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1073.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Nodes.replicas (3 samples, 0.03%)</title><rect x="1071.2" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1074.2" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (6 samples, 0.05%)</title><rect x="1071.5" y="547.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1074.5" y="558.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (13 samples, 0.12%)</title><rect x="1072.1" y="547.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1075.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.11%)</title><rect x="1072.2" y="531.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1075.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.08%)</title><rect x="1072.2" y="515.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1075.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.04%)</title><rect x="1072.8" y="499.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1075.8" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="1073.2" y="515.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1076.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (46 samples, 0.41%)</title><rect x="1073.5" y="547.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1076.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (46 samples, 0.41%)</title><rect x="1073.5" y="531.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1076.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (45 samples, 0.40%)</title><rect x="1073.6" y="515.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1076.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (45 samples, 0.40%)</title><rect x="1073.6" y="499.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1076.6" y="510.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (20 samples, 0.18%)</title><rect x="1074.3" y="483.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1077.3" y="494.0"></text>
</g>
<g>
<title>itable stub (17 samples, 0.15%)</title><rect x="1076.5" y="483.0" width="1.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1079.5" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (64 samples, 0.57%)</title><rect x="1078.4" y="579.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1081.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1079.4" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1082.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1079.5" y="547.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1082.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1079.5" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1082.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="1079.5" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1082.5" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (33 samples, 0.30%)</title><rect x="1079.8" y="563.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1082.8" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (33 samples, 0.30%)</title><rect x="1079.8" y="547.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1082.8" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (17 samples, 0.15%)</title><rect x="1083.3" y="563.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1086.3" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="1084.7" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1087.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (5 samples, 0.04%)</title><rect x="1085.1" y="579.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1088.1" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.04%)</title><rect x="1085.1" y="563.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1088.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (17 samples, 0.15%)</title><rect x="1085.7" y="579.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1088.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.11%)</title><rect x="1086.2" y="563.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1089.2" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.10%)</title><rect x="1086.3" y="547.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1089.3" y="558.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.03%)</title><rect x="1086.9" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1089.9" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (35 samples, 0.31%)</title><rect x="1087.6" y="579.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1090.6" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (33 samples, 0.30%)</title><rect x="1087.8" y="563.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1090.8" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (527 samples, 4.72%)</title><rect x="1091.3" y="595.0" width="55.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1094.3" y="606.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (525 samples, 4.70%)</title><rect x="1091.4" y="579.0" width="55.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1094.4" y="590.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.12%)</title><rect x="1091.6" y="563.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1094.6" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.12%)</title><rect x="1091.6" y="547.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1094.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.12%)</title><rect x="1091.6" y="531.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1094.6" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.04%)</title><rect x="1092.4" y="515.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1095.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (510 samples, 4.57%)</title><rect x="1093.0" y="563.0" width="53.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1096.0" y="574.0">sun/n..</text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.03%)</title><rect x="1093.0" y="547.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1096.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.06%)</title><rect x="1093.3" y="547.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1096.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.04%)</title><rect x="1093.5" y="531.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1096.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.04%)</title><rect x="1093.6" y="515.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1096.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.04%)</title><rect x="1093.6" y="499.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1096.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (498 samples, 4.46%)</title><rect x="1094.0" y="547.0" width="52.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1097.0" y="558.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (498 samples, 4.46%)</title><rect x="1094.0" y="531.0" width="52.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1097.0" y="542.0">sun/n..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.04%)</title><rect x="1094.4" y="515.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1097.4" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="1095.1" y="515.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1098.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (459 samples, 4.11%)</title><rect x="1095.4" y="515.0" width="48.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1098.4" y="526.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (458 samples, 4.10%)</title><rect x="1095.5" y="499.0" width="48.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1098.5" y="510.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (458 samples, 4.10%)</title><rect x="1095.5" y="483.0" width="48.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1098.5" y="494.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (9 samples, 0.08%)</title><rect x="1097.3" y="467.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1100.3" y="478.0"></text>
</g>
<g>
<title>convertReturnVal (3 samples, 0.03%)</title><rect x="1098.2" y="467.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1101.2" y="478.0"></text>
</g>
<g>
<title>rpc_errlist (428 samples, 3.83%)</title><rect x="1098.7" y="467.0" width="45.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1101.7" y="478.0">rpc_..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (25 samples, 0.22%)</title><rect x="1143.9" y="515.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1146.9" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.07%)</title><rect x="1143.9" y="499.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1146.9" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.04%)</title><rect x="1144.3" y="483.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1147.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (17 samples, 0.15%)</title><rect x="1144.8" y="499.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1147.8" y="510.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.11%)</title><rect x="1145.3" y="483.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1148.3" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.11%)</title><rect x="1145.3" y="467.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1148.3" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (12 samples, 0.11%)</title><rect x="1145.3" y="451.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1148.3" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (10 samples, 0.09%)</title><rect x="1145.5" y="435.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1148.5" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.08%)</title><rect x="1147.0" y="611.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.0" y="622.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.05%)</title><rect x="1147.3" y="595.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1150.3" y="606.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (6 samples, 0.05%)</title><rect x="1147.3" y="579.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1150.3" y="590.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (5 samples, 0.04%)</title><rect x="1147.4" y="563.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1150.4" y="574.0"></text>
</g>
<g>
<title>thread_start (398 samples, 3.57%)</title><rect x="1147.9" y="643.0" width="42.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1150.9" y="654.0">thre..</text>
</g>
<g>
<title>_pthread_start (398 samples, 3.57%)</title><rect x="1147.9" y="627.0" width="42.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1150.9" y="638.0">_pth..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (398 samples, 3.57%)</title><rect x="1147.9" y="611.0" width="42.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1150.9" y="622.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (398 samples, 3.57%)</title><rect x="1147.9" y="595.0" width="42.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.9" y="606.0">Thre..</text>
</g>
<g>
<title>GangWorker::loop() (60 samples, 0.54%)</title><rect x="1148.0" y="579.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.0" y="590.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (6 samples, 0.05%)</title><rect x="1148.0" y="563.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.0" y="574.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::do_serial_work() (3 samples, 0.03%)</title><rect x="1148.1" y="547.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.1" y="558.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3 samples, 0.03%)</title><rect x="1148.1" y="531.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.1" y="542.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (43 samples, 0.39%)</title><rect x="1148.7" y="563.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.7" y="574.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 0.12%)</title><rect x="1148.7" y="547.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.7" y="558.0"></text>
</g>
<g>
<title>SpinPause (10 samples, 0.09%)</title><rect x="1149.0" y="531.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1152.0" y="542.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (9 samples, 0.08%)</title><rect x="1150.0" y="547.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.0" y="558.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (9 samples, 0.08%)</title><rect x="1150.0" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.0" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (9 samples, 0.08%)</title><rect x="1150.0" y="515.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.0" y="526.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (9 samples, 0.08%)</title><rect x="1150.0" y="499.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.0" y="510.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.06%)</title><rect x="1150.3" y="483.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="494.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (7 samples, 0.06%)</title><rect x="1150.3" y="467.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.3" y="478.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (7 samples, 0.06%)</title><rect x="1150.3" y="451.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.3" y="462.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (5 samples, 0.04%)</title><rect x="1151.0" y="547.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.0" y="558.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (5 samples, 0.04%)</title><rect x="1151.0" y="531.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.0" y="542.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (3 samples, 0.03%)</title><rect x="1151.2" y="515.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.2" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (12 samples, 0.11%)</title><rect x="1151.5" y="547.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.5" y="558.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (9 samples, 0.08%)</title><rect x="1151.6" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.6" y="542.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (8 samples, 0.07%)</title><rect x="1151.7" y="515.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.7" y="526.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (8 samples, 0.07%)</title><rect x="1151.7" y="499.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.7" y="510.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (8 samples, 0.07%)</title><rect x="1151.7" y="483.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.7" y="494.0"></text>
</g>
<g>
<title>frame::oops_code_blob_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) (4 samples, 0.04%)</title><rect x="1151.9" y="467.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="478.0"></text>
</g>
<g>
<title>os::elapsedTime() (3 samples, 0.03%)</title><rect x="1152.9" y="547.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.9" y="558.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (3 samples, 0.03%)</title><rect x="1153.3" y="563.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.3" y="574.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 0.03%)</title><rect x="1153.3" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.3" y="558.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (7 samples, 0.06%)</title><rect x="1153.6" y="563.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="574.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (7 samples, 0.06%)</title><rect x="1153.6" y="547.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1156.6" y="558.0"></text>
</g>
<g>
<title>JavaThread::run() (328 samples, 2.94%)</title><rect x="1154.4" y="579.0" width="34.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.4" y="590.0">Ja..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (328 samples, 2.94%)</title><rect x="1154.4" y="563.0" width="34.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.4" y="574.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (323 samples, 2.89%)</title><rect x="1154.4" y="547.0" width="34.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.4" y="558.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (323 samples, 2.89%)</title><rect x="1154.4" y="531.0" width="34.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.4" y="542.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (311 samples, 2.79%)</title><rect x="1154.4" y="515.0" width="32.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.4" y="526.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (311 samples, 2.79%)</title><rect x="1154.4" y="499.0" width="32.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.4" y="510.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (176 samples, 1.58%)</title><rect x="1154.4" y="483.0" width="18.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.4" y="494.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.05%)</title><rect x="1154.5" y="467.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.5" y="478.0"></text>
</g>
<g>
<title>Matcher::match() (19 samples, 0.17%)</title><rect x="1155.1" y="467.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.1" y="478.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (17 samples, 0.15%)</title><rect x="1155.3" y="451.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.3" y="462.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (5 samples, 0.04%)</title><rect x="1155.5" y="435.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.5" y="446.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (3 samples, 0.03%)</title><rect x="1156.3" y="435.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.3" y="446.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 0.04%)</title><rect x="1156.6" y="435.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.6" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (17 samples, 0.15%)</title><rect x="1157.4" y="467.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.4" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (17 samples, 0.15%)</title><rect x="1157.4" y="451.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.4" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.03%)</title><rect x="1157.4" y="435.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.03%)</title><rect x="1157.8" y="435.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.8" y="446.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 0.07%)</title><rect x="1158.3" y="435.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.3" y="446.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.03%)</title><rect x="1158.6" y="419.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (130 samples, 1.16%)</title><rect x="1159.2" y="467.0" width="13.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.2" y="478.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (4 samples, 0.04%)</title><rect x="1159.4" y="451.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.4" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (12 samples, 0.11%)</title><rect x="1159.9" y="451.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.9" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (7 samples, 0.06%)</title><rect x="1160.0" y="435.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.0" y="446.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (3 samples, 0.03%)</title><rect x="1160.7" y="435.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.7" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.04%)</title><rect x="1161.1" y="451.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.1" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (13 samples, 0.12%)</title><rect x="1161.6" y="451.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.6" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (36 samples, 0.32%)</title><rect x="1162.9" y="451.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.9" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (19 samples, 0.17%)</title><rect x="1163.8" y="435.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.8" y="446.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.04%)</title><rect x="1163.8" y="419.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.8" y="430.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.04%)</title><rect x="1164.3" y="419.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.3" y="430.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.04%)</title><rect x="1164.7" y="419.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="430.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (6 samples, 0.05%)</title><rect x="1165.2" y="419.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.2" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (9 samples, 0.08%)</title><rect x="1165.8" y="435.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.8" y="446.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.03%)</title><rect x="1166.4" y="419.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.4" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.03%)</title><rect x="1166.7" y="451.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.7" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (13 samples, 0.12%)</title><rect x="1167.2" y="451.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.2" y="462.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (4 samples, 0.04%)</title><rect x="1168.1" y="435.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.1" y="446.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.04%)</title><rect x="1168.1" y="419.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.1" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (13 samples, 0.12%)</title><rect x="1168.5" y="451.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.5" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.04%)</title><rect x="1168.9" y="435.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="446.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 0.07%)</title><rect x="1170.0" y="451.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.0" y="462.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 0.05%)</title><rect x="1170.2" y="435.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.2" y="446.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 0.05%)</title><rect x="1170.2" y="419.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.2" y="430.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.03%)</title><rect x="1170.2" y="403.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.2" y="414.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.04%)</title><rect x="1171.1" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.1" y="462.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (10 samples, 0.09%)</title><rect x="1171.6" y="451.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.6" y="462.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.03%)</title><rect x="1172.2" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.2" y="446.0"></text>
</g>
<g>
<title>Compile::Optimize() (107 samples, 0.96%)</title><rect x="1173.0" y="483.0" width="11.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.0" y="494.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (42 samples, 0.38%)</title><rect x="1173.3" y="467.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (42 samples, 0.38%)</title><rect x="1173.3" y="451.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.3" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.04%)</title><rect x="1173.6" y="435.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.04%)</title><rect x="1174.0" y="435.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.0" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (4 samples, 0.04%)</title><rect x="1174.1" y="419.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.04%)</title><rect x="1174.1" y="403.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.1" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 0.13%)</title><rect x="1174.6" y="435.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (12 samples, 0.11%)</title><rect x="1174.9" y="419.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 0.07%)</title><rect x="1175.2" y="403.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (10 samples, 0.09%)</title><rect x="1176.3" y="435.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.04%)</title><rect x="1176.7" y="419.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.04%)</title><rect x="1177.3" y="435.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.3" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.04%)</title><rect x="1177.3" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.3" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.04%)</title><rect x="1177.8" y="467.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.04%)</title><rect x="1177.8" y="451.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (4 samples, 0.04%)</title><rect x="1177.8" y="435.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="446.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.04%)</title><rect x="1178.4" y="467.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (32 samples, 0.29%)</title><rect x="1178.8" y="467.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 0.12%)</title><rect x="1179.6" y="451.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 0.08%)</title><rect x="1180.1" y="435.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.1" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 0.05%)</title><rect x="1180.2" y="419.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.03%)</title><rect x="1181.1" y="451.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.1" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.04%)</title><rect x="1181.4" y="451.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.04%)</title><rect x="1181.4" y="435.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 0.11%)</title><rect x="1182.2" y="467.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 0.11%)</title><rect x="1182.2" y="451.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.04%)</title><rect x="1182.5" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="446.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.03%)</title><rect x="1183.7" y="467.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.03%)</title><rect x="1183.7" y="451.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (23 samples, 0.21%)</title><rect x="1184.6" y="483.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (23 samples, 0.21%)</title><rect x="1184.6" y="467.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (23 samples, 0.21%)</title><rect x="1184.6" y="451.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (23 samples, 0.21%)</title><rect x="1184.6" y="435.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (21 samples, 0.19%)</title><rect x="1184.6" y="419.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (16 samples, 0.14%)</title><rect x="1184.7" y="403.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (16 samples, 0.14%)</title><rect x="1184.7" y="387.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.13%)</title><rect x="1184.8" y="371.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 0.13%)</title><rect x="1184.8" y="355.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (15 samples, 0.13%)</title><rect x="1184.8" y="339.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.12%)</title><rect x="1184.8" y="323.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.12%)</title><rect x="1184.8" y="307.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.12%)</title><rect x="1184.8" y="291.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.12%)</title><rect x="1184.8" y="275.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.10%)</title><rect x="1184.8" y="259.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.06%)</title><rect x="1185.0" y="243.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.0" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.06%)</title><rect x="1185.0" y="227.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.06%)</title><rect x="1185.0" y="211.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.06%)</title><rect x="1185.0" y="195.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.05%)</title><rect x="1185.0" y="179.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.0" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1185.2" y="163.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1185.2" y="147.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1185.2" y="131.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1185.2" y="115.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1185.2" y="99.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1185.2" y="83.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1185.2" y="67.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1185.2" y="51.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.2" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1185.2" y="35.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1186.4" y="403.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1186.4" y="387.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1186.4" y="371.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1186.4" y="355.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1186.4" y="339.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1186.4" y="323.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1186.5" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1186.5" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1186.5" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1186.5" y="259.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1186.5" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.5" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1186.5" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.5" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1186.5" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1186.5" y="195.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1186.5" y="179.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.5" y="190.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (12 samples, 0.11%)</title><rect x="1187.3" y="515.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.3" y="526.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (12 samples, 0.11%)</title><rect x="1187.3" y="499.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.3" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_method() (12 samples, 0.11%)</title><rect x="1187.3" y="483.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="494.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (9 samples, 0.08%)</title><rect x="1187.3" y="467.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.3" y="478.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.03%)</title><rect x="1187.3" y="451.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.3" y="462.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 0.03%)</title><rect x="1187.8" y="451.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="462.0"></text>
</g>
<g>
<title>VMThread::run() (7 samples, 0.06%)</title><rect x="1189.0" y="579.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.0" y="590.0"></text>
</g>
<g>
<title>VMThread::loop() (7 samples, 0.06%)</title><rect x="1189.0" y="563.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.0" y="574.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (6 samples, 0.05%)</title><rect x="1189.2" y="547.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.2" y="558.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (6 samples, 0.05%)</title><rect x="1189.2" y="531.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.2" y="542.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (6 samples, 0.05%)</title><rect x="1189.2" y="515.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.2" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (6 samples, 0.05%)</title><rect x="1189.2" y="499.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.2" y="510.0"></text>
</g>
</g>
</svg>
