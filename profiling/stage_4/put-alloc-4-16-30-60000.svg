<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (159,082 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (94,275 samples, 59.26%)</title><rect x="10.0" y="307.0" width="699.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (94,275 samples, 59.26%)</title><rect x="10.0" y="291.0" width="699.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (94,275 samples, 59.26%)</title><rect x="10.0" y="275.0" width="699.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4,223 samples, 2.65%)</title><rect x="10.0" y="259.0" width="31.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="270.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (4,223 samples, 2.65%)</title><rect x="10.0" y="243.0" width="31.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="254.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4,188 samples, 2.63%)</title><rect x="10.0" y="227.0" width="31.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="238.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (4,188 samples, 2.63%)</title><rect x="10.0" y="211.0" width="31.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="222.0">ja..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (4,188 samples, 2.63%)</title><rect x="10.0" y="195.0" width="31.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="13.0" y="206.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (35 samples, 0.02%)</title><rect x="41.1" y="227.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (35 samples, 0.02%)</title><rect x="41.1" y="211.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (35 samples, 0.02%)</title><rect x="41.1" y="195.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (35 samples, 0.02%)</title><rect x="41.1" y="179.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.1" y="190.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (35 samples, 0.02%)</title><rect x="41.1" y="163.0" width="0.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="44.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$84/1063156396.run (90,052 samples, 56.61%)</title><rect x="41.3" y="259.0" width="668.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.3" y="270.0">ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$84/1063156396.run</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$1 (90,052 samples, 56.61%)</title><rect x="41.3" y="243.0" width="668.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.3" y="254.0">ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$1</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15,625 samples, 9.82%)</title><rect x="41.3" y="227.0" width="115.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.3" y="238.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15,625 samples, 9.82%)</title><rect x="41.3" y="211.0" width="115.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.3" y="222.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10,517 samples, 6.61%)</title><rect x="41.3" y="195.0" width="78.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="44.3" y="206.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (10,517 samples, 6.61%)</title><rect x="41.3" y="179.0" width="78.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="44.3" y="190.0">one/nio/u..</text>
</g>
<g>
<title>byte[] (10,517 samples, 6.61%)</title><rect x="41.3" y="163.0" width="78.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="44.3" y="174.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (5,108 samples, 3.21%)</title><rect x="119.3" y="195.0" width="37.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.3" y="206.0">one..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (5,108 samples, 3.21%)</title><rect x="119.3" y="179.0" width="37.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="122.3" y="190.0">one..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$77/809468781.act (33,383 samples, 20.98%)</title><rect x="157.2" y="227.0" width="247.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.2" y="238.0">ru/mail/polis/service/stakenschne..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$4 (33,383 samples, 20.98%)</title><rect x="157.2" y="211.0" width="247.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.2" y="222.0">ru/mail/polis/service/stakenschne..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.put (33,383 samples, 20.98%)</title><rect x="157.2" y="195.0" width="247.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.2" y="206.0">ru/mail/polis/service/stakenschne..</text>
</g>
<g>
<title>one.nio.http.Response (2,899 samples, 1.82%)</title><rect x="157.2" y="179.0" width="21.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="160.2" y="190.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (11,234 samples, 7.06%)</title><rect x="178.7" y="179.0" width="83.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="181.7" y="190.0">one/nio/h..</text>
</g>
<g>
<title>byte[] (4,790 samples, 3.01%)</title><rect x="178.7" y="163.0" width="35.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="181.7" y="174.0">byt..</text>
</g>
<g>
<title>java.lang.String[] (3,811 samples, 2.40%)</title><rect x="214.3" y="163.0" width="28.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="217.3" y="174.0">ja..</text>
</g>
<g>
<title>java.lang.String (2,633 samples, 1.66%)</title><rect x="242.5" y="163.0" width="19.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="245.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (19,250 samples, 12.10%)</title><rect x="262.1" y="179.0" width="142.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.1" y="190.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (8,991 samples, 5.65%)</title><rect x="262.1" y="163.0" width="66.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.1" y="174.0">ru/mail..</text>
</g>
<g>
<title>byte[] (2,986 samples, 1.88%)</title><rect x="262.1" y="147.0" width="22.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="265.1" y="158.0">b..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6,005 samples, 3.77%)</title><rect x="284.2" y="147.0" width="44.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.2" y="158.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,005 samples, 3.77%)</title><rect x="284.2" y="131.0" width="44.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="287.2" y="142.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (10,259 samples, 6.45%)</title><rect x="328.7" y="163.0" width="76.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="331.7" y="174.0">ru/mail/..</text>
</g>
<g>
<title>byte[] (3,085 samples, 1.94%)</title><rect x="328.7" y="147.0" width="22.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="331.7" y="158.0">b..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (7,174 samples, 4.51%)</title><rect x="351.6" y="147.0" width="53.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.6" y="158.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7,174 samples, 4.51%)</title><rect x="351.6" y="131.0" width="53.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="354.6" y="142.0">java...</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$79/475073154.act (41,044 samples, 25.80%)</title><rect x="404.8" y="227.0" width="304.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.8" y="238.0">ru/mail/polis/service/stakenschneider/Asy..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$2 (41,044 samples, 25.80%)</title><rect x="404.8" y="211.0" width="304.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.8" y="222.0">ru/mail/polis/service/stakenschneider/Asy..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.forwardRequestTo (41,044 samples, 25.80%)</title><rect x="404.8" y="195.0" width="304.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="407.8" y="206.0">ru/mail/polis/service/stakenschneider/Asy..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (41,044 samples, 25.80%)</title><rect x="404.8" y="179.0" width="304.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.8" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (41,044 samples, 25.80%)</title><rect x="404.8" y="163.0" width="304.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="407.8" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (57 samples, 0.04%)</title><rect x="404.8" y="147.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="407.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (38,619 samples, 24.28%)</title><rect x="405.3" y="147.0" width="286.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.3" y="158.0">one/nio/http/HttpClient$ResponseReader..</text>
</g>
<g>
<title>byte[] (21,373 samples, 13.44%)</title><rect x="405.3" y="131.0" width="158.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="408.3" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (17,226 samples, 10.83%)</title><rect x="563.8" y="131.0" width="127.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="566.8" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,992 samples, 1.25%)</title><rect x="691.7" y="147.0" width="14.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="694.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (83 samples, 0.05%)</title><rect x="692.0" y="131.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="695.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (83 samples, 0.05%)</title><rect x="692.0" y="115.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="695.0" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (58 samples, 0.04%)</title><rect x="692.1" y="99.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="695.1" y="110.0"></text>
</g>
<g>
<title>byte[] (58 samples, 0.04%)</title><rect x="692.1" y="83.0" width="0.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="695.1" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (44 samples, 0.03%)</title><rect x="692.6" y="131.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="695.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1,737 samples, 1.09%)</title><rect x="692.9" y="131.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="695.9" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,737 samples, 1.09%)</title><rect x="692.9" y="115.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="695.9" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,737 samples, 1.09%)</title><rect x="692.9" y="99.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="695.9" y="110.0"></text>
</g>
<g>
<title>char[] (1,419 samples, 0.89%)</title><rect x="692.9" y="83.0" width="10.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="695.9" y="94.0"></text>
</g>
<g>
<title>java.lang.String (133 samples, 0.08%)</title><rect x="703.4" y="83.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="706.4" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (185 samples, 0.12%)</title><rect x="704.4" y="83.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="707.4" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (185 samples, 0.12%)</title><rect x="704.4" y="67.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="707.4" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (185 samples, 0.12%)</title><rect x="704.4" y="51.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="707.4" y="62.0"></text>
</g>
<g>
<title>byte[] (185 samples, 0.12%)</title><rect x="704.4" y="35.0" width="1.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="707.4" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (38 samples, 0.02%)</title><rect x="705.8" y="131.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="708.8" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (38 samples, 0.02%)</title><rect x="705.8" y="115.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="708.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (59 samples, 0.04%)</title><rect x="706.1" y="131.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="709.1" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (59 samples, 0.04%)</title><rect x="706.1" y="115.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.1" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (59 samples, 0.04%)</title><rect x="706.1" y="99.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="709.1" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (171 samples, 0.11%)</title><rect x="706.5" y="147.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="709.5" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (171 samples, 0.11%)</title><rect x="706.5" y="131.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.5" y="142.0"></text>
</g>
<g>
<title>byte[] (171 samples, 0.11%)</title><rect x="706.5" y="115.0" width="1.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="709.5" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (65 samples, 0.04%)</title><rect x="707.8" y="147.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="710.8" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (65 samples, 0.04%)</title><rect x="707.8" y="131.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.8" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (65 samples, 0.04%)</title><rect x="707.8" y="115.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="710.8" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (38 samples, 0.02%)</title><rect x="708.0" y="99.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="711.0" y="110.0"></text>
</g>
<g>
<title>byte[] (38 samples, 0.02%)</title><rect x="708.0" y="83.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="711.0" y="94.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (102 samples, 0.06%)</title><rect x="708.3" y="147.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="711.3" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (50 samples, 0.03%)</title><rect x="708.3" y="131.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="711.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (50 samples, 0.03%)</title><rect x="708.3" y="115.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="711.3" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (50 samples, 0.03%)</title><rect x="708.3" y="99.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.3" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (50 samples, 0.03%)</title><rect x="708.3" y="83.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="711.3" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (52 samples, 0.03%)</title><rect x="708.6" y="131.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.6" y="142.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (40 samples, 0.03%)</title><rect x="708.6" y="115.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="711.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (40 samples, 0.03%)</title><rect x="708.6" y="99.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.6" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (40 samples, 0.03%)</title><rect x="708.6" y="83.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="711.6" y="94.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (40 samples, 0.03%)</title><rect x="708.6" y="67.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.6" y="78.0"></text>
</g>
<g>
<title>java.nio.channels.Channels$1 (40 samples, 0.03%)</title><rect x="708.6" y="51.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="711.6" y="62.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (38 samples, 0.02%)</title><rect x="709.0" y="147.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="712.0" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (38 samples, 0.02%)</title><rect x="709.0" y="131.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.0" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (38 samples, 0.02%)</title><rect x="709.0" y="115.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.0" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (38 samples, 0.02%)</title><rect x="709.0" y="99.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="712.0" y="110.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (64,804 samples, 40.74%)</title><rect x="709.3" y="307.0" width="480.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="712.3" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (8,094 samples, 5.09%)</title><rect x="709.3" y="291.0" width="60.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="712.3" y="302.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3,430 samples, 2.16%)</title><rect x="709.3" y="275.0" width="25.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.3" y="286.0">o..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (1,599 samples, 1.01%)</title><rect x="709.3" y="259.0" width="11.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="712.3" y="270.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (1,831 samples, 1.15%)</title><rect x="721.2" y="259.0" width="13.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="724.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (4,664 samples, 2.93%)</title><rect x="734.8" y="275.0" width="34.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="737.8" y="286.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (4,664 samples, 2.93%)</title><rect x="734.8" y="259.0" width="34.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="737.8" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (4,664 samples, 2.93%)</title><rect x="734.8" y="243.0" width="34.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.8" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4,664 samples, 2.93%)</title><rect x="734.8" y="227.0" width="34.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="737.8" y="238.0">su..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (2,000 samples, 1.26%)</title><rect x="734.8" y="211.0" width="14.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="737.8" y="222.0"></text>
</g>
<g>
<title>java.lang.Integer (2,000 samples, 1.26%)</title><rect x="734.8" y="195.0" width="14.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="737.8" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2,664 samples, 1.67%)</title><rect x="749.6" y="211.0" width="19.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="752.6" y="222.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2,664 samples, 1.67%)</title><rect x="749.6" y="195.0" width="19.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="752.6" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2,664 samples, 1.67%)</title><rect x="749.6" y="179.0" width="19.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="752.6" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2,664 samples, 1.67%)</title><rect x="749.6" y="163.0" width="19.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="752.6" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2,664 samples, 1.67%)</title><rect x="749.6" y="147.0" width="19.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="752.6" y="158.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (2,664 samples, 1.67%)</title><rect x="749.6" y="131.0" width="19.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="752.6" y="142.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (56,709 samples, 35.65%)</title><rect x="769.4" y="291.0" width="420.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="772.4" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (56,709 samples, 35.65%)</title><rect x="769.4" y="275.0" width="420.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="772.4" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (56,613 samples, 35.59%)</title><rect x="769.4" y="259.0" width="419.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="772.4" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (16,314 samples, 10.26%)</title><rect x="769.4" y="243.0" width="121.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.4" y="254.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (16,314 samples, 10.26%)</title><rect x="769.4" y="227.0" width="121.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="772.4" y="238.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (12,204 samples, 7.67%)</title><rect x="769.4" y="211.0" width="90.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="772.4" y="222.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3,281 samples, 2.06%)</title><rect x="769.4" y="195.0" width="24.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="772.4" y="206.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (3,281 samples, 2.06%)</title><rect x="769.4" y="179.0" width="24.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.4" y="190.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,281 samples, 2.06%)</title><rect x="769.4" y="163.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="772.4" y="174.0">j..</text>
</g>
<g>
<title>java.lang.String (1,603 samples, 1.01%)</title><rect x="769.4" y="147.0" width="11.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="772.4" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,678 samples, 1.05%)</title><rect x="781.2" y="147.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="784.2" y="158.0"></text>
</g>
<g>
<title>byte[] (1,678 samples, 1.05%)</title><rect x="781.2" y="131.0" width="12.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="784.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (8,923 samples, 5.61%)</title><rect x="793.7" y="195.0" width="66.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.7" y="206.0">ru/mail..</text>
</g>
<g>
<title>java/lang/String.getBytes (1,646 samples, 1.03%)</title><rect x="793.7" y="179.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.7" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,646 samples, 1.03%)</title><rect x="793.7" y="163.0" width="12.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.7" y="174.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,646 samples, 1.03%)</title><rect x="793.7" y="147.0" width="12.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.7" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,646 samples, 1.03%)</title><rect x="793.7" y="131.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="796.7" y="142.0"></text>
</g>
<g>
<title>byte[] (1,646 samples, 1.03%)</title><rect x="793.7" y="115.0" width="12.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="796.7" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,688 samples, 1.06%)</title><rect x="805.9" y="179.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="808.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,688 samples, 1.06%)</title><rect x="805.9" y="163.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="808.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$77/809468781.get$Lambda (1,236 samples, 0.78%)</title><rect x="805.9" y="147.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="808.9" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.stakenschneider.AsyncServiceImpl$$Lambda$77 (1,236 samples, 0.78%)</title><rect x="805.9" y="131.0" width="9.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="808.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$79/475073154.get$Lambda (452 samples, 0.28%)</title><rect x="815.1" y="147.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="818.1" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.stakenschneider.AsyncServiceImpl$$Lambda$79 (452 samples, 0.28%)</title><rect x="815.1" y="131.0" width="3.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="818.1" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,682 samples, 2.31%)</title><rect x="818.4" y="179.0" width="27.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="821.4" y="190.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,682 samples, 2.31%)</title><rect x="818.4" y="163.0" width="27.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.4" y="174.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,682 samples, 2.31%)</title><rect x="818.4" y="147.0" width="27.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="821.4" y="158.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (1,907 samples, 1.20%)</title><rect x="845.7" y="179.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="848.7" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,888 samples, 1.19%)</title><rect x="845.7" y="163.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="848.7" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,888 samples, 1.19%)</title><rect x="845.7" y="147.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="848.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$84/1063156396.get$Lambda (1,888 samples, 1.19%)</title><rect x="845.7" y="131.0" width="14.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="848.7" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.stakenschneider.AsyncServiceImpl$$Lambda$84 (1,888 samples, 1.19%)</title><rect x="845.7" y="115.0" width="14.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="848.7" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4,110 samples, 2.58%)</title><rect x="859.9" y="211.0" width="30.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="862.9" y="222.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (4,110 samples, 2.58%)</title><rect x="859.9" y="195.0" width="30.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="862.9" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,110 samples, 2.58%)</title><rect x="859.9" y="179.0" width="30.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="862.9" y="190.0">ja..</text>
</g>
<g>
<title>java.lang.String (1,789 samples, 1.12%)</title><rect x="859.9" y="163.0" width="13.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="862.9" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,321 samples, 1.46%)</title><rect x="873.2" y="163.0" width="17.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="876.2" y="174.0"></text>
</g>
<g>
<title>byte[] (2,321 samples, 1.46%)</title><rect x="873.2" y="147.0" width="17.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="876.2" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (17,657 samples, 11.10%)</title><rect x="890.4" y="243.0" width="130.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="893.4" y="254.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one.nio.http.Request (2,852 samples, 1.79%)</title><rect x="890.4" y="227.0" width="21.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="893.4" y="238.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6,361 samples, 4.00%)</title><rect x="911.5" y="227.0" width="47.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="914.5" y="238.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (6,361 samples, 4.00%)</title><rect x="911.5" y="211.0" width="47.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="914.5" y="222.0">java..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (8,444 samples, 5.31%)</title><rect x="958.7" y="227.0" width="62.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="961.7" y="238.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (8,444 samples, 5.31%)</title><rect x="958.7" y="211.0" width="62.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="961.7" y="222.0">one/ni..</text>
</g>
<g>
<title>char[] (3,934 samples, 2.47%)</title><rect x="958.7" y="195.0" width="29.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="961.7" y="206.0">ch..</text>
</g>
<g>
<title>java.lang.String (1,739 samples, 1.09%)</title><rect x="987.9" y="195.0" width="12.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="990.9" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,771 samples, 1.74%)</title><rect x="1000.8" y="195.0" width="20.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1003.8" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,771 samples, 1.74%)</title><rect x="1000.8" y="179.0" width="20.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1003.8" y="190.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,771 samples, 1.74%)</title><rect x="1000.8" y="163.0" width="20.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1003.8" y="174.0"></text>
</g>
<g>
<title>byte[] (2,771 samples, 1.74%)</title><rect x="1000.8" y="147.0" width="20.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1003.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1,563 samples, 0.98%)</title><rect x="1021.3" y="243.0" width="11.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1024.3" y="254.0"></text>
</g>
<g>
<title>byte[] (1,563 samples, 0.98%)</title><rect x="1021.3" y="227.0" width="11.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1024.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3,926 samples, 2.47%)</title><rect x="1032.9" y="243.0" width="29.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1035.9" y="254.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (3,926 samples, 2.47%)</title><rect x="1032.9" y="227.0" width="29.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1035.9" y="238.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,926 samples, 2.47%)</title><rect x="1032.9" y="211.0" width="29.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1035.9" y="222.0">ja..</text>
</g>
<g>
<title>java.lang.String (1,734 samples, 1.09%)</title><rect x="1032.9" y="195.0" width="12.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1035.9" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,192 samples, 1.38%)</title><rect x="1045.8" y="195.0" width="16.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1048.8" y="206.0"></text>
</g>
<g>
<title>byte[] (2,192 samples, 1.38%)</title><rect x="1045.8" y="179.0" width="16.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1048.8" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17,153 samples, 10.78%)</title><rect x="1062.1" y="243.0" width="127.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1065.1" y="254.0">one/nio/util/Utf..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (17,153 samples, 10.78%)</title><rect x="1062.1" y="227.0" width="127.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1065.1" y="238.0">one/nio/util/Utf..</text>
</g>
<g>
<title>char[] (8,264 samples, 5.19%)</title><rect x="1062.1" y="211.0" width="61.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1065.1" y="222.0">char[]</text>
</g>
<g>
<title>java.lang.String (3,240 samples, 2.04%)</title><rect x="1123.4" y="211.0" width="24.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1126.4" y="222.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5,649 samples, 3.55%)</title><rect x="1147.4" y="211.0" width="41.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1150.4" y="222.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5,649 samples, 3.55%)</title><rect x="1147.4" y="195.0" width="41.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1150.4" y="206.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (5,649 samples, 3.55%)</title><rect x="1147.4" y="179.0" width="41.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1150.4" y="190.0">jav..</text>
</g>
<g>
<title>byte[] (5,649 samples, 3.55%)</title><rect x="1147.4" y="163.0" width="41.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1150.4" y="174.0">byt..</text>
</g>
<g>
<title>one/nio/net/Session.read (96 samples, 0.06%)</title><rect x="1189.3" y="259.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1192.3" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (96 samples, 0.06%)</title><rect x="1189.3" y="243.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1192.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (95 samples, 0.06%)</title><rect x="1189.3" y="227.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1192.3" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (95 samples, 0.06%)</title><rect x="1189.3" y="211.0" width="0.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1192.3" y="222.0"></text>
</g>
</g>
</svg>
