<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="485"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="485"> </text>
<g id="frames">
<g>
<title>all (149,061 samples, 100.00%)</title><rect x="10.0" y="451.0" width="1180.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="462.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (88,522 samples, 59.39%)</title><rect x="10.0" y="435.0" width="700.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (88,522 samples, 59.39%)</title><rect x="10.0" y="419.0" width="700.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="430.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (88,522 samples, 59.39%)</title><rect x="10.0" y="403.0" width="700.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="414.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4,044 samples, 2.71%)</title><rect x="10.0" y="387.0" width="32.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="398.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (4,044 samples, 2.71%)</title><rect x="10.0" y="371.0" width="32.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="382.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3,989 samples, 2.68%)</title><rect x="10.0" y="355.0" width="31.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="366.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3,989 samples, 2.68%)</title><rect x="10.0" y="339.0" width="31.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="350.0">ja..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (3,989 samples, 2.68%)</title><rect x="10.0" y="323.0" width="31.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="13.0" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (55 samples, 0.04%)</title><rect x="41.6" y="355.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (55 samples, 0.04%)</title><rect x="41.6" y="339.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (55 samples, 0.04%)</title><rect x="41.6" y="323.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (55 samples, 0.04%)</title><rect x="41.6" y="307.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.6" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (55 samples, 0.04%)</title><rect x="41.6" y="291.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="44.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$84/1063156396.run (84,478 samples, 56.67%)</title><rect x="42.0" y="387.0" width="668.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.0" y="398.0">ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$84/1063156396.run</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$1 (84,478 samples, 56.67%)</title><rect x="42.0" y="371.0" width="668.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.0" y="382.0">ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$1</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (18,110 samples, 12.15%)</title><rect x="42.0" y="355.0" width="143.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.0" y="366.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (18,110 samples, 12.15%)</title><rect x="42.0" y="339.0" width="143.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.0" y="350.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12,849 samples, 8.62%)</title><rect x="42.0" y="323.0" width="101.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="45.0" y="334.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (12,849 samples, 8.62%)</title><rect x="42.0" y="307.0" width="101.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="45.0" y="318.0">one/nio/util..</text>
</g>
<g>
<title>byte[] (12,849 samples, 8.62%)</title><rect x="42.0" y="291.0" width="101.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="45.0" y="302.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (5,261 samples, 3.53%)</title><rect x="143.7" y="323.0" width="41.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.7" y="334.0">one..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (5,261 samples, 3.53%)</title><rect x="143.7" y="307.0" width="41.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="146.7" y="318.0">one..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$79/475073154.act (33,571 samples, 22.52%)</title><rect x="185.4" y="355.0" width="265.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.4" y="366.0">ru/mail/polis/service/stakenschneid..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$2 (33,571 samples, 22.52%)</title><rect x="185.4" y="339.0" width="265.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.4" y="350.0">ru/mail/polis/service/stakenschneid..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.forwardRequestTo (33,571 samples, 22.52%)</title><rect x="185.4" y="323.0" width="265.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.4" y="334.0">ru/mail/polis/service/stakenschneid..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (33,571 samples, 22.52%)</title><rect x="185.4" y="307.0" width="265.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.4" y="318.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (33,571 samples, 22.52%)</title><rect x="185.4" y="291.0" width="265.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.4" y="302.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (74 samples, 0.05%)</title><rect x="185.4" y="275.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="188.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (31,043 samples, 20.83%)</title><rect x="186.0" y="275.0" width="245.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.0" y="286.0">one/nio/http/HttpClient$ResponseR..</text>
</g>
<g>
<title>byte[] (20,501 samples, 13.75%)</title><rect x="186.0" y="259.0" width="162.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="189.0" y="270.0">byte[]</text>
</g>
<g>
<title>byte[] (10,542 samples, 7.07%)</title><rect x="348.3" y="259.0" width="83.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="351.3" y="270.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,990 samples, 1.34%)</title><rect x="431.7" y="275.0" width="15.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (72 samples, 0.05%)</title><rect x="431.9" y="259.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="434.9" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (72 samples, 0.05%)</title><rect x="431.9" y="243.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="434.9" y="254.0"></text>
</g>
<g>
<title>java.lang.String (33 samples, 0.02%)</title><rect x="431.9" y="227.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="434.9" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (39 samples, 0.03%)</title><rect x="432.2" y="227.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="435.2" y="238.0"></text>
</g>
<g>
<title>byte[] (39 samples, 0.03%)</title><rect x="432.2" y="211.0" width="0.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="435.2" y="222.0"></text>
</g>
<g>
<title>one.nio.http.Response (39 samples, 0.03%)</title><rect x="432.5" y="259.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="435.5" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1,738 samples, 1.17%)</title><rect x="432.8" y="259.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="435.8" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,738 samples, 1.17%)</title><rect x="432.8" y="243.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,738 samples, 1.17%)</title><rect x="432.8" y="227.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.8" y="238.0"></text>
</g>
<g>
<title>char[] (1,474 samples, 0.99%)</title><rect x="432.8" y="211.0" width="11.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="435.8" y="222.0"></text>
</g>
<g>
<title>java.lang.String (131 samples, 0.09%)</title><rect x="444.5" y="211.0" width="1.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="447.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (133 samples, 0.09%)</title><rect x="445.5" y="211.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (133 samples, 0.09%)</title><rect x="445.5" y="195.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.5" y="206.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (133 samples, 0.09%)</title><rect x="445.5" y="179.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.5" y="190.0"></text>
</g>
<g>
<title>byte[] (133 samples, 0.09%)</title><rect x="445.5" y="163.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="448.5" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (52 samples, 0.03%)</title><rect x="446.5" y="259.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="449.5" y="270.0"></text>
</g>
<g>
<title>java.lang.String[] (52 samples, 0.03%)</title><rect x="446.5" y="243.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="449.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (63 samples, 0.04%)</title><rect x="447.0" y="259.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="450.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (63 samples, 0.04%)</title><rect x="447.0" y="243.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (63 samples, 0.04%)</title><rect x="447.0" y="227.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="450.0" y="238.0"></text>
</g>
<g>
<title>java.lang.String (34 samples, 0.02%)</title><rect x="447.0" y="211.0" width="0.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="450.0" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (145 samples, 0.10%)</title><rect x="447.5" y="275.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="450.5" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (145 samples, 0.10%)</title><rect x="447.5" y="259.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.5" y="270.0"></text>
</g>
<g>
<title>byte[] (145 samples, 0.10%)</title><rect x="447.5" y="243.0" width="1.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="450.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (80 samples, 0.05%)</title><rect x="448.6" y="275.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="451.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (80 samples, 0.05%)</title><rect x="448.6" y="259.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.6" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (80 samples, 0.05%)</title><rect x="448.6" y="243.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="451.6" y="254.0"></text>
</g>
<g>
<title>java.lang.String (37 samples, 0.02%)</title><rect x="448.6" y="227.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="451.6" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (43 samples, 0.03%)</title><rect x="448.9" y="227.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="451.9" y="238.0"></text>
</g>
<g>
<title>byte[] (43 samples, 0.03%)</title><rect x="448.9" y="211.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="451.9" y="222.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (199 samples, 0.13%)</title><rect x="449.2" y="275.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.2" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (93 samples, 0.06%)</title><rect x="449.2" y="259.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="452.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (93 samples, 0.06%)</title><rect x="449.2" y="243.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="452.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (93 samples, 0.06%)</title><rect x="449.2" y="227.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.2" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (93 samples, 0.06%)</title><rect x="449.2" y="211.0" width="0.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="452.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (106 samples, 0.07%)</title><rect x="450.0" y="259.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="453.0" y="270.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (76 samples, 0.05%)</title><rect x="450.0" y="243.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="453.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (76 samples, 0.05%)</title><rect x="450.0" y="227.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="453.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (76 samples, 0.05%)</title><rect x="450.0" y="211.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.0" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (76 samples, 0.05%)</title><rect x="450.0" y="195.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="453.0" y="206.0"></text>
</g>
<g>
<title>java.nio.channels.Channels$1 (76 samples, 0.05%)</title><rect x="450.0" y="179.0" width="0.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="453.0" y="190.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (40 samples, 0.03%)</title><rect x="450.8" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.8" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (40 samples, 0.03%)</title><rect x="450.8" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="453.8" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (40 samples, 0.03%)</title><rect x="450.8" y="243.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="453.8" y="254.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (40 samples, 0.03%)</title><rect x="450.8" y="227.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="453.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$88/405271673.act (32,797 samples, 22.00%)</title><rect x="451.1" y="355.0" width="259.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="454.1" y="366.0">ru/mail/polis/service/stakenschneid..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$3 (32,797 samples, 22.00%)</title><rect x="451.1" y="339.0" width="259.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="454.1" y="350.0">ru/mail/polis/service/stakenschneid..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (32,797 samples, 22.00%)</title><rect x="451.1" y="323.0" width="259.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.1" y="334.0">ru/mail/polis/service/stakenschneid..</text>
</g>
<g>
<title>byte[] (2,885 samples, 1.94%)</title><rect x="451.1" y="307.0" width="22.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="454.1" y="318.0">b..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (7,536 samples, 5.06%)</title><rect x="474.0" y="307.0" width="59.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="477.0" y="318.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (7,536 samples, 5.06%)</title><rect x="474.0" y="291.0" width="59.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.0" y="302.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (7,536 samples, 5.06%)</title><rect x="474.0" y="275.0" width="59.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="477.0" y="286.0">ch/qos..</text>
</g>
<g>
<title>ch.qos.logback.classic.spi.LoggingEvent (209 samples, 0.14%)</title><rect x="474.0" y="259.0" width="1.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="477.0" y="270.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (7,112 samples, 4.77%)</title><rect x="475.6" y="259.0" width="56.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="478.6" y="270.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (7,112 samples, 4.77%)</title><rect x="475.6" y="243.0" width="56.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.6" y="254.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (7,112 samples, 4.77%)</title><rect x="475.6" y="227.0" width="56.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.6" y="238.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (7,112 samples, 4.77%)</title><rect x="475.6" y="211.0" width="56.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.6" y="222.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (7,112 samples, 4.77%)</title><rect x="475.6" y="195.0" width="56.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.6" y="206.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (7,112 samples, 4.77%)</title><rect x="475.6" y="179.0" width="56.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="478.6" y="190.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (7,093 samples, 4.76%)</title><rect x="475.8" y="163.0" width="56.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.8" y="174.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (6,166 samples, 4.14%)</title><rect x="475.8" y="147.0" width="48.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="478.8" y="158.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (6,166 samples, 4.14%)</title><rect x="475.8" y="131.0" width="48.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="478.8" y="142.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.convert (3,499 samples, 2.35%)</title><rect x="475.8" y="115.0" width="27.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="478.8" y="126.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.throwableProxyToString (3,499 samples, 2.35%)</title><rect x="475.8" y="99.0" width="27.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.8" y="110.0">c..</text>
</g>
<g>
<title>java.lang.StringBuilder (50 samples, 0.03%)</title><rect x="475.8" y="83.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="478.8" y="94.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (3,349 samples, 2.25%)</title><rect x="476.2" y="83.0" width="26.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="479.2" y="94.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (3,349 samples, 2.25%)</title><rect x="476.2" y="67.0" width="26.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="479.2" y="78.0">j..</text>
</g>
<g>
<title>byte[] (451 samples, 0.30%)</title><rect x="476.2" y="51.0" width="3.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="479.2" y="62.0"></text>
</g>
<g>
<title>byte[] (2,898 samples, 1.94%)</title><rect x="479.7" y="51.0" width="23.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="482.7" y="62.0">b..</text>
</g>
<g>
<title>java/lang/StringBuilder.toString (100 samples, 0.07%)</title><rect x="502.7" y="83.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="505.7" y="94.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (100 samples, 0.07%)</title><rect x="502.7" y="67.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="505.7" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (79 samples, 0.05%)</title><rect x="502.8" y="51.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="505.8" y="62.0"></text>
</g>
<g>
<title>byte[] (79 samples, 0.05%)</title><rect x="502.8" y="35.0" width="0.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="505.8" y="46.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (48 samples, 0.03%)</title><rect x="503.6" y="115.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="506.6" y="126.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (44 samples, 0.03%)</title><rect x="504.0" y="115.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.0" y="126.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (44 samples, 0.03%)</title><rect x="504.0" y="99.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="507.0" y="110.0"></text>
</g>
<g>
<title>byte[] (44 samples, 0.03%)</title><rect x="504.0" y="83.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="507.0" y="94.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1,826 samples, 1.23%)</title><rect x="504.3" y="115.0" width="14.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="507.3" y="126.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1,826 samples, 1.23%)</title><rect x="504.3" y="99.0" width="14.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="507.3" y="110.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1,826 samples, 1.23%)</title><rect x="504.3" y="83.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="507.3" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,826 samples, 1.23%)</title><rect x="504.3" y="67.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.3" y="78.0"></text>
</g>
<g>
<title>byte[] (1,012 samples, 0.68%)</title><rect x="504.3" y="51.0" width="8.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="507.3" y="62.0"></text>
</g>
<g>
<title>byte[] (814 samples, 0.55%)</title><rect x="512.3" y="51.0" width="6.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="515.3" y="62.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (735 samples, 0.49%)</title><rect x="518.8" y="115.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="521.8" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (735 samples, 0.49%)</title><rect x="518.8" y="99.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.8" y="110.0"></text>
</g>
<g>
<title>java.lang.String (61 samples, 0.04%)</title><rect x="518.8" y="83.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="521.8" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (674 samples, 0.45%)</title><rect x="519.3" y="83.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="522.3" y="94.0"></text>
</g>
<g>
<title>byte[] (474 samples, 0.32%)</title><rect x="519.3" y="67.0" width="3.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="522.3" y="78.0"></text>
</g>
<g>
<title>byte[] (200 samples, 0.13%)</title><rect x="523.0" y="67.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="526.0" y="78.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.convertToBytes (927 samples, 0.62%)</title><rect x="524.6" y="147.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="527.6" y="158.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (927 samples, 0.62%)</title><rect x="524.6" y="131.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="527.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (927 samples, 0.62%)</title><rect x="524.6" y="115.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="527.6" y="126.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (927 samples, 0.62%)</title><rect x="524.6" y="99.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="527.6" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (927 samples, 0.62%)</title><rect x="524.6" y="83.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="527.6" y="94.0"></text>
</g>
<g>
<title>byte[] (734 samples, 0.49%)</title><rect x="524.6" y="67.0" width="5.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="527.6" y="78.0"></text>
</g>
<g>
<title>byte[] (193 samples, 0.13%)</title><rect x="530.4" y="67.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="533.4" y="78.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (215 samples, 0.14%)</title><rect x="531.9" y="259.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.9" y="270.0"></text>
</g>
<g>
<title>ch.qos.logback.classic.spi.ThrowableProxy (112 samples, 0.08%)</title><rect x="531.9" y="243.0" width="0.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="534.9" y="254.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/ThrowableProxy.&lt;init&gt; (103 samples, 0.07%)</title><rect x="532.8" y="243.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="535.8" y="254.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/ThrowableProxyUtil.steArrayToStepArray (34 samples, 0.02%)</title><rect x="532.8" y="227.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="535.8" y="238.0"></text>
</g>
<g>
<title>ch.qos.logback.classic.spi.StackTraceElementProxy[] (34 samples, 0.02%)</title><rect x="532.8" y="211.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="535.8" y="222.0"></text>
</g>
<g>
<title>java/lang/Throwable.getStackTrace (69 samples, 0.05%)</title><rect x="533.1" y="227.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.1" y="238.0"></text>
</g>
<g>
<title>java/lang/Throwable.getOurStackTrace (38 samples, 0.03%)</title><rect x="533.3" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="536.3" y="222.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.of (38 samples, 0.03%)</title><rect x="533.3" y="195.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="536.3" y="206.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement[] (38 samples, 0.03%)</title><rect x="533.3" y="179.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="536.3" y="190.0"></text>
</g>
<g>
<title>one.nio.http.Response (2,888 samples, 1.94%)</title><rect x="533.6" y="307.0" width="22.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="536.6" y="318.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (12,629 samples, 8.47%)</title><rect x="556.5" y="307.0" width="100.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.5" y="318.0">one/nio/http..</text>
</g>
<g>
<title>byte[] (5,416 samples, 3.63%)</title><rect x="556.5" y="291.0" width="42.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="559.5" y="302.0">byte[]</text>
</g>
<g>
<title>java.lang.String[] (4,066 samples, 2.73%)</title><rect x="599.4" y="291.0" width="32.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="602.4" y="302.0">ja..</text>
</g>
<g>
<title>java.lang.String (3,147 samples, 2.11%)</title><rect x="631.6" y="291.0" width="24.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="634.6" y="302.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (6,859 samples, 4.60%)</title><rect x="656.5" y="307.0" width="54.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="659.5" y="318.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (186 samples, 0.12%)</title><rect x="656.5" y="291.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1327006586.invoke (186 samples, 0.12%)</title><rect x="656.5" y="275.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="659.5" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (186 samples, 0.12%)</title><rect x="656.5" y="259.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.5" y="270.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (67 samples, 0.04%)</title><rect x="656.5" y="243.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.5" y="254.0"></text>
</g>
<g>
<title>java.lang.String (67 samples, 0.04%)</title><rect x="656.5" y="227.0" width="0.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="659.5" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (119 samples, 0.08%)</title><rect x="657.0" y="243.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="660.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (119 samples, 0.08%)</title><rect x="657.0" y="227.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.0" y="238.0"></text>
</g>
<g>
<title>byte[] (119 samples, 0.08%)</title><rect x="657.0" y="211.0" width="0.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="660.0" y="222.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.toString (41 samples, 0.03%)</title><rect x="657.9" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.9" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapCharBuffer.toString (41 samples, 0.03%)</title><rect x="657.9" y="275.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="660.9" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (41 samples, 0.03%)</title><rect x="657.9" y="259.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="660.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (41 samples, 0.03%)</title><rect x="657.9" y="243.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (41 samples, 0.03%)</title><rect x="657.9" y="227.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="660.9" y="238.0"></text>
</g>
<g>
<title>byte[] (41 samples, 0.03%)</title><rect x="657.9" y="211.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="660.9" y="222.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.decode (135 samples, 0.09%)</title><rect x="658.3" y="291.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.3" y="302.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.decode (135 samples, 0.09%)</title><rect x="658.3" y="275.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="661.3" y="286.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.allocate (135 samples, 0.09%)</title><rect x="658.3" y="259.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.3" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapCharBuffer (82 samples, 0.06%)</title><rect x="658.3" y="243.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="661.3" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapCharBuffer.&lt;init&gt; (53 samples, 0.04%)</title><rect x="658.9" y="243.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="661.9" y="254.0"></text>
</g>
<g>
<title>char[] (53 samples, 0.04%)</title><rect x="658.9" y="227.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="661.9" y="238.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2,865 samples, 1.92%)</title><rect x="659.3" y="291.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="662.3" y="302.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2,865 samples, 1.92%)</title><rect x="659.3" y="275.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="662.3" y="286.0">o..</text>
</g>
<g>
<title>byte[] (2,865 samples, 1.92%)</title><rect x="659.3" y="259.0" width="22.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="662.3" y="270.0">b..</text>
</g>
<g>
<title>ru.mail.polis.dao.NoSuchElementLiteException (76 samples, 0.05%)</title><rect x="682.0" y="291.0" width="0.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="685.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (3,556 samples, 2.39%)</title><rect x="682.6" y="291.0" width="28.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.6" y="302.0">ru..</text>
</g>
<g>
<title>byte[] (3,556 samples, 2.39%)</title><rect x="682.6" y="275.0" width="28.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="685.6" y="286.0">by..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (60,529 samples, 40.61%)</title><rect x="710.8" y="435.0" width="479.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="713.8" y="446.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (9,237 samples, 6.20%)</title><rect x="710.8" y="419.0" width="73.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="713.8" y="430.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4,126 samples, 2.77%)</title><rect x="710.8" y="403.0" width="32.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="713.8" y="414.0">on..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (2,117 samples, 1.42%)</title><rect x="710.8" y="387.0" width="16.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="713.8" y="398.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (2,009 samples, 1.35%)</title><rect x="727.6" y="387.0" width="15.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="730.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (5,111 samples, 3.43%)</title><rect x="743.5" y="403.0" width="40.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="746.5" y="414.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (5,111 samples, 3.43%)</title><rect x="743.5" y="387.0" width="40.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="746.5" y="398.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (5,111 samples, 3.43%)</title><rect x="743.5" y="371.0" width="40.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.5" y="382.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5,110 samples, 3.43%)</title><rect x="743.5" y="355.0" width="40.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="746.5" y="366.0">sun..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (2,282 samples, 1.53%)</title><rect x="743.5" y="339.0" width="18.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.5" y="350.0"></text>
</g>
<g>
<title>java.lang.Integer (2,282 samples, 1.53%)</title><rect x="743.5" y="323.0" width="18.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="746.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2,828 samples, 1.90%)</title><rect x="761.6" y="339.0" width="22.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="764.6" y="350.0">s..</text>
</g>
<g>
<title>java/util/HashSet.add (2,828 samples, 1.90%)</title><rect x="761.6" y="323.0" width="22.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="764.6" y="334.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (2,828 samples, 1.90%)</title><rect x="761.6" y="307.0" width="22.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="764.6" y="318.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2,828 samples, 1.90%)</title><rect x="761.6" y="291.0" width="22.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.6" y="302.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2,828 samples, 1.90%)</title><rect x="761.6" y="275.0" width="22.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="764.6" y="286.0">j..</text>
</g>
<g>
<title>java.util.HashMap$Node (2,828 samples, 1.90%)</title><rect x="761.6" y="259.0" width="22.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="764.6" y="270.0">j..</text>
</g>
<g>
<title>one/nio/net/Session.process (51,289 samples, 34.41%)</title><rect x="784.0" y="419.0" width="406.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="787.0" y="430.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (51,289 samples, 34.41%)</title><rect x="784.0" y="403.0" width="406.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.0" y="414.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (51,287 samples, 34.41%)</title><rect x="784.0" y="387.0" width="406.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="787.0" y="398.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (19,695 samples, 13.21%)</title><rect x="784.0" y="371.0" width="155.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="787.0" y="382.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (19,695 samples, 13.21%)</title><rect x="784.0" y="355.0" width="155.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.0" y="366.0">one/nio/http/HttpSer..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (15,002 samples, 10.06%)</title><rect x="784.0" y="339.0" width="118.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="787.0" y="350.0">RequestHandler..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4,128 samples, 2.77%)</title><rect x="784.0" y="323.0" width="32.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="787.0" y="334.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (4,128 samples, 2.77%)</title><rect x="784.0" y="307.0" width="32.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="787.0" y="318.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,128 samples, 2.77%)</title><rect x="784.0" y="291.0" width="32.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.0" y="302.0">ja..</text>
</g>
<g>
<title>java.lang.String (2,172 samples, 1.46%)</title><rect x="784.0" y="275.0" width="17.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="787.0" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,956 samples, 1.31%)</title><rect x="801.2" y="275.0" width="15.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="804.2" y="286.0"></text>
</g>
<g>
<title>byte[] (1,956 samples, 1.31%)</title><rect x="801.2" y="259.0" width="15.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="804.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (10,874 samples, 7.30%)</title><rect x="816.7" y="323.0" width="86.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="819.7" y="334.0">ru/mail/po..</text>
</g>
<g>
<title>java/lang/String.getBytes (2,059 samples, 1.38%)</title><rect x="816.7" y="307.0" width="16.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="819.7" y="318.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2,059 samples, 1.38%)</title><rect x="816.7" y="291.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="819.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2,059 samples, 1.38%)</title><rect x="816.7" y="275.0" width="16.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="819.7" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2,059 samples, 1.38%)</title><rect x="816.7" y="259.0" width="16.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="819.7" y="270.0"></text>
</g>
<g>
<title>byte[] (2,059 samples, 1.38%)</title><rect x="816.7" y="243.0" width="16.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="819.7" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,156 samples, 1.45%)</title><rect x="833.0" y="307.0" width="17.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="836.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,156 samples, 1.45%)</title><rect x="833.0" y="291.0" width="17.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="836.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$79/475073154.get$Lambda (601 samples, 0.40%)</title><rect x="833.0" y="275.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="836.0" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.service.stakenschneider.AsyncServiceImpl$$Lambda$79 (601 samples, 0.40%)</title><rect x="833.0" y="259.0" width="4.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="836.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$88/405271673.get$Lambda (1,555 samples, 1.04%)</title><rect x="837.7" y="275.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="840.7" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.service.stakenschneider.AsyncServiceImpl$$Lambda$88 (1,555 samples, 1.04%)</title><rect x="837.7" y="259.0" width="12.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="840.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4,497 samples, 3.02%)</title><rect x="850.0" y="307.0" width="35.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="853.0" y="318.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4,497 samples, 3.02%)</title><rect x="850.0" y="291.0" width="35.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="853.0" y="302.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,497 samples, 3.02%)</title><rect x="850.0" y="275.0" width="35.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="853.0" y="286.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (2,162 samples, 1.45%)</title><rect x="885.6" y="307.0" width="17.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="888.6" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,131 samples, 1.43%)</title><rect x="885.6" y="291.0" width="16.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="888.6" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,131 samples, 1.43%)</title><rect x="885.6" y="275.0" width="16.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="888.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$84/1063156396.get$Lambda (2,131 samples, 1.43%)</title><rect x="885.6" y="259.0" width="16.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="888.6" y="270.0"></text>
</g>
<g>
<title>ru.mail.polis.service.stakenschneider.AsyncServiceImpl$$Lambda$84 (2,131 samples, 1.43%)</title><rect x="885.6" y="243.0" width="16.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="888.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4,693 samples, 3.15%)</title><rect x="902.7" y="339.0" width="37.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="905.7" y="350.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (4,693 samples, 3.15%)</title><rect x="902.7" y="323.0" width="37.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="905.7" y="334.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,693 samples, 3.15%)</title><rect x="902.7" y="307.0" width="37.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="905.7" y="318.0">jav..</text>
</g>
<g>
<title>java.lang.String (1,959 samples, 1.31%)</title><rect x="902.7" y="291.0" width="15.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="905.7" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,734 samples, 1.83%)</title><rect x="918.3" y="291.0" width="21.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="921.3" y="302.0">j..</text>
</g>
<g>
<title>byte[] (2,734 samples, 1.83%)</title><rect x="918.3" y="275.0" width="21.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="921.3" y="286.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21,316 samples, 14.30%)</title><rect x="939.9" y="371.0" width="168.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="942.9" y="382.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one.nio.http.Request (3,428 samples, 2.30%)</title><rect x="939.9" y="355.0" width="27.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="942.9" y="366.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7,285 samples, 4.89%)</title><rect x="967.0" y="355.0" width="57.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="970.0" y="366.0">one/ni..</text>
</g>
<g>
<title>java.lang.String[] (7,285 samples, 4.89%)</title><rect x="967.0" y="339.0" width="57.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="970.0" y="350.0">java.l..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10,603 samples, 7.11%)</title><rect x="1024.7" y="355.0" width="83.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1027.7" y="366.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10,603 samples, 7.11%)</title><rect x="1024.7" y="339.0" width="83.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1027.7" y="350.0">one/nio/u..</text>
</g>
<g>
<title>char[] (4,862 samples, 3.26%)</title><rect x="1024.7" y="323.0" width="38.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1027.7" y="334.0">cha..</text>
</g>
<g>
<title>java.lang.String (2,085 samples, 1.40%)</title><rect x="1063.2" y="323.0" width="16.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1066.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,656 samples, 2.45%)</title><rect x="1079.7" y="323.0" width="28.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1082.7" y="334.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,656 samples, 2.45%)</title><rect x="1079.7" y="307.0" width="28.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1082.7" y="318.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3,656 samples, 2.45%)</title><rect x="1079.7" y="291.0" width="28.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1082.7" y="302.0">ja..</text>
</g>
<g>
<title>byte[] (3,656 samples, 2.45%)</title><rect x="1079.7" y="275.0" width="28.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1082.7" y="286.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10,276 samples, 6.89%)</title><rect x="1108.6" y="371.0" width="81.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1111.6" y="382.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (10,276 samples, 6.89%)</title><rect x="1108.6" y="355.0" width="81.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1111.6" y="366.0">one/nio/u..</text>
</g>
<g>
<title>char[] (4,926 samples, 3.30%)</title><rect x="1108.6" y="339.0" width="39.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1111.6" y="350.0">cha..</text>
</g>
<g>
<title>java.lang.String (1,850 samples, 1.24%)</title><rect x="1147.6" y="339.0" width="14.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1150.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,500 samples, 2.35%)</title><rect x="1162.3" y="339.0" width="27.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1165.3" y="350.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,500 samples, 2.35%)</title><rect x="1162.3" y="323.0" width="27.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1165.3" y="334.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3,500 samples, 2.35%)</title><rect x="1162.3" y="307.0" width="27.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1165.3" y="318.0">j..</text>
</g>
<g>
<title>byte[] (3,500 samples, 2.35%)</title><rect x="1162.3" y="291.0" width="27.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1165.3" y="302.0">b..</text>
</g>
</g>
</svg>
