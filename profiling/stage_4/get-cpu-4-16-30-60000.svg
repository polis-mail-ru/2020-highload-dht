<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (10,646 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (3 samples, 0.03%)</title><rect x="10.3" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.3" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.03%)</title><rect x="10.3" y="723.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.3" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.03%)</title><rect x="10.3" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.3" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.06%)</title><rect x="10.7" y="739.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.7" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.06%)</title><rect x="10.7" y="723.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.7" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (5 samples, 0.05%)</title><rect x="10.7" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="718.0"></text>
</g>
<g>
<title>[not_walkable_Java] (11 samples, 0.10%)</title><rect x="11.6" y="739.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="14.6" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.05%)</title><rect x="11.9" y="723.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.04%)</title><rect x="12.0" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.0" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.03%)</title><rect x="12.1" y="691.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.1" y="702.0"></text>
</g>
<g>
<title>[unknown_Java] (10 samples, 0.09%)</title><rect x="12.8" y="739.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="15.8" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.05%)</title><rect x="13.3" y="723.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.3" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (6,954 samples, 65.32%)</title><rect x="13.9" y="739.0" width="770.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.9" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (6,954 samples, 65.32%)</title><rect x="13.9" y="723.0" width="770.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.9" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (6,954 samples, 65.32%)</title><rect x="13.9" y="707.0" width="770.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.9" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.06%)</title><rect x="14.3" y="691.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.06%)</title><rect x="14.3" y="675.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (5 samples, 0.05%)</title><rect x="14.4" y="659.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (5 samples, 0.05%)</title><rect x="14.4" y="643.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,436 samples, 13.49%)</title><rect x="15.0" y="691.0" width="159.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.0" y="702.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,416 samples, 13.30%)</title><rect x="16.7" y="675.0" width="156.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.7" y="686.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (6 samples, 0.06%)</title><rect x="17.0" y="659.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,278 samples, 12.00%)</title><rect x="17.6" y="659.0" width="141.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.6" y="670.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (5 samples, 0.05%)</title><rect x="17.9" y="643.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 0.18%)</title><rect x="18.4" y="643.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.03%)</title><rect x="18.9" y="627.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.03%)</title><rect x="18.9" y="611.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.03%)</title><rect x="18.9" y="595.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.9" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.03%)</title><rect x="18.9" y="579.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="21.9" y="590.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.03%)</title><rect x="18.9" y="563.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.9" y="574.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="18.9" y="547.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="21.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (3 samples, 0.03%)</title><rect x="19.2" y="627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.08%)</title><rect x="19.5" y="627.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.08%)</title><rect x="19.5" y="611.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.03%)</title><rect x="20.2" y="595.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.2" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.03%)</title><rect x="20.2" y="579.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.2" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.03%)</title><rect x="20.2" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.08%)</title><rect x="20.5" y="643.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.08%)</title><rect x="20.5" y="627.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.07%)</title><rect x="20.5" y="611.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.06%)</title><rect x="20.6" y="595.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.06%)</title><rect x="20.6" y="579.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.6" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.06%)</title><rect x="20.6" y="563.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="23.6" y="574.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.04%)</title><rect x="20.9" y="547.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="23.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1,244 samples, 11.69%)</title><rect x="21.4" y="643.0" width="137.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.4" y="654.0">java/util/concurr..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1,244 samples, 11.69%)</title><rect x="21.4" y="627.0" width="137.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.4" y="638.0">jdk/internal/misc..</text>
</g>
<g>
<title>HandleMark::push() (3 samples, 0.03%)</title><rect x="29.0" y="611.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="32.0" y="622.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (4 samples, 0.04%)</title><rect x="29.7" y="611.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="32.7" y="622.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1,163 samples, 10.92%)</title><rect x="30.3" y="611.0" width="128.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="33.3" y="622.0">Unsafe_Park(JNIE..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (9 samples, 0.08%)</title><rect x="31.9" y="595.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="34.9" y="606.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (8 samples, 0.08%)</title><rect x="32.1" y="579.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="35.1" y="590.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (7 samples, 0.07%)</title><rect x="32.2" y="563.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="35.2" y="574.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (4 samples, 0.04%)</title><rect x="32.2" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="35.2" y="558.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (11 samples, 0.10%)</title><rect x="32.9" y="595.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="35.9" y="606.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (4 samples, 0.04%)</title><rect x="33.1" y="579.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="36.1" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (3 samples, 0.03%)</title><rect x="33.2" y="563.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="36.2" y="574.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (5 samples, 0.05%)</title><rect x="33.6" y="579.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="36.6" y="590.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (5 samples, 0.05%)</title><rect x="33.6" y="563.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="36.6" y="574.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (4 samples, 0.04%)</title><rect x="34.7" y="595.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="37.7" y="606.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (3 samples, 0.03%)</title><rect x="34.7" y="579.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="37.7" y="590.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1,083 samples, 10.17%)</title><rect x="35.3" y="595.0" width="120.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="38.3" y="606.0">Parker::park(bo..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.07%)</title><rect x="36.2" y="579.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="39.2" y="590.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.03%)</title><rect x="36.3" y="563.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="39.3" y="574.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="36.6" y="563.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="39.6" y="574.0"></text>
</g>
<g>
<title>__psynch_cvwait (1,046 samples, 9.83%)</title><rect x="37.4" y="579.0" width="115.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="40.4" y="590.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (15 samples, 0.14%)</title><rect x="153.3" y="579.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="156.3" y="590.0"></text>
</g>
<g>
<title>_pthread_testcancel (3 samples, 0.03%)</title><rect x="154.6" y="563.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="157.6" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.04%)</title><rect x="155.6" y="595.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="158.6" y="606.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.04%)</title><rect x="155.6" y="579.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="158.6" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="155.6" y="563.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="158.6" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (6 samples, 0.06%)</title><rect x="156.1" y="595.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="159.1" y="606.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="156.2" y="579.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="159.2" y="590.0"></text>
</g>
<g>
<title>pthread_cond_wait (3 samples, 0.03%)</title><rect x="157.7" y="595.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="160.7" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (4 samples, 0.04%)</title><rect x="158.1" y="595.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="161.1" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (6 samples, 0.06%)</title><rect x="158.5" y="595.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="161.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (42 samples, 0.39%)</title><rect x="159.3" y="659.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (42 samples, 0.39%)</title><rect x="159.3" y="643.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.3" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.06%)</title><rect x="159.7" y="627.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="162.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (17 samples, 0.16%)</title><rect x="160.4" y="627.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (11 samples, 0.10%)</title><rect x="160.9" y="611.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="163.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 0.10%)</title><rect x="160.9" y="595.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="163.9" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (11 samples, 0.10%)</title><rect x="160.9" y="579.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.9" y="590.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (11 samples, 0.10%)</title><rect x="160.9" y="563.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="163.9" y="574.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 0.09%)</title><rect x="161.0" y="547.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="164.0" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (10 samples, 0.09%)</title><rect x="161.0" y="531.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="164.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (13 samples, 0.12%)</title><rect x="162.3" y="627.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="165.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (13 samples, 0.12%)</title><rect x="162.3" y="611.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (87 samples, 0.82%)</title><rect x="164.0" y="659.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="167.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (87 samples, 0.82%)</title><rect x="164.0" y="643.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="167.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (87 samples, 0.82%)</title><rect x="164.0" y="627.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (87 samples, 0.82%)</title><rect x="164.0" y="611.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="167.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (87 samples, 0.82%)</title><rect x="164.0" y="595.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="167.0" y="606.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (84 samples, 0.79%)</title><rect x="164.3" y="579.0" width="9.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="167.3" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.04%)</title><rect x="165.1" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="168.1" y="574.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (3 samples, 0.03%)</title><rect x="165.2" y="547.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="168.2" y="558.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.06%)</title><rect x="165.5" y="563.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="168.5" y="574.0"></text>
</g>
<g>
<title>__psynch_cvsignal (61 samples, 0.57%)</title><rect x="166.2" y="563.0" width="6.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="169.2" y="574.0"></text>
</g>
<g>
<title>pthread_cond_signal (4 samples, 0.04%)</title><rect x="173.0" y="563.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="176.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (5 samples, 0.05%)</title><rect x="173.6" y="675.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$84/1063156396.run (5,507 samples, 51.73%)</title><rect x="174.3" y="691.0" width="610.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="177.3" y="702.0">ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$84/1063156396.run</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$1 (5,507 samples, 51.73%)</title><rect x="174.3" y="675.0" width="610.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.3" y="686.0">ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$1</text>
</g>
<g>
<title>itable stub (12 samples, 0.11%)</title><rect x="174.8" y="659.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="177.8" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,647 samples, 15.47%)</title><rect x="176.1" y="659.0" width="182.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.1" y="670.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.07%)</title><rect x="179.6" y="643.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="182.6" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.06%)</title><rect x="179.7" y="627.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="182.7" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.04%)</title><rect x="179.8" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="182.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (27 samples, 0.25%)</title><rect x="180.4" y="643.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="183.4" y="654.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (26 samples, 0.24%)</title><rect x="180.5" y="627.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="183.5" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (26 samples, 0.24%)</title><rect x="180.5" y="611.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.04%)</title><rect x="182.9" y="595.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,561 samples, 14.66%)</title><rect x="183.5" y="643.0" width="173.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.5" y="654.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (100 samples, 0.94%)</title><rect x="183.5" y="627.0" width="11.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="186.5" y="638.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.06%)</title><rect x="185.2" y="611.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="188.2" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="185.9" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.9" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (75 samples, 0.70%)</title><rect x="186.2" y="611.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="189.2" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 0.08%)</title><rect x="186.3" y="595.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.3" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.03%)</title><rect x="187.0" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.0" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (33 samples, 0.31%)</title><rect x="187.5" y="595.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.5" y="606.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.07%)</title><rect x="190.2" y="579.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.03%)</title><rect x="190.4" y="563.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.4" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (31 samples, 0.29%)</title><rect x="191.1" y="595.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.1" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (31 samples, 0.29%)</title><rect x="191.1" y="579.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.1" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (29 samples, 0.27%)</title><rect x="191.3" y="563.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.3" y="574.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="194.1" y="547.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.1" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,461 samples, 13.72%)</title><rect x="194.5" y="627.0" width="162.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.5" y="638.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session.write (1,455 samples, 13.67%)</title><rect x="195.2" y="611.0" width="161.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.2" y="622.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,455 samples, 13.67%)</title><rect x="195.2" y="595.0" width="161.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="198.2" y="606.0">one/nio/net/Session$A..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (1,455 samples, 13.67%)</title><rect x="195.2" y="579.0" width="161.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.2" y="590.0">one/nio/net/JavaSocke..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="195.5" y="563.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="195.5" y="547.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="195.7" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1,448 samples, 13.60%)</title><rect x="196.0" y="563.0" width="160.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.0" y="574.0">sun/nio/ch/SocketCha..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (97 samples, 0.91%)</title><rect x="196.0" y="547.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (94 samples, 0.88%)</title><rect x="196.3" y="531.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (42 samples, 0.39%)</title><rect x="196.8" y="515.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (13 samples, 0.12%)</title><rect x="197.0" y="499.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="200.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (27 samples, 0.25%)</title><rect x="198.4" y="499.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (27 samples, 0.25%)</title><rect x="198.4" y="483.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (27 samples, 0.25%)</title><rect x="198.4" y="467.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.4" y="478.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.06%)</title><rect x="198.5" y="451.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="201.5" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (20 samples, 0.19%)</title><rect x="199.2" y="451.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="202.2" y="462.0"></text>
</g>
<g>
<title>gettimeofday (16 samples, 0.15%)</title><rect x="199.6" y="435.0" width="1.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="202.6" y="446.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (12 samples, 0.11%)</title><rect x="200.1" y="419.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="203.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (21 samples, 0.20%)</title><rect x="201.4" y="515.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (15 samples, 0.14%)</title><rect x="202.1" y="499.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.1" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (15 samples, 0.14%)</title><rect x="202.1" y="483.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.1" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (11 samples, 0.10%)</title><rect x="202.5" y="467.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (27 samples, 0.25%)</title><rect x="203.7" y="515.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (27 samples, 0.25%)</title><rect x="203.7" y="499.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.06%)</title><rect x="204.0" y="483.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (16 samples, 0.15%)</title><rect x="204.6" y="483.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.6" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.06%)</title><rect x="204.9" y="467.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.9" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (3 samples, 0.03%)</title><rect x="205.0" y="451.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.0" y="462.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="205.9" y="467.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="208.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (3 samples, 0.03%)</title><rect x="206.4" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.4" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.03%)</title><rect x="206.4" y="467.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="209.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,344 samples, 12.62%)</title><rect x="206.7" y="547.0" width="149.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="209.7" y="558.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,344 samples, 12.62%)</title><rect x="206.7" y="531.0" width="149.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.7" y="542.0">sun/nio/ch/IOUtil.w..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (8 samples, 0.08%)</title><rect x="206.7" y="515.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.7" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (8 samples, 0.08%)</title><rect x="206.7" y="499.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.7" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (8 samples, 0.08%)</title><rect x="206.7" y="483.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="209.7" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (8 samples, 0.08%)</title><rect x="206.7" y="467.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.7" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (8 samples, 0.08%)</title><rect x="206.7" y="451.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (5 samples, 0.05%)</title><rect x="207.1" y="435.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="210.1" y="446.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.03%)</title><rect x="207.3" y="419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="210.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1,301 samples, 12.22%)</title><rect x="207.6" y="515.0" width="144.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.6" y="526.0">sun/nio/ch/IOUtil...</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (1,301 samples, 12.22%)</title><rect x="207.6" y="499.0" width="144.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="210.6" y="510.0">sun/nio/ch/SocketD..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1,301 samples, 12.22%)</title><rect x="207.6" y="483.0" width="144.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="210.6" y="494.0">sun/nio/ch/FileDis..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (18 samples, 0.17%)</title><rect x="211.4" y="467.0" width="2.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="214.4" y="478.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.04%)</title><rect x="212.9" y="451.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="215.9" y="462.0"></text>
</g>
<g>
<title>write (1,247 samples, 11.71%)</title><rect x="213.6" y="467.0" width="138.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="216.6" y="478.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (32 samples, 0.30%)</title><rect x="351.8" y="515.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.8" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (31 samples, 0.29%)</title><rect x="351.9" y="499.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.9" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (3 samples, 0.03%)</title><rect x="352.8" y="483.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="355.8" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.08%)</title><rect x="353.3" y="483.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="356.3" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (3 samples, 0.03%)</title><rect x="353.3" y="467.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="356.3" y="478.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.04%)</title><rect x="353.7" y="467.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="356.7" y="478.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (5 samples, 0.05%)</title><rect x="354.2" y="483.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="357.2" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.04%)</title><rect x="354.7" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.7" y="494.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (4 samples, 0.04%)</title><rect x="354.7" y="467.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="357.7" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="354.7" y="451.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="357.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (3 samples, 0.03%)</title><rect x="355.4" y="515.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="358.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (7 samples, 0.07%)</title><rect x="355.7" y="547.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="358.7" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (7 samples, 0.07%)</title><rect x="355.7" y="531.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="358.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.10%)</title><rect x="356.5" y="643.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="359.5" y="654.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.07%)</title><rect x="356.9" y="627.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="359.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.04%)</title><rect x="357.0" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.isHttp11 (4 samples, 0.04%)</title><rect x="357.7" y="643.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="360.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="357.8" y="627.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="360.8" y="638.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 0.04%)</title><rect x="358.1" y="643.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="361.1" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$79/475073154.act (2,625 samples, 24.66%)</title><rect x="358.7" y="659.0" width="291.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.7" y="670.0">ru/mail/polis/service/stakenschneider/A..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$2 (2,622 samples, 24.63%)</title><rect x="359.0" y="643.0" width="290.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="362.0" y="654.0">ru/mail/polis/service/stakenschneider/A..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.forwardRequestTo (2,622 samples, 24.63%)</title><rect x="359.0" y="627.0" width="290.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.0" y="638.0">ru/mail/polis/service/stakenschneider/A..</text>
</g>
<g>
<title>java/util/HashMap.get (21 samples, 0.20%)</title><rect x="359.0" y="611.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="362.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (20 samples, 0.19%)</title><rect x="359.0" y="595.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="362.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.equals (6 samples, 0.06%)</title><rect x="360.0" y="579.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="363.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (5 samples, 0.05%)</title><rect x="360.7" y="579.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="363.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (2,601 samples, 24.43%)</title><rect x="361.4" y="611.0" width="288.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="364.4" y="622.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (2,601 samples, 24.43%)</title><rect x="361.4" y="595.0" width="288.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="364.4" y="606.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (26 samples, 0.24%)</title><rect x="361.9" y="579.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="364.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (26 samples, 0.24%)</title><rect x="361.9" y="563.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.9" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (26 samples, 0.24%)</title><rect x="361.9" y="547.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (10 samples, 0.09%)</title><rect x="363.1" y="531.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (10 samples, 0.09%)</title><rect x="363.1" y="515.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.1" y="526.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (9 samples, 0.08%)</title><rect x="363.2" y="499.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="366.2" y="510.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.05%)</title><rect x="364.2" y="531.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="367.2" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.04%)</title><rect x="364.4" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="367.4" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (1,547 samples, 14.53%)</title><rect x="364.8" y="579.0" width="171.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.8" y="590.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.06%)</title><rect x="364.9" y="563.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="367.9" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.05%)</title><rect x="365.0" y="547.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="368.0" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.05%)</title><rect x="365.0" y="531.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="368.0" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.05%)</title><rect x="365.0" y="515.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="368.0" y="526.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (5 samples, 0.05%)</title><rect x="365.0" y="499.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="368.0" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="365.2" y="483.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="368.2" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (1,540 samples, 14.47%)</title><rect x="365.6" y="563.0" width="170.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.6" y="574.0">one/nio/net/JavaSocket..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="365.7" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="368.7" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="365.7" y="531.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="365.7" y="515.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="368.7" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1,535 samples, 14.42%)</title><rect x="366.1" y="547.0" width="170.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.1" y="558.0">sun/nio/ch/SocketChann..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (23 samples, 0.22%)</title><rect x="366.3" y="531.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="369.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (21 samples, 0.20%)</title><rect x="366.6" y="515.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.08%)</title><rect x="366.7" y="499.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (8 samples, 0.08%)</title><rect x="366.8" y="483.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="369.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.08%)</title><rect x="366.8" y="467.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (11 samples, 0.10%)</title><rect x="367.7" y="499.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (8 samples, 0.08%)</title><rect x="367.7" y="483.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.7" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (7 samples, 0.07%)</title><rect x="367.8" y="467.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.8" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="367.8" y="451.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="370.8" y="462.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="368.2" y="451.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="371.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1,500 samples, 14.09%)</title><rect x="368.9" y="531.0" width="166.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.9" y="542.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1,499 samples, 14.08%)</title><rect x="369.0" y="515.0" width="166.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.0" y="526.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1,490 samples, 14.00%)</title><rect x="369.3" y="499.0" width="165.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.3" y="510.0">sun/nio/ch/IOUtil.rea..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1,490 samples, 14.00%)</title><rect x="369.3" y="483.0" width="165.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.3" y="494.0">sun/nio/ch/SocketDisp..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1,490 samples, 14.00%)</title><rect x="369.3" y="467.0" width="165.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="372.3" y="478.0">sun/nio/ch/FileDispat..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (10 samples, 0.09%)</title><rect x="378.4" y="451.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="381.4" y="462.0"></text>
</g>
<g>
<title>rpc_errlist (1,396 samples, 13.11%)</title><rect x="379.8" y="451.0" width="154.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="382.8" y="462.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.05%)</title><rect x="534.5" y="499.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="537.5" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.05%)</title><rect x="534.5" y="483.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="537.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (10 samples, 0.09%)</title><rect x="535.2" y="531.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.2" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (7 samples, 0.07%)</title><rect x="535.2" y="515.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.03%)</title><rect x="535.9" y="515.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="538.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (86 samples, 0.81%)</title><rect x="536.3" y="579.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="539.3" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.04%)</title><rect x="536.3" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.03%)</title><rect x="536.4" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.4" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.05%)</title><rect x="536.9" y="563.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="539.9" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="537.2" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="540.2" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.mayHaveBody (5 samples, 0.05%)</title><rect x="537.5" y="563.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="540.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (40 samples, 0.38%)</title><rect x="538.0" y="563.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="541.0" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (35 samples, 0.33%)</title><rect x="538.6" y="547.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="541.6" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (35 samples, 0.33%)</title><rect x="538.6" y="531.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="541.6" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="541.8" y="515.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="544.8" y="526.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="541.9" y="499.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="544.9" y="510.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.03%)</title><rect x="541.9" y="483.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="544.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (8 samples, 0.08%)</title><rect x="542.5" y="563.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (6 samples, 0.06%)</title><rect x="543.4" y="563.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="546.4" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="543.7" y="547.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="546.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (15 samples, 0.14%)</title><rect x="544.0" y="563.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="547.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.07%)</title><rect x="544.6" y="547.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.6" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.07%)</title><rect x="544.6" y="531.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="547.6" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="545.4" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="545.4" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="548.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (42 samples, 0.39%)</title><rect x="545.8" y="579.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="548.8" y="590.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4 samples, 0.04%)</title><rect x="546.5" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="549.5" y="574.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (29 samples, 0.27%)</title><rect x="546.9" y="563.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="549.9" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (18 samples, 0.17%)</title><rect x="547.2" y="547.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="550.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.charAt (13 samples, 0.12%)</title><rect x="547.5" y="531.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="550.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (7 samples, 0.07%)</title><rect x="548.1" y="515.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="551.1" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="548.9" y="531.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="551.9" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.08%)</title><rect x="549.2" y="547.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="552.2" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.06%)</title><rect x="549.5" y="531.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="552.5" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.05%)</title><rect x="549.6" y="515.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="552.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="549.8" y="499.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="552.8" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.03%)</title><rect x="550.1" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (10 samples, 0.09%)</title><rect x="550.5" y="579.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="553.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.07%)</title><rect x="550.7" y="563.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="553.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.07%)</title><rect x="550.7" y="547.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="553.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setTimeout (22 samples, 0.21%)</title><rect x="551.6" y="579.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="554.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (22 samples, 0.21%)</title><rect x="551.6" y="563.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="554.6" y="574.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (840 samples, 7.89%)</title><rect x="554.0" y="579.0" width="93.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.0" y="590.0">one/nio/net..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (552 samples, 5.19%)</title><rect x="554.0" y="563.0" width="61.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="557.0" y="574.0">java/n..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (544 samples, 5.11%)</title><rect x="554.4" y="547.0" width="60.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.4" y="558.0">java/n..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (543 samples, 5.10%)</title><rect x="554.6" y="531.0" width="60.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="557.6" y="542.0">java/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (542 samples, 5.09%)</title><rect x="554.7" y="515.0" width="60.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="557.7" y="526.0">sun/ni..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 0.15%)</title><rect x="554.7" y="499.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="557.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 0.15%)</title><rect x="554.7" y="483.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="557.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.05%)</title><rect x="554.7" y="467.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="557.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.03%)</title><rect x="554.9" y="451.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="557.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (8 samples, 0.08%)</title><rect x="555.2" y="467.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="558.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (4 samples, 0.04%)</title><rect x="555.4" y="451.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.03%)</title><rect x="556.1" y="467.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="559.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.03%)</title><rect x="556.1" y="451.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.03%)</title><rect x="556.1" y="435.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="559.1" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.03%)</title><rect x="556.1" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.1" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.03%)</title><rect x="556.1" y="403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="559.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (497 samples, 4.67%)</title><rect x="556.4" y="499.0" width="55.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="559.4" y="510.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (496 samples, 4.66%)</title><rect x="556.6" y="483.0" width="54.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="559.6" y="494.0">sun/n..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (20 samples, 0.19%)</title><rect x="556.7" y="467.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.7" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (17 samples, 0.16%)</title><rect x="557.0" y="451.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="560.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (13 samples, 0.12%)</title><rect x="557.4" y="435.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.4" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (13 samples, 0.12%)</title><rect x="557.4" y="419.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="560.4" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (11 samples, 0.10%)</title><rect x="557.7" y="403.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="560.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (4 samples, 0.04%)</title><rect x="558.4" y="387.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="561.4" y="398.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.03%)</title><rect x="558.5" y="371.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="561.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (470 samples, 4.41%)</title><rect x="558.9" y="467.0" width="52.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="561.9" y="478.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (470 samples, 4.41%)</title><rect x="558.9" y="451.0" width="52.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="561.9" y="462.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (470 samples, 4.41%)</title><rect x="558.9" y="435.0" width="52.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="561.9" y="446.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.04%)</title><rect x="561.1" y="419.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="564.1" y="430.0"></text>
</g>
<g>
<title>write (445 samples, 4.18%)</title><rect x="561.6" y="419.0" width="49.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="564.6" y="430.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.05%)</title><rect x="611.0" y="467.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="614.0" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.04%)</title><rect x="611.0" y="451.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="614.0" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.04%)</title><rect x="611.0" y="435.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="614.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (29 samples, 0.27%)</title><rect x="611.5" y="499.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="614.5" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (11 samples, 0.10%)</title><rect x="611.6" y="483.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="614.6" y="494.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.03%)</title><rect x="612.5" y="467.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.5" y="478.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.03%)</title><rect x="612.5" y="451.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="615.5" y="462.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.03%)</title><rect x="612.5" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="615.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (16 samples, 0.15%)</title><rect x="612.9" y="483.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.9" y="494.0"></text>
</g>
<g>
<title>pthread_self (14 samples, 0.13%)</title><rect x="613.1" y="467.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="616.1" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (287 samples, 2.70%)</title><rect x="615.2" y="563.0" width="31.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.2" y="574.0">su..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (287 samples, 2.70%)</title><rect x="615.2" y="547.0" width="31.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="618.2" y="558.0">ja..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (4 samples, 0.04%)</title><rect x="616.2" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="619.2" y="542.0"></text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.03%)</title><rect x="616.8" y="531.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="619.8" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (5 samples, 0.05%)</title><rect x="617.2" y="531.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="620.2" y="542.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.03%)</title><rect x="617.8" y="531.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="620.8" y="542.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (202 samples, 1.90%)</title><rect x="618.2" y="531.0" width="22.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="621.2" y="542.0">J..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (7 samples, 0.07%)</title><rect x="619.3" y="515.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="622.3" y="526.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (5 samples, 0.05%)</title><rect x="619.5" y="499.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="622.5" y="510.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (6 samples, 0.06%)</title><rect x="620.4" y="515.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="623.4" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (9 samples, 0.08%)</title><rect x="621.6" y="515.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="624.6" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (9 samples, 0.08%)</title><rect x="621.6" y="499.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="624.6" y="510.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (9 samples, 0.08%)</title><rect x="621.6" y="483.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="624.6" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (4 samples, 0.04%)</title><rect x="622.9" y="515.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="625.9" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (50 samples, 0.47%)</title><rect x="623.5" y="515.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="626.5" y="526.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (6 samples, 0.06%)</title><rect x="625.4" y="499.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="628.4" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (7 samples, 0.07%)</title><rect x="626.9" y="499.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="629.9" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (5 samples, 0.05%)</title><rect x="627.0" y="483.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="630.0" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.04%)</title><rect x="628.0" y="499.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="631.0" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.04%)</title><rect x="628.6" y="499.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="631.6" y="510.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (21 samples, 0.20%)</title><rect x="629.0" y="515.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="632.0" y="526.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (16 samples, 0.15%)</title><rect x="629.3" y="499.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="632.3" y="510.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (10 samples, 0.09%)</title><rect x="629.3" y="483.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="632.3" y="494.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.05%)</title><rect x="630.4" y="483.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="633.4" y="494.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.03%)</title><rect x="630.6" y="467.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="633.6" y="478.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (4 samples, 0.04%)</title><rect x="631.5" y="515.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="634.5" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.06%)</title><rect x="632.3" y="515.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="635.3" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="632.4" y="499.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="635.4" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="632.4" y="483.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="635.4" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.04%)</title><rect x="633.5" y="515.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="636.5" y="526.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (3 samples, 0.03%)</title><rect x="633.9" y="515.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="636.9" y="526.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (57 samples, 0.54%)</title><rect x="634.2" y="515.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="637.2" y="526.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (23 samples, 0.22%)</title><rect x="634.4" y="499.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="637.4" y="510.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (9 samples, 0.08%)</title><rect x="635.9" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="638.9" y="494.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (32 samples, 0.30%)</title><rect x="637.0" y="499.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="640.0" y="510.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (3 samples, 0.03%)</title><rect x="637.2" y="483.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="640.2" y="494.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (12 samples, 0.11%)</title><rect x="637.6" y="483.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="640.6" y="494.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (11 samples, 0.10%)</title><rect x="637.7" y="467.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="640.7" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (9 samples, 0.08%)</title><rect x="637.9" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="640.9" y="462.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (9 samples, 0.08%)</title><rect x="637.9" y="435.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="640.9" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (6 samples, 0.06%)</title><rect x="638.2" y="419.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="641.2" y="430.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (13 samples, 0.12%)</title><rect x="639.1" y="483.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="642.1" y="494.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (5 samples, 0.05%)</title><rect x="639.3" y="467.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="642.3" y="478.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (3 samples, 0.03%)</title><rect x="639.3" y="451.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="642.3" y="462.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (5 samples, 0.05%)</title><rect x="640.0" y="467.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="643.0" y="478.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (4 samples, 0.04%)</title><rect x="640.9" y="531.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="643.9" y="542.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (5 samples, 0.05%)</title><rect x="641.3" y="531.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="644.3" y="542.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (4 samples, 0.04%)</title><rect x="642.1" y="531.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="645.1" y="542.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (4 samples, 0.04%)</title><rect x="642.8" y="531.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="645.8" y="542.0"></text>
</g>
<g>
<title>call_stub (15 samples, 0.14%)</title><rect x="643.7" y="531.0" width="1.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="646.7" y="542.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.03%)</title><rect x="645.8" y="531.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="648.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (6 samples, 0.06%)</title><rect x="646.1" y="531.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="649.1" y="542.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (12 samples, 0.11%)</title><rect x="647.1" y="579.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="650.1" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (6 samples, 0.06%)</title><rect x="647.8" y="563.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="650.8" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (5 samples, 0.05%)</title><rect x="647.9" y="547.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="650.9" y="558.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (11 samples, 0.10%)</title><rect x="648.4" y="579.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="651.4" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (7 samples, 0.07%)</title><rect x="648.9" y="563.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="651.9" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (7 samples, 0.07%)</title><rect x="648.9" y="547.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="651.9" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedList$Node.&lt;init&gt; (4 samples, 0.04%)</title><rect x="649.1" y="531.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="652.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$88/405271673.act (1,218 samples, 11.44%)</title><rect x="649.7" y="659.0" width="135.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="652.7" y="670.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (6 samples, 0.06%)</title><rect x="650.5" y="643.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="653.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$3 (1,204 samples, 11.31%)</title><rect x="651.2" y="643.0" width="133.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.2" y="654.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (1,203 samples, 11.30%)</title><rect x="651.3" y="627.0" width="133.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="654.3" y="638.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (230 samples, 2.16%)</title><rect x="651.7" y="611.0" width="25.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="654.7" y="622.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (230 samples, 2.16%)</title><rect x="651.7" y="595.0" width="25.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="654.7" y="606.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (227 samples, 2.13%)</title><rect x="651.8" y="579.0" width="25.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="654.8" y="590.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (201 samples, 1.89%)</title><rect x="651.8" y="563.0" width="22.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="654.8" y="574.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (200 samples, 1.88%)</title><rect x="651.9" y="547.0" width="22.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="654.9" y="558.0">c..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (197 samples, 1.85%)</title><rect x="652.2" y="531.0" width="21.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="655.2" y="542.0">c..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (195 samples, 1.83%)</title><rect x="652.3" y="515.0" width="21.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="655.3" y="526.0">c..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (188 samples, 1.77%)</title><rect x="652.4" y="499.0" width="20.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="655.4" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (188 samples, 1.77%)</title><rect x="652.4" y="483.0" width="20.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="655.4" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (145 samples, 1.36%)</title><rect x="652.8" y="467.0" width="16.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="655.8" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$1.write (48 samples, 0.45%)</title><rect x="652.8" y="451.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.8" y="462.0"></text>
</g>
<g>
<title>java/io/FilterOutputStream.write (48 samples, 0.45%)</title><rect x="652.8" y="435.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="655.8" y="446.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (48 samples, 0.45%)</title><rect x="652.8" y="419.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="655.8" y="430.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (48 samples, 0.45%)</title><rect x="652.8" y="403.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="655.8" y="414.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (47 samples, 0.44%)</title><rect x="652.9" y="387.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="655.9" y="398.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (47 samples, 0.44%)</title><rect x="652.9" y="371.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="655.9" y="382.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (45 samples, 0.42%)</title><rect x="653.1" y="355.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="656.1" y="366.0"></text>
</g>
<g>
<title>writeBytes (42 samples, 0.39%)</title><rect x="653.4" y="339.0" width="4.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="656.4" y="350.0"></text>
</g>
<g>
<title>jni_GetObjectField (6 samples, 0.06%)</title><rect x="654.8" y="323.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="657.8" y="334.0"></text>
</g>
<g>
<title>write (24 samples, 0.23%)</title><rect x="655.4" y="323.0" width="2.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="658.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (74 samples, 0.70%)</title><rect x="658.1" y="451.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="661.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (74 samples, 0.70%)</title><rect x="658.1" y="435.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (74 samples, 0.70%)</title><rect x="658.1" y="419.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="661.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (73 samples, 0.69%)</title><rect x="658.2" y="403.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="661.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (73 samples, 0.69%)</title><rect x="658.2" y="387.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="661.2" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (73 samples, 0.69%)</title><rect x="658.2" y="371.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="661.2" y="382.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (68 samples, 0.64%)</title><rect x="658.7" y="355.0" width="7.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="661.7" y="366.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (65 samples, 0.61%)</title><rect x="659.0" y="339.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="662.0" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (62 samples, 0.58%)</title><rect x="659.0" y="323.0" width="6.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="662.0" y="334.0"></text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.03%)</title><rect x="665.8" y="323.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="668.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 0.22%)</title><rect x="666.3" y="451.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="669.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 0.22%)</title><rect x="666.3" y="435.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="669.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 0.22%)</title><rect x="666.3" y="419.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="669.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.22%)</title><rect x="666.3" y="403.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.22%)</title><rect x="666.3" y="387.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="669.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.18%)</title><rect x="666.7" y="371.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="669.7" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.11%)</title><rect x="667.3" y="355.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="670.3" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (40 samples, 0.38%)</title><rect x="668.8" y="467.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="671.8" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (38 samples, 0.36%)</title><rect x="668.8" y="451.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="671.8" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (38 samples, 0.36%)</title><rect x="668.8" y="435.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.8" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.convert (7 samples, 0.07%)</title><rect x="669.7" y="419.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.7" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/ThrowableProxyConverter.throwableProxyToString (6 samples, 0.06%)</title><rect x="669.7" y="403.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="672.7" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="670.1" y="387.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="673.1" y="398.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="670.1" y="371.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.1" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (8 samples, 0.08%)</title><rect x="670.6" y="419.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.6" y="430.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (4 samples, 0.04%)</title><rect x="671.0" y="403.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="674.0" y="414.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (3 samples, 0.03%)</title><rect x="671.2" y="387.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="674.2" y="398.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (3 samples, 0.03%)</title><rect x="671.2" y="371.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="674.2" y="382.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 0.11%)</title><rect x="671.6" y="419.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="674.6" y="430.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 0.11%)</title><rect x="671.6" y="403.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="674.6" y="414.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.06%)</title><rect x="671.6" y="387.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="674.6" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.05%)</title><rect x="671.7" y="371.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="674.7" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (3 samples, 0.03%)</title><rect x="672.3" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="675.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.03%)</title><rect x="672.3" y="371.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.3" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.03%)</title><rect x="673.3" y="499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="676.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.03%)</title><rect x="673.6" y="499.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="676.6" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.03%)</title><rect x="673.6" y="483.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="676.6" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.&lt;init&gt; (26 samples, 0.24%)</title><rect x="674.0" y="563.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="677.0" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/ThrowableProxy.&lt;init&gt; (19 samples, 0.18%)</title><rect x="674.5" y="547.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="677.5" y="558.0"></text>
</g>
<g>
<title>java/lang/Throwable.getStackTrace (9 samples, 0.08%)</title><rect x="674.6" y="531.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Throwable.getOurStackTrace (7 samples, 0.07%)</title><rect x="674.8" y="515.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="677.8" y="526.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.of (7 samples, 0.07%)</title><rect x="674.8" y="499.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="677.8" y="510.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.initStackTraceElements (7 samples, 0.07%)</title><rect x="674.8" y="483.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="677.8" y="494.0"></text>
</g>
<g>
<title>JVM_InitStackTraceElementArray (5 samples, 0.05%)</title><rect x="675.0" y="467.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="678.0" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8 samples, 0.08%)</title><rect x="675.7" y="531.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.7" y="542.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.getCallerClass (4 samples, 0.04%)</title><rect x="676.1" y="515.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="679.1" y="526.0"></text>
</g>
<g>
<title>JVM_GetCallerClass (3 samples, 0.03%)</title><rect x="676.3" y="499.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="679.3" y="510.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (3 samples, 0.03%)</title><rect x="676.3" y="483.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="679.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.07%)</title><rect x="677.5" y="611.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="680.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (960 samples, 9.02%)</title><rect x="678.3" y="611.0" width="106.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.3" y="622.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.04%)</title><rect x="678.4" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="681.4" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1327006586.invoke (4 samples, 0.04%)</title><rect x="678.4" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.4" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.03%)</title><rect x="678.4" y="563.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="681.4" y="574.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.decode (10 samples, 0.09%)</title><rect x="679.1" y="595.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="682.1" y="606.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.decode (4 samples, 0.04%)</title><rect x="679.1" y="579.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="682.1" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/ThreadLocalCoders.decoderFor (5 samples, 0.05%)</title><rect x="679.7" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="682.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/cs/ThreadLocalCoders$Cache.forName (5 samples, 0.05%)</title><rect x="679.7" y="563.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="682.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.03%)</title><rect x="679.7" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="682.7" y="558.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (910 samples, 8.55%)</title><rect x="680.2" y="595.0" width="100.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.2" y="606.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (901 samples, 8.46%)</title><rect x="681.2" y="579.0" width="99.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="684.2" y="590.0">org/rocksdb/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (888 samples, 8.34%)</title><rect x="682.4" y="563.0" width="98.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="685.4" y="574.0">Java_org_roc..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (4 samples, 0.04%)</title><rect x="683.9" y="547.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="686.9" y="558.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (3 samples, 0.03%)</title><rect x="684.6" y="547.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="687.6" y="558.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.04%)</title><rect x="685.1" y="547.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="688.1" y="558.0"></text>
</g>
<g>
<title>operator delete(void*) (4 samples, 0.04%)</title><rect x="685.9" y="547.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="688.9" y="558.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="686.5" y="547.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="689.5" y="558.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (11 samples, 0.10%)</title><rect x="686.8" y="547.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="689.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (8 samples, 0.08%)</title><rect x="688.0" y="547.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="691.0" y="558.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (828 samples, 7.78%)</title><rect x="688.9" y="547.0" width="91.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="691.9" y="558.0">rocksdb_get..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (4 samples, 0.04%)</title><rect x="690.2" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="693.2" y="542.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (126 samples, 1.18%)</title><rect x="691.0" y="531.0" width="14.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="694.0" y="542.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.03%)</title><rect x="691.9" y="515.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="694.9" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.05%)</title><rect x="692.6" y="515.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="695.6" y="526.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (12 samples, 0.11%)</title><rect x="693.3" y="515.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="696.3" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.07%)</title><rect x="693.9" y="499.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="696.9" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.06%)</title><rect x="694.0" y="483.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="697.0" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.05%)</title><rect x="694.0" y="467.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="697.0" y="478.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="694.1" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="697.1" y="462.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.04%)</title><rect x="694.1" y="435.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="697.1" y="446.0"></text>
</g>
<g>
<title>jni_NewByteArray (77 samples, 0.72%)</title><rect x="694.7" y="515.0" width="8.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="697.7" y="526.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.03%)</title><rect x="695.4" y="499.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="698.4" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.05%)</title><rect x="695.8" y="499.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="698.8" y="510.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (3 samples, 0.03%)</title><rect x="696.5" y="499.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="699.5" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.08%)</title><rect x="697.0" y="499.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="700.0" y="510.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="697.1" y="483.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="700.1" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="697.5" y="483.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="700.5" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="697.5" y="467.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="700.5" y="478.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="697.5" y="451.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="700.5" y="462.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="697.5" y="435.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="700.5" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (46 samples, 0.43%)</title><rect x="698.0" y="499.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="701.0" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (34 samples, 0.32%)</title><rect x="698.9" y="483.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="701.9" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (27 samples, 0.25%)</title><rect x="699.1" y="467.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="702.1" y="478.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (4 samples, 0.04%)</title><rect x="699.8" y="451.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="702.8" y="462.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.04%)</title><rect x="700.5" y="451.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="703.5" y="462.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.04%)</title><rect x="701.0" y="451.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="704.0" y="462.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="701.8" y="451.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="704.8" y="462.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.04%)</title><rect x="702.2" y="467.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="705.2" y="478.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (15 samples, 0.14%)</title><rect x="703.2" y="515.0" width="1.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="706.2" y="526.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="703.3" y="499.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="706.3" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.07%)</title><rect x="703.7" y="499.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="706.7" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.04%)</title><rect x="704.1" y="483.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="707.1" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.04%)</title><rect x="704.1" y="467.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="707.1" y="478.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="704.1" y="451.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="707.1" y="462.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.04%)</title><rect x="704.1" y="435.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="707.1" y="446.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="705.5" y="531.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="708.5" y="542.0"></text>
</g>
<g>
<title>free (14 samples, 0.13%)</title><rect x="706.1" y="531.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="709.1" y="542.0"></text>
</g>
<g>
<title>szone_size (8 samples, 0.08%)</title><rect x="706.5" y="515.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="709.5" y="526.0"></text>
</g>
<g>
<title>tiny_size (8 samples, 0.08%)</title><rect x="706.5" y="499.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="709.5" y="510.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.05%)</title><rect x="707.6" y="531.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="710.6" y="542.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (16 samples, 0.15%)</title><rect x="708.2" y="531.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="711.2" y="542.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.04%)</title><rect x="708.3" y="515.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="711.3" y="526.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="708.7" y="515.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="711.7" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.08%)</title><rect x="709.1" y="515.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="712.1" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.06%)</title><rect x="709.3" y="499.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="712.3" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.05%)</title><rect x="709.4" y="483.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="712.4" y="494.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="709.5" y="467.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="712.5" y="478.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.04%)</title><rect x="709.5" y="451.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="712.5" y="462.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (27 samples, 0.25%)</title><rect x="710.0" y="531.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="713.0" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.08%)</title><rect x="711.3" y="515.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="714.3" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.04%)</title><rect x="711.5" y="499.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="714.5" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.04%)</title><rect x="711.5" y="483.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="714.5" y="494.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="711.6" y="467.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="714.6" y="478.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="711.6" y="451.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="714.6" y="462.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.05%)</title><rect x="712.2" y="515.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="715.2" y="526.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.03%)</title><rect x="712.9" y="531.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="715.9" y="542.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.04%)</title><rect x="713.4" y="531.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="716.4" y="542.0"></text>
</g>
<g>
<title>operator new(unsigned long) (29 samples, 0.27%)</title><rect x="713.8" y="531.0" width="3.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="716.8" y="542.0"></text>
</g>
<g>
<title>malloc (28 samples, 0.26%)</title><rect x="713.8" y="515.0" width="3.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="716.8" y="526.0"></text>
</g>
<g>
<title>malloc_zone_malloc (26 samples, 0.24%)</title><rect x="714.1" y="499.0" width="2.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="717.1" y="510.0"></text>
</g>
<g>
<title>default_zone_malloc (8 samples, 0.08%)</title><rect x="714.4" y="483.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="717.4" y="494.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (12 samples, 0.11%)</title><rect x="715.3" y="483.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="718.3" y="494.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (12 samples, 0.11%)</title><rect x="715.3" y="467.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="718.3" y="478.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="716.6" y="483.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="719.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (563 samples, 5.29%)</title><rect x="717.0" y="531.0" width="62.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="720.0" y="542.0">rocksd..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (5 samples, 0.05%)</title><rect x="717.5" y="515.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="720.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (550 samples, 5.17%)</title><rect x="718.3" y="515.0" width="60.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="721.3" y="526.0">rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (545 samples, 5.12%)</title><rect x="718.7" y="499.0" width="60.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="721.7" y="510.0">rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (541 samples, 5.08%)</title><rect x="718.9" y="483.0" width="60.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="721.9" y="494.0">rocksd..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="719.0" y="467.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="722.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (4 samples, 0.04%)</title><rect x="719.4" y="467.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="722.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (4 samples, 0.04%)</title><rect x="720.0" y="467.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="723.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (520 samples, 4.88%)</title><rect x="720.5" y="467.0" width="57.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="723.5" y="478.0">rocksd..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (9 samples, 0.08%)</title><rect x="724.1" y="451.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="727.1" y="462.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.05%)</title><rect x="725.1" y="451.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="728.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (19 samples, 0.18%)</title><rect x="725.7" y="451.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="728.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (9 samples, 0.08%)</title><rect x="726.4" y="435.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="729.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (4 samples, 0.04%)</title><rect x="727.4" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="730.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.03%)</title><rect x="727.5" y="419.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="730.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (5 samples, 0.05%)</title><rect x="727.8" y="451.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="730.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (3 samples, 0.03%)</title><rect x="728.8" y="451.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="731.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (418 samples, 3.93%)</title><rect x="729.1" y="451.0" width="46.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="732.1" y="462.0">rock..</text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.03%)</title><rect x="731.1" y="435.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="734.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.04%)</title><rect x="731.5" y="435.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="734.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (5 samples, 0.05%)</title><rect x="731.9" y="435.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="734.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (387 samples, 3.64%)</title><rect x="732.5" y="435.0" width="42.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="735.5" y="446.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.05%)</title><rect x="758.8" y="419.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="761.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (33 samples, 0.31%)</title><rect x="759.4" y="419.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="762.4" y="430.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (3 samples, 0.03%)</title><rect x="761.5" y="403.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="764.5" y="414.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (6 samples, 0.06%)</title><rect x="762.4" y="403.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="765.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (80 samples, 0.75%)</title><rect x="763.0" y="419.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="766.0" y="430.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.04%)</title><rect x="766.5" y="403.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="769.5" y="414.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.03%)</title><rect x="766.9" y="403.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="769.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (38 samples, 0.36%)</title><rect x="767.3" y="403.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="770.3" y="414.0"></text>
</g>
<g>
<title>_platform_memcmp (23 samples, 0.22%)</title><rect x="768.9" y="387.0" width="2.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="771.9" y="398.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.04%)</title><rect x="771.5" y="403.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="774.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (15 samples, 0.14%)</title><rect x="771.9" y="419.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="774.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long long, unsigned long long*, rocksdb::ValueType*) (5 samples, 0.05%)</title><rect x="773.6" y="419.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="776.6" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (6 samples, 0.06%)</title><rect x="774.1" y="419.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="777.1" y="430.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.05%)</title><rect x="774.8" y="419.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="777.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.07%)</title><rect x="775.6" y="451.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="778.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (3 samples, 0.03%)</title><rect x="776.6" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="779.6" y="462.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (11 samples, 0.10%)</title><rect x="776.9" y="451.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="779.9" y="462.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.03%)</title><rect x="778.6" y="467.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="781.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (8 samples, 0.08%)</title><rect x="779.4" y="531.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="782.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (29 samples, 0.27%)</title><rect x="781.1" y="595.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.1" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (5 samples, 0.05%)</title><rect x="781.2" y="579.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="784.2" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="781.4" y="563.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="784.4" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (22 samples, 0.21%)</title><rect x="781.8" y="579.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="784.8" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (21 samples, 0.20%)</title><rect x="781.9" y="563.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="784.9" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.14%)</title><rect x="781.9" y="547.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="784.9" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="782.6" y="531.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="785.6" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.05%)</title><rect x="782.7" y="515.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="785.7" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="782.9" y="499.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="785.9" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.03%)</title><rect x="782.9" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="785.9" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="783.8" y="547.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="786.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementLiteException.&lt;init&gt; (3 samples, 0.03%)</title><rect x="784.3" y="595.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.3" y="606.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (3 samples, 0.03%)</title><rect x="784.3" y="579.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="787.3" y="590.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (3 samples, 0.03%)</title><rect x="784.3" y="563.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="787.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (3 samples, 0.03%)</title><rect x="784.3" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="787.3" y="558.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (3 samples, 0.03%)</title><rect x="784.3" y="531.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="787.3" y="542.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,431 samples, 32.23%)</title><rect x="784.9" y="739.0" width="380.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.9" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (5 samples, 0.05%)</title><rect x="786.9" y="723.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="789.9" y="734.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (2,216 samples, 20.82%)</title><rect x="787.7" y="723.0" width="245.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="790.7" y="734.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>__block_literal_global (3 samples, 0.03%)</title><rect x="788.3" y="707.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="791.3" y="718.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (16 samples, 0.15%)</title><rect x="788.6" y="707.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="791.6" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.03%)</title><rect x="789.6" y="691.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="792.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.03%)</title><rect x="789.6" y="675.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="792.6" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.04%)</title><rect x="790.0" y="691.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="793.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.04%)</title><rect x="790.0" y="675.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="793.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (12 samples, 0.11%)</title><rect x="790.4" y="707.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="793.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (10 samples, 0.09%)</title><rect x="790.6" y="691.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="793.6" y="702.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (34 samples, 0.32%)</title><rect x="791.8" y="707.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="794.8" y="718.0"></text>
</g>
<g>
<title>__block_literal_global (3 samples, 0.03%)</title><rect x="794.2" y="691.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="797.2" y="702.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (9 samples, 0.08%)</title><rect x="794.5" y="691.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="797.5" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2,141 samples, 20.11%)</title><rect x="795.5" y="707.0" width="237.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="798.5" y="718.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2,141 samples, 20.11%)</title><rect x="795.5" y="691.0" width="237.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="798.5" y="702.0">sun/nio/ch/SelectorImpl.lockAnd..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (2,132 samples, 20.03%)</title><rect x="795.9" y="675.0" width="236.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="798.9" y="686.0">sun/nio/ch/KQueueSelectorImpl.d..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (2,019 samples, 18.96%)</title><rect x="796.4" y="659.0" width="223.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="799.4" y="670.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (3 samples, 0.03%)</title><rect x="814.0" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="817.0" y="654.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (18 samples, 0.17%)</title><rect x="814.4" y="643.0" width="2.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="817.4" y="654.0"></text>
</g>
<g>
<title>kevent (1,839 samples, 17.27%)</title><rect x="816.4" y="643.0" width="203.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="819.4" y="654.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (37 samples, 0.35%)</title><rect x="1020.2" y="659.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1023.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (3 samples, 0.03%)</title><rect x="1020.4" y="643.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1023.4" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.08%)</title><rect x="1020.7" y="643.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1023.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.04%)</title><rect x="1020.9" y="627.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1023.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.04%)</title><rect x="1021.3" y="627.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1024.3" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (4 samples, 0.04%)</title><rect x="1021.3" y="611.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1024.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (21 samples, 0.20%)</title><rect x="1022.0" y="643.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1025.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.add (14 samples, 0.13%)</title><rect x="1022.0" y="627.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1025.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (14 samples, 0.13%)</title><rect x="1022.0" y="611.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1025.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (14 samples, 0.13%)</title><rect x="1022.0" y="595.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1025.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.06%)</title><rect x="1022.5" y="579.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1025.5" y="590.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.03%)</title><rect x="1023.2" y="579.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1026.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (4 samples, 0.04%)</title><rect x="1023.5" y="627.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1026.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (4 samples, 0.04%)</title><rect x="1023.5" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1026.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (14 samples, 0.13%)</title><rect x="1024.3" y="659.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1027.3" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (5 samples, 0.05%)</title><rect x="1025.3" y="643.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1028.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (10 samples, 0.09%)</title><rect x="1025.8" y="659.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1028.8" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (10 samples, 0.09%)</title><rect x="1025.8" y="643.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1028.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (5 samples, 0.05%)</title><rect x="1026.1" y="627.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1029.1" y="638.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.03%)</title><rect x="1026.6" y="627.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1029.6" y="638.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.03%)</title><rect x="1026.6" y="611.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1029.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.03%)</title><rect x="1026.6" y="595.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1029.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (8 samples, 0.08%)</title><rect x="1027.0" y="659.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1030.0" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (8 samples, 0.08%)</title><rect x="1027.0" y="643.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1030.0" y="654.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (8 samples, 0.08%)</title><rect x="1027.0" y="627.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1030.0" y="638.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (8 samples, 0.08%)</title><rect x="1027.0" y="611.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1030.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (8 samples, 0.08%)</title><rect x="1027.0" y="595.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1030.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (39 samples, 0.37%)</title><rect x="1027.8" y="659.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1030.8" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (5 samples, 0.05%)</title><rect x="1031.6" y="643.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.6" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.06%)</title><rect x="1032.2" y="675.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1035.2" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (4 samples, 0.04%)</title><rect x="1032.8" y="707.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1035.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (4 samples, 0.04%)</title><rect x="1032.8" y="691.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1035.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (4 samples, 0.04%)</title><rect x="1032.8" y="675.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1035.8" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,189 samples, 11.17%)</title><rect x="1033.4" y="723.0" width="131.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1036.4" y="734.0">one/nio/net/Sess..</text>
</g>
<g>
<title>gettimeofday (7 samples, 0.07%)</title><rect x="1034.5" y="707.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1037.5" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,155 samples, 10.85%)</title><rect x="1035.3" y="707.0" width="128.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1038.3" y="718.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (683 samples, 6.42%)</title><rect x="1036.0" y="691.0" width="75.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1039.0" y="702.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (565 samples, 5.31%)</title><rect x="1039.0" y="675.0" width="62.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.0" y="686.0">one/ni..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (12 samples, 0.11%)</title><rect x="1040.5" y="659.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1043.5" y="670.0"></text>
</g>
<g>
<title>itable stub (7 samples, 0.07%)</title><rect x="1041.8" y="659.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1044.8" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (532 samples, 5.00%)</title><rect x="1042.7" y="659.0" width="59.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1045.7" y="670.0">one/ni..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (504 samples, 4.73%)</title><rect x="1042.7" y="643.0" width="55.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1045.7" y="654.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (42 samples, 0.39%)</title><rect x="1042.8" y="627.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1045.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (16 samples, 0.15%)</title><rect x="1043.5" y="611.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1046.5" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (16 samples, 0.15%)</title><rect x="1043.5" y="595.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1046.5" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="1043.9" y="579.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1046.9" y="590.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (8 samples, 0.08%)</title><rect x="1044.4" y="579.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1047.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (7 samples, 0.07%)</title><rect x="1045.2" y="611.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1048.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.length (6 samples, 0.06%)</title><rect x="1045.4" y="595.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1048.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.05%)</title><rect x="1046.0" y="611.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1049.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.04%)</title><rect x="1046.1" y="595.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1049.1" y="606.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (8 samples, 0.08%)</title><rect x="1046.6" y="611.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1049.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.06%)</title><rect x="1046.8" y="595.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1049.8" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.06%)</title><rect x="1046.8" y="579.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1049.8" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.06%)</title><rect x="1046.8" y="563.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1049.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (461 samples, 4.33%)</title><rect x="1047.5" y="627.0" width="51.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1050.5" y="638.0">ru/ma..</text>
</g>
<g>
<title>java/lang/String.getBytes (10 samples, 0.09%)</title><rect x="1048.3" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1051.3" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (10 samples, 0.09%)</title><rect x="1048.3" y="595.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1051.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (7 samples, 0.07%)</title><rect x="1048.7" y="579.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1051.7" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.06%)</title><rect x="1048.8" y="563.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1051.8" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.03%)</title><rect x="1049.6" y="611.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1052.6" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.03%)</title><rect x="1049.6" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1052.6" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (19 samples, 0.18%)</title><rect x="1049.9" y="611.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1052.9" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (19 samples, 0.18%)</title><rect x="1049.9" y="595.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1052.9" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.13%)</title><rect x="1050.5" y="579.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1053.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.12%)</title><rect x="1050.6" y="563.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1053.6" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.11%)</title><rect x="1050.7" y="547.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1053.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="1051.5" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1054.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="1051.5" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1054.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (413 samples, 3.88%)</title><rect x="1052.1" y="611.0" width="45.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1055.1" y="622.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (409 samples, 3.84%)</title><rect x="1052.6" y="595.0" width="45.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1055.6" y="606.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (409 samples, 3.84%)</title><rect x="1052.6" y="579.0" width="45.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1055.6" y="590.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (46 samples, 0.43%)</title><rect x="1052.9" y="563.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1055.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (46 samples, 0.43%)</title><rect x="1052.9" y="547.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1055.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (11 samples, 0.10%)</title><rect x="1052.9" y="531.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1055.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.03%)</title><rect x="1053.3" y="515.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1056.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.03%)</title><rect x="1053.3" y="499.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1056.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.03%)</title><rect x="1053.3" y="483.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1056.3" y="494.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.03%)</title><rect x="1053.3" y="467.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1056.3" y="478.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.03%)</title><rect x="1053.3" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1056.3" y="462.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="1053.3" y="435.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1056.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.04%)</title><rect x="1053.7" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1056.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.04%)</title><rect x="1053.7" y="499.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1056.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.04%)</title><rect x="1053.7" y="483.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1056.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (20 samples, 0.19%)</title><rect x="1054.1" y="531.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1057.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (11 samples, 0.10%)</title><rect x="1054.3" y="515.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1057.3" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (11 samples, 0.10%)</title><rect x="1054.3" y="499.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1057.3" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (10 samples, 0.09%)</title><rect x="1054.3" y="483.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1057.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (4 samples, 0.04%)</title><rect x="1055.6" y="515.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1058.6" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (4 samples, 0.04%)</title><rect x="1055.6" y="499.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1058.6" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (4 samples, 0.04%)</title><rect x="1055.6" y="483.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1058.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (3 samples, 0.03%)</title><rect x="1056.0" y="515.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1059.0" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.03%)</title><rect x="1056.0" y="499.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1059.0" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (3 samples, 0.03%)</title><rect x="1056.0" y="483.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1059.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (15 samples, 0.14%)</title><rect x="1056.3" y="531.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1059.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (13 samples, 0.12%)</title><rect x="1056.5" y="515.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1059.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.04%)</title><rect x="1056.5" y="499.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1059.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (9 samples, 0.08%)</title><rect x="1057.0" y="499.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1060.0" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (8 samples, 0.08%)</title><rect x="1057.1" y="483.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1060.1" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (4 samples, 0.04%)</title><rect x="1057.3" y="467.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1060.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (360 samples, 3.38%)</title><rect x="1058.0" y="563.0" width="39.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1061.0" y="574.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (360 samples, 3.38%)</title><rect x="1058.0" y="547.0" width="39.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1061.0" y="558.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (360 samples, 3.38%)</title><rect x="1058.0" y="531.0" width="39.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1061.0" y="542.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (360 samples, 3.38%)</title><rect x="1058.0" y="515.0" width="39.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1061.0" y="526.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (360 samples, 3.38%)</title><rect x="1058.0" y="499.0" width="39.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1061.0" y="510.0">jdk..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (3 samples, 0.03%)</title><rect x="1060.3" y="483.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.3" y="494.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (321 samples, 3.02%)</title><rect x="1061.6" y="483.0" width="35.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1064.6" y="494.0">Uns..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.03%)</title><rect x="1062.5" y="467.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.5" y="478.0"></text>
</g>
<g>
<title>Chunk::next() const (3 samples, 0.03%)</title><rect x="1062.5" y="451.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1065.5" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (8 samples, 0.08%)</title><rect x="1063.1" y="467.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.1" y="478.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (8 samples, 0.08%)</title><rect x="1063.1" y="451.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.1" y="462.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (8 samples, 0.08%)</title><rect x="1063.1" y="435.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.1" y="446.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (8 samples, 0.08%)</title><rect x="1063.1" y="419.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.1" y="430.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="1064.0" y="467.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.0" y="478.0"></text>
</g>
<g>
<title>Thread::current() (8 samples, 0.08%)</title><rect x="1064.5" y="467.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.5" y="478.0"></text>
</g>
<g>
<title>Thread::current_or_null() (5 samples, 0.05%)</title><rect x="1064.5" y="451.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.5" y="462.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="1065.1" y="451.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1068.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.07%)</title><rect x="1065.5" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.5" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.05%)</title><rect x="1065.6" y="451.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.6" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.05%)</title><rect x="1065.6" y="435.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.6" y="446.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="1065.7" y="419.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.7" y="430.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.04%)</title><rect x="1065.7" y="403.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1068.7" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (9 samples, 0.08%)</title><rect x="1066.3" y="467.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.3" y="478.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="1066.4" y="451.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.4" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.05%)</title><rect x="1066.7" y="451.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.7" y="462.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="1067.0" y="435.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.0" y="446.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.03%)</title><rect x="1067.3" y="467.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.3" y="478.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (3 samples, 0.03%)</title><rect x="1067.3" y="451.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.3" y="462.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (10 samples, 0.09%)</title><rect x="1067.6" y="467.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.6" y="478.0"></text>
</g>
<g>
<title>__psynch_cvsignal (240 samples, 2.25%)</title><rect x="1068.7" y="467.0" width="26.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1071.7" y="478.0">_..</text>
</g>
<g>
<title>pthread_cond_signal (6 samples, 0.06%)</title><rect x="1095.6" y="467.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1098.6" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.08%)</title><rect x="1096.2" y="467.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1099.2" y="478.0"></text>
</g>
<g>
<title>addr_from_java(long) (3 samples, 0.03%)</title><rect x="1097.2" y="483.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1100.2" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/Nodes.primaryFor (6 samples, 0.06%)</title><rect x="1097.9" y="611.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1100.9" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (9 samples, 0.08%)</title><rect x="1098.6" y="643.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1101.6" y="654.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (16 samples, 0.15%)</title><rect x="1099.6" y="643.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1102.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (14 samples, 0.13%)</title><rect x="1099.8" y="627.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1102.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.07%)</title><rect x="1099.9" y="611.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1102.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.05%)</title><rect x="1100.1" y="595.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1103.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.06%)</title><rect x="1100.7" y="611.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1103.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.06%)</title><rect x="1100.7" y="595.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1103.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.04%)</title><rect x="1100.9" y="579.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1103.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.03%)</title><rect x="1101.3" y="643.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1104.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="1101.3" y="627.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1104.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="1101.3" y="611.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1104.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (53 samples, 0.50%)</title><rect x="1101.7" y="675.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1104.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.03%)</title><rect x="1102.4" y="659.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.4" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.07%)</title><rect x="1102.8" y="659.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1105.8" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="1102.8" y="643.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1105.8" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="1102.8" y="627.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1105.8" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.07%)</title><rect x="1102.8" y="611.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1105.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (23 samples, 0.22%)</title><rect x="1103.5" y="659.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1106.5" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.21%)</title><rect x="1103.7" y="643.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1106.7" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1105.7" y="627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1108.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1105.7" y="611.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1108.7" y="622.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.03%)</title><rect x="1105.7" y="595.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1108.7" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (13 samples, 0.12%)</title><rect x="1106.1" y="659.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1109.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 0.12%)</title><rect x="1107.5" y="675.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1110.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.07%)</title><rect x="1108.2" y="659.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1111.2" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.06%)</title><rect x="1108.3" y="643.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1111.3" y="654.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.03%)</title><rect x="1108.3" y="627.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1111.3" y="638.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.03%)</title><rect x="1108.3" y="611.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1111.3" y="622.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="1108.6" y="627.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1111.6" y="638.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="1108.6" y="611.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1111.6" y="622.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.03%)</title><rect x="1108.6" y="595.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1111.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (8 samples, 0.08%)</title><rect x="1109.0" y="675.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1112.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5 samples, 0.05%)</title><rect x="1109.3" y="659.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1112.3" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.16%)</title><rect x="1109.9" y="675.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1112.9" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.15%)</title><rect x="1110.0" y="659.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1113.0" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1111.3" y="643.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1114.3" y="654.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (463 samples, 4.35%)</title><rect x="1112.0" y="691.0" width="51.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1115.0" y="702.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (461 samples, 4.33%)</title><rect x="1112.1" y="675.0" width="51.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1115.1" y="686.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.05%)</title><rect x="1112.3" y="659.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1115.3" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1112.3" y="643.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1115.3" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1112.3" y="627.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1115.3" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1112.4" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1115.4" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.04%)</title><rect x="1112.4" y="595.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1115.4" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.04%)</title><rect x="1112.4" y="579.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1115.4" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.04%)</title><rect x="1112.4" y="563.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1115.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (454 samples, 4.26%)</title><rect x="1112.9" y="659.0" width="50.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1115.9" y="670.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (55 samples, 0.52%)</title><rect x="1112.9" y="643.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1115.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (55 samples, 0.52%)</title><rect x="1112.9" y="627.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1115.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (25 samples, 0.23%)</title><rect x="1113.0" y="611.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1116.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.09%)</title><rect x="1114.6" y="595.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1117.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (10 samples, 0.09%)</title><rect x="1114.6" y="579.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1117.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.06%)</title><rect x="1115.1" y="563.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1118.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (21 samples, 0.20%)</title><rect x="1115.7" y="611.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1118.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (16 samples, 0.15%)</title><rect x="1116.3" y="595.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1119.3" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (16 samples, 0.15%)</title><rect x="1116.3" y="579.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1119.3" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (12 samples, 0.11%)</title><rect x="1116.4" y="563.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1119.4" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (9 samples, 0.08%)</title><rect x="1116.5" y="547.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1119.5" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (3 samples, 0.03%)</title><rect x="1117.7" y="563.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1120.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (8 samples, 0.08%)</title><rect x="1118.1" y="611.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1121.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.08%)</title><rect x="1118.1" y="595.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1121.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.03%)</title><rect x="1118.6" y="579.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1121.6" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.03%)</title><rect x="1118.6" y="563.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1121.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (398 samples, 3.74%)</title><rect x="1119.0" y="643.0" width="44.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1122.0" y="654.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (398 samples, 3.74%)</title><rect x="1119.0" y="627.0" width="44.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1122.0" y="638.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (393 samples, 3.69%)</title><rect x="1119.0" y="611.0" width="43.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1122.0" y="622.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (393 samples, 3.69%)</title><rect x="1119.0" y="595.0" width="43.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1122.0" y="606.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (393 samples, 3.69%)</title><rect x="1119.0" y="579.0" width="43.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1122.0" y="590.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.04%)</title><rect x="1120.9" y="563.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1123.9" y="574.0"></text>
</g>
<g>
<title>rpc_errlist (369 samples, 3.47%)</title><rect x="1121.6" y="563.0" width="40.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1124.6" y="574.0">rpc..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.05%)</title><rect x="1162.5" y="611.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1165.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.05%)</title><rect x="1162.5" y="595.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1165.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.05%)</title><rect x="1162.5" y="579.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1165.5" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (17 samples, 0.16%)</title><rect x="1163.3" y="707.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.3" y="718.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (4 samples, 0.04%)</title><rect x="1163.6" y="691.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1166.6" y="702.0"></text>
</g>
<g>
<title>gettimeofday (10 samples, 0.09%)</title><rect x="1164.1" y="691.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1167.1" y="702.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (9 samples, 0.08%)</title><rect x="1164.2" y="675.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1167.2" y="686.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (3 samples, 0.03%)</title><rect x="1164.8" y="659.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1167.8" y="670.0"></text>
</g>
<g>
<title>thread_start (224 samples, 2.10%)</title><rect x="1165.2" y="739.0" width="24.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1168.2" y="750.0">t..</text>
</g>
<g>
<title>_pthread_start (224 samples, 2.10%)</title><rect x="1165.2" y="723.0" width="24.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1168.2" y="734.0">_..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (224 samples, 2.10%)</title><rect x="1165.2" y="707.0" width="24.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1168.2" y="718.0">t..</text>
</g>
<g>
<title>Thread::call_run() (224 samples, 2.10%)</title><rect x="1165.2" y="691.0" width="24.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.2" y="702.0">T..</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 0.11%)</title><rect x="1165.3" y="675.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.3" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.03%)</title><rect x="1165.5" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="670.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (6 samples, 0.06%)</title><rect x="1165.9" y="659.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.9" y="670.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (6 samples, 0.06%)</title><rect x="1165.9" y="643.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1168.9" y="654.0"></text>
</g>
<g>
<title>JavaThread::run() (206 samples, 1.93%)</title><rect x="1166.6" y="675.0" width="22.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.6" y="686.0">J..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (206 samples, 1.93%)</title><rect x="1166.6" y="659.0" width="22.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.6" y="670.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (203 samples, 1.91%)</title><rect x="1166.6" y="643.0" width="22.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.6" y="654.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (200 samples, 1.88%)</title><rect x="1166.6" y="627.0" width="22.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.6" y="638.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (180 samples, 1.69%)</title><rect x="1166.6" y="611.0" width="20.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.6" y="622.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (180 samples, 1.69%)</title><rect x="1166.6" y="595.0" width="20.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.6" y="606.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (111 samples, 1.04%)</title><rect x="1166.7" y="579.0" width="12.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.7" y="590.0"></text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.05%)</title><rect x="1166.7" y="563.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.7" y="574.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.03%)</title><rect x="1166.9" y="547.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.9" y="558.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (3 samples, 0.03%)</title><rect x="1166.9" y="531.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.9" y="542.0"></text>
</g>
<g>
<title>Matcher::match() (12 samples, 0.11%)</title><rect x="1167.5" y="563.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.5" y="574.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.08%)</title><rect x="1167.7" y="547.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.7" y="558.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.03%)</title><rect x="1167.8" y="531.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="542.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.03%)</title><rect x="1168.2" y="531.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.2" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (13 samples, 0.12%)</title><rect x="1168.8" y="563.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.8" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (13 samples, 0.12%)</title><rect x="1168.8" y="547.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.8" y="558.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.06%)</title><rect x="1169.6" y="531.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.6" y="542.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (3 samples, 0.03%)</title><rect x="1169.9" y="515.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="526.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (3 samples, 0.03%)</title><rect x="1169.9" y="499.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (77 samples, 0.72%)</title><rect x="1170.5" y="563.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.5" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.04%)</title><rect x="1170.9" y="547.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.9" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.03%)</title><rect x="1171.0" y="531.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.0" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.04%)</title><rect x="1171.4" y="547.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.03%)</title><rect x="1171.5" y="531.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.5" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.05%)</title><rect x="1171.8" y="547.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (18 samples, 0.17%)</title><rect x="1172.4" y="547.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.4" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.05%)</title><rect x="1172.8" y="531.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.8" y="542.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (4 samples, 0.04%)</title><rect x="1172.9" y="515.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.9" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (6 samples, 0.06%)</title><rect x="1173.5" y="531.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (9 samples, 0.08%)</title><rect x="1174.5" y="547.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.06%)</title><rect x="1175.5" y="547.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="558.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (13 samples, 0.12%)</title><rect x="1176.1" y="547.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="558.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (13 samples, 0.12%)</title><rect x="1176.1" y="531.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="542.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (13 samples, 0.12%)</title><rect x="1176.1" y="515.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="526.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (4 samples, 0.04%)</title><rect x="1176.1" y="499.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="510.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.03%)</title><rect x="1176.3" y="483.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.03%)</title><rect x="1176.8" y="499.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (4 samples, 0.04%)</title><rect x="1177.1" y="499.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.04%)</title><rect x="1177.6" y="547.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (3 samples, 0.03%)</title><rect x="1177.7" y="531.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.05%)</title><rect x="1178.3" y="547.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="558.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.03%)</title><rect x="1178.4" y="531.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="542.0"></text>
</g>
<g>
<title>Compile::Optimize() (48 samples, 0.45%)</title><rect x="1179.0" y="579.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="590.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (15 samples, 0.14%)</title><rect x="1179.2" y="563.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (15 samples, 0.14%)</title><rect x="1179.2" y="547.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.06%)</title><rect x="1179.6" y="531.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 0.05%)</title><rect x="1179.7" y="515.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.04%)</title><rect x="1180.4" y="531.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.4" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (16 samples, 0.15%)</title><rect x="1181.2" y="563.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.04%)</title><rect x="1181.4" y="547.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.08%)</title><rect x="1181.8" y="547.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.04%)</title><rect x="1182.4" y="531.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.4" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.03%)</title><rect x="1182.4" y="515.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.4" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.09%)</title><rect x="1183.0" y="563.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.09%)</title><rect x="1183.0" y="547.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 0.17%)</title><rect x="1184.3" y="579.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 0.17%)</title><rect x="1184.3" y="563.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.17%)</title><rect x="1184.3" y="547.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.17%)</title><rect x="1184.3" y="531.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (18 samples, 0.17%)</title><rect x="1184.3" y="515.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.12%)</title><rect x="1184.6" y="499.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.12%)</title><rect x="1184.6" y="483.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.12%)</title><rect x="1184.6" y="467.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.12%)</title><rect x="1184.6" y="451.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.12%)</title><rect x="1184.6" y="435.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.09%)</title><rect x="1184.8" y="419.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.09%)</title><rect x="1184.8" y="403.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.09%)</title><rect x="1184.8" y="387.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.09%)</title><rect x="1184.8" y="371.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.09%)</title><rect x="1184.8" y="355.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.08%)</title><rect x="1184.8" y="339.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.08%)</title><rect x="1184.8" y="323.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.08%)</title><rect x="1184.8" y="307.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.08%)</title><rect x="1184.8" y="291.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.08%)</title><rect x="1184.8" y="275.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.07%)</title><rect x="1184.9" y="259.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.07%)</title><rect x="1184.9" y="243.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.07%)</title><rect x="1184.9" y="227.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.07%)</title><rect x="1184.9" y="211.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.06%)</title><rect x="1185.0" y="195.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.0" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.06%)</title><rect x="1185.0" y="179.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.0" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.06%)</title><rect x="1185.0" y="163.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.06%)</title><rect x="1185.0" y="147.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.06%)</title><rect x="1185.0" y="131.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.05%)</title><rect x="1185.1" y="115.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.05%)</title><rect x="1185.1" y="99.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.05%)</title><rect x="1185.1" y="83.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.05%)</title><rect x="1185.1" y="67.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.05%)</title><rect x="1185.1" y="51.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.1" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1185.1" y="35.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1186.0" y="499.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1186.0" y="483.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.0" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1186.0" y="467.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1186.0" y="451.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1186.0" y="435.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1186.0" y="419.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1186.0" y="403.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1186.0" y="387.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1186.0" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1186.0" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1186.0" y="339.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.0" y="350.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (19 samples, 0.18%)</title><rect x="1186.7" y="611.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="622.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (19 samples, 0.18%)</title><rect x="1186.7" y="595.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="606.0"></text>
</g>
<g>
<title>Compilation::compile_method() (19 samples, 0.18%)</title><rect x="1186.7" y="579.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="590.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (18 samples, 0.17%)</title><rect x="1186.7" y="563.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="574.0"></text>
</g>
<g>
<title>Compilation::build_hir() (10 samples, 0.09%)</title><rect x="1186.7" y="547.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.7" y="558.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (8 samples, 0.08%)</title><rect x="1186.7" y="531.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.7" y="542.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (8 samples, 0.08%)</title><rect x="1186.7" y="515.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (8 samples, 0.08%)</title><rect x="1186.7" y="499.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (7 samples, 0.07%)</title><rect x="1186.8" y="483.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.8" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (7 samples, 0.07%)</title><rect x="1186.8" y="467.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.8" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (5 samples, 0.05%)</title><rect x="1187.0" y="451.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 0.05%)</title><rect x="1187.0" y="435.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.0" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 0.05%)</title><rect x="1187.0" y="419.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.0" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 0.05%)</title><rect x="1187.0" y="403.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 0.05%)</title><rect x="1187.0" y="387.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.0" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.04%)</title><rect x="1187.1" y="371.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.03%)</title><rect x="1187.1" y="355.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="366.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (7 samples, 0.07%)</title><rect x="1187.9" y="547.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="558.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (6 samples, 0.06%)</title><rect x="1188.0" y="531.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.0" y="542.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (3 samples, 0.03%)</title><rect x="1188.0" y="515.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.0" y="526.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (3 samples, 0.03%)</title><rect x="1188.0" y="499.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.0" y="510.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.04%)</title><rect x="1189.4" y="675.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.4" y="686.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.04%)</title><rect x="1189.4" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.4" y="670.0"></text>
</g>
</g>
</svg>
