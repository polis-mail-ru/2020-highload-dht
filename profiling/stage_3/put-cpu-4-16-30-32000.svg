<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="581"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="581"> </text>
<g id="frames">
<g>
<title>all (11,870 samples, 100.00%)</title><rect x="10.0" y="547.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="558.0">all</text>
</g>
<g>
<title>[Java: C2 CompilerThread0 tid=21763] (108 samples, 0.91%)</title><rect x="10.4" y="531.0" width="10.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.4" y="542.0"></text>
</g>
<g>
<title>thread_start (108 samples, 0.91%)</title><rect x="10.4" y="515.0" width="10.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.4" y="526.0"></text>
</g>
<g>
<title>_pthread_start (108 samples, 0.91%)</title><rect x="10.4" y="499.0" width="10.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.4" y="510.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (108 samples, 0.91%)</title><rect x="10.4" y="483.0" width="10.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.4" y="494.0"></text>
</g>
<g>
<title>Thread::call_run() (108 samples, 0.91%)</title><rect x="10.4" y="467.0" width="10.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.4" y="478.0"></text>
</g>
<g>
<title>JavaThread::run() (108 samples, 0.91%)</title><rect x="10.4" y="451.0" width="10.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.4" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (108 samples, 0.91%)</title><rect x="10.4" y="435.0" width="10.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.4" y="446.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (108 samples, 0.91%)</title><rect x="10.4" y="419.0" width="10.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.4" y="430.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (108 samples, 0.91%)</title><rect x="10.4" y="403.0" width="10.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.4" y="414.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (108 samples, 0.91%)</title><rect x="10.4" y="387.0" width="10.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.4" y="398.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (108 samples, 0.91%)</title><rect x="10.4" y="371.0" width="10.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.4" y="382.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (68 samples, 0.57%)</title><rect x="10.4" y="355.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.4" y="366.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.03%)</title><rect x="10.6" y="339.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.6" y="350.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.04%)</title><rect x="10.9" y="339.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.9" y="350.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.03%)</title><rect x="11.1" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.1" y="334.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.05%)</title><rect x="11.5" y="339.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.5" y="350.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.05%)</title><rect x="11.5" y="323.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.5" y="334.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.03%)</title><rect x="11.5" y="307.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.5" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (51 samples, 0.43%)</title><rect x="12.1" y="339.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.1" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.03%)</title><rect x="12.2" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.2" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.07%)</title><rect x="12.8" y="323.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.8" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 0.10%)</title><rect x="13.6" y="323.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.6" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.03%)</title><rect x="13.9" y="307.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.9" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.03%)</title><rect x="14.3" y="307.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.3" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.06%)</title><rect x="14.9" y="323.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.9" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.06%)</title><rect x="15.6" y="323.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="18.6" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.03%)</title><rect x="15.8" y="307.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="18.8" y="318.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.03%)</title><rect x="16.8" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.8" y="334.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 0.27%)</title><rect x="17.2" y="355.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="20.2" y="366.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (13 samples, 0.11%)</title><rect x="17.4" y="339.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.4" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (13 samples, 0.11%)</title><rect x="17.4" y="323.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.4" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.04%)</title><rect x="17.4" y="307.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.4" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.03%)</title><rect x="17.6" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="20.6" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (5 samples, 0.04%)</title><rect x="18.0" y="307.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="21.0" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (10 samples, 0.08%)</title><rect x="18.8" y="339.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="21.8" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.03%)</title><rect x="19.1" y="323.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="22.1" y="334.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.03%)</title><rect x="19.8" y="339.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="22.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.06%)</title><rect x="20.3" y="355.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="23.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.06%)</title><rect x="20.3" y="339.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="23.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.06%)</title><rect x="20.3" y="323.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="23.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.06%)</title><rect x="20.3" y="307.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="23.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.06%)</title><rect x="20.3" y="291.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="23.3" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="20.4" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="23.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="20.4" y="259.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="23.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="20.4" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="23.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="20.4" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="23.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="20.4" y="211.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="23.4" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="20.4" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.4" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="20.4" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="23.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="20.4" y="163.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="23.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="20.4" y="147.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="23.4" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="20.7" y="275.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="23.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="20.7" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="20.7" y="243.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="23.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="20.7" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="23.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="20.7" y="211.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="23.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="20.7" y="195.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="23.7" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="20.7" y="179.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="23.7" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="20.7" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="23.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="20.7" y="147.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="23.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="20.7" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="20.7" y="115.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.7" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="20.7" y="99.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="23.7" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="20.7" y="83.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="23.7" y="94.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=23571] (483 samples, 4.07%)</title><rect x="21.7" y="531.0" width="48.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="24.7" y="542.0">[NIO..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (482 samples, 4.06%)</title><rect x="21.8" y="515.0" width="47.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.8" y="526.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (321 samples, 2.70%)</title><rect x="22.1" y="499.0" width="31.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.1" y="510.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (6 samples, 0.05%)</title><rect x="22.2" y="483.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.2" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (5 samples, 0.04%)</title><rect x="22.8" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (4 samples, 0.03%)</title><rect x="22.9" y="467.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (307 samples, 2.59%)</title><rect x="23.4" y="483.0" width="30.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.4" y="494.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (307 samples, 2.59%)</title><rect x="23.4" y="467.0" width="30.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.4" y="478.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (306 samples, 2.58%)</title><rect x="23.4" y="451.0" width="30.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.4" y="462.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (291 samples, 2.45%)</title><rect x="23.5" y="435.0" width="28.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.5" y="446.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.03%)</title><rect x="25.6" y="419.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="28.6" y="430.0"></text>
</g>
<g>
<title>kevent (266 samples, 2.24%)</title><rect x="26.0" y="419.0" width="26.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="29.0" y="430.0">k..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (7 samples, 0.06%)</title><rect x="52.4" y="435.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.05%)</title><rect x="52.5" y="419.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (3 samples, 0.03%)</title><rect x="52.8" y="403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (3 samples, 0.03%)</title><rect x="52.8" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (3 samples, 0.03%)</title><rect x="52.8" y="371.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (5 samples, 0.04%)</title><rect x="53.1" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.1" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (5 samples, 0.04%)</title><rect x="53.1" y="419.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.1" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (158 samples, 1.33%)</title><rect x="54.0" y="499.0" width="15.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (151 samples, 1.27%)</title><rect x="54.4" y="483.0" width="15.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="57.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (50 samples, 0.42%)</title><rect x="54.4" y="467.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (27 samples, 0.23%)</title><rect x="54.7" y="451.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="57.7" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (27 samples, 0.23%)</title><rect x="54.7" y="435.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.7" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (25 samples, 0.21%)</title><rect x="54.9" y="419.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (24 samples, 0.20%)</title><rect x="55.0" y="403.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.03%)</title><rect x="55.2" y="387.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="58.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (19 samples, 0.16%)</title><rect x="55.5" y="387.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (19 samples, 0.16%)</title><rect x="55.5" y="371.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (19 samples, 0.16%)</title><rect x="55.5" y="355.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="58.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (17 samples, 0.14%)</title><rect x="55.5" y="339.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 0.12%)</title><rect x="55.8" y="323.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.12%)</title><rect x="55.8" y="307.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.12%)</title><rect x="55.8" y="291.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.12%)</title><rect x="55.8" y="275.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 0.12%)</title><rect x="55.8" y="259.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.8" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (13 samples, 0.11%)</title><rect x="55.9" y="243.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="58.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.05%)</title><rect x="56.4" y="227.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="59.4" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.05%)</title><rect x="57.4" y="451.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.4" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.04%)</title><rect x="57.5" y="435.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.5" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.04%)</title><rect x="57.5" y="419.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.03%)</title><rect x="58.2" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.2" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.03%)</title><rect x="58.2" y="435.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.2" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.03%)</title><rect x="58.2" y="419.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="61.2" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.07%)</title><rect x="58.6" y="451.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.6" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.07%)</title><rect x="58.6" y="435.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (101 samples, 0.85%)</title><rect x="59.4" y="467.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.4" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (100 samples, 0.84%)</title><rect x="59.4" y="451.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (100 samples, 0.84%)</title><rect x="59.4" y="435.0" width="9.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (22 samples, 0.19%)</title><rect x="59.4" y="419.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (22 samples, 0.19%)</title><rect x="59.4" y="403.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="62.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (11 samples, 0.09%)</title><rect x="59.4" y="387.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.03%)</title><rect x="60.5" y="387.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="63.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (8 samples, 0.07%)</title><rect x="60.8" y="387.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="63.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.07%)</title><rect x="60.8" y="371.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (8 samples, 0.07%)</title><rect x="60.8" y="355.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (77 samples, 0.65%)</title><rect x="61.7" y="419.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (77 samples, 0.65%)</title><rect x="61.7" y="403.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (70 samples, 0.59%)</title><rect x="61.9" y="387.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="64.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (66 samples, 0.56%)</title><rect x="62.3" y="371.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (66 samples, 0.56%)</title><rect x="62.3" y="355.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="65.3" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (62 samples, 0.52%)</title><rect x="62.7" y="339.0" width="6.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="65.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.04%)</title><rect x="68.9" y="387.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.03%)</title><rect x="69.0" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="72.0" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="69.4" y="483.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="72.4" y="494.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=24067] (238 samples, 2.01%)</title><rect x="69.7" y="531.0" width="23.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="72.7" y="542.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (238 samples, 2.01%)</title><rect x="69.7" y="515.0" width="23.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.7" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (165 samples, 1.39%)</title><rect x="69.8" y="499.0" width="16.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (160 samples, 1.35%)</title><rect x="70.3" y="483.0" width="15.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (160 samples, 1.35%)</title><rect x="70.3" y="467.0" width="15.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (160 samples, 1.35%)</title><rect x="70.3" y="451.0" width="15.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (155 samples, 1.31%)</title><rect x="70.5" y="435.0" width="15.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.5" y="446.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.04%)</title><rect x="71.5" y="419.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="74.5" y="430.0"></text>
</g>
<g>
<title>kevent (140 samples, 1.18%)</title><rect x="72.0" y="419.0" width="13.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="75.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (72 samples, 0.61%)</title><rect x="86.2" y="499.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.2" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (68 samples, 0.57%)</title><rect x="86.2" y="483.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="89.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (22 samples, 0.19%)</title><rect x="86.4" y="467.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (13 samples, 0.11%)</title><rect x="86.5" y="451.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="89.5" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (13 samples, 0.11%)</title><rect x="86.5" y="435.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (12 samples, 0.10%)</title><rect x="86.6" y="419.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (12 samples, 0.10%)</title><rect x="86.6" y="403.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="89.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (11 samples, 0.09%)</title><rect x="86.7" y="387.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 0.09%)</title><rect x="86.7" y="371.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="89.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (11 samples, 0.09%)</title><rect x="86.7" y="355.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (8 samples, 0.07%)</title><rect x="86.7" y="339.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="89.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.06%)</title><rect x="86.8" y="323.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.06%)</title><rect x="86.8" y="307.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.06%)</title><rect x="86.8" y="291.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="89.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.06%)</title><rect x="86.8" y="275.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.06%)</title><rect x="86.8" y="259.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="89.8" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.06%)</title><rect x="86.8" y="243.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="89.8" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="87.2" y="227.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="90.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.03%)</title><rect x="87.8" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.8" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="87.8" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="90.8" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="87.8" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.8" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="88.3" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="91.3" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="88.3" y="435.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.3" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (44 samples, 0.37%)</title><rect x="88.6" y="467.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.6" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (44 samples, 0.37%)</title><rect x="88.6" y="451.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (44 samples, 0.37%)</title><rect x="88.6" y="435.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="91.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.03%)</title><rect x="88.7" y="419.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.03%)</title><rect x="88.7" y="403.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (38 samples, 0.32%)</title><rect x="89.2" y="419.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (38 samples, 0.32%)</title><rect x="89.2" y="403.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (32 samples, 0.27%)</title><rect x="89.4" y="387.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (30 samples, 0.25%)</title><rect x="89.6" y="371.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (30 samples, 0.25%)</title><rect x="89.6" y="355.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.6" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (30 samples, 0.25%)</title><rect x="89.6" y="339.0" width="3.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="92.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.03%)</title><rect x="92.6" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.6" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.03%)</title><rect x="92.6" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="95.6" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.03%)</title><rect x="93.0" y="483.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="96.0" y="494.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=24835] (220 samples, 1.85%)</title><rect x="93.4" y="531.0" width="21.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="96.4" y="542.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (220 samples, 1.85%)</title><rect x="93.4" y="515.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.4" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (151 samples, 1.27%)</title><rect x="93.5" y="499.0" width="15.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (149 samples, 1.26%)</title><rect x="93.7" y="483.0" width="14.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.7" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (149 samples, 1.26%)</title><rect x="93.7" y="467.0" width="14.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (149 samples, 1.26%)</title><rect x="93.7" y="451.0" width="14.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (142 samples, 1.20%)</title><rect x="93.7" y="435.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.7" y="446.0"></text>
</g>
<g>
<title>kevent (136 samples, 1.15%)</title><rect x="94.3" y="419.0" width="13.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="97.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.03%)</title><rect x="107.9" y="435.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.9" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.03%)</title><rect x="108.0" y="419.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (68 samples, 0.57%)</title><rect x="108.5" y="499.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.5" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (66 samples, 0.56%)</title><rect x="108.6" y="483.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (14 samples, 0.12%)</title><rect x="108.6" y="467.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6 samples, 0.05%)</title><rect x="108.6" y="451.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="111.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6 samples, 0.05%)</title><rect x="108.6" y="435.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="111.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (6 samples, 0.05%)</title><rect x="108.6" y="419.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (6 samples, 0.05%)</title><rect x="108.6" y="403.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="111.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (3 samples, 0.03%)</title><rect x="108.9" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.03%)</title><rect x="108.9" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.03%)</title><rect x="108.9" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (3 samples, 0.03%)</title><rect x="108.9" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.03%)</title><rect x="109.2" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.2" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="109.2" y="435.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="112.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="109.2" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="112.2" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.03%)</title><rect x="109.6" y="451.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.6" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (52 samples, 0.44%)</title><rect x="110.0" y="467.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="113.0" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (52 samples, 0.44%)</title><rect x="110.0" y="451.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (52 samples, 0.44%)</title><rect x="110.0" y="435.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.07%)</title><rect x="110.0" y="419.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="113.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.07%)</title><rect x="110.0" y="403.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.03%)</title><rect x="110.0" y="387.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="113.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.03%)</title><rect x="110.5" y="387.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="113.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.03%)</title><rect x="110.5" y="371.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="113.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 0.37%)</title><rect x="110.8" y="419.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="113.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 0.37%)</title><rect x="110.8" y="403.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.8" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.03%)</title><rect x="110.9" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.9" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="110.9" y="371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.9" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.03%)</title><rect x="110.9" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="113.9" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.03%)</title><rect x="110.9" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.03%)</title><rect x="110.9" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="113.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 0.30%)</title><rect x="111.2" y="387.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (33 samples, 0.28%)</title><rect x="111.5" y="371.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (33 samples, 0.28%)</title><rect x="111.5" y="355.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.5" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (31 samples, 0.26%)</title><rect x="111.7" y="339.0" width="3.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="114.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.03%)</title><rect x="114.8" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.8" y="398.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=25091] (132 samples, 1.11%)</title><rect x="115.3" y="531.0" width="13.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="118.3" y="542.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (131 samples, 1.10%)</title><rect x="115.4" y="515.0" width="13.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.4" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (90 samples, 0.76%)</title><rect x="115.5" y="499.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="118.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (90 samples, 0.76%)</title><rect x="115.5" y="483.0" width="8.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="118.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (90 samples, 0.76%)</title><rect x="115.5" y="467.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (89 samples, 0.75%)</title><rect x="115.5" y="451.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (81 samples, 0.68%)</title><rect x="115.5" y="435.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.5" y="446.0"></text>
</g>
<g>
<title>kevent (77 samples, 0.65%)</title><rect x="115.9" y="419.0" width="7.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="118.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.05%)</title><rect x="123.5" y="435.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="126.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.05%)</title><rect x="123.5" y="419.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.04%)</title><rect x="123.5" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.04%)</title><rect x="123.5" y="387.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.04%)</title><rect x="123.5" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="126.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (40 samples, 0.34%)</title><rect x="124.4" y="499.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.4" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (39 samples, 0.33%)</title><rect x="124.4" y="483.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="127.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (16 samples, 0.13%)</title><rect x="124.4" y="467.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (13 samples, 0.11%)</title><rect x="124.4" y="451.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.4" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (13 samples, 0.11%)</title><rect x="124.4" y="435.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="127.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (12 samples, 0.10%)</title><rect x="124.5" y="419.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (12 samples, 0.10%)</title><rect x="124.5" y="403.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (10 samples, 0.08%)</title><rect x="124.7" y="387.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 0.08%)</title><rect x="124.7" y="371.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="127.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 0.08%)</title><rect x="124.7" y="355.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="127.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (10 samples, 0.08%)</title><rect x="124.7" y="339.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="127.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.06%)</title><rect x="125.0" y="323.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.06%)</title><rect x="125.0" y="307.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.06%)</title><rect x="125.0" y="291.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.05%)</title><rect x="125.1" y="275.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="128.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.05%)</title><rect x="125.1" y="259.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="128.1" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.05%)</title><rect x="125.1" y="243.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="128.1" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (23 samples, 0.19%)</title><rect x="126.0" y="467.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="129.0" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (23 samples, 0.19%)</title><rect x="126.0" y="451.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="129.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (23 samples, 0.19%)</title><rect x="126.0" y="435.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="129.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.05%)</title><rect x="126.0" y="419.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="129.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.05%)</title><rect x="126.0" y="403.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.03%)</title><rect x="126.2" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="129.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.14%)</title><rect x="126.6" y="419.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="129.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.14%)</title><rect x="126.6" y="403.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (14 samples, 0.12%)</title><rect x="126.6" y="387.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="129.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (13 samples, 0.11%)</title><rect x="126.7" y="371.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="129.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (13 samples, 0.11%)</title><rect x="126.7" y="355.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="129.7" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (12 samples, 0.10%)</title><rect x="126.8" y="339.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="129.8" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=37635] (238 samples, 2.01%)</title><rect x="128.4" y="531.0" width="23.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="131.4" y="542.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (238 samples, 2.01%)</title><rect x="128.4" y="515.0" width="23.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.4" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.03%)</title><rect x="128.5" y="499.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="131.5" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (160 samples, 1.35%)</title><rect x="128.8" y="499.0" width="15.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.8" y="510.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.03%)</title><rect x="129.0" y="483.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="132.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (155 samples, 1.31%)</title><rect x="129.3" y="483.0" width="15.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (155 samples, 1.31%)</title><rect x="129.3" y="467.0" width="15.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="132.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (155 samples, 1.31%)</title><rect x="129.3" y="451.0" width="15.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (148 samples, 1.25%)</title><rect x="129.4" y="435.0" width="14.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.4" y="446.0"></text>
</g>
<g>
<title>kevent (140 samples, 1.18%)</title><rect x="130.2" y="419.0" width="13.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="133.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.04%)</title><rect x="144.1" y="435.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.03%)</title><rect x="144.3" y="419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.03%)</title><rect x="144.3" y="403.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="144.3" y="387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="144.3" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (74 samples, 0.62%)</title><rect x="144.7" y="499.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="147.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (71 samples, 0.60%)</title><rect x="144.8" y="483.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (29 samples, 0.24%)</title><rect x="144.8" y="467.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="147.8" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (22 samples, 0.19%)</title><rect x="144.9" y="451.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="147.9" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (22 samples, 0.19%)</title><rect x="144.9" y="435.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="147.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (20 samples, 0.17%)</title><rect x="145.1" y="419.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (19 samples, 0.16%)</title><rect x="145.2" y="403.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.03%)</title><rect x="145.2" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (15 samples, 0.13%)</title><rect x="145.6" y="387.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (15 samples, 0.13%)</title><rect x="145.6" y="371.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="148.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (15 samples, 0.13%)</title><rect x="145.6" y="355.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="148.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (13 samples, 0.11%)</title><rect x="145.6" y="339.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 0.11%)</title><rect x="145.6" y="323.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.11%)</title><rect x="145.6" y="307.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.11%)</title><rect x="145.6" y="291.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 0.11%)</title><rect x="145.6" y="275.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 0.11%)</title><rect x="145.6" y="259.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.6" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (13 samples, 0.11%)</title><rect x="145.6" y="243.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="148.6" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.07%)</title><rect x="146.0" y="227.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="149.0" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="147.4" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.4" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="147.4" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.4" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (42 samples, 0.35%)</title><rect x="147.7" y="467.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="150.7" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (42 samples, 0.35%)</title><rect x="147.7" y="451.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (42 samples, 0.35%)</title><rect x="147.7" y="435.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.08%)</title><rect x="147.7" y="419.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.08%)</title><rect x="147.7" y="403.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.05%)</title><rect x="147.7" y="387.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 0.26%)</title><rect x="148.8" y="419.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 0.26%)</title><rect x="148.8" y="403.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (23 samples, 0.19%)</title><rect x="149.2" y="387.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (23 samples, 0.19%)</title><rect x="149.2" y="371.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="152.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (23 samples, 0.19%)</title><rect x="149.2" y="355.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.2" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (22 samples, 0.19%)</title><rect x="149.3" y="339.0" width="2.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="152.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.03%)</title><rect x="151.5" y="387.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.5" y="398.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=37123] (107 samples, 0.90%)</title><rect x="152.1" y="531.0" width="10.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="155.1" y="542.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (107 samples, 0.90%)</title><rect x="152.1" y="515.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.1" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (66 samples, 0.56%)</title><rect x="152.2" y="499.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="155.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (65 samples, 0.55%)</title><rect x="152.3" y="483.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (65 samples, 0.55%)</title><rect x="152.3" y="467.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (65 samples, 0.55%)</title><rect x="152.3" y="451.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (58 samples, 0.49%)</title><rect x="152.3" y="435.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="155.3" y="446.0"></text>
</g>
<g>
<title>kevent (47 samples, 0.40%)</title><rect x="153.3" y="419.0" width="4.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="156.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.03%)</title><rect x="158.2" y="435.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.2" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (3 samples, 0.03%)</title><rect x="158.2" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="161.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (40 samples, 0.34%)</title><rect x="158.7" y="499.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (38 samples, 0.32%)</title><rect x="158.7" y="483.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.7" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (16 samples, 0.13%)</title><rect x="158.7" y="467.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (10 samples, 0.08%)</title><rect x="158.8" y="451.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.8" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (10 samples, 0.08%)</title><rect x="158.8" y="435.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (10 samples, 0.08%)</title><rect x="158.8" y="419.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="161.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (10 samples, 0.08%)</title><rect x="158.8" y="403.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (8 samples, 0.07%)</title><rect x="159.0" y="387.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="162.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (8 samples, 0.07%)</title><rect x="159.0" y="371.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (8 samples, 0.07%)</title><rect x="159.0" y="355.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (6 samples, 0.05%)</title><rect x="159.0" y="339.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.03%)</title><rect x="159.2" y="323.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.03%)</title><rect x="159.2" y="307.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="162.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.03%)</title><rect x="159.2" y="291.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.03%)</title><rect x="159.2" y="275.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="162.2" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.03%)</title><rect x="159.2" y="259.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.2" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.03%)</title><rect x="159.2" y="243.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="162.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="159.3" y="227.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="162.3" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (22 samples, 0.19%)</title><rect x="160.3" y="467.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.3" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (22 samples, 0.19%)</title><rect x="160.3" y="451.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (22 samples, 0.19%)</title><rect x="160.3" y="435.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="163.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.05%)</title><rect x="160.3" y="419.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.05%)</title><rect x="160.3" y="403.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.03%)</title><rect x="160.3" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="163.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.03%)</title><rect x="160.6" y="387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.03%)</title><rect x="160.6" y="371.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="163.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.13%)</title><rect x="161.0" y="419.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="164.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.13%)</title><rect x="161.0" y="403.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="164.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (12 samples, 0.10%)</title><rect x="161.1" y="387.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (11 samples, 0.09%)</title><rect x="161.2" y="371.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (11 samples, 0.09%)</title><rect x="161.2" y="355.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="164.2" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (11 samples, 0.09%)</title><rect x="161.2" y="339.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="164.2" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=36611] (110 samples, 0.93%)</title><rect x="162.7" y="531.0" width="10.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="165.7" y="542.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (110 samples, 0.93%)</title><rect x="162.7" y="515.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.7" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (69 samples, 0.58%)</title><rect x="162.8" y="499.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (65 samples, 0.55%)</title><rect x="163.0" y="483.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (65 samples, 0.55%)</title><rect x="163.0" y="467.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (65 samples, 0.55%)</title><rect x="163.0" y="451.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="166.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (60 samples, 0.51%)</title><rect x="163.0" y="435.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.0" y="446.0"></text>
</g>
<g>
<title>kevent (56 samples, 0.47%)</title><rect x="163.4" y="419.0" width="5.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="166.4" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (40 samples, 0.34%)</title><rect x="169.7" y="499.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (39 samples, 0.33%)</title><rect x="169.8" y="483.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (8 samples, 0.07%)</title><rect x="169.8" y="467.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="172.8" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5 samples, 0.04%)</title><rect x="169.8" y="451.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.8" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5 samples, 0.04%)</title><rect x="169.8" y="435.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (4 samples, 0.03%)</title><rect x="169.9" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (4 samples, 0.03%)</title><rect x="169.9" y="403.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (4 samples, 0.03%)</title><rect x="169.9" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="172.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.03%)</title><rect x="169.9" y="371.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 0.03%)</title><rect x="169.9" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (4 samples, 0.03%)</title><rect x="169.9" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="172.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.03%)</title><rect x="169.9" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="172.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.03%)</title><rect x="169.9" y="307.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.03%)</title><rect x="169.9" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.03%)</title><rect x="169.9" y="275.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.03%)</title><rect x="169.9" y="259.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.9" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.03%)</title><rect x="169.9" y="243.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="172.9" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (31 samples, 0.26%)</title><rect x="170.5" y="467.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.5" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (31 samples, 0.26%)</title><rect x="170.5" y="451.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="173.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (31 samples, 0.26%)</title><rect x="170.5" y="435.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.05%)</title><rect x="170.5" y="419.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="173.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.05%)</title><rect x="170.5" y="403.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.03%)</title><rect x="170.5" y="387.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (3 samples, 0.03%)</title><rect x="170.6" y="371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="173.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.20%)</title><rect x="171.2" y="419.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.20%)</title><rect x="171.2" y="403.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (20 samples, 0.17%)</title><rect x="171.4" y="387.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (19 samples, 0.16%)</title><rect x="171.5" y="371.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="174.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (19 samples, 0.16%)</title><rect x="171.5" y="355.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="174.5" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (18 samples, 0.15%)</title><rect x="171.6" y="339.0" width="1.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="174.6" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=26115] (354 samples, 2.98%)</title><rect x="173.6" y="531.0" width="35.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="176.6" y="542.0">[NI..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (354 samples, 2.98%)</title><rect x="173.6" y="515.0" width="35.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="176.6" y="526.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (247 samples, 2.08%)</title><rect x="173.9" y="499.0" width="24.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.9" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (4 samples, 0.03%)</title><rect x="174.0" y="483.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (4 samples, 0.03%)</title><rect x="174.0" y="467.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.0" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.04%)</title><rect x="174.4" y="483.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="177.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (237 samples, 2.00%)</title><rect x="174.9" y="483.0" width="23.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="177.9" y="494.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (237 samples, 2.00%)</title><rect x="174.9" y="467.0" width="23.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.9" y="478.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (237 samples, 2.00%)</title><rect x="174.9" y="451.0" width="23.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="177.9" y="462.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (225 samples, 1.90%)</title><rect x="174.9" y="435.0" width="22.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="177.9" y="446.0">s..</text>
</g>
<g>
<title>kevent (208 samples, 1.75%)</title><rect x="176.6" y="419.0" width="20.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="179.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.03%)</title><rect x="197.3" y="435.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="200.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.03%)</title><rect x="197.4" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (5 samples, 0.04%)</title><rect x="197.7" y="435.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.7" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (4 samples, 0.03%)</title><rect x="197.8" y="419.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (104 samples, 0.88%)</title><rect x="198.5" y="499.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="201.5" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (98 samples, 0.83%)</title><rect x="198.8" y="483.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (29 samples, 0.24%)</title><rect x="198.8" y="467.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.8" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (15 samples, 0.13%)</title><rect x="199.0" y="451.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (15 samples, 0.13%)</title><rect x="199.0" y="435.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.0" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (13 samples, 0.11%)</title><rect x="199.2" y="419.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="202.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (12 samples, 0.10%)</title><rect x="199.3" y="403.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="202.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (10 samples, 0.08%)</title><rect x="199.5" y="387.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 0.08%)</title><rect x="199.5" y="371.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (10 samples, 0.08%)</title><rect x="199.5" y="355.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (10 samples, 0.08%)</title><rect x="199.5" y="339.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.08%)</title><rect x="199.5" y="323.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.08%)</title><rect x="199.5" y="307.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.08%)</title><rect x="199.5" y="291.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.08%)</title><rect x="199.5" y="275.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.08%)</title><rect x="199.5" y="259.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.5" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (9 samples, 0.08%)</title><rect x="199.5" y="243.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="202.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.05%)</title><rect x="199.8" y="227.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="202.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.03%)</title><rect x="200.5" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.5" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="200.6" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.6" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="200.6" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.04%)</title><rect x="201.0" y="451.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.0" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.03%)</title><rect x="201.1" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.1" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.03%)</title><rect x="201.2" y="419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (69 samples, 0.58%)</title><rect x="201.7" y="467.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.7" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (69 samples, 0.58%)</title><rect x="201.7" y="451.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (69 samples, 0.58%)</title><rect x="201.7" y="435.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 0.12%)</title><rect x="201.9" y="419.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="204.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (14 samples, 0.12%)</title><rect x="201.9" y="403.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.06%)</title><rect x="201.9" y="387.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="204.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (6 samples, 0.05%)</title><rect x="202.6" y="387.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="205.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (53 samples, 0.45%)</title><rect x="203.3" y="419.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (52 samples, 0.44%)</title><rect x="203.4" y="403.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="206.4" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.03%)</title><rect x="203.5" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.5" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="203.5" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.03%)</title><rect x="203.5" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.03%)</title><rect x="203.5" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (47 samples, 0.40%)</title><rect x="203.8" y="387.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (46 samples, 0.39%)</title><rect x="203.9" y="371.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (46 samples, 0.39%)</title><rect x="203.9" y="355.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.9" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (44 samples, 0.37%)</title><rect x="204.0" y="339.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="207.0" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="208.5" y="483.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="211.5" y="494.0"></text>
</g>
<g>
<title>[RMI TCP Connection(3)-192.168.1.46 tid=28675] (13 samples, 0.11%)</title><rect x="208.8" y="531.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="211.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (13 samples, 0.11%)</title><rect x="208.8" y="515.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="211.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (13 samples, 0.11%)</title><rect x="208.8" y="499.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (13 samples, 0.11%)</title><rect x="208.8" y="483.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="211.8" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (13 samples, 0.11%)</title><rect x="208.8" y="467.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.8" y="478.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (13 samples, 0.11%)</title><rect x="208.8" y="451.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.8" y="462.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$102/52688902.run (13 samples, 0.11%)</title><rect x="208.8" y="435.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.8" y="446.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (13 samples, 0.11%)</title><rect x="208.8" y="419.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.8" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (13 samples, 0.11%)</title><rect x="208.8" y="403.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.8" y="414.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (13 samples, 0.11%)</title><rect x="208.8" y="387.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.8" y="398.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (3 samples, 0.03%)</title><rect x="208.8" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="211.8" y="382.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (3 samples, 0.03%)</title><rect x="208.8" y="355.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.8" y="366.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (3 samples, 0.03%)</title><rect x="208.8" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.8" y="350.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (3 samples, 0.03%)</title><rect x="208.8" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.8" y="334.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (3 samples, 0.03%)</title><rect x="208.8" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.8" y="318.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead (3 samples, 0.03%)</title><rect x="208.8" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.8" y="302.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead0 (3 samples, 0.03%)</title><rect x="208.8" y="275.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.8" y="286.0"></text>
</g>
<g>
<title>Java_java_net_SocketInputStream_socketRead0 (3 samples, 0.03%)</title><rect x="208.8" y="259.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="211.8" y="270.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (9 samples, 0.08%)</title><rect x="209.1" y="371.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.1" y="382.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (9 samples, 0.08%)</title><rect x="209.1" y="355.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.1" y="366.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (9 samples, 0.08%)</title><rect x="209.1" y="339.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.1" y="350.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (9 samples, 0.08%)</title><rect x="209.1" y="323.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.1" y="334.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (9 samples, 0.08%)</title><rect x="209.1" y="307.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="212.1" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (6 samples, 0.05%)</title><rect x="209.2" y="291.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="212.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (6 samples, 0.05%)</title><rect x="209.2" y="275.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.2" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (5 samples, 0.04%)</title><rect x="209.2" y="259.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.2" y="270.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (5 samples, 0.04%)</title><rect x="209.2" y="243.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="212.2" y="254.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (3 samples, 0.03%)</title><rect x="209.2" y="227.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.2" y="238.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (3 samples, 0.03%)</title><rect x="209.2" y="211.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.2" y="222.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (3 samples, 0.03%)</title><rect x="209.2" y="195.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.2" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (3 samples, 0.03%)</title><rect x="209.2" y="179.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.2" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (3 samples, 0.03%)</title><rect x="209.2" y="163.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.2" y="174.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (3 samples, 0.03%)</title><rect x="209.2" y="147.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.2" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (3 samples, 0.03%)</title><rect x="209.2" y="131.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="212.2" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (3 samples, 0.03%)</title><rect x="209.2" y="115.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.2" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (3 samples, 0.03%)</title><rect x="209.2" y="99.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.2" y="110.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (3 samples, 0.03%)</title><rect x="209.2" y="83.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.2" y="94.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (3 samples, 0.03%)</title><rect x="209.2" y="67.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="212.2" y="78.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (3 samples, 0.03%)</title><rect x="209.2" y="51.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.2" y="62.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (3 samples, 0.03%)</title><rect x="209.2" y="35.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="212.2" y="46.0"></text>
</g>
<g>
<title>[RMI TCP Connection(idle) tid=33027] (5 samples, 0.04%)</title><rect x="210.1" y="531.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="213.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (5 samples, 0.04%)</title><rect x="210.1" y="515.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="213.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5 samples, 0.04%)</title><rect x="210.1" y="499.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5 samples, 0.04%)</title><rect x="210.1" y="483.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.1" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (5 samples, 0.04%)</title><rect x="210.1" y="467.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.1" y="478.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (5 samples, 0.04%)</title><rect x="210.1" y="451.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.1" y="462.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$102/52688902.run (5 samples, 0.04%)</title><rect x="210.1" y="435.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.1" y="446.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (5 samples, 0.04%)</title><rect x="210.1" y="419.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.1" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (5 samples, 0.04%)</title><rect x="210.1" y="403.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.1" y="414.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (5 samples, 0.04%)</title><rect x="210.1" y="387.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="213.1" y="398.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (5 samples, 0.04%)</title><rect x="210.1" y="371.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.1" y="382.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (5 samples, 0.04%)</title><rect x="210.1" y="355.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="213.1" y="366.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (5 samples, 0.04%)</title><rect x="210.1" y="339.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.1" y="350.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (5 samples, 0.04%)</title><rect x="210.1" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.1" y="334.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (5 samples, 0.04%)</title><rect x="210.1" y="307.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.1" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.03%)</title><rect x="210.1" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.03%)</title><rect x="210.1" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.1" y="286.0"></text>
</g>
<g>
<title>[tid=82435] (46 samples, 0.39%)</title><rect x="210.6" y="531.0" width="4.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="213.6" y="542.0"></text>
</g>
<g>
<title>thread_start (46 samples, 0.39%)</title><rect x="210.6" y="515.0" width="4.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="213.6" y="526.0"></text>
</g>
<g>
<title>_pthread_start (46 samples, 0.39%)</title><rect x="210.6" y="499.0" width="4.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="213.6" y="510.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (46 samples, 0.39%)</title><rect x="210.6" y="483.0" width="4.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="213.6" y="494.0"></text>
</g>
<g>
<title>Thread::call_run() (46 samples, 0.39%)</title><rect x="210.6" y="467.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="213.6" y="478.0"></text>
</g>
<g>
<title>JavaThread::run() (46 samples, 0.39%)</title><rect x="210.6" y="451.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="213.6" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (46 samples, 0.39%)</title><rect x="210.6" y="435.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="213.6" y="446.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (46 samples, 0.39%)</title><rect x="210.6" y="419.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="213.6" y="430.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (46 samples, 0.39%)</title><rect x="210.6" y="403.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="213.6" y="414.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (46 samples, 0.39%)</title><rect x="210.6" y="387.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="213.6" y="398.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (46 samples, 0.39%)</title><rect x="210.6" y="371.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="213.6" y="382.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (28 samples, 0.24%)</title><rect x="210.6" y="355.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="213.6" y="366.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.03%)</title><rect x="210.7" y="339.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="213.7" y="350.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.03%)</title><rect x="210.8" y="323.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="213.8" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 0.19%)</title><rect x="211.2" y="339.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="214.2" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.04%)</title><rect x="211.7" y="323.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="214.7" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.03%)</title><rect x="212.2" y="323.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="215.2" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.03%)</title><rect x="212.3" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="215.3" y="318.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 0.12%)</title><rect x="213.4" y="355.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="216.4" y="366.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (5 samples, 0.04%)</title><rect x="213.4" y="339.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="216.4" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (5 samples, 0.04%)</title><rect x="213.4" y="323.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="216.4" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.03%)</title><rect x="213.4" y="307.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="216.4" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.03%)</title><rect x="213.4" y="291.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="216.4" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.03%)</title><rect x="213.4" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="216.4" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 0.03%)</title><rect x="214.2" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="217.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="214.8" y="355.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="217.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.03%)</title><rect x="214.8" y="339.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="217.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.03%)</title><rect x="214.8" y="323.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="217.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.03%)</title><rect x="214.8" y="307.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="217.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="214.8" y="291.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="217.8" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="214.8" y="275.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="217.8" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="214.8" y="259.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="217.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="214.8" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="217.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="214.8" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="217.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="214.8" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="217.8" y="222.0"></text>
</g>
<g>
<title>[tid=82947] (48 samples, 0.40%)</title><rect x="215.2" y="531.0" width="4.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="218.2" y="542.0"></text>
</g>
<g>
<title>thread_start (48 samples, 0.40%)</title><rect x="215.2" y="515.0" width="4.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="218.2" y="526.0"></text>
</g>
<g>
<title>_pthread_start (48 samples, 0.40%)</title><rect x="215.2" y="499.0" width="4.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="218.2" y="510.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (48 samples, 0.40%)</title><rect x="215.2" y="483.0" width="4.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="218.2" y="494.0"></text>
</g>
<g>
<title>Thread::call_run() (48 samples, 0.40%)</title><rect x="215.2" y="467.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="218.2" y="478.0"></text>
</g>
<g>
<title>JavaThread::run() (48 samples, 0.40%)</title><rect x="215.2" y="451.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="218.2" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (48 samples, 0.40%)</title><rect x="215.2" y="435.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="218.2" y="446.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (48 samples, 0.40%)</title><rect x="215.2" y="419.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="218.2" y="430.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (48 samples, 0.40%)</title><rect x="215.2" y="403.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="218.2" y="414.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (48 samples, 0.40%)</title><rect x="215.2" y="387.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="218.2" y="398.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (48 samples, 0.40%)</title><rect x="215.2" y="371.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="218.2" y="382.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 0.27%)</title><rect x="215.2" y="355.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="218.2" y="366.0"></text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.03%)</title><rect x="215.2" y="339.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="218.2" y="350.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.03%)</title><rect x="215.6" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="218.6" y="350.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.03%)</title><rect x="215.6" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="218.6" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (24 samples, 0.20%)</title><rect x="216.0" y="339.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="219.0" y="350.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.03%)</title><rect x="216.2" y="323.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="219.2" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.03%)</title><rect x="216.5" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="219.5" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.04%)</title><rect x="217.5" y="323.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="220.5" y="334.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 0.11%)</title><rect x="218.4" y="355.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="221.4" y="366.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (5 samples, 0.04%)</title><rect x="218.4" y="339.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="221.4" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (5 samples, 0.04%)</title><rect x="218.4" y="323.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="221.4" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (5 samples, 0.04%)</title><rect x="218.9" y="339.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="221.9" y="350.0"></text>
</g>
<g>
<title>[worker tid=43779] (1,273 samples, 10.72%)</title><rect x="220.0" y="531.0" width="126.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="223.0" y="542.0">[worker tid=43779]</text>
</g>
<g>
<title>java/lang/Thread.run (1,272 samples, 10.72%)</title><rect x="220.1" y="515.0" width="126.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.1" y="526.0">java/lang/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,272 samples, 10.72%)</title><rect x="220.1" y="499.0" width="126.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.1" y="510.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,272 samples, 10.72%)</title><rect x="220.1" y="483.0" width="126.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.1" y="494.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (93 samples, 0.78%)</title><rect x="220.5" y="467.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (92 samples, 0.78%)</title><rect x="220.6" y="451.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (75 samples, 0.63%)</title><rect x="220.6" y="435.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (72 samples, 0.61%)</title><rect x="220.8" y="419.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.8" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (72 samples, 0.61%)</title><rect x="220.8" y="403.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.8" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (67 samples, 0.56%)</title><rect x="221.3" y="387.0" width="6.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="224.3" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (63 samples, 0.53%)</title><rect x="221.5" y="371.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="224.5" y="382.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.03%)</title><rect x="221.5" y="355.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="224.5" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (59 samples, 0.50%)</title><rect x="221.8" y="355.0" width="5.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="224.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.03%)</title><rect x="228.0" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.03%)</title><rect x="228.0" y="419.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 0.12%)</title><rect x="228.3" y="435.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.12%)</title><rect x="228.3" y="419.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.12%)</title><rect x="228.3" y="403.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.12%)</title><rect x="228.3" y="387.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.3" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 0.12%)</title><rect x="228.3" y="371.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.3" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (14 samples, 0.12%)</title><rect x="228.3" y="355.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="231.3" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.08%)</title><rect x="228.4" y="339.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="231.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (1,175 samples, 9.90%)</title><rect x="229.7" y="467.0" width="116.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.7" y="478.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (1,175 samples, 9.90%)</title><rect x="229.7" y="451.0" width="116.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.7" y="462.0">ru/mail/polis/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (111 samples, 0.94%)</title><rect x="229.7" y="435.0" width="11.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (107 samples, 0.90%)</title><rect x="230.0" y="419.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.05%)</title><rect x="230.0" y="403.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.04%)</title><rect x="230.1" y="387.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.1" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.03%)</title><rect x="230.2" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (101 samples, 0.85%)</title><rect x="230.6" y="403.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.6" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (100 samples, 0.84%)</title><rect x="230.7" y="387.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (100 samples, 0.84%)</title><rect x="230.7" y="371.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.7" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (100 samples, 0.84%)</title><rect x="230.7" y="355.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="233.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (98 samples, 0.83%)</title><rect x="230.9" y="339.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.03%)</title><rect x="231.1" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.03%)</title><rect x="231.1" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.03%)</title><rect x="231.1" y="291.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (93 samples, 0.78%)</title><rect x="231.4" y="323.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (93 samples, 0.78%)</title><rect x="231.4" y="307.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (89 samples, 0.75%)</title><rect x="231.4" y="291.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (89 samples, 0.75%)</title><rect x="231.4" y="275.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (89 samples, 0.75%)</title><rect x="231.4" y="259.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.4" y="270.0"></text>
</g>
<g>
<title>write (88 samples, 0.74%)</title><rect x="231.5" y="243.0" width="8.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="234.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.03%)</title><rect x="240.2" y="291.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.03%)</title><rect x="240.2" y="275.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$116/640279467.act (1,064 samples, 8.96%)</title><rect x="240.7" y="435.0" width="105.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.7" y="446.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$1 (1,064 samples, 8.96%)</title><rect x="240.7" y="419.0" width="105.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.7" y="430.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.put (1,064 samples, 8.96%)</title><rect x="240.7" y="403.0" width="105.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.7" y="414.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,061 samples, 8.94%)</title><rect x="241.0" y="387.0" width="105.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.0" y="398.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,059 samples, 8.92%)</title><rect x="241.0" y="371.0" width="105.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.0" y="382.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,058 samples, 8.91%)</title><rect x="241.1" y="355.0" width="105.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.1" y="366.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,052 samples, 8.86%)</title><rect x="241.7" y="339.0" width="104.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="244.7" y="350.0">Java_org_roc..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,050 samples, 8.85%)</title><rect x="241.9" y="323.0" width="104.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="244.9" y="334.0">rocksdb_put_..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.05%)</title><rect x="242.9" y="307.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="245.9" y="318.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="243.5" y="307.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="246.5" y="318.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="243.5" y="291.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="246.5" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="243.5" y="275.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="246.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,028 samples, 8.66%)</title><rect x="243.8" y="307.0" width="102.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="246.8" y="318.0">rocksdb::Com..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,027 samples, 8.65%)</title><rect x="243.9" y="291.0" width="102.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="246.9" y="302.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,024 samples, 8.63%)</title><rect x="243.9" y="275.0" width="101.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="246.9" y="286.0">rocksdb::DB:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,011 samples, 8.52%)</title><rect x="244.0" y="259.0" width="100.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="247.0" y="270.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,005 samples, 8.47%)</title><rect x="244.1" y="243.0" width="99.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="247.1" y="254.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (62 samples, 0.52%)</title><rect x="244.9" y="227.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="247.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (60 samples, 0.51%)</title><rect x="245.1" y="211.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="248.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (60 samples, 0.51%)</title><rect x="245.1" y="195.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="248.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (55 samples, 0.46%)</title><rect x="245.3" y="179.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="248.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (53 samples, 0.45%)</title><rect x="245.5" y="163.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="248.5" y="174.0"></text>
</g>
<g>
<title>write (53 samples, 0.45%)</title><rect x="245.5" y="147.0" width="5.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="248.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (3 samples, 0.03%)</title><rect x="250.8" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="253.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (8 samples, 0.07%)</title><rect x="251.2" y="227.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="254.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (8 samples, 0.07%)</title><rect x="251.2" y="211.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="254.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="251.4" y="195.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="254.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="251.4" y="179.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="254.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (5 samples, 0.04%)</title><rect x="251.5" y="163.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="254.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.04%)</title><rect x="251.5" y="147.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="254.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (46 samples, 0.39%)</title><rect x="252.0" y="227.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="255.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="252.8" y="211.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="255.8" y="222.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.03%)</title><rect x="253.0" y="195.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="256.0" y="206.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.03%)</title><rect x="253.1" y="179.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="256.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (32 samples, 0.27%)</title><rect x="253.4" y="211.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="256.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (30 samples, 0.25%)</title><rect x="253.6" y="195.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="256.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (27 samples, 0.23%)</title><rect x="253.9" y="179.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="256.9" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.03%)</title><rect x="254.3" y="163.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="257.3" y="174.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.03%)</title><rect x="254.3" y="147.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="257.3" y="158.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.03%)</title><rect x="254.3" y="131.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="257.3" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="254.3" y="115.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="257.3" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="254.4" y="99.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="257.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (17 samples, 0.14%)</title><rect x="254.7" y="163.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="257.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (16 samples, 0.13%)</title><rect x="254.8" y="147.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="257.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.13%)</title><rect x="254.9" y="131.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="257.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.03%)</title><rect x="255.8" y="115.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="258.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (373 samples, 3.14%)</title><rect x="256.6" y="227.0" width="37.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="259.6" y="238.0">roc..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (61 samples, 0.51%)</title><rect x="270.5" y="211.0" width="6.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="273.5" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (172 samples, 1.45%)</title><rect x="276.5" y="211.0" width="17.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="279.5" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (163 samples, 1.37%)</title><rect x="276.5" y="195.0" width="16.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="279.5" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.07%)</title><rect x="292.8" y="195.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="295.8" y="206.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (7 samples, 0.06%)</title><rect x="292.9" y="179.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="295.9" y="190.0"></text>
</g>
<g>
<title>__psynch_mutexwait (7 samples, 0.06%)</title><rect x="292.9" y="163.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="295.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (470 samples, 3.96%)</title><rect x="293.7" y="227.0" width="46.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="296.7" y="238.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (466 samples, 3.93%)</title><rect x="294.0" y="211.0" width="46.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="297.0" y="222.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (378 samples, 3.18%)</title><rect x="302.1" y="195.0" width="37.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="305.1" y="206.0">si_..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.03%)</title><rect x="339.6" y="195.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="342.6" y="206.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.03%)</title><rect x="339.6" y="179.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="342.6" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (4 samples, 0.03%)</title><rect x="339.9" y="195.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="342.9" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.03%)</title><rect x="339.9" y="179.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="342.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (7 samples, 0.06%)</title><rect x="340.5" y="227.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="343.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (7 samples, 0.06%)</title><rect x="340.5" y="211.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="343.5" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.04%)</title><rect x="340.7" y="195.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="343.7" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.04%)</title><rect x="340.7" y="179.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="343.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (21 samples, 0.18%)</title><rect x="341.4" y="227.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="344.4" y="238.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (19 samples, 0.16%)</title><rect x="341.6" y="211.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="344.6" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.15%)</title><rect x="341.6" y="195.0" width="1.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="344.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (8 samples, 0.07%)</title><rect x="344.7" y="259.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="347.7" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.03%)</title><rect x="345.0" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="348.0" y="254.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="345.0" y="227.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="348.0" y="238.0"></text>
</g>
<g>
<title>[worker tid=44291] (1,321 samples, 11.13%)</title><rect x="346.5" y="531.0" width="131.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="349.5" y="542.0">[worker tid=44291]</text>
</g>
<g>
<title>java/lang/Thread.run (1,321 samples, 11.13%)</title><rect x="346.5" y="515.0" width="131.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="349.5" y="526.0">java/lang/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,321 samples, 11.13%)</title><rect x="346.5" y="499.0" width="131.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.5" y="510.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,321 samples, 11.13%)</title><rect x="346.5" y="483.0" width="131.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.5" y="494.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (100 samples, 0.84%)</title><rect x="347.0" y="467.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="350.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (100 samples, 0.84%)</title><rect x="347.0" y="451.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (85 samples, 0.72%)</title><rect x="347.1" y="435.0" width="8.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="350.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (84 samples, 0.71%)</title><rect x="347.2" y="419.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="350.2" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (84 samples, 0.71%)</title><rect x="347.2" y="403.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.2" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (77 samples, 0.65%)</title><rect x="347.9" y="387.0" width="7.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="350.9" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (72 samples, 0.61%)</title><rect x="348.1" y="371.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="351.1" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (70 samples, 0.59%)</title><rect x="348.3" y="355.0" width="7.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="351.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.03%)</title><rect x="355.6" y="435.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.03%)</title><rect x="355.6" y="419.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.03%)</title><rect x="355.6" y="403.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="358.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.09%)</title><rect x="355.8" y="435.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.09%)</title><rect x="355.8" y="419.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="358.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.09%)</title><rect x="355.8" y="403.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.09%)</title><rect x="355.8" y="387.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (11 samples, 0.09%)</title><rect x="355.8" y="371.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="358.8" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (10 samples, 0.08%)</title><rect x="355.9" y="355.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="358.9" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.08%)</title><rect x="356.0" y="339.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="359.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (1,216 samples, 10.24%)</title><rect x="356.9" y="467.0" width="120.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.9" y="478.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (1,216 samples, 10.24%)</title><rect x="356.9" y="451.0" width="120.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.9" y="462.0">ru/mail/polis/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (99 samples, 0.83%)</title><rect x="356.9" y="435.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (96 samples, 0.81%)</title><rect x="357.1" y="419.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.1" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.05%)</title><rect x="357.1" y="403.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.1" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.03%)</title><rect x="357.3" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="360.3" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (90 samples, 0.76%)</title><rect x="357.7" y="403.0" width="9.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.7" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (90 samples, 0.76%)</title><rect x="357.7" y="387.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="360.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (89 samples, 0.75%)</title><rect x="357.8" y="371.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="360.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (89 samples, 0.75%)</title><rect x="357.8" y="355.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="360.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (88 samples, 0.74%)</title><rect x="357.9" y="339.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.9" y="350.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.03%)</title><rect x="357.9" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.9" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="357.9" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="360.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (83 samples, 0.70%)</title><rect x="358.4" y="323.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (83 samples, 0.70%)</title><rect x="358.4" y="307.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="361.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (80 samples, 0.67%)</title><rect x="358.6" y="291.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="361.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (80 samples, 0.67%)</title><rect x="358.6" y="275.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="361.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (80 samples, 0.67%)</title><rect x="358.6" y="259.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="361.6" y="270.0"></text>
</g>
<g>
<title>write (78 samples, 0.66%)</title><rect x="358.8" y="243.0" width="7.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="361.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$116/640279467.act (1,117 samples, 9.41%)</title><rect x="366.8" y="435.0" width="111.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="369.8" y="446.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$1 (1,117 samples, 9.41%)</title><rect x="366.8" y="419.0" width="111.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="369.8" y="430.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.put (1,117 samples, 9.41%)</title><rect x="366.8" y="403.0" width="111.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.8" y="414.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.04%)</title><rect x="366.9" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="369.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.03%)</title><rect x="367.0" y="371.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="370.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="367.0" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="367.0" y="339.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="370.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,110 samples, 9.35%)</title><rect x="367.5" y="387.0" width="110.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.5" y="398.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,103 samples, 9.29%)</title><rect x="367.5" y="371.0" width="109.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.5" y="382.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,103 samples, 9.29%)</title><rect x="367.5" y="355.0" width="109.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="370.5" y="366.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,100 samples, 9.27%)</title><rect x="367.8" y="339.0" width="109.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="370.8" y="350.0">Java_org_rock..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,095 samples, 9.22%)</title><rect x="368.3" y="323.0" width="108.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="371.3" y="334.0">rocksdb_put_h..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.07%)</title><rect x="369.6" y="307.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="372.6" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="370.1" y="291.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="373.1" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="370.1" y="275.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="373.1" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="370.1" y="259.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="373.1" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="370.1" y="243.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="373.1" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="370.1" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="373.1" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.05%)</title><rect x="370.5" y="307.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="373.5" y="318.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.05%)</title><rect x="370.5" y="291.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="373.5" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.05%)</title><rect x="370.5" y="275.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="373.5" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="370.7" y="259.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="373.7" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.03%)</title><rect x="370.7" y="243.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="373.7" y="254.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="370.8" y="227.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="373.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,067 samples, 8.99%)</title><rect x="371.1" y="307.0" width="106.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="374.1" y="318.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,067 samples, 8.99%)</title><rect x="371.1" y="291.0" width="106.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="374.1" y="302.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,067 samples, 8.99%)</title><rect x="371.1" y="275.0" width="106.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="374.1" y="286.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,047 samples, 8.82%)</title><rect x="371.3" y="259.0" width="104.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="374.3" y="270.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,045 samples, 8.80%)</title><rect x="371.4" y="243.0" width="103.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="374.4" y="254.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (76 samples, 0.64%)</title><rect x="373.2" y="227.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="376.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (73 samples, 0.61%)</title><rect x="373.5" y="211.0" width="7.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="376.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (73 samples, 0.61%)</title><rect x="373.5" y="195.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="376.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (70 samples, 0.59%)</title><rect x="373.5" y="179.0" width="7.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="376.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (67 samples, 0.56%)</title><rect x="373.8" y="163.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="376.8" y="174.0"></text>
</g>
<g>
<title>write (65 samples, 0.55%)</title><rect x="374.0" y="147.0" width="6.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="377.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (3 samples, 0.03%)</title><rect x="380.5" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="383.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (7 samples, 0.06%)</title><rect x="380.9" y="227.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="383.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="381.0" y="211.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="384.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="381.0" y="195.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="384.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.04%)</title><rect x="381.1" y="179.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="384.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.03%)</title><rect x="381.3" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="384.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.03%)</title><rect x="381.3" y="147.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="384.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (26 samples, 0.22%)</title><rect x="381.6" y="227.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="384.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.03%)</title><rect x="382.2" y="211.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="385.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (16 samples, 0.13%)</title><rect x="382.6" y="211.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="385.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (16 samples, 0.13%)</title><rect x="382.6" y="195.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="385.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (14 samples, 0.12%)</title><rect x="382.8" y="179.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="385.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (11 samples, 0.09%)</title><rect x="383.1" y="163.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="386.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.08%)</title><rect x="383.2" y="147.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="386.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.07%)</title><rect x="383.4" y="131.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="386.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="383.9" y="115.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="386.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (423 samples, 3.56%)</title><rect x="384.3" y="227.0" width="42.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="387.3" y="238.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (71 samples, 0.60%)</title><rect x="401.6" y="211.0" width="7.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="404.6" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (174 samples, 1.47%)</title><rect x="408.7" y="211.0" width="17.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="411.7" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (170 samples, 1.43%)</title><rect x="408.7" y="195.0" width="16.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="411.7" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.03%)</title><rect x="425.6" y="195.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="428.6" y="206.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.03%)</title><rect x="425.6" y="179.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="428.6" y="190.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.03%)</title><rect x="425.6" y="163.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="428.6" y="174.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (3 samples, 0.03%)</title><rect x="426.0" y="211.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="429.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (464 samples, 3.91%)</title><rect x="426.3" y="227.0" width="46.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="429.3" y="238.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (462 samples, 3.89%)</title><rect x="426.4" y="211.0" width="46.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="429.4" y="222.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (380 samples, 3.20%)</title><rect x="434.0" y="195.0" width="37.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="437.0" y="206.0">si_..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (4 samples, 0.03%)</title><rect x="472.0" y="195.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="475.0" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.03%)</title><rect x="472.0" y="179.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="475.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (5 samples, 0.04%)</title><rect x="472.5" y="227.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="475.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.04%)</title><rect x="472.5" y="211.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="475.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (14 samples, 0.12%)</title><rect x="473.3" y="227.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="476.3" y="238.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (14 samples, 0.12%)</title><rect x="473.3" y="211.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="476.3" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.11%)</title><rect x="473.3" y="195.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="476.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.05%)</title><rect x="475.3" y="259.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="478.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.04%)</title><rect x="475.3" y="243.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="478.3" y="254.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (4 samples, 0.03%)</title><rect x="475.4" y="227.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="478.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="475.9" y="259.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="478.9" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.03%)</title><rect x="476.0" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="479.0" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="476.0" y="227.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="479.0" y="238.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="476.0" y="211.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="479.0" y="222.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="476.0" y="195.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="479.0" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="476.0" y="179.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="479.0" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="476.0" y="163.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="479.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.04%)</title><rect x="476.5" y="259.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="479.5" y="270.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.03%)</title><rect x="476.6" y="243.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="479.6" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.03%)</title><rect x="476.7" y="227.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="479.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (5 samples, 0.04%)</title><rect x="477.3" y="371.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="480.3" y="382.0"></text>
</g>
<g>
<title>[worker tid=44803] (1,234 samples, 10.40%)</title><rect x="477.8" y="531.0" width="122.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="480.8" y="542.0">[worker tid=448..</text>
</g>
<g>
<title>java/lang/Thread.run (1,234 samples, 10.40%)</title><rect x="477.8" y="515.0" width="122.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.8" y="526.0">java/lang/Threa..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,234 samples, 10.40%)</title><rect x="477.8" y="499.0" width="122.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.8" y="510.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,234 samples, 10.40%)</title><rect x="477.8" y="483.0" width="122.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.8" y="494.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (92 samples, 0.78%)</title><rect x="478.0" y="467.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="481.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (92 samples, 0.78%)</title><rect x="478.0" y="451.0" width="9.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="481.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (71 samples, 0.60%)</title><rect x="478.1" y="435.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="481.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (70 samples, 0.59%)</title><rect x="478.2" y="419.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="481.2" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (70 samples, 0.59%)</title><rect x="478.2" y="403.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.2" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (59 samples, 0.50%)</title><rect x="479.3" y="387.0" width="5.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="482.3" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (57 samples, 0.48%)</title><rect x="479.4" y="371.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="482.4" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (54 samples, 0.45%)</title><rect x="479.6" y="355.0" width="5.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="482.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.05%)</title><rect x="485.2" y="435.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.05%)</title><rect x="485.2" y="419.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="488.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (6 samples, 0.05%)</title><rect x="485.2" y="403.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="488.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.03%)</title><rect x="485.2" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 0.12%)</title><rect x="485.8" y="435.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.12%)</title><rect x="485.8" y="419.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="488.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.12%)</title><rect x="485.8" y="403.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.12%)</title><rect x="485.8" y="387.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 0.12%)</title><rect x="485.8" y="371.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.8" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (13 samples, 0.11%)</title><rect x="485.8" y="355.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="488.8" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.09%)</title><rect x="486.0" y="339.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="489.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (1,140 samples, 9.60%)</title><rect x="487.2" y="467.0" width="113.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="490.2" y="478.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (1,138 samples, 9.59%)</title><rect x="487.4" y="451.0" width="113.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.4" y="462.0">ru/mail/polis/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (87 samples, 0.73%)</title><rect x="487.4" y="435.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="490.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (85 samples, 0.72%)</title><rect x="487.6" y="419.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.05%)</title><rect x="487.6" y="403.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="490.6" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.05%)</title><rect x="487.6" y="387.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.6" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.03%)</title><rect x="487.6" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="487.9" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="490.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (79 samples, 0.67%)</title><rect x="488.2" y="403.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.2" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (79 samples, 0.67%)</title><rect x="488.2" y="387.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.2" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (79 samples, 0.67%)</title><rect x="488.2" y="371.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (79 samples, 0.67%)</title><rect x="488.2" y="355.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (78 samples, 0.66%)</title><rect x="488.3" y="339.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.3" y="350.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (5 samples, 0.04%)</title><rect x="488.3" y="323.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="491.3" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="488.5" y="307.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="491.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (71 samples, 0.60%)</title><rect x="489.0" y="323.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="492.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (71 samples, 0.60%)</title><rect x="489.0" y="307.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="492.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (69 samples, 0.58%)</title><rect x="489.0" y="291.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="492.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (69 samples, 0.58%)</title><rect x="489.0" y="275.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="492.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (69 samples, 0.58%)</title><rect x="489.0" y="259.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="492.0" y="270.0"></text>
</g>
<g>
<title>write (69 samples, 0.58%)</title><rect x="489.0" y="243.0" width="6.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="492.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$116/640279467.act (1,051 samples, 8.85%)</title><rect x="496.0" y="435.0" width="104.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="499.0" y="446.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$1 (1,051 samples, 8.85%)</title><rect x="496.0" y="419.0" width="104.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="499.0" y="430.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.put (1,051 samples, 8.85%)</title><rect x="496.0" y="403.0" width="104.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.0" y="414.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,050 samples, 8.85%)</title><rect x="496.1" y="387.0" width="104.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="499.1" y="398.0">ru/mail/poli..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,048 samples, 8.83%)</title><rect x="496.2" y="371.0" width="104.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.2" y="382.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,048 samples, 8.83%)</title><rect x="496.2" y="355.0" width="104.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="499.2" y="366.0">org/rocksdb/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,043 samples, 8.79%)</title><rect x="496.6" y="339.0" width="103.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="499.6" y="350.0">Java_org_roc..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,035 samples, 8.72%)</title><rect x="497.4" y="323.0" width="102.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="500.4" y="334.0">rocksdb_put_..</text>
</g>
<g>
<title>free_tiny (4 samples, 0.03%)</title><rect x="497.7" y="307.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="500.7" y="318.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.03%)</title><rect x="497.7" y="291.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="500.7" y="302.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.03%)</title><rect x="497.8" y="275.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="500.8" y="286.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.05%)</title><rect x="498.2" y="307.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="501.2" y="318.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.07%)</title><rect x="498.8" y="307.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="501.8" y="318.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.07%)</title><rect x="498.8" y="291.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="501.8" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.06%)</title><rect x="498.9" y="275.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="501.9" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.04%)</title><rect x="499.1" y="259.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="502.1" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.04%)</title><rect x="499.1" y="243.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="502.1" y="254.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="499.3" y="227.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="502.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,010 samples, 8.51%)</title><rect x="499.6" y="307.0" width="100.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="502.6" y="318.0">rocksdb::Com..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,010 samples, 8.51%)</title><rect x="499.6" y="291.0" width="100.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="502.6" y="302.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,010 samples, 8.51%)</title><rect x="499.6" y="275.0" width="100.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="502.6" y="286.0">rocksdb::DB:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (993 samples, 8.37%)</title><rect x="499.8" y="259.0" width="98.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="502.8" y="270.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (990 samples, 8.34%)</title><rect x="499.9" y="243.0" width="98.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="502.9" y="254.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (48 samples, 0.40%)</title><rect x="500.9" y="227.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="503.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (47 samples, 0.40%)</title><rect x="500.9" y="211.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="503.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (47 samples, 0.40%)</title><rect x="500.9" y="195.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="503.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (42 samples, 0.35%)</title><rect x="501.1" y="179.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="504.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (40 samples, 0.34%)</title><rect x="501.3" y="163.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="504.3" y="174.0"></text>
</g>
<g>
<title>write (39 samples, 0.33%)</title><rect x="501.4" y="147.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="504.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (8 samples, 0.07%)</title><rect x="505.8" y="227.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="508.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (8 samples, 0.07%)</title><rect x="505.8" y="211.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="508.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="505.9" y="195.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="508.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="505.9" y="179.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="508.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (7 samples, 0.06%)</title><rect x="505.9" y="163.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="508.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.04%)</title><rect x="506.1" y="147.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="509.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (31 samples, 0.26%)</title><rect x="506.6" y="227.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="509.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (24 samples, 0.20%)</title><rect x="507.3" y="211.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="510.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.19%)</title><rect x="507.3" y="195.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="510.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.19%)</title><rect x="507.3" y="179.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="510.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (19 samples, 0.16%)</title><rect x="507.7" y="163.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="510.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (18 samples, 0.15%)</title><rect x="507.8" y="147.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="510.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.13%)</title><rect x="508.1" y="131.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="511.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (8 samples, 0.07%)</title><rect x="508.7" y="115.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="511.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (366 samples, 3.08%)</title><rect x="509.7" y="227.0" width="36.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="512.7" y="238.0">roc..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (59 samples, 0.50%)</title><rect x="524.0" y="211.0" width="5.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="527.0" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (161 samples, 1.36%)</title><rect x="529.9" y="211.0" width="16.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="532.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (157 samples, 1.32%)</title><rect x="529.9" y="195.0" width="15.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="532.9" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.03%)</title><rect x="545.5" y="195.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="548.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (500 samples, 4.21%)</title><rect x="546.1" y="227.0" width="49.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="549.1" y="238.0">rocks..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (496 samples, 4.18%)</title><rect x="546.3" y="211.0" width="49.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="549.3" y="222.0">rocks..</text>
</g>
<g>
<title>sched_yield (3 samples, 0.03%)</title><rect x="554.2" y="195.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="557.2" y="206.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (401 samples, 3.38%)</title><rect x="554.5" y="195.0" width="39.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="557.5" y="206.0">si_..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (5 samples, 0.04%)</title><rect x="594.3" y="195.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="597.3" y="206.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.04%)</title><rect x="594.3" y="179.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="597.3" y="190.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.03%)</title><rect x="594.4" y="163.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="597.4" y="174.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (3 samples, 0.03%)</title><rect x="594.5" y="147.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="597.5" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (8 samples, 0.07%)</title><rect x="594.8" y="195.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="597.8" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.07%)</title><rect x="594.8" y="179.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="597.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (3 samples, 0.03%)</title><rect x="596.1" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="599.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (3 samples, 0.03%)</title><rect x="596.1" y="211.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="599.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (15 samples, 0.13%)</title><rect x="596.4" y="227.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="599.4" y="238.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.09%)</title><rect x="596.5" y="211.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="599.5" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.08%)</title><rect x="596.5" y="195.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="599.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="598.5" y="259.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="601.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.04%)</title><rect x="598.8" y="259.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="601.8" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.03%)</title><rect x="598.9" y="243.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="601.9" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="598.9" y="227.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="601.9" y="238.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="598.9" y="211.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="601.9" y="222.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="598.9" y="195.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="601.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.04%)</title><rect x="599.3" y="259.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="602.3" y="270.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.03%)</title><rect x="599.4" y="243.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="602.4" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.03%)</title><rect x="599.5" y="227.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="602.5" y="238.0"></text>
</g>
<g>
<title>[worker tid=83459] (1,055 samples, 8.89%)</title><rect x="600.5" y="531.0" width="104.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="603.5" y="542.0">[worker tid=..</text>
</g>
<g>
<title>java/lang/Thread.run (1,055 samples, 8.89%)</title><rect x="600.5" y="515.0" width="104.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="603.5" y="526.0">java/lang/Th..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,055 samples, 8.89%)</title><rect x="600.5" y="499.0" width="104.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="603.5" y="510.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,055 samples, 8.89%)</title><rect x="600.5" y="483.0" width="104.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="603.5" y="494.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (80 samples, 0.67%)</title><rect x="600.9" y="467.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="603.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (80 samples, 0.67%)</title><rect x="600.9" y="451.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="603.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (61 samples, 0.51%)</title><rect x="600.9" y="435.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (60 samples, 0.51%)</title><rect x="601.0" y="419.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="604.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (60 samples, 0.51%)</title><rect x="601.0" y="403.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="604.0" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (54 samples, 0.45%)</title><rect x="601.6" y="387.0" width="5.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="604.6" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (49 samples, 0.41%)</title><rect x="602.0" y="371.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="605.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (44 samples, 0.37%)</title><rect x="602.4" y="355.0" width="4.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="605.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.08%)</title><rect x="607.0" y="435.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.08%)</title><rect x="607.0" y="419.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="610.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (8 samples, 0.07%)</title><rect x="607.0" y="403.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="610.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.06%)</title><rect x="607.1" y="387.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="610.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.06%)</title><rect x="607.1" y="371.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="610.1" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.06%)</title><rect x="607.1" y="355.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="610.1" y="366.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.05%)</title><rect x="607.2" y="339.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="610.2" y="350.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.05%)</title><rect x="607.2" y="323.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="610.2" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.05%)</title><rect x="607.2" y="307.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="610.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.08%)</title><rect x="607.9" y="435.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="610.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.08%)</title><rect x="607.9" y="419.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="610.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.08%)</title><rect x="607.9" y="403.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.08%)</title><rect x="607.9" y="387.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="610.9" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 0.08%)</title><rect x="607.9" y="371.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="610.9" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (9 samples, 0.08%)</title><rect x="608.0" y="355.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="611.0" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.05%)</title><rect x="608.3" y="339.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="611.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (969 samples, 8.16%)</title><rect x="609.0" y="467.0" width="96.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="612.0" y="478.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (969 samples, 8.16%)</title><rect x="609.0" y="451.0" width="96.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="612.0" y="462.0">ru/mail/pol..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (52 samples, 0.44%)</title><rect x="609.1" y="435.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="612.1" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (51 samples, 0.43%)</title><rect x="609.1" y="419.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="612.1" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.03%)</title><rect x="609.1" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="612.1" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.03%)</title><rect x="609.1" y="387.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (48 samples, 0.40%)</title><rect x="609.4" y="403.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="612.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (48 samples, 0.40%)</title><rect x="609.4" y="387.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="612.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (48 samples, 0.40%)</title><rect x="609.4" y="371.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="612.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (48 samples, 0.40%)</title><rect x="609.4" y="355.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="612.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (47 samples, 0.40%)</title><rect x="609.5" y="339.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="612.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (45 samples, 0.38%)</title><rect x="609.7" y="323.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="612.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (45 samples, 0.38%)</title><rect x="609.7" y="307.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="612.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (45 samples, 0.38%)</title><rect x="609.7" y="291.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="612.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (45 samples, 0.38%)</title><rect x="609.7" y="275.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="612.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (45 samples, 0.38%)</title><rect x="609.7" y="259.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="612.7" y="270.0"></text>
</g>
<g>
<title>write (44 samples, 0.37%)</title><rect x="609.8" y="243.0" width="4.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="612.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$116/640279467.act (916 samples, 7.72%)</title><rect x="614.3" y="435.0" width="91.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="617.3" y="446.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$1 (916 samples, 7.72%)</title><rect x="614.3" y="419.0" width="91.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.3" y="430.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.put (916 samples, 7.72%)</title><rect x="614.3" y="403.0" width="91.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="617.3" y="414.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (915 samples, 7.71%)</title><rect x="614.4" y="387.0" width="91.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="617.4" y="398.0">ru/mail/po..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (910 samples, 7.67%)</title><rect x="614.4" y="371.0" width="90.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="617.4" y="382.0">org/rocksd..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (910 samples, 7.67%)</title><rect x="614.4" y="355.0" width="90.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.4" y="366.0">org/rocksd..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (908 samples, 7.65%)</title><rect x="614.6" y="339.0" width="90.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="617.6" y="350.0">Java_org_r..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (904 samples, 7.62%)</title><rect x="615.0" y="323.0" width="89.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="618.0" y="334.0">rocksdb_pu..</text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="615.5" y="307.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="618.5" y="318.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.03%)</title><rect x="615.8" y="307.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="618.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (890 samples, 7.50%)</title><rect x="616.3" y="307.0" width="88.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="619.3" y="318.0">rocksdb::C..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (890 samples, 7.50%)</title><rect x="616.3" y="291.0" width="88.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="619.3" y="302.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (890 samples, 7.50%)</title><rect x="616.3" y="275.0" width="88.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="619.3" y="286.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (869 samples, 7.32%)</title><rect x="616.4" y="259.0" width="86.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="619.4" y="270.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (865 samples, 7.29%)</title><rect x="616.5" y="243.0" width="86.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="619.5" y="254.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (39 samples, 0.33%)</title><rect x="617.5" y="227.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="620.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (38 samples, 0.32%)</title><rect x="617.5" y="211.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="620.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (36 samples, 0.30%)</title><rect x="617.6" y="195.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="620.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (34 samples, 0.29%)</title><rect x="617.6" y="179.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="620.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (34 samples, 0.29%)</title><rect x="617.6" y="163.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="620.6" y="174.0"></text>
</g>
<g>
<title>write (34 samples, 0.29%)</title><rect x="617.6" y="147.0" width="3.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="620.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (8 samples, 0.07%)</title><rect x="621.7" y="227.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="624.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (8 samples, 0.07%)</title><rect x="621.7" y="211.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="624.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="621.8" y="195.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="624.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="621.9" y="179.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="624.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.03%)</title><rect x="622.0" y="163.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="625.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.03%)</title><rect x="622.0" y="147.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="625.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (27 samples, 0.23%)</title><rect x="622.5" y="227.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="625.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (21 samples, 0.18%)</title><rect x="623.1" y="211.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="626.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (18 samples, 0.15%)</title><rect x="623.4" y="195.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="626.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (17 samples, 0.14%)</title><rect x="623.5" y="179.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="626.5" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="623.5" y="163.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="626.5" y="174.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="623.5" y="147.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="626.5" y="158.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="623.5" y="131.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="626.5" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="623.5" y="115.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="626.5" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="623.5" y="99.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="626.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (12 samples, 0.10%)</title><rect x="623.9" y="163.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="626.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.09%)</title><rect x="624.0" y="147.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="627.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.08%)</title><rect x="624.2" y="131.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="627.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="624.8" y="115.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="627.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (306 samples, 2.58%)</title><rect x="625.2" y="227.0" width="30.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="628.2" y="238.0">ro..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (41 samples, 0.35%)</title><rect x="636.4" y="211.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="639.4" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (152 samples, 1.28%)</title><rect x="640.5" y="211.0" width="15.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="643.5" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (147 samples, 1.24%)</title><rect x="640.5" y="195.0" width="14.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="643.5" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (5 samples, 0.04%)</title><rect x="655.1" y="195.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="658.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (455 samples, 3.83%)</title><rect x="655.6" y="227.0" width="45.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="658.6" y="238.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (453 samples, 3.82%)</title><rect x="655.6" y="211.0" width="45.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="658.6" y="222.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (381 samples, 3.21%)</title><rect x="661.9" y="195.0" width="37.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="664.9" y="206.0">si_..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (6 samples, 0.05%)</title><rect x="700.0" y="195.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="703.0" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.05%)</title><rect x="700.0" y="179.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="703.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (10 samples, 0.08%)</title><rect x="701.0" y="227.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="704.0" y="238.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.08%)</title><rect x="701.0" y="211.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="704.0" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.07%)</title><rect x="701.0" y="195.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="704.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 0.07%)</title><rect x="702.8" y="259.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="705.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.05%)</title><rect x="703.0" y="243.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="706.0" y="254.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.03%)</title><rect x="703.1" y="227.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="706.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="703.6" y="259.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="706.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.03%)</title><rect x="704.2" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="707.2" y="270.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="704.3" y="243.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="707.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (3 samples, 0.03%)</title><rect x="705.1" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="708.1" y="382.0"></text>
</g>
<g>
<title>[worker tid=83971] (1,089 samples, 9.17%)</title><rect x="705.4" y="531.0" width="108.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="708.4" y="542.0">[worker tid=8..</text>
</g>
<g>
<title>java/lang/Thread.run (1,089 samples, 9.17%)</title><rect x="705.4" y="515.0" width="108.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.4" y="526.0">java/lang/Thr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,089 samples, 9.17%)</title><rect x="705.4" y="499.0" width="108.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="708.4" y="510.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,089 samples, 9.17%)</title><rect x="705.4" y="483.0" width="108.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="708.4" y="494.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (89 samples, 0.75%)</title><rect x="706.4" y="467.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="709.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (88 samples, 0.74%)</title><rect x="706.5" y="451.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (76 samples, 0.64%)</title><rect x="706.5" y="435.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="709.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (74 samples, 0.62%)</title><rect x="706.7" y="419.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="709.7" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (74 samples, 0.62%)</title><rect x="706.7" y="403.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="709.7" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (71 samples, 0.60%)</title><rect x="707.0" y="387.0" width="7.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="710.0" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (68 samples, 0.57%)</title><rect x="707.1" y="371.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="710.1" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (63 samples, 0.53%)</title><rect x="707.2" y="355.0" width="6.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="710.2" y="366.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.03%)</title><rect x="713.4" y="355.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="716.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.05%)</title><rect x="714.0" y="435.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="717.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.05%)</title><rect x="714.0" y="419.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (4 samples, 0.03%)</title><rect x="714.1" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="717.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.03%)</title><rect x="714.2" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="717.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.03%)</title><rect x="714.2" y="371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="717.2" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.03%)</title><rect x="714.2" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="717.2" y="366.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.03%)</title><rect x="714.2" y="339.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="717.2" y="350.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.03%)</title><rect x="714.2" y="323.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="717.2" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="714.2" y="307.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="717.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.05%)</title><rect x="714.6" y="435.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="717.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.05%)</title><rect x="714.6" y="419.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.05%)</title><rect x="714.6" y="403.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="717.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.05%)</title><rect x="714.6" y="387.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.6" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.05%)</title><rect x="714.6" y="371.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="717.6" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.05%)</title><rect x="714.6" y="355.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="717.6" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.04%)</title><rect x="714.6" y="339.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="717.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (990 samples, 8.34%)</title><rect x="715.2" y="467.0" width="98.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.2" y="478.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (990 samples, 8.34%)</title><rect x="715.2" y="451.0" width="98.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="718.2" y="462.0">ru/mail/poli..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (56 samples, 0.47%)</title><rect x="715.2" y="435.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="718.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (55 samples, 0.46%)</title><rect x="715.3" y="419.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="718.3" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.05%)</title><rect x="715.3" y="403.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.04%)</title><rect x="715.4" y="387.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="718.4" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.03%)</title><rect x="715.4" y="371.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="718.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (49 samples, 0.41%)</title><rect x="715.9" y="403.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="718.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (49 samples, 0.41%)</title><rect x="715.9" y="387.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="718.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (49 samples, 0.41%)</title><rect x="715.9" y="371.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="718.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (49 samples, 0.41%)</title><rect x="715.9" y="355.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="718.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (48 samples, 0.40%)</title><rect x="716.0" y="339.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (47 samples, 0.40%)</title><rect x="716.1" y="323.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (47 samples, 0.40%)</title><rect x="716.1" y="307.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (43 samples, 0.36%)</title><rect x="716.1" y="291.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="719.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (43 samples, 0.36%)</title><rect x="716.1" y="275.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (43 samples, 0.36%)</title><rect x="716.1" y="259.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.1" y="270.0"></text>
</g>
<g>
<title>write (42 samples, 0.35%)</title><rect x="716.2" y="243.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="719.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.03%)</title><rect x="720.4" y="291.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="723.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$116/640279467.act (934 samples, 7.87%)</title><rect x="720.8" y="435.0" width="92.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="723.8" y="446.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$1 (934 samples, 7.87%)</title><rect x="720.8" y="419.0" width="92.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="723.8" y="430.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.put (934 samples, 7.87%)</title><rect x="720.8" y="403.0" width="92.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.8" y="414.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (932 samples, 7.85%)</title><rect x="721.0" y="387.0" width="92.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="724.0" y="398.0">ru/mail/pol..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (929 samples, 7.83%)</title><rect x="721.0" y="371.0" width="92.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="724.0" y="382.0">org/rocksdb..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (929 samples, 7.83%)</title><rect x="721.0" y="355.0" width="92.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="724.0" y="366.0">org/rocksdb..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (929 samples, 7.83%)</title><rect x="721.0" y="339.0" width="92.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="724.0" y="350.0">Java_org_ro..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (926 samples, 7.80%)</title><rect x="721.3" y="323.0" width="92.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="724.3" y="334.0">rocksdb_put..</text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.05%)</title><rect x="721.9" y="307.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="724.9" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.03%)</title><rect x="722.1" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="725.1" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="722.2" y="275.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="725.2" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="722.2" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="725.2" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="722.2" y="243.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="725.2" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="722.2" y="227.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="725.2" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.07%)</title><rect x="722.5" y="307.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="725.5" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="722.8" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="725.8" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="722.8" y="275.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="725.8" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="722.8" y="259.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="725.8" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="722.8" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="725.8" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="722.8" y="227.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="725.8" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.06%)</title><rect x="723.3" y="307.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="726.3" y="318.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.06%)</title><rect x="723.3" y="291.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="726.3" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.05%)</title><rect x="723.3" y="275.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="726.3" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.05%)</title><rect x="723.3" y="259.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="726.3" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.05%)</title><rect x="723.3" y="243.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="726.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (897 samples, 7.56%)</title><rect x="724.0" y="307.0" width="89.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="727.0" y="318.0">rocksdb::C..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (896 samples, 7.55%)</title><rect x="724.1" y="291.0" width="89.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="727.1" y="302.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (895 samples, 7.54%)</title><rect x="724.1" y="275.0" width="88.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="727.1" y="286.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (882 samples, 7.43%)</title><rect x="724.2" y="259.0" width="87.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="727.2" y="270.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (880 samples, 7.41%)</title><rect x="724.3" y="243.0" width="87.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="727.3" y="254.0">rocksdb::D..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.03%)</title><rect x="724.6" y="227.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="727.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (35 samples, 0.29%)</title><rect x="725.0" y="227.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="728.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (35 samples, 0.29%)</title><rect x="725.0" y="211.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="728.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (34 samples, 0.29%)</title><rect x="725.1" y="195.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="728.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (33 samples, 0.28%)</title><rect x="725.1" y="179.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="728.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (31 samples, 0.26%)</title><rect x="725.3" y="163.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="728.3" y="174.0"></text>
</g>
<g>
<title>write (31 samples, 0.26%)</title><rect x="725.3" y="147.0" width="3.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="728.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (9 samples, 0.08%)</title><rect x="728.6" y="227.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="731.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (8 samples, 0.07%)</title><rect x="728.7" y="211.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="731.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="728.8" y="195.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="731.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="728.8" y="179.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="731.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (5 samples, 0.04%)</title><rect x="728.9" y="163.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="731.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.04%)</title><rect x="728.9" y="147.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="731.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (33 samples, 0.28%)</title><rect x="729.5" y="227.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="732.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (25 samples, 0.21%)</title><rect x="730.3" y="211.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="733.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (25 samples, 0.21%)</title><rect x="730.3" y="195.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="733.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.20%)</title><rect x="730.4" y="179.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="733.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (19 samples, 0.16%)</title><rect x="730.6" y="163.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="733.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (16 samples, 0.13%)</title><rect x="730.9" y="147.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="733.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.10%)</title><rect x="731.3" y="131.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="734.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.06%)</title><rect x="731.8" y="115.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="734.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="732.1" y="99.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="735.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (312 samples, 2.63%)</title><rect x="732.8" y="227.0" width="31.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="735.8" y="238.0">ro..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (57 samples, 0.48%)</title><rect x="745.6" y="211.0" width="5.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="748.6" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (124 samples, 1.04%)</title><rect x="751.5" y="211.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="754.5" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (114 samples, 0.96%)</title><rect x="751.5" y="195.0" width="11.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="754.5" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (9 samples, 0.08%)</title><rect x="762.8" y="195.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="765.8" y="206.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (8 samples, 0.07%)</title><rect x="762.9" y="179.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="765.9" y="190.0"></text>
</g>
<g>
<title>__psynch_mutexwait (8 samples, 0.07%)</title><rect x="762.9" y="163.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="765.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (466 samples, 3.93%)</title><rect x="763.8" y="227.0" width="46.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="766.8" y="238.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (464 samples, 3.91%)</title><rect x="763.8" y="211.0" width="46.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="766.8" y="222.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (381 samples, 3.21%)</title><rect x="770.7" y="195.0" width="37.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="773.7" y="206.0">si_..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (6 samples, 0.05%)</title><rect x="808.6" y="195.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="811.6" y="206.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.04%)</title><rect x="808.6" y="179.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="811.6" y="190.0"></text>
</g>
<g>
<title>__block_literal_global (3 samples, 0.03%)</title><rect x="808.7" y="163.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="811.7" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (8 samples, 0.07%)</title><rect x="809.2" y="195.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="812.2" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.06%)</title><rect x="809.2" y="179.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="812.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.03%)</title><rect x="810.3" y="227.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="813.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.03%)</title><rect x="810.3" y="211.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="813.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (9 samples, 0.08%)</title><rect x="810.7" y="227.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="813.7" y="238.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.07%)</title><rect x="810.7" y="211.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="813.7" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.07%)</title><rect x="810.7" y="195.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="813.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="811.9" y="259.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="814.9" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.03%)</title><rect x="811.9" y="243.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="814.9" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="812.0" y="227.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="815.0" y="238.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="812.0" y="211.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="815.0" y="222.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="812.0" y="195.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="815.0" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="812.0" y="179.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="815.0" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="812.0" y="163.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="815.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.03%)</title><rect x="812.5" y="259.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="815.5" y="270.0"></text>
</g>
<g>
<title>[worker tid=84483] (1,161 samples, 9.78%)</title><rect x="813.6" y="531.0" width="115.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="816.6" y="542.0">[worker tid=84..</text>
</g>
<g>
<title>java/lang/Thread.run (1,161 samples, 9.78%)</title><rect x="813.6" y="515.0" width="115.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="816.6" y="526.0">java/lang/Thre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,161 samples, 9.78%)</title><rect x="813.6" y="499.0" width="115.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.6" y="510.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,161 samples, 9.78%)</title><rect x="813.6" y="483.0" width="115.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="816.6" y="494.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (68 samples, 0.57%)</title><rect x="813.9" y="467.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (68 samples, 0.57%)</title><rect x="813.9" y="451.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (54 samples, 0.45%)</title><rect x="813.9" y="435.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="816.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (52 samples, 0.44%)</title><rect x="814.1" y="419.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (52 samples, 0.44%)</title><rect x="814.1" y="403.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.1" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (45 samples, 0.38%)</title><rect x="814.8" y="387.0" width="4.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="817.8" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (40 samples, 0.34%)</title><rect x="815.0" y="371.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (36 samples, 0.30%)</title><rect x="815.1" y="355.0" width="3.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="818.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 0.04%)</title><rect x="819.3" y="435.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.04%)</title><rect x="819.3" y="419.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="822.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (4 samples, 0.03%)</title><rect x="819.3" y="403.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="822.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.03%)</title><rect x="819.4" y="387.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="822.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.03%)</title><rect x="819.4" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="822.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.03%)</title><rect x="819.4" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.4" y="366.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.03%)</title><rect x="819.4" y="339.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="822.4" y="350.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.03%)</title><rect x="819.4" y="323.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="822.4" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="819.4" y="307.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="822.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.08%)</title><rect x="819.8" y="435.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.08%)</title><rect x="819.8" y="419.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="822.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.08%)</title><rect x="819.8" y="403.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="822.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.08%)</title><rect x="819.8" y="387.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="822.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.08%)</title><rect x="819.8" y="371.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="822.8" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.07%)</title><rect x="819.9" y="355.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="822.9" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.06%)</title><rect x="819.9" y="339.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="822.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (1,090 samples, 9.18%)</title><rect x="820.7" y="467.0" width="108.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="823.7" y="478.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (1,090 samples, 9.18%)</title><rect x="820.7" y="451.0" width="108.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="823.7" y="462.0">ru/mail/polis..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (70 samples, 0.59%)</title><rect x="820.7" y="435.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="823.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (68 samples, 0.57%)</title><rect x="820.8" y="419.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="823.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.05%)</title><rect x="820.8" y="403.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="823.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.03%)</title><rect x="821.0" y="387.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.03%)</title><rect x="821.0" y="371.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="824.0" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (62 samples, 0.52%)</title><rect x="821.4" y="403.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="824.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (62 samples, 0.52%)</title><rect x="821.4" y="387.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="824.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (62 samples, 0.52%)</title><rect x="821.4" y="371.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="824.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (61 samples, 0.51%)</title><rect x="821.5" y="355.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="824.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (61 samples, 0.51%)</title><rect x="821.5" y="339.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="824.5" y="350.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.03%)</title><rect x="821.5" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="824.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.03%)</title><rect x="821.8" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="824.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.03%)</title><rect x="821.8" y="307.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.03%)</title><rect x="821.8" y="291.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (55 samples, 0.46%)</title><rect x="822.1" y="323.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="825.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (55 samples, 0.46%)</title><rect x="822.1" y="307.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="825.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (53 samples, 0.45%)</title><rect x="822.1" y="291.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="825.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (53 samples, 0.45%)</title><rect x="822.1" y="275.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="825.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (53 samples, 0.45%)</title><rect x="822.1" y="259.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="825.1" y="270.0"></text>
</g>
<g>
<title>write (51 samples, 0.43%)</title><rect x="822.3" y="243.0" width="5.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="825.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$116/640279467.act (1,020 samples, 8.59%)</title><rect x="827.6" y="435.0" width="101.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="830.6" y="446.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$1 (1,020 samples, 8.59%)</title><rect x="827.6" y="419.0" width="101.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.6" y="430.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.put (1,020 samples, 8.59%)</title><rect x="827.6" y="403.0" width="101.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="830.6" y="414.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,019 samples, 8.58%)</title><rect x="827.7" y="387.0" width="101.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="830.7" y="398.0">ru/mail/poli..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,019 samples, 8.58%)</title><rect x="827.7" y="371.0" width="101.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="830.7" y="382.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,019 samples, 8.58%)</title><rect x="827.7" y="355.0" width="101.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="830.7" y="366.0">org/rocksdb/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,015 samples, 8.55%)</title><rect x="828.1" y="339.0" width="100.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="831.1" y="350.0">Java_org_roc..</text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="828.1" y="323.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="831.1" y="334.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,010 samples, 8.51%)</title><rect x="828.6" y="323.0" width="100.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="831.6" y="334.0">rocksdb_put_..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.06%)</title><rect x="829.8" y="307.0" width="0.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="832.8" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="829.9" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="832.9" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.07%)</title><rect x="830.5" y="307.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="833.5" y="318.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.07%)</title><rect x="830.5" y="291.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="833.5" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.05%)</title><rect x="830.7" y="275.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="833.7" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.05%)</title><rect x="830.7" y="259.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="833.7" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.05%)</title><rect x="830.7" y="243.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="833.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (982 samples, 8.27%)</title><rect x="831.3" y="307.0" width="97.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="834.3" y="318.0">rocksdb::Co..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (982 samples, 8.27%)</title><rect x="831.3" y="291.0" width="97.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="834.3" y="302.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (979 samples, 8.25%)</title><rect x="831.3" y="275.0" width="97.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="834.3" y="286.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (966 samples, 8.14%)</title><rect x="831.4" y="259.0" width="96.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="834.4" y="270.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (962 samples, 8.10%)</title><rect x="831.5" y="243.0" width="95.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="834.5" y="254.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (41 samples, 0.35%)</title><rect x="832.7" y="227.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="835.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (40 samples, 0.34%)</title><rect x="832.7" y="211.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="835.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (39 samples, 0.33%)</title><rect x="832.8" y="195.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="835.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (37 samples, 0.31%)</title><rect x="832.8" y="179.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="835.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (36 samples, 0.30%)</title><rect x="832.9" y="163.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="835.9" y="174.0"></text>
</g>
<g>
<title>write (36 samples, 0.30%)</title><rect x="832.9" y="147.0" width="3.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="835.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (4 samples, 0.03%)</title><rect x="836.8" y="227.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="839.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (4 samples, 0.03%)</title><rect x="836.8" y="211.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="839.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.03%)</title><rect x="836.8" y="195.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="839.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.03%)</title><rect x="836.8" y="179.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="839.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.03%)</title><rect x="836.8" y="163.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="839.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.03%)</title><rect x="836.9" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (31 samples, 0.26%)</title><rect x="837.2" y="227.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (27 samples, 0.23%)</title><rect x="837.6" y="211.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="840.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.22%)</title><rect x="837.7" y="195.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="840.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (26 samples, 0.22%)</title><rect x="837.7" y="179.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="840.7" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.05%)</title><rect x="837.8" y="163.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="840.8" y="174.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.05%)</title><rect x="837.8" y="147.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="840.8" y="158.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.05%)</title><rect x="837.8" y="131.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="840.8" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.04%)</title><rect x="837.9" y="115.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="840.9" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.04%)</title><rect x="837.9" y="99.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="840.9" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="838.1" y="83.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="841.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (17 samples, 0.14%)</title><rect x="838.4" y="163.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="841.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (16 samples, 0.13%)</title><rect x="838.5" y="147.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="841.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (13 samples, 0.11%)</title><rect x="838.8" y="131.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="841.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.03%)</title><rect x="839.7" y="115.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="842.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (371 samples, 3.13%)</title><rect x="840.3" y="227.0" width="36.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="843.3" y="238.0">roc..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (64 samples, 0.54%)</title><rect x="854.8" y="211.0" width="6.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="857.8" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (161 samples, 1.36%)</title><rect x="861.2" y="211.0" width="16.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="864.2" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (154 samples, 1.30%)</title><rect x="861.2" y="195.0" width="15.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="864.2" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.06%)</title><rect x="876.5" y="195.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="879.5" y="206.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.03%)</title><rect x="876.8" y="179.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="879.8" y="190.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.03%)</title><rect x="876.8" y="163.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="879.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (484 samples, 4.08%)</title><rect x="877.2" y="227.0" width="48.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.2" y="238.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (484 samples, 4.08%)</title><rect x="877.2" y="211.0" width="48.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="880.2" y="222.0">rock..</text>
</g>
<g>
<title>sched_yield (4 samples, 0.03%)</title><rect x="884.3" y="195.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="887.3" y="206.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (398 samples, 3.35%)</title><rect x="884.7" y="195.0" width="39.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="887.7" y="206.0">si_..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (5 samples, 0.04%)</title><rect x="924.3" y="195.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="927.3" y="206.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.03%)</title><rect x="924.3" y="179.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="927.3" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (4 samples, 0.03%)</title><rect x="924.8" y="195.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="927.8" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.03%)</title><rect x="924.8" y="179.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="927.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (11 samples, 0.09%)</title><rect x="925.8" y="227.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="928.8" y="238.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.08%)</title><rect x="925.8" y="211.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="928.8" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.08%)</title><rect x="925.8" y="195.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="928.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.03%)</title><rect x="927.6" y="259.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="930.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.03%)</title><rect x="928.0" y="259.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.0" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.03%)</title><rect x="928.0" y="243.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.0" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="928.1" y="227.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="931.1" y="238.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="928.1" y="211.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="931.1" y="222.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="928.1" y="195.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="931.1" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="928.1" y="179.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="931.1" y="190.0"></text>
</g>
<g>
<title>[worker tid=86019] (1,295 samples, 10.91%)</title><rect x="929.0" y="531.0" width="128.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="932.0" y="542.0">[worker tid=86019]</text>
</g>
<g>
<title>java/lang/Thread.run (1,294 samples, 10.90%)</title><rect x="929.1" y="515.0" width="128.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="932.1" y="526.0">java/lang/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,294 samples, 10.90%)</title><rect x="929.1" y="499.0" width="128.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.1" y="510.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,294 samples, 10.90%)</title><rect x="929.1" y="483.0" width="128.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.1" y="494.0">java/util/concur..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.03%)</title><rect x="929.5" y="467.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="932.5" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.03%)</title><rect x="929.5" y="451.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="932.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (100 samples, 0.84%)</title><rect x="929.9" y="467.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="932.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (99 samples, 0.83%)</title><rect x="930.0" y="451.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="933.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (72 samples, 0.61%)</title><rect x="930.1" y="435.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="933.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.03%)</title><rect x="930.5" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="933.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.03%)</title><rect x="930.5" y="403.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="933.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.03%)</title><rect x="930.5" y="387.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="933.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.03%)</title><rect x="930.5" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="933.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.03%)</title><rect x="930.5" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="933.5" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.03%)</title><rect x="930.5" y="339.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="933.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (65 samples, 0.55%)</title><rect x="930.8" y="419.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="933.8" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (65 samples, 0.55%)</title><rect x="930.8" y="403.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="933.8" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (59 samples, 0.50%)</title><rect x="931.3" y="387.0" width="5.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="934.3" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (55 samples, 0.46%)</title><rect x="931.7" y="371.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="934.7" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (53 samples, 0.45%)</title><rect x="931.9" y="355.0" width="5.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="934.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (7 samples, 0.06%)</title><rect x="937.3" y="435.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="940.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (7 samples, 0.06%)</title><rect x="937.3" y="419.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="940.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (7 samples, 0.06%)</title><rect x="937.3" y="403.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="940.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.03%)</title><rect x="937.5" y="387.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="940.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.03%)</title><rect x="937.5" y="371.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="940.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.03%)</title><rect x="937.6" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="940.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.16%)</title><rect x="938.0" y="435.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="941.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.16%)</title><rect x="938.0" y="419.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="941.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.16%)</title><rect x="938.0" y="403.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="941.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.16%)</title><rect x="938.0" y="387.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="941.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.16%)</title><rect x="938.0" y="371.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="941.0" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.16%)</title><rect x="938.0" y="355.0" width="1.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="941.0" y="366.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.03%)</title><rect x="938.2" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="941.2" y="350.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.10%)</title><rect x="938.5" y="339.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="941.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (1,185 samples, 9.98%)</title><rect x="940.0" y="467.0" width="117.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="943.0" y="478.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (1,185 samples, 9.98%)</title><rect x="940.0" y="451.0" width="117.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="943.0" y="462.0">ru/mail/polis/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (118 samples, 0.99%)</title><rect x="940.2" y="435.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="943.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (114 samples, 0.96%)</title><rect x="940.5" y="419.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="943.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.05%)</title><rect x="940.5" y="403.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="943.5" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.03%)</title><rect x="940.7" y="387.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="943.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (108 samples, 0.91%)</title><rect x="941.1" y="403.0" width="10.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="944.1" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (107 samples, 0.90%)</title><rect x="941.2" y="387.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="944.2" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (106 samples, 0.89%)</title><rect x="941.3" y="371.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="944.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (106 samples, 0.89%)</title><rect x="941.3" y="355.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="944.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (104 samples, 0.88%)</title><rect x="941.5" y="339.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="944.5" y="350.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.03%)</title><rect x="941.5" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="944.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.03%)</title><rect x="941.8" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="944.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.03%)</title><rect x="941.8" y="307.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="944.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.03%)</title><rect x="941.8" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="944.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (98 samples, 0.83%)</title><rect x="942.1" y="323.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="945.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (98 samples, 0.83%)</title><rect x="942.1" y="307.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="945.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (89 samples, 0.75%)</title><rect x="942.1" y="291.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="945.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (89 samples, 0.75%)</title><rect x="942.1" y="275.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="945.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (89 samples, 0.75%)</title><rect x="942.1" y="259.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="945.1" y="270.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.03%)</title><rect x="942.3" y="243.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="945.3" y="254.0"></text>
</g>
<g>
<title>write (84 samples, 0.71%)</title><rect x="942.6" y="243.0" width="8.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="945.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.08%)</title><rect x="950.9" y="291.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="953.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (6 samples, 0.05%)</title><rect x="951.2" y="275.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="954.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (4 samples, 0.03%)</title><rect x="951.4" y="259.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="954.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$116/640279467.act (1,065 samples, 8.97%)</title><rect x="951.9" y="435.0" width="105.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="954.9" y="446.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$1 (1,065 samples, 8.97%)</title><rect x="951.9" y="419.0" width="105.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="954.9" y="430.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.put (1,065 samples, 8.97%)</title><rect x="951.9" y="403.0" width="105.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="954.9" y="414.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,062 samples, 8.95%)</title><rect x="952.2" y="387.0" width="105.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="955.2" y="398.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,057 samples, 8.90%)</title><rect x="952.2" y="371.0" width="105.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="955.2" y="382.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,057 samples, 8.90%)</title><rect x="952.2" y="355.0" width="105.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="955.2" y="366.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,049 samples, 8.84%)</title><rect x="953.0" y="339.0" width="104.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="956.0" y="350.0">Java_org_roc..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,043 samples, 8.79%)</title><rect x="953.5" y="323.0" width="103.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.5" y="334.0">rocksdb_put_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.03%)</title><rect x="953.7" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="956.7" y="318.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="954.4" y="307.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="957.4" y="318.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.03%)</title><rect x="954.8" y="307.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="957.8" y="318.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.05%)</title><rect x="955.2" y="307.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="958.2" y="318.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.05%)</title><rect x="955.2" y="291.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="958.2" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.05%)</title><rect x="955.2" y="275.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="958.2" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.04%)</title><rect x="955.3" y="259.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="958.3" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.03%)</title><rect x="955.4" y="243.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="958.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,019 samples, 8.58%)</title><rect x="955.8" y="307.0" width="101.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.8" y="318.0">rocksdb::Com..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,019 samples, 8.58%)</title><rect x="955.8" y="291.0" width="101.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="958.8" y="302.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,018 samples, 8.58%)</title><rect x="955.8" y="275.0" width="101.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.8" y="286.0">rocksdb::DB:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (999 samples, 8.42%)</title><rect x="955.9" y="259.0" width="99.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="958.9" y="270.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (993 samples, 8.37%)</title><rect x="956.1" y="243.0" width="98.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="959.1" y="254.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (62 samples, 0.52%)</title><rect x="956.8" y="227.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (3 samples, 0.03%)</title><rect x="956.8" y="211.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="959.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (59 samples, 0.50%)</title><rect x="957.1" y="211.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (58 samples, 0.49%)</title><rect x="957.2" y="195.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (56 samples, 0.47%)</title><rect x="957.2" y="179.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (54 samples, 0.45%)</title><rect x="957.4" y="163.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="960.4" y="174.0"></text>
</g>
<g>
<title>write (53 samples, 0.45%)</title><rect x="957.5" y="147.0" width="5.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="960.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (14 samples, 0.12%)</title><rect x="962.9" y="227.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (10 samples, 0.08%)</title><rect x="963.3" y="211.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="966.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (10 samples, 0.08%)</title><rect x="963.3" y="195.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="966.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (10 samples, 0.08%)</title><rect x="963.3" y="179.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="966.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (9 samples, 0.08%)</title><rect x="963.4" y="163.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.07%)</title><rect x="963.5" y="147.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="966.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.03%)</title><rect x="963.9" y="131.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="966.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (54 samples, 0.45%)</title><rect x="964.3" y="227.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="967.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (40 samples, 0.34%)</title><rect x="965.7" y="211.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="968.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (39 samples, 0.33%)</title><rect x="965.8" y="195.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="968.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (38 samples, 0.32%)</title><rect x="965.9" y="179.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="968.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (32 samples, 0.27%)</title><rect x="966.4" y="163.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="969.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (27 samples, 0.23%)</title><rect x="966.9" y="147.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (26 samples, 0.22%)</title><rect x="967.0" y="131.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="970.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.09%)</title><rect x="968.2" y="115.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.03%)</title><rect x="968.7" y="99.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (378 samples, 3.18%)</title><rect x="969.7" y="227.0" width="37.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="972.7" y="238.0">roc..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (67 samples, 0.56%)</title><rect x="984.4" y="211.0" width="6.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="987.4" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (160 samples, 1.35%)</title><rect x="991.2" y="211.0" width="15.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.2" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (155 samples, 1.31%)</title><rect x="991.2" y="195.0" width="15.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="994.2" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.03%)</title><rect x="1006.6" y="195.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1009.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (450 samples, 3.79%)</title><rect x="1007.3" y="227.0" width="44.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1010.3" y="238.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (448 samples, 3.77%)</title><rect x="1007.4" y="211.0" width="44.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1010.4" y="222.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (347 samples, 2.92%)</title><rect x="1017.0" y="195.0" width="34.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1020.0" y="206.0">si..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.03%)</title><rect x="1051.5" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1054.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (7 samples, 0.06%)</title><rect x="1052.0" y="227.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.03%)</title><rect x="1052.2" y="211.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.2" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.03%)</title><rect x="1052.2" y="195.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.2" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.03%)</title><rect x="1052.2" y="179.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1055.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (14 samples, 0.12%)</title><rect x="1052.8" y="227.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.8" y="238.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (14 samples, 0.12%)</title><rect x="1052.8" y="211.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1055.8" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.12%)</title><rect x="1052.8" y="195.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1055.8" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.03%)</title><rect x="1054.4" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.03%)</title><rect x="1055.2" y="259.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1058.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.04%)</title><rect x="1055.6" y="259.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1058.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (8 samples, 0.07%)</title><rect x="1056.1" y="259.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1059.1" y="270.0"></text>
</g>
<g>
<title>free (6 samples, 0.05%)</title><rect x="1056.1" y="243.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1059.1" y="254.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.03%)</title><rect x="1056.4" y="227.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1059.4" y="238.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.03%)</title><rect x="1056.4" y="211.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1059.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (3 samples, 0.03%)</title><rect x="1057.3" y="371.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1060.3" y="382.0"></text>
</g>
<g>
<title>[worker tid=86787] (1,330 samples, 11.20%)</title><rect x="1057.8" y="531.0" width="132.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1060.8" y="542.0">[worker tid=86787]</text>
</g>
<g>
<title>java/lang/Thread.run (1,330 samples, 11.20%)</title><rect x="1057.8" y="515.0" width="132.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1060.8" y="526.0">java/lang/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,330 samples, 11.20%)</title><rect x="1057.8" y="499.0" width="132.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1060.8" y="510.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,330 samples, 11.20%)</title><rect x="1057.8" y="483.0" width="132.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1060.8" y="494.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (107 samples, 0.90%)</title><rect x="1058.3" y="467.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1061.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (107 samples, 0.90%)</title><rect x="1058.3" y="451.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1061.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (85 samples, 0.72%)</title><rect x="1058.3" y="435.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1061.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (82 samples, 0.69%)</title><rect x="1058.6" y="419.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1061.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (82 samples, 0.69%)</title><rect x="1058.6" y="403.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1061.6" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (74 samples, 0.62%)</title><rect x="1059.4" y="387.0" width="7.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1062.4" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (69 samples, 0.58%)</title><rect x="1059.7" y="371.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1062.7" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (63 samples, 0.53%)</title><rect x="1059.9" y="355.0" width="6.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1062.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (12 samples, 0.10%)</title><rect x="1066.7" y="435.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1069.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 0.10%)</title><rect x="1066.7" y="419.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1069.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (9 samples, 0.08%)</title><rect x="1066.7" y="403.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1069.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.03%)</title><rect x="1066.7" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1069.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.03%)</title><rect x="1067.0" y="387.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1070.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.03%)</title><rect x="1067.0" y="371.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1070.0" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.03%)</title><rect x="1067.0" y="355.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1070.0" y="366.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.03%)</title><rect x="1067.0" y="339.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1070.0" y="350.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.03%)</title><rect x="1067.0" y="323.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.0" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.03%)</title><rect x="1067.0" y="307.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1070.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.03%)</title><rect x="1067.6" y="403.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1070.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.03%)</title><rect x="1067.6" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1070.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.03%)</title><rect x="1067.6" y="371.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1070.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.08%)</title><rect x="1067.9" y="435.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1070.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.08%)</title><rect x="1067.9" y="419.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1070.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.08%)</title><rect x="1067.9" y="403.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1070.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.08%)</title><rect x="1067.9" y="387.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1070.9" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 0.08%)</title><rect x="1067.9" y="371.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1070.9" y="382.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (9 samples, 0.08%)</title><rect x="1068.0" y="355.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1071.0" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.06%)</title><rect x="1068.2" y="339.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1071.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (1,218 samples, 10.26%)</title><rect x="1068.9" y="467.0" width="121.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1071.9" y="478.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (1,218 samples, 10.26%)</title><rect x="1068.9" y="451.0" width="121.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1071.9" y="462.0">ru/mail/polis/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (108 samples, 0.91%)</title><rect x="1068.9" y="435.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1071.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (104 samples, 0.88%)</title><rect x="1069.0" y="419.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1072.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.08%)</title><rect x="1069.0" y="403.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1072.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.05%)</title><rect x="1069.3" y="387.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1072.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.03%)</title><rect x="1069.5" y="371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1072.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (95 samples, 0.80%)</title><rect x="1069.9" y="403.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1072.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (95 samples, 0.80%)</title><rect x="1069.9" y="387.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1072.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (95 samples, 0.80%)</title><rect x="1069.9" y="371.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1072.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (95 samples, 0.80%)</title><rect x="1069.9" y="355.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1072.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="1069.9" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1072.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (92 samples, 0.78%)</title><rect x="1070.2" y="339.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1073.2" y="350.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.03%)</title><rect x="1070.2" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1073.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.03%)</title><rect x="1070.5" y="323.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1073.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.03%)</title><rect x="1070.5" y="307.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1073.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.03%)</title><rect x="1070.5" y="291.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1073.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (85 samples, 0.72%)</title><rect x="1070.9" y="323.0" width="8.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1073.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (85 samples, 0.72%)</title><rect x="1070.9" y="307.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1073.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (84 samples, 0.71%)</title><rect x="1071.0" y="291.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1074.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (84 samples, 0.71%)</title><rect x="1071.0" y="275.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1074.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (84 samples, 0.71%)</title><rect x="1071.0" y="259.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1074.0" y="270.0"></text>
</g>
<g>
<title>write (82 samples, 0.69%)</title><rect x="1071.2" y="243.0" width="8.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1074.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="1079.4" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1082.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$116/640279467.act (1,110 samples, 9.35%)</title><rect x="1079.7" y="435.0" width="110.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1082.7" y="446.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$1 (1,110 samples, 9.35%)</title><rect x="1079.7" y="419.0" width="110.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1082.7" y="430.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.put (1,110 samples, 9.35%)</title><rect x="1079.7" y="403.0" width="110.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1082.7" y="414.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,108 samples, 9.33%)</title><rect x="1079.9" y="387.0" width="110.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1082.9" y="398.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,105 samples, 9.31%)</title><rect x="1079.9" y="371.0" width="109.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1082.9" y="382.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,105 samples, 9.31%)</title><rect x="1079.9" y="355.0" width="109.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1082.9" y="366.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,102 samples, 9.28%)</title><rect x="1080.2" y="339.0" width="109.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1083.2" y="350.0">Java_org_rock..</text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="1080.4" y="323.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1083.4" y="334.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,093 samples, 9.21%)</title><rect x="1081.0" y="323.0" width="108.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.0" y="334.0">rocksdb_put_h..</text>
</g>
<g>
<title>free_tiny (4 samples, 0.03%)</title><rect x="1081.8" y="307.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1084.8" y="318.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.07%)</title><rect x="1082.6" y="307.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1085.6" y="318.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.06%)</title><rect x="1082.7" y="291.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1085.7" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.05%)</title><rect x="1082.8" y="275.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1085.8" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.04%)</title><rect x="1082.9" y="259.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1085.9" y="270.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.04%)</title><rect x="1082.9" y="243.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1085.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,066 samples, 8.98%)</title><rect x="1083.5" y="307.0" width="106.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.5" y="318.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,066 samples, 8.98%)</title><rect x="1083.5" y="291.0" width="106.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.5" y="302.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,066 samples, 8.98%)</title><rect x="1083.5" y="275.0" width="106.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.5" y="286.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,049 samples, 8.84%)</title><rect x="1083.6" y="259.0" width="104.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1086.6" y="270.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,045 samples, 8.80%)</title><rect x="1083.8" y="243.0" width="103.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1086.8" y="254.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.03%)</title><rect x="1085.4" y="227.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1088.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (80 samples, 0.67%)</title><rect x="1085.7" y="227.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1088.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (76 samples, 0.64%)</title><rect x="1086.0" y="211.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (73 samples, 0.61%)</title><rect x="1086.3" y="195.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1089.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (69 samples, 0.58%)</title><rect x="1086.3" y="179.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (69 samples, 0.58%)</title><rect x="1086.3" y="163.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.3" y="174.0"></text>
</g>
<g>
<title>write (67 samples, 0.56%)</title><rect x="1086.5" y="147.0" width="6.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1089.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.03%)</title><rect x="1093.2" y="179.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (9 samples, 0.08%)</title><rect x="1093.9" y="227.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (8 samples, 0.07%)</title><rect x="1094.0" y="211.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (8 samples, 0.07%)</title><rect x="1094.0" y="195.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (8 samples, 0.07%)</title><rect x="1094.0" y="179.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (8 samples, 0.07%)</title><rect x="1094.0" y="163.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.06%)</title><rect x="1094.1" y="147.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (49 samples, 0.41%)</title><rect x="1094.8" y="227.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (41 samples, 0.35%)</title><rect x="1095.6" y="211.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (41 samples, 0.35%)</title><rect x="1095.6" y="195.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (37 samples, 0.31%)</title><rect x="1096.0" y="179.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.0" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.03%)</title><rect x="1096.5" y="163.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1099.5" y="174.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.03%)</title><rect x="1096.5" y="147.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1099.5" y="158.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.03%)</title><rect x="1096.5" y="131.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1099.5" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="1096.6" y="115.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1099.6" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="1096.6" y="99.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1099.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (26 samples, 0.22%)</title><rect x="1097.0" y="163.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (22 samples, 0.19%)</title><rect x="1097.3" y="147.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (22 samples, 0.19%)</title><rect x="1097.3" y="131.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.04%)</title><rect x="1098.9" y="115.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (378 samples, 3.18%)</title><rect x="1099.6" y="227.0" width="37.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.6" y="238.0">roc..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (51 samples, 0.43%)</title><rect x="1115.3" y="211.0" width="5.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1118.3" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (165 samples, 1.39%)</title><rect x="1120.6" y="211.0" width="16.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.6" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (160 samples, 1.35%)</title><rect x="1120.6" y="195.0" width="15.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1123.6" y="206.0"></text>
</g>
<g>
<title>_pthread_cond_wait (5 samples, 0.04%)</title><rect x="1136.5" y="195.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1139.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (472 samples, 3.98%)</title><rect x="1137.2" y="227.0" width="46.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.2" y="238.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (470 samples, 3.96%)</title><rect x="1137.3" y="211.0" width="46.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.3" y="222.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (378 samples, 3.18%)</title><rect x="1145.8" y="195.0" width="37.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1148.8" y="206.0">si_..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (6 samples, 0.05%)</title><rect x="1183.4" y="195.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.05%)</title><rect x="1183.4" y="179.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1186.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (8 samples, 0.07%)</title><rect x="1184.2" y="227.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (7 samples, 0.06%)</title><rect x="1184.3" y="211.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.3" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.05%)</title><rect x="1184.4" y="195.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.4" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.04%)</title><rect x="1184.4" y="179.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1187.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (19 samples, 0.16%)</title><rect x="1185.3" y="227.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.3" y="238.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (16 samples, 0.13%)</title><rect x="1185.6" y="211.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.6" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.11%)</title><rect x="1185.6" y="195.0" width="1.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1188.6" y="206.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.03%)</title><rect x="1186.9" y="195.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1189.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.03%)</title><rect x="1187.9" y="259.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (9 samples, 0.08%)</title><rect x="1188.3" y="259.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.3" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.03%)</title><rect x="1188.5" y="243.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.5" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.03%)</title><rect x="1188.5" y="227.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1191.5" y="238.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="1188.5" y="211.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1191.5" y="222.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="1188.5" y="195.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1191.5" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="1188.5" y="179.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1191.5" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="1188.5" y="163.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1191.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.03%)</title><rect x="1189.2" y="259.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.2" y="270.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="1189.2" y="243.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1192.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (3 samples, 0.03%)</title><rect x="1189.7" y="371.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1192.7" y="382.0"></text>
</g>
</g>
</svg>
