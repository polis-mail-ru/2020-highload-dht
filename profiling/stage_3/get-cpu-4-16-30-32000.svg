<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="453"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="453"> </text>
<g id="frames">
<g>
<title>all (7,713 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="13.0" y="430.0">all</text>
</g>
<g>
<title>[Java: C2 CompilerThread0 tid=21763] (15 samples, 0.19%)</title><rect x="10.2" y="403.0" width="2.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="13.2" y="414.0"></text>
</g>
<g>
<title>thread_start (15 samples, 0.19%)</title><rect x="10.2" y="387.0" width="2.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="13.2" y="398.0"></text>
</g>
<g>
<title>_pthread_start (15 samples, 0.19%)</title><rect x="10.2" y="371.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.2" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (15 samples, 0.19%)</title><rect x="10.2" y="355.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.2" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (15 samples, 0.19%)</title><rect x="10.2" y="339.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.2" y="350.0"></text>
</g>
<g>
<title>JavaThread::run() (15 samples, 0.19%)</title><rect x="10.2" y="323.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.2" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (15 samples, 0.19%)</title><rect x="10.2" y="307.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.2" y="318.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (15 samples, 0.19%)</title><rect x="10.2" y="291.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.2" y="302.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (15 samples, 0.19%)</title><rect x="10.2" y="275.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.2" y="286.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (14 samples, 0.18%)</title><rect x="10.2" y="259.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.2" y="270.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (14 samples, 0.18%)</title><rect x="10.2" y="243.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.2" y="254.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (8 samples, 0.10%)</title><rect x="10.2" y="227.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.2" y="238.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.03%)</title><rect x="10.2" y="211.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.2" y="222.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.03%)</title><rect x="10.2" y="195.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.2" y="206.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.03%)</title><rect x="10.2" y="179.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.2" y="190.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (2 samples, 0.03%)</title><rect x="10.2" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.2" y="174.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (6 samples, 0.08%)</title><rect x="10.5" y="211.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.5" y="222.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.05%)</title><rect x="10.5" y="195.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.5" y="206.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (2 samples, 0.03%)</title><rect x="10.5" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.5" y="190.0"></text>
</g>
<g>
<title>Compile::Optimize() (5 samples, 0.06%)</title><rect x="11.4" y="227.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.4" y="238.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 0.04%)</title><rect x="11.5" y="211.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="222.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=20227] (4 samples, 0.05%)</title><rect x="12.4" y="403.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="15.4" y="414.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.05%)</title><rect x="12.4" y="387.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="15.4" y="398.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.05%)</title><rect x="12.4" y="371.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="15.4" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.05%)</title><rect x="12.4" y="355.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="15.4" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.05%)</title><rect x="12.4" y="339.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.4" y="350.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.05%)</title><rect x="12.4" y="323.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.4" y="334.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.05%)</title><rect x="12.4" y="307.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.4" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (4 samples, 0.05%)</title><rect x="12.4" y="291.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.4" y="302.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.05%)</title><rect x="12.4" y="275.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.4" y="286.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (3 samples, 0.04%)</title><rect x="12.6" y="259.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.6" y="270.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (2 samples, 0.03%)</title><rect x="12.6" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.6" y="254.0"></text>
</g>
<g>
<title>[Java: GC Thread#0 tid=11523] (3 samples, 0.04%)</title><rect x="13.1" y="403.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="16.1" y="414.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.04%)</title><rect x="13.1" y="387.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="16.1" y="398.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.04%)</title><rect x="13.1" y="371.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="16.1" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.04%)</title><rect x="13.1" y="355.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="16.1" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.04%)</title><rect x="13.1" y="339.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="16.1" y="350.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.04%)</title><rect x="13.1" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.1" y="334.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (3 samples, 0.04%)</title><rect x="13.1" y="307.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.1" y="318.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (3 samples, 0.04%)</title><rect x="13.1" y="291.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="16.1" y="302.0"></text>
</g>
<g>
<title>[Java: VM Periodic Task Thread tid=41475] (2 samples, 0.03%)</title><rect x="13.5" y="403.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.5" y="414.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.03%)</title><rect x="13.5" y="387.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="16.5" y="398.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.03%)</title><rect x="13.5" y="371.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="16.5" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.03%)</title><rect x="13.5" y="355.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="16.5" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.03%)</title><rect x="13.5" y="339.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.5" y="350.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.03%)</title><rect x="13.5" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.5" y="334.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.03%)</title><rect x="13.5" y="307.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="16.5" y="318.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.03%)</title><rect x="13.5" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="16.5" y="302.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.03%)</title><rect x="13.5" y="275.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.5" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="13.5" y="259.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.5" y="270.0"></text>
</g>
<g>
<title>[Java: VM Thread tid=19715] (3 samples, 0.04%)</title><rect x="13.8" y="403.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="16.8" y="414.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.04%)</title><rect x="13.8" y="387.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="16.8" y="398.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.04%)</title><rect x="13.8" y="371.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="16.8" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.04%)</title><rect x="13.8" y="355.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="16.8" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.04%)</title><rect x="13.8" y="339.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.8" y="350.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.04%)</title><rect x="13.8" y="323.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.8" y="334.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.04%)</title><rect x="13.8" y="307.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.8" y="318.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=23571] (596 samples, 7.73%)</title><rect x="14.3" y="403.0" width="91.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="17.3" y="414.0">[NIO Select..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (595 samples, 7.71%)</title><rect x="14.4" y="387.0" width="91.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.4" y="398.0">one/nio/ser..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.04%)</title><rect x="14.9" y="371.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.9" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="15.0" y="355.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.0" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.03%)</title><rect x="15.0" y="339.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.0" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (399 samples, 5.17%)</title><rect x="15.4" y="371.0" width="61.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.4" y="382.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.03%)</title><rect x="15.5" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.5" y="366.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (8 samples, 0.10%)</title><rect x="15.8" y="355.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.8" y="366.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.03%)</title><rect x="16.3" y="339.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="19.3" y="350.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (3 samples, 0.04%)</title><rect x="16.6" y="339.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="19.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (386 samples, 5.00%)</title><rect x="17.0" y="355.0" width="59.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.0" y="366.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (386 samples, 5.00%)</title><rect x="17.0" y="339.0" width="59.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.0" y="350.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (386 samples, 5.00%)</title><rect x="17.0" y="323.0" width="59.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.0" y="334.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (370 samples, 4.80%)</title><rect x="17.0" y="307.0" width="56.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.0" y="318.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.04%)</title><rect x="20.3" y="291.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="23.3" y="302.0"></text>
</g>
<g>
<title>kevent (346 samples, 4.49%)</title><rect x="20.7" y="291.0" width="52.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="23.7" y="302.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.03%)</title><rect x="73.6" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="73.6" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="76.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="73.6" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.6" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="73.6" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.6" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="73.6" y="243.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.6" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.03%)</title><rect x="73.6" y="227.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.05%)</title><rect x="73.9" y="307.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (9 samples, 0.12%)</title><rect x="74.7" y="307.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.7" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (9 samples, 0.12%)</title><rect x="74.7" y="291.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.04%)</title><rect x="75.5" y="275.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="78.5" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="75.6" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.6" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="75.6" y="243.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.03%)</title><rect x="76.1" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.03%)</title><rect x="76.1" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.03%)</title><rect x="76.1" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (190 samples, 2.46%)</title><rect x="76.4" y="371.0" width="29.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.4" y="382.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (181 samples, 2.35%)</title><rect x="77.5" y="355.0" width="27.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.5" y="366.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (79 samples, 1.02%)</title><rect x="77.6" y="339.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (56 samples, 0.73%)</title><rect x="78.2" y="323.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="81.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (49 samples, 0.64%)</title><rect x="79.0" y="307.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="82.0" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="79.0" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="79.0" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="79.0" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="79.0" y="243.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="79.3" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.3" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="79.3" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="79.3" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="82.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="79.3" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="82.3" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (45 samples, 0.58%)</title><rect x="79.6" y="291.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="79.6" y="275.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (42 samples, 0.54%)</title><rect x="80.1" y="275.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="83.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.03%)</title><rect x="80.1" y="259.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (40 samples, 0.52%)</title><rect x="80.4" y="259.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.4" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.03%)</title><rect x="80.4" y="243.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.4" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="80.4" y="227.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.get$Lambda (2 samples, 0.03%)</title><rect x="80.4" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="83.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.&lt;init&gt; (2 samples, 0.03%)</title><rect x="80.4" y="195.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="83.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (38 samples, 0.49%)</title><rect x="80.7" y="243.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="83.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (36 samples, 0.47%)</title><rect x="81.0" y="227.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (28 samples, 0.36%)</title><rect x="81.0" y="211.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.05%)</title><rect x="81.0" y="195.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.05%)</title><rect x="81.0" y="179.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.04%)</title><rect x="81.1" y="163.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.03%)</title><rect x="81.1" y="147.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.1" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="81.1" y="131.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.1" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="81.1" y="115.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.1" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.05%)</title><rect x="81.6" y="195.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.05%)</title><rect x="81.6" y="179.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="81.6" y="163.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="81.6" y="147.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="81.6" y="131.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.6" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="81.6" y="115.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="81.9" y="163.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.9" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="81.9" y="147.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 0.26%)</title><rect x="82.2" y="195.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 0.26%)</title><rect x="82.2" y="179.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 0.26%)</title><rect x="82.2" y="163.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 0.26%)</title><rect x="82.2" y="147.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.2" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 0.26%)</title><rect x="82.2" y="131.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="85.2" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.25%)</title><rect x="82.4" y="115.0" width="2.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="85.4" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.21%)</title><rect x="82.7" y="99.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="85.7" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.05%)</title><rect x="85.4" y="211.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.05%)</title><rect x="85.4" y="195.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.04%)</title><rect x="85.6" y="179.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.04%)</title><rect x="85.6" y="163.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.04%)</title><rect x="86.0" y="211.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="89.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.04%)</title><rect x="86.0" y="195.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="89.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title><rect x="86.0" y="179.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.0" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="86.5" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.09%)</title><rect x="86.8" y="323.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.04%)</title><rect x="86.8" y="307.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="86.8" y="291.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="89.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="86.8" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.04%)</title><rect x="86.8" y="259.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="89.8" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="87.3" y="307.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="87.3" y="291.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8 samples, 0.10%)</title><rect x="87.9" y="323.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.9" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.05%)</title><rect x="87.9" y="307.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.9" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.05%)</title><rect x="87.9" y="291.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="88.0" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.0" y="286.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="88.0" y="259.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (4 samples, 0.05%)</title><rect x="88.5" y="307.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getBody (2 samples, 0.03%)</title><rect x="89.1" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="92.1" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="89.4" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="89.4" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.4" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (101 samples, 1.31%)</title><rect x="89.7" y="339.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.7" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (99 samples, 1.28%)</title><rect x="89.9" y="323.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="90.0" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.0" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="90.0" y="291.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="90.0" y="275.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.0" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="90.2" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="90.2" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="93.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="90.2" y="227.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.2" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="90.2" y="211.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (95 samples, 1.23%)</title><rect x="90.5" y="307.0" width="14.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.08%)</title><rect x="91.2" y="291.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.06%)</title><rect x="91.2" y="275.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="94.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.05%)</title><rect x="91.2" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="91.5" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="94.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (84 samples, 1.09%)</title><rect x="92.2" y="291.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (84 samples, 1.09%)</title><rect x="92.2" y="275.0" width="12.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="95.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (78 samples, 1.01%)</title><rect x="92.3" y="259.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (78 samples, 1.01%)</title><rect x="92.3" y="243.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (78 samples, 1.01%)</title><rect x="92.3" y="227.0" width="11.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.3" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (71 samples, 0.92%)</title><rect x="93.4" y="211.0" width="10.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="96.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.06%)</title><rect x="104.2" y="259.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.2" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.04%)</title><rect x="104.4" y="243.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.4" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.04%)</title><rect x="104.4" y="227.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="107.4" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="105.2" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="108.2" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=24067] (378 samples, 4.90%)</title><rect x="105.5" y="403.0" width="57.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="108.5" y="414.0">[NIO S..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (378 samples, 4.90%)</title><rect x="105.5" y="387.0" width="57.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="108.5" y="398.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (269 samples, 3.49%)</title><rect x="105.6" y="371.0" width="41.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="108.6" y="382.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.04%)</title><rect x="105.8" y="355.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.8" y="366.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.04%)</title><rect x="106.2" y="355.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="109.2" y="366.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.03%)</title><rect x="106.4" y="339.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="109.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (259 samples, 3.36%)</title><rect x="106.7" y="355.0" width="39.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="109.7" y="366.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (259 samples, 3.36%)</title><rect x="106.7" y="339.0" width="39.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="109.7" y="350.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (259 samples, 3.36%)</title><rect x="106.7" y="323.0" width="39.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="109.7" y="334.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (243 samples, 3.15%)</title><rect x="106.7" y="307.0" width="37.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="109.7" y="318.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.03%)</title><rect x="109.9" y="291.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="112.9" y="302.0"></text>
</g>
<g>
<title>kevent (220 samples, 2.85%)</title><rect x="110.2" y="291.0" width="33.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="113.2" y="302.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.05%)</title><rect x="143.9" y="307.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.05%)</title><rect x="143.9" y="291.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.05%)</title><rect x="143.9" y="275.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.05%)</title><rect x="143.9" y="259.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.9" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.05%)</title><rect x="143.9" y="243.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="144.5" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.5" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.03%)</title><rect x="144.5" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (10 samples, 0.13%)</title><rect x="144.8" y="307.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="147.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (8 samples, 0.10%)</title><rect x="145.1" y="291.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.1" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.05%)</title><rect x="145.5" y="275.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="148.5" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.05%)</title><rect x="145.5" y="259.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.5" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.05%)</title><rect x="145.5" y="243.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (3 samples, 0.04%)</title><rect x="146.3" y="355.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.03%)</title><rect x="146.5" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.03%)</title><rect x="146.5" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.5" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (108 samples, 1.40%)</title><rect x="146.8" y="371.0" width="16.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.8" y="382.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="147.7" y="355.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="150.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (98 samples, 1.27%)</title><rect x="148.1" y="355.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="151.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (47 samples, 0.61%)</title><rect x="148.3" y="339.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="151.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (28 samples, 0.36%)</title><rect x="148.5" y="323.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="151.5" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (22 samples, 0.29%)</title><rect x="149.1" y="307.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (21 samples, 0.27%)</title><rect x="149.2" y="291.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (20 samples, 0.26%)</title><rect x="149.4" y="275.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.04%)</title><rect x="149.4" y="259.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.4" y="270.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.03%)</title><rect x="149.4" y="243.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="152.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="149.4" y="227.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (17 samples, 0.22%)</title><rect x="149.8" y="259.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (17 samples, 0.22%)</title><rect x="149.8" y="243.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (17 samples, 0.22%)</title><rect x="149.8" y="227.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (14 samples, 0.18%)</title><rect x="149.8" y="211.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="150.0" y="195.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="153.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="150.0" y="179.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="153.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.04%)</title><rect x="150.0" y="163.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.04%)</title><rect x="150.0" y="147.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.0" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.04%)</title><rect x="150.0" y="131.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.0" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.04%)</title><rect x="150.0" y="115.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="153.0" y="126.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="150.1" y="99.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="153.1" y="110.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="150.1" y="83.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="153.1" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.13%)</title><rect x="150.4" y="195.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="153.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.13%)</title><rect x="150.4" y="179.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="153.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.13%)</title><rect x="150.4" y="163.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.13%)</title><rect x="150.4" y="147.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.4" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 0.13%)</title><rect x="150.4" y="131.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.4" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (10 samples, 0.13%)</title><rect x="150.4" y="115.0" width="1.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="153.4" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.09%)</title><rect x="150.9" y="99.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="153.9" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="152.1" y="211.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="152.1" y="195.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.1" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="152.4" y="307.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.08%)</title><rect x="152.7" y="323.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="155.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.03%)</title><rect x="152.7" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.7" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="153.0" y="307.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="156.0" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="153.0" y="291.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.0" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.08%)</title><rect x="153.7" y="323.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="156.7" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.04%)</title><rect x="153.7" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="156.7" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.04%)</title><rect x="153.7" y="291.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="156.7" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="153.7" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (3 samples, 0.04%)</title><rect x="154.1" y="307.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="157.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.05%)</title><rect x="154.7" y="323.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="157.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="154.7" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="157.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="155.0" y="307.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="158.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (50 samples, 0.65%)</title><rect x="155.5" y="339.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="158.5" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (50 samples, 0.65%)</title><rect x="155.5" y="323.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (49 samples, 0.64%)</title><rect x="155.6" y="307.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.06%)</title><rect x="156.1" y="291.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="156.1" y="275.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="159.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="156.1" y="259.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="159.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 0.53%)</title><rect x="156.9" y="291.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 0.53%)</title><rect x="156.9" y="275.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="159.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (38 samples, 0.49%)</title><rect x="157.2" y="259.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (38 samples, 0.49%)</title><rect x="157.2" y="243.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="160.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (38 samples, 0.49%)</title><rect x="157.2" y="227.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.2" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (36 samples, 0.47%)</title><rect x="157.5" y="211.0" width="5.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="160.5" y="222.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=24835] (585 samples, 7.58%)</title><rect x="163.3" y="403.0" width="89.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="166.3" y="414.0">[NIO Selec..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (585 samples, 7.58%)</title><rect x="163.3" y="387.0" width="89.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="166.3" y="398.0">one/nio/se..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (403 samples, 5.22%)</title><rect x="163.9" y="371.0" width="61.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.9" y="382.0">one/ni..</text>
</g>
<g>
<title>__block_literal_global (3 samples, 0.04%)</title><rect x="163.9" y="355.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="166.9" y="366.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.04%)</title><rect x="164.7" y="355.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="167.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (395 samples, 5.12%)</title><rect x="165.1" y="355.0" width="60.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="168.1" y="366.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (395 samples, 5.12%)</title><rect x="165.1" y="339.0" width="60.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.1" y="350.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (395 samples, 5.12%)</title><rect x="165.1" y="323.0" width="60.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.1" y="334.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (378 samples, 4.90%)</title><rect x="165.1" y="307.0" width="57.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.1" y="318.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.06%)</title><rect x="169.0" y="291.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="172.0" y="302.0"></text>
</g>
<g>
<title>kevent (348 samples, 4.51%)</title><rect x="169.7" y="291.0" width="53.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="172.7" y="302.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.08%)</title><rect x="223.0" y="307.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.08%)</title><rect x="223.0" y="291.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.08%)</title><rect x="223.0" y="275.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.08%)</title><rect x="223.0" y="259.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.0" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.08%)</title><rect x="223.0" y="243.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.0" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.05%)</title><rect x="223.3" y="227.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.04%)</title><rect x="223.9" y="307.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="226.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.03%)</title><rect x="224.3" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.3" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.03%)</title><rect x="224.3" y="291.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.3" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title><rect x="224.3" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.3" y="286.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.03%)</title><rect x="224.3" y="259.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.3" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.03%)</title><rect x="224.3" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (6 samples, 0.08%)</title><rect x="224.6" y="307.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (6 samples, 0.08%)</title><rect x="224.6" y="291.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.03%)</title><rect x="225.3" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.3" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (178 samples, 2.31%)</title><rect x="225.6" y="371.0" width="27.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="228.6" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (165 samples, 2.14%)</title><rect x="226.3" y="355.0" width="25.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.3" y="366.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (80 samples, 1.04%)</title><rect x="226.3" y="339.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="229.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (49 samples, 0.64%)</title><rect x="227.2" y="323.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (44 samples, 0.57%)</title><rect x="227.7" y="307.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.04%)</title><rect x="227.7" y="291.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.04%)</title><rect x="227.7" y="275.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.7" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.04%)</title><rect x="227.7" y="259.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.04%)</title><rect x="227.7" y="243.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="227.9" y="227.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (41 samples, 0.53%)</title><rect x="228.2" y="291.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (40 samples, 0.52%)</title><rect x="228.3" y="275.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="228.5" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="228.5" y="243.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="228.6" y="227.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="228.6" y="211.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.6" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="228.6" y="195.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="228.6" y="179.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (35 samples, 0.45%)</title><rect x="229.1" y="259.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (35 samples, 0.45%)</title><rect x="229.1" y="243.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (35 samples, 0.45%)</title><rect x="229.1" y="227.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (30 samples, 0.39%)</title><rect x="229.2" y="211.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.03%)</title><rect x="229.4" y="195.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.08%)</title><rect x="229.7" y="195.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.08%)</title><rect x="229.7" y="179.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.08%)</title><rect x="229.7" y="163.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.08%)</title><rect x="229.7" y="147.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.08%)</title><rect x="229.7" y="131.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.7" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.08%)</title><rect x="229.7" y="115.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.7" y="126.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.06%)</title><rect x="229.8" y="99.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="232.8" y="110.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.06%)</title><rect x="229.8" y="83.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="232.8" y="94.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.05%)</title><rect x="229.8" y="67.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="232.8" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 0.27%)</title><rect x="230.6" y="195.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 0.27%)</title><rect x="230.6" y="179.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 0.27%)</title><rect x="230.6" y="163.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 0.27%)</title><rect x="230.6" y="147.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.6" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (21 samples, 0.27%)</title><rect x="230.6" y="131.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.6" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.25%)</title><rect x="230.9" y="115.0" width="2.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="233.9" y="126.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="231.2" y="99.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="234.2" y="110.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="231.5" y="99.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="234.5" y="110.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.16%)</title><rect x="231.8" y="99.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="234.8" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="234.0" y="211.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="234.0" y="195.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="234.0" y="179.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="234.0" y="163.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="234.0" y="147.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.0" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="234.0" y="131.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.0" y="142.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="234.0" y="115.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="237.0" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="234.4" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.09%)</title><rect x="234.7" y="323.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.04%)</title><rect x="234.7" y="307.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="234.9" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="234.9" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.9" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="234.9" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="235.2" y="307.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.2" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="235.2" y="291.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.2" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (14 samples, 0.18%)</title><rect x="235.8" y="323.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.06%)</title><rect x="235.8" y="307.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.8" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.06%)</title><rect x="235.8" y="291.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.05%)</title><rect x="235.8" y="275.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="238.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.04%)</title><rect x="236.0" y="259.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (9 samples, 0.12%)</title><rect x="236.6" y="307.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="238.0" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="238.3" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="238.3" y="307.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (85 samples, 1.10%)</title><rect x="238.6" y="339.0" width="13.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.6" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (81 samples, 1.05%)</title><rect x="238.6" y="323.0" width="12.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="241.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title><rect x="238.6" y="307.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.6" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="238.6" y="291.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="238.6" y="275.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.6" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="238.7" y="259.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.7" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="238.7" y="243.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.7" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="238.7" y="227.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (77 samples, 1.00%)</title><rect x="239.2" y="307.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.08%)</title><rect x="239.2" y="291.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.05%)</title><rect x="239.3" y="275.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="239.3" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.3" y="270.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="239.6" y="259.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="242.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (71 samples, 0.92%)</title><rect x="240.1" y="291.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (71 samples, 0.92%)</title><rect x="240.1" y="275.0" width="10.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.1" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.03%)</title><rect x="240.2" y="259.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="240.2" y="243.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.2" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.03%)</title><rect x="240.2" y="227.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.2" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="240.2" y="211.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.2" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (2 samples, 0.03%)</title><rect x="240.2" y="195.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (65 samples, 0.84%)</title><rect x="240.6" y="259.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="243.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (65 samples, 0.84%)</title><rect x="240.6" y="243.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (65 samples, 0.84%)</title><rect x="240.6" y="227.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.6" y="238.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.03%)</title><rect x="241.5" y="211.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="244.5" y="222.0"></text>
</g>
<g>
<title>rpc_errlist (57 samples, 0.74%)</title><rect x="241.8" y="211.0" width="8.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="244.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.04%)</title><rect x="250.5" y="259.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.5" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (4 samples, 0.05%)</title><rect x="251.0" y="323.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.0" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.10%)</title><rect x="251.6" y="355.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="254.6" y="366.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.05%)</title><rect x="252.2" y="339.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="255.2" y="350.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (3 samples, 0.04%)</title><rect x="252.3" y="323.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="255.3" y="334.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.03%)</title><rect x="252.5" y="307.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="255.5" y="318.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=25091] (418 samples, 5.42%)</title><rect x="252.8" y="403.0" width="63.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="255.8" y="414.0">[NIO Se..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (418 samples, 5.42%)</title><rect x="252.8" y="387.0" width="63.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.8" y="398.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (293 samples, 3.80%)</title><rect x="252.8" y="371.0" width="44.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.8" y="382.0">one/..</text>
</g>
<g>
<title>os::javaTimeNanos() (6 samples, 0.08%)</title><rect x="253.3" y="355.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="256.3" y="366.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.03%)</title><rect x="253.7" y="339.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="256.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (281 samples, 3.64%)</title><rect x="254.2" y="355.0" width="43.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.2" y="366.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (281 samples, 3.64%)</title><rect x="254.2" y="339.0" width="43.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.2" y="350.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (281 samples, 3.64%)</title><rect x="254.2" y="323.0" width="43.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.2" y="334.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (273 samples, 3.54%)</title><rect x="254.2" y="307.0" width="41.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="257.2" y="318.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.05%)</title><rect x="256.2" y="291.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="259.2" y="302.0"></text>
</g>
<g>
<title>kevent (256 samples, 3.32%)</title><rect x="256.8" y="291.0" width="39.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="259.8" y="302.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (6 samples, 0.08%)</title><rect x="296.2" y="307.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.2" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.06%)</title><rect x="296.4" y="291.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.4" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.04%)</title><rect x="296.4" y="275.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.4" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="296.4" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="299.4" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="296.4" y="243.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="299.4" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.03%)</title><rect x="296.9" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="299.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (3 samples, 0.04%)</title><rect x="297.2" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (3 samples, 0.04%)</title><rect x="297.2" y="339.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (3 samples, 0.04%)</title><rect x="297.2" y="323.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (125 samples, 1.62%)</title><rect x="297.6" y="371.0" width="19.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (121 samples, 1.57%)</title><rect x="297.9" y="355.0" width="18.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (61 samples, 0.79%)</title><rect x="297.9" y="339.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (40 samples, 0.52%)</title><rect x="298.5" y="323.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.5" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (40 samples, 0.52%)</title><rect x="298.5" y="307.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="298.5" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="301.5" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="298.5" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="301.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (37 samples, 0.48%)</title><rect x="299.0" y="291.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.0" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="299.1" y="275.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="299.1" y="259.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="302.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="299.1" y="243.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="299.1" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (34 samples, 0.44%)</title><rect x="299.5" y="275.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="302.5" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.05%)</title><rect x="299.8" y="259.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.8" y="270.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="300.1" y="243.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="300.1" y="227.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.1" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="300.1" y="211.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.1" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="300.1" y="195.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (28 samples, 0.36%)</title><rect x="300.4" y="259.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (28 samples, 0.36%)</title><rect x="300.4" y="243.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (28 samples, 0.36%)</title><rect x="300.4" y="227.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (25 samples, 0.32%)</title><rect x="300.4" y="211.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.10%)</title><rect x="300.7" y="195.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.10%)</title><rect x="300.7" y="179.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.09%)</title><rect x="300.7" y="163.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.09%)</title><rect x="300.7" y="147.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.09%)</title><rect x="300.7" y="131.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.7" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.09%)</title><rect x="300.7" y="115.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.7" y="126.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.08%)</title><rect x="300.8" y="99.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="303.8" y="110.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.08%)</title><rect x="300.8" y="83.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="303.8" y="94.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.06%)</title><rect x="301.0" y="67.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="304.0" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 0.19%)</title><rect x="301.9" y="195.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 0.19%)</title><rect x="301.9" y="179.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 0.19%)</title><rect x="301.9" y="163.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.9" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 0.19%)</title><rect x="301.9" y="147.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.9" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (15 samples, 0.19%)</title><rect x="301.9" y="131.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.9" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (14 samples, 0.18%)</title><rect x="301.9" y="115.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="304.9" y="126.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="302.1" y="99.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="305.1" y="110.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.12%)</title><rect x="302.7" y="99.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="305.7" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.03%)</title><rect x="304.3" y="211.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="304.3" y="195.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title><rect x="304.3" y="179.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="307.3" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.08%)</title><rect x="304.7" y="323.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="304.8" y="307.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="307.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="304.8" y="291.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.08%)</title><rect x="305.6" y="323.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.05%)</title><rect x="305.6" y="307.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="308.6" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.05%)</title><rect x="305.6" y="291.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.04%)</title><rect x="305.7" y="275.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.7" y="286.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="305.9" y="259.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.9" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (2 samples, 0.03%)</title><rect x="306.2" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="309.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="306.6" y="323.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="309.6" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="307.0" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="310.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="307.0" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (60 samples, 0.78%)</title><rect x="307.3" y="339.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="310.3" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (60 samples, 0.78%)</title><rect x="307.3" y="323.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.3" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="307.3" y="307.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.3" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="307.3" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="307.3" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.3" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="307.3" y="259.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (58 samples, 0.75%)</title><rect x="307.6" y="307.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="307.9" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="310.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="307.9" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="310.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (54 samples, 0.70%)</title><rect x="308.2" y="291.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="311.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (54 samples, 0.70%)</title><rect x="308.2" y="275.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (54 samples, 0.70%)</title><rect x="308.2" y="259.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (54 samples, 0.70%)</title><rect x="308.2" y="243.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (54 samples, 0.70%)</title><rect x="308.2" y="227.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.2" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (49 samples, 0.64%)</title><rect x="308.9" y="211.0" width="7.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="311.9" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="316.4" y="355.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="319.4" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=37123] (413 samples, 5.35%)</title><rect x="316.7" y="403.0" width="63.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="319.7" y="414.0">[NIO Se..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (413 samples, 5.35%)</title><rect x="316.7" y="387.0" width="63.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.7" y="398.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (276 samples, 3.58%)</title><rect x="317.0" y="371.0" width="42.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.0" y="382.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.03%)</title><rect x="317.7" y="355.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.7" y="366.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.05%)</title><rect x="318.0" y="355.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="321.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (265 samples, 3.44%)</title><rect x="318.6" y="355.0" width="40.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.6" y="366.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (265 samples, 3.44%)</title><rect x="318.6" y="339.0" width="40.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="321.6" y="350.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (265 samples, 3.44%)</title><rect x="318.6" y="323.0" width="40.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.6" y="334.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (255 samples, 3.31%)</title><rect x="318.9" y="307.0" width="39.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="321.9" y="318.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (4 samples, 0.05%)</title><rect x="322.2" y="291.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="325.2" y="302.0"></text>
</g>
<g>
<title>kevent (229 samples, 2.97%)</title><rect x="322.9" y="291.0" width="35.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="325.9" y="302.0">kev..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.03%)</title><rect x="357.9" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="360.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="357.9" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="360.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="357.9" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="357.9" y="259.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.9" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="357.9" y="243.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="358.2" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.05%)</title><rect x="358.5" y="307.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="361.5" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.03%)</title><rect x="358.8" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="361.8" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (135 samples, 1.75%)</title><rect x="359.3" y="371.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.3" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (132 samples, 1.71%)</title><rect x="359.4" y="355.0" width="20.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (58 samples, 0.75%)</title><rect x="359.4" y="339.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="362.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (46 samples, 0.60%)</title><rect x="359.6" y="323.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (44 samples, 0.57%)</title><rect x="359.9" y="307.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="359.9" y="291.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="359.9" y="275.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (42 samples, 0.54%)</title><rect x="360.2" y="291.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="360.2" y="275.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="363.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (40 samples, 0.52%)</title><rect x="360.5" y="275.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="363.5" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.03%)</title><rect x="360.5" y="259.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="363.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (38 samples, 0.49%)</title><rect x="360.8" y="259.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (38 samples, 0.49%)</title><rect x="360.8" y="243.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="363.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (38 samples, 0.49%)</title><rect x="360.8" y="227.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="363.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (28 samples, 0.36%)</title><rect x="361.0" y="211.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="364.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.04%)</title><rect x="361.1" y="195.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="364.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.03%)</title><rect x="361.1" y="179.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.03%)</title><rect x="361.1" y="163.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="364.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="361.6" y="195.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="361.6" y="179.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="364.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 0.27%)</title><rect x="362.0" y="195.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 0.27%)</title><rect x="362.0" y="179.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 0.27%)</title><rect x="362.0" y="163.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 0.27%)</title><rect x="362.0" y="147.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.0" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (21 samples, 0.27%)</title><rect x="362.0" y="131.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="365.0" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (20 samples, 0.26%)</title><rect x="362.2" y="115.0" width="3.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="365.2" y="126.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title><rect x="362.3" y="99.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="365.3" y="110.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.03%)</title><rect x="362.3" y="83.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="365.3" y="94.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.03%)</title><rect x="362.3" y="67.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="365.3" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.03%)</title><rect x="362.3" y="51.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="365.3" y="62.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (2 samples, 0.03%)</title><rect x="362.3" y="35.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="365.3" y="46.0"></text>
</g>
<g>
<title>__psynch_cvsignal (14 samples, 0.18%)</title><rect x="362.9" y="99.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="365.9" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.03%)</title><rect x="365.4" y="211.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="368.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.06%)</title><rect x="365.7" y="211.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.06%)</title><rect x="365.7" y="195.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.05%)</title><rect x="365.7" y="179.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="368.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.05%)</title><rect x="365.7" y="163.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.05%)</title><rect x="365.7" y="147.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.7" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.05%)</title><rect x="365.7" y="131.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.7" y="142.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.05%)</title><rect x="365.7" y="115.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="368.7" y="126.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.05%)</title><rect x="365.7" y="99.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="368.7" y="110.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.05%)</title><rect x="365.7" y="83.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="368.7" y="94.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.06%)</title><rect x="366.6" y="323.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="369.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.04%)</title><rect x="366.6" y="307.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.6" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="366.6" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.6" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="367.1" y="307.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="370.1" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="367.1" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="370.1" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.04%)</title><rect x="367.4" y="323.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.04%)</title><rect x="367.4" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="370.4" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.04%)</title><rect x="367.4" y="291.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.4" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="367.4" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.03%)</title><rect x="367.4" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.4" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="368.0" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="371.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="368.0" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (74 samples, 0.96%)</title><rect x="368.3" y="339.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="371.3" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (74 samples, 0.96%)</title><rect x="368.3" y="323.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="371.3" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="368.3" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.3" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="368.3" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="371.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="368.3" y="275.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="371.3" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="368.3" y="259.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="371.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="368.3" y="243.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="371.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (72 samples, 0.93%)</title><rect x="368.6" y="307.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="371.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.05%)</title><rect x="368.8" y="291.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (67 samples, 0.87%)</title><rect x="369.4" y="291.0" width="10.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="372.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (67 samples, 0.87%)</title><rect x="369.4" y="275.0" width="10.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="372.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (65 samples, 0.84%)</title><rect x="369.5" y="259.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="372.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (65 samples, 0.84%)</title><rect x="369.5" y="243.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="372.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (65 samples, 0.84%)</title><rect x="369.5" y="227.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="372.5" y="238.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.03%)</title><rect x="370.1" y="211.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="373.1" y="222.0"></text>
</g>
<g>
<title>rpc_errlist (59 samples, 0.76%)</title><rect x="370.4" y="211.0" width="9.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="373.4" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="379.6" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="382.6" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=36611] (229 samples, 2.97%)</title><rect x="379.9" y="403.0" width="35.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="382.9" y="414.0">[NI..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (229 samples, 2.97%)</title><rect x="379.9" y="387.0" width="35.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.9" y="398.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (155 samples, 2.01%)</title><rect x="379.9" y="371.0" width="23.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.9" y="382.0">o..</text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="379.9" y="355.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="382.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (153 samples, 1.98%)</title><rect x="380.2" y="355.0" width="23.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="383.2" y="366.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (153 samples, 1.98%)</title><rect x="380.2" y="339.0" width="23.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.2" y="350.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (153 samples, 1.98%)</title><rect x="380.2" y="323.0" width="23.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="383.2" y="334.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (145 samples, 1.88%)</title><rect x="380.4" y="307.0" width="22.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="383.4" y="318.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.06%)</title><rect x="381.8" y="291.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="384.8" y="302.0"></text>
</g>
<g>
<title>kevent (131 samples, 1.70%)</title><rect x="382.5" y="291.0" width="20.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="385.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.04%)</title><rect x="402.6" y="307.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="405.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.05%)</title><rect x="403.0" y="307.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="406.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.05%)</title><rect x="403.0" y="291.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="406.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.04%)</title><rect x="403.0" y="275.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.0" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (74 samples, 0.96%)</title><rect x="403.6" y="371.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (70 samples, 0.91%)</title><rect x="403.9" y="355.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (36 samples, 0.47%)</title><rect x="403.9" y="339.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="406.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (28 samples, 0.36%)</title><rect x="403.9" y="323.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="406.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (26 samples, 0.34%)</title><rect x="404.1" y="307.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (25 samples, 0.32%)</title><rect x="404.3" y="291.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="407.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (25 samples, 0.32%)</title><rect x="404.3" y="275.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.3" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.05%)</title><rect x="404.3" y="259.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.3" y="270.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="404.6" y="243.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="404.6" y="227.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.6" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="404.6" y="211.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="407.6" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="404.6" y="195.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (21 samples, 0.27%)</title><rect x="404.9" y="259.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (20 samples, 0.26%)</title><rect x="405.0" y="243.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="408.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (20 samples, 0.26%)</title><rect x="405.0" y="227.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (15 samples, 0.19%)</title><rect x="405.0" y="211.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="408.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.03%)</title><rect x="405.0" y="195.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.03%)</title><rect x="405.0" y="179.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 0.16%)</title><rect x="405.5" y="195.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.16%)</title><rect x="405.5" y="179.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.14%)</title><rect x="405.6" y="163.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="408.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.14%)</title><rect x="405.6" y="147.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="408.6" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (11 samples, 0.14%)</title><rect x="405.6" y="131.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="408.6" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (10 samples, 0.13%)</title><rect x="405.8" y="115.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="408.8" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.09%)</title><rect x="406.1" y="99.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="409.1" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="407.3" y="211.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="407.3" y="195.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="410.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.04%)</title><rect x="407.3" y="179.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.04%)</title><rect x="407.3" y="163.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.03%)</title><rect x="407.8" y="211.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="407.8" y="195.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title><rect x="407.8" y="179.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.8" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.05%)</title><rect x="408.2" y="323.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.03%)</title><rect x="408.2" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.2" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="408.5" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.04%)</title><rect x="408.8" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="408.8" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.8" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="408.8" y="291.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.8" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (34 samples, 0.44%)</title><rect x="409.5" y="339.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="412.5" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (34 samples, 0.44%)</title><rect x="409.5" y="323.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (33 samples, 0.43%)</title><rect x="409.6" y="307.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (32 samples, 0.41%)</title><rect x="409.8" y="291.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="412.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (32 samples, 0.41%)</title><rect x="409.8" y="275.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="412.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (31 samples, 0.40%)</title><rect x="409.9" y="259.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="412.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (31 samples, 0.40%)</title><rect x="409.9" y="243.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="412.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (31 samples, 0.40%)</title><rect x="409.9" y="227.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.9" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (30 samples, 0.39%)</title><rect x="410.1" y="211.0" width="4.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="413.1" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="414.7" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="417.7" y="366.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="414.7" y="339.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="417.7" y="350.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.03%)</title><rect x="414.7" y="323.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="417.7" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=26115] (529 samples, 6.86%)</title><rect x="415.0" y="403.0" width="80.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="418.0" y="414.0">[NIO Sele..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (529 samples, 6.86%)</title><rect x="415.0" y="387.0" width="80.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="418.0" y="398.0">one/nio/s..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (357 samples, 4.63%)</title><rect x="415.3" y="371.0" width="54.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="418.3" y="382.0">one/n..</text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.03%)</title><rect x="415.3" y="355.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="418.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.03%)</title><rect x="415.6" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="418.6" y="366.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="415.9" y="355.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="418.9" y="366.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.03%)</title><rect x="415.9" y="339.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="418.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (350 samples, 4.54%)</title><rect x="416.2" y="355.0" width="53.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.2" y="366.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (350 samples, 4.54%)</title><rect x="416.2" y="339.0" width="53.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.2" y="350.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (350 samples, 4.54%)</title><rect x="416.2" y="323.0" width="53.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.2" y="334.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (338 samples, 4.38%)</title><rect x="416.2" y="307.0" width="51.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.2" y="318.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.03%)</title><rect x="419.7" y="291.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="422.7" y="302.0"></text>
</g>
<g>
<title>kevent (313 samples, 4.06%)</title><rect x="420.0" y="291.0" width="47.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="423.0" y="302.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.04%)</title><rect x="467.9" y="307.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="470.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.04%)</title><rect x="467.9" y="291.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="470.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.04%)</title><rect x="467.9" y="275.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="470.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.04%)</title><rect x="467.9" y="259.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.9" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.04%)</title><rect x="467.9" y="243.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="470.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (8 samples, 0.10%)</title><rect x="468.5" y="307.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="471.5" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.06%)</title><rect x="469.0" y="291.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="472.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="469.0" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="472.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="469.0" y="259.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="472.0" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="469.0" y="243.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="472.0" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.04%)</title><rect x="469.3" y="275.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.3" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (170 samples, 2.20%)</title><rect x="469.9" y="371.0" width="26.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="472.9" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (164 samples, 2.13%)</title><rect x="470.8" y="355.0" width="25.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="473.8" y="366.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (93 samples, 1.21%)</title><rect x="470.8" y="339.0" width="14.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="473.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (64 samples, 0.83%)</title><rect x="471.1" y="323.0" width="9.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="474.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (61 samples, 0.79%)</title><rect x="471.6" y="307.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="471.6" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="471.6" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="474.6" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="471.6" y="259.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="474.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="471.6" y="243.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="474.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.handleDefault (58 samples, 0.75%)</title><rect x="472.0" y="291.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.entity (55 samples, 0.71%)</title><rect x="472.5" y="275.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="472.6" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="475.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="472.6" y="243.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.6" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="472.6" y="227.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="475.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="472.6" y="211.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.6" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="472.6" y="195.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="475.6" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.executeAsync (51 samples, 0.66%)</title><rect x="473.1" y="259.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="476.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (50 samples, 0.65%)</title><rect x="473.2" y="243.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (50 samples, 0.65%)</title><rect x="473.2" y="227.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (2 samples, 0.03%)</title><rect x="473.2" y="211.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="476.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (44 samples, 0.57%)</title><rect x="473.6" y="211.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="476.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.08%)</title><rect x="473.9" y="195.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.08%)</title><rect x="473.9" y="179.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.08%)</title><rect x="473.9" y="163.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="476.9" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.03%)</title><rect x="474.2" y="147.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.2" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="474.2" y="131.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="477.2" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="474.2" y="115.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="477.2" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.03%)</title><rect x="474.5" y="147.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="477.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.03%)</title><rect x="474.5" y="131.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.5" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.03%)</title><rect x="474.5" y="115.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.5" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (2 samples, 0.03%)</title><rect x="474.5" y="99.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.5" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.10%)</title><rect x="474.8" y="195.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.10%)</title><rect x="474.8" y="179.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="477.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.09%)</title><rect x="474.8" y="163.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="477.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.09%)</title><rect x="474.8" y="147.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="477.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.09%)</title><rect x="474.8" y="131.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.8" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.09%)</title><rect x="474.8" y="115.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="477.8" y="126.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.09%)</title><rect x="474.8" y="99.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="477.8" y="110.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.09%)</title><rect x="474.8" y="83.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="477.8" y="94.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.09%)</title><rect x="474.8" y="67.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="477.8" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 0.36%)</title><rect x="476.0" y="195.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 0.36%)</title><rect x="476.0" y="179.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 0.36%)</title><rect x="476.0" y="163.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 0.36%)</title><rect x="476.0" y="147.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.0" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (28 samples, 0.36%)</title><rect x="476.0" y="131.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.0" y="142.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (24 samples, 0.31%)</title><rect x="476.6" y="115.0" width="3.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="479.6" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.23%)</title><rect x="476.9" y="99.0" width="2.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="479.9" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="479.8" y="99.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="482.8" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.05%)</title><rect x="480.3" y="211.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="483.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="480.4" y="195.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="483.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.04%)</title><rect x="480.4" y="179.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="483.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.04%)</title><rect x="480.4" y="163.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="483.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.04%)</title><rect x="480.4" y="147.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="483.4" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.04%)</title><rect x="480.4" y="131.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.4" y="142.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.04%)</title><rect x="480.4" y="115.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="483.4" y="126.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.04%)</title><rect x="480.4" y="99.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="483.4" y="110.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="480.4" y="83.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="483.4" y="94.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 0.13%)</title><rect x="480.9" y="323.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="483.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.03%)</title><rect x="480.9" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.9" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="480.9" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="483.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="480.9" y="275.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="483.9" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="480.9" y="259.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.10%)</title><rect x="481.2" y="307.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="484.2" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.10%)</title><rect x="481.2" y="291.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.2" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (9 samples, 0.12%)</title><rect x="482.4" y="323.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.08%)</title><rect x="482.4" y="307.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="485.4" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.08%)</title><rect x="482.4" y="291.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.4" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.04%)</title><rect x="482.4" y="275.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="485.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.03%)</title><rect x="482.6" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.6" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="483.0" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="486.0" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (2 samples, 0.03%)</title><rect x="483.5" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="486.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getBody (2 samples, 0.03%)</title><rect x="483.8" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="486.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="484.1" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.1" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="484.4" y="323.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="487.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.05%)</title><rect x="484.4" y="307.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="487.4" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (71 samples, 0.92%)</title><rect x="485.0" y="339.0" width="10.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="488.0" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (70 samples, 0.91%)</title><rect x="485.2" y="323.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (69 samples, 0.89%)</title><rect x="485.3" y="307.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="488.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="485.3" y="291.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="485.3" y="275.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (67 samples, 0.87%)</title><rect x="485.6" y="291.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="488.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (67 samples, 0.87%)</title><rect x="485.6" y="275.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (64 samples, 0.83%)</title><rect x="485.8" y="259.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (64 samples, 0.83%)</title><rect x="485.8" y="243.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (64 samples, 0.83%)</title><rect x="485.8" y="227.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.8" y="238.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.03%)</title><rect x="485.9" y="211.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="488.9" y="222.0"></text>
</g>
<g>
<title>rpc_errlist (61 samples, 0.79%)</title><rect x="486.3" y="211.0" width="9.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="489.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.03%)</title><rect x="495.6" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="498.6" y="270.0"></text>
</g>
<g>
<title>[RMI TCP Connection(5)-192.168.1.46 tid=29959] (7 samples, 0.09%)</title><rect x="495.9" y="403.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="498.9" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.run (7 samples, 0.09%)</title><rect x="495.9" y="387.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="498.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (7 samples, 0.09%)</title><rect x="495.9" y="371.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (7 samples, 0.09%)</title><rect x="495.9" y="355.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="498.9" y="366.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (7 samples, 0.09%)</title><rect x="495.9" y="339.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.9" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (7 samples, 0.09%)</title><rect x="495.9" y="323.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.9" y="334.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$102/52688902.run (7 samples, 0.09%)</title><rect x="495.9" y="307.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.9" y="318.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (7 samples, 0.09%)</title><rect x="495.9" y="291.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.9" y="302.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (7 samples, 0.09%)</title><rect x="495.9" y="275.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="498.9" y="286.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (7 samples, 0.09%)</title><rect x="495.9" y="259.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.9" y="270.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (2 samples, 0.03%)</title><rect x="495.9" y="243.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="498.9" y="254.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (2 samples, 0.03%)</title><rect x="495.9" y="227.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="498.9" y="238.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (2 samples, 0.03%)</title><rect x="495.9" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="498.9" y="222.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (2 samples, 0.03%)</title><rect x="495.9" y="195.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="498.9" y="206.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (2 samples, 0.03%)</title><rect x="495.9" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="498.9" y="190.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead (2 samples, 0.03%)</title><rect x="495.9" y="163.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="498.9" y="174.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead0 (2 samples, 0.03%)</title><rect x="495.9" y="147.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="498.9" y="158.0"></text>
</g>
<g>
<title>Java_java_net_SocketInputStream_socketRead0 (2 samples, 0.03%)</title><rect x="495.9" y="131.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="498.9" y="142.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (4 samples, 0.05%)</title><rect x="496.2" y="243.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="499.2" y="254.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (4 samples, 0.05%)</title><rect x="496.2" y="227.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.2" y="238.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.05%)</title><rect x="496.2" y="211.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.2" y="222.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.05%)</title><rect x="496.2" y="195.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.2" y="206.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (4 samples, 0.05%)</title><rect x="496.2" y="179.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="499.2" y="190.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (3 samples, 0.04%)</title><rect x="496.4" y="163.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="499.4" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.04%)</title><rect x="496.4" y="147.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.4" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.04%)</title><rect x="496.4" y="131.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="499.4" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.04%)</title><rect x="496.4" y="115.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.4" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (3 samples, 0.04%)</title><rect x="496.4" y="99.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.4" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (2 samples, 0.03%)</title><rect x="496.5" y="83.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.5" y="94.0"></text>
</g>
<g>
<title>[worker tid=43779] (543 samples, 7.04%)</title><rect x="497.0" y="403.0" width="83.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="500.0" y="414.0">[worker t..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="497.0" y="387.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="500.0" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="497.0" y="371.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="500.0" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.03%)</title><rect x="497.0" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="500.0" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (540 samples, 7.00%)</title><rect x="497.4" y="387.0" width="82.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.4" y="398.0">java/lang..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (540 samples, 7.00%)</title><rect x="497.4" y="371.0" width="82.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.4" y="382.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (540 samples, 7.00%)</title><rect x="497.4" y="355.0" width="82.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="500.4" y="366.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (293 samples, 3.80%)</title><rect x="497.7" y="339.0" width="44.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.7" y="350.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (293 samples, 3.80%)</title><rect x="497.7" y="323.0" width="44.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="500.7" y="334.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (3 samples, 0.04%)</title><rect x="498.2" y="307.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="501.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (229 samples, 2.97%)</title><rect x="498.8" y="307.0" width="35.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="501.8" y="318.0">jav..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.03%)</title><rect x="498.8" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="501.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.09%)</title><rect x="499.1" y="291.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="502.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.05%)</title><rect x="499.1" y="275.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.05%)</title><rect x="499.1" y="259.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.05%)</title><rect x="499.1" y="243.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.04%)</title><rect x="499.3" y="227.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="502.3" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.04%)</title><rect x="499.3" y="211.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="502.3" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="499.3" y="195.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="502.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="499.9" y="275.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="499.9" y="259.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.16%)</title><rect x="500.2" y="291.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="503.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.16%)</title><rect x="500.2" y="275.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.16%)</title><rect x="500.2" y="259.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.14%)</title><rect x="500.3" y="243.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="503.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (11 samples, 0.14%)</title><rect x="500.3" y="227.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.3" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (11 samples, 0.14%)</title><rect x="500.3" y="211.0" width="1.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="503.3" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.10%)</title><rect x="500.5" y="195.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="503.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (208 samples, 2.70%)</title><rect x="502.0" y="291.0" width="31.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.0" y="302.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (208 samples, 2.70%)</title><rect x="502.0" y="275.0" width="31.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="505.0" y="286.0">jd..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (191 samples, 2.48%)</title><rect x="504.6" y="259.0" width="29.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="507.6" y="270.0">Un..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.04%)</title><rect x="504.9" y="243.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="507.9" y="254.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (2 samples, 0.03%)</title><rect x="505.1" y="227.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="508.1" y="238.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (2 samples, 0.03%)</title><rect x="505.1" y="211.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="508.1" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (182 samples, 2.36%)</title><rect x="505.5" y="243.0" width="27.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="508.5" y="254.0">P..</text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="505.7" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="508.7" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (175 samples, 2.27%)</title><rect x="506.0" y="227.0" width="26.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="509.0" y="238.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.05%)</title><rect x="532.8" y="227.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="535.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (10 samples, 0.13%)</title><rect x="534.0" y="307.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="537.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (10 samples, 0.13%)</title><rect x="534.0" y="291.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="537.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (9 samples, 0.12%)</title><rect x="534.0" y="275.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.12%)</title><rect x="534.0" y="259.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="537.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.12%)</title><rect x="534.0" y="243.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="537.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 0.12%)</title><rect x="534.0" y="227.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="537.0" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (9 samples, 0.12%)</title><rect x="534.0" y="211.0" width="1.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="537.0" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.12%)</title><rect x="534.0" y="195.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="537.0" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.12%)</title><rect x="534.0" y="179.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="537.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (46 samples, 0.60%)</title><rect x="535.5" y="307.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="538.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (46 samples, 0.60%)</title><rect x="535.5" y="291.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="538.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (46 samples, 0.60%)</title><rect x="535.5" y="275.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (46 samples, 0.60%)</title><rect x="535.5" y="259.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="538.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (46 samples, 0.60%)</title><rect x="535.5" y="243.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="538.5" y="254.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="535.5" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="538.5" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (42 samples, 0.54%)</title><rect x="535.8" y="227.0" width="6.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="538.8" y="238.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="536.1" y="211.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="539.1" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="536.1" y="195.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="539.1" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="536.6" y="211.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="539.6" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="536.6" y="195.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="539.6" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="536.6" y="179.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="539.6" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="536.6" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="539.6" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="536.6" y="147.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="539.6" y="158.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="536.9" y="211.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="539.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (30 samples, 0.39%)</title><rect x="537.2" y="211.0" width="4.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="540.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (244 samples, 3.16%)</title><rect x="542.7" y="339.0" width="37.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="545.7" y="350.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (244 samples, 3.16%)</title><rect x="542.7" y="323.0" width="37.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.7" y="334.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (136 samples, 1.76%)</title><rect x="542.7" y="307.0" width="20.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="545.7" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.04%)</title><rect x="543.5" y="291.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="546.5" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="543.6" y="275.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="546.6" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.03%)</title><rect x="543.6" y="259.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="546.6" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (126 samples, 1.63%)</title><rect x="544.1" y="291.0" width="19.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="547.1" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.17%)</title><rect x="544.1" y="275.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="547.1" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.13%)</title><rect x="544.5" y="259.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="547.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.03%)</title><rect x="544.5" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="547.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.03%)</title><rect x="544.5" y="227.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.5" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.03%)</title><rect x="544.8" y="243.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="547.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.08%)</title><rect x="545.2" y="243.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="548.2" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.08%)</title><rect x="545.2" y="227.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="548.2" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.08%)</title><rect x="545.2" y="211.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="548.2" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="545.8" y="195.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="548.8" y="206.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="545.8" y="179.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="548.8" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (113 samples, 1.47%)</title><rect x="546.1" y="275.0" width="17.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="549.1" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (113 samples, 1.47%)</title><rect x="546.1" y="259.0" width="17.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="549.1" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (112 samples, 1.45%)</title><rect x="546.2" y="243.0" width="17.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="549.2" y="254.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (112 samples, 1.45%)</title><rect x="546.2" y="227.0" width="17.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="549.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (112 samples, 1.45%)</title><rect x="546.2" y="211.0" width="17.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="549.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.06%)</title><rect x="546.2" y="195.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="549.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.06%)</title><rect x="546.2" y="179.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="549.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.06%)</title><rect x="546.2" y="163.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (2 samples, 0.03%)</title><rect x="546.7" y="147.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (107 samples, 1.39%)</title><rect x="547.0" y="195.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="550.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (107 samples, 1.39%)</title><rect x="547.0" y="179.0" width="16.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="550.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (102 samples, 1.32%)</title><rect x="547.1" y="163.0" width="15.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="550.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (102 samples, 1.32%)</title><rect x="547.1" y="147.0" width="15.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="550.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (102 samples, 1.32%)</title><rect x="547.1" y="131.0" width="15.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="550.1" y="142.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.03%)</title><rect x="547.4" y="115.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="550.4" y="126.0"></text>
</g>
<g>
<title>write (98 samples, 1.27%)</title><rect x="547.8" y="115.0" width="14.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="550.8" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.05%)</title><rect x="562.7" y="163.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="565.7" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.04%)</title><rect x="562.7" y="147.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="565.7" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.04%)</title><rect x="562.7" y="131.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="565.7" y="142.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="562.7" y="115.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="565.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$133/744045698.act (108 samples, 1.40%)</title><rect x="563.5" y="307.0" width="16.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="566.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$0 (107 samples, 1.39%)</title><rect x="563.7" y="291.0" width="16.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="566.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (107 samples, 1.39%)</title><rect x="563.7" y="275.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (106 samples, 1.37%)</title><rect x="563.8" y="259.0" width="16.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="566.8" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (104 samples, 1.35%)</title><rect x="563.8" y="243.0" width="15.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="566.8" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (104 samples, 1.35%)</title><rect x="563.8" y="227.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="566.8" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (101 samples, 1.31%)</title><rect x="564.1" y="211.0" width="15.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="567.1" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (95 samples, 1.23%)</title><rect x="564.9" y="195.0" width="14.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="567.9" y="206.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (18 samples, 0.23%)</title><rect x="565.5" y="179.0" width="2.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="568.5" y="190.0"></text>
</g>
<g>
<title>jni_NewByteArray (11 samples, 0.14%)</title><rect x="566.0" y="163.0" width="1.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="569.0" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="566.4" y="147.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="569.4" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="566.4" y="131.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="569.4" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="566.4" y="115.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="569.4" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="566.4" y="99.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="569.4" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="566.4" y="83.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="569.4" y="94.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.08%)</title><rect x="566.7" y="147.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="569.7" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.08%)</title><rect x="566.7" y="131.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="569.7" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.06%)</title><rect x="566.9" y="115.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="569.9" y="126.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.05%)</title><rect x="567.6" y="163.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="570.6" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="567.9" y="147.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="570.9" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="567.9" y="131.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="570.9" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="567.9" y="115.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="570.9" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="567.9" y="99.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="570.9" y="110.0"></text>
</g>
<g>
<title>free (3 samples, 0.04%)</title><rect x="568.3" y="179.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="571.3" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.04%)</title><rect x="568.9" y="179.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="571.9" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="568.9" y="163.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="571.9" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="569.0" y="147.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="572.0" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="569.0" y="131.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="572.0" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="569.0" y="115.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="572.0" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="569.0" y="99.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="572.0" y="110.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="569.5" y="179.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="572.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (60 samples, 0.78%)</title><rect x="570.1" y="179.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="573.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (59 samples, 0.76%)</title><rect x="570.2" y="163.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="573.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (57 samples, 0.74%)</title><rect x="570.4" y="147.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="573.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (57 samples, 0.74%)</title><rect x="570.4" y="131.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="573.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (53 samples, 0.69%)</title><rect x="570.5" y="115.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="573.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.04%)</title><rect x="571.3" y="99.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="574.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.04%)</title><rect x="571.3" y="83.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="574.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (42 samples, 0.54%)</title><rect x="571.9" y="99.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="574.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (40 samples, 0.52%)</title><rect x="572.2" y="83.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="575.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (7 samples, 0.09%)</title><rect x="575.0" y="67.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="578.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (14 samples, 0.18%)</title><rect x="576.1" y="67.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="579.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.08%)</title><rect x="577.3" y="51.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="580.3" y="62.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="578.8" y="115.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="581.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.03%)</title><rect x="579.7" y="243.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="582.7" y="254.0"></text>
</g>
<g>
<title>[worker tid=44291] (574 samples, 7.44%)</title><rect x="580.0" y="403.0" width="87.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="583.0" y="414.0">[worker ti..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.04%)</title><rect x="580.0" y="387.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="583.0" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.04%)</title><rect x="580.0" y="371.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="583.0" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.04%)</title><rect x="580.0" y="355.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="583.0" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.04%)</title><rect x="580.0" y="339.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="583.0" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="580.0" y="323.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="583.0" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.run (571 samples, 7.40%)</title><rect x="580.5" y="387.0" width="87.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="583.5" y="398.0">java/lang/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (571 samples, 7.40%)</title><rect x="580.5" y="371.0" width="87.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="583.5" y="382.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (571 samples, 7.40%)</title><rect x="580.5" y="355.0" width="87.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.5" y="366.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (4 samples, 0.05%)</title><rect x="580.6" y="339.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="583.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="580.8" y="323.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.8" y="334.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="581.0" y="307.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="584.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (313 samples, 4.06%)</title><rect x="581.4" y="339.0" width="47.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.4" y="350.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (312 samples, 4.05%)</title><rect x="581.6" y="323.0" width="47.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.6" y="334.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (3 samples, 0.04%)</title><rect x="581.7" y="307.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="584.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (3 samples, 0.04%)</title><rect x="582.2" y="307.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="585.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (246 samples, 3.19%)</title><rect x="582.6" y="307.0" width="37.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="585.6" y="318.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.03%)</title><rect x="582.9" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="585.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.05%)</title><rect x="583.2" y="291.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="586.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.04%)</title><rect x="583.4" y="275.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="586.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.04%)</title><rect x="583.4" y="259.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="586.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.04%)</title><rect x="583.4" y="243.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="586.4" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.04%)</title><rect x="583.4" y="227.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="586.4" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.04%)</title><rect x="583.4" y="211.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="586.4" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="583.6" y="195.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="586.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (19 samples, 0.25%)</title><rect x="583.9" y="291.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.25%)</title><rect x="583.9" y="275.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="586.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.25%)</title><rect x="583.9" y="259.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.25%)</title><rect x="583.9" y="243.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.9" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.25%)</title><rect x="583.9" y="227.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.9" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.25%)</title><rect x="583.9" y="211.0" width="2.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="586.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (17 samples, 0.22%)</title><rect x="583.9" y="195.0" width="2.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="586.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (219 samples, 2.84%)</title><rect x="586.8" y="291.0" width="33.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.8" y="302.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (219 samples, 2.84%)</title><rect x="586.8" y="275.0" width="33.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="589.8" y="286.0">jd..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (203 samples, 2.63%)</title><rect x="589.1" y="259.0" width="31.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="592.1" y="270.0">Un..</text>
</g>
<g>
<title>Parker::park(bool, long) (194 samples, 2.52%)</title><rect x="589.5" y="243.0" width="29.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="592.5" y="254.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.05%)</title><rect x="589.7" y="227.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="592.7" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (182 samples, 2.36%)</title><rect x="590.4" y="227.0" width="27.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="593.4" y="238.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (5 samples, 0.06%)</title><rect x="618.3" y="227.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="621.3" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="619.4" y="243.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="622.4" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="619.8" y="243.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="622.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (15 samples, 0.19%)</title><rect x="620.4" y="307.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (15 samples, 0.19%)</title><rect x="620.4" y="291.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="623.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (14 samples, 0.18%)</title><rect x="620.4" y="275.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="623.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (14 samples, 0.18%)</title><rect x="620.4" y="259.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 0.18%)</title><rect x="620.4" y="243.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 0.17%)</title><rect x="620.6" y="227.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="623.6" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (12 samples, 0.16%)</title><rect x="620.7" y="211.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="623.7" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.16%)</title><rect x="620.7" y="195.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="623.7" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.16%)</title><rect x="620.7" y="179.0" width="1.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="623.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (43 samples, 0.56%)</title><rect x="622.7" y="307.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="625.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (43 samples, 0.56%)</title><rect x="622.7" y="291.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="625.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (42 samples, 0.54%)</title><rect x="622.9" y="275.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (42 samples, 0.54%)</title><rect x="622.9" y="259.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="625.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (42 samples, 0.54%)</title><rect x="622.9" y="243.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="625.9" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (39 samples, 0.51%)</title><rect x="623.3" y="227.0" width="6.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="626.3" y="238.0"></text>
</g>
<g>
<title>Thread::current_or_null() (2 samples, 0.03%)</title><rect x="623.6" y="211.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="626.6" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="624.2" y="211.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="627.2" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (27 samples, 0.35%)</title><rect x="624.6" y="211.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="627.6" y="222.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="628.8" y="211.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="631.8" y="222.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.03%)</title><rect x="628.8" y="195.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="631.8" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (251 samples, 3.25%)</title><rect x="629.5" y="339.0" width="38.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="632.5" y="350.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (250 samples, 3.24%)</title><rect x="629.6" y="323.0" width="38.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="632.6" y="334.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (133 samples, 1.72%)</title><rect x="629.6" y="307.0" width="20.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.6" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="630.2" y="291.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="633.2" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="630.2" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="633.2" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.03%)</title><rect x="630.2" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="633.2" y="270.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.03%)</title><rect x="630.2" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="633.2" y="254.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.06%)</title><rect x="630.5" y="291.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="633.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.06%)</title><rect x="630.5" y="275.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="633.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.06%)</title><rect x="630.5" y="259.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="633.5" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (120 samples, 1.56%)</title><rect x="631.3" y="291.0" width="18.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.09%)</title><rect x="631.3" y="275.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.3" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="631.4" y="259.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="634.4" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.05%)</title><rect x="631.7" y="259.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.7" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="631.9" y="243.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.9" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="631.9" y="227.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.9" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="631.9" y="211.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="634.9" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (113 samples, 1.47%)</title><rect x="632.4" y="275.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="635.4" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (113 samples, 1.47%)</title><rect x="632.4" y="259.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.4" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (112 samples, 1.45%)</title><rect x="632.5" y="243.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="635.5" y="254.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (112 samples, 1.45%)</title><rect x="632.5" y="227.0" width="17.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (111 samples, 1.44%)</title><rect x="632.7" y="211.0" width="16.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="635.7" y="222.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (2 samples, 0.03%)</title><rect x="632.7" y="195.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="635.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (108 samples, 1.40%)</title><rect x="633.1" y="195.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (108 samples, 1.40%)</title><rect x="633.1" y="179.0" width="16.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="636.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (104 samples, 1.35%)</title><rect x="633.1" y="163.0" width="15.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="636.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (104 samples, 1.35%)</title><rect x="633.1" y="147.0" width="15.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="636.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (104 samples, 1.35%)</title><rect x="633.1" y="131.0" width="15.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="636.1" y="142.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.05%)</title><rect x="633.4" y="115.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="636.4" y="126.0"></text>
</g>
<g>
<title>write (97 samples, 1.26%)</title><rect x="634.2" y="115.0" width="14.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="637.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.05%)</title><rect x="649.0" y="163.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.05%)</title><rect x="649.0" y="147.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="652.0" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.03%)</title><rect x="649.6" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="652.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$133/744045698.act (117 samples, 1.52%)</title><rect x="650.0" y="307.0" width="17.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="653.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$0 (117 samples, 1.52%)</title><rect x="650.0" y="291.0" width="17.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="653.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (117 samples, 1.52%)</title><rect x="650.0" y="275.0" width="17.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="653.0" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.03%)</title><rect x="650.1" y="259.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="653.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (114 samples, 1.48%)</title><rect x="650.4" y="259.0" width="17.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="653.4" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (112 samples, 1.45%)</title><rect x="650.4" y="243.0" width="17.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="653.4" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (112 samples, 1.45%)</title><rect x="650.4" y="227.0" width="17.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="653.4" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (109 samples, 1.41%)</title><rect x="650.9" y="211.0" width="16.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="653.9" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="651.3" y="195.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="654.3" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="651.6" y="195.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="654.6" y="206.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.03%)</title><rect x="652.1" y="195.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="655.1" y="206.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (98 samples, 1.27%)</title><rect x="652.6" y="195.0" width="14.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="655.6" y="206.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (21 samples, 0.27%)</title><rect x="653.0" y="179.0" width="3.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="656.0" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="653.6" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="656.6" y="174.0"></text>
</g>
<g>
<title>jni_NewByteArray (12 samples, 0.16%)</title><rect x="654.1" y="163.0" width="1.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="657.1" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="654.5" y="147.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="657.5" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="655.2" y="147.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="658.2" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="655.2" y="131.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="658.2" y="142.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="655.6" y="147.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="658.6" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="655.6" y="131.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="658.6" y="142.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="655.9" y="163.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="658.9" y="174.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="656.5" y="179.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="659.5" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.05%)</title><rect x="657.0" y="179.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="660.0" y="190.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="657.0" y="163.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="660.0" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.05%)</title><rect x="657.6" y="179.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="660.6" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="657.6" y="163.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="660.6" y="174.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.08%)</title><rect x="658.5" y="179.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="661.5" y="190.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.08%)</title><rect x="658.5" y="163.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="661.5" y="174.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.03%)</title><rect x="658.5" y="147.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="661.5" y="158.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.05%)</title><rect x="658.8" y="147.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="661.8" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="658.8" y="131.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="661.8" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.05%)</title><rect x="658.8" y="115.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="661.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (53 samples, 0.69%)</title><rect x="659.4" y="179.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="662.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (2 samples, 0.03%)</title><rect x="659.6" y="163.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="662.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (50 samples, 0.65%)</title><rect x="659.9" y="163.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="662.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (50 samples, 0.65%)</title><rect x="659.9" y="147.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="662.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (49 samples, 0.64%)</title><rect x="660.0" y="131.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="663.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (46 samples, 0.60%)</title><rect x="660.2" y="115.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="663.2" y="126.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="660.4" y="99.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="663.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (7 samples, 0.09%)</title><rect x="660.8" y="99.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="663.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (5 samples, 0.06%)</title><rect x="661.0" y="83.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="664.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.03%)</title><rect x="661.4" y="67.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="664.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (33 samples, 0.43%)</title><rect x="662.0" y="99.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="665.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (27 samples, 0.35%)</title><rect x="662.8" y="83.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="665.8" y="94.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.03%)</title><rect x="664.3" y="67.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="667.3" y="78.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="664.6" y="67.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="667.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (4 samples, 0.05%)</title><rect x="664.9" y="67.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="667.9" y="78.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="665.2" y="51.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="668.2" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.06%)</title><rect x="665.6" y="67.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="668.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="665.7" y="51.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="668.7" y="62.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="666.5" y="67.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="669.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="667.2" y="115.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="670.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.03%)</title><rect x="667.5" y="243.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="670.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="667.5" y="227.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="670.5" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="667.5" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="670.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="667.5" y="195.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="670.5" y="206.0"></text>
</g>
<g>
<title>[worker tid=44803] (556 samples, 7.21%)</title><rect x="667.9" y="403.0" width="85.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="670.9" y="414.0">[worker ti..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="667.9" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="670.9" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="667.9" y="371.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="670.9" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.run (554 samples, 7.18%)</title><rect x="668.2" y="387.0" width="84.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="671.2" y="398.0">java/lang/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (554 samples, 7.18%)</title><rect x="668.2" y="371.0" width="84.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="671.2" y="382.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (554 samples, 7.18%)</title><rect x="668.2" y="355.0" width="84.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.2" y="366.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.04%)</title><rect x="668.3" y="339.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="671.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="668.5" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="671.5" y="334.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="668.5" y="307.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="671.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (269 samples, 3.49%)</title><rect x="668.8" y="339.0" width="41.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="671.8" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (267 samples, 3.46%)</title><rect x="669.1" y="323.0" width="40.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="672.1" y="334.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (210 samples, 2.72%)</title><rect x="669.5" y="307.0" width="32.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="672.5" y="318.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.04%)</title><rect x="669.7" y="291.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="672.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.09%)</title><rect x="670.1" y="291.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="673.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.09%)</title><rect x="670.1" y="275.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="673.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.09%)</title><rect x="670.1" y="259.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="673.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.09%)</title><rect x="670.1" y="243.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="673.1" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.09%)</title><rect x="670.1" y="227.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="673.1" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.06%)</title><rect x="670.5" y="211.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="673.5" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.04%)</title><rect x="670.5" y="195.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="673.5" y="206.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="670.9" y="195.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="673.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (198 samples, 2.57%)</title><rect x="671.4" y="291.0" width="30.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="674.4" y="302.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (198 samples, 2.57%)</title><rect x="671.4" y="275.0" width="30.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="674.4" y="286.0">jd..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (175 samples, 2.27%)</title><rect x="674.9" y="259.0" width="26.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="677.9" y="270.0">U..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="675.2" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="678.2" y="254.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="675.2" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="678.2" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="675.2" y="211.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="678.2" y="222.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="675.5" y="243.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="678.5" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (162 samples, 2.10%)</title><rect x="676.1" y="243.0" width="24.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="679.1" y="254.0">P..</text>
</g>
<g>
<title>__psynch_cvwait (153 samples, 1.98%)</title><rect x="676.6" y="227.0" width="23.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="679.6" y="238.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.04%)</title><rect x="700.0" y="227.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="703.0" y="238.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.03%)</title><rect x="700.1" y="211.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="703.1" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="700.6" y="227.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="703.6" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="700.9" y="243.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="703.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (13 samples, 0.17%)</title><rect x="701.8" y="307.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="704.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 0.16%)</title><rect x="702.0" y="291.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="705.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (10 samples, 0.13%)</title><rect x="702.0" y="275.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="705.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (10 samples, 0.13%)</title><rect x="702.0" y="259.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="705.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 0.13%)</title><rect x="702.0" y="243.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="705.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (10 samples, 0.13%)</title><rect x="702.0" y="227.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="705.0" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (10 samples, 0.13%)</title><rect x="702.0" y="211.0" width="1.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="705.0" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.12%)</title><rect x="702.1" y="195.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="705.1" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.10%)</title><rect x="702.3" y="179.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="705.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="703.5" y="275.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="706.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="703.5" y="259.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="706.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="703.5" y="243.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="706.5" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="703.5" y="227.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="706.5" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="703.5" y="211.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="706.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (40 samples, 0.52%)</title><rect x="703.8" y="307.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="706.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (40 samples, 0.52%)</title><rect x="703.8" y="291.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="706.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (39 samples, 0.51%)</title><rect x="704.0" y="275.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="707.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (39 samples, 0.51%)</title><rect x="704.0" y="259.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="707.0" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (39 samples, 0.51%)</title><rect x="704.0" y="243.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="707.0" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (33 samples, 0.43%)</title><rect x="704.7" y="227.0" width="5.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="707.7" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="705.0" y="211.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="708.0" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (26 samples, 0.34%)</title><rect x="705.6" y="211.0" width="4.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="708.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (281 samples, 3.64%)</title><rect x="709.9" y="339.0" width="43.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.9" y="350.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (281 samples, 3.64%)</title><rect x="709.9" y="323.0" width="43.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.9" y="334.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (178 samples, 2.31%)</title><rect x="710.1" y="307.0" width="27.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="713.1" y="318.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.03%)</title><rect x="710.7" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="713.7" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="710.7" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="713.7" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="710.7" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="713.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (170 samples, 2.20%)</title><rect x="711.0" y="291.0" width="26.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="714.0" y="302.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.09%)</title><rect x="711.0" y="275.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="714.0" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.08%)</title><rect x="711.1" y="259.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="714.1" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.06%)</title><rect x="711.3" y="243.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="714.3" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (163 samples, 2.11%)</title><rect x="712.1" y="275.0" width="24.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="715.1" y="286.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (162 samples, 2.10%)</title><rect x="712.1" y="259.0" width="24.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="715.1" y="270.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (161 samples, 2.09%)</title><rect x="712.2" y="243.0" width="24.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="715.2" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (160 samples, 2.07%)</title><rect x="712.4" y="227.0" width="24.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="715.4" y="238.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (160 samples, 2.07%)</title><rect x="712.4" y="211.0" width="24.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="715.4" y="222.0">s..</text>
</g>
<g>
<title>java/util/Objects.requireNonNull (4 samples, 0.05%)</title><rect x="712.5" y="195.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="715.5" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="712.7" y="179.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="715.7" y="190.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="712.8" y="163.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="715.8" y="174.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.03%)</title><rect x="712.8" y="147.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="715.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.09%)</title><rect x="713.1" y="195.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="716.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.09%)</title><rect x="713.1" y="179.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="716.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.09%)</title><rect x="713.1" y="163.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="716.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (6 samples, 0.08%)</title><rect x="713.3" y="147.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="716.3" y="158.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.08%)</title><rect x="713.3" y="131.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="716.3" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (148 samples, 1.92%)</title><rect x="714.2" y="195.0" width="22.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.2" y="206.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (148 samples, 1.92%)</title><rect x="714.2" y="179.0" width="22.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="717.2" y="190.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (142 samples, 1.84%)</title><rect x="714.2" y="163.0" width="21.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="717.2" y="174.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (142 samples, 1.84%)</title><rect x="714.2" y="147.0" width="21.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.2" y="158.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (142 samples, 1.84%)</title><rect x="714.2" y="131.0" width="21.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.2" y="142.0">s..</text>
</g>
<g>
<title>write (135 samples, 1.75%)</title><rect x="715.3" y="115.0" width="20.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="718.3" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.08%)</title><rect x="735.9" y="163.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="738.9" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.04%)</title><rect x="736.1" y="147.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="739.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.03%)</title><rect x="736.5" y="147.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.5" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="737.0" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="740.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="737.0" y="275.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="740.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="737.0" y="259.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="740.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$133/744045698.act (102 samples, 1.32%)</title><rect x="737.3" y="307.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="740.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$0 (102 samples, 1.32%)</title><rect x="737.3" y="291.0" width="15.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="740.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (102 samples, 1.32%)</title><rect x="737.3" y="275.0" width="15.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="740.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (100 samples, 1.30%)</title><rect x="737.6" y="259.0" width="15.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="740.6" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (100 samples, 1.30%)</title><rect x="737.6" y="243.0" width="15.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="740.6" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (100 samples, 1.30%)</title><rect x="737.6" y="227.0" width="15.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="740.6" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (99 samples, 1.28%)</title><rect x="737.8" y="211.0" width="15.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="740.8" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="738.1" y="195.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="741.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.03%)</title><rect x="738.5" y="195.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="741.5" y="206.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (89 samples, 1.15%)</title><rect x="738.8" y="195.0" width="13.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="741.8" y="206.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (24 samples, 0.31%)</title><rect x="738.8" y="179.0" width="3.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="741.8" y="190.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.03%)</title><rect x="738.8" y="163.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="741.8" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="739.3" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="742.3" y="174.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="739.6" y="163.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="742.6" y="174.0"></text>
</g>
<g>
<title>jni_NewByteArray (16 samples, 0.21%)</title><rect x="739.9" y="163.0" width="2.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="742.9" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="740.4" y="147.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="743.4" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="740.5" y="131.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="743.5" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="740.5" y="115.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="743.5" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="740.5" y="99.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="743.5" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="740.5" y="83.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="743.5" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="740.5" y="67.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="743.5" y="78.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.13%)</title><rect x="740.8" y="147.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="743.8" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 0.10%)</title><rect x="741.1" y="131.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="744.1" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.08%)</title><rect x="741.1" y="115.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="744.1" y="126.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="741.7" y="99.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="744.7" y="110.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.05%)</title><rect x="743.0" y="179.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="746.0" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="743.3" y="163.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="746.3" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="743.3" y="147.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="746.3" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="743.3" y="131.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="746.3" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="743.3" y="115.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="746.3" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="743.3" y="99.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="746.3" y="110.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.04%)</title><rect x="743.6" y="179.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="746.6" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="744.0" y="179.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="747.0" y="190.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="744.0" y="163.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="747.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (52 samples, 0.67%)</title><rect x="744.3" y="179.0" width="8.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="747.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (51 samples, 0.66%)</title><rect x="744.5" y="163.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="747.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (51 samples, 0.66%)</title><rect x="744.5" y="147.0" width="7.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="747.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (51 samples, 0.66%)</title><rect x="744.5" y="131.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="747.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (49 samples, 0.64%)</title><rect x="744.7" y="115.0" width="7.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="747.7" y="126.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="745.3" y="99.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="748.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.04%)</title><rect x="745.7" y="99.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="748.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (36 samples, 0.47%)</title><rect x="746.3" y="99.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="749.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="746.6" y="83.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="749.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (32 samples, 0.41%)</title><rect x="746.9" y="83.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="749.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (6 samples, 0.08%)</title><rect x="749.7" y="67.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="752.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.09%)</title><rect x="750.6" y="67.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="753.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.06%)</title><rect x="750.9" y="51.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="753.9" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.04%)</title><rect x="751.2" y="35.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="754.2" y="46.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.03%)</title><rect x="751.8" y="99.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="754.8" y="110.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.03%)</title><rect x="752.5" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="755.5" y="206.0"></text>
</g>
<g>
<title>[worker tid=83459] (568 samples, 7.36%)</title><rect x="752.9" y="403.0" width="86.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="755.9" y="414.0">[worker ti..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="752.9" y="387.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="755.9" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="752.9" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="755.9" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.03%)</title><rect x="752.9" y="355.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="755.9" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="752.9" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="755.9" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="752.9" y="323.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="755.9" y="334.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.04%)</title><rect x="753.2" y="387.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="756.2" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.04%)</title><rect x="753.2" y="371.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="756.2" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (2 samples, 0.03%)</title><rect x="753.4" y="355.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="756.4" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (563 samples, 7.30%)</title><rect x="753.7" y="387.0" width="86.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="756.7" y="398.0">java/lang/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (563 samples, 7.30%)</title><rect x="753.7" y="371.0" width="86.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.7" y="382.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (563 samples, 7.30%)</title><rect x="753.7" y="355.0" width="86.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="756.7" y="366.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (4 samples, 0.05%)</title><rect x="753.8" y="339.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="756.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="754.0" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.0" y="334.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.04%)</title><rect x="754.0" y="307.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="757.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (232 samples, 3.01%)</title><rect x="754.6" y="339.0" width="35.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="757.6" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (231 samples, 2.99%)</title><rect x="754.7" y="323.0" width="35.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.7" y="334.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (7 samples, 0.09%)</title><rect x="754.7" y="307.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="757.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (175 samples, 2.27%)</title><rect x="755.8" y="307.0" width="26.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="758.8" y="318.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.04%)</title><rect x="756.1" y="291.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="756.1" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="759.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="756.1" y="259.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="759.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="756.1" y="243.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="759.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="756.1" y="227.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="759.1" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="756.1" y="211.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="759.1" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="756.1" y="195.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="759.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.06%)</title><rect x="756.6" y="291.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="759.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.06%)</title><rect x="756.6" y="275.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.06%)</title><rect x="756.6" y="259.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.06%)</title><rect x="756.6" y="243.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.6" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.06%)</title><rect x="756.6" y="227.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="759.6" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.05%)</title><rect x="756.7" y="211.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="759.7" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.05%)</title><rect x="756.7" y="195.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="759.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (165 samples, 2.14%)</title><rect x="757.3" y="291.0" width="25.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.3" y="302.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (165 samples, 2.14%)</title><rect x="757.3" y="275.0" width="25.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.3" y="286.0">j..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (154 samples, 2.00%)</title><rect x="759.0" y="259.0" width="23.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="762.0" y="270.0">U..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (5 samples, 0.06%)</title><rect x="759.0" y="243.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="762.0" y="254.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="759.0" y="227.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="762.0" y="238.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (2 samples, 0.03%)</title><rect x="759.5" y="227.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="762.5" y="238.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.03%)</title><rect x="759.8" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="762.8" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (140 samples, 1.82%)</title><rect x="760.3" y="243.0" width="21.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="763.3" y="254.0">P..</text>
</g>
<g>
<title>__psynch_cvwait (133 samples, 1.72%)</title><rect x="760.7" y="227.0" width="20.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="763.7" y="238.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.05%)</title><rect x="781.1" y="227.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="784.1" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="781.8" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="784.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (10 samples, 0.13%)</title><rect x="782.7" y="307.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="785.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.12%)</title><rect x="782.9" y="291.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (9 samples, 0.12%)</title><rect x="782.9" y="275.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="785.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.12%)</title><rect x="782.9" y="259.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="785.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.12%)</title><rect x="782.9" y="243.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.9" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 0.12%)</title><rect x="782.9" y="227.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.9" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.10%)</title><rect x="783.1" y="211.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="786.1" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.09%)</title><rect x="783.1" y="195.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="786.1" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.09%)</title><rect x="783.1" y="179.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="786.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (38 samples, 0.49%)</title><rect x="784.3" y="307.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="787.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (38 samples, 0.49%)</title><rect x="784.3" y="291.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="787.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (38 samples, 0.49%)</title><rect x="784.3" y="275.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (37 samples, 0.48%)</title><rect x="784.4" y="259.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="787.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (37 samples, 0.48%)</title><rect x="784.4" y="243.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="787.4" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (33 samples, 0.43%)</title><rect x="785.0" y="227.0" width="5.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="788.0" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.03%)</title><rect x="785.2" y="211.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="788.2" y="222.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="785.2" y="195.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="788.2" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (24 samples, 0.31%)</title><rect x="785.7" y="211.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="788.7" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="789.6" y="211.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="792.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (324 samples, 4.20%)</title><rect x="790.2" y="339.0" width="49.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="793.2" y="350.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (323 samples, 4.19%)</title><rect x="790.4" y="323.0" width="49.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="793.4" y="334.0">ru/ma..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (184 samples, 2.39%)</title><rect x="790.4" y="307.0" width="28.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.4" y="318.0">on..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.04%)</title><rect x="791.2" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="794.2" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.04%)</title><rect x="791.2" y="275.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="794.2" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.04%)</title><rect x="791.2" y="259.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="794.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.05%)</title><rect x="791.6" y="291.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="794.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.05%)</title><rect x="791.6" y="275.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="794.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.05%)</title><rect x="791.6" y="259.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="794.6" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (171 samples, 2.22%)</title><rect x="792.4" y="291.0" width="26.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="795.4" y="302.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.05%)</title><rect x="792.4" y="275.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.4" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.04%)</title><rect x="792.5" y="259.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="795.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="792.7" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.7" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="792.7" y="227.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="795.7" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="792.7" y="211.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.7" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (167 samples, 2.17%)</title><rect x="793.0" y="275.0" width="25.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="796.0" y="286.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (167 samples, 2.17%)</title><rect x="793.0" y="259.0" width="25.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="796.0" y="270.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (166 samples, 2.15%)</title><rect x="793.1" y="243.0" width="25.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.1" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (165 samples, 2.14%)</title><rect x="793.3" y="227.0" width="25.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.3" y="238.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="793.3" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="793.3" y="195.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.3" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="793.3" y="179.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (163 samples, 2.11%)</title><rect x="793.6" y="211.0" width="24.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="796.6" y="222.0">s..</text>
</g>
<g>
<title>java/util/Objects.requireNonNull (4 samples, 0.05%)</title><rect x="793.8" y="195.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.8" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.05%)</title><rect x="793.8" y="179.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="796.8" y="190.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.03%)</title><rect x="793.9" y="163.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="796.9" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.05%)</title><rect x="794.4" y="195.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="797.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.05%)</title><rect x="794.4" y="179.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="797.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.05%)</title><rect x="794.4" y="163.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="797.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (3 samples, 0.04%)</title><rect x="794.5" y="147.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="797.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (154 samples, 2.00%)</title><rect x="795.0" y="195.0" width="23.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="798.0" y="206.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (154 samples, 2.00%)</title><rect x="795.0" y="179.0" width="23.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="798.0" y="190.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (146 samples, 1.89%)</title><rect x="795.0" y="163.0" width="22.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="798.0" y="174.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (146 samples, 1.89%)</title><rect x="795.0" y="147.0" width="22.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="798.0" y="158.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (146 samples, 1.89%)</title><rect x="795.0" y="131.0" width="22.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="798.0" y="142.0">s..</text>
</g>
<g>
<title>write (140 samples, 1.82%)</title><rect x="795.9" y="115.0" width="21.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="798.9" y="126.0">w..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.10%)</title><rect x="817.3" y="163.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="820.3" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.04%)</title><rect x="817.3" y="147.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="820.3" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.03%)</title><rect x="817.5" y="131.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="820.5" y="142.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="817.5" y="115.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="820.5" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.05%)</title><rect x="817.9" y="147.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="820.9" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (2 samples, 0.03%)</title><rect x="818.2" y="131.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="821.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$133/744045698.act (139 samples, 1.80%)</title><rect x="818.5" y="307.0" width="21.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="821.5" y="318.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$0 (139 samples, 1.80%)</title><rect x="818.5" y="291.0" width="21.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="821.5" y="302.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (139 samples, 1.80%)</title><rect x="818.5" y="275.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.5" y="286.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (138 samples, 1.79%)</title><rect x="818.7" y="259.0" width="21.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="821.7" y="270.0">r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (135 samples, 1.75%)</title><rect x="818.7" y="243.0" width="20.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="821.7" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (135 samples, 1.75%)</title><rect x="818.7" y="227.0" width="20.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="821.7" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (134 samples, 1.74%)</title><rect x="818.7" y="211.0" width="20.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="821.7" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (126 samples, 1.63%)</title><rect x="819.9" y="195.0" width="19.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="822.9" y="206.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (32 samples, 0.41%)</title><rect x="820.7" y="179.0" width="4.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="823.7" y="190.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.03%)</title><rect x="820.8" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="823.8" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="821.1" y="163.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="824.1" y="174.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.05%)</title><rect x="821.6" y="163.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="824.6" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.05%)</title><rect x="821.6" y="147.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="824.6" y="158.0"></text>
</g>
<g>
<title>jni_NewByteArray (18 samples, 0.23%)</title><rect x="822.2" y="163.0" width="2.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="825.2" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="822.7" y="147.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="825.7" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="823.1" y="147.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="826.1" y="158.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.10%)</title><rect x="823.6" y="147.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="826.6" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.08%)</title><rect x="823.9" y="131.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="826.9" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.08%)</title><rect x="823.9" y="115.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="826.9" y="126.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="824.4" y="99.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="827.4" y="110.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.04%)</title><rect x="825.0" y="163.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="828.0" y="174.0"></text>
</g>
<g>
<title>free (4 samples, 0.05%)</title><rect x="825.7" y="179.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="828.7" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.08%)</title><rect x="826.3" y="179.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="829.3" y="190.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="826.5" y="163.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="829.5" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="826.8" y="163.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="829.8" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="827.0" y="147.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="830.0" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="827.0" y="131.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="830.0" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="827.0" y="115.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="830.0" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="827.0" y="99.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="830.0" y="110.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.10%)</title><rect x="827.3" y="179.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="830.3" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="827.6" y="163.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="830.6" y="174.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="828.8" y="179.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="831.8" y="190.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="828.8" y="163.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="831.8" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.04%)</title><rect x="828.8" y="147.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="831.8" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="828.9" y="131.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="831.9" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="828.9" y="115.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="831.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (62 samples, 0.80%)</title><rect x="829.3" y="179.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="832.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (61 samples, 0.79%)</title><rect x="829.4" y="163.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="832.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (59 samples, 0.76%)</title><rect x="829.7" y="147.0" width="9.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="832.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (59 samples, 0.76%)</title><rect x="829.7" y="131.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="832.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (51 samples, 0.66%)</title><rect x="830.3" y="115.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="833.3" y="126.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="830.9" y="99.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="833.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.03%)</title><rect x="831.4" y="99.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="834.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="831.7" y="99.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="834.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.03%)</title><rect x="831.7" y="83.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="834.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (36 samples, 0.47%)</title><rect x="832.2" y="99.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="835.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="832.5" y="83.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="835.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (32 samples, 0.41%)</title><rect x="832.8" y="83.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="835.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.12%)</title><rect x="836.0" y="67.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="836.9" y="51.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="839.9" y="62.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="837.4" y="67.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="840.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.03%)</title><rect x="837.8" y="99.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="840.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.04%)</title><rect x="838.1" y="115.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="841.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (3 samples, 0.04%)</title><rect x="839.4" y="243.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="842.4" y="254.0"></text>
</g>
<g>
<title>[worker tid=83971] (559 samples, 7.25%)</title><rect x="839.8" y="403.0" width="85.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="842.8" y="414.0">[worker ti..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.04%)</title><rect x="839.8" y="387.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="842.8" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="840.0" y="371.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="843.0" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (2 samples, 0.03%)</title><rect x="840.0" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="843.0" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="840.0" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="843.0" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="840.0" y="323.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="843.0" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.run (555 samples, 7.20%)</title><rect x="840.4" y="387.0" width="84.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="843.4" y="398.0">java/lang/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (555 samples, 7.20%)</title><rect x="840.4" y="371.0" width="84.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="843.4" y="382.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (555 samples, 7.20%)</title><rect x="840.4" y="355.0" width="84.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="843.4" y="366.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.03%)</title><rect x="840.4" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="843.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.04%)</title><rect x="840.7" y="339.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="843.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.04%)</title><rect x="840.7" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="843.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (256 samples, 3.32%)</title><rect x="841.2" y="339.0" width="39.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="844.2" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (256 samples, 3.32%)</title><rect x="841.2" y="323.0" width="39.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="844.2" y="334.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (210 samples, 2.72%)</title><rect x="841.8" y="307.0" width="32.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="844.8" y="318.0">ja..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.03%)</title><rect x="841.8" y="291.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="844.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.05%)</title><rect x="842.1" y="291.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="845.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.04%)</title><rect x="842.1" y="275.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="845.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.04%)</title><rect x="842.1" y="259.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="845.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.04%)</title><rect x="842.1" y="243.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.04%)</title><rect x="842.1" y="227.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="845.1" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.04%)</title><rect x="842.1" y="211.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="845.1" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="842.3" y="195.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="845.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.12%)</title><rect x="842.7" y="291.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="845.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.12%)</title><rect x="842.7" y="275.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="845.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.12%)</title><rect x="842.7" y="259.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="845.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.12%)</title><rect x="842.7" y="243.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.12%)</title><rect x="842.7" y="227.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="845.7" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.10%)</title><rect x="842.9" y="211.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="845.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.08%)</title><rect x="842.9" y="195.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="845.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (195 samples, 2.53%)</title><rect x="844.1" y="291.0" width="29.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="847.1" y="302.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (195 samples, 2.53%)</title><rect x="844.1" y="275.0" width="29.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="847.1" y="286.0">jd..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (182 samples, 2.36%)</title><rect x="846.1" y="259.0" width="27.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="849.1" y="270.0">U..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="846.2" y="243.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="849.2" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (174 samples, 2.26%)</title><rect x="847.2" y="243.0" width="26.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="850.2" y="254.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.03%)</title><rect x="847.3" y="227.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="850.3" y="238.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="847.3" y="211.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="850.3" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (168 samples, 2.18%)</title><rect x="847.8" y="227.0" width="25.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="850.8" y="238.0">_..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.03%)</title><rect x="873.9" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="876.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.03%)</title><rect x="873.9" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="876.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.12%)</title><rect x="874.2" y="307.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="877.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.12%)</title><rect x="874.2" y="291.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="877.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (8 samples, 0.10%)</title><rect x="874.2" y="275.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="877.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.10%)</title><rect x="874.2" y="259.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="877.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.10%)</title><rect x="874.2" y="243.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="877.2" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.10%)</title><rect x="874.2" y="227.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="877.2" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.10%)</title><rect x="874.2" y="211.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="877.2" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.10%)</title><rect x="874.2" y="195.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="877.2" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.10%)</title><rect x="874.2" y="179.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="877.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (31 samples, 0.40%)</title><rect x="875.6" y="307.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="878.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (31 samples, 0.40%)</title><rect x="875.6" y="291.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="878.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (31 samples, 0.40%)</title><rect x="875.6" y="275.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="878.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (30 samples, 0.39%)</title><rect x="875.8" y="259.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="878.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (30 samples, 0.39%)</title><rect x="875.8" y="243.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="878.8" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (29 samples, 0.38%)</title><rect x="875.9" y="227.0" width="4.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="878.9" y="238.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="876.1" y="211.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="879.1" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="876.1" y="195.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="879.1" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="876.5" y="211.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="879.5" y="222.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.03%)</title><rect x="876.5" y="195.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.5" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (20 samples, 0.26%)</title><rect x="876.8" y="211.0" width="3.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="879.8" y="222.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="879.9" y="211.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="882.9" y="222.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.03%)</title><rect x="879.9" y="195.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="882.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (294 samples, 3.81%)</title><rect x="880.4" y="339.0" width="44.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="883.4" y="350.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (294 samples, 3.81%)</title><rect x="880.4" y="323.0" width="44.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="883.4" y="334.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (164 samples, 2.13%)</title><rect x="880.4" y="307.0" width="25.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="883.4" y="318.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.04%)</title><rect x="880.8" y="291.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="883.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.04%)</title><rect x="880.8" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="883.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.04%)</title><rect x="880.8" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="883.8" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (157 samples, 2.04%)</title><rect x="881.3" y="291.0" width="24.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="884.3" y="302.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.17%)</title><rect x="881.3" y="275.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="884.3" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="881.4" y="259.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="884.4" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.03%)</title><rect x="881.7" y="259.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="884.7" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="881.7" y="243.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="884.7" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="881.7" y="227.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="884.7" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="881.7" y="211.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="884.7" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="881.7" y="195.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="884.7" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.10%)</title><rect x="882.0" y="259.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="885.0" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.04%)</title><rect x="882.0" y="243.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="885.0" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.03%)</title><rect x="882.5" y="243.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="885.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="882.8" y="243.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="885.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="883.0" y="227.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.0" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="883.0" y="211.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="886.0" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (144 samples, 1.87%)</title><rect x="883.3" y="275.0" width="22.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.3" y="286.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (142 samples, 1.84%)</title><rect x="883.6" y="259.0" width="21.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="886.6" y="270.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (141 samples, 1.83%)</title><rect x="883.7" y="243.0" width="21.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="886.7" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (140 samples, 1.82%)</title><rect x="883.9" y="227.0" width="21.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="886.9" y="238.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="883.9" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="886.9" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="883.9" y="195.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="886.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="883.9" y="179.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="886.9" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="883.9" y="163.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="886.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="884.0" y="147.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="887.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="884.0" y="131.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="887.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (137 samples, 1.78%)</title><rect x="884.3" y="211.0" width="21.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="887.3" y="222.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (2 samples, 0.03%)</title><rect x="884.3" y="195.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="887.3" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="884.3" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="887.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.05%)</title><rect x="884.6" y="195.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="887.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.05%)</title><rect x="884.6" y="179.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="887.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.05%)</title><rect x="884.6" y="163.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="887.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (3 samples, 0.04%)</title><rect x="884.8" y="147.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="887.8" y="158.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.03%)</title><rect x="884.8" y="131.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="887.8" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (131 samples, 1.70%)</title><rect x="885.2" y="195.0" width="20.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="888.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (131 samples, 1.70%)</title><rect x="885.2" y="179.0" width="20.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="888.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (125 samples, 1.62%)</title><rect x="885.6" y="163.0" width="19.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="888.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (125 samples, 1.62%)</title><rect x="885.6" y="147.0" width="19.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="888.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (125 samples, 1.62%)</title><rect x="885.6" y="131.0" width="19.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="888.6" y="142.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.03%)</title><rect x="886.3" y="115.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="889.3" y="126.0"></text>
</g>
<g>
<title>write (118 samples, 1.53%)</title><rect x="886.6" y="115.0" width="18.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="889.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.05%)</title><rect x="904.7" y="163.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="907.7" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.03%)</title><rect x="904.8" y="147.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="907.8" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.03%)</title><rect x="904.8" y="131.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="907.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$133/744045698.act (130 samples, 1.69%)</title><rect x="905.4" y="307.0" width="19.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="908.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$0 (130 samples, 1.69%)</title><rect x="905.4" y="291.0" width="19.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="908.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (130 samples, 1.69%)</title><rect x="905.4" y="275.0" width="19.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="908.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (128 samples, 1.66%)</title><rect x="905.7" y="259.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="908.7" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (125 samples, 1.62%)</title><rect x="905.9" y="243.0" width="19.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="908.9" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (125 samples, 1.62%)</title><rect x="905.9" y="227.0" width="19.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="908.9" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (125 samples, 1.62%)</title><rect x="905.9" y="211.0" width="19.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="908.9" y="222.0"></text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="906.1" y="195.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="909.1" y="206.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (120 samples, 1.56%)</title><rect x="906.7" y="195.0" width="18.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="909.7" y="206.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (27 samples, 0.35%)</title><rect x="907.0" y="179.0" width="4.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="910.0" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="907.0" y="163.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="910.0" y="174.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.06%)</title><rect x="907.7" y="163.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="910.7" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.06%)</title><rect x="907.7" y="147.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="910.7" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.04%)</title><rect x="908.0" y="131.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="911.0" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="908.2" y="115.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="911.2" y="126.0"></text>
</g>
<g>
<title>jni_NewByteArray (15 samples, 0.19%)</title><rect x="908.5" y="163.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="911.5" y="174.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (2 samples, 0.03%)</title><rect x="908.5" y="147.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="911.5" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="908.8" y="147.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="911.8" y="158.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (11 samples, 0.14%)</title><rect x="909.1" y="147.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="912.1" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (9 samples, 0.12%)</title><rect x="909.4" y="131.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.4" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.08%)</title><rect x="909.4" y="115.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="912.4" y="126.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (3 samples, 0.04%)</title><rect x="909.4" y="99.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.4" y="110.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="910.8" y="163.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="913.8" y="174.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="911.6" y="179.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="914.6" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="912.0" y="179.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="915.0" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="912.3" y="179.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="915.3" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.06%)</title><rect x="912.8" y="179.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="915.8" y="190.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.05%)</title><rect x="912.8" y="163.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="915.8" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.05%)</title><rect x="912.8" y="147.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="915.8" y="158.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.04%)</title><rect x="912.9" y="131.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="915.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (71 samples, 0.92%)</title><rect x="913.5" y="179.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="916.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (67 samples, 0.87%)</title><rect x="914.0" y="163.0" width="10.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="917.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (66 samples, 0.86%)</title><rect x="914.2" y="147.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="917.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (66 samples, 0.86%)</title><rect x="914.2" y="131.0" width="10.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="917.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (61 samples, 0.79%)</title><rect x="914.6" y="115.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.6" y="126.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="915.1" y="99.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="918.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (5 samples, 0.06%)</title><rect x="915.5" y="99.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="918.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.04%)</title><rect x="915.8" y="83.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="918.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (2 samples, 0.03%)</title><rect x="916.5" y="99.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="919.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (44 samples, 0.57%)</title><rect x="916.9" y="99.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="919.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (38 samples, 0.49%)</title><rect x="917.8" y="83.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="920.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (5 samples, 0.06%)</title><rect x="920.0" y="67.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="923.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (14 samples, 0.18%)</title><rect x="920.7" y="67.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="923.7" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.05%)</title><rect x="921.8" y="51.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="924.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="922.4" y="51.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="925.4" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="922.6" y="35.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="925.6" y="46.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="922.9" y="67.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="925.9" y="78.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="923.3" y="67.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="926.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="924.0" y="115.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="927.0" y="126.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.04%)</title><rect x="924.6" y="179.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="927.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.03%)</title><rect x="925.0" y="243.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="928.0" y="254.0"></text>
</g>
<g>
<title>[worker tid=84483] (577 samples, 7.48%)</title><rect x="925.3" y="403.0" width="88.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="928.3" y="414.0">[worker ti..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.08%)</title><rect x="925.3" y="387.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="928.3" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.08%)</title><rect x="925.3" y="371.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="928.3" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (6 samples, 0.08%)</title><rect x="925.3" y="355.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="928.3" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.05%)</title><rect x="925.6" y="339.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="928.6" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.05%)</title><rect x="925.6" y="323.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="928.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.run (569 samples, 7.38%)</title><rect x="926.6" y="387.0" width="87.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="929.6" y="398.0">java/lang/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (569 samples, 7.38%)</title><rect x="926.6" y="371.0" width="87.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="929.6" y="382.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (569 samples, 7.38%)</title><rect x="926.6" y="355.0" width="87.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="929.6" y="366.0">java/util/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.03%)</title><rect x="926.6" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="929.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (4 samples, 0.05%)</title><rect x="926.9" y="339.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="929.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.05%)</title><rect x="926.9" y="323.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="929.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3 samples, 0.04%)</title><rect x="926.9" y="307.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="929.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (268 samples, 3.47%)</title><rect x="927.5" y="339.0" width="41.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="930.5" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (265 samples, 3.44%)</title><rect x="927.9" y="323.0" width="40.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="930.9" y="334.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (4 samples, 0.05%)</title><rect x="928.4" y="307.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="931.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (204 samples, 2.64%)</title><rect x="929.0" y="307.0" width="31.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="932.0" y="318.0">ja..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.05%)</title><rect x="929.2" y="291.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="932.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (17 samples, 0.22%)</title><rect x="930.1" y="291.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="933.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 0.22%)</title><rect x="930.1" y="275.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="933.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 0.22%)</title><rect x="930.1" y="259.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="933.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 0.22%)</title><rect x="930.1" y="243.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="933.1" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (17 samples, 0.22%)</title><rect x="930.1" y="227.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="933.1" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (15 samples, 0.19%)</title><rect x="930.4" y="211.0" width="2.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="933.4" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.14%)</title><rect x="930.8" y="195.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="933.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (179 samples, 2.32%)</title><rect x="932.8" y="291.0" width="27.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="935.8" y="302.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (179 samples, 2.32%)</title><rect x="932.8" y="275.0" width="27.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="935.8" y="286.0">j..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (165 samples, 2.14%)</title><rect x="935.0" y="259.0" width="25.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="938.0" y="270.0">U..</text>
</g>
<g>
<title>Parker::park(bool, long) (159 samples, 2.06%)</title><rect x="935.4" y="243.0" width="24.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.4" y="254.0">P..</text>
</g>
<g>
<title>__psynch_cvwait (148 samples, 1.92%)</title><rect x="935.9" y="227.0" width="22.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="938.9" y="238.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.10%)</title><rect x="958.5" y="227.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="961.5" y="238.0"></text>
</g>
<g>
<title>_pthread_testcancel (6 samples, 0.08%)</title><rect x="958.8" y="211.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="961.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (14 samples, 0.18%)</title><rect x="960.2" y="307.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="963.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (13 samples, 0.17%)</title><rect x="960.4" y="291.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="963.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (13 samples, 0.17%)</title><rect x="960.4" y="275.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="963.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (13 samples, 0.17%)</title><rect x="960.4" y="259.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="963.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 0.17%)</title><rect x="960.4" y="243.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="963.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 0.17%)</title><rect x="960.4" y="227.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="963.4" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (13 samples, 0.17%)</title><rect x="960.4" y="211.0" width="2.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="963.4" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (13 samples, 0.17%)</title><rect x="960.4" y="195.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="963.4" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.16%)</title><rect x="960.4" y="179.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="963.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (40 samples, 0.52%)</title><rect x="962.4" y="307.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="965.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (40 samples, 0.52%)</title><rect x="962.4" y="291.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="965.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (38 samples, 0.49%)</title><rect x="962.7" y="275.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="965.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (38 samples, 0.49%)</title><rect x="962.7" y="259.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="965.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (38 samples, 0.49%)</title><rect x="962.7" y="243.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="965.7" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (35 samples, 0.45%)</title><rect x="963.0" y="227.0" width="5.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="966.0" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.04%)</title><rect x="963.1" y="211.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="966.1" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (30 samples, 0.39%)</title><rect x="963.6" y="211.0" width="4.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="966.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (295 samples, 3.82%)</title><rect x="968.5" y="339.0" width="45.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="971.5" y="350.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (295 samples, 3.82%)</title><rect x="968.5" y="323.0" width="45.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="971.5" y="334.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (161 samples, 2.09%)</title><rect x="968.5" y="307.0" width="24.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="971.5" y="318.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (152 samples, 1.97%)</title><rect x="969.4" y="291.0" width="23.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="972.4" y="302.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.13%)</title><rect x="969.4" y="275.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="972.4" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 0.12%)</title><rect x="969.5" y="259.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="972.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.03%)</title><rect x="969.5" y="243.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="972.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.04%)</title><rect x="969.8" y="243.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="972.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.05%)</title><rect x="970.3" y="243.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="973.3" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.05%)</title><rect x="970.3" y="227.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="973.3" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.05%)</title><rect x="970.3" y="211.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="973.3" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (142 samples, 1.84%)</title><rect x="970.9" y="275.0" width="21.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="973.9" y="286.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (142 samples, 1.84%)</title><rect x="970.9" y="259.0" width="21.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="973.9" y="270.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (141 samples, 1.83%)</title><rect x="971.1" y="243.0" width="21.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="974.1" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (141 samples, 1.83%)</title><rect x="971.1" y="227.0" width="21.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="974.1" y="238.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="971.1" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="974.1" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="971.1" y="195.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="974.1" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="971.1" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="974.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (139 samples, 1.80%)</title><rect x="971.4" y="211.0" width="21.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="974.4" y="222.0">s..</text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.04%)</title><rect x="971.5" y="195.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="974.5" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="971.7" y="179.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="974.7" y="190.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="971.7" y="163.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="974.7" y="174.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.03%)</title><rect x="971.7" y="147.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="974.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="972.0" y="195.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="975.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="972.0" y="179.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="975.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="972.0" y="163.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="975.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (2 samples, 0.03%)</title><rect x="972.0" y="147.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="975.0" y="158.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="972.0" y="131.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.0" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="972.0" y="115.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="975.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (133 samples, 1.72%)</title><rect x="972.3" y="195.0" width="20.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="975.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (133 samples, 1.72%)</title><rect x="972.3" y="179.0" width="20.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="975.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (126 samples, 1.63%)</title><rect x="972.3" y="163.0" width="19.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="975.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (126 samples, 1.63%)</title><rect x="972.3" y="147.0" width="19.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="975.3" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (126 samples, 1.63%)</title><rect x="972.3" y="131.0" width="19.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="975.3" y="142.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="972.8" y="115.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="975.8" y="126.0"></text>
</g>
<g>
<title>write (121 samples, 1.57%)</title><rect x="973.1" y="115.0" width="18.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="976.1" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.09%)</title><rect x="991.6" y="163.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="994.6" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.05%)</title><rect x="991.7" y="147.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="994.7" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.03%)</title><rect x="992.0" y="131.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="995.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.03%)</title><rect x="992.3" y="147.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="995.3" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="992.6" y="291.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="995.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="992.6" y="275.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="995.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="992.6" y="259.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="995.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$133/744045698.act (134 samples, 1.74%)</title><rect x="993.1" y="307.0" width="20.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="996.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$0 (133 samples, 1.72%)</title><rect x="993.3" y="291.0" width="20.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="996.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (133 samples, 1.72%)</title><rect x="993.3" y="275.0" width="20.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="996.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.04%)</title><rect x="993.3" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="996.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.04%)</title><rect x="993.3" y="243.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="996.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="993.4" y="227.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="996.4" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="993.4" y="211.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="996.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (130 samples, 1.69%)</title><rect x="993.7" y="259.0" width="19.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="996.7" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (125 samples, 1.62%)</title><rect x="993.7" y="243.0" width="19.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="996.7" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (125 samples, 1.62%)</title><rect x="993.7" y="227.0" width="19.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="996.7" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (122 samples, 1.58%)</title><rect x="994.0" y="211.0" width="18.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="997.0" y="222.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.03%)</title><rect x="994.5" y="195.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="997.5" y="206.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (117 samples, 1.52%)</title><rect x="994.8" y="195.0" width="17.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.8" y="206.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="994.9" y="179.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="997.9" y="190.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (23 samples, 0.30%)</title><rect x="995.2" y="179.0" width="3.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="998.2" y="190.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.03%)</title><rect x="995.2" y="163.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.2" y="174.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.04%)</title><rect x="995.6" y="163.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="998.6" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="995.6" y="147.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.6" y="158.0"></text>
</g>
<g>
<title>jni_NewByteArray (14 samples, 0.18%)</title><rect x="996.0" y="163.0" width="2.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="999.0" y="174.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.03%)</title><rect x="996.2" y="147.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="999.2" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="996.5" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="999.5" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="996.5" y="131.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.5" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="996.5" y="115.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="999.5" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="996.5" y="99.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="999.5" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="996.5" y="83.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.5" y="94.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.12%)</title><rect x="996.8" y="147.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="999.8" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 0.10%)</title><rect x="996.9" y="131.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.9" y="142.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.03%)</title><rect x="996.9" y="115.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.9" y="126.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.06%)</title><rect x="997.2" y="115.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.2" y="126.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.05%)</title><rect x="998.2" y="163.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1001.2" y="174.0"></text>
</g>
<g>
<title>free (3 samples, 0.04%)</title><rect x="998.9" y="179.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1001.9" y="190.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.04%)</title><rect x="998.9" y="163.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1001.9" y="174.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.04%)</title><rect x="998.9" y="147.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1001.9" y="158.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.05%)</title><rect x="999.5" y="179.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1002.5" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="999.8" y="163.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1002.8" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.05%)</title><rect x="1000.1" y="179.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1003.1" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="1000.4" y="163.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1003.4" y="174.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.05%)</title><rect x="1000.8" y="179.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1003.8" y="190.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.05%)</title><rect x="1000.8" y="163.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1003.8" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.04%)</title><rect x="1000.9" y="147.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1003.9" y="158.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.03%)</title><rect x="1000.9" y="131.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1003.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (71 samples, 0.92%)</title><rect x="1001.4" y="179.0" width="10.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (70 samples, 0.91%)</title><rect x="1001.5" y="163.0" width="10.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1004.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (69 samples, 0.89%)</title><rect x="1001.7" y="147.0" width="10.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (68 samples, 0.88%)</title><rect x="1001.8" y="131.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1004.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (66 samples, 0.86%)</title><rect x="1001.8" y="115.0" width="10.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (5 samples, 0.06%)</title><rect x="1002.7" y="99.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1005.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.04%)</title><rect x="1003.0" y="83.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1006.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="1003.5" y="99.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1006.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (48 samples, 0.62%)</title><rect x="1004.0" y="99.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1007.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="1004.3" y="83.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (42 samples, 0.54%)</title><rect x="1004.7" y="83.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (7 samples, 0.09%)</title><rect x="1007.9" y="67.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1010.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="1008.4" y="51.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.4" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="1008.6" y="35.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1011.6" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.12%)</title><rect x="1009.0" y="67.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.0" y="78.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.03%)</title><rect x="1009.5" y="51.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1012.5" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="1009.8" y="51.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1012.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="1010.1" y="51.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="1010.4" y="67.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.4" y="78.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="1010.9" y="67.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.9" y="78.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.04%)</title><rect x="1012.2" y="179.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1015.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (5 samples, 0.06%)</title><rect x="1012.8" y="243.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1015.8" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.06%)</title><rect x="1012.8" y="227.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1015.8" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="1012.8" y="211.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1015.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="1012.8" y="195.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1015.8" y="206.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2 samples, 0.03%)</title><rect x="1013.3" y="179.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1016.3" y="190.0"></text>
</g>
<g>
<title>[worker tid=86019] (549 samples, 7.12%)</title><rect x="1013.6" y="403.0" width="84.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1016.6" y="414.0">[worker t..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.06%)</title><rect x="1013.6" y="387.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.05%)</title><rect x="1013.8" y="371.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1016.8" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.05%)</title><rect x="1013.8" y="355.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1016.8" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.05%)</title><rect x="1013.8" y="339.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1016.8" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.05%)</title><rect x="1013.8" y="323.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1016.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.run (543 samples, 7.04%)</title><rect x="1014.5" y="387.0" width="83.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1017.5" y="398.0">java/lang..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (543 samples, 7.04%)</title><rect x="1014.5" y="371.0" width="83.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1017.5" y="382.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (543 samples, 7.04%)</title><rect x="1014.5" y="355.0" width="83.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1017.5" y="366.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (282 samples, 3.66%)</title><rect x="1014.7" y="339.0" width="43.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1017.7" y="350.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (281 samples, 3.64%)</title><rect x="1014.8" y="323.0" width="43.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1017.8" y="334.0">java..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.03%)</title><rect x="1015.1" y="307.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (225 samples, 2.92%)</title><rect x="1015.4" y="307.0" width="34.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1018.4" y="318.0">ja..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.03%)</title><rect x="1015.7" y="291.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1018.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.06%)</title><rect x="1016.2" y="291.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1019.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.05%)</title><rect x="1016.4" y="275.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1019.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.05%)</title><rect x="1016.4" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1019.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.05%)</title><rect x="1016.4" y="243.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1019.4" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.05%)</title><rect x="1016.4" y="227.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1019.4" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.04%)</title><rect x="1016.4" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1019.4" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="1016.4" y="195.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1019.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.16%)</title><rect x="1017.0" y="291.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.16%)</title><rect x="1017.0" y="275.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1020.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.16%)</title><rect x="1017.0" y="259.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1020.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.16%)</title><rect x="1017.0" y="243.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1020.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 0.16%)</title><rect x="1017.0" y="227.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1020.0" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (12 samples, 0.16%)</title><rect x="1017.0" y="211.0" width="1.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1020.0" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.12%)</title><rect x="1017.3" y="195.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1020.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (202 samples, 2.62%)</title><rect x="1019.0" y="291.0" width="30.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1022.0" y="302.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (202 samples, 2.62%)</title><rect x="1019.0" y="275.0" width="30.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1022.0" y="286.0">jd..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (188 samples, 2.44%)</title><rect x="1020.9" y="259.0" width="28.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1023.9" y="270.0">Un..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title><rect x="1020.9" y="243.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1023.9" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.03%)</title><rect x="1020.9" y="227.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1023.9" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (182 samples, 2.36%)</title><rect x="1021.7" y="243.0" width="27.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1024.7" y="254.0">P..</text>
</g>
<g>
<title>__psynch_cvwait (172 samples, 2.23%)</title><rect x="1022.2" y="227.0" width="26.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1025.2" y="238.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.04%)</title><rect x="1048.5" y="227.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1051.5" y="238.0"></text>
</g>
<g>
<title>_pthread_testcancel (2 samples, 0.03%)</title><rect x="1048.6" y="211.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1051.6" y="222.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np.cold.3 (2 samples, 0.03%)</title><rect x="1048.9" y="227.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1051.9" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="1049.3" y="227.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1052.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (12 samples, 0.16%)</title><rect x="1049.9" y="307.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1052.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 0.14%)</title><rect x="1050.0" y="291.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1053.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (10 samples, 0.13%)</title><rect x="1050.2" y="275.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1053.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (10 samples, 0.13%)</title><rect x="1050.2" y="259.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1053.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 0.13%)</title><rect x="1050.2" y="243.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1053.2" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 0.12%)</title><rect x="1050.3" y="227.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1053.3" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.10%)</title><rect x="1050.5" y="211.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1053.5" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.09%)</title><rect x="1050.6" y="195.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.6" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.08%)</title><rect x="1050.6" y="179.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1053.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (40 samples, 0.52%)</title><rect x="1051.7" y="307.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1054.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (40 samples, 0.52%)</title><rect x="1051.7" y="291.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1054.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (40 samples, 0.52%)</title><rect x="1051.7" y="275.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1054.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (40 samples, 0.52%)</title><rect x="1051.7" y="259.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1054.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (40 samples, 0.52%)</title><rect x="1051.7" y="243.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1054.7" y="254.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="1051.9" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.9" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (35 samples, 0.45%)</title><rect x="1052.2" y="227.0" width="5.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1055.2" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (26 samples, 0.34%)</title><rect x="1053.1" y="211.0" width="4.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1056.1" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="1057.2" y="211.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1060.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (259 samples, 3.36%)</title><rect x="1058.0" y="339.0" width="39.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1061.0" y="350.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (259 samples, 3.36%)</title><rect x="1058.0" y="323.0" width="39.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1061.0" y="334.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (146 samples, 1.89%)</title><rect x="1058.1" y="307.0" width="22.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1061.1" y="318.0">o..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="1058.3" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.3" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.03%)</title><rect x="1058.3" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.06%)</title><rect x="1058.6" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1061.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.06%)</title><rect x="1058.6" y="275.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1061.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.06%)</title><rect x="1058.6" y="259.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1061.6" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (138 samples, 1.79%)</title><rect x="1059.3" y="291.0" width="21.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1062.3" y="302.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.09%)</title><rect x="1059.3" y="275.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1062.3" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.06%)</title><rect x="1059.7" y="259.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1062.7" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.05%)</title><rect x="1059.7" y="243.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1062.7" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (131 samples, 1.70%)</title><rect x="1060.4" y="275.0" width="20.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1063.4" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (130 samples, 1.69%)</title><rect x="1060.6" y="259.0" width="19.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1063.6" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (130 samples, 1.69%)</title><rect x="1060.6" y="243.0" width="19.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1063.6" y="254.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (130 samples, 1.69%)</title><rect x="1060.6" y="227.0" width="19.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1063.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (129 samples, 1.67%)</title><rect x="1060.7" y="211.0" width="19.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1063.7" y="222.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.04%)</title><rect x="1060.7" y="195.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1063.7" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="1060.7" y="179.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1063.7" y="190.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="1060.9" y="163.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1063.9" y="174.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.03%)</title><rect x="1060.9" y="147.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1063.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="1061.2" y="195.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1064.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="1061.2" y="179.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1064.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.04%)</title><rect x="1061.2" y="163.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1064.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (2 samples, 0.03%)</title><rect x="1061.3" y="147.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1064.3" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (123 samples, 1.59%)</title><rect x="1061.6" y="195.0" width="18.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1064.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (123 samples, 1.59%)</title><rect x="1061.6" y="179.0" width="18.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1064.6" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.04%)</title><rect x="1061.6" y="163.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1064.6" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.04%)</title><rect x="1061.6" y="147.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.6" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.04%)</title><rect x="1061.6" y="131.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1064.6" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.04%)</title><rect x="1061.6" y="115.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1064.6" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (2 samples, 0.03%)</title><rect x="1061.8" y="99.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1064.8" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (114 samples, 1.48%)</title><rect x="1062.1" y="163.0" width="17.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1065.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (114 samples, 1.48%)</title><rect x="1062.1" y="147.0" width="17.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1065.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (114 samples, 1.48%)</title><rect x="1062.1" y="131.0" width="17.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1065.1" y="142.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.03%)</title><rect x="1062.4" y="115.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1065.4" y="126.0"></text>
</g>
<g>
<title>write (109 samples, 1.41%)</title><rect x="1062.9" y="115.0" width="16.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1065.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.08%)</title><rect x="1079.5" y="163.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1082.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.06%)</title><rect x="1079.7" y="147.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1082.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (2 samples, 0.03%)</title><rect x="1080.2" y="131.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1083.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$133/744045698.act (112 samples, 1.45%)</title><rect x="1080.5" y="307.0" width="17.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1083.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$0 (112 samples, 1.45%)</title><rect x="1080.5" y="291.0" width="17.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1083.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (112 samples, 1.45%)</title><rect x="1080.5" y="275.0" width="17.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1083.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.03%)</title><rect x="1080.5" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1083.5" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="1080.5" y="243.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1083.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (109 samples, 1.41%)</title><rect x="1080.9" y="259.0" width="16.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1083.9" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (107 samples, 1.39%)</title><rect x="1080.9" y="243.0" width="16.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1083.9" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (107 samples, 1.39%)</title><rect x="1080.9" y="227.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1083.9" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (106 samples, 1.37%)</title><rect x="1081.1" y="211.0" width="16.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1084.1" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (100 samples, 1.30%)</title><rect x="1081.8" y="195.0" width="15.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.8" y="206.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (15 samples, 0.19%)</title><rect x="1082.0" y="179.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1085.0" y="190.0"></text>
</g>
<g>
<title>jni_NewByteArray (12 samples, 0.16%)</title><rect x="1082.0" y="163.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1085.0" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1082.0" y="147.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.0" y="158.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.10%)</title><rect x="1082.6" y="147.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.6" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.09%)</title><rect x="1082.8" y="131.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.8" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.08%)</title><rect x="1082.8" y="115.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.8" y="126.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="1083.1" y="99.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1086.1" y="110.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1083.1" y="83.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1086.1" y="94.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.03%)</title><rect x="1083.4" y="99.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1086.4" y="110.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.04%)</title><rect x="1083.8" y="163.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1086.8" y="174.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="1084.6" y="179.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1087.6" y="190.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.03%)</title><rect x="1084.6" y="163.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1087.6" y="174.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.03%)</title><rect x="1084.6" y="147.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1087.6" y="158.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.04%)</title><rect x="1084.9" y="179.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1087.9" y="190.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.09%)</title><rect x="1085.5" y="179.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1088.5" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.05%)</title><rect x="1086.9" y="179.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1089.9" y="190.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.05%)</title><rect x="1086.9" y="163.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1089.9" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.05%)</title><rect x="1086.9" y="147.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1089.9" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="1087.2" y="131.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1090.2" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="1087.2" y="115.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1090.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (63 samples, 0.82%)</title><rect x="1087.5" y="179.0" width="9.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (62 samples, 0.80%)</title><rect x="1087.7" y="163.0" width="9.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (60 samples, 0.78%)</title><rect x="1087.8" y="147.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (60 samples, 0.78%)</title><rect x="1087.8" y="131.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (55 samples, 0.71%)</title><rect x="1088.1" y="115.0" width="8.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.03%)</title><rect x="1088.6" y="99.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.03%)</title><rect x="1088.6" y="83.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (44 samples, 0.57%)</title><rect x="1089.3" y="99.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (39 samples, 0.51%)</title><rect x="1090.1" y="83.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (2 samples, 0.03%)</title><rect x="1093.2" y="67.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.2" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (13 samples, 0.17%)</title><rect x="1093.5" y="67.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1096.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.05%)</title><rect x="1094.5" y="51.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.5" y="62.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="1095.1" y="51.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.1" y="62.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="1095.6" y="67.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1098.6" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.03%)</title><rect x="1097.3" y="243.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1100.3" y="254.0"></text>
</g>
<g>
<title>[worker tid=86787] (604 samples, 7.83%)</title><rect x="1097.6" y="403.0" width="92.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1100.6" y="414.0">[worker tid..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.08%)</title><rect x="1097.6" y="387.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.6" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.08%)</title><rect x="1097.6" y="371.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.6" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (6 samples, 0.08%)</title><rect x="1097.6" y="355.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.6" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.06%)</title><rect x="1097.6" y="339.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.6" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.05%)</title><rect x="1097.6" y="323.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1100.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.run (598 samples, 7.75%)</title><rect x="1098.5" y="387.0" width="91.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1101.5" y="398.0">java/lang/T..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (598 samples, 7.75%)</title><rect x="1098.5" y="371.0" width="91.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1101.5" y="382.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (598 samples, 7.75%)</title><rect x="1098.5" y="355.0" width="91.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1101.5" y="366.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.03%)</title><rect x="1098.5" y="339.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1101.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="1098.5" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1101.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (311 samples, 4.03%)</title><rect x="1098.8" y="339.0" width="47.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1101.8" y="350.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (309 samples, 4.01%)</title><rect x="1099.0" y="323.0" width="47.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1102.0" y="334.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (2 samples, 0.03%)</title><rect x="1099.3" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1102.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (245 samples, 3.18%)</title><rect x="1099.7" y="307.0" width="37.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1102.7" y="318.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.08%)</title><rect x="1099.9" y="291.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1102.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.04%)</title><rect x="1100.0" y="275.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1103.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.04%)</title><rect x="1100.0" y="259.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1103.0" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.04%)</title><rect x="1100.0" y="243.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1103.0" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.04%)</title><rect x="1100.0" y="227.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1103.0" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.04%)</title><rect x="1100.0" y="211.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.0" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="1100.0" y="195.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1103.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 0.18%)</title><rect x="1100.8" y="291.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1103.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.18%)</title><rect x="1100.8" y="275.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1103.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.18%)</title><rect x="1100.8" y="259.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1103.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.18%)</title><rect x="1100.8" y="243.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1103.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 0.18%)</title><rect x="1100.8" y="227.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1103.8" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (12 samples, 0.16%)</title><rect x="1101.1" y="211.0" width="1.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1104.1" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.12%)</title><rect x="1101.4" y="195.0" width="1.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1104.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (224 samples, 2.90%)</title><rect x="1102.9" y="291.0" width="34.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1105.9" y="302.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (224 samples, 2.90%)</title><rect x="1102.9" y="275.0" width="34.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1105.9" y="286.0">jd..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (200 samples, 2.59%)</title><rect x="1106.5" y="259.0" width="30.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1109.5" y="270.0">Un..</text>
</g>
<g>
<title>Parker::park(bool, long) (190 samples, 2.46%)</title><rect x="1107.2" y="243.0" width="29.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.2" y="254.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.08%)</title><rect x="1107.4" y="227.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.4" y="238.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="1107.7" y="211.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.7" y="222.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.03%)</title><rect x="1107.7" y="195.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.7" y="206.0"></text>
</g>
<g>
<title>Monitor::TryFast() (2 samples, 0.03%)</title><rect x="1107.7" y="179.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.7" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="1108.0" y="211.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1111.0" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (180 samples, 2.33%)</title><rect x="1108.3" y="227.0" width="27.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1111.3" y="238.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.04%)</title><rect x="1135.8" y="227.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1138.8" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.03%)</title><rect x="1136.3" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 0.14%)</title><rect x="1137.4" y="307.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1140.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 0.14%)</title><rect x="1137.4" y="291.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1140.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (11 samples, 0.14%)</title><rect x="1137.4" y="275.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1140.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (11 samples, 0.14%)</title><rect x="1137.4" y="259.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1140.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 0.14%)</title><rect x="1137.4" y="243.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1140.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (11 samples, 0.14%)</title><rect x="1137.4" y="227.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1140.4" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (10 samples, 0.13%)</title><rect x="1137.5" y="211.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1140.5" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.12%)</title><rect x="1137.7" y="195.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.7" y="206.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.12%)</title><rect x="1137.7" y="179.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1140.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (47 samples, 0.61%)</title><rect x="1139.1" y="307.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1142.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (47 samples, 0.61%)</title><rect x="1139.1" y="291.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1142.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (47 samples, 0.61%)</title><rect x="1139.1" y="275.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1142.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (47 samples, 0.61%)</title><rect x="1139.1" y="259.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1142.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (47 samples, 0.61%)</title><rect x="1139.1" y="243.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1142.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (46 samples, 0.60%)</title><rect x="1139.2" y="227.0" width="7.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1142.2" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.04%)</title><rect x="1139.7" y="211.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.7" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="1140.1" y="211.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.1" y="222.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (2 samples, 0.03%)</title><rect x="1140.1" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.1" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.05%)</title><rect x="1140.4" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.4" y="222.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.03%)</title><rect x="1140.7" y="195.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.7" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (32 samples, 0.41%)</title><rect x="1141.0" y="211.0" width="4.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1144.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$124/1518349137.run (285 samples, 3.70%)</title><rect x="1146.4" y="339.0" width="43.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1149.4" y="350.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$executeAsync$3 (285 samples, 3.70%)</title><rect x="1146.4" y="323.0" width="43.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1149.4" y="334.0">ru/m..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (162 samples, 2.10%)</title><rect x="1146.4" y="307.0" width="24.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1149.4" y="318.0">o..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.05%)</title><rect x="1146.7" y="291.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.7" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.05%)</title><rect x="1146.7" y="275.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.7" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.05%)</title><rect x="1146.7" y="259.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.06%)</title><rect x="1147.3" y="291.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1150.3" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.06%)</title><rect x="1147.3" y="275.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1150.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.06%)</title><rect x="1147.3" y="259.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1150.3" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (151 samples, 1.96%)</title><rect x="1148.1" y="291.0" width="23.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1151.1" y="302.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.13%)</title><rect x="1148.1" y="275.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1151.1" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.10%)</title><rect x="1148.4" y="259.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1151.4" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.05%)</title><rect x="1148.5" y="243.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1151.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="1149.2" y="243.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1152.2" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="1149.2" y="227.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1152.2" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.04%)</title><rect x="1149.2" y="211.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1152.2" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (141 samples, 1.83%)</title><rect x="1149.6" y="275.0" width="21.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1152.6" y="286.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (140 samples, 1.82%)</title><rect x="1149.8" y="259.0" width="21.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1152.8" y="270.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (140 samples, 1.82%)</title><rect x="1149.8" y="243.0" width="21.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1152.8" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (140 samples, 1.82%)</title><rect x="1149.8" y="227.0" width="21.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1152.8" y="238.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (139 samples, 1.80%)</title><rect x="1149.9" y="211.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1152.9" y="222.0">s..</text>
</g>
<g>
<title>java/util/Objects.requireNonNull (3 samples, 0.04%)</title><rect x="1149.9" y="195.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1152.9" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="1150.1" y="179.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (135 samples, 1.75%)</title><rect x="1150.5" y="195.0" width="20.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1153.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (135 samples, 1.75%)</title><rect x="1150.5" y="179.0" width="20.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1153.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (134 samples, 1.74%)</title><rect x="1150.5" y="163.0" width="20.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1153.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (134 samples, 1.74%)</title><rect x="1150.5" y="147.0" width="20.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1153.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (134 samples, 1.74%)</title><rect x="1150.5" y="131.0" width="20.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1153.5" y="142.0"></text>
</g>
<g>
<title>write (133 samples, 1.72%)</title><rect x="1150.7" y="115.0" width="20.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1153.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl$$Lambda$133/744045698.act (123 samples, 1.59%)</title><rect x="1171.2" y="307.0" width="18.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1174.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.lambda$entity$0 (123 samples, 1.59%)</title><rect x="1171.2" y="291.0" width="18.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1174.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/AsyncServiceImpl.get (123 samples, 1.59%)</title><rect x="1171.2" y="275.0" width="18.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1174.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.04%)</title><rect x="1171.2" y="259.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1174.2" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.04%)</title><rect x="1171.2" y="243.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1174.2" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="1171.2" y="227.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1174.2" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="1171.2" y="211.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1174.2" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1171.2" y="195.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1174.2" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="1171.6" y="259.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1174.6" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1171.6" y="243.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1174.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1171.6" y="227.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1174.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1171.6" y="211.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1174.6" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="1171.6" y="195.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1174.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="1171.6" y="179.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1174.6" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="1171.6" y="163.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1174.6" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1171.6" y="147.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1174.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (118 samples, 1.53%)</title><rect x="1171.9" y="259.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1174.9" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (112 samples, 1.45%)</title><rect x="1171.9" y="243.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1174.9" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (112 samples, 1.45%)</title><rect x="1171.9" y="227.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1174.9" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (110 samples, 1.43%)</title><rect x="1172.1" y="211.0" width="16.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1175.1" y="222.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (105 samples, 1.36%)</title><rect x="1172.9" y="195.0" width="16.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.9" y="206.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (19 samples, 0.25%)</title><rect x="1173.3" y="179.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1176.3" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="1174.1" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.1" y="174.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="1174.5" y="163.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1177.5" y="174.0"></text>
</g>
<g>
<title>jni_NewByteArray (9 samples, 0.12%)</title><rect x="1174.9" y="163.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1177.9" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.08%)</title><rect x="1175.3" y="147.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title><rect x="1175.6" y="131.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.6" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="1175.6" y="115.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.6" y="126.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="1176.4" y="179.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1179.4" y="190.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.03%)</title><rect x="1176.4" y="163.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1179.4" y="174.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.03%)</title><rect x="1176.4" y="147.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1179.4" y="158.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.05%)</title><rect x="1176.7" y="179.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1179.7" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="1177.0" y="163.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.0" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="1177.3" y="179.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1180.3" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="1177.9" y="179.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1180.9" y="190.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="1177.9" y="163.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1180.9" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="1177.9" y="147.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1180.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (69 samples, 0.89%)</title><rect x="1178.2" y="179.0" width="10.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (65 samples, 0.84%)</title><rect x="1178.8" y="163.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (59 samples, 0.76%)</title><rect x="1179.6" y="147.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (59 samples, 0.76%)</title><rect x="1179.6" y="131.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (55 samples, 0.71%)</title><rect x="1180.1" y="115.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="126.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.05%)</title><rect x="1181.1" y="99.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1184.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.03%)</title><rect x="1181.7" y="99.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (37 samples, 0.48%)</title><rect x="1182.4" y="99.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (33 samples, 0.43%)</title><rect x="1183.0" y="83.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="1185.0" y="67.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1188.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (6 samples, 0.08%)</title><rect x="1185.3" y="67.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.14%)</title><rect x="1186.2" y="67.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.09%)</title><rect x="1186.6" y="51.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="62.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="1188.2" y="99.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.2" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (6 samples, 0.08%)</title><rect x="1189.1" y="243.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1192.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.03%)</title><rect x="1189.2" y="227.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1192.2" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.04%)</title><rect x="1189.5" y="227.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.5" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1189.5" y="211.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1192.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1189.7" y="195.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1192.7" y="206.0"></text>
</g>
</g>
</svg>
