<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1109"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1109"> </text>
<g id="frames">
<g>
<title>all (349 samples, 100.00%)</title><rect x="10.0" y="1075.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1086.0">all</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.29%)</title><rect x="10.0" y="1059.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.29%)</title><rect x="10.0" y="1043.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.29%)</title><rect x="10.0" y="1027.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.29%)</title><rect x="10.0" y="1011.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.29%)</title><rect x="10.0" y="995.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>Method::load_signature_classes(methodHandle const&amp;, Thread*) (1 samples, 0.29%)</title><rect x="10.0" y="979.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.29%)</title><rect x="10.0" y="963.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.29%)</title><rect x="10.0" y="947.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>Dictionary::get_entry(int, unsigned int, Symbol*) (1 samples, 0.29%)</title><rect x="10.0" y="931.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.29%)</title><rect x="13.4" y="1059.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="16.4" y="1070.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.29%)</title><rect x="13.4" y="1043.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.4" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.29%)</title><rect x="13.4" y="1027.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.4" y="1038.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.29%)</title><rect x="13.4" y="1011.0" width="3.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="16.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.run (49 samples, 14.04%)</title><rect x="16.8" y="1059.0" width="165.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.8" y="1070.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (6 samples, 1.72%)</title><rect x="16.8" y="1043.0" width="20.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/Object.wait (5 samples, 1.43%)</title><rect x="20.1" y="1027.0" width="16.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.1" y="1038.0"></text>
</g>
<g>
<title>JVM_MonitorWait (5 samples, 1.43%)</title><rect x="20.1" y="1011.0" width="16.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="23.1" y="1022.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (5 samples, 1.43%)</title><rect x="20.1" y="995.0" width="16.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="23.1" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (5 samples, 1.43%)</title><rect x="20.1" y="979.0" width="16.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="23.1" y="990.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.29%)</title><rect x="20.1" y="963.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="23.1" y="974.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.29%)</title><rect x="20.1" y="947.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="23.1" y="958.0"></text>
</g>
<g>
<title>ObjectMonitor::UnlinkAfterAcquire(Thread*, ObjectWaiter*) (1 samples, 0.29%)</title><rect x="23.5" y="963.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="26.5" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.86%)</title><rect x="26.9" y="963.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="29.9" y="974.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.86%)</title><rect x="26.9" y="947.0" width="10.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="29.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (43 samples, 12.32%)</title><rect x="37.0" y="1043.0" width="145.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.0" y="1054.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (43 samples, 12.32%)</title><rect x="37.0" y="1027.0" width="145.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.0" y="1038.0">java/util/concurre..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (43 samples, 12.32%)</title><rect x="37.0" y="1011.0" width="145.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.0" y="1022.0">sun/rmi/transport/..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (43 samples, 12.32%)</title><rect x="37.0" y="995.0" width="145.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.0" y="1006.0">java/security/Acce..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$147/1766691620.run (43 samples, 12.32%)</title><rect x="37.0" y="979.0" width="145.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.0" y="990.0">sun/rmi/transport/..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (43 samples, 12.32%)</title><rect x="37.0" y="963.0" width="145.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.0" y="974.0">sun/rmi/transport/..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (43 samples, 12.32%)</title><rect x="37.0" y="947.0" width="145.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.0" y="958.0">sun/rmi/transport/..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (43 samples, 12.32%)</title><rect x="37.0" y="931.0" width="145.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.0" y="942.0">sun/rmi/transport/..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.29%)</title><rect x="40.4" y="915.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.4" y="926.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (6 samples, 1.72%)</title><rect x="43.8" y="915.0" width="20.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.8" y="926.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (6 samples, 1.72%)</title><rect x="43.8" y="899.0" width="20.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="46.8" y="910.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (6 samples, 1.72%)</title><rect x="43.8" y="883.0" width="20.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.8" y="894.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (6 samples, 1.72%)</title><rect x="43.8" y="867.0" width="20.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.8" y="878.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (6 samples, 1.72%)</title><rect x="43.8" y="851.0" width="20.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.8" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.29%)</title><rect x="43.8" y="835.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.8" y="846.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead (5 samples, 1.43%)</title><rect x="47.2" y="835.0" width="16.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.2" y="846.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead0 (5 samples, 1.43%)</title><rect x="47.2" y="819.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.2" y="830.0"></text>
</g>
<g>
<title>Java_java_net_SocketInputStream_socketRead0 (5 samples, 1.43%)</title><rect x="47.2" y="803.0" width="16.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="50.2" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.57%)</title><rect x="47.2" y="787.0" width="6.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="50.2" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.29%)</title><rect x="47.2" y="771.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="50.2" y="782.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.29%)</title><rect x="47.2" y="755.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="50.2" y="766.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.29%)</title><rect x="50.6" y="771.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="53.6" y="782.0"></text>
</g>
<g>
<title>recvfrom (2 samples, 0.57%)</title><rect x="54.0" y="787.0" width="6.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="57.0" y="798.0"></text>
</g>
<g>
<title>select$DARWIN_EXTSN (1 samples, 0.29%)</title><rect x="60.7" y="787.0" width="3.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="63.7" y="798.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (35 samples, 10.03%)</title><rect x="64.1" y="915.0" width="118.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.1" y="926.0">sun/rmi/transp..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (34 samples, 9.74%)</title><rect x="64.1" y="899.0" width="115.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.1" y="910.0">java/security/..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (34 samples, 9.74%)</title><rect x="64.1" y="883.0" width="115.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.1" y="894.0">sun/rmi/transp..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (34 samples, 9.74%)</title><rect x="64.1" y="867.0" width="115.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.1" y="878.0">sun/rmi/transp..</text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.29%)</title><rect x="64.1" y="851.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="67.1" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.29%)</title><rect x="64.1" y="835.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="67.1" y="846.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.29%)</title><rect x="64.1" y="819.0" width="3.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="67.1" y="830.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (33 samples, 9.46%)</title><rect x="67.5" y="851.0" width="111.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.5" y="862.0">sun/rmi/serve..</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (14 samples, 4.01%)</title><rect x="67.5" y="835.0" width="47.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.5" y="846.0">java..</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (14 samples, 4.01%)</title><rect x="67.5" y="819.0" width="47.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.5" y="830.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (14 samples, 4.01%)</title><rect x="67.5" y="803.0" width="47.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.5" y="814.0">jdk/..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (14 samples, 4.01%)</title><rect x="67.5" y="787.0" width="47.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.5" y="798.0">java..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (11 samples, 3.15%)</title><rect x="67.5" y="771.0" width="37.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.5" y="782.0">jav..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (11 samples, 3.15%)</title><rect x="67.5" y="755.0" width="37.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.5" y="766.0">jav..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (11 samples, 3.15%)</title><rect x="67.5" y="739.0" width="37.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.5" y="750.0">jav..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (11 samples, 3.15%)</title><rect x="67.5" y="723.0" width="37.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.5" y="734.0">com..</text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (11 samples, 3.15%)</title><rect x="67.5" y="707.0" width="37.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.5" y="718.0">com..</text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (11 samples, 3.15%)</title><rect x="67.5" y="691.0" width="37.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.5" y="702.0">jav..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (11 samples, 3.15%)</title><rect x="67.5" y="675.0" width="37.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.5" y="686.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (11 samples, 3.15%)</title><rect x="67.5" y="659.0" width="37.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.5" y="670.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (11 samples, 3.15%)</title><rect x="67.5" y="643.0" width="37.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.5" y="654.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (11 samples, 3.15%)</title><rect x="67.5" y="627.0" width="37.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.5" y="638.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (11 samples, 3.15%)</title><rect x="67.5" y="611.0" width="37.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.5" y="622.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (11 samples, 3.15%)</title><rect x="67.5" y="595.0" width="37.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.5" y="606.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (11 samples, 3.15%)</title><rect x="67.5" y="579.0" width="37.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.5" y="590.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (8 samples, 2.29%)</title><rect x="67.5" y="563.0" width="27.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.5" y="574.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (8 samples, 2.29%)</title><rect x="67.5" y="547.0" width="27.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.5" y="558.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (8 samples, 2.29%)</title><rect x="67.5" y="531.0" width="27.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.5" y="542.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (8 samples, 2.29%)</title><rect x="67.5" y="515.0" width="27.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.5" y="526.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (5 samples, 1.43%)</title><rect x="67.5" y="499.0" width="16.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.5" y="510.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (5 samples, 1.43%)</title><rect x="67.5" y="483.0" width="16.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.5" y="494.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (5 samples, 1.43%)</title><rect x="67.5" y="467.0" width="16.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.5" y="478.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (5 samples, 1.43%)</title><rect x="67.5" y="451.0" width="16.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="70.5" y="462.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (4 samples, 1.15%)</title><rect x="67.5" y="435.0" width="13.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.5" y="446.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (3 samples, 0.86%)</title><rect x="67.5" y="419.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.5" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (1 samples, 0.29%)</title><rect x="67.5" y="403.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.5" y="414.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.29%)</title><rect x="67.5" y="387.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.5" y="398.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (1 samples, 0.29%)</title><rect x="67.5" y="371.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.5" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (1 samples, 0.29%)</title><rect x="67.5" y="355.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.5" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (1 samples, 0.29%)</title><rect x="67.5" y="339.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.5" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.29%)</title><rect x="67.5" y="323.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.5" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.29%)</title><rect x="70.9" y="403.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="73.9" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.29%)</title><rect x="74.2" y="403.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.2" y="414.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (1 samples, 0.29%)</title><rect x="77.6" y="419.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.6" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.29%)</title><rect x="77.6" y="403.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.6" y="414.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (1 samples, 0.29%)</title><rect x="81.0" y="435.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.0" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.29%)</title><rect x="81.0" y="419.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.29%)</title><rect x="81.0" y="403.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (1 samples, 0.29%)</title><rect x="81.0" y="387.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.0" y="398.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (1 samples, 0.29%)</title><rect x="81.0" y="371.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.0" y="382.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.ensureInvocableMethod (1 samples, 0.29%)</title><rect x="81.0" y="355.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.0" y="366.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.29%)</title><rect x="81.0" y="339.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.0" y="350.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.29%)</title><rect x="81.0" y="323.0" width="3.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="84.0" y="334.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (3 samples, 0.86%)</title><rect x="84.4" y="499.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="87.4" y="510.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (3 samples, 0.86%)</title><rect x="84.4" y="483.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.4" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (1 samples, 0.29%)</title><rect x="84.4" y="467.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.4" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.29%)</title><rect x="84.4" y="451.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.4" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (1 samples, 0.29%)</title><rect x="84.4" y="435.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.4" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (1 samples, 0.29%)</title><rect x="84.4" y="419.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="87.4" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.29%)</title><rect x="84.4" y="403.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="87.4" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.29%)</title><rect x="84.4" y="387.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.4" y="398.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeType.isValue (2 samples, 0.57%)</title><rect x="87.8" y="467.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.8" y="478.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeType.isAssignableFrom (2 samples, 0.57%)</title><rect x="87.8" y="451.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.8" y="462.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeType.getType (2 samples, 0.57%)</title><rect x="87.8" y="435.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.8" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (2 samples, 0.57%)</title><rect x="87.8" y="419.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.8" y="430.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (3 samples, 0.86%)</title><rect x="94.5" y="563.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.5" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.86%)</title><rect x="94.5" y="547.0" width="10.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.5" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.86%)</title><rect x="94.5" y="531.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.5" y="542.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (3 samples, 0.86%)</title><rect x="94.5" y="515.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.5" y="526.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (3 samples, 0.86%)</title><rect x="94.5" y="499.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.5" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.86%)</title><rect x="94.5" y="483.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.86%)</title><rect x="94.5" y="467.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (3 samples, 0.86%)</title><rect x="94.5" y="451.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="97.5" y="462.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (3 samples, 0.86%)</title><rect x="94.5" y="435.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="97.5" y="446.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (3 samples, 0.86%)</title><rect x="94.5" y="419.0" width="10.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.5" y="430.0"></text>
</g>
<g>
<title>jmm_GetThreadInfo (3 samples, 0.86%)</title><rect x="94.5" y="403.0" width="10.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="97.5" y="414.0"></text>
</g>
<g>
<title>Management::create_thread_info_instance(ThreadSnapshot*, Thread*) (3 samples, 0.86%)</title><rect x="94.5" y="387.0" width="10.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="97.5" y="398.0"></text>
</g>
<g>
<title>initialize_ThreadInfo_constructor_arguments(JavaCallArguments*, ThreadSnapshot*, Thread*) (3 samples, 0.86%)</title><rect x="94.5" y="371.0" width="10.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="97.5" y="382.0"></text>
</g>
<g>
<title>ThreadStackTrace::allocate_fill_stack_trace_element_array(Thread*) (2 samples, 0.57%)</title><rect x="97.9" y="355.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="100.9" y="366.0"></text>
</g>
<g>
<title>java_lang_StackTraceElement::create(methodHandle const&amp;, int, Thread*) (2 samples, 0.57%)</title><rect x="97.9" y="339.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="100.9" y="350.0"></text>
</g>
<g>
<title>java_lang_StackTraceElement::fill_in(Handle, InstanceKlass*, methodHandle const&amp;, int, int, Symbol*, Thread*) (2 samples, 0.57%)</title><rect x="97.9" y="323.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="100.9" y="334.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.29%)</title><rect x="97.9" y="307.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="100.9" y="318.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short*, int, Thread*) (1 samples, 0.29%)</title><rect x="97.9" y="291.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="100.9" y="302.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short*, int, unsigned long) (1 samples, 0.29%)</title><rect x="97.9" y="275.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="100.9" y="286.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)10&gt;::get&lt;StringTableLookupJchar, StringTableGet&gt;(Thread*, StringTableLookupJchar&amp;, StringTableGet&amp;, bool*) (1 samples, 0.29%)</title><rect x="97.9" y="259.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="100.9" y="270.0"></text>
</g>
<g>
<title>WeakHandle&lt;(WeakHandleType)2&gt;* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)10&gt;::internal_get&lt;StringTableLookupJchar&gt;(Thread*, StringTableLookupJchar&amp;, bool*) (1 samples, 0.29%)</title><rect x="97.9" y="243.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="100.9" y="254.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)10&gt;::Node* ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)10&gt;::get_node&lt;StringTableLookupJchar&gt;(ConcurrentHashTable&lt;WeakHandle&lt;(WeakHandleType)2&gt;, StringTableConfig, (MemoryType)10&gt;::Bucket const*, StringTableLookupJchar&amp;, bool*, unsigned long*) const (1 samples, 0.29%)</title><rect x="97.9" y="227.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="100.9" y="238.0"></text>
</g>
<g>
<title>StringTableLookupJchar::equals(WeakHandle&lt;(WeakHandleType)2&gt;*, bool*) (1 samples, 0.29%)</title><rect x="97.9" y="211.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="100.9" y="222.0"></text>
</g>
<g>
<title>java_lang_String::equals(oopDesc*, unsigned short*, int) (1 samples, 0.29%)</title><rect x="97.9" y="195.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="100.9" y="206.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (1 samples, 0.29%)</title><rect x="101.3" y="307.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="104.3" y="318.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getClassLoaderFor (1 samples, 0.29%)</title><rect x="104.7" y="771.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="107.7" y="782.0"></text>
</g>
<g>
<title>javax/management/MBeanPermission.&lt;init&gt; (1 samples, 0.29%)</title><rect x="104.7" y="755.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="107.7" y="766.0"></text>
</g>
<g>
<title>javax/management/MBeanPermission.parseName (1 samples, 0.29%)</title><rect x="104.7" y="739.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.7" y="750.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (2 samples, 0.57%)</title><rect x="108.1" y="771.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="111.1" y="782.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (2 samples, 0.57%)</title><rect x="108.1" y="755.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.1" y="766.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.get (2 samples, 0.57%)</title><rect x="108.1" y="739.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.1" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.29%)</title><rect x="108.1" y="723.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="111.1" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.29%)</title><rect x="108.1" y="707.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.1" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.29%)</title><rect x="108.1" y="691.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="111.1" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (1 samples, 0.29%)</title><rect x="108.1" y="675.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.1" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.29%)</title><rect x="108.1" y="659.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="111.1" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.29%)</title><rect x="108.1" y="643.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.1" y="654.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.close (1 samples, 0.29%)</title><rect x="111.4" y="723.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.4" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.close (1 samples, 0.29%)</title><rect x="111.4" y="707.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.4" y="718.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (10 samples, 2.87%)</title><rect x="114.8" y="835.0" width="33.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="117.8" y="846.0">su..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (10 samples, 2.87%)</title><rect x="114.8" y="819.0" width="33.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="117.8" y="830.0">ja..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (10 samples, 2.87%)</title><rect x="114.8" y="803.0" width="33.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="117.8" y="814.0">ja..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (8 samples, 2.29%)</title><rect x="114.8" y="787.0" width="27.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.8" y="798.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (8 samples, 2.29%)</title><rect x="114.8" y="771.0" width="27.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.8" y="782.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (8 samples, 2.29%)</title><rect x="114.8" y="755.0" width="27.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="117.8" y="766.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (8 samples, 2.29%)</title><rect x="114.8" y="739.0" width="27.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.8" y="750.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (8 samples, 2.29%)</title><rect x="114.8" y="723.0" width="27.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.8" y="734.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (8 samples, 2.29%)</title><rect x="114.8" y="707.0" width="27.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.8" y="718.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 2.01%)</title><rect x="114.8" y="691.0" width="23.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.8" y="702.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.29%)</title><rect x="114.8" y="675.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.8" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.29%)</title><rect x="114.8" y="659.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="117.8" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.writeNonProxy (1 samples, 0.29%)</title><rect x="114.8" y="643.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.8" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeUTF (1 samples, 0.29%)</title><rect x="114.8" y="627.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="117.8" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeUTF (1 samples, 0.29%)</title><rect x="114.8" y="611.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.8" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.getUTFLength (1 samples, 0.29%)</title><rect x="114.8" y="595.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.8" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (6 samples, 1.72%)</title><rect x="118.2" y="675.0" width="20.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="121.2" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.29%)</title><rect x="118.2" y="659.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.2" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.29%)</title><rect x="118.2" y="643.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.2" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.29%)</title><rect x="118.2" y="627.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.2" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.29%)</title><rect x="118.2" y="611.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="121.2" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.29%)</title><rect x="118.2" y="595.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="121.2" y="606.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.29%)</title><rect x="118.2" y="579.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="121.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.29%)</title><rect x="118.2" y="563.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (1 samples, 0.29%)</title><rect x="118.2" y="547.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="121.2" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (1 samples, 0.29%)</title><rect x="118.2" y="531.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.2" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.29%)</title><rect x="118.2" y="515.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="121.2" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.29%)</title><rect x="118.2" y="499.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="121.2" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.lookup (1 samples, 0.29%)</title><rect x="118.2" y="483.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="121.2" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (5 samples, 1.43%)</title><rect x="121.6" y="659.0" width="16.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.6" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (5 samples, 1.43%)</title><rect x="121.6" y="643.0" width="16.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.6" y="654.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (5 samples, 1.43%)</title><rect x="121.6" y="627.0" width="16.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="124.6" y="638.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (5 samples, 1.43%)</title><rect x="121.6" y="611.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.6" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (5 samples, 1.43%)</title><rect x="121.6" y="595.0" width="16.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="124.6" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (5 samples, 1.43%)</title><rect x="121.6" y="579.0" width="16.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.6" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5 samples, 1.43%)</title><rect x="121.6" y="563.0" width="16.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="124.6" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode (1 samples, 0.29%)</title><rect x="121.6" y="547.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="124.6" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (1 samples, 0.29%)</title><rect x="121.6" y="531.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="124.6" y="542.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (1 samples, 0.29%)</title><rect x="121.6" y="515.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="124.6" y="526.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.29%)</title><rect x="121.6" y="499.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.6" y="510.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (1 samples, 0.29%)</title><rect x="121.6" y="483.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.6" y="494.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (1 samples, 0.29%)</title><rect x="121.6" y="467.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="124.6" y="478.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (1 samples, 0.29%)</title><rect x="121.6" y="451.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="124.6" y="462.0"></text>
</g>
<g>
<title>Java_java_net_SocketOutputStream_socketWrite0 (1 samples, 0.29%)</title><rect x="121.6" y="435.0" width="3.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="124.6" y="446.0"></text>
</g>
<g>
<title>sendto (1 samples, 0.29%)</title><rect x="121.6" y="419.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="124.6" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (3 samples, 0.86%)</title><rect x="125.0" y="547.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.0" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (3 samples, 0.86%)</title><rect x="125.0" y="531.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.0" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (3 samples, 0.86%)</title><rect x="125.0" y="515.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="128.0" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (3 samples, 0.86%)</title><rect x="125.0" y="499.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="128.0" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (3 samples, 0.86%)</title><rect x="125.0" y="483.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.0" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (3 samples, 0.86%)</title><rect x="125.0" y="467.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="128.0" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (3 samples, 0.86%)</title><rect x="125.0" y="451.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="128.0" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (3 samples, 0.86%)</title><rect x="125.0" y="435.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="128.0" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (3 samples, 0.86%)</title><rect x="125.0" y="419.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="128.0" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.86%)</title><rect x="125.0" y="403.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="128.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.86%)</title><rect x="125.0" y="387.0" width="10.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (3 samples, 0.86%)</title><rect x="125.0" y="371.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="128.0" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (3 samples, 0.86%)</title><rect x="125.0" y="355.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="128.0" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteObject (1 samples, 0.29%)</title><rect x="125.0" y="339.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.0" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode (1 samples, 0.29%)</title><rect x="125.0" y="323.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.0" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (1 samples, 0.29%)</title><rect x="125.0" y="307.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="128.0" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeBlockHeader (1 samples, 0.29%)</title><rect x="125.0" y="291.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.0" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 0.57%)</title><rect x="128.3" y="339.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.3" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.57%)</title><rect x="128.3" y="323.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="131.3" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.lookup (2 samples, 0.57%)</title><rect x="128.3" y="307.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.3" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.29%)</title><rect x="135.1" y="547.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putIfAbsent (1 samples, 0.29%)</title><rect x="135.1" y="531.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="138.1" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.29%)</title><rect x="138.5" y="691.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="141.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putIfAbsent (1 samples, 0.29%)</title><rect x="138.5" y="675.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.5" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.57%)</title><rect x="141.9" y="787.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="144.9" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.29%)</title><rect x="141.9" y="771.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.9" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.29%)</title><rect x="141.9" y="755.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.9" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.writeNonProxy (1 samples, 0.29%)</title><rect x="141.9" y="739.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="144.9" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeUTF (1 samples, 0.29%)</title><rect x="141.9" y="723.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.9" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeUTF (1 samples, 0.29%)</title><rect x="141.9" y="707.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="144.9" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeUTF (1 samples, 0.29%)</title><rect x="141.9" y="691.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.9" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeBytes (1 samples, 0.29%)</title><rect x="141.9" y="675.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.9" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.29%)</title><rect x="145.2" y="771.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="148.2" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.29%)</title><rect x="145.2" y="755.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.2" y="766.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.29%)</title><rect x="145.2" y="739.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="148.2" y="750.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.29%)</title><rect x="145.2" y="723.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor40.invoke (1 samples, 0.29%)</title><rect x="145.2" y="707.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.2" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.writeObject (1 samples, 0.29%)</title><rect x="145.2" y="691.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.2" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.29%)</title><rect x="145.2" y="675.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.2" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.29%)</title><rect x="145.2" y="659.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.2" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.29%)</title><rect x="145.2" y="643.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.2" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.29%)</title><rect x="145.2" y="627.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.2" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.29%)</title><rect x="145.2" y="611.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.2" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.29%)</title><rect x="145.2" y="595.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.2" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.29%)</title><rect x="145.2" y="579.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.2" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.29%)</title><rect x="145.2" y="563.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.2" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.29%)</title><rect x="145.2" y="547.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.2" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.29%)</title><rect x="145.2" y="531.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.2" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.29%)</title><rect x="145.2" y="515.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.2" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.forClass (1 samples, 0.29%)</title><rect x="145.2" y="499.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.2" y="510.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (5 samples, 1.43%)</title><rect x="148.6" y="835.0" width="16.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.6" y="846.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (5 samples, 1.43%)</title><rect x="148.6" y="819.0" width="16.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.6" y="830.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (5 samples, 1.43%)</title><rect x="148.6" y="803.0" width="16.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="151.6" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (5 samples, 1.43%)</title><rect x="148.6" y="787.0" width="16.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="151.6" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (5 samples, 1.43%)</title><rect x="148.6" y="771.0" width="16.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.6" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.29%)</title><rect x="148.6" y="755.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="151.6" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.29%)</title><rect x="148.6" y="739.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="151.6" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (1 samples, 0.29%)</title><rect x="148.6" y="723.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="151.6" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.classNamesEqual (1 samples, 0.29%)</title><rect x="148.6" y="707.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.6" y="718.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.29%)</title><rect x="148.6" y="691.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.6" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (3 samples, 0.86%)</title><rect x="152.0" y="755.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.0" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout (2 samples, 0.57%)</title><rect x="152.0" y="739.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="155.0" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout0 (2 samples, 0.57%)</title><rect x="152.0" y="723.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Class.getSuperclass (1 samples, 0.29%)</title><rect x="152.0" y="707.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.0" y="718.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (1 samples, 0.29%)</title><rect x="155.4" y="707.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.4" y="718.0"></text>
</g>
<g>
<title>java_lang_Class::is_primitive(oopDesc*) (1 samples, 0.29%)</title><rect x="155.4" y="691.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="158.4" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1 samples, 0.29%)</title><rect x="158.8" y="739.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.8" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.29%)</title><rect x="158.8" y="723.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="161.8" y="734.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.29%)</title><rect x="158.8" y="707.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.8" y="718.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor2.invoke (1 samples, 0.29%)</title><rect x="158.8" y="691.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.8" y="702.0"></text>
</g>
<g>
<title>javax/management/ObjectName.readObject (1 samples, 0.29%)</title><rect x="158.8" y="675.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="161.8" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.defaultReadObject (1 samples, 0.29%)</title><rect x="158.8" y="659.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="161.8" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.hasWriteObjectData (1 samples, 0.29%)</title><rect x="158.8" y="643.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.8" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.requireInitialized (1 samples, 0.29%)</title><rect x="158.8" y="627.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.8" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.29%)</title><rect x="162.1" y="755.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="165.1" y="766.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.29%)</title><rect x="162.1" y="739.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="165.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Class.getModifiers (1 samples, 0.29%)</title><rect x="162.1" y="723.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.1" y="734.0"></text>
</g>
<g>
<title>JVM_GetClassModifiers (1 samples, 0.29%)</title><rect x="162.1" y="707.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="165.1" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.29%)</title><rect x="162.1" y="691.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="165.1" y="702.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.29%)</title><rect x="162.1" y="675.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="165.1" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (1 samples, 0.29%)</title><rect x="165.5" y="835.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="168.5" y="846.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (1 samples, 0.29%)</title><rect x="165.5" y="819.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.5" y="830.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (1 samples, 0.29%)</title><rect x="165.5" y="803.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="168.5" y="814.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (1 samples, 0.29%)</title><rect x="165.5" y="787.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="168.5" y="798.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (1 samples, 0.29%)</title><rect x="165.5" y="771.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="168.5" y="782.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.29%)</title><rect x="165.5" y="755.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.5" y="766.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (1 samples, 0.29%)</title><rect x="165.5" y="739.0" width="3.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="168.5" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.29%)</title><rect x="165.5" y="723.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="168.5" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.29%)</title><rect x="165.5" y="707.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="168.5" y="718.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.29%)</title><rect x="165.5" y="691.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="168.5" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.releaseOutputStream (3 samples, 0.86%)</title><rect x="168.9" y="835.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="171.9" y="846.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.flush (3 samples, 0.86%)</title><rect x="168.9" y="819.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="171.9" y="830.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.flush (3 samples, 0.86%)</title><rect x="168.9" y="803.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.9" y="814.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (3 samples, 0.86%)</title><rect x="168.9" y="787.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.9" y="798.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (3 samples, 0.86%)</title><rect x="168.9" y="771.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.9" y="782.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (3 samples, 0.86%)</title><rect x="168.9" y="755.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="171.9" y="766.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (3 samples, 0.86%)</title><rect x="168.9" y="739.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="171.9" y="750.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (3 samples, 0.86%)</title><rect x="168.9" y="723.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.9" y="734.0"></text>
</g>
<g>
<title>Java_java_net_SocketOutputStream_socketWrite0 (3 samples, 0.86%)</title><rect x="168.9" y="707.0" width="10.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="171.9" y="718.0"></text>
</g>
<g>
<title>sendto (3 samples, 0.86%)</title><rect x="168.9" y="691.0" width="10.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="171.9" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.setContextClassLoader (1 samples, 0.29%)</title><rect x="179.1" y="899.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.1" y="910.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.29%)</title><rect x="179.1" y="883.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="182.1" y="894.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (1 samples, 0.29%)</title><rect x="179.1" y="867.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="182.1" y="878.0"></text>
</g>
<g>
<title>thread_start (298 samples, 85.39%)</title><rect x="182.4" y="1059.0" width="1007.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="185.4" y="1070.0">thread_start</text>
</g>
<g>
<title>_pthread_start (298 samples, 85.39%)</title><rect x="182.4" y="1043.0" width="1007.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="185.4" y="1054.0">_pthread_start</text>
</g>
<g>
<title>thread_native_entry(Thread*) (298 samples, 85.39%)</title><rect x="182.4" y="1027.0" width="1007.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="185.4" y="1038.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (298 samples, 85.39%)</title><rect x="182.4" y="1011.0" width="1007.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="185.4" y="1022.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.29%)</title><rect x="182.4" y="995.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="185.4" y="1006.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.29%)</title><rect x="182.4" y="979.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="185.4" y="990.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.29%)</title><rect x="182.4" y="963.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="185.4" y="974.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.29%)</title><rect x="182.4" y="947.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="185.4" y="958.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.29%)</title><rect x="182.4" y="931.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="185.4" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.29%)</title><rect x="182.4" y="915.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="185.4" y="926.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.29%)</title><rect x="182.4" y="899.0" width="3.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="185.4" y="910.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.29%)</title><rect x="182.4" y="883.0" width="3.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="185.4" y="894.0"></text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 3.44%)</title><rect x="185.8" y="995.0" width="40.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="188.8" y="1006.0">Gan..</text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (5 samples, 1.43%)</title><rect x="185.8" y="979.0" width="16.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="188.8" y="990.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (5 samples, 1.43%)</title><rect x="185.8" y="963.0" width="16.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="188.8" y="974.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.57%)</title><rect x="185.8" y="947.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="188.8" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.57%)</title><rect x="185.8" y="931.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="188.8" y="942.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.29%)</title><rect x="185.8" y="915.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="188.8" y="926.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.29%)</title><rect x="185.8" y="899.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="188.8" y="910.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (1 samples, 0.29%)</title><rect x="189.2" y="915.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="192.2" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.29%)</title><rect x="189.2" y="899.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="192.2" y="910.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.29%)</title><rect x="192.6" y="947.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="195.6" y="958.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.29%)</title><rect x="192.6" y="931.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="195.6" y="942.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.29%)</title><rect x="192.6" y="915.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="195.6" y="926.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.29%)</title><rect x="192.6" y="899.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="195.6" y="910.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.29%)</title><rect x="192.6" y="883.0" width="3.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="195.6" y="894.0"></text>
</g>
<g>
<title>Thread::claim_oops_do_par_case(int) (2 samples, 0.57%)</title><rect x="196.0" y="947.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="199.0" y="958.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (7 samples, 2.01%)</title><rect x="202.7" y="979.0" width="23.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="205.7" y="990.0">S..</text>
</g>
<g>
<title>OSXSemaphore::wait() (1 samples, 0.29%)</title><rect x="202.7" y="963.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="205.7" y="974.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (6 samples, 1.72%)</title><rect x="206.1" y="963.0" width="20.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="209.1" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (267 samples, 76.50%)</title><rect x="226.4" y="995.0" width="902.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="229.4" y="1006.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (267 samples, 76.50%)</title><rect x="226.4" y="979.0" width="902.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="229.4" y="990.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (262 samples, 75.07%)</title><rect x="226.4" y="963.0" width="885.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="229.4" y="974.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (262 samples, 75.07%)</title><rect x="226.4" y="947.0" width="885.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="229.4" y="958.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (259 samples, 74.21%)</title><rect x="226.4" y="931.0" width="875.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="229.4" y="942.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.29%)</title><rect x="226.4" y="915.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="229.4" y="926.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.29%)</title><rect x="226.4" y="899.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="229.4" y="910.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.29%)</title><rect x="226.4" y="883.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="229.4" y="894.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.29%)</title><rect x="226.4" y="867.0" width="3.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="229.4" y="878.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.29%)</title><rect x="226.4" y="851.0" width="3.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="229.4" y="862.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.29%)</title><rect x="226.4" y="835.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="229.4" y="846.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (258 samples, 73.93%)</title><rect x="229.8" y="915.0" width="872.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="232.8" y="926.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Code_Gen() (188 samples, 53.87%)</title><rect x="229.8" y="899.0" width="635.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="232.8" y="910.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (6 samples, 1.72%)</title><rect x="229.8" y="883.0" width="20.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="232.8" y="894.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 1.15%)</title><rect x="229.8" y="867.0" width="13.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="232.8" y="878.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.57%)</title><rect x="236.5" y="851.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="239.5" y="862.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.29%)</title><rect x="239.9" y="835.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="242.9" y="846.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.57%)</title><rect x="243.3" y="867.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="246.3" y="878.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.57%)</title><rect x="243.3" y="851.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="246.3" y="862.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.57%)</title><rect x="243.3" y="835.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="246.3" y="846.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.29%)</title><rect x="243.3" y="819.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="246.3" y="830.0"></text>
</g>
<g>
<title>ciObject::constant_encoding() (1 samples, 0.29%)</title><rect x="246.7" y="819.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="249.7" y="830.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 1.72%)</title><rect x="250.1" y="883.0" width="20.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="253.1" y="894.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.29%)</title><rect x="250.1" y="867.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="253.1" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.29%)</title><rect x="250.1" y="851.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="253.1" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.29%)</title><rect x="250.1" y="835.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="253.1" y="846.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.29%)</title><rect x="250.1" y="819.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="253.1" y="830.0"></text>
</g>
<g>
<title>HandlerImpl::emit_exception_handler(CodeBuffer&amp;) (1 samples, 0.29%)</title><rect x="253.4" y="867.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="256.4" y="878.0"></text>
</g>
<g>
<title>MacroAssembler::jump(AddressLiteral) (1 samples, 0.29%)</title><rect x="253.4" y="851.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="256.4" y="862.0"></text>
</g>
<g>
<title>runtime_call_Relocation::type() (1 samples, 0.29%)</title><rect x="253.4" y="835.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="256.4" y="846.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (2 samples, 0.57%)</title><rect x="256.8" y="867.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="259.8" y="878.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_safepoint(JVMState*, int) (1 samples, 0.29%)</title><rect x="263.6" y="867.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="266.6" y="878.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.29%)</title><rect x="263.6" y="851.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="266.6" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.29%)</title><rect x="263.6" y="835.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="266.6" y="846.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::find_index(Metadata*) (1 samples, 0.29%)</title><rect x="263.6" y="819.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="266.6" y="830.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.29%)</title><rect x="263.6" y="803.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="266.6" y="814.0"></text>
</g>
<g>
<title>compI_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.29%)</title><rect x="267.0" y="867.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="270.0" y="878.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.29%)</title><rect x="270.3" y="883.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="273.3" y="894.0"></text>
</g>
<g>
<title>Matcher::match() (14 samples, 4.01%)</title><rect x="273.7" y="883.0" width="47.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="276.7" y="894.0">Matc..</text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.29%)</title><rect x="273.7" y="867.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="276.7" y="878.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.57%)</title><rect x="277.1" y="867.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="280.1" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 3.15%)</title><rect x="283.9" y="867.0" width="37.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="286.9" y="878.0">Mat..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.86%)</title><rect x="283.9" y="851.0" width="10.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="286.9" y="862.0"></text>
</g>
<g>
<title>Matcher::MStack::push(Node*, Matcher::Node_State, Node*, int) (1 samples, 0.29%)</title><rect x="294.0" y="851.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="297.0" y="862.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 1.43%)</title><rect x="297.4" y="851.0" width="16.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="300.4" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 0.57%)</title><rect x="304.2" y="835.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="307.2" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 0.57%)</title><rect x="304.2" y="819.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="307.2" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.29%)</title><rect x="307.5" y="803.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="310.5" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.29%)</title><rect x="307.5" y="787.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="310.5" y="798.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.29%)</title><rect x="307.5" y="771.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="310.5" y="782.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.29%)</title><rect x="307.5" y="755.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="310.5" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.29%)</title><rect x="310.9" y="835.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="313.9" y="846.0"></text>
</g>
<g>
<title>Node::ins_req(unsigned int, Node*) (1 samples, 0.29%)</title><rect x="310.9" y="819.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="313.9" y="830.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.29%)</title><rect x="310.9" y="803.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="313.9" y="814.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.29%)</title><rect x="314.3" y="851.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="317.3" y="862.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.29%)</title><rect x="317.7" y="851.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="320.7" y="862.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.29%)</title><rect x="317.7" y="835.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="320.7" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (25 samples, 7.16%)</title><rect x="321.1" y="883.0" width="84.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="324.1" y="894.0">PhaseCFG::..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (25 samples, 7.16%)</title><rect x="321.1" y="867.0" width="84.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="324.1" y="878.0">PhaseCFG::..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.29%)</title><rect x="321.1" y="851.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="324.1" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.57%)</title><rect x="324.4" y="851.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="327.4" y="862.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.29%)</title><rect x="327.8" y="835.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="330.8" y="846.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.29%)</title><rect x="327.8" y="819.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="330.8" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (6 samples, 1.72%)</title><rect x="331.2" y="851.0" width="20.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="334.2" y="862.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.29%)</title><rect x="334.6" y="835.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="337.6" y="846.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.86%)</title><rect x="338.0" y="835.0" width="10.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="341.0" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.29%)</title><rect x="348.1" y="835.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="351.1" y="846.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.29%)</title><rect x="348.1" y="819.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="351.1" y="830.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.29%)</title><rect x="348.1" y="803.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="351.1" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (4 samples, 1.15%)</title><rect x="351.5" y="851.0" width="13.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="354.5" y="862.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.29%)</title><rect x="351.5" y="835.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="354.5" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (2 samples, 0.57%)</title><rect x="354.9" y="835.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="357.9" y="846.0"></text>
</g>
<g>
<title>add_call_kills(MachProjNode*, RegMask&amp;, char const*, bool) (2 samples, 0.57%)</title><rect x="354.9" y="819.0" width="6.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="357.9" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.29%)</title><rect x="361.6" y="835.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="364.6" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.29%)</title><rect x="365.0" y="851.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="368.0" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.86%)</title><rect x="368.4" y="851.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="371.4" y="862.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.57%)</title><rect x="368.4" y="835.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="371.4" y="846.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.29%)</title><rect x="375.2" y="835.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="378.2" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 2.01%)</title><rect x="378.5" y="851.0" width="23.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="381.5" y="862.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.57%)</title><rect x="378.5" y="835.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="381.5" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 1.43%)</title><rect x="385.3" y="835.0" width="16.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="388.3" y="846.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.57%)</title><rect x="385.3" y="819.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="388.3" y="830.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.29%)</title><rect x="388.7" y="803.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="391.7" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.29%)</title><rect x="392.1" y="819.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="395.1" y="830.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (2 samples, 0.57%)</title><rect x="395.4" y="819.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="398.4" y="830.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.29%)</title><rect x="398.8" y="803.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="401.8" y="814.0"></text>
</g>
<g>
<title>RegMask::is_NotEmpty() const (1 samples, 0.29%)</title><rect x="402.2" y="851.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="405.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (2 samples, 0.57%)</title><rect x="405.6" y="883.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="408.6" y="894.0"></text>
</g>
<g>
<title>Block::is_Empty() const (1 samples, 0.29%)</title><rect x="405.6" y="867.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="408.6" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::move_to_end(Block*, unsigned int) (1 samples, 0.29%)</title><rect x="409.0" y="867.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="412.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (133 samples, 38.11%)</title><rect x="412.3" y="883.0" width="449.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="415.3" y="894.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.29%)</title><rect x="412.3" y="867.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="415.3" y="878.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.29%)</title><rect x="415.7" y="867.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="418.7" y="878.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (7 samples, 2.01%)</title><rect x="419.1" y="867.0" width="23.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="422.1" y="878.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Select() (8 samples, 2.29%)</title><rect x="442.8" y="867.0" width="27.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="445.8" y="878.0">P..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.29%)</title><rect x="446.2" y="851.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="449.2" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="449.5" y="851.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="452.5" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 1.43%)</title><rect x="452.9" y="851.0" width="16.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="455.9" y="862.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.86%)</title><rect x="452.9" y="835.0" width="10.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="455.9" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.57%)</title><rect x="463.1" y="835.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="466.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 1.43%)</title><rect x="469.8" y="867.0" width="16.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="472.8" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.57%)</title><rect x="473.2" y="851.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="476.2" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.57%)</title><rect x="480.0" y="851.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="483.0" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="483.4" y="835.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="486.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (25 samples, 7.16%)</title><rect x="486.7" y="867.0" width="84.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="489.7" y="878.0">PhaseChait..</text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.29%)</title><rect x="530.7" y="851.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="533.7" y="862.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.29%)</title><rect x="534.1" y="851.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="537.1" y="862.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.29%)</title><rect x="537.4" y="851.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="540.4" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.29%)</title><rect x="540.8" y="851.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="543.8" y="862.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.29%)</title><rect x="540.8" y="835.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="543.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::is_high_pressure(Block*, LRG*, unsigned int) (1 samples, 0.29%)</title><rect x="544.2" y="851.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="547.2" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.29%)</title><rect x="547.6" y="851.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="550.6" y="862.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.29%)</title><rect x="547.6" y="835.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="550.6" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.29%)</title><rect x="551.0" y="851.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="554.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.29%)</title><rect x="551.0" y="835.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="554.0" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.29%)</title><rect x="554.4" y="851.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="557.4" y="862.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.29%)</title><rect x="557.7" y="851.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="560.7" y="862.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.29%)</title><rect x="557.7" y="835.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="560.7" y="846.0"></text>
</g>
<g>
<title>loadINode::rule() const (1 samples, 0.29%)</title><rect x="561.1" y="851.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="564.1" y="862.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.29%)</title><rect x="564.5" y="851.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="567.5" y="862.0"></text>
</g>
<g>
<title>loadPNode::rule() const (1 samples, 0.29%)</title><rect x="567.9" y="851.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="570.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (21 samples, 6.02%)</title><rect x="571.3" y="867.0" width="71.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="574.3" y="878.0">PhaseCha..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.29%)</title><rect x="578.0" y="851.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="581.0" y="862.0"></text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.29%)</title><rect x="581.4" y="851.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="584.4" y="862.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.29%)</title><rect x="584.8" y="851.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="587.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.57%)</title><rect x="588.2" y="851.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="591.2" y="862.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.29%)</title><rect x="591.5" y="835.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="594.5" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (1 samples, 0.29%)</title><rect x="594.9" y="851.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="597.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.29%)</title><rect x="594.9" y="835.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="597.9" y="846.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.29%)</title><rect x="594.9" y="819.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="597.9" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 2.01%)</title><rect x="598.3" y="851.0" width="23.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="601.3" y="862.0">P..</text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 1.15%)</title><rect x="601.7" y="835.0" width="13.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="604.7" y="846.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.57%)</title><rect x="608.5" y="819.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="611.5" y="830.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (2 samples, 0.57%)</title><rect x="608.5" y="803.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="611.5" y="814.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="611.8" y="787.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="614.8" y="798.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="611.8" y="771.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="614.8" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.57%)</title><rect x="615.2" y="835.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="618.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 1.15%)</title><rect x="622.0" y="851.0" width="13.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="625.0" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.57%)</title><rect x="622.0" y="835.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="625.0" y="846.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.57%)</title><rect x="628.7" y="835.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="631.7" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.29%)</title><rect x="635.5" y="851.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="638.5" y="862.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.29%)</title><rect x="638.9" y="851.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="641.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.57%)</title><rect x="642.3" y="867.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="645.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.57%)</title><rect x="642.3" y="851.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="645.3" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.29%)</title><rect x="642.3" y="835.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="645.3" y="846.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.29%)</title><rect x="645.6" y="835.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="648.6" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.29%)</title><rect x="649.0" y="867.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="652.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.29%)</title><rect x="652.4" y="867.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="655.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (11 samples, 3.15%)</title><rect x="655.8" y="867.0" width="37.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="658.8" y="878.0">Pha..</text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.29%)</title><rect x="662.6" y="851.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="665.6" y="862.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (2 samples, 0.57%)</title><rect x="665.9" y="851.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="668.9" y="862.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.29%)</title><rect x="669.3" y="835.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="672.3" y="846.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (4 samples, 1.15%)</title><rect x="672.7" y="851.0" width="13.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="675.7" y="862.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.86%)</title><rect x="672.7" y="835.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="675.7" y="846.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.29%)</title><rect x="682.8" y="835.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="685.8" y="846.0"></text>
</g>
<g>
<title>immIOper::constant() const (1 samples, 0.29%)</title><rect x="686.2" y="851.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="689.2" y="862.0"></text>
</g>
<g>
<title>rRegIOper::in_RegMask(int) const (1 samples, 0.29%)</title><rect x="689.6" y="851.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="692.6" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.29%)</title><rect x="693.0" y="867.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="696.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (23 samples, 6.59%)</title><rect x="696.4" y="867.0" width="77.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="699.4" y="878.0">PhaseChai..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (5 samples, 1.43%)</title><rect x="709.9" y="851.0" width="16.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="712.9" y="862.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="709.9" y="835.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="712.9" y="846.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="709.9" y="819.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="712.9" y="830.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="709.9" y="803.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="712.9" y="814.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="709.9" y="787.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="712.9" y="798.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.29%)</title><rect x="709.9" y="771.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="712.9" y="782.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.29%)</title><rect x="709.9" y="755.0" width="3.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="712.9" y="766.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.29%)</title><rect x="709.9" y="739.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="712.9" y="750.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.29%)</title><rect x="709.9" y="723.0" width="3.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="712.9" y="734.0"></text>
</g>
<g>
<title>small_malloc_should_clear (1 samples, 0.29%)</title><rect x="709.9" y="707.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="712.9" y="718.0"></text>
</g>
<g>
<title>small_malloc_from_free_list (1 samples, 0.29%)</title><rect x="709.9" y="691.0" width="3.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="712.9" y="702.0"></text>
</g>
<g>
<title>small_free_list_remove_ptr_no_clear (1 samples, 0.29%)</title><rect x="709.9" y="675.0" width="3.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="712.9" y="686.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (4 samples, 1.15%)</title><rect x="713.3" y="835.0" width="13.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="716.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (11 samples, 3.15%)</title><rect x="726.8" y="851.0" width="37.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="729.8" y="862.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (2 samples, 0.57%)</title><rect x="757.2" y="835.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="760.2" y="846.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.29%)</title><rect x="757.2" y="819.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="760.2" y="830.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.29%)</title><rect x="757.2" y="803.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="760.2" y="814.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.29%)</title><rect x="757.2" y="787.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="760.2" y="798.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.29%)</title><rect x="757.2" y="771.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="760.2" y="782.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.29%)</title><rect x="757.2" y="755.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="760.2" y="766.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.29%)</title><rect x="757.2" y="739.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="760.2" y="750.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.29%)</title><rect x="757.2" y="723.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="760.2" y="734.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.29%)</title><rect x="760.6" y="819.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="763.6" y="830.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.29%)</title><rect x="760.6" y="803.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="763.6" y="814.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (3 samples, 0.86%)</title><rect x="764.0" y="851.0" width="10.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.0" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 2.29%)</title><rect x="774.1" y="867.0" width="27.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="777.1" y="878.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.57%)</title><rect x="774.1" y="851.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="777.1" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 1.72%)</title><rect x="780.9" y="851.0" width="20.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="783.9" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 1.72%)</title><rect x="780.9" y="835.0" width="20.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="783.9" y="846.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.29%)</title><rect x="780.9" y="819.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="783.9" y="830.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.29%)</title><rect x="780.9" y="803.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="783.9" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.29%)</title><rect x="784.3" y="819.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="787.3" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.86%)</title><rect x="787.7" y="819.0" width="10.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="790.7" y="830.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.86%)</title><rect x="787.7" y="803.0" width="10.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="790.7" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.29%)</title><rect x="797.8" y="819.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="800.8" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="797.8" y="803.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="800.8" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (6 samples, 1.72%)</title><rect x="801.2" y="867.0" width="20.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="804.2" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (6 samples, 1.72%)</title><rect x="801.2" y="851.0" width="20.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="804.2" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.86%)</title><rect x="804.6" y="835.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="807.6" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.57%)</title><rect x="814.7" y="835.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="817.7" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.29%)</title><rect x="821.5" y="867.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="824.5" y="878.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.29%)</title><rect x="821.5" y="851.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="824.5" y="862.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.29%)</title><rect x="821.5" y="835.0" width="3.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="824.5" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.86%)</title><rect x="824.8" y="867.0" width="10.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="827.8" y="878.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.29%)</title><rect x="824.8" y="851.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="827.8" y="862.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.57%)</title><rect x="828.2" y="851.0" width="6.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="831.2" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 1.72%)</title><rect x="835.0" y="867.0" width="20.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="838.0" y="878.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.29%)</title><rect x="845.1" y="851.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="848.1" y="862.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.57%)</title><rect x="848.5" y="851.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="851.5" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.57%)</title><rect x="848.5" y="835.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="851.5" y="846.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.29%)</title><rect x="855.3" y="867.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="858.3" y="878.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (1 samples, 0.29%)</title><rect x="858.7" y="867.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="861.7" y="878.0"></text>
</g>
<g>
<title>orL_rReg_castP2X_0Node::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.29%)</title><rect x="862.0" y="883.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="865.0" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (51 samples, 14.61%)</title><rect x="865.4" y="899.0" width="172.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="868.4" y="910.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.57%)</title><rect x="865.4" y="883.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="868.4" y="894.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.57%)</title><rect x="865.4" y="867.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="868.4" y="878.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (2 samples, 0.57%)</title><rect x="865.4" y="851.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.4" y="862.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.29%)</title><rect x="868.8" y="835.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="871.8" y="846.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.29%)</title><rect x="868.8" y="819.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="871.8" y="830.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (18 samples, 5.16%)</title><rect x="872.2" y="883.0" width="60.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="875.2" y="894.0">Compil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (18 samples, 5.16%)</title><rect x="872.2" y="867.0" width="60.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="875.2" y="878.0">PhaseI..</text>
</g>
<g>
<title>Compile::cleanup_loop_predicates(PhaseIterGVN&amp;) (1 samples, 0.29%)</title><rect x="872.2" y="851.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="875.2" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.29%)</title><rect x="872.2" y="835.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.2" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.29%)</title><rect x="872.2" y="819.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="875.2" y="830.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.29%)</title><rect x="872.2" y="803.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.2" y="814.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.29%)</title><rect x="872.2" y="787.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="875.2" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.29%)</title><rect x="875.6" y="851.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="878.6" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.29%)</title><rect x="875.6" y="835.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.6" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.29%)</title><rect x="875.6" y="819.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.6" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.29%)</title><rect x="875.6" y="803.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="878.6" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.29%)</title><rect x="875.6" y="787.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="878.6" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.29%)</title><rect x="875.6" y="771.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.6" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.29%)</title><rect x="875.6" y="755.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="878.6" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.29%)</title><rect x="875.6" y="739.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="878.6" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.29%)</title><rect x="875.6" y="723.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="878.6" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.29%)</title><rect x="875.6" y="707.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="878.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.29%)</title><rect x="875.6" y="691.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="878.6" y="702.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason) (1 samples, 0.29%)</title><rect x="875.6" y="675.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="878.6" y="686.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.29%)</title><rect x="875.6" y="659.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="878.6" y="670.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.57%)</title><rect x="878.9" y="851.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="881.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.86%)</title><rect x="885.7" y="851.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="888.7" y="862.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.29%)</title><rect x="892.5" y="835.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="895.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.29%)</title><rect x="895.8" y="851.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.86%)</title><rect x="899.2" y="851.0" width="10.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="902.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.57%)</title><rect x="899.2" y="835.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="902.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.29%)</title><rect x="902.6" y="819.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="905.6" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.29%)</title><rect x="902.6" y="803.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="905.6" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.29%)</title><rect x="906.0" y="835.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="909.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.29%)</title><rect x="909.4" y="851.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="912.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (5 samples, 1.43%)</title><rect x="912.8" y="851.0" width="16.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="915.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (2 samples, 0.57%)</title><rect x="916.1" y="835.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="919.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_store_after_loop(Node*) (1 samples, 0.29%)</title><rect x="919.5" y="819.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.57%)</title><rect x="922.9" y="835.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="925.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.29%)</title><rect x="922.9" y="819.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="925.9" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.29%)</title><rect x="922.9" y="803.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="925.9" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.29%)</title><rect x="922.9" y="787.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="925.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.29%)</title><rect x="926.3" y="819.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="929.3" y="830.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseGVN*) const (1 samples, 0.29%)</title><rect x="926.3" y="803.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="929.3" y="814.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.29%)</title><rect x="926.3" y="787.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="929.3" y="798.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="926.3" y="771.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="929.3" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.29%)</title><rect x="929.7" y="851.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="932.7" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.29%)</title><rect x="929.7" y="835.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="932.7" y="846.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.29%)</title><rect x="929.7" y="819.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="932.7" y="830.0"></text>
</g>
<g>
<title>TypeNarrowPtr::filter_helper(Type const*, bool) const (1 samples, 0.29%)</title><rect x="929.7" y="803.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="932.7" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="929.7" y="787.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="932.7" y="798.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.29%)</title><rect x="933.0" y="883.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="936.0" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.29%)</title><rect x="933.0" y="867.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="936.0" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.29%)</title><rect x="933.0" y="851.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.0" y="862.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.29%)</title><rect x="933.0" y="835.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.29%)</title><rect x="936.4" y="883.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="939.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.29%)</title><rect x="936.4" y="867.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="939.4" y="878.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.29%)</title><rect x="936.4" y="851.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="939.4" y="862.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::grow(int) (1 samples, 0.29%)</title><rect x="936.4" y="835.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.4" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.57%)</title><rect x="939.8" y="883.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.8" y="894.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.29%)</title><rect x="943.2" y="867.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="946.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (18 samples, 5.16%)</title><rect x="946.6" y="883.0" width="60.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="949.6" y="894.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.57%)</title><rect x="946.6" y="867.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="949.6" y="878.0"></text>
</g>
<g>
<title>NTarjan::EVAL() (1 samples, 0.29%)</title><rect x="949.9" y="851.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.9" y="862.0"></text>
</g>
<g>
<title>NTarjan::COMPRESS() (1 samples, 0.29%)</title><rect x="949.9" y="835.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.57%)</title><rect x="953.3" y="867.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="956.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 1.72%)</title><rect x="960.1" y="867.0" width="20.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="963.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 1.72%)</title><rect x="960.1" y="851.0" width="20.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="963.1" y="862.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.29%)</title><rect x="960.1" y="835.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="963.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.29%)</title><rect x="963.5" y="835.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="966.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.29%)</title><rect x="963.5" y="819.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="966.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.86%)</title><rect x="966.8" y="835.0" width="10.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="969.8" y="846.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.29%)</title><rect x="970.2" y="819.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.2" y="830.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.29%)</title><rect x="970.2" y="803.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.29%)</title><rect x="973.6" y="819.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="976.6" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.29%)</title><rect x="973.6" y="803.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.6" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.29%)</title><rect x="973.6" y="787.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.29%)</title><rect x="977.0" y="835.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.29%)</title><rect x="977.0" y="819.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.0" y="830.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.29%)</title><rect x="977.0" y="803.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.57%)</title><rect x="980.4" y="867.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.4" y="878.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.29%)</title><rect x="980.4" y="851.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="983.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.29%)</title><rect x="983.8" y="851.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.86%)</title><rect x="987.1" y="867.0" width="10.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="990.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.29%)</title><rect x="987.1" y="851.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.57%)</title><rect x="990.5" y="851.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="993.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.29%)</title><rect x="990.5" y="835.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="993.5" y="846.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.29%)</title><rect x="990.5" y="819.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="993.5" y="830.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.29%)</title><rect x="990.5" y="803.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="993.5" y="814.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.29%)</title><rect x="990.5" y="787.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="993.5" y="798.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="990.5" y="771.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="993.5" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.29%)</title><rect x="993.9" y="835.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="996.9" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.29%)</title><rect x="993.9" y="819.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.9" y="830.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.29%)</title><rect x="993.9" y="803.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="996.9" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.86%)</title><rect x="997.3" y="867.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.3" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.86%)</title><rect x="997.3" y="851.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.3" y="862.0"></text>
</g>
<g>
<title>AddNode::hash() const (1 samples, 0.29%)</title><rect x="997.3" y="835.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.3" y="846.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseGVN*) (1 samples, 0.29%)</title><rect x="1000.7" y="835.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1003.7" y="846.0"></text>
</g>
<g>
<title>ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const (1 samples, 0.29%)</title><rect x="1000.7" y="819.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1003.7" y="830.0"></text>
</g>
<g>
<title>PhaseGVN::is_dominator_helper(Node*, Node*, bool) (1 samples, 0.29%)</title><rect x="1000.7" y="803.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1003.7" y="814.0"></text>
</g>
<g>
<title>IfNode::up_one_dom(Node*, bool) (1 samples, 0.29%)</title><rect x="1000.7" y="787.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1003.7" y="798.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.29%)</title><rect x="1004.0" y="835.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.0" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.29%)</title><rect x="1007.4" y="883.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1010.4" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.29%)</title><rect x="1007.4" y="867.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.43%)</title><rect x="1010.8" y="883.0" width="16.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.8" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.43%)</title><rect x="1010.8" y="867.0" width="16.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1013.8" y="878.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1014.2" y="851.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1017.2" y="862.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1014.2" y="835.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1017.2" y="846.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.29%)</title><rect x="1014.2" y="819.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1017.2" y="830.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.29%)</title><rect x="1014.2" y="803.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.2" y="814.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1017.6" y="851.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.6" y="862.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.29%)</title><rect x="1017.6" y="835.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1020.6" y="846.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1020.9" y="851.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.9" y="862.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1024.3" y="851.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1027.3" y="862.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.29%)</title><rect x="1024.3" y="835.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1027.3" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.29%)</title><rect x="1027.7" y="883.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.7" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.29%)</title><rect x="1027.7" y="867.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.29%)</title><rect x="1027.7" y="851.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.7" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.29%)</title><rect x="1027.7" y="835.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.7" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.29%)</title><rect x="1027.7" y="819.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.7" y="830.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.29%)</title><rect x="1031.1" y="883.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1034.1" y="894.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.29%)</title><rect x="1031.1" y="867.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.1" y="878.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.29%)</title><rect x="1034.5" y="883.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.5" y="894.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.29%)</title><rect x="1034.5" y="867.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.5" y="878.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.29%)</title><rect x="1034.5" y="851.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.5" y="862.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.29%)</title><rect x="1034.5" y="835.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1037.5" y="846.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.29%)</title><rect x="1034.5" y="819.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1037.5" y="830.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.29%)</title><rect x="1034.5" y="803.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1037.5" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 4.87%)</title><rect x="1037.9" y="899.0" width="57.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.9" y="910.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 4.87%)</title><rect x="1037.9" y="883.0" width="57.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.9" y="894.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 4.87%)</title><rect x="1037.9" y="867.0" width="57.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.9" y="878.0">Parse:..</text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 4.87%)</title><rect x="1037.9" y="851.0" width="57.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1040.9" y="862.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (15 samples, 4.30%)</title><rect x="1037.9" y="835.0" width="50.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.9" y="846.0">Parse..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1037.9" y="819.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1040.9" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1037.9" y="803.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1040.9" y="814.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.29%)</title><rect x="1037.9" y="787.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1040.9" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.29%)</title><rect x="1037.9" y="771.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.29%)</title><rect x="1037.9" y="755.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.29%)</title><rect x="1037.9" y="739.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1037.9" y="723.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1040.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 4.01%)</title><rect x="1041.2" y="819.0" width="47.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1044.2" y="830.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 4.01%)</title><rect x="1041.2" y="803.0" width="47.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1044.2" y="814.0">Pars..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.29%)</title><rect x="1041.2" y="787.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1044.2" y="798.0"></text>
</g>
<g>
<title>GraphKit::transfer_exceptions_into_jvms() (1 samples, 0.29%)</title><rect x="1041.2" y="771.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1044.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 3.72%)</title><rect x="1044.6" y="787.0" width="44.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.6" y="798.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 3.72%)</title><rect x="1044.6" y="771.0" width="44.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.6" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (12 samples, 3.44%)</title><rect x="1044.6" y="755.0" width="40.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.6" y="766.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1044.6" y="739.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.6" y="750.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1044.6" y="723.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1047.6" y="734.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.29%)</title><rect x="1044.6" y="707.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.6" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.29%)</title><rect x="1044.6" y="691.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.6" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.29%)</title><rect x="1044.6" y="675.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.6" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.29%)</title><rect x="1044.6" y="659.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.6" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1044.6" y="643.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.6" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1044.6" y="627.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.6" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.29%)</title><rect x="1044.6" y="611.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1047.6" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.29%)</title><rect x="1044.6" y="595.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1047.6" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.29%)</title><rect x="1044.6" y="579.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.6" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="1044.6" y="563.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.6" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.29%)</title><rect x="1044.6" y="547.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.6" y="558.0"></text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.29%)</title><rect x="1048.0" y="739.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.0" y="750.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.29%)</title><rect x="1048.0" y="723.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1051.0" y="734.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.29%)</title><rect x="1048.0" y="707.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.0" y="718.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_leaf_type() (1 samples, 0.29%)</title><rect x="1048.0" y="691.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.0" y="702.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.29%)</title><rect x="1048.0" y="675.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1051.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.29%)</title><rect x="1051.4" y="739.0" width="27.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.4" y="750.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.29%)</title><rect x="1051.4" y="723.0" width="27.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.4" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.29%)</title><rect x="1051.4" y="707.0" width="27.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.4" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.29%)</title><rect x="1051.4" y="691.0" width="27.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.4" y="702.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.29%)</title><rect x="1051.4" y="675.0" width="27.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.4" y="686.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.29%)</title><rect x="1051.4" y="659.0" width="27.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1054.4" y="670.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.29%)</title><rect x="1051.4" y="643.0" width="27.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.4" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.29%)</title><rect x="1051.4" y="627.0" width="27.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1054.4" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.29%)</title><rect x="1051.4" y="611.0" width="27.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1054.4" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.29%)</title><rect x="1051.4" y="595.0" width="27.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.4" y="606.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1051.4" y="579.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1054.4" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1051.4" y="563.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.4" y="574.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.29%)</title><rect x="1051.4" y="547.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.43%)</title><rect x="1054.8" y="579.0" width="16.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.43%)</title><rect x="1054.8" y="563.0" width="16.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.8" y="574.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.29%)</title><rect x="1054.8" y="547.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.8" y="558.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.29%)</title><rect x="1054.8" y="531.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.8" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.29%)</title><rect x="1054.8" y="515.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1057.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.15%)</title><rect x="1058.1" y="547.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.15%)</title><rect x="1058.1" y="531.0" width="13.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1058.1" y="515.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1058.1" y="499.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1058.1" y="483.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1058.1" y="467.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1058.1" y="451.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1058.1" y="435.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1058.1" y="419.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1058.1" y="403.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1058.1" y="387.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1058.1" y="371.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.1" y="382.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.29%)</title><rect x="1058.1" y="355.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.1" y="366.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.29%)</title><rect x="1058.1" y="339.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.1" y="350.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.29%)</title><rect x="1058.1" y="323.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.29%)</title><rect x="1061.5" y="515.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.29%)</title><rect x="1061.5" y="499.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.5" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.29%)</title><rect x="1061.5" y="483.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.5" y="494.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.29%)</title><rect x="1061.5" y="467.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1064.5" y="478.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.29%)</title><rect x="1061.5" y="451.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.5" y="462.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.29%)</title><rect x="1061.5" y="435.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1064.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.29%)</title><rect x="1064.9" y="515.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.9" y="526.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.29%)</title><rect x="1064.9" y="499.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.9" y="510.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1064.9" y="483.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1067.9" y="494.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.29%)</title><rect x="1068.3" y="515.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.3" y="526.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.29%)</title><rect x="1068.3" y="499.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1071.3" y="510.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.29%)</title><rect x="1068.3" y="483.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.3" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1071.7" y="579.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1071.7" y="563.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1074.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1071.7" y="547.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1074.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1071.7" y="531.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1071.7" y="515.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1071.7" y="499.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1071.7" y="483.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1071.7" y="467.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1071.7" y="451.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1071.7" y="435.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1071.7" y="419.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1071.7" y="403.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1074.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1071.7" y="387.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1071.7" y="371.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1071.7" y="355.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1074.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1071.7" y="339.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1071.7" y="323.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1071.7" y="307.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1071.7" y="291.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1074.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1071.7" y="275.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1071.7" y="259.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1071.7" y="243.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1074.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1071.7" y="227.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1071.7" y="211.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1074.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1071.7" y="195.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1074.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1071.7" y="179.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.7" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1071.7" y="163.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.7" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1071.7" y="147.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.29%)</title><rect x="1071.7" y="131.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.7" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1075.0" y="563.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1078.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1075.0" y="547.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1075.0" y="531.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1078.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1075.0" y="515.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1075.0" y="499.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1075.0" y="483.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1075.0" y="467.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1075.0" y="451.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1078.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1075.0" y="435.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1075.0" y="419.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1075.0" y="403.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1075.0" y="387.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1075.0" y="371.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1075.0" y="355.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1078.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1075.0" y="339.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1075.0" y="323.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1075.0" y="307.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1078.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1075.0" y="291.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1075.0" y="275.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1075.0" y="259.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1075.0" y="243.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1075.0" y="227.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.0" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1075.0" y="211.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1075.0" y="195.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1078.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1075.0" y="179.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1075.0" y="163.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.0" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1075.0" y="147.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1078.0" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1075.0" y="131.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1075.0" y="115.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1075.0" y="99.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1075.0" y="83.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.0" y="94.0"></text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.29%)</title><rect x="1075.0" y="67.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.0" y="78.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.29%)</title><rect x="1075.0" y="51.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.0" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.29%)</title><rect x="1075.0" y="35.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.57%)</title><rect x="1078.4" y="739.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1078.4" y="723.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1078.4" y="707.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1078.4" y="691.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1078.4" y="675.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1078.4" y="659.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1078.4" y="643.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1078.4" y="627.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1078.4" y="611.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1078.4" y="595.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1078.4" y="579.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1078.4" y="563.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1078.4" y="547.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1078.4" y="531.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1078.4" y="515.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1078.4" y="499.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1078.4" y="483.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1078.4" y="467.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1078.4" y="451.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1078.4" y="435.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1081.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1078.4" y="419.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1078.4" y="403.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.4" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1078.4" y="387.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1078.4" y="371.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1081.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1078.4" y="355.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1078.4" y="339.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1078.4" y="323.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1078.4" y="307.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1078.4" y="291.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1081.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1078.4" y="275.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1078.4" y="259.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1081.4" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1078.4" y="243.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.4" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1078.4" y="227.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1078.4" y="211.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1078.4" y="195.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1078.4" y="179.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.4" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1078.4" y="163.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.4" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1078.4" y="147.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.29%)</title><rect x="1078.4" y="131.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.4" y="142.0"></text>
</g>
<g>
<title>ciMethod::is_initializer() const (1 samples, 0.29%)</title><rect x="1078.4" y="115.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.4" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1081.8" y="723.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1081.8" y="707.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1081.8" y="691.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1081.8" y="675.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1081.8" y="659.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1081.8" y="643.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1081.8" y="627.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1081.8" y="611.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1081.8" y="595.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1084.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1081.8" y="579.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1081.8" y="563.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1084.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1081.8" y="547.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1081.8" y="531.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1081.8" y="515.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1084.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1081.8" y="499.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1081.8" y="483.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1084.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1081.8" y="467.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1081.8" y="451.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1081.8" y="435.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1081.8" y="419.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1081.8" y="403.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1081.8" y="387.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1084.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1081.8" y="371.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1081.8" y="355.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1081.8" y="339.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1081.8" y="323.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1084.8" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1081.8" y="307.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.8" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1081.8" y="291.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.8" y="302.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.29%)</title><rect x="1081.8" y="275.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1084.8" y="286.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.29%)</title><rect x="1081.8" y="259.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.8" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.29%)</title><rect x="1081.8" y="243.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1084.8" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.29%)</title><rect x="1081.8" y="227.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1084.8" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1081.8" y="211.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.8" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1081.8" y="195.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.8" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.29%)</title><rect x="1081.8" y="179.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.8" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.29%)</title><rect x="1081.8" y="163.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.8" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.29%)</title><rect x="1081.8" y="147.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.8" y="158.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.29%)</title><rect x="1081.8" y="131.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.8" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.29%)</title><rect x="1081.8" y="115.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.29%)</title><rect x="1085.2" y="755.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.2" y="766.0"></text>
</g>
<g>
<title>Parse::maybe_add_predicate_after_if(Parse::Block*) (1 samples, 0.29%)</title><rect x="1085.2" y="739.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.2" y="750.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicates(int) (1 samples, 0.29%)</title><rect x="1085.2" y="723.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1088.2" y="734.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.29%)</title><rect x="1085.2" y="707.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.2" y="718.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.29%)</title><rect x="1085.2" y="691.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1088.2" y="702.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.29%)</title><rect x="1085.2" y="675.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.2" y="686.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.29%)</title><rect x="1085.2" y="659.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.2" y="670.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.29%)</title><rect x="1085.2" y="643.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.29%)</title><rect x="1088.6" y="835.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.6" y="846.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.29%)</title><rect x="1088.6" y="819.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.6" y="830.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.29%)</title><rect x="1088.6" y="803.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.6" y="814.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.29%)</title><rect x="1088.6" y="787.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.6" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.29%)</title><rect x="1088.6" y="771.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1091.9" y="835.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.29%)</title><rect x="1091.9" y="819.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.9" y="830.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1091.9" y="803.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.9" y="814.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.29%)</title><rect x="1095.3" y="899.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.3" y="910.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, char*, int, int, char const*, FailedSpeculation**) (1 samples, 0.29%)</title><rect x="1095.3" y="883.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.3" y="894.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, char*, int, int) (1 samples, 0.29%)</title><rect x="1095.3" y="867.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.3" y="878.0"></text>
</g>
<g>
<title>CodeBuffer::copy_relocations_to(unsigned char*, int, bool) const (1 samples, 0.29%)</title><rect x="1095.3" y="851.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.3" y="862.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (1 samples, 0.29%)</title><rect x="1095.3" y="835.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.3" y="846.0"></text>
</g>
<g>
<title>nmethod::make_not_used() (1 samples, 0.29%)</title><rect x="1098.7" y="899.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.7" y="910.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.86%)</title><rect x="1102.1" y="931.0" width="10.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.1" y="942.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.86%)</title><rect x="1102.1" y="915.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.1" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.86%)</title><rect x="1102.1" y="899.0" width="10.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.1" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.86%)</title><rect x="1102.1" y="883.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.1" y="894.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 0.86%)</title><rect x="1102.1" y="867.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.1" y="878.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 0.86%)</title><rect x="1102.1" y="851.0" width="10.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.1" y="862.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.57%)</title><rect x="1102.1" y="835.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.1" y="846.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.29%)</title><rect x="1102.1" y="819.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.1" y="830.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.29%)</title><rect x="1102.1" y="803.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.1" y="814.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (1 samples, 0.29%)</title><rect x="1102.1" y="787.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.1" y="798.0"></text>
</g>
<g>
<title>LinearScanWalker::split_and_spill_interval(Interval*) (1 samples, 0.29%)</title><rect x="1102.1" y="771.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.1" y="782.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 0.29%)</title><rect x="1102.1" y="755.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.1" y="766.0"></text>
</g>
<g>
<title>Interval::split(int) (1 samples, 0.29%)</title><rect x="1102.1" y="739.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.1" y="750.0"></text>
</g>
<g>
<title>LinearScanWalker::LinearScanWalker(LinearScan*, Interval*, Interval*) (1 samples, 0.29%)</title><rect x="1105.5" y="819.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.5" y="830.0"></text>
</g>
<g>
<title>MoveResolver::MoveResolver(LinearScan*) (1 samples, 0.29%)</title><rect x="1105.5" y="803.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.5" y="814.0"></text>
</g>
<g>
<title>GrowableArray&lt;Interval*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.29%)</title><rect x="1105.5" y="787.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.5" y="798.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="1105.5" y="771.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.5" y="782.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.29%)</title><rect x="1108.9" y="835.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.9" y="846.0"></text>
</g>
<g>
<title>MoveResolver::MoveResolver(LinearScan*) (1 samples, 0.29%)</title><rect x="1108.9" y="819.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.9" y="830.0"></text>
</g>
<g>
<title>GrowableArray&lt;LIR_Op*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.29%)</title><rect x="1108.9" y="803.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.9" y="814.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (3 samples, 0.86%)</title><rect x="1112.2" y="963.0" width="10.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.2" y="974.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (3 samples, 0.86%)</title><rect x="1112.2" y="947.0" width="10.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.2" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (3 samples, 0.86%)</title><rect x="1112.2" y="931.0" width="10.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.2" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (3 samples, 0.86%)</title><rect x="1112.2" y="915.0" width="10.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.2" y="926.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (2 samples, 0.57%)</title><rect x="1112.2" y="899.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.2" y="910.0"></text>
</g>
<g>
<title>RelocIterator::next() (2 samples, 0.57%)</title><rect x="1112.2" y="883.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.2" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_flush(nmethod*) (1 samples, 0.29%)</title><rect x="1119.0" y="899.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.0" y="910.0"></text>
</g>
<g>
<title>CodeCache::reverse_free_ratio(int) (1 samples, 0.29%)</title><rect x="1119.0" y="883.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.0" y="894.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.29%)</title><rect x="1122.4" y="963.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.4" y="974.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.29%)</title><rect x="1122.4" y="947.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.4" y="958.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.29%)</title><rect x="1122.4" y="931.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.4" y="942.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.29%)</title><rect x="1122.4" y="915.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.4" y="926.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.29%)</title><rect x="1122.4" y="899.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.4" y="910.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.29%)</title><rect x="1122.4" y="883.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.4" y="894.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.29%)</title><rect x="1122.4" y="867.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.4" y="878.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.29%)</title><rect x="1125.8" y="963.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1128.8" y="974.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.29%)</title><rect x="1125.8" y="947.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1128.8" y="958.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.29%)</title><rect x="1125.8" y="931.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.8" y="942.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.29%)</title><rect x="1125.8" y="915.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1128.8" y="926.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.29%)</title><rect x="1125.8" y="899.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.8" y="910.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.29%)</title><rect x="1125.8" y="883.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.8" y="894.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::flush() (1 samples, 0.29%)</title><rect x="1125.8" y="867.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.8" y="878.0"></text>
</g>
<g>
<title>std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sync() (1 samples, 0.29%)</title><rect x="1125.8" y="851.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.8" y="862.0"></text>
</g>
<g>
<title>fflush (1 samples, 0.29%)</title><rect x="1125.8" y="835.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1128.8" y="846.0"></text>
</g>
<g>
<title>__sflush (1 samples, 0.29%)</title><rect x="1125.8" y="819.0" width="3.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1128.8" y="830.0"></text>
</g>
<g>
<title>__write_nocancel (1 samples, 0.29%)</title><rect x="1125.8" y="803.0" width="3.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1128.8" y="814.0"></text>
</g>
<g>
<title>VMThread::run() (9 samples, 2.58%)</title><rect x="1129.1" y="995.0" width="30.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.1" y="1006.0">VM..</text>
</g>
<g>
<title>VMThread::loop() (9 samples, 2.58%)</title><rect x="1129.1" y="979.0" width="30.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.1" y="990.0">VM..</text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.86%)</title><rect x="1129.1" y="963.0" width="10.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.1" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.86%)</title><rect x="1129.1" y="947.0" width="10.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.1" y="958.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.86%)</title><rect x="1129.1" y="931.0" width="10.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.1" y="942.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.29%)</title><rect x="1129.1" y="915.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1132.1" y="926.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.57%)</title><rect x="1132.5" y="915.0" width="6.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1135.5" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (4 samples, 1.15%)</title><rect x="1139.3" y="963.0" width="13.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.3" y="974.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (3 samples, 0.86%)</title><rect x="1142.7" y="947.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.7" y="958.0"></text>
</g>
<g>
<title>MallocTracker::record_free(void*) (1 samples, 0.29%)</title><rect x="1142.7" y="931.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.7" y="942.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (2 samples, 0.57%)</title><rect x="1146.0" y="931.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.0" y="942.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.57%)</title><rect x="1146.0" y="915.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.0" y="926.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (2 samples, 0.57%)</title><rect x="1146.0" y="899.0" width="6.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1149.0" y="910.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.57%)</title><rect x="1152.8" y="963.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.8" y="974.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.57%)</title><rect x="1152.8" y="947.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.8" y="958.0"></text>
</g>
<g>
<title>VM_ThreadDump::doit() (2 samples, 0.57%)</title><rect x="1152.8" y="931.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.8" y="942.0"></text>
</g>
<g>
<title>VM_ThreadDump::snapshot_thread(JavaThread*, ThreadConcurrentLocks*) (1 samples, 0.29%)</title><rect x="1156.2" y="915.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.2" y="926.0"></text>
</g>
<g>
<title>ThreadStackTrace::dump_stack_at_safepoint(int) (1 samples, 0.29%)</title><rect x="1156.2" y="899.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="910.0"></text>
</g>
<g>
<title>ThreadStackTrace::add_stack_frame(javaVFrame*) (1 samples, 0.29%)</title><rect x="1156.2" y="883.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="894.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="1156.2" y="867.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.2" y="878.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.29%)</title><rect x="1156.2" y="851.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="862.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.29%)</title><rect x="1156.2" y="835.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.2" y="846.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.29%)</title><rect x="1156.2" y="819.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1159.2" y="830.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.29%)</title><rect x="1156.2" y="803.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1159.2" y="814.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.29%)</title><rect x="1156.2" y="787.0" width="3.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1159.2" y="798.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.29%)</title><rect x="1156.2" y="771.0" width="3.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1159.2" y="782.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.29%)</title><rect x="1156.2" y="755.0" width="3.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1159.2" y="766.0"></text>
</g>
<g>
<title>WatcherThread::run() (9 samples, 2.58%)</title><rect x="1159.6" y="995.0" width="30.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.6" y="1006.0">Wa..</text>
</g>
<g>
<title>WatcherThread::sleep() const (9 samples, 2.58%)</title><rect x="1159.6" y="979.0" width="30.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="990.0">Wa..</text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 2.58%)</title><rect x="1159.6" y="963.0" width="30.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.6" y="974.0">Mo..</text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (9 samples, 2.58%)</title><rect x="1159.6" y="947.0" width="30.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.6" y="958.0">Mo..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (9 samples, 2.58%)</title><rect x="1159.6" y="931.0" width="30.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="942.0">os..</text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 2.58%)</title><rect x="1159.6" y="915.0" width="30.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1162.6" y="926.0">__..</text>
</g>
</g>
</svg>
