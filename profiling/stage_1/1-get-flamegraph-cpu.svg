<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (1,548 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[Attach Listener tid=41479] (1 samples, 0.06%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.06%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.06%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.06%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.06%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.06%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.06%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.06%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.06%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.06%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.06%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.06%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>[JMX server connection timeout 30 tid=35331] (2 samples, 0.13%)</title><rect x="10.8" y="755.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2 samples, 0.13%)</title><rect x="10.8" y="739.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.8" y="750.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (2 samples, 0.13%)</title><rect x="10.8" y="723.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.8" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.wait (2 samples, 0.13%)</title><rect x="10.8" y="707.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.8" y="718.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.06%)</title><rect x="11.5" y="691.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="14.5" y="702.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.06%)</title><rect x="11.5" y="675.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.5" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.06%)</title><rect x="11.5" y="659.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.06%)</title><rect x="11.5" y="643.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.5" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.06%)</title><rect x="11.5" y="627.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="14.5" y="638.0"></text>
</g>
<g>
<title>[Java: C2 CompilerThread0 tid=21763] (1 samples, 0.06%)</title><rect x="12.3" y="755.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="15.3" y="766.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.06%)</title><rect x="12.3" y="739.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="15.3" y="750.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.06%)</title><rect x="12.3" y="723.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="15.3" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="12.3" y="707.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="15.3" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.06%)</title><rect x="12.3" y="691.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.3" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.06%)</title><rect x="12.3" y="675.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.3" y="686.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.06%)</title><rect x="12.3" y="659.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="15.3" y="670.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.06%)</title><rect x="12.3" y="643.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.3" y="654.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1 samples, 0.06%)</title><rect x="12.3" y="627.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.3" y="638.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.06%)</title><rect x="12.3" y="611.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.3" y="622.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (1 samples, 0.06%)</title><rect x="12.3" y="595.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.3" y="606.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.06%)</title><rect x="12.3" y="579.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.3" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.06%)</title><rect x="12.3" y="563.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.3" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.06%)</title><rect x="12.3" y="547.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.3" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.06%)</title><rect x="12.3" y="531.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.3" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.06%)</title><rect x="12.3" y="515.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.3" y="526.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=13315] (10 samples, 0.65%)</title><rect x="13.0" y="755.0" width="7.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="16.0" y="766.0"></text>
</g>
<g>
<title>thread_start (10 samples, 0.65%)</title><rect x="13.0" y="739.0" width="7.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="16.0" y="750.0"></text>
</g>
<g>
<title>_pthread_start (10 samples, 0.65%)</title><rect x="13.0" y="723.0" width="7.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="16.0" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 0.65%)</title><rect x="13.0" y="707.0" width="7.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="16.0" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (10 samples, 0.65%)</title><rect x="13.0" y="691.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.0" y="702.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (10 samples, 0.65%)</title><rect x="13.0" y="675.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="16.0" y="686.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (10 samples, 0.65%)</title><rect x="13.0" y="659.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.0" y="670.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (4 samples, 0.26%)</title><rect x="13.0" y="643.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="16.0" y="654.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.26%)</title><rect x="13.0" y="627.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.0" y="638.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (4 samples, 0.26%)</title><rect x="13.0" y="611.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.0" y="622.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (2 samples, 0.13%)</title><rect x="13.8" y="595.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.8" y="606.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.13%)</title><rect x="13.8" y="579.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.8" y="590.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.06%)</title><rect x="13.8" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.8" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.06%)</title><rect x="14.6" y="563.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.6" y="574.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.06%)</title><rect x="14.6" y="547.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.6" y="558.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.06%)</title><rect x="15.3" y="595.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.3" y="606.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.06%)</title><rect x="15.3" y="579.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="18.3" y="590.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.06%)</title><rect x="15.3" y="563.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="18.3" y="574.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (6 samples, 0.39%)</title><rect x="16.1" y="643.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.1" y="654.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.39%)</title><rect x="16.1" y="627.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.1" y="638.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.39%)</title><rect x="16.1" y="611.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.1" y="622.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 0.39%)</title><rect x="16.1" y="595.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="19.1" y="606.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.06%)</title><rect x="16.1" y="579.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="19.1" y="590.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.32%)</title><rect x="16.9" y="579.0" width="3.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="19.9" y="590.0"></text>
</g>
<g>
<title>[Java: GC Thread#1 tid=34563] (1 samples, 0.06%)</title><rect x="20.7" y="755.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="23.7" y="766.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.06%)</title><rect x="20.7" y="739.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="23.7" y="750.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.06%)</title><rect x="20.7" y="723.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="23.7" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="20.7" y="707.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="23.7" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.06%)</title><rect x="20.7" y="691.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="23.7" y="702.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.06%)</title><rect x="20.7" y="675.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.7" y="686.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.06%)</title><rect x="20.7" y="659.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="23.7" y="670.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.06%)</title><rect x="20.7" y="643.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="23.7" y="654.0"></text>
</g>
<g>
<title>[Java: GC Thread#2 tid=30979] (1 samples, 0.06%)</title><rect x="21.4" y="755.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="24.4" y="766.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.06%)</title><rect x="21.4" y="739.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="24.4" y="750.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.06%)</title><rect x="21.4" y="723.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="24.4" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="21.4" y="707.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="24.4" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.06%)</title><rect x="21.4" y="691.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.4" y="702.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.06%)</title><rect x="21.4" y="675.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.4" y="686.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.06%)</title><rect x="21.4" y="659.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="24.4" y="670.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.06%)</title><rect x="21.4" y="643.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="24.4" y="654.0"></text>
</g>
<g>
<title>[Java: VM Periodic Task Thread tid=23299] (1 samples, 0.06%)</title><rect x="22.2" y="755.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="25.2" y="766.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.06%)</title><rect x="22.2" y="739.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="25.2" y="750.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.06%)</title><rect x="22.2" y="723.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="25.2" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="22.2" y="707.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="25.2" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.06%)</title><rect x="22.2" y="691.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="25.2" y="702.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.06%)</title><rect x="22.2" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="25.2" y="686.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.06%)</title><rect x="22.2" y="659.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="25.2" y="670.0"></text>
</g>
<g>
<title>[Java: VM Thread tid=19715] (1 samples, 0.06%)</title><rect x="23.0" y="755.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="26.0" y="766.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.06%)</title><rect x="23.0" y="739.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="26.0" y="750.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.06%)</title><rect x="23.0" y="723.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="26.0" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="23.0" y="707.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="26.0" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.06%)</title><rect x="23.0" y="691.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="26.0" y="702.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.06%)</title><rect x="23.0" y="675.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="26.0" y="686.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.06%)</title><rect x="23.0" y="659.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="26.0" y="670.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.06%)</title><rect x="23.0" y="643.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="26.0" y="654.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.06%)</title><rect x="23.0" y="627.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="26.0" y="638.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.06%)</title><rect x="23.0" y="611.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="26.0" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.06%)</title><rect x="23.0" y="595.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="26.0" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.06%)</title><rect x="23.0" y="579.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="26.0" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet*) (1 samples, 0.06%)</title><rect x="23.0" y="563.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.0" y="574.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (1 samples, 0.06%)</title><rect x="23.0" y="547.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="26.0" y="558.0"></text>
</g>
<g>
<title>java_lang_ref_SoftReference::clock() (1 samples, 0.06%)</title><rect x="23.0" y="531.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="26.0" y="542.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (1 samples, 0.06%)</title><rect x="23.0" y="515.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.0" y="526.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=38147] (1,519 samples, 98.13%)</title><rect x="23.7" y="755.0" width="1157.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="26.7" y="766.0">[NIO Selector #7 tid=38147]</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (2 samples, 0.13%)</title><rect x="23.7" y="739.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="26.7" y="750.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (2 samples, 0.13%)</title><rect x="23.7" y="723.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="26.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.13%)</title><rect x="23.7" y="707.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="26.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.13%)</title><rect x="23.7" y="691.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="26.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (2 samples, 0.13%)</title><rect x="23.7" y="675.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="26.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (2 samples, 0.13%)</title><rect x="23.7" y="659.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="26.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.13%)</title><rect x="23.7" y="643.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="26.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.13%)</title><rect x="23.7" y="627.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.13%)</title><rect x="23.7" y="611.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="26.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.13%)</title><rect x="23.7" y="595.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="26.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.13%)</title><rect x="23.7" y="579.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="26.7" y="590.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (2 samples, 0.13%)</title><rect x="23.7" y="563.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="26.7" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.13%)</title><rect x="23.7" y="547.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="26.7" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (2 samples, 0.13%)</title><rect x="23.7" y="531.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="26.7" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.13%)</title><rect x="23.7" y="515.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="26.7" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (2 samples, 0.13%)</title><rect x="23.7" y="499.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="26.7" y="510.0"></text>
</g>
<g>
<title>[unknown_Java] (11 samples, 0.71%)</title><rect x="25.2" y="739.0" width="8.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="28.2" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.06%)</title><rect x="25.2" y="723.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="28.2" y="734.0"></text>
</g>
<g>
<title>CompiledMethod::is_method_handle_return(unsigned char*) (1 samples, 0.06%)</title><rect x="26.0" y="723.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="29.0" y="734.0"></text>
</g>
<g>
<title>ExceptionBlob (1 samples, 0.06%)</title><rect x="26.8" y="723.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="29.8" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="27.5" y="723.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="30.5" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.06%)</title><rect x="27.5" y="707.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="30.5" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (7 samples, 0.45%)</title><rect x="28.3" y="723.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="31.3" y="734.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.32%)</title><rect x="28.3" y="707.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="31.3" y="718.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.06%)</title><rect x="28.3" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="31.3" y="702.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.26%)</title><rect x="29.1" y="691.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="32.1" y="702.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.19%)</title><rect x="29.8" y="675.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="32.8" y="686.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.06%)</title><rect x="32.1" y="707.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="35.1" y="718.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.06%)</title><rect x="32.9" y="707.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="35.9" y="718.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,506 samples, 97.29%)</title><rect x="33.6" y="739.0" width="1148.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.6" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.26%)</title><rect x="34.4" y="723.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="37.4" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1 samples, 0.06%)</title><rect x="36.7" y="707.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.7" y="718.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.06%)</title><rect x="37.4" y="723.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.4" y="734.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.06%)</title><rect x="37.4" y="707.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.06%)</title><rect x="37.4" y="691.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.4" y="702.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (227 samples, 14.66%)</title><rect x="38.2" y="723.0" width="173.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.2" y="734.0">one/nio/net/JavaSelect..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.06%)</title><rect x="38.2" y="707.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="41.2" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.06%)</title><rect x="38.2" y="691.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.06%)</title><rect x="38.2" y="675.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.06%)</title><rect x="38.2" y="659.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.2" y="670.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (13 samples, 0.84%)</title><rect x="39.0" y="707.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (13 samples, 0.84%)</title><rect x="39.0" y="691.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (13 samples, 0.84%)</title><rect x="39.0" y="675.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.0" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.19%)</title><rect x="39.7" y="659.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.7" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.06%)</title><rect x="41.3" y="643.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (9 samples, 0.58%)</title><rect x="42.0" y="659.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (9 samples, 0.58%)</title><rect x="42.0" y="643.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.0" y="654.0"></text>
</g>
<g>
<title>__block_literal_global (4 samples, 0.26%)</title><rect x="42.0" y="627.0" width="3.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="45.0" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.32%)</title><rect x="45.1" y="627.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="48.1" y="638.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.13%)</title><rect x="46.6" y="611.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="49.6" y="622.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.06%)</title><rect x="48.1" y="611.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="51.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (213 samples, 13.76%)</title><rect x="48.9" y="707.0" width="162.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.9" y="718.0">sun/nio/ch/SelectorIm..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (213 samples, 13.76%)</title><rect x="48.9" y="691.0" width="162.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.9" y="702.0">sun/nio/ch/SelectorIm..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (212 samples, 13.70%)</title><rect x="49.6" y="675.0" width="161.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.6" y="686.0">sun/nio/ch/KQueueSele..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (201 samples, 12.98%)</title><rect x="49.6" y="659.0" width="153.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.6" y="670.0">sun/nio/ch/KQueue.p..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (7 samples, 0.45%)</title><rect x="77.1" y="643.0" width="5.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="80.1" y="654.0"></text>
</g>
<g>
<title>kevent (158 samples, 10.21%)</title><rect x="82.4" y="643.0" width="120.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="85.4" y="654.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.19%)</title><rect x="202.9" y="659.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="205.9" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.19%)</title><rect x="202.9" y="643.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.19%)</title><rect x="202.9" y="627.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.19%)</title><rect x="202.9" y="611.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.9" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.19%)</title><rect x="202.9" y="595.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.13%)</title><rect x="202.9" y="579.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.9" y="590.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.06%)</title><rect x="204.4" y="579.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="207.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.26%)</title><rect x="205.1" y="659.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (3 samples, 0.19%)</title><rect x="205.9" y="643.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.9" y="654.0"></text>
</g>
<g>
<title>java/lang/Integer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="207.4" y="627.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.06%)</title><rect x="207.4" y="611.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.26%)</title><rect x="208.2" y="659.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.26%)</title><rect x="208.2" y="643.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="211.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.06%)</title><rect x="210.5" y="627.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.06%)</title><rect x="210.5" y="611.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.06%)</title><rect x="210.5" y="595.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.5" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,273 samples, 82.24%)</title><rect x="211.2" y="723.0" width="970.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.2" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,272 samples, 82.17%)</title><rect x="212.0" y="707.0" width="969.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.0" y="718.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,169 samples, 75.52%)</title><rect x="212.0" y="691.0" width="891.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.0" y="702.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,149 samples, 74.22%)</title><rect x="212.8" y="675.0" width="875.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.8" y="686.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,149 samples, 74.22%)</title><rect x="212.8" y="659.0" width="875.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.8" y="670.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,141 samples, 73.71%)</title><rect x="213.5" y="643.0" width="869.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.5" y="654.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (185 samples, 11.95%)</title><rect x="215.1" y="627.0" width="141.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.1" y="638.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.13%)</title><rect x="215.8" y="611.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (169 samples, 10.92%)</title><rect x="217.3" y="611.0" width="128.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.3" y="622.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.58%)</title><rect x="217.3" y="595.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.3" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.32%)</title><rect x="220.4" y="579.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.4" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.13%)</title><rect x="220.4" y="563.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.06%)</title><rect x="221.1" y="547.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.1" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.06%)</title><rect x="221.1" y="531.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.19%)</title><rect x="221.9" y="563.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.9" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.19%)</title><rect x="221.9" y="547.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.9" y="558.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (1 samples, 0.06%)</title><rect x="223.4" y="531.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.4" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (160 samples, 10.34%)</title><rect x="224.2" y="595.0" width="122.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.2" y="606.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session.write (160 samples, 10.34%)</title><rect x="224.2" y="579.0" width="122.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.2" y="590.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (160 samples, 10.34%)</title><rect x="224.2" y="563.0" width="122.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.2" y="574.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (160 samples, 10.34%)</title><rect x="224.2" y="547.0" width="122.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.2" y="558.0">one/nio/net/Jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.19%)</title><rect x="224.2" y="531.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.2" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.13%)</title><rect x="225.0" y="515.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.13%)</title><rect x="225.0" y="499.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.0" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="225.7" y="483.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.06%)</title><rect x="225.7" y="467.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.7" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.06%)</title><rect x="225.7" y="451.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (157 samples, 10.14%)</title><rect x="226.5" y="531.0" width="119.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.5" y="542.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.13%)</title><rect x="226.5" y="515.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.13%)</title><rect x="226.5" y="499.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.13%)</title><rect x="226.5" y="483.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.13%)</title><rect x="226.5" y="467.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.13%)</title><rect x="226.5" y="451.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.5" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.13%)</title><rect x="226.5" y="435.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.5" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.13%)</title><rect x="226.5" y="419.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="229.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (155 samples, 10.01%)</title><rect x="228.0" y="515.0" width="118.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.0" y="526.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (155 samples, 10.01%)</title><rect x="228.0" y="499.0" width="118.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.0" y="510.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (148 samples, 9.56%)</title><rect x="228.0" y="483.0" width="112.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="231.0" y="494.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (148 samples, 9.56%)</title><rect x="228.0" y="467.0" width="112.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.0" y="478.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (148 samples, 9.56%)</title><rect x="228.0" y="451.0" width="112.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.0" y="462.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>write (144 samples, 9.30%)</title><rect x="231.1" y="435.0" width="109.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="234.1" y="446.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.45%)</title><rect x="340.8" y="483.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="343.8" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.13%)</title><rect x="340.8" y="467.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="343.8" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.06%)</title><rect x="341.6" y="451.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="344.6" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="341.6" y="435.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="344.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.32%)</title><rect x="342.4" y="467.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.4" y="478.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.19%)</title><rect x="342.4" y="451.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="345.4" y="462.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.19%)</title><rect x="342.4" y="435.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="345.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.19%)</title><rect x="342.4" y="419.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (2 samples, 0.13%)</title><rect x="344.6" y="451.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 0.84%)</title><rect x="346.2" y="611.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.45%)</title><rect x="346.2" y="595.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="349.2" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.32%)</title><rect x="347.7" y="579.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="350.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.19%)</title><rect x="347.7" y="563.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="350.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.19%)</title><rect x="347.7" y="547.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.7" y="558.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.19%)</title><rect x="347.7" y="531.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.06%)</title><rect x="348.4" y="515.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.4" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.06%)</title><rect x="349.2" y="515.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="352.2" y="526.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.13%)</title><rect x="350.0" y="563.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.0" y="574.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.13%)</title><rect x="350.0" y="547.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="353.0" y="558.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.13%)</title><rect x="350.0" y="531.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.13%)</title><rect x="350.0" y="515.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.39%)</title><rect x="351.5" y="595.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.5" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.39%)</title><rect x="351.5" y="579.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.32%)</title><rect x="351.5" y="563.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="354.5" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.26%)</title><rect x="352.3" y="547.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="355.3" y="558.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.06%)</title><rect x="353.0" y="531.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="356.0" y="542.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.06%)</title><rect x="353.8" y="531.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="356.8" y="542.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.06%)</title><rect x="354.5" y="531.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="357.5" y="542.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.06%)</title><rect x="354.5" y="515.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="357.5" y="526.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.06%)</title><rect x="354.5" y="499.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="357.5" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.06%)</title><rect x="355.3" y="563.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.3" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.32%)</title><rect x="356.1" y="627.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="359.1" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.06%)</title><rect x="356.1" y="611.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="359.1" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.06%)</title><rect x="356.1" y="595.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="359.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.19%)</title><rect x="356.8" y="611.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.8" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.19%)</title><rect x="356.8" y="595.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="359.8" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.13%)</title><rect x="357.6" y="579.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="360.6" y="590.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.06%)</title><rect x="359.1" y="611.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.06%)</title><rect x="359.1" y="595.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.06%)</title><rect x="359.1" y="579.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.1" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.06%)</title><rect x="359.1" y="563.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.entity (949 samples, 61.30%)</title><rect x="359.9" y="627.0" width="723.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="362.9" y="638.0">ru/mail/polis/service/stakenschneider/ServiceImplementation.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.06%)</title><rect x="362.2" y="611.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.06%)</title><rect x="362.2" y="595.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="365.2" y="606.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.06%)</title><rect x="362.2" y="579.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.2" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.06%)</title><rect x="362.2" y="563.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.2" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.06%)</title><rect x="362.9" y="611.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="365.9" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.06%)</title><rect x="362.9" y="595.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="365.9" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="362.9" y="579.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.9" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="362.9" y="563.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.9" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="362.9" y="547.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="365.9" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.06%)</title><rect x="362.9" y="531.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="365.9" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.06%)</title><rect x="362.9" y="515.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.9" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.06%)</title><rect x="362.9" y="499.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="365.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.get (942 samples, 60.85%)</title><rect x="363.7" y="611.0" width="718.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="366.7" y="622.0">ru/mail/polis/service/stakenschneider/ServiceImplementation.get</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (23 samples, 1.49%)</title><rect x="363.7" y="595.0" width="17.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="366.7" y="606.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.06%)</title><rect x="366.0" y="579.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="369.0" y="590.0"></text>
</g>
<g>
<title>Exceptions::debug_check_abort(Handle, char const*) (1 samples, 0.06%)</title><rect x="366.7" y="579.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="369.7" y="590.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.26%)</title><rect x="367.5" y="579.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="370.5" y="590.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.26%)</title><rect x="367.5" y="563.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="370.5" y="574.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.26%)</title><rect x="367.5" y="547.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="370.5" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (4 samples, 0.26%)</title><rect x="367.5" y="531.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="370.5" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (9 samples, 0.58%)</title><rect x="370.6" y="579.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="373.6" y="590.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.13%)</title><rect x="372.8" y="563.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="375.8" y="574.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.06%)</title><rect x="373.6" y="547.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="376.6" y="558.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.06%)</title><rect x="374.4" y="563.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="377.4" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.06%)</title><rect x="374.4" y="547.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="377.4" y="558.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.06%)</title><rect x="375.1" y="563.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="378.1" y="574.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.06%)</title><rect x="375.1" y="547.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="378.1" y="558.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.06%)</title><rect x="375.9" y="563.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="378.9" y="574.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack(unsigned char*) (1 samples, 0.06%)</title><rect x="376.7" y="563.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="379.7" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.32%)</title><rect x="377.4" y="579.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="380.4" y="590.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.06%)</title><rect x="378.9" y="563.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="381.9" y="574.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.06%)</title><rect x="379.7" y="563.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="382.7" y="574.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.06%)</title><rect x="380.5" y="563.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="383.5" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.06%)</title><rect x="380.5" y="547.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="383.5" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.06%)</title><rect x="380.5" y="531.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="383.5" y="542.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.06%)</title><rect x="380.5" y="515.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="383.5" y="526.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.13%)</title><rect x="381.2" y="595.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="384.2" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.06%)</title><rect x="382.8" y="595.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="385.8" y="606.0"></text>
</g>
<g>
<title>nmethod::exception_begin() const (1 samples, 0.06%)</title><rect x="383.5" y="595.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="386.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (915 samples, 59.11%)</title><rect x="384.3" y="595.0" width="697.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.3" y="606.0">ru/mail/polis/dao/RocksDAO.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.06%)</title><rect x="385.0" y="579.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="388.0" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/592688102.invoke (1 samples, 0.06%)</title><rect x="385.0" y="563.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="388.0" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/198761306.invoke (1 samples, 0.06%)</title><rect x="385.0" y="547.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.0" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.06%)</title><rect x="385.0" y="531.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.06%)</title><rect x="385.0" y="515.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.06%)</title><rect x="385.0" y="499.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="388.0" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="385.0" y="483.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="388.0" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (9 samples, 0.58%)</title><rect x="385.8" y="579.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.8" y="590.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="388.1" y="563.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.1" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.06%)</title><rect x="388.1" y="547.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="391.1" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.06%)</title><rect x="388.1" y="531.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="391.1" y="542.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.06%)</title><rect x="388.1" y="515.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="391.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (3 samples, 0.19%)</title><rect x="388.9" y="563.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.9" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.19%)</title><rect x="388.9" y="547.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="391.9" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.06%)</title><rect x="389.6" y="531.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="392.6" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.06%)</title><rect x="389.6" y="515.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="392.6" y="526.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (1 samples, 0.06%)</title><rect x="390.4" y="531.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.4" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="390.4" y="515.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="393.4" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (2 samples, 0.13%)</title><rect x="391.1" y="563.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="394.1" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.13%)</title><rect x="391.1" y="547.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="394.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.13%)</title><rect x="391.1" y="531.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="394.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.06%)</title><rect x="391.9" y="515.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="394.9" y="526.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (898 samples, 58.01%)</title><rect x="392.7" y="579.0" width="684.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="395.7" y="590.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (898 samples, 58.01%)</title><rect x="392.7" y="563.0" width="684.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="395.7" y="574.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.19%)</title><rect x="393.4" y="547.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.4" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (602 samples, 38.89%)</title><rect x="395.7" y="547.0" width="458.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="398.7" y="558.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.06%)</title><rect x="401.8" y="531.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="404.8" y="542.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.06%)</title><rect x="402.6" y="531.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="405.6" y="542.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.06%)</title><rect x="403.3" y="531.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="406.3" y="542.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.13%)</title><rect x="404.1" y="531.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="407.1" y="542.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.19%)</title><rect x="405.6" y="531.0" width="2.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="408.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.26%)</title><rect x="407.9" y="531.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="410.9" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (581 samples, 37.53%)</title><rect x="411.0" y="531.0" width="442.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="414.0" y="542.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptio..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.06%)</title><rect x="414.0" y="515.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="417.0" y="526.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.13%)</title><rect x="414.8" y="515.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="417.8" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="416.3" y="515.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="419.3" y="526.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.13%)</title><rect x="417.1" y="515.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="420.1" y="526.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.13%)</title><rect x="418.6" y="515.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="421.6" y="526.0"></text>
</g>
<g>
<title>free (6 samples, 0.39%)</title><rect x="420.1" y="515.0" width="4.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="423.1" y="526.0"></text>
</g>
<g>
<title>szone_size (5 samples, 0.32%)</title><rect x="420.9" y="499.0" width="3.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="423.9" y="510.0"></text>
</g>
<g>
<title>tiny_size (5 samples, 0.32%)</title><rect x="420.9" y="483.0" width="3.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="423.9" y="494.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.06%)</title><rect x="424.7" y="515.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="427.7" y="526.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.32%)</title><rect x="425.4" y="515.0" width="3.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="428.4" y="526.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.19%)</title><rect x="426.2" y="499.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="429.2" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="428.5" y="499.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="431.5" y="510.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="428.5" y="483.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="431.5" y="494.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (16 samples, 1.03%)</title><rect x="429.3" y="515.0" width="12.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="432.3" y="526.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.13%)</title><rect x="432.3" y="499.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="435.3" y="510.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="433.1" y="483.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="436.1" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.26%)</title><rect x="433.8" y="499.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="436.8" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="433.8" y="483.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="436.8" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.19%)</title><rect x="434.6" y="483.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="437.6" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.13%)</title><rect x="435.3" y="467.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="438.3" y="478.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.06%)</title><rect x="435.3" y="451.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="438.3" y="462.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="436.1" y="451.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="439.1" y="462.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="436.1" y="435.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="439.1" y="446.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.06%)</title><rect x="436.1" y="419.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="439.1" y="430.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.26%)</title><rect x="436.9" y="499.0" width="3.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="439.9" y="510.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.06%)</title><rect x="439.9" y="499.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="442.9" y="510.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="440.7" y="499.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="443.7" y="510.0"></text>
</g>
<g>
<title>operator new(unsigned long) (12 samples, 0.78%)</title><rect x="441.4" y="515.0" width="9.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="444.4" y="526.0"></text>
</g>
<g>
<title>malloc (12 samples, 0.78%)</title><rect x="441.4" y="499.0" width="9.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="444.4" y="510.0"></text>
</g>
<g>
<title>malloc_zone_malloc (11 samples, 0.71%)</title><rect x="441.4" y="483.0" width="8.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="444.4" y="494.0"></text>
</g>
<g>
<title>default_zone_malloc (4 samples, 0.26%)</title><rect x="443.7" y="467.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="446.7" y="478.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.26%)</title><rect x="446.8" y="467.0" width="3.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="449.8" y="478.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.19%)</title><rect x="447.5" y="451.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="450.5" y="462.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="449.8" y="483.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="452.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (525 samples, 33.91%)</title><rect x="450.6" y="515.0" width="400.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="453.6" y="526.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;,..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (524 samples, 33.85%)</title><rect x="451.4" y="499.0" width="399.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="454.4" y="510.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;,..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (523 samples, 33.79%)</title><rect x="452.1" y="483.0" width="398.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="455.1" y="494.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (519 samples, 33.53%)</title><rect x="453.6" y="467.0" width="395.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="456.6" y="478.0">rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, ..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.32%)</title><rect x="455.2" y="451.0" width="3.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="458.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.06%)</title><rect x="459.0" y="451.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="462.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (4 samples, 0.26%)</title><rect x="459.7" y="451.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="462.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.06%)</title><rect x="460.5" y="435.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="463.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.13%)</title><rect x="461.3" y="435.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="464.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.13%)</title><rect x="461.3" y="419.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="464.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (5 samples, 0.32%)</title><rect x="462.8" y="451.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="465.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.13%)</title><rect x="465.1" y="435.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="468.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.06%)</title><rect x="465.8" y="419.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="468.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.06%)</title><rect x="466.6" y="451.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="469.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (493 samples, 31.85%)</title><rect x="467.4" y="451.0" width="375.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="470.4" y="462.0">rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, s..</text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.13%)</title><rect x="471.2" y="435.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="474.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.06%)</title><rect x="472.7" y="435.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="475.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (485 samples, 31.33%)</title><rect x="473.5" y="435.0" width="369.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="476.5" y="446.0">rocksdb::SkipListFactory::CreateMemTableRep(rocksd..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.06%)</title><rect x="492.5" y="419.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="495.5" y="430.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.06%)</title><rect x="493.3" y="419.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="496.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (458 samples, 29.59%)</title><rect x="494.0" y="419.0" width="349.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="497.0" y="430.0">rocksdb::MemTable::KeyComparator::operator()(ch..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (448 samples, 28.94%)</title><rect x="500.1" y="403.0" width="341.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="503.1" y="414.0">rocksdb::BaseComparatorJniCallback::Compare(ro..</text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="504.0" y="387.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="507.0" y="398.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="504.7" y="387.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="507.7" y="398.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.06%)</title><rect x="505.5" y="387.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="508.5" y="398.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (21 samples, 1.36%)</title><rect x="506.2" y="387.0" width="16.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="509.2" y="398.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="509.3" y="371.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="512.3" y="382.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.06%)</title><rect x="510.1" y="371.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="513.1" y="382.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.13%)</title><rect x="510.8" y="371.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="513.8" y="382.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.32%)</title><rect x="512.3" y="371.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="515.3" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="516.1" y="371.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="519.1" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.39%)</title><rect x="516.9" y="371.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="519.9" y="382.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="516.9" y="355.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="519.9" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.26%)</title><rect x="517.7" y="355.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="520.7" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.26%)</title><rect x="517.7" y="339.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="520.7" y="350.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.26%)</title><rect x="517.7" y="323.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="520.7" y="334.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.26%)</title><rect x="517.7" y="307.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="520.7" y="318.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="517.7" y="291.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="520.7" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.19%)</title><rect x="518.4" y="291.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="521.4" y="302.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.06%)</title><rect x="518.4" y="275.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="521.4" y="286.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.13%)</title><rect x="519.2" y="275.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="522.2" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.06%)</title><rect x="520.7" y="355.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="523.7" y="366.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.06%)</title><rect x="521.5" y="371.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="524.5" y="382.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.13%)</title><rect x="522.2" y="387.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="525.2" y="398.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (1 samples, 0.06%)</title><rect x="523.8" y="387.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="526.8" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.32%)</title><rect x="524.5" y="387.0" width="3.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="527.5" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.06%)</title><rect x="528.3" y="387.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="531.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (403 samples, 26.03%)</title><rect x="529.1" y="387.0" width="307.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="532.1" y="398.0">rocksdb::BaseComparatorJniCallback::Compa..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.06%)</title><rect x="537.5" y="371.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="540.5" y="382.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.65%)</title><rect x="538.3" y="371.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="541.3" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="545.9" y="371.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="548.9" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.13%)</title><rect x="546.6" y="371.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="549.6" y="382.0"></text>
</g>
<g>
<title>compiler_barrier() (3 samples, 0.19%)</title><rect x="548.2" y="371.0" width="2.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="551.2" y="382.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (97 samples, 6.27%)</title><rect x="550.5" y="371.0" width="73.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="553.5" y="382.0">jni_Call..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.06%)</title><rect x="561.1" y="355.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="564.1" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.32%)</title><rect x="561.9" y="355.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="564.9" y="366.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.06%)</title><rect x="565.7" y="355.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="568.7" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="566.5" y="355.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="569.5" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.65%)</title><rect x="567.2" y="355.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="570.2" y="366.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="567.2" y="339.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="570.2" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.13%)</title><rect x="568.0" y="339.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="571.0" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.39%)</title><rect x="569.5" y="339.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="572.5" y="350.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (2 samples, 0.13%)</title><rect x="569.5" y="323.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="572.5" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.26%)</title><rect x="571.0" y="323.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="574.0" y="334.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.26%)</title><rect x="571.0" y="307.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="574.0" y="318.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.26%)</title><rect x="571.0" y="291.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="574.0" y="302.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="571.0" y="275.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="574.0" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.19%)</title><rect x="571.8" y="275.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="574.8" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="572.6" y="259.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="575.6" y="270.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="573.3" y="259.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="576.3" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="573.3" y="243.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="576.3" y="254.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.06%)</title><rect x="574.1" y="339.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="577.1" y="350.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (64 samples, 4.13%)</title><rect x="574.8" y="355.0" width="48.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="577.8" y="366.0">jni_..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.19%)</title><rect x="576.4" y="339.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="579.4" y="350.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (2 samples, 0.13%)</title><rect x="577.1" y="323.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="580.1" y="334.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.06%)</title><rect x="578.7" y="339.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="581.7" y="350.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (4 samples, 0.26%)</title><rect x="579.4" y="339.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="582.4" y="350.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.06%)</title><rect x="581.7" y="323.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="584.7" y="334.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.06%)</title><rect x="581.7" y="307.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="584.7" y="318.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.06%)</title><rect x="582.5" y="339.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="585.5" y="350.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.06%)</title><rect x="583.2" y="339.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="586.2" y="350.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (1 samples, 0.06%)</title><rect x="584.0" y="339.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="587.0" y="350.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (2 samples, 0.13%)</title><rect x="584.8" y="339.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="587.8" y="350.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (1 samples, 0.06%)</title><rect x="585.5" y="323.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="588.5" y="334.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.06%)</title><rect x="586.3" y="339.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="589.3" y="350.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (36 samples, 2.33%)</title><rect x="587.0" y="339.0" width="27.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="590.0" y="350.0">J..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.06%)</title><rect x="590.1" y="323.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="593.1" y="334.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.06%)</title><rect x="590.9" y="323.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="593.9" y="334.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.06%)</title><rect x="591.6" y="323.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="594.6" y="334.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.06%)</title><rect x="592.4" y="323.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="595.4" y="334.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (9 samples, 0.58%)</title><rect x="593.1" y="323.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="596.1" y="334.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.06%)</title><rect x="597.0" y="307.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="600.0" y="318.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.13%)</title><rect x="597.7" y="307.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="600.7" y="318.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (2 samples, 0.13%)</title><rect x="597.7" y="291.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="600.7" y="302.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.06%)</title><rect x="599.2" y="307.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="602.2" y="318.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (10 samples, 0.65%)</title><rect x="600.0" y="323.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="603.0" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="600.8" y="307.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="603.8" y="318.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="600.8" y="291.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="603.8" y="302.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.06%)</title><rect x="601.5" y="307.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="604.5" y="318.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.13%)</title><rect x="602.3" y="307.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="605.3" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.19%)</title><rect x="603.8" y="307.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="606.8" y="318.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.06%)</title><rect x="606.1" y="307.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="609.1" y="318.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="606.9" y="307.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="609.9" y="318.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (2 samples, 0.13%)</title><rect x="607.6" y="323.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="610.6" y="334.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.13%)</title><rect x="609.1" y="323.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="612.1" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.26%)</title><rect x="610.7" y="323.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="613.7" y="334.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.06%)</title><rect x="613.7" y="323.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="616.7" y="334.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.06%)</title><rect x="614.5" y="339.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="617.5" y="350.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.06%)</title><rect x="615.2" y="339.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="618.2" y="350.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (6 samples, 0.39%)</title><rect x="616.0" y="339.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="619.0" y="350.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.13%)</title><rect x="620.6" y="339.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="623.6" y="350.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.06%)</title><rect x="621.3" y="323.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="624.3" y="334.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.06%)</title><rect x="622.1" y="339.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="625.1" y="350.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.06%)</title><rect x="622.9" y="339.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="625.9" y="350.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.06%)</title><rect x="623.6" y="355.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="626.6" y="366.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (5 samples, 0.32%)</title><rect x="624.4" y="371.0" width="3.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="627.4" y="382.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (48 samples, 3.10%)</title><rect x="628.2" y="371.0" width="36.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="631.2" y="382.0">jni..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="629.7" y="355.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="632.7" y="366.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.06%)</title><rect x="630.5" y="355.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="633.5" y="366.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.06%)</title><rect x="631.3" y="355.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="634.3" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (14 samples, 0.90%)</title><rect x="632.0" y="355.0" width="10.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="635.0" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (3 samples, 0.19%)</title><rect x="642.7" y="355.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="645.7" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="645.0" y="355.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="648.0" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (25 samples, 1.61%)</title><rect x="645.7" y="355.0" width="19.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="648.7" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (8 samples, 0.52%)</title><rect x="645.7" y="339.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="648.7" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (16 samples, 1.03%)</title><rect x="651.8" y="339.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="654.8" y="350.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.06%)</title><rect x="652.6" y="323.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="655.6" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (14 samples, 0.90%)</title><rect x="653.4" y="323.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="656.4" y="334.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="654.9" y="307.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="657.9" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.06%)</title><rect x="655.6" y="307.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="658.6" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (10 samples, 0.65%)</title><rect x="656.4" y="307.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="659.4" y="318.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (10 samples, 0.65%)</title><rect x="656.4" y="291.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="659.4" y="302.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (2 samples, 0.13%)</title><rect x="656.4" y="275.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="659.4" y="286.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.06%)</title><rect x="657.9" y="275.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="660.9" y="286.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (2 samples, 0.13%)</title><rect x="658.7" y="275.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="661.7" y="286.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.06%)</title><rect x="660.2" y="275.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="663.2" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.26%)</title><rect x="661.0" y="275.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="664.0" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.13%)</title><rect x="661.7" y="259.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="664.7" y="270.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="663.3" y="259.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="666.3" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="663.3" y="243.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="666.3" y="254.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="664.0" y="339.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="667.0" y="350.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (225 samples, 14.53%)</title><rect x="664.8" y="371.0" width="171.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="667.8" y="382.0">non-virtual thunk to r..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.06%)</title><rect x="666.3" y="355.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="669.3" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.32%)</title><rect x="667.1" y="355.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="670.1" y="366.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (4 samples, 0.26%)</title><rect x="670.9" y="355.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="673.9" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.19%)</title><rect x="673.9" y="355.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="676.9" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.13%)</title><rect x="676.2" y="355.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="679.2" y="366.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.13%)</title><rect x="677.8" y="355.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="680.8" y="366.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (206 samples, 13.31%)</title><rect x="679.3" y="355.0" width="157.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="682.3" y="366.0">jni_CallVoidMethodV</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.13%)</title><rect x="688.4" y="339.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="691.4" y="350.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (1 samples, 0.06%)</title><rect x="689.9" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="692.9" y="350.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.06%)</title><rect x="690.7" y="339.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="693.7" y="350.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.13%)</title><rect x="691.5" y="339.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="694.5" y="350.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="692.2" y="323.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="695.2" y="334.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (4 samples, 0.26%)</title><rect x="693.0" y="339.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="696.0" y="350.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.06%)</title><rect x="696.0" y="339.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="699.0" y="350.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.13%)</title><rect x="696.8" y="339.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.8" y="350.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.06%)</title><rect x="698.3" y="339.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="701.3" y="350.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.06%)</title><rect x="699.1" y="339.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="702.1" y="350.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.06%)</title><rect x="699.9" y="339.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="702.9" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (16 samples, 1.03%)</title><rect x="700.6" y="339.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="703.6" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (2 samples, 0.13%)</title><rect x="712.8" y="339.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="715.8" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="714.3" y="339.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="717.3" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (18 samples, 1.16%)</title><rect x="715.1" y="339.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="718.1" y="350.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.13%)</title><rect x="715.9" y="323.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="718.9" y="334.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="716.6" y="307.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="719.6" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.32%)</title><rect x="717.4" y="323.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="720.4" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (9 samples, 0.58%)</title><rect x="721.2" y="323.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="724.2" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (8 samples, 0.52%)</title><rect x="721.2" y="307.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="724.2" y="318.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.06%)</title><rect x="721.2" y="291.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="724.2" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.45%)</title><rect x="722.0" y="291.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="725.0" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.45%)</title><rect x="722.0" y="275.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="725.0" y="286.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.06%)</title><rect x="722.7" y="259.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="725.7" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (5 samples, 0.32%)</title><rect x="723.5" y="259.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="726.5" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="725.8" y="243.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="728.8" y="254.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.06%)</title><rect x="726.5" y="243.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="729.5" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.06%)</title><rect x="727.3" y="307.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="730.3" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.06%)</title><rect x="728.1" y="323.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="731.1" y="334.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (138 samples, 8.91%)</title><rect x="728.8" y="339.0" width="105.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="731.8" y="350.0">jni_invoke_no..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (5 samples, 0.32%)</title><rect x="739.5" y="323.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.5" y="334.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.06%)</title><rect x="742.5" y="307.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="745.5" y="318.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.13%)</title><rect x="743.3" y="323.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="746.3" y="334.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (7 samples, 0.45%)</title><rect x="744.8" y="323.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="747.8" y="334.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (3 samples, 0.19%)</title><rect x="747.9" y="307.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="750.9" y="318.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (2 samples, 0.13%)</title><rect x="748.6" y="291.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="751.6" y="302.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (4 samples, 0.26%)</title><rect x="750.2" y="323.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="753.2" y="334.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.06%)</title><rect x="753.2" y="323.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="756.2" y="334.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (4 samples, 0.26%)</title><rect x="754.0" y="323.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="757.0" y="334.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.13%)</title><rect x="757.0" y="323.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="760.0" y="334.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (7 samples, 0.45%)</title><rect x="758.6" y="323.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="761.6" y="334.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (1 samples, 0.06%)</title><rect x="761.6" y="307.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="764.6" y="318.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_long() (2 samples, 0.13%)</title><rect x="762.4" y="307.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="765.4" y="318.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (4 samples, 0.26%)</title><rect x="763.9" y="323.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="766.9" y="334.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.06%)</title><rect x="766.9" y="323.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="769.9" y="334.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.06%)</title><rect x="767.7" y="323.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="770.7" y="334.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (70 samples, 4.52%)</title><rect x="768.5" y="323.0" width="53.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="771.5" y="334.0">JavaC..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.06%)</title><rect x="780.7" y="307.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="783.7" y="318.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.13%)</title><rect x="781.4" y="307.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="784.4" y="318.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.06%)</title><rect x="782.9" y="307.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="785.9" y="318.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.13%)</title><rect x="783.7" y="307.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="786.7" y="318.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.13%)</title><rect x="785.2" y="307.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="788.2" y="318.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.13%)</title><rect x="786.8" y="307.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="789.8" y="318.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.06%)</title><rect x="788.3" y="307.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="791.3" y="318.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (5 samples, 0.32%)</title><rect x="789.0" y="307.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="792.0" y="318.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (19 samples, 1.23%)</title><rect x="792.9" y="307.0" width="14.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="795.9" y="318.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.13%)</title><rect x="797.4" y="291.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="800.4" y="302.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.13%)</title><rect x="799.0" y="291.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="802.0" y="302.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.39%)</title><rect x="800.5" y="291.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="803.5" y="302.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (2 samples, 0.13%)</title><rect x="805.1" y="291.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="808.1" y="302.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="806.6" y="291.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="809.6" y="302.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (1 samples, 0.06%)</title><rect x="807.3" y="307.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="810.3" y="318.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.13%)</title><rect x="808.1" y="307.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="811.1" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.39%)</title><rect x="809.6" y="307.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="812.6" y="318.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.06%)</title><rect x="814.2" y="307.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="817.2" y="318.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (9 samples, 0.58%)</title><rect x="815.0" y="307.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="818.0" y="318.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (5 samples, 0.32%)</title><rect x="818.0" y="291.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="821.0" y="302.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.13%)</title><rect x="821.8" y="323.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="824.8" y="334.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.06%)</title><rect x="823.3" y="323.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="826.3" y="334.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (10 samples, 0.65%)</title><rect x="824.1" y="323.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="827.1" y="334.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.06%)</title><rect x="831.7" y="323.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="834.7" y="334.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.06%)</title><rect x="832.5" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="835.5" y="334.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.06%)</title><rect x="832.5" y="307.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="835.5" y="318.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.06%)</title><rect x="833.3" y="323.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="836.3" y="334.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.13%)</title><rect x="834.0" y="339.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="837.0" y="350.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.06%)</title><rect x="835.5" y="339.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="838.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (7 samples, 0.45%)</title><rect x="836.3" y="387.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="839.3" y="398.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.06%)</title><rect x="837.1" y="371.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="840.1" y="382.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.06%)</title><rect x="837.8" y="371.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="840.8" y="382.0"></text>
</g>
<g>
<title>jni_GetEnv (4 samples, 0.26%)</title><rect x="838.6" y="371.0" width="3.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="841.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.13%)</title><rect x="841.6" y="403.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="844.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.06%)</title><rect x="843.2" y="451.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="846.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.06%)</title><rect x="843.9" y="451.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="846.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.06%)</title><rect x="844.7" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="847.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (5 samples, 0.32%)</title><rect x="845.5" y="451.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="848.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.06%)</title><rect x="848.5" y="435.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="851.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.06%)</title><rect x="849.3" y="467.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="852.3" y="478.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.06%)</title><rect x="850.0" y="467.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="853.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.19%)</title><rect x="850.8" y="515.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="853.8" y="526.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.06%)</title><rect x="853.1" y="515.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="856.1" y="526.0"></text>
</g>
<g>
<title>szone_free_definite_size (1 samples, 0.06%)</title><rect x="853.8" y="531.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="856.8" y="542.0"></text>
</g>
<g>
<title>call_stub (13 samples, 0.84%)</title><rect x="854.6" y="547.0" width="9.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="857.6" y="558.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (28 samples, 1.81%)</title><rect x="864.5" y="547.0" width="21.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="867.5" y="558.0">o..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (251 samples, 16.21%)</title><rect x="885.9" y="547.0" width="191.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="888.9" y="558.0">org/rocksdb/util/Bytewise..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (250 samples, 16.15%)</title><rect x="886.6" y="531.0" width="190.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="889.6" y="542.0">org/rocksdb/util/Bytewise..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (243 samples, 15.70%)</title><rect x="886.6" y="515.0" width="185.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="889.6" y="526.0">org/rocksdb/AbstractSlic..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (13 samples, 0.84%)</title><rect x="886.6" y="499.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="889.6" y="510.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (230 samples, 14.86%)</title><rect x="896.5" y="499.0" width="175.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="899.5" y="510.0">org/rocksdb/Slice.data0</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (228 samples, 14.73%)</title><rect x="898.0" y="483.0" width="173.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="901.0" y="494.0">org/rocksdb/Slice.data0</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (216 samples, 13.95%)</title><rect x="906.4" y="467.0" width="164.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="909.4" y="478.0">Java_org_rocksdb_Slic..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="907.2" y="451.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="910.2" y="462.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.06%)</title><rect x="908.0" y="451.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="911.0" y="462.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.13%)</title><rect x="908.7" y="451.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="911.7" y="462.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.06%)</title><rect x="910.2" y="451.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="913.2" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.19%)</title><rect x="911.0" y="451.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="914.0" y="462.0"></text>
</g>
<g>
<title>OrderAccess::fence() (11 samples, 0.71%)</title><rect x="913.3" y="451.0" width="8.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="916.3" y="462.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.13%)</title><rect x="921.7" y="451.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="924.7" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="923.2" y="451.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.2" y="462.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="924.0" y="451.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="927.0" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (33 samples, 2.13%)</title><rect x="924.7" y="451.0" width="25.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="927.7" y="462.0">j..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.13%)</title><rect x="926.3" y="435.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.3" y="446.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="927.0" y="419.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.0" y="430.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (2 samples, 0.13%)</title><rect x="927.8" y="435.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="930.8" y="446.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.06%)</title><rect x="929.3" y="435.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="932.3" y="446.0"></text>
</g>
<g>
<title>OrderAccess::fence() (11 samples, 0.71%)</title><rect x="930.1" y="435.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.1" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="938.4" y="435.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.4" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (14 samples, 0.90%)</title><rect x="939.2" y="435.0" width="10.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="942.2" y="446.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="939.2" y="419.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="942.2" y="430.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="939.2" y="403.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="942.2" y="414.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.19%)</title><rect x="940.0" y="419.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="943.0" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="942.3" y="419.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="945.3" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.45%)</title><rect x="943.0" y="419.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="946.0" y="430.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.06%)</title><rect x="943.0" y="403.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="946.0" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.39%)</title><rect x="943.8" y="403.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="946.8" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="943.8" y="387.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="946.8" y="398.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (2 samples, 0.13%)</title><rect x="944.5" y="387.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="947.5" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.19%)</title><rect x="946.1" y="387.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="949.1" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.19%)</title><rect x="946.1" y="371.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="949.1" y="382.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="946.8" y="355.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.8" y="366.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="947.6" y="355.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="950.6" y="366.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.06%)</title><rect x="947.6" y="339.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="950.6" y="350.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.13%)</title><rect x="948.4" y="419.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="951.4" y="430.0"></text>
</g>
<g>
<title>jni_NewByteArray (109 samples, 7.04%)</title><rect x="949.9" y="451.0" width="83.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="952.9" y="462.0">jni_NewBy..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.19%)</title><rect x="955.2" y="435.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.2" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.19%)</title><rect x="957.5" y="435.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="960.5" y="446.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (3 samples, 0.19%)</title><rect x="959.8" y="435.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.8" y="446.0"></text>
</g>
<g>
<title>OrderAccess::fence() (13 samples, 0.84%)</title><rect x="962.1" y="435.0" width="9.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="965.1" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="972.0" y="435.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.0" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.19%)</title><rect x="972.8" y="435.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.8" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="975.0" y="435.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="978.0" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="975.8" y="435.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="978.8" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (23 samples, 1.49%)</title><rect x="976.6" y="435.0" width="17.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="979.6" y="446.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.13%)</title><rect x="976.6" y="419.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.6" y="430.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="977.3" y="403.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.3" y="414.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.06%)</title><rect x="978.1" y="419.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.1" y="430.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.39%)</title><rect x="978.9" y="419.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.9" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (14 samples, 0.90%)</title><rect x="983.4" y="419.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.4" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (12 samples, 0.78%)</title><rect x="983.4" y="403.0" width="9.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="986.4" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="983.4" y="387.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.4" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (11 samples, 0.71%)</title><rect x="984.2" y="387.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.2" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (9 samples, 0.58%)</title><rect x="984.9" y="371.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.9" y="382.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.13%)</title><rect x="984.9" y="355.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.9" y="366.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.19%)</title><rect x="986.5" y="355.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.5" y="366.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.26%)</title><rect x="988.8" y="355.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="991.8" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="990.3" y="339.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="993.3" y="350.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="991.0" y="339.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="994.0" y="350.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="991.0" y="323.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.0" y="334.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="991.8" y="371.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="994.8" y="382.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.06%)</title><rect x="992.6" y="403.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="995.6" y="414.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.06%)</title><rect x="993.3" y="403.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="996.3" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (50 samples, 3.23%)</title><rect x="994.1" y="435.0" width="38.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="997.1" y="446.0">Typ..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (42 samples, 2.71%)</title><rect x="997.1" y="419.0" width="32.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1000.1" y="430.0">Co..</text>
</g>
<g>
<title>MemAllocator::Allocation::check_out_of_memory() (1 samples, 0.06%)</title><rect x="999.4" y="403.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.4" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (32 samples, 2.07%)</title><rect x="1000.2" y="403.0" width="24.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1003.2" y="414.0">M..</text>
</g>
<g>
<title>MemAllocator::Allocation::check_out_of_memory() (3 samples, 0.19%)</title><rect x="1002.5" y="387.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.5" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (4 samples, 0.26%)</title><rect x="1004.8" y="387.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.8" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jfr_sampler() (3 samples, 0.19%)</title><rect x="1004.8" y="371.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1007.8" y="382.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.06%)</title><rect x="1007.1" y="371.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.1" y="382.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_dtrace_sampler() (3 samples, 0.19%)</title><rect x="1007.8" y="387.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1010.8" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jfr_sampler() (3 samples, 0.19%)</title><rect x="1010.1" y="387.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.1" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (5 samples, 0.32%)</title><rect x="1012.4" y="387.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.4" y="398.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.06%)</title><rect x="1015.4" y="371.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.4" y="382.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.06%)</title><rect x="1016.2" y="387.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1019.2" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab(MemAllocator::Allocation&amp;) const (1 samples, 0.06%)</title><rect x="1017.0" y="387.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1020.0" y="398.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.06%)</title><rect x="1017.7" y="387.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1020.7" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.19%)</title><rect x="1018.5" y="387.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1021.5" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab(MemAllocator::Allocation&amp;) const (1 samples, 0.06%)</title><rect x="1019.3" y="371.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.3" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.06%)</title><rect x="1020.0" y="371.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1023.0" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.06%)</title><rect x="1020.0" y="355.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.0" y="366.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.26%)</title><rect x="1020.8" y="387.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1023.8" y="398.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="1023.1" y="371.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1026.1" y="382.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.06%)</title><rect x="1023.8" y="387.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.8" y="398.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.06%)</title><rect x="1024.6" y="403.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1027.6" y="414.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.13%)</title><rect x="1025.3" y="403.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1028.3" y="414.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.13%)</title><rect x="1026.9" y="403.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.9" y="414.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.06%)</title><rect x="1028.4" y="403.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1031.4" y="414.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (2 samples, 0.13%)</title><rect x="1029.2" y="419.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.2" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.13%)</title><rect x="1030.7" y="419.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1033.7" y="430.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="1032.2" y="435.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1035.2" y="446.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (48 samples, 3.10%)</title><rect x="1033.0" y="451.0" width="36.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1036.0" y="462.0">jni..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="1036.0" y="435.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.0" y="446.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.06%)</title><rect x="1036.8" y="435.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1039.8" y="446.0"></text>
</g>
<g>
<title>OrderAccess::fence() (13 samples, 0.84%)</title><rect x="1037.5" y="435.0" width="10.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1040.5" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="1047.5" y="435.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1050.5" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="1048.2" y="435.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.2" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (16 samples, 1.03%)</title><rect x="1049.0" y="435.0" width="12.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.0" y="446.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="1049.0" y="419.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1052.0" y="430.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="1049.0" y="403.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.0" y="414.0"></text>
</g>
<g>
<title>OrderAccess::fence() (8 samples, 0.52%)</title><rect x="1049.7" y="419.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.7" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.45%)</title><rect x="1055.8" y="419.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.8" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.39%)</title><rect x="1056.6" y="403.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.6" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (6 samples, 0.39%)</title><rect x="1056.6" y="387.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.6" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (6 samples, 0.39%)</title><rect x="1056.6" y="371.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1059.6" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (5 samples, 0.32%)</title><rect x="1057.4" y="355.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1060.4" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="1058.1" y="339.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.1" y="350.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.06%)</title><rect x="1058.9" y="339.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1061.9" y="350.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.13%)</title><rect x="1059.7" y="339.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1062.7" y="350.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.13%)</title><rect x="1059.7" y="323.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.7" y="334.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.13%)</title><rect x="1061.2" y="435.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1064.2" y="446.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.13%)</title><rect x="1062.7" y="435.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1065.7" y="446.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.06%)</title><rect x="1064.2" y="435.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1067.2" y="446.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.19%)</title><rect x="1065.0" y="435.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.0" y="446.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (2 samples, 0.13%)</title><rect x="1065.7" y="419.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.7" y="430.0"></text>
</g>
<g>
<title>os::is_MP() (3 samples, 0.19%)</title><rect x="1067.3" y="435.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.3" y="446.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.13%)</title><rect x="1069.6" y="451.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.6" y="462.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.06%)</title><rect x="1071.1" y="467.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1074.1" y="478.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (7 samples, 0.45%)</title><rect x="1071.8" y="515.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1074.8" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 0.45%)</title><rect x="1071.8" y="499.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1074.8" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.45%)</title><rect x="1071.8" y="483.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1074.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementLite.&lt;init&gt; (3 samples, 0.19%)</title><rect x="1077.2" y="579.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1080.2" y="590.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (3 samples, 0.19%)</title><rect x="1077.2" y="563.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1080.2" y="574.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (3 samples, 0.19%)</title><rect x="1077.2" y="547.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1080.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (3 samples, 0.19%)</title><rect x="1077.2" y="531.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1080.2" y="542.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (3 samples, 0.19%)</title><rect x="1077.2" y="515.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1080.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementLite.fillInStackTrace (2 samples, 0.13%)</title><rect x="1077.9" y="499.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1080.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.toArray (3 samples, 0.19%)</title><rect x="1079.5" y="579.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1082.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.13%)</title><rect x="1080.2" y="563.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1083.2" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.13%)</title><rect x="1080.2" y="547.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1083.2" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.06%)</title><rect x="1080.2" y="531.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1083.2" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.06%)</title><rect x="1080.2" y="515.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1083.2" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="1081.0" y="531.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1084.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.put (2 samples, 0.13%)</title><rect x="1081.8" y="611.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1084.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (2 samples, 0.13%)</title><rect x="1081.8" y="595.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1084.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.toArray (2 samples, 0.13%)</title><rect x="1081.8" y="579.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1084.8" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.13%)</title><rect x="1081.8" y="563.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1084.8" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.13%)</title><rect x="1081.8" y="547.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1084.8" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="1082.5" y="531.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1085.5" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (4 samples, 0.26%)</title><rect x="1083.3" y="643.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1086.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.13%)</title><rect x="1084.0" y="627.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1087.0" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.06%)</title><rect x="1085.6" y="627.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1088.6" y="638.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.19%)</title><rect x="1086.3" y="643.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1089.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.19%)</title><rect x="1086.3" y="627.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1089.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.19%)</title><rect x="1086.3" y="611.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1089.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.19%)</title><rect x="1086.3" y="595.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1089.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.06%)</title><rect x="1087.9" y="579.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1090.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9 samples, 0.58%)</title><rect x="1088.6" y="675.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1091.6" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.26%)</title><rect x="1088.6" y="659.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1091.6" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.26%)</title><rect x="1088.6" y="643.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1091.6" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.26%)</title><rect x="1088.6" y="627.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1091.6" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.26%)</title><rect x="1088.6" y="611.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1091.6" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.06%)</title><rect x="1091.7" y="659.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1094.7" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.13%)</title><rect x="1092.4" y="659.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1095.4" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.13%)</title><rect x="1092.4" y="643.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1095.4" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.13%)</title><rect x="1094.0" y="659.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1097.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.06%)</title><rect x="1095.5" y="675.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1098.5" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.13%)</title><rect x="1096.2" y="675.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1099.2" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (2 samples, 0.13%)</title><rect x="1097.8" y="675.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1100.8" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.32%)</title><rect x="1099.3" y="675.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1102.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.32%)</title><rect x="1099.3" y="659.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1102.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1102.3" y="643.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1105.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1102.3" y="627.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1105.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.06%)</title><rect x="1102.3" y="611.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1105.3" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (103 samples, 6.65%)</title><rect x="1103.1" y="691.0" width="78.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1106.1" y="702.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (103 samples, 6.65%)</title><rect x="1103.1" y="675.0" width="78.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1106.1" y="686.0">one/nio/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.65%)</title><rect x="1103.1" y="659.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1106.1" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.65%)</title><rect x="1103.1" y="643.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1106.1" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.65%)</title><rect x="1103.1" y="627.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1106.1" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (10 samples, 0.65%)</title><rect x="1103.1" y="611.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1106.1" y="622.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.13%)</title><rect x="1105.4" y="595.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1108.4" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.13%)</title><rect x="1106.9" y="595.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1109.9" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.06%)</title><rect x="1107.7" y="579.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1110.7" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.06%)</title><rect x="1107.7" y="563.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1110.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.06%)</title><rect x="1107.7" y="547.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1110.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.19%)</title><rect x="1108.4" y="595.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1111.4" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.13%)</title><rect x="1109.2" y="579.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1112.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (93 samples, 6.01%)</title><rect x="1110.7" y="659.0" width="70.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1113.7" y="670.0">sun/nio/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.19%)</title><rect x="1113.0" y="643.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1116.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.19%)</title><rect x="1113.0" y="627.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1116.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.19%)</title><rect x="1113.0" y="611.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1116.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.19%)</title><rect x="1113.0" y="595.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1116.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.19%)</title><rect x="1113.0" y="579.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1116.0" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.13%)</title><rect x="1113.8" y="563.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.8" y="574.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.13%)</title><rect x="1113.8" y="547.0" width="1.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1116.8" y="558.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.13%)</title><rect x="1113.8" y="531.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1116.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (87 samples, 5.62%)</title><rect x="1115.3" y="643.0" width="66.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1118.3" y="654.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (87 samples, 5.62%)</title><rect x="1115.3" y="627.0" width="66.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1118.3" y="638.0">sun/nio..</text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.13%)</title><rect x="1116.8" y="611.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1119.8" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (8 samples, 0.52%)</title><rect x="1118.3" y="611.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1121.3" y="622.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (8 samples, 0.52%)</title><rect x="1118.3" y="595.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1121.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (8 samples, 0.52%)</title><rect x="1118.3" y="579.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1121.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (8 samples, 0.52%)</title><rect x="1118.3" y="563.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1121.3" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (6 samples, 0.39%)</title><rect x="1119.9" y="547.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1122.9" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (5 samples, 0.32%)</title><rect x="1120.6" y="531.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1123.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (4 samples, 0.26%)</title><rect x="1121.4" y="515.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1124.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (75 samples, 4.84%)</title><rect x="1124.4" y="611.0" width="57.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1127.4" y="622.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (75 samples, 4.84%)</title><rect x="1124.4" y="595.0" width="57.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1127.4" y="606.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (75 samples, 4.84%)</title><rect x="1124.4" y="579.0" width="57.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1127.4" y="590.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.13%)</title><rect x="1126.0" y="563.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1129.0" y="574.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.06%)</title><rect x="1126.7" y="547.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1129.7" y="558.0"></text>
</g>
<g>
<title>rpc_errlist (71 samples, 4.59%)</title><rect x="1127.5" y="563.0" width="54.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1130.5" y="574.0">rpc_e..</text>
</g>
<g>
<title>[RMI TCP Connection(25)-127.0.0.1 tid=30243] (11 samples, 0.71%)</title><rect x="1181.6" y="755.0" width="8.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1184.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (11 samples, 0.71%)</title><rect x="1181.6" y="739.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1184.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (11 samples, 0.71%)</title><rect x="1181.6" y="723.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1184.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (11 samples, 0.71%)</title><rect x="1181.6" y="707.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1184.6" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (11 samples, 0.71%)</title><rect x="1181.6" y="691.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1184.6" y="702.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (11 samples, 0.71%)</title><rect x="1181.6" y="675.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1184.6" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$97/249391321.run (11 samples, 0.71%)</title><rect x="1181.6" y="659.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1184.6" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (11 samples, 0.71%)</title><rect x="1181.6" y="643.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1184.6" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (11 samples, 0.71%)</title><rect x="1181.6" y="627.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1184.6" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (11 samples, 0.71%)</title><rect x="1181.6" y="611.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1184.6" y="622.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (2 samples, 0.13%)</title><rect x="1182.4" y="595.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1185.4" y="606.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (2 samples, 0.13%)</title><rect x="1182.4" y="579.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1185.4" y="590.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (2 samples, 0.13%)</title><rect x="1182.4" y="563.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1185.4" y="574.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (2 samples, 0.13%)</title><rect x="1182.4" y="547.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1185.4" y="558.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (2 samples, 0.13%)</title><rect x="1182.4" y="531.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1185.4" y="542.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead (2 samples, 0.13%)</title><rect x="1182.4" y="515.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1185.4" y="526.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead0 (2 samples, 0.13%)</title><rect x="1182.4" y="499.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1185.4" y="510.0"></text>
</g>
<g>
<title>Java_java_net_SocketInputStream_socketRead0 (2 samples, 0.13%)</title><rect x="1182.4" y="483.0" width="1.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1185.4" y="494.0"></text>
</g>
<g>
<title>recvfrom (2 samples, 0.13%)</title><rect x="1182.4" y="467.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1185.4" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (7 samples, 0.45%)</title><rect x="1183.9" y="595.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1186.9" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (6 samples, 0.39%)</title><rect x="1183.9" y="579.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1186.9" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (6 samples, 0.39%)</title><rect x="1183.9" y="563.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1186.9" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (6 samples, 0.39%)</title><rect x="1183.9" y="547.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1186.9" y="558.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (6 samples, 0.39%)</title><rect x="1183.9" y="531.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1186.9" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.19%)</title><rect x="1183.9" y="515.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1186.9" y="526.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.19%)</title><rect x="1183.9" y="499.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1186.9" y="510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor31.invoke (1 samples, 0.06%)</title><rect x="1183.9" y="483.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1186.9" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getAttribute (1 samples, 0.06%)</title><rect x="1183.9" y="467.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1186.9" y="478.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1 samples, 0.06%)</title><rect x="1183.9" y="451.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1186.9" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1 samples, 0.06%)</title><rect x="1183.9" y="435.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1186.9" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1 samples, 0.06%)</title><rect x="1183.9" y="419.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1186.9" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.getAttribute (1 samples, 0.06%)</title><rect x="1183.9" y="403.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1186.9" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.getAttribute (1 samples, 0.06%)</title><rect x="1183.9" y="387.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1186.9" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.getMBean (1 samples, 0.06%)</title><rect x="1183.9" y="371.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1186.9" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/Repository.retrieve (1 samples, 0.06%)</title><rect x="1183.9" y="355.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1186.9" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/Repository.retrieveNamedObject (1 samples, 0.06%)</title><rect x="1183.9" y="339.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1186.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.intern (1 samples, 0.06%)</title><rect x="1183.9" y="323.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1186.9" y="334.0"></text>
</g>
<g>
<title>JVM_InternString (1 samples, 0.06%)</title><rect x="1183.9" y="307.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1186.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (1 samples, 0.06%)</title><rect x="1184.7" y="483.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1187.7" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (1 samples, 0.06%)</title><rect x="1184.7" y="467.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1187.7" y="478.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1 samples, 0.06%)</title><rect x="1184.7" y="451.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1187.7" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1 samples, 0.06%)</title><rect x="1184.7" y="435.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1187.7" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1 samples, 0.06%)</title><rect x="1184.7" y="419.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1187.7" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (1 samples, 0.06%)</title><rect x="1184.7" y="403.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1187.7" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (1 samples, 0.06%)</title><rect x="1184.7" y="387.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1187.7" y="398.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (1 samples, 0.06%)</title><rect x="1184.7" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1187.7" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (1 samples, 0.06%)</title><rect x="1184.7" y="355.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.7" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (1 samples, 0.06%)</title><rect x="1184.7" y="339.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.7" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1 samples, 0.06%)</title><rect x="1184.7" y="323.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1187.7" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1 samples, 0.06%)</title><rect x="1184.7" y="307.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1187.7" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1 samples, 0.06%)</title><rect x="1184.7" y="291.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1187.7" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1 samples, 0.06%)</title><rect x="1184.7" y="275.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1187.7" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1 samples, 0.06%)</title><rect x="1184.7" y="259.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1187.7" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1 samples, 0.06%)</title><rect x="1184.7" y="243.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1187.7" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (1 samples, 0.06%)</title><rect x="1184.7" y="227.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1187.7" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1 samples, 0.06%)</title><rect x="1184.7" y="211.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1187.7" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1 samples, 0.06%)</title><rect x="1184.7" y="195.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1187.7" y="206.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1184.7" y="179.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1187.7" y="190.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1184.7" y="163.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1187.7" y="174.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (1 samples, 0.06%)</title><rect x="1184.7" y="147.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1187.7" y="158.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.06%)</title><rect x="1184.7" y="131.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1187.7" y="142.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (1 samples, 0.06%)</title><rect x="1184.7" y="115.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1187.7" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (1 samples, 0.06%)</title><rect x="1184.7" y="99.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1187.7" y="110.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.06%)</title><rect x="1184.7" y="83.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1187.7" y="94.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.06%)</title><rect x="1184.7" y="67.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1187.7" y="78.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor43.invoke (1 samples, 0.06%)</title><rect x="1185.4" y="483.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1188.4" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getDefaultDomain (1 samples, 0.06%)</title><rect x="1185.4" y="467.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1188.4" y="478.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1 samples, 0.06%)</title><rect x="1185.4" y="451.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1188.4" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.06%)</title><rect x="1185.4" y="435.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.4" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.06%)</title><rect x="1185.4" y="419.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.4" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.06%)</title><rect x="1185.4" y="403.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1188.4" y="414.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (3 samples, 0.19%)</title><rect x="1186.2" y="515.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1189.2" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (3 samples, 0.19%)</title><rect x="1186.2" y="499.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1189.2" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (3 samples, 0.19%)</title><rect x="1186.2" y="483.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1189.2" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (3 samples, 0.19%)</title><rect x="1186.2" y="467.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1189.2" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (3 samples, 0.19%)</title><rect x="1186.2" y="451.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1189.2" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (3 samples, 0.19%)</title><rect x="1186.2" y="435.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1189.2" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (3 samples, 0.19%)</title><rect x="1186.2" y="419.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1189.2" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (3 samples, 0.19%)</title><rect x="1186.2" y="403.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1189.2" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (3 samples, 0.19%)</title><rect x="1186.2" y="387.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1189.2" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (3 samples, 0.19%)</title><rect x="1186.2" y="371.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1189.2" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (3 samples, 0.19%)</title><rect x="1186.2" y="355.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1189.2" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout (1 samples, 0.06%)</title><rect x="1186.2" y="339.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1189.2" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout0 (1 samples, 0.06%)</title><rect x="1186.2" y="323.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1189.2" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass$ClassDataSlot.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1186.2" y="307.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1189.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (1 samples, 0.06%)</title><rect x="1186.2" y="291.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1189.2" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (2 samples, 0.13%)</title><rect x="1187.0" y="339.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1190.0" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.13%)</title><rect x="1187.0" y="323.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1190.0" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.13%)</title><rect x="1187.0" y="307.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1190.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (2 samples, 0.13%)</title><rect x="1187.0" y="291.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1190.0" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (2 samples, 0.13%)</title><rect x="1187.0" y="275.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1190.0" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 0.13%)</title><rect x="1187.0" y="259.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1190.0" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.13%)</title><rect x="1187.0" y="243.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1190.0" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode (1 samples, 0.06%)</title><rect x="1187.0" y="227.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1190.0" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (1 samples, 0.06%)</title><rect x="1187.0" y="211.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1190.0" y="222.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (1 samples, 0.06%)</title><rect x="1187.0" y="195.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1190.0" y="206.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.06%)</title><rect x="1187.0" y="179.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1190.0" y="190.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (1 samples, 0.06%)</title><rect x="1187.0" y="163.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1190.0" y="174.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (1 samples, 0.06%)</title><rect x="1187.0" y="147.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1190.0" y="158.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (1 samples, 0.06%)</title><rect x="1187.0" y="131.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1190.0" y="142.0"></text>
</g>
<g>
<title>Java_java_net_SocketOutputStream_socketWrite0 (1 samples, 0.06%)</title><rect x="1187.0" y="115.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.0" y="126.0"></text>
</g>
<g>
<title>sendto (1 samples, 0.06%)</title><rect x="1187.0" y="99.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1190.0" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.06%)</title><rect x="1187.7" y="227.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1190.7" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.06%)</title><rect x="1187.7" y="211.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1190.7" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.06%)</title><rect x="1187.7" y="195.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1190.7" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.06%)</title><rect x="1187.7" y="179.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1190.7" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.06%)</title><rect x="1187.7" y="163.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1190.7" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.06%)</title><rect x="1187.7" y="147.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1190.7" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout (1 samples, 0.06%)</title><rect x="1187.7" y="131.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1190.7" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout0 (1 samples, 0.06%)</title><rect x="1187.7" y="115.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1190.7" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.06%)</title><rect x="1187.7" y="99.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1190.7" y="110.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.06%)</title><rect x="1187.7" y="83.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1190.7" y="94.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.06%)</title><rect x="1187.7" y="67.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1190.7" y="78.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.06%)</title><rect x="1187.7" y="51.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1190.7" y="62.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="1187.7" y="35.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1190.7" y="46.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (1 samples, 0.06%)</title><rect x="1188.5" y="579.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1191.5" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1188.5" y="563.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1191.5" y="574.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1188.5" y="547.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1191.5" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1188.5" y="531.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1191.5" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1188.5" y="515.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1191.5" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.06%)</title><rect x="1188.5" y="499.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.5" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPConnection.releaseOutputStream (1 samples, 0.06%)</title><rect x="1189.2" y="595.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1192.2" y="606.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.06%)</title><rect x="1189.2" y="579.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1192.2" y="590.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.06%)</title><rect x="1189.2" y="563.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1192.2" y="574.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (1 samples, 0.06%)</title><rect x="1189.2" y="547.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1192.2" y="558.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (1 samples, 0.06%)</title><rect x="1189.2" y="531.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.2" y="542.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (1 samples, 0.06%)</title><rect x="1189.2" y="515.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1192.2" y="526.0"></text>
</g>
<g>
<title>Java_java_net_SocketOutputStream_socketWrite0 (1 samples, 0.06%)</title><rect x="1189.2" y="499.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1192.2" y="510.0"></text>
</g>
<g>
<title>sendto (1 samples, 0.06%)</title><rect x="1189.2" y="483.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1192.2" y="494.0"></text>
</g>
</g>
</svg>
