<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="693"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="693"> </text>
<g id="frames">
<g>
<title>all (10,737 samples, 100.00%)</title><rect x="10.0" y="659.0" width="1180.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="670.0">all</text>
</g>
<g>
<title>[Java: C1 CompilerThread0 tid=43011] (6 samples, 0.06%)</title><rect x="10.2" y="643.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.2" y="654.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.06%)</title><rect x="10.2" y="627.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.2" y="638.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.06%)</title><rect x="10.2" y="611.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="13.2" y="622.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.06%)</title><rect x="10.2" y="595.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.2" y="606.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.06%)</title><rect x="10.2" y="579.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.2" y="590.0"></text>
</g>
<g>
<title>JavaThread::run() (6 samples, 0.06%)</title><rect x="10.2" y="563.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.2" y="574.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (6 samples, 0.06%)</title><rect x="10.2" y="547.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.2" y="558.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (6 samples, 0.06%)</title><rect x="10.2" y="531.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.2" y="542.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (6 samples, 0.06%)</title><rect x="10.2" y="515.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.2" y="526.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 0.06%)</title><rect x="10.2" y="499.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.2" y="510.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (6 samples, 0.06%)</title><rect x="10.2" y="483.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.2" y="494.0"></text>
</g>
<g>
<title>Compilation::compile_method() (6 samples, 0.06%)</title><rect x="10.2" y="467.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.2" y="478.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 0.05%)</title><rect x="10.3" y="451.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.3" y="462.0"></text>
</g>
<g>
<title>Compilation::build_hir() (4 samples, 0.04%)</title><rect x="10.3" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.3" y="446.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 0.04%)</title><rect x="10.3" y="419.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.3" y="430.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 0.04%)</title><rect x="10.3" y="403.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.3" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 0.04%)</title><rect x="10.3" y="387.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.3" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.03%)</title><rect x="10.4" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.4" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.03%)</title><rect x="10.4" y="355.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.4" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.03%)</title><rect x="10.4" y="339.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.4" y="350.0"></text>
</g>
<g>
<title>[Java: C2 CompilerThread0 tid=21763] (112 samples, 1.04%)</title><rect x="10.9" y="643.0" width="12.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.9" y="654.0"></text>
</g>
<g>
<title>thread_start (112 samples, 1.04%)</title><rect x="10.9" y="627.0" width="12.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.9" y="638.0"></text>
</g>
<g>
<title>_pthread_start (112 samples, 1.04%)</title><rect x="10.9" y="611.0" width="12.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.9" y="622.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (112 samples, 1.04%)</title><rect x="10.9" y="595.0" width="12.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.9" y="606.0"></text>
</g>
<g>
<title>Thread::call_run() (112 samples, 1.04%)</title><rect x="10.9" y="579.0" width="12.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.9" y="590.0"></text>
</g>
<g>
<title>JavaThread::run() (112 samples, 1.04%)</title><rect x="10.9" y="563.0" width="12.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.9" y="574.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (112 samples, 1.04%)</title><rect x="10.9" y="547.0" width="12.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.9" y="558.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (112 samples, 1.04%)</title><rect x="10.9" y="531.0" width="12.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.9" y="542.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (110 samples, 1.02%)</title><rect x="10.9" y="515.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.9" y="526.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (109 samples, 1.02%)</title><rect x="10.9" y="499.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.9" y="510.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (109 samples, 1.02%)</title><rect x="10.9" y="483.0" width="12.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.9" y="494.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (67 samples, 0.62%)</title><rect x="10.9" y="467.0" width="7.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.9" y="478.0"></text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.04%)</title><rect x="10.9" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.9" y="462.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.03%)</title><rect x="10.9" y="435.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.9" y="446.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.05%)</title><rect x="11.5" y="451.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.5" y="462.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.03%)</title><rect x="11.6" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.6" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.07%)</title><rect x="12.1" y="451.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.1" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.06%)</title><rect x="12.2" y="435.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.2" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (49 samples, 0.46%)</title><rect x="12.9" y="451.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.9" y="462.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.03%)</title><rect x="12.9" y="435.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.9" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.03%)</title><rect x="13.2" y="435.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.2" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.07%)</title><rect x="13.6" y="435.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="16.6" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.08%)</title><rect x="14.4" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.4" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.04%)</title><rect x="14.8" y="419.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.8" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.05%)</title><rect x="15.4" y="435.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="18.4" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.07%)</title><rect x="15.9" y="435.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.9" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.06%)</title><rect x="16.0" y="419.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="19.0" y="430.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.05%)</title><rect x="16.7" y="435.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="19.7" y="446.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.05%)</title><rect x="16.7" y="419.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.7" y="430.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (5 samples, 0.05%)</title><rect x="16.7" y="403.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.7" y="414.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.03%)</title><rect x="16.9" y="387.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="19.9" y="398.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.03%)</title><rect x="17.3" y="435.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="20.3" y="446.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (3 samples, 0.03%)</title><rect x="17.3" y="419.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="20.3" y="430.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.04%)</title><rect x="17.8" y="435.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="20.8" y="446.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 0.30%)</title><rect x="18.2" y="467.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.2" y="478.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (11 samples, 0.10%)</title><rect x="18.4" y="451.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="21.4" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (11 samples, 0.10%)</title><rect x="18.4" y="435.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="21.4" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.05%)</title><rect x="18.6" y="419.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="21.6" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 0.05%)</title><rect x="18.6" y="403.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="21.6" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (13 samples, 0.12%)</title><rect x="19.8" y="451.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="22.8" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 0.08%)</title><rect x="20.1" y="435.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="23.1" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 0.07%)</title><rect x="20.1" y="419.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="23.1" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.03%)</title><rect x="20.3" y="403.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="23.3" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.04%)</title><rect x="21.3" y="451.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="24.3" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.04%)</title><rect x="21.3" y="435.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="24.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.07%)</title><rect x="22.0" y="467.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="25.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.07%)</title><rect x="22.0" y="451.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="25.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.07%)</title><rect x="22.0" y="435.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="25.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.07%)</title><rect x="22.0" y="419.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="25.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.07%)</title><rect x="22.0" y="403.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="25.0" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.07%)</title><rect x="22.0" y="387.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="25.0" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.07%)</title><rect x="22.0" y="371.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="25.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.07%)</title><rect x="22.0" y="355.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="25.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.07%)</title><rect x="22.0" y="339.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="25.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.07%)</title><rect x="22.0" y="323.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="25.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.07%)</title><rect x="22.0" y="307.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="25.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.07%)</title><rect x="22.0" y="291.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="25.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.07%)</title><rect x="22.0" y="275.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="25.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.07%)</title><rect x="22.0" y="259.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="25.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.06%)</title><rect x="22.0" y="243.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="25.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="22.2" y="227.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="25.2" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="22.2" y="211.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="25.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="22.3" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="25.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="22.3" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="25.3" y="190.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=13315] (3 samples, 0.03%)</title><rect x="23.2" y="643.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="26.2" y="654.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.03%)</title><rect x="23.2" y="627.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="26.2" y="638.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.03%)</title><rect x="23.2" y="611.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="26.2" y="622.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.03%)</title><rect x="23.2" y="595.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="26.2" y="606.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.03%)</title><rect x="23.2" y="579.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="26.2" y="590.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (3 samples, 0.03%)</title><rect x="23.2" y="563.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="26.2" y="574.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (3 samples, 0.03%)</title><rect x="23.2" y="547.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.2" y="558.0"></text>
</g>
<g>
<title>[Java: Service Thread tid=23043] (5 samples, 0.05%)</title><rect x="24.0" y="643.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="27.0" y="654.0"></text>
</g>
<g>
<title>thread_start (5 samples, 0.05%)</title><rect x="24.0" y="627.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="27.0" y="638.0"></text>
</g>
<g>
<title>_pthread_start (5 samples, 0.05%)</title><rect x="24.0" y="611.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="27.0" y="622.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.05%)</title><rect x="24.0" y="595.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="27.0" y="606.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.05%)</title><rect x="24.0" y="579.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.0" y="590.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.05%)</title><rect x="24.0" y="563.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="27.0" y="574.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 0.05%)</title><rect x="24.0" y="547.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="27.0" y="558.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (5 samples, 0.05%)</title><rect x="24.0" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="27.0" y="542.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="24.2" y="515.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.2" y="526.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="24.2" y="499.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.2" y="510.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.03%)</title><rect x="24.2" y="483.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="27.2" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="24.2" y="467.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="27.2" y="478.0"></text>
</g>
<g>
<title>[Java: Sweeper thread tid=42755] (3 samples, 0.03%)</title><rect x="24.5" y="643.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="27.5" y="654.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.03%)</title><rect x="24.5" y="627.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="27.5" y="638.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.03%)</title><rect x="24.5" y="611.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="27.5" y="622.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.03%)</title><rect x="24.5" y="595.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="27.5" y="606.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.03%)</title><rect x="24.5" y="579.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="27.5" y="590.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.03%)</title><rect x="24.5" y="563.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.5" y="574.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.03%)</title><rect x="24.5" y="547.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.5" y="558.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (3 samples, 0.03%)</title><rect x="24.5" y="531.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="27.5" y="542.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (3 samples, 0.03%)</title><rect x="24.5" y="515.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="27.5" y="526.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (3 samples, 0.03%)</title><rect x="24.5" y="499.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.5" y="510.0"></text>
</g>
<g>
<title>[Java: VM Periodic Task Thread tid=23299] (3 samples, 0.03%)</title><rect x="24.8" y="643.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="27.8" y="654.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.03%)</title><rect x="24.8" y="627.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="27.8" y="638.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.03%)</title><rect x="24.8" y="611.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="27.8" y="622.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.03%)</title><rect x="24.8" y="595.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="27.8" y="606.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.03%)</title><rect x="24.8" y="579.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="27.8" y="590.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.03%)</title><rect x="24.8" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="27.8" y="574.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=40451] (2,833 samples, 26.39%)</title><rect x="25.2" y="643.0" width="311.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="28.2" y="654.0">[NIO Selector #1 tid=40451]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,832 samples, 26.38%)</title><rect x="25.3" y="627.0" width="311.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.3" y="638.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (83 samples, 0.77%)</title><rect x="25.4" y="611.0" width="9.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (75 samples, 0.70%)</title><rect x="26.2" y="595.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (75 samples, 0.70%)</title><rect x="26.2" y="579.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (75 samples, 0.70%)</title><rect x="26.2" y="563.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (72 samples, 0.67%)</title><rect x="26.2" y="547.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.2" y="558.0"></text>
</g>
<g>
<title>kevent (60 samples, 0.56%)</title><rect x="27.5" y="531.0" width="6.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="30.5" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,748 samples, 25.59%)</title><rect x="34.5" y="611.0" width="302.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="37.5" y="622.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,748 samples, 25.59%)</title><rect x="34.5" y="595.0" width="302.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="37.5" y="606.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,714 samples, 25.28%)</title><rect x="34.5" y="579.0" width="298.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.5" y="590.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,698 samples, 25.13%)</title><rect x="34.6" y="563.0" width="296.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="37.6" y="574.0">one/nio/http/HttpSession.handleParsedReq..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,696 samples, 25.11%)</title><rect x="34.8" y="547.0" width="296.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="37.8" y="558.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2,693 samples, 25.08%)</title><rect x="34.8" y="531.0" width="296.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="37.8" y="542.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (84 samples, 0.78%)</title><rect x="34.8" y="515.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.8" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (78 samples, 0.73%)</title><rect x="34.8" y="499.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.8" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.07%)</title><rect x="34.8" y="483.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="37.8" y="494.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.07%)</title><rect x="34.8" y="467.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="37.8" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.06%)</title><rect x="35.1" y="451.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.1" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.06%)</title><rect x="35.1" y="435.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="35.3" y="419.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.03%)</title><rect x="35.3" y="403.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="38.3" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (70 samples, 0.65%)</title><rect x="35.7" y="483.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.7" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (70 samples, 0.65%)</title><rect x="35.7" y="467.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.7" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (69 samples, 0.64%)</title><rect x="35.8" y="451.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.8" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (69 samples, 0.64%)</title><rect x="35.8" y="435.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="38.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (69 samples, 0.64%)</title><rect x="35.8" y="419.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="38.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (68 samples, 0.63%)</title><rect x="35.9" y="403.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="38.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (68 samples, 0.63%)</title><rect x="35.9" y="387.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (59 samples, 0.55%)</title><rect x="36.2" y="371.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (59 samples, 0.55%)</title><rect x="36.2" y="355.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (59 samples, 0.55%)</title><rect x="36.2" y="339.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.2" y="350.0"></text>
</g>
<g>
<title>write (53 samples, 0.49%)</title><rect x="36.8" y="323.0" width="5.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="39.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.07%)</title><rect x="42.6" y="371.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.05%)</title><rect x="42.9" y="355.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="45.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.06%)</title><rect x="43.4" y="499.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="43.4" y="483.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.4" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.03%)</title><rect x="43.4" y="467.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="46.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.03%)</title><rect x="43.4" y="451.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="46.4" y="462.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.03%)</title><rect x="43.4" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="46.4" y="446.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.03%)</title><rect x="43.4" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.4" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="43.7" y="483.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="46.7" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="43.7" y="467.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="46.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="43.7" y="451.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.entity (2,608 samples, 24.29%)</title><rect x="44.2" y="515.0" width="286.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.2" y="526.0">ru/mail/polis/service/stakenschneider/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.put (2,606 samples, 24.27%)</title><rect x="44.4" y="499.0" width="286.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.4" y="510.0">ru/mail/polis/service/stakenschneider/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="44.4" y="483.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="47.4" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="44.4" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.4" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="44.4" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="44.4" y="435.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="47.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (2,602 samples, 24.23%)</title><rect x="44.8" y="483.0" width="286.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.8" y="494.0">ru/mail/polis/dao/RocksDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,601 samples, 24.22%)</title><rect x="44.8" y="467.0" width="285.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.8" y="478.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,601 samples, 24.22%)</title><rect x="44.8" y="451.0" width="285.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.8" y="462.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (5 samples, 0.05%)</title><rect x="45.8" y="435.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.8" y="446.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,269 samples, 21.13%)</title><rect x="46.4" y="435.0" width="249.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="49.4" y="446.0">Java_org_rocksdb_RocksDB_put__J_3..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,268 samples, 21.12%)</title><rect x="46.5" y="419.0" width="249.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="49.5" y="430.0">rocksdb_put_helper(JNIEnv_*, rock..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.04%)</title><rect x="47.1" y="403.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="50.1" y="414.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.04%)</title><rect x="47.6" y="403.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="50.6" y="414.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.04%)</title><rect x="47.6" y="387.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="50.6" y="398.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.04%)</title><rect x="47.6" y="371.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="50.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,252 samples, 20.97%)</title><rect x="48.0" y="403.0" width="247.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="51.0" y="414.0">rocksdb::CompactedDBImpl::Open(ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,251 samples, 20.96%)</title><rect x="48.1" y="387.0" width="247.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="51.1" y="398.0">rocksdb::DBImpl::Put(rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,250 samples, 20.96%)</title><rect x="48.1" y="371.0" width="247.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="51.1" y="382.0">rocksdb::DB::Put(rocksdb::WriteOp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,229 samples, 20.76%)</title><rect x="48.5" y="355.0" width="244.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="51.5" y="366.0">rocksdb::DBImpl::Write(rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,227 samples, 20.74%)</title><rect x="48.6" y="339.0" width="244.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="51.6" y="350.0">rocksdb::DBImpl::WriteImpl(rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (56 samples, 0.52%)</title><rect x="50.4" y="323.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="53.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (50 samples, 0.47%)</title><rect x="50.7" y="307.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="53.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (49 samples, 0.46%)</title><rect x="50.8" y="291.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="53.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (48 samples, 0.45%)</title><rect x="50.9" y="275.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="53.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (46 samples, 0.43%)</title><rect x="51.1" y="259.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="54.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (45 samples, 0.42%)</title><rect x="51.2" y="243.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="54.2" y="254.0"></text>
</g>
<g>
<title>write (45 samples, 0.42%)</title><rect x="51.2" y="227.0" width="5.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="54.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (3 samples, 0.03%)</title><rect x="56.2" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="59.2" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.03%)</title><rect x="56.2" y="291.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="59.2" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (3 samples, 0.03%)</title><rect x="56.2" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="59.2" y="286.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="56.2" y="259.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="59.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (1,739 samples, 16.20%)</title><rect x="56.8" y="323.0" width="191.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="59.8" y="334.0">rocksdb::WriteBatchIntern..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1,733 samples, 16.14%)</title><rect x="57.4" y="307.0" width="190.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="60.4" y="318.0">rocksdb::WriteBatch::Iter..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1,730 samples, 16.11%)</title><rect x="57.7" y="291.0" width="190.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="60.7" y="302.0">rocksdb::WriteBatchIntern..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1,727 samples, 16.08%)</title><rect x="58.0" y="275.0" width="189.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="61.0" y="286.0">rocksdb::WriteBatchIntern..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1,723 samples, 16.05%)</title><rect x="58.4" y="259.0" width="189.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="61.4" y="270.0">rocksdb::MemTable::Add(un..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,720 samples, 16.02%)</title><rect x="58.7" y="243.0" width="189.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="61.7" y="254.0">rocksdb::SkipListFactory:..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,716 samples, 15.98%)</title><rect x="59.1" y="227.0" width="188.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="62.1" y="238.0">rocksdb::SkipListFactory..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (72 samples, 0.67%)</title><rect x="61.0" y="211.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="64.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (72 samples, 0.67%)</title><rect x="61.0" y="195.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="64.0" y="206.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="61.2" y="179.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="64.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (30 samples, 0.28%)</title><rect x="61.7" y="179.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="64.7" y="190.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (6 samples, 0.06%)</title><rect x="62.0" y="163.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="65.0" y="174.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (5 samples, 0.05%)</title><rect x="62.1" y="147.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="65.1" y="158.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.03%)</title><rect x="62.2" y="131.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="65.2" y="142.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="62.6" y="163.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="65.6" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="62.6" y="147.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="65.6" y="158.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (18 samples, 0.17%)</title><rect x="63.0" y="163.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="66.0" y="174.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (18 samples, 0.17%)</title><rect x="63.0" y="147.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="66.0" y="158.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (13 samples, 0.12%)</title><rect x="63.5" y="131.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="66.5" y="142.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.03%)</title><rect x="64.2" y="115.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="67.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (27 samples, 0.25%)</title><rect x="65.0" y="179.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="68.0" y="190.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (27 samples, 0.25%)</title><rect x="65.0" y="163.0" width="2.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="68.0" y="174.0"></text>
</g>
<g>
<title>__psynch_mutexwait (27 samples, 0.25%)</title><rect x="65.0" y="147.0" width="2.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="68.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (9 samples, 0.08%)</title><rect x="67.9" y="179.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="70.9" y="190.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (9 samples, 0.08%)</title><rect x="67.9" y="163.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="70.9" y="174.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (9 samples, 0.08%)</title><rect x="67.9" y="147.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="70.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1,627 samples, 15.15%)</title><rect x="68.9" y="211.0" width="178.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="71.9" y="222.0">rocksdb::MemTable::KeyC..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1,612 samples, 15.01%)</title><rect x="70.1" y="195.0" width="177.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="73.1" y="206.0">rocksdb::BaseComparator..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.03%)</title><rect x="72.0" y="179.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="75.0" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (29 samples, 0.27%)</title><rect x="72.4" y="179.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="75.4" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.07%)</title><rect x="72.9" y="163.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="75.9" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (17 samples, 0.16%)</title><rect x="73.6" y="163.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="76.6" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.05%)</title><rect x="73.6" y="147.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="76.6" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (11 samples, 0.10%)</title><rect x="74.2" y="147.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="77.2" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (8 samples, 0.07%)</title><rect x="74.3" y="131.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="77.3" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.07%)</title><rect x="74.4" y="115.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="77.4" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.07%)</title><rect x="74.4" y="99.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="77.4" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="74.7" y="83.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="77.7" y="94.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (6 samples, 0.06%)</title><rect x="75.9" y="179.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="78.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (428 samples, 3.99%)</title><rect x="76.6" y="179.0" width="47.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="79.6" y="190.0">rock..</text>
</g>
<g>
<title>OrderAccess::fence() (12 samples, 0.11%)</title><rect x="78.1" y="163.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="81.1" y="174.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="79.6" y="163.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="82.6" y="174.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (104 samples, 0.97%)</title><rect x="80.4" y="163.0" width="11.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="83.4" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.07%)</title><rect x="81.9" y="147.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="84.9" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (12 samples, 0.11%)</title><rect x="82.6" y="147.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="85.6" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.05%)</title><rect x="82.8" y="131.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="85.8" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.05%)</title><rect x="83.3" y="131.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="86.3" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.04%)</title><rect x="83.4" y="115.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="86.4" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="83.5" y="99.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="86.5" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="83.5" y="83.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="86.5" y="94.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (70 samples, 0.65%)</title><rect x="84.0" y="147.0" width="7.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="87.0" y="158.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (39 samples, 0.36%)</title><rect x="86.1" y="131.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="89.1" y="142.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (10 samples, 0.09%)</title><rect x="86.9" y="115.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="89.9" y="126.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (6 samples, 0.06%)</title><rect x="88.0" y="115.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="91.0" y="126.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (6 samples, 0.06%)</title><rect x="89.0" y="115.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="92.0" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.05%)</title><rect x="89.7" y="115.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="92.7" y="126.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.04%)</title><rect x="90.6" y="131.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="93.6" y="142.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (39 samples, 0.36%)</title><rect x="92.0" y="163.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="95.0" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (11 samples, 0.10%)</title><rect x="92.8" y="147.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="95.8" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (21 samples, 0.20%)</title><rect x="94.0" y="147.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="97.0" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (8 samples, 0.07%)</title><rect x="94.1" y="131.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="97.1" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (12 samples, 0.11%)</title><rect x="95.0" y="131.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="98.0" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (10 samples, 0.09%)</title><rect x="95.1" y="115.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="98.1" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (10 samples, 0.09%)</title><rect x="95.1" y="99.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="98.1" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (9 samples, 0.08%)</title><rect x="95.1" y="83.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="98.1" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="95.7" y="67.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="98.7" y="78.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (249 samples, 2.32%)</title><rect x="96.3" y="163.0" width="27.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="99.3" y="174.0">n..</text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="96.8" y="147.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="99.8" y="158.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (234 samples, 2.18%)</title><rect x="97.8" y="147.0" width="25.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="100.8" y="158.0">j..</text>
</g>
<g>
<title>OrderAccess::fence() (15 samples, 0.14%)</title><rect x="100.4" y="131.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="103.4" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (24 samples, 0.22%)</title><rect x="102.3" y="131.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="105.3" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.06%)</title><rect x="102.5" y="115.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="105.5" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (15 samples, 0.14%)</title><rect x="103.2" y="115.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="106.2" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (13 samples, 0.12%)</title><rect x="103.4" y="99.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="106.4" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (11 samples, 0.10%)</title><rect x="103.6" y="83.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="106.6" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (10 samples, 0.09%)</title><rect x="103.7" y="67.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="106.7" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (6 samples, 0.06%)</title><rect x="104.2" y="51.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="107.2" y="62.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (163 samples, 1.52%)</title><rect x="105.1" y="131.0" width="17.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="108.1" y="142.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (6 samples, 0.06%)</title><rect x="109.7" y="115.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="112.7" y="126.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (5 samples, 0.05%)</title><rect x="109.8" y="99.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="112.8" y="110.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (3 samples, 0.03%)</title><rect x="110.8" y="115.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="113.8" y="126.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (3 samples, 0.03%)</title><rect x="110.8" y="99.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="113.8" y="110.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (5 samples, 0.05%)</title><rect x="111.1" y="115.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="114.1" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (3 samples, 0.03%)</title><rect x="112.2" y="115.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="115.2" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (9 samples, 0.08%)</title><rect x="112.6" y="115.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="115.6" y="126.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (3 samples, 0.03%)</title><rect x="113.6" y="115.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="116.6" y="126.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (68 samples, 0.63%)</title><rect x="114.2" y="115.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="117.2" y="126.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (4 samples, 0.04%)</title><rect x="116.2" y="99.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="119.2" y="110.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (7 samples, 0.07%)</title><rect x="116.6" y="99.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="119.6" y="110.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (19 samples, 0.18%)</title><rect x="117.4" y="99.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="120.4" y="110.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (4 samples, 0.04%)</title><rect x="117.8" y="83.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="120.8" y="94.0"></text>
</g>
<g>
<title>os::is_MP() (3 samples, 0.03%)</title><rect x="117.9" y="67.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="120.9" y="78.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.06%)</title><rect x="118.5" y="83.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="121.5" y="94.0"></text>
</g>
<g>
<title>OrderAccess::fence() (11 samples, 0.10%)</title><rect x="119.9" y="99.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="122.9" y="110.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (5 samples, 0.05%)</title><rect x="121.1" y="99.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="124.1" y="110.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.03%)</title><rect x="122.0" y="115.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="125.0" y="126.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (4 samples, 0.04%)</title><rect x="122.3" y="115.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="125.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (8 samples, 0.07%)</title><rect x="123.6" y="179.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="126.6" y="190.0"></text>
</g>
<g>
<title>jni_GetEnv (5 samples, 0.05%)</title><rect x="124.0" y="163.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="127.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (794 samples, 7.39%)</title><rect x="124.5" y="179.0" width="87.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="127.5" y="190.0">rocksdb::p..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (794 samples, 7.39%)</title><rect x="124.5" y="163.0" width="87.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="127.5" y="174.0">_pthread_m..</text>
</g>
<g>
<title>__psynch_mutexwait (773 samples, 7.20%)</title><rect x="124.7" y="147.0" width="85.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="127.7" y="158.0">__psynch_m..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (19 samples, 0.18%)</title><rect x="209.7" y="147.0" width="2.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="212.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (323 samples, 3.01%)</title><rect x="211.8" y="179.0" width="35.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="214.8" y="190.0">roc..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (323 samples, 3.01%)</title><rect x="211.8" y="163.0" width="35.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="214.8" y="174.0">_pt..</text>
</g>
<g>
<title>__psynch_mutexdrop (319 samples, 2.97%)</title><rect x="212.2" y="147.0" width="35.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="215.2" y="158.0">__p..</text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (156 samples, 1.45%)</title><rect x="247.9" y="323.0" width="17.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="250.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (153 samples, 1.42%)</title><rect x="248.2" y="307.0" width="16.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="251.2" y="318.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (35 samples, 0.33%)</title><rect x="256.4" y="291.0" width="3.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="259.4" y="302.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (41 samples, 0.38%)</title><rect x="260.5" y="291.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="263.5" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (38 samples, 0.35%)</title><rect x="260.5" y="275.0" width="4.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="263.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (9 samples, 0.08%)</title><rect x="265.1" y="323.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="268.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (6 samples, 0.06%)</title><rect x="265.1" y="307.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="268.1" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.06%)</title><rect x="265.1" y="291.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="268.1" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.06%)</title><rect x="265.1" y="275.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="268.1" y="286.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.03%)</title><rect x="265.7" y="307.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="268.7" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="265.7" y="291.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="268.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.05%)</title><rect x="266.1" y="323.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="269.1" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.05%)</title><rect x="266.1" y="307.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="269.1" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.05%)</title><rect x="266.1" y="291.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="269.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (230 samples, 2.14%)</title><rect x="266.6" y="323.0" width="25.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="269.6" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (228 samples, 2.12%)</title><rect x="266.7" y="307.0" width="25.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="269.7" y="318.0">r..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (91 samples, 0.85%)</title><rect x="281.7" y="291.0" width="10.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="284.7" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (89 samples, 0.83%)</title><rect x="281.7" y="275.0" width="9.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="284.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (12 samples, 0.11%)</title><rect x="291.9" y="323.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="294.9" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.11%)</title><rect x="291.9" y="307.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="294.9" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.11%)</title><rect x="291.9" y="291.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="294.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.05%)</title><rect x="293.4" y="355.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="296.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (6 samples, 0.06%)</title><rect x="294.0" y="355.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="297.0" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.04%)</title><rect x="294.0" y="339.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="297.0" y="350.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="294.1" y="323.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="297.1" y="334.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="294.1" y="307.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="297.1" y="318.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="294.1" y="291.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="297.1" y="302.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="294.1" y="275.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="297.1" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="294.1" y="259.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="297.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (6 samples, 0.06%)</title><rect x="294.6" y="355.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="297.6" y="366.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.04%)</title><rect x="294.8" y="339.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="297.8" y="350.0"></text>
</g>
<g>
<title>call_stub (17 samples, 0.16%)</title><rect x="295.7" y="435.0" width="1.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="298.7" y="446.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (25 samples, 0.23%)</title><rect x="297.6" y="435.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.6" y="446.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (276 samples, 2.57%)</title><rect x="300.4" y="435.0" width="30.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.4" y="446.0">or..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (275 samples, 2.56%)</title><rect x="300.5" y="419.0" width="30.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.5" y="430.0">or..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (266 samples, 2.48%)</title><rect x="300.5" y="403.0" width="29.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.5" y="414.0">or..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (17 samples, 0.16%)</title><rect x="300.5" y="387.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.5" y="398.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (249 samples, 2.32%)</title><rect x="302.3" y="387.0" width="27.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.3" y="398.0">o..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (244 samples, 2.27%)</title><rect x="302.9" y="371.0" width="26.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="305.9" y="382.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (233 samples, 2.17%)</title><rect x="303.7" y="355.0" width="25.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="306.7" y="366.0">J..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (6 samples, 0.06%)</title><rect x="304.1" y="339.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="307.1" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (14 samples, 0.13%)</title><rect x="305.2" y="339.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="308.2" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="306.7" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="309.7" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="307.2" y="339.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="310.2" y="350.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (40 samples, 0.37%)</title><rect x="307.7" y="339.0" width="4.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="310.7" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.06%)</title><rect x="308.5" y="323.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="311.5" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (27 samples, 0.25%)</title><rect x="309.1" y="323.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="312.1" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (9 samples, 0.08%)</title><rect x="309.3" y="307.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="312.3" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (14 samples, 0.13%)</title><rect x="310.4" y="307.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="313.4" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (12 samples, 0.11%)</title><rect x="310.5" y="291.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="313.5" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (11 samples, 0.10%)</title><rect x="310.6" y="275.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="313.6" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (10 samples, 0.09%)</title><rect x="310.7" y="259.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="313.7" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (5 samples, 0.05%)</title><rect x="311.2" y="243.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="314.2" y="254.0"></text>
</g>
<g>
<title>jni_NewByteArray (95 samples, 0.88%)</title><rect x="312.1" y="339.0" width="10.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="315.1" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (5 samples, 0.05%)</title><rect x="313.3" y="323.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="316.3" y="334.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (3 samples, 0.03%)</title><rect x="313.9" y="323.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="316.9" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (14 samples, 0.13%)</title><rect x="314.3" y="323.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="317.3" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (27 samples, 0.25%)</title><rect x="316.1" y="323.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="319.1" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.05%)</title><rect x="316.3" y="307.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="319.3" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (18 samples, 0.17%)</title><rect x="317.0" y="307.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="320.0" y="318.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (3 samples, 0.03%)</title><rect x="317.1" y="291.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="320.1" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (14 samples, 0.13%)</title><rect x="317.4" y="291.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="320.4" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (13 samples, 0.12%)</title><rect x="317.5" y="275.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="320.5" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (12 samples, 0.11%)</title><rect x="317.6" y="259.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="320.6" y="270.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (3 samples, 0.03%)</title><rect x="317.9" y="243.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="320.9" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (5 samples, 0.05%)</title><rect x="318.4" y="243.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="321.4" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (31 samples, 0.29%)</title><rect x="319.0" y="323.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="322.0" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (25 samples, 0.23%)</title><rect x="319.4" y="307.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="322.4" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (20 samples, 0.19%)</title><rect x="319.6" y="291.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="322.6" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (4 samples, 0.04%)</title><rect x="320.2" y="275.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="323.2" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (60 samples, 0.56%)</title><rect x="322.6" y="339.0" width="6.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="325.6" y="350.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (4 samples, 0.04%)</title><rect x="323.4" y="323.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="326.4" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.09%)</title><rect x="323.9" y="323.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="326.9" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (23 samples, 0.21%)</title><rect x="325.1" y="323.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="328.1" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="325.2" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="328.2" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.06%)</title><rect x="325.5" y="307.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="328.5" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (13 samples, 0.12%)</title><rect x="326.2" y="307.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="329.2" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (8 samples, 0.07%)</title><rect x="326.5" y="291.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="329.5" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.07%)</title><rect x="326.5" y="275.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="329.5" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (8 samples, 0.07%)</title><rect x="326.5" y="259.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="329.5" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="327.0" y="243.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="330.0" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (9 samples, 0.08%)</title><rect x="327.6" y="323.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="330.6" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (9 samples, 0.08%)</title><rect x="329.7" y="403.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 0.07%)</title><rect x="329.7" y="387.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.7" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.06%)</title><rect x="329.8" y="371.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="332.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.03%)</title><rect x="330.8" y="531.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="333.8" y="542.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="330.8" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.8" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.06%)</title><rect x="331.1" y="563.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="334.1" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.03%)</title><rect x="331.2" y="547.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.2" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.03%)</title><rect x="331.8" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.8" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.03%)</title><rect x="331.8" y="547.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.8" y="558.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.03%)</title><rect x="331.8" y="531.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.04%)</title><rect x="332.1" y="563.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="335.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="332.1" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.1" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.03%)</title><rect x="332.1" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="335.1" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (34 samples, 0.32%)</title><rect x="332.8" y="579.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.8" y="590.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (34 samples, 0.32%)</title><rect x="332.8" y="563.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (30 samples, 0.28%)</title><rect x="333.2" y="547.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="336.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (28 samples, 0.26%)</title><rect x="333.4" y="531.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (28 samples, 0.26%)</title><rect x="333.4" y="515.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (27 samples, 0.25%)</title><rect x="333.5" y="499.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (26 samples, 0.24%)</title><rect x="333.7" y="483.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.7" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (26 samples, 0.24%)</title><rect x="333.7" y="467.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.7" y="478.0"></text>
</g>
<g>
<title>rpc_errlist (21 samples, 0.20%)</title><rect x="334.2" y="451.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="337.2" y="462.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=38915] (2,693 samples, 25.08%)</title><rect x="336.5" y="643.0" width="296.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="339.5" y="654.0">[NIO Selector #5 tid=38915]</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (3 samples, 0.03%)</title><rect x="336.5" y="627.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="339.5" y="638.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (3 samples, 0.03%)</title><rect x="336.5" y="611.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="339.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.03%)</title><rect x="336.5" y="595.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="339.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="336.5" y="579.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="339.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="336.5" y="563.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="339.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (3 samples, 0.03%)</title><rect x="336.5" y="547.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="339.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (3 samples, 0.03%)</title><rect x="336.5" y="531.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="339.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (3 samples, 0.03%)</title><rect x="336.5" y="515.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="339.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (3 samples, 0.03%)</title><rect x="336.5" y="499.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="339.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.03%)</title><rect x="336.5" y="483.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="339.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.03%)</title><rect x="336.5" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="339.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (3 samples, 0.03%)</title><rect x="336.5" y="451.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="339.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.03%)</title><rect x="336.5" y="435.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="339.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.03%)</title><rect x="336.5" y="419.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="339.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="336.5" y="403.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="339.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="336.5" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="339.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="336.5" y="371.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="339.5" y="382.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (3 samples, 0.03%)</title><rect x="336.5" y="355.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="339.5" y="366.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (3 samples, 0.03%)</title><rect x="336.5" y="339.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="339.5" y="350.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.03%)</title><rect x="336.5" y="323.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="339.5" y="334.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (3 samples, 0.03%)</title><rect x="336.5" y="307.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="339.5" y="318.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,690 samples, 25.05%)</title><rect x="336.8" y="627.0" width="295.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="339.8" y="638.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (69 samples, 0.64%)</title><rect x="337.0" y="611.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.0" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (66 samples, 0.61%)</title><rect x="337.3" y="595.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="340.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (66 samples, 0.61%)</title><rect x="337.3" y="579.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (66 samples, 0.61%)</title><rect x="337.3" y="563.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="340.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (59 samples, 0.55%)</title><rect x="337.3" y="547.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.3" y="558.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.03%)</title><rect x="338.2" y="531.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="341.2" y="542.0"></text>
</g>
<g>
<title>kevent (48 samples, 0.45%)</title><rect x="338.5" y="531.0" width="5.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="341.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.03%)</title><rect x="344.2" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="347.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,620 samples, 24.40%)</title><rect x="344.5" y="611.0" width="288.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.5" y="622.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,620 samples, 24.40%)</title><rect x="344.5" y="595.0" width="288.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.5" y="606.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,592 samples, 24.14%)</title><rect x="344.5" y="579.0" width="284.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.5" y="590.0">one/nio/http/HttpSession.processHttpBu..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,581 samples, 24.04%)</title><rect x="344.6" y="563.0" width="283.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.6" y="574.0">one/nio/http/HttpSession.handleParsedR..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,581 samples, 24.04%)</title><rect x="344.6" y="547.0" width="283.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="347.6" y="558.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2,579 samples, 24.02%)</title><rect x="344.6" y="531.0" width="283.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.6" y="542.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (81 samples, 0.75%)</title><rect x="344.6" y="515.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.6" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (75 samples, 0.70%)</title><rect x="344.6" y="499.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.6" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.06%)</title><rect x="344.6" y="483.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="347.6" y="494.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.06%)</title><rect x="344.6" y="467.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.6" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.03%)</title><rect x="344.6" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="347.6" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="345.0" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="348.0" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="345.0" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (69 samples, 0.64%)</title><rect x="345.3" y="483.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="348.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (69 samples, 0.64%)</title><rect x="345.3" y="467.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="348.3" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (68 samples, 0.63%)</title><rect x="345.3" y="451.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="348.3" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (68 samples, 0.63%)</title><rect x="345.3" y="435.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="348.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (66 samples, 0.61%)</title><rect x="345.5" y="419.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (64 samples, 0.60%)</title><rect x="345.7" y="403.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (64 samples, 0.60%)</title><rect x="345.7" y="387.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (63 samples, 0.59%)</title><rect x="345.7" y="371.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (63 samples, 0.59%)</title><rect x="345.7" y="355.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="348.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (63 samples, 0.59%)</title><rect x="345.7" y="339.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.7" y="350.0"></text>
</g>
<g>
<title>write (59 samples, 0.55%)</title><rect x="346.2" y="323.0" width="6.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="349.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.06%)</title><rect x="352.9" y="499.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="355.9" y="510.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="352.9" y="483.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.9" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="353.2" y="483.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="356.2" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="353.2" y="467.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.2" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="353.2" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.entity (2,498 samples, 23.27%)</title><rect x="353.5" y="515.0" width="274.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.5" y="526.0">ru/mail/polis/service/stakenschneider..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.put (2,498 samples, 23.27%)</title><rect x="353.5" y="499.0" width="274.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="356.5" y="510.0">ru/mail/polis/service/stakenschneider..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (2,496 samples, 23.25%)</title><rect x="353.8" y="483.0" width="274.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.8" y="494.0">ru/mail/polis/dao/RocksDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,496 samples, 23.25%)</title><rect x="353.8" y="467.0" width="274.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.8" y="478.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,496 samples, 23.25%)</title><rect x="353.8" y="451.0" width="274.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.8" y="462.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (8 samples, 0.07%)</title><rect x="354.2" y="435.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="357.2" y="446.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,081 samples, 19.38%)</title><rect x="355.1" y="435.0" width="228.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="358.1" y="446.0">Java_org_rocksdb_RocksDB_put__..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,074 samples, 19.32%)</title><rect x="355.9" y="419.0" width="227.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="358.9" y="430.0">rocksdb_put_helper(JNIEnv_*, r..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.04%)</title><rect x="356.6" y="403.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="359.6" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="356.7" y="387.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="359.7" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="356.7" y="371.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="359.7" y="382.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="356.7" y="355.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="359.7" y="366.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="356.7" y="339.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="359.7" y="350.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="356.7" y="323.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="359.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,058 samples, 19.17%)</title><rect x="357.3" y="403.0" width="226.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="360.3" y="414.0">rocksdb::CompactedDBImpl::Open..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,058 samples, 19.17%)</title><rect x="357.3" y="387.0" width="226.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="360.3" y="398.0">rocksdb::DBImpl::Put(rocksdb::..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,056 samples, 19.15%)</title><rect x="357.3" y="371.0" width="225.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="360.3" y="382.0">rocksdb::DB::Put(rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,043 samples, 19.03%)</title><rect x="357.4" y="355.0" width="224.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="360.4" y="366.0">rocksdb::DBImpl::Write(rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,039 samples, 18.99%)</title><rect x="357.4" y="339.0" width="224.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="360.4" y="350.0">rocksdb::DBImpl::WriteImpl(roc..</text>
</g>
<g>
<title>operator delete(void*) (4 samples, 0.04%)</title><rect x="358.6" y="323.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="361.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (60 samples, 0.56%)</title><rect x="359.3" y="323.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="362.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (3 samples, 0.03%)</title><rect x="359.3" y="307.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="362.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (57 samples, 0.53%)</title><rect x="359.6" y="307.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="362.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (57 samples, 0.53%)</title><rect x="359.6" y="291.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="362.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (55 samples, 0.51%)</title><rect x="359.8" y="275.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="362.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (53 samples, 0.49%)</title><rect x="360.0" y="259.0" width="5.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="363.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (50 samples, 0.47%)</title><rect x="360.4" y="243.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="363.4" y="254.0"></text>
</g>
<g>
<title>write (50 samples, 0.47%)</title><rect x="360.4" y="227.0" width="5.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="363.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (4 samples, 0.04%)</title><rect x="366.0" y="323.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="369.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (4 samples, 0.04%)</title><rect x="366.0" y="307.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="369.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.04%)</title><rect x="366.0" y="291.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="369.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.04%)</title><rect x="366.0" y="275.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="369.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (4 samples, 0.04%)</title><rect x="366.0" y="259.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="369.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.04%)</title><rect x="366.0" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="369.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.04%)</title><rect x="366.0" y="227.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="369.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (4 samples, 0.04%)</title><rect x="366.0" y="211.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="369.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="366.1" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="369.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (1,522 samples, 14.18%)</title><rect x="366.4" y="323.0" width="167.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="369.4" y="334.0">rocksdb::WriteBatchIn..</text>
</g>
<g>
<title>free (6 samples, 0.06%)</title><rect x="366.7" y="307.0" width="0.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="369.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1,507 samples, 14.04%)</title><rect x="367.9" y="307.0" width="165.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="370.9" y="318.0">rocksdb::WriteBatch::..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1,505 samples, 14.02%)</title><rect x="368.2" y="291.0" width="165.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="371.2" y="302.0">rocksdb::WriteBatchIn..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1,503 samples, 14.00%)</title><rect x="368.4" y="275.0" width="165.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="371.4" y="286.0">rocksdb::WriteBatchIn..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1,502 samples, 13.99%)</title><rect x="368.4" y="259.0" width="165.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="371.4" y="270.0">rocksdb::MemTable::Ad..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,498 samples, 13.95%)</title><rect x="368.8" y="243.0" width="164.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="371.8" y="254.0">rocksdb::SkipListFact..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,492 samples, 13.90%)</title><rect x="369.5" y="227.0" width="164.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="372.5" y="238.0">rocksdb::SkipListFact..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="373.4" y="211.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="376.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (64 samples, 0.60%)</title><rect x="374.0" y="211.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="377.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (62 samples, 0.58%)</title><rect x="374.0" y="195.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="377.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (25 samples, 0.23%)</title><rect x="374.4" y="179.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="377.4" y="190.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (5 samples, 0.05%)</title><rect x="374.6" y="163.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="377.6" y="174.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (4 samples, 0.04%)</title><rect x="374.8" y="147.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="377.8" y="158.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="375.2" y="163.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="378.2" y="174.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (15 samples, 0.14%)</title><rect x="375.5" y="163.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="378.5" y="174.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (12 samples, 0.11%)</title><rect x="375.9" y="147.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="378.9" y="158.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (9 samples, 0.08%)</title><rect x="376.2" y="131.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="379.2" y="142.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.04%)</title><rect x="376.5" y="115.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="379.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (22 samples, 0.20%)</title><rect x="377.2" y="179.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="380.2" y="190.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (22 samples, 0.20%)</title><rect x="377.2" y="163.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="380.2" y="174.0"></text>
</g>
<g>
<title>__psynch_mutexwait (20 samples, 0.19%)</title><rect x="377.2" y="147.0" width="2.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="380.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (11 samples, 0.10%)</title><rect x="379.6" y="179.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="382.6" y="190.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (11 samples, 0.10%)</title><rect x="379.6" y="163.0" width="1.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="382.6" y="174.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (11 samples, 0.10%)</title><rect x="379.6" y="147.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="382.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1,387 samples, 12.92%)</title><rect x="381.0" y="211.0" width="152.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="384.0" y="222.0">rocksdb::MemTable::..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1,369 samples, 12.75%)</title><rect x="382.7" y="195.0" width="150.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="385.7" y="206.0">rocksdb::BaseCompar..</text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.07%)</title><rect x="384.9" y="179.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="387.9" y="190.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (22 samples, 0.20%)</title><rect x="386.0" y="179.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="389.0" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="386.6" y="163.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="389.6" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.09%)</title><rect x="387.2" y="163.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="390.2" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.06%)</title><rect x="387.4" y="147.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="390.4" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.04%)</title><rect x="387.5" y="131.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="390.5" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="387.5" y="115.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="390.5" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="387.5" y="99.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="390.5" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.07%)</title><rect x="388.6" y="179.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="391.6" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (13 samples, 0.12%)</title><rect x="389.5" y="179.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="392.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (483 samples, 4.50%)</title><rect x="390.9" y="179.0" width="53.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="393.9" y="190.0">rocks..</text>
</g>
<g>
<title>OrderAccess::fence() (14 samples, 0.13%)</title><rect x="392.0" y="163.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="395.0" y="174.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (132 samples, 1.23%)</title><rect x="393.8" y="163.0" width="14.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="396.8" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (12 samples, 0.11%)</title><rect x="395.1" y="147.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="398.1" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (16 samples, 0.15%)</title><rect x="396.5" y="147.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="399.5" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (10 samples, 0.09%)</title><rect x="397.1" y="131.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="400.1" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (8 samples, 0.07%)</title><rect x="397.3" y="115.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="400.3" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.07%)</title><rect x="397.4" y="99.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="400.4" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.05%)</title><rect x="397.5" y="83.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="400.5" y="94.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (89 samples, 0.83%)</title><rect x="398.3" y="147.0" width="9.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="401.3" y="158.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (3 samples, 0.03%)</title><rect x="399.7" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="402.7" y="142.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (4 samples, 0.04%)</title><rect x="400.1" y="131.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="403.1" y="142.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (3 samples, 0.03%)</title><rect x="400.9" y="131.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="403.9" y="142.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (8 samples, 0.07%)</title><rect x="401.2" y="131.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="404.2" y="142.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (39 samples, 0.36%)</title><rect x="402.1" y="131.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="405.1" y="142.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (10 samples, 0.09%)</title><rect x="403.6" y="115.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="406.6" y="126.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.03%)</title><rect x="404.3" y="99.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="407.3" y="110.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (7 samples, 0.07%)</title><rect x="404.7" y="115.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="407.7" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.05%)</title><rect x="404.9" y="99.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="407.9" y="110.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="405.8" y="115.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="408.8" y="126.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (5 samples, 0.05%)</title><rect x="406.5" y="131.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="409.5" y="142.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.03%)</title><rect x="407.2" y="131.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="410.2" y="142.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (3 samples, 0.03%)</title><rect x="407.5" y="131.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="410.5" y="142.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (53 samples, 0.49%)</title><rect x="408.5" y="163.0" width="5.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="411.5" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (19 samples, 0.18%)</title><rect x="409.0" y="147.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="412.0" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (25 samples, 0.23%)</title><rect x="411.5" y="147.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="414.5" y="158.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="411.5" y="131.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="414.5" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.05%)</title><rect x="411.9" y="131.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="414.9" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (15 samples, 0.14%)</title><rect x="412.6" y="131.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="415.6" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (9 samples, 0.08%)</title><rect x="412.9" y="115.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="415.9" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.07%)</title><rect x="413.0" y="99.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="416.0" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.07%)</title><rect x="413.0" y="83.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="416.0" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="413.4" y="67.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="416.4" y="78.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (3 samples, 0.03%)</title><rect x="413.9" y="115.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="416.9" y="126.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (270 samples, 2.51%)</title><rect x="414.3" y="163.0" width="29.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="417.3" y="174.0">no..</text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.07%)</title><rect x="414.9" y="147.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="417.9" y="158.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (255 samples, 2.37%)</title><rect x="416.0" y="147.0" width="28.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="419.0" y="158.0">jn..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (3 samples, 0.03%)</title><rect x="418.0" y="131.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="421.0" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (21 samples, 0.20%)</title><rect x="418.7" y="131.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="421.7" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (24 samples, 0.22%)</title><rect x="421.1" y="131.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="424.1" y="142.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (5 samples, 0.05%)</title><rect x="421.1" y="115.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="424.1" y="126.0"></text>
</g>
<g>
<title>os::is_MP() (4 samples, 0.04%)</title><rect x="421.2" y="99.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="424.2" y="110.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="421.7" y="115.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="424.7" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (13 samples, 0.12%)</title><rect x="422.1" y="115.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="425.1" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (10 samples, 0.09%)</title><rect x="422.2" y="99.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="425.2" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.07%)</title><rect x="422.5" y="83.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="425.5" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (6 samples, 0.06%)</title><rect x="422.7" y="67.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="425.7" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="423.0" y="51.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="426.0" y="62.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (178 samples, 1.66%)</title><rect x="424.0" y="131.0" width="19.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="427.0" y="142.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (8 samples, 0.07%)</title><rect x="426.9" y="115.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="429.9" y="126.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (5 samples, 0.05%)</title><rect x="427.2" y="99.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="430.2" y="110.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (11 samples, 0.10%)</title><rect x="428.2" y="115.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="431.2" y="126.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (6 samples, 0.06%)</title><rect x="428.7" y="99.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="431.7" y="110.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (4 samples, 0.04%)</title><rect x="428.9" y="83.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="431.9" y="94.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (3 samples, 0.03%)</title><rect x="429.4" y="115.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="432.4" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_long() (3 samples, 0.03%)</title><rect x="430.1" y="115.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="433.1" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (21 samples, 0.20%)</title><rect x="430.5" y="115.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="433.5" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (6 samples, 0.06%)</title><rect x="431.9" y="99.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="434.9" y="110.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (3 samples, 0.03%)</title><rect x="432.8" y="115.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="435.8" y="126.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (62 samples, 0.58%)</title><rect x="433.1" y="115.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="436.1" y="126.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (5 samples, 0.05%)</title><rect x="434.3" y="99.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="437.3" y="110.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (5 samples, 0.05%)</title><rect x="435.4" y="99.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="438.4" y="110.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (3 samples, 0.03%)</title><rect x="436.0" y="99.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="439.0" y="110.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (17 samples, 0.16%)</title><rect x="436.3" y="99.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="439.3" y="110.0"></text>
</g>
<g>
<title>OrderAccess::fence() (8 samples, 0.07%)</title><rect x="437.2" y="83.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="440.2" y="94.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.04%)</title><rect x="438.3" y="99.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="441.3" y="110.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.05%)</title><rect x="438.7" y="99.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="441.7" y="110.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (5 samples, 0.05%)</title><rect x="439.4" y="99.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="442.4" y="110.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (3 samples, 0.03%)</title><rect x="439.9" y="115.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="442.9" y="126.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="440.3" y="115.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="443.3" y="126.0"></text>
</g>
<g>
<title>Chunk::next() const (3 samples, 0.03%)</title><rect x="440.3" y="99.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="443.3" y="110.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (17 samples, 0.16%)</title><rect x="440.8" y="115.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="443.8" y="126.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (5 samples, 0.05%)</title><rect x="442.7" y="115.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="445.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (11 samples, 0.10%)</title><rect x="444.0" y="179.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="447.0" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.04%)</title><rect x="444.0" y="163.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="447.0" y="174.0"></text>
</g>
<g>
<title>jni_GetEnv (5 samples, 0.05%)</title><rect x="444.7" y="163.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="447.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (565 samples, 5.26%)</title><rect x="445.3" y="179.0" width="62.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="448.3" y="190.0">rocksd..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (563 samples, 5.24%)</title><rect x="445.5" y="163.0" width="61.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="448.5" y="174.0">_pthre..</text>
</g>
<g>
<title>__psynch_mutexwait (557 samples, 5.19%)</title><rect x="445.5" y="147.0" width="61.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="448.5" y="158.0">__psyn..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (6 samples, 0.06%)</title><rect x="506.7" y="147.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="509.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (234 samples, 2.18%)</title><rect x="507.4" y="179.0" width="25.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="510.4" y="190.0">r..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (232 samples, 2.16%)</title><rect x="507.6" y="163.0" width="25.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="510.6" y="174.0">_..</text>
</g>
<g>
<title>__psynch_mutexdrop (228 samples, 2.12%)</title><rect x="508.0" y="147.0" width="25.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="511.0" y="158.0">_..</text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (172 samples, 1.60%)</title><rect x="533.9" y="323.0" width="18.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="536.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (167 samples, 1.56%)</title><rect x="534.2" y="307.0" width="18.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="537.2" y="318.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (33 samples, 0.31%)</title><rect x="544.2" y="291.0" width="3.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="547.2" y="302.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.03%)</title><rect x="547.9" y="291.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="550.9" y="302.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (40 samples, 0.37%)</title><rect x="548.2" y="291.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="551.2" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (39 samples, 0.36%)</title><rect x="548.2" y="275.0" width="4.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="551.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (16 samples, 0.15%)</title><rect x="552.8" y="323.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="555.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (11 samples, 0.10%)</title><rect x="552.8" y="307.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="555.8" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.03%)</title><rect x="552.9" y="291.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="555.9" y="302.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.07%)</title><rect x="553.2" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="556.2" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.07%)</title><rect x="553.2" y="275.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="556.2" y="286.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.05%)</title><rect x="554.0" y="307.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="557.0" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.05%)</title><rect x="554.0" y="291.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="557.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (11 samples, 0.10%)</title><rect x="554.6" y="323.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="557.6" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.09%)</title><rect x="554.7" y="307.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="557.7" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.07%)</title><rect x="554.7" y="291.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="557.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (218 samples, 2.03%)</title><rect x="555.8" y="323.0" width="23.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="558.8" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (215 samples, 2.00%)</title><rect x="556.0" y="307.0" width="23.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="559.0" y="318.0">r..</text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.03%)</title><rect x="568.7" y="291.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="571.7" y="302.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (5 samples, 0.05%)</title><rect x="569.1" y="291.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="572.1" y="302.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (88 samples, 0.82%)</title><rect x="569.6" y="291.0" width="9.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="572.6" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (82 samples, 0.76%)</title><rect x="569.7" y="275.0" width="9.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="572.7" y="286.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.04%)</title><rect x="578.7" y="275.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="581.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (14 samples, 0.13%)</title><rect x="579.7" y="323.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="582.7" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (13 samples, 0.12%)</title><rect x="579.8" y="307.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="582.8" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.11%)</title><rect x="579.8" y="291.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="582.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="581.9" y="355.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="584.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.05%)</title><rect x="582.3" y="355.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="585.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.04%)</title><rect x="582.8" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="585.8" y="366.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="582.9" y="339.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="585.9" y="350.0"></text>
</g>
<g>
<title>call_stub (16 samples, 0.15%)</title><rect x="583.8" y="435.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="586.8" y="446.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (37 samples, 0.34%)</title><rect x="585.5" y="435.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.5" y="446.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (348 samples, 3.24%)</title><rect x="589.8" y="435.0" width="38.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="592.8" y="446.0">org..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (345 samples, 3.21%)</title><rect x="590.2" y="419.0" width="37.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="593.2" y="430.0">org..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (330 samples, 3.07%)</title><rect x="590.2" y="403.0" width="36.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="593.2" y="414.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (12 samples, 0.11%)</title><rect x="590.2" y="387.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="593.2" y="398.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (318 samples, 2.96%)</title><rect x="591.5" y="387.0" width="34.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="594.5" y="398.0">or..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (315 samples, 2.93%)</title><rect x="591.8" y="371.0" width="34.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="594.8" y="382.0">or..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (298 samples, 2.78%)</title><rect x="593.2" y="355.0" width="32.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="596.2" y="366.0">Ja..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="594.0" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="597.0" y="350.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (3 samples, 0.03%)</title><rect x="594.8" y="339.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="597.8" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (14 samples, 0.13%)</title><rect x="595.1" y="339.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="598.1" y="350.0"></text>
</g>
<g>
<title>compiler_barrier() (3 samples, 0.03%)</title><rect x="597.2" y="339.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="600.2" y="350.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (56 samples, 0.52%)</title><rect x="597.5" y="339.0" width="6.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="600.5" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (19 samples, 0.18%)</title><rect x="598.5" y="323.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="601.5" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (24 samples, 0.22%)</title><rect x="600.9" y="323.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="603.9" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.07%)</title><rect x="601.3" y="307.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="604.3" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (13 samples, 0.12%)</title><rect x="602.0" y="307.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="605.0" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (13 samples, 0.12%)</title><rect x="602.0" y="291.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="605.0" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (13 samples, 0.12%)</title><rect x="602.0" y="275.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="605.0" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (11 samples, 0.10%)</title><rect x="602.0" y="259.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="605.0" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (6 samples, 0.06%)</title><rect x="602.6" y="243.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="605.6" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.04%)</title><rect x="602.7" y="227.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="605.7" y="238.0"></text>
</g>
<g>
<title>jni_NewByteArray (118 samples, 1.10%)</title><rect x="603.7" y="339.0" width="12.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="606.7" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (4 samples, 0.04%)</title><rect x="605.9" y="323.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="608.9" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (13 samples, 0.12%)</title><rect x="606.3" y="323.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="609.3" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (40 samples, 0.37%)</title><rect x="608.1" y="323.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="611.1" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="608.5" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="611.5" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (13 samples, 0.12%)</title><rect x="608.8" y="307.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="611.8" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (18 samples, 0.17%)</title><rect x="610.3" y="307.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="613.3" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (15 samples, 0.14%)</title><rect x="610.4" y="291.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="613.4" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (13 samples, 0.12%)</title><rect x="610.6" y="275.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="613.6" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (13 samples, 0.12%)</title><rect x="610.6" y="259.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="613.6" y="270.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (3 samples, 0.03%)</title><rect x="610.7" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="613.7" y="254.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (3 samples, 0.03%)</title><rect x="611.2" y="243.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="614.2" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="611.6" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="614.6" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (37 samples, 0.34%)</title><rect x="612.5" y="323.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="615.5" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (24 samples, 0.22%)</title><rect x="613.2" y="307.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="616.2" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (19 samples, 0.18%)</title><rect x="613.5" y="291.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="616.5" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (3 samples, 0.03%)</title><rect x="613.8" y="275.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="616.8" y="286.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.03%)</title><rect x="614.9" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="617.9" y="286.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (3 samples, 0.03%)</title><rect x="615.9" y="307.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="618.9" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="616.2" y="307.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="619.2" y="318.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (84 samples, 0.78%)</title><rect x="616.6" y="339.0" width="9.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="619.6" y="350.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="617.9" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="620.9" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (14 samples, 0.13%)</title><rect x="618.5" y="323.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="621.5" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (39 samples, 0.36%)</title><rect x="620.3" y="323.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="623.3" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (12 samples, 0.11%)</title><rect x="620.5" y="307.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="623.5" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (18 samples, 0.17%)</title><rect x="622.0" y="307.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="625.0" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (17 samples, 0.16%)</title><rect x="622.1" y="291.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="625.1" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (14 samples, 0.13%)</title><rect x="622.5" y="275.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="625.5" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (13 samples, 0.12%)</title><rect x="622.5" y="259.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="625.5" y="270.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (3 samples, 0.03%)</title><rect x="622.8" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="625.8" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (7 samples, 0.07%)</title><rect x="623.1" y="243.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="626.1" y="254.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="623.6" y="227.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="626.6" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (8 samples, 0.07%)</title><rect x="624.6" y="323.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="627.6" y="334.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.03%)</title><rect x="625.4" y="323.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="628.4" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (15 samples, 0.14%)</title><rect x="626.4" y="403.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="629.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.13%)</title><rect x="626.4" y="387.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.4" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (12 samples, 0.11%)</title><rect x="626.7" y="371.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="629.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.03%)</title><rect x="628.4" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="631.4" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.03%)</title><rect x="628.4" y="547.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="631.4" y="558.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.03%)</title><rect x="628.4" y="531.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="631.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.05%)</title><rect x="628.8" y="563.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="631.8" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (28 samples, 0.26%)</title><rect x="629.4" y="579.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.4" y="590.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (28 samples, 0.26%)</title><rect x="629.4" y="563.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="632.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (27 samples, 0.25%)</title><rect x="629.5" y="547.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="632.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (25 samples, 0.23%)</title><rect x="629.6" y="531.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="632.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (25 samples, 0.23%)</title><rect x="629.6" y="515.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.6" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.03%)</title><rect x="629.6" y="499.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="632.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="629.6" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="632.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (22 samples, 0.20%)</title><rect x="629.9" y="499.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="632.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (22 samples, 0.20%)</title><rect x="629.9" y="483.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="632.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (22 samples, 0.20%)</title><rect x="629.9" y="467.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.9" y="478.0"></text>
</g>
<g>
<title>rpc_errlist (17 samples, 0.16%)</title><rect x="630.5" y="451.0" width="1.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="633.5" y="462.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=38403] (2,559 samples, 23.83%)</title><rect x="632.5" y="643.0" width="281.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="635.5" y="654.0">[NIO Selector #6 tid=38403]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,555 samples, 23.80%)</title><rect x="632.8" y="627.0" width="280.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.8" y="638.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (78 samples, 0.73%)</title><rect x="632.9" y="611.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (74 samples, 0.69%)</title><rect x="633.2" y="595.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (74 samples, 0.69%)</title><rect x="633.2" y="579.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (74 samples, 0.69%)</title><rect x="633.2" y="563.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="636.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (66 samples, 0.61%)</title><rect x="633.2" y="547.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.2" y="558.0"></text>
</g>
<g>
<title>kevent (62 samples, 0.58%)</title><rect x="633.7" y="531.0" width="6.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="636.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.04%)</title><rect x="640.9" y="547.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="643.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.04%)</title><rect x="640.9" y="531.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="643.9" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,476 samples, 23.06%)</title><rect x="641.5" y="611.0" width="272.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.5" y="622.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,476 samples, 23.06%)</title><rect x="641.5" y="595.0" width="272.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.5" y="606.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,456 samples, 22.87%)</title><rect x="641.5" y="579.0" width="269.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="644.5" y="590.0">one/nio/http/HttpSession.processHttp..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,445 samples, 22.77%)</title><rect x="641.7" y="563.0" width="268.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="644.7" y="574.0">one/nio/http/HttpSession.handleParse..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,443 samples, 22.75%)</title><rect x="641.9" y="547.0" width="268.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="644.9" y="558.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2,440 samples, 22.73%)</title><rect x="641.9" y="531.0" width="268.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.9" y="542.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (59 samples, 0.55%)</title><rect x="641.9" y="515.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="644.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (54 samples, 0.50%)</title><rect x="642.0" y="499.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.0" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (53 samples, 0.49%)</title><rect x="642.1" y="483.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.1" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (53 samples, 0.49%)</title><rect x="642.1" y="467.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.1" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (53 samples, 0.49%)</title><rect x="642.1" y="451.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.1" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (53 samples, 0.49%)</title><rect x="642.1" y="435.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (53 samples, 0.49%)</title><rect x="642.1" y="419.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="645.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (53 samples, 0.49%)</title><rect x="642.1" y="403.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="645.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (53 samples, 0.49%)</title><rect x="642.1" y="387.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="645.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (51 samples, 0.47%)</title><rect x="642.1" y="371.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (51 samples, 0.47%)</title><rect x="642.1" y="355.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (51 samples, 0.47%)</title><rect x="642.1" y="339.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.1" y="350.0"></text>
</g>
<g>
<title>write (49 samples, 0.46%)</title><rect x="642.4" y="323.0" width="5.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="645.4" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.04%)</title><rect x="648.0" y="499.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="651.0" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.entity (2,380 samples, 22.17%)</title><rect x="648.5" y="515.0" width="261.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="651.5" y="526.0">ru/mail/polis/service/stakenschneid..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.put (2,380 samples, 22.17%)</title><rect x="648.5" y="499.0" width="261.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.5" y="510.0">ru/mail/polis/service/stakenschneid..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (2,379 samples, 22.16%)</title><rect x="648.6" y="483.0" width="261.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="651.6" y="494.0">ru/mail/polis/dao/RocksDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,378 samples, 22.15%)</title><rect x="648.6" y="467.0" width="261.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="651.6" y="478.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,378 samples, 22.15%)</title><rect x="648.6" y="451.0" width="261.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="651.6" y="462.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (9 samples, 0.08%)</title><rect x="649.5" y="435.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="652.5" y="446.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,875 samples, 17.46%)</title><rect x="650.5" y="435.0" width="206.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="653.5" y="446.0">Java_org_rocksdb_RocksDB_pu..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,874 samples, 17.45%)</title><rect x="650.6" y="419.0" width="206.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="653.6" y="430.0">rocksdb_put_helper(JNIEnv_*..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="651.4" y="403.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="654.4" y="414.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.03%)</title><rect x="651.4" y="387.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="654.4" y="398.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="651.7" y="403.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="654.7" y="414.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.04%)</title><rect x="652.0" y="403.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="655.0" y="414.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.07%)</title><rect x="652.7" y="403.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="655.7" y="414.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.07%)</title><rect x="652.7" y="387.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="655.7" y="398.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.06%)</title><rect x="652.8" y="371.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="655.8" y="382.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.05%)</title><rect x="652.9" y="355.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="655.9" y="366.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.04%)</title><rect x="653.0" y="339.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="656.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,848 samples, 17.21%)</title><rect x="653.5" y="403.0" width="203.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="656.5" y="414.0">rocksdb::CompactedDBImpl::O..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,847 samples, 17.20%)</title><rect x="653.6" y="387.0" width="203.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="656.6" y="398.0">rocksdb::DBImpl::Put(rocks..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,845 samples, 17.18%)</title><rect x="653.6" y="371.0" width="202.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="656.6" y="382.0">rocksdb::DB::Put(rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,833 samples, 17.07%)</title><rect x="653.9" y="355.0" width="201.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="656.9" y="366.0">rocksdb::DBImpl::Write(roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,832 samples, 17.06%)</title><rect x="653.9" y="339.0" width="201.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="656.9" y="350.0">rocksdb::DBImpl::WriteImpl..</text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.03%)</title><rect x="655.3" y="323.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="658.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (42 samples, 0.39%)</title><rect x="655.8" y="323.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="658.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (41 samples, 0.38%)</title><rect x="655.9" y="307.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="658.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (40 samples, 0.37%)</title><rect x="656.0" y="291.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="659.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (40 samples, 0.37%)</title><rect x="656.0" y="275.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="659.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (38 samples, 0.35%)</title><rect x="656.2" y="259.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="659.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (38 samples, 0.35%)</title><rect x="656.2" y="243.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="659.2" y="254.0"></text>
</g>
<g>
<title>write (38 samples, 0.35%)</title><rect x="656.2" y="227.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="659.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (4 samples, 0.04%)</title><rect x="660.6" y="323.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="663.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (4 samples, 0.04%)</title><rect x="660.6" y="307.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="663.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.04%)</title><rect x="660.6" y="291.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="663.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.04%)</title><rect x="660.6" y="275.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="663.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (4 samples, 0.04%)</title><rect x="660.6" y="259.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="663.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.04%)</title><rect x="660.6" y="243.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="663.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="660.7" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="663.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="660.7" y="211.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="663.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="660.7" y="195.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="663.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (1,351 samples, 12.58%)</title><rect x="661.0" y="323.0" width="148.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="664.0" y="334.0">rocksdb::WriteBatch..</text>
</g>
<g>
<title>free (4 samples, 0.04%)</title><rect x="661.7" y="307.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="664.7" y="318.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="662.1" y="307.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="665.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1,337 samples, 12.45%)</title><rect x="662.6" y="307.0" width="146.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="665.6" y="318.0">rocksdb::WriteBatc..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1,333 samples, 12.42%)</title><rect x="663.0" y="291.0" width="146.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="666.0" y="302.0">rocksdb::WriteBatc..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1,331 samples, 12.40%)</title><rect x="663.2" y="275.0" width="146.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="666.2" y="286.0">rocksdb::WriteBatc..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1,328 samples, 12.37%)</title><rect x="663.6" y="259.0" width="145.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="666.6" y="270.0">rocksdb::MemTable:..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,326 samples, 12.35%)</title><rect x="663.8" y="243.0" width="145.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="666.8" y="254.0">rocksdb::SkipListF..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,322 samples, 12.31%)</title><rect x="664.2" y="227.0" width="145.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="667.2" y="238.0">rocksdb::SkipListF..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (56 samples, 0.52%)</title><rect x="667.2" y="211.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="670.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (55 samples, 0.51%)</title><rect x="667.3" y="195.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="670.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (32 samples, 0.30%)</title><rect x="667.6" y="179.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="670.6" y="190.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (14 samples, 0.13%)</title><rect x="667.6" y="163.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="670.6" y="174.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (10 samples, 0.09%)</title><rect x="668.1" y="147.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="671.1" y="158.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.04%)</title><rect x="668.4" y="131.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="671.4" y="142.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.04%)</title><rect x="669.2" y="163.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="672.2" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="669.3" y="147.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="672.3" y="158.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (14 samples, 0.13%)</title><rect x="669.6" y="163.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="672.6" y="174.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (14 samples, 0.13%)</title><rect x="669.6" y="147.0" width="1.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="672.6" y="158.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (10 samples, 0.09%)</title><rect x="670.1" y="131.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="673.1" y="142.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 0.06%)</title><rect x="670.4" y="115.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="673.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (15 samples, 0.14%)</title><rect x="671.2" y="179.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="674.2" y="190.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (14 samples, 0.13%)</title><rect x="671.3" y="163.0" width="1.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="674.3" y="174.0"></text>
</g>
<g>
<title>__psynch_mutexwait (14 samples, 0.13%)</title><rect x="671.3" y="147.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="674.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (5 samples, 0.05%)</title><rect x="672.8" y="179.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="675.8" y="190.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (5 samples, 0.05%)</title><rect x="672.8" y="163.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="675.8" y="174.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (5 samples, 0.05%)</title><rect x="672.8" y="147.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="675.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1,239 samples, 11.54%)</title><rect x="673.4" y="211.0" width="136.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="676.4" y="222.0">rocksdb::MemTable..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1,215 samples, 11.32%)</title><rect x="675.2" y="195.0" width="133.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="678.2" y="206.0">rocksdb::BaseComp..</text>
</g>
<g>
<title>jni_ExceptionCheck (32 samples, 0.30%)</title><rect x="677.1" y="179.0" width="3.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="680.1" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.09%)</title><rect x="678.0" y="163.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="681.0" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (12 samples, 0.11%)</title><rect x="679.2" y="163.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="682.2" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="679.3" y="147.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="682.3" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.06%)</title><rect x="679.7" y="147.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="682.7" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.04%)</title><rect x="679.8" y="131.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="682.8" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="680.0" y="115.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="683.0" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="680.0" y="99.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="683.0" y="110.0"></text>
</g>
<g>
<title>jni_GetEnv (4 samples, 0.04%)</title><rect x="680.6" y="179.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="683.6" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.04%)</title><rect x="681.2" y="179.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="684.2" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (15 samples, 0.14%)</title><rect x="681.6" y="179.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="684.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (510 samples, 4.75%)</title><rect x="683.2" y="179.0" width="56.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="686.2" y="190.0">rocksd..</text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.09%)</title><rect x="684.2" y="163.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="687.2" y="174.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (147 samples, 1.37%)</title><rect x="685.6" y="163.0" width="16.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="688.6" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (9 samples, 0.08%)</title><rect x="687.6" y="147.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="690.6" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (13 samples, 0.12%)</title><rect x="688.7" y="147.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="691.7" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (9 samples, 0.08%)</title><rect x="688.9" y="131.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="691.9" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="689.8" y="131.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="692.8" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="689.8" y="115.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="692.8" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="689.8" y="99.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="692.8" y="110.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (102 samples, 0.95%)</title><rect x="690.2" y="147.0" width="11.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="693.2" y="158.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (4 samples, 0.04%)</title><rect x="691.7" y="131.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="694.7" y="142.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (5 samples, 0.05%)</title><rect x="692.2" y="131.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="695.2" y="142.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (3 samples, 0.03%)</title><rect x="693.1" y="131.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="696.1" y="142.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (52 samples, 0.48%)</title><rect x="693.7" y="131.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="696.7" y="142.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (5 samples, 0.05%)</title><rect x="694.7" y="115.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="697.7" y="126.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (14 samples, 0.13%)</title><rect x="696.0" y="115.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="699.0" y="126.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (8 samples, 0.07%)</title><rect x="696.4" y="99.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="699.4" y="110.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (5 samples, 0.05%)</title><rect x="696.8" y="83.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="699.8" y="94.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (7 samples, 0.07%)</title><rect x="697.5" y="115.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="700.5" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="698.0" y="99.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="701.0" y="110.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.05%)</title><rect x="698.5" y="115.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="701.5" y="126.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (3 samples, 0.03%)</title><rect x="699.4" y="131.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="702.4" y="142.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.04%)</title><rect x="699.7" y="131.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="702.7" y="142.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.03%)</title><rect x="700.3" y="131.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="703.3" y="142.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (5 samples, 0.05%)</title><rect x="700.7" y="131.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="703.7" y="142.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (3 samples, 0.03%)</title><rect x="700.9" y="115.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="703.9" y="126.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.03%)</title><rect x="701.4" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="704.4" y="158.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (49 samples, 0.46%)</title><rect x="701.8" y="163.0" width="5.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="704.8" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (17 samples, 0.16%)</title><rect x="702.4" y="147.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="705.4" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (25 samples, 0.23%)</title><rect x="704.2" y="147.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="707.2" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.05%)</title><rect x="704.7" y="131.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="707.7" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (15 samples, 0.14%)</title><rect x="705.2" y="131.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="708.2" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (12 samples, 0.11%)</title><rect x="705.6" y="115.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="708.6" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (12 samples, 0.11%)</title><rect x="705.6" y="99.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="708.6" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (12 samples, 0.11%)</title><rect x="705.6" y="83.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="708.6" y="94.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (3 samples, 0.03%)</title><rect x="705.7" y="67.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="708.7" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="706.4" y="67.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="709.4" y="78.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (292 samples, 2.72%)</title><rect x="707.2" y="163.0" width="32.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="710.2" y="174.0">no..</text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.05%)</title><rect x="708.1" y="147.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="711.1" y="158.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="708.6" y="147.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="711.6" y="158.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (273 samples, 2.54%)</title><rect x="709.1" y="147.0" width="30.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="712.1" y="158.0">jn..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="710.9" y="131.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="713.9" y="142.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (4 samples, 0.04%)</title><rect x="711.3" y="131.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="714.3" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (16 samples, 0.15%)</title><rect x="712.2" y="131.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="715.2" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (35 samples, 0.33%)</title><rect x="714.5" y="131.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="717.5" y="142.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (5 samples, 0.05%)</title><rect x="714.5" y="115.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="717.5" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.07%)</title><rect x="715.0" y="115.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="718.0" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (22 samples, 0.20%)</title><rect x="715.8" y="115.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="718.8" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (21 samples, 0.20%)</title><rect x="715.9" y="99.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="718.9" y="110.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (4 samples, 0.04%)</title><rect x="716.2" y="83.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="719.2" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (14 samples, 0.13%)</title><rect x="716.7" y="83.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="719.7" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (13 samples, 0.12%)</title><rect x="716.7" y="67.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="719.7" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (6 samples, 0.06%)</title><rect x="717.4" y="51.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="720.4" y="62.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (185 samples, 1.72%)</title><rect x="718.3" y="131.0" width="20.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="721.3" y="142.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (6 samples, 0.06%)</title><rect x="721.4" y="115.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="724.4" y="126.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (9 samples, 0.08%)</title><rect x="722.3" y="115.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="725.3" y="126.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (3 samples, 0.03%)</title><rect x="722.9" y="99.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="725.9" y="110.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (4 samples, 0.04%)</title><rect x="723.3" y="115.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="726.3" y="126.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (5 samples, 0.05%)</title><rect x="723.7" y="115.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="726.7" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_long() (3 samples, 0.03%)</title><rect x="724.7" y="115.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="727.7" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (13 samples, 0.12%)</title><rect x="725.0" y="115.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="728.0" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (3 samples, 0.03%)</title><rect x="725.9" y="99.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="728.9" y="110.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (81 samples, 0.75%)</title><rect x="727.0" y="115.0" width="8.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="730.0" y="126.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (3 samples, 0.03%)</title><rect x="728.7" y="99.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="731.7" y="110.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (3 samples, 0.03%)</title><rect x="729.6" y="99.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="732.6" y="110.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (5 samples, 0.05%)</title><rect x="730.0" y="99.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="733.0" y="110.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (28 samples, 0.26%)</title><rect x="730.5" y="99.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="733.5" y="110.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (4 samples, 0.04%)</title><rect x="731.6" y="83.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="734.6" y="94.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.09%)</title><rect x="732.0" y="83.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="735.0" y="94.0"></text>
</g>
<g>
<title>os::is_MP() (3 samples, 0.03%)</title><rect x="733.3" y="83.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="736.3" y="94.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.04%)</title><rect x="733.7" y="99.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="736.7" y="110.0"></text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.07%)</title><rect x="734.1" y="99.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="737.1" y="110.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (8 samples, 0.07%)</title><rect x="735.0" y="99.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="738.0" y="110.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (3 samples, 0.03%)</title><rect x="735.9" y="115.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="738.9" y="126.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.04%)</title><rect x="736.2" y="115.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="739.2" y="126.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (7 samples, 0.07%)</title><rect x="736.8" y="115.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="739.8" y="126.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (4 samples, 0.04%)</title><rect x="737.9" y="115.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="740.9" y="126.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (3 samples, 0.03%)</title><rect x="738.3" y="115.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="741.3" y="126.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (4 samples, 0.04%)</title><rect x="738.6" y="131.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="741.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (13 samples, 0.12%)</title><rect x="739.3" y="179.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="742.3" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.03%)</title><rect x="739.4" y="163.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="742.4" y="174.0"></text>
</g>
<g>
<title>jni_GetEnv (6 samples, 0.06%)</title><rect x="740.1" y="163.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="743.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (460 samples, 4.28%)</title><rect x="740.8" y="179.0" width="50.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="743.8" y="190.0">rocks..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (458 samples, 4.27%)</title><rect x="741.1" y="163.0" width="50.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="744.1" y="174.0">_pthr..</text>
</g>
<g>
<title>__psynch_mutexwait (450 samples, 4.19%)</title><rect x="741.3" y="147.0" width="49.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="744.3" y="158.0">__psy..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (6 samples, 0.06%)</title><rect x="790.7" y="147.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="793.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (158 samples, 1.47%)</title><rect x="791.4" y="179.0" width="17.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="794.4" y="190.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (156 samples, 1.45%)</title><rect x="791.6" y="163.0" width="17.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="794.6" y="174.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (154 samples, 1.43%)</title><rect x="791.8" y="147.0" width="17.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="794.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (3 samples, 0.03%)</title><rect x="809.2" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="812.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (208 samples, 1.94%)</title><rect x="809.5" y="323.0" width="22.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="812.5" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (203 samples, 1.89%)</title><rect x="809.9" y="307.0" width="22.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="812.9" y="318.0">r..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (37 samples, 0.34%)</title><rect x="822.1" y="291.0" width="4.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="825.1" y="302.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (51 samples, 0.47%)</title><rect x="826.3" y="291.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="829.3" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (49 samples, 0.46%)</title><rect x="826.3" y="275.0" width="5.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="829.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (16 samples, 0.15%)</title><rect x="832.4" y="323.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="835.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (11 samples, 0.10%)</title><rect x="832.4" y="307.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="835.4" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.09%)</title><rect x="832.5" y="291.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="835.5" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.08%)</title><rect x="832.5" y="275.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="835.5" y="286.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.05%)</title><rect x="833.6" y="307.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="836.6" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.05%)</title><rect x="833.6" y="291.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="836.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (8 samples, 0.07%)</title><rect x="834.1" y="323.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="837.1" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.07%)</title><rect x="834.1" y="307.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="837.1" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.07%)</title><rect x="834.1" y="291.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="837.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (176 samples, 1.64%)</title><rect x="835.0" y="323.0" width="19.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="838.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (174 samples, 1.62%)</title><rect x="835.0" y="307.0" width="19.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="838.0" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (94 samples, 0.88%)</title><rect x="843.8" y="291.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="846.8" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (83 samples, 0.77%)</title><rect x="843.8" y="275.0" width="9.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="846.8" y="286.0"></text>
</g>
<g>
<title>_pthread_cond_wait (11 samples, 0.10%)</title><rect x="852.9" y="275.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="855.9" y="286.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (10 samples, 0.09%)</title><rect x="853.0" y="259.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="856.0" y="270.0"></text>
</g>
<g>
<title>__psynch_mutexwait (10 samples, 0.09%)</title><rect x="853.0" y="243.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="856.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (5 samples, 0.05%)</title><rect x="854.4" y="323.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.4" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.04%)</title><rect x="854.5" y="307.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="857.5" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.04%)</title><rect x="854.5" y="291.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="857.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.05%)</title><rect x="855.6" y="355.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="858.6" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.03%)</title><rect x="855.8" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="858.8" y="350.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="855.8" y="323.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="858.8" y="334.0"></text>
</g>
<g>
<title>call_stub (19 samples, 0.18%)</title><rect x="856.6" y="435.0" width="2.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="859.6" y="446.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (36 samples, 0.34%)</title><rect x="858.7" y="435.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="861.7" y="446.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (431 samples, 4.01%)</title><rect x="862.6" y="435.0" width="47.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="865.6" y="446.0">org/..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (428 samples, 3.99%)</title><rect x="862.9" y="419.0" width="47.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="865.9" y="430.0">org/..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (407 samples, 3.79%)</title><rect x="862.9" y="403.0" width="44.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="865.9" y="414.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (29 samples, 0.27%)</title><rect x="862.9" y="387.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="865.9" y="398.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (378 samples, 3.52%)</title><rect x="866.1" y="387.0" width="41.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="869.1" y="398.0">org..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (375 samples, 3.49%)</title><rect x="866.5" y="371.0" width="41.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="869.5" y="382.0">org..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (354 samples, 3.30%)</title><rect x="868.2" y="355.0" width="38.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="871.2" y="366.0">Jav..</text>
</g>
<g>
<title>OrderAccess::fence() (21 samples, 0.20%)</title><rect x="869.9" y="339.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="872.9" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.05%)</title><rect x="872.2" y="339.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="875.2" y="350.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (63 samples, 0.59%)</title><rect x="873.5" y="339.0" width="6.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="876.5" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (20 samples, 0.19%)</title><rect x="874.5" y="323.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="877.5" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (32 samples, 0.30%)</title><rect x="876.9" y="323.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="879.9" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (11 samples, 0.10%)</title><rect x="877.2" y="307.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.2" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (16 samples, 0.15%)</title><rect x="878.5" y="307.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="881.5" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (12 samples, 0.11%)</title><rect x="878.7" y="291.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="881.7" y="302.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (3 samples, 0.03%)</title><rect x="878.9" y="275.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="881.9" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.07%)</title><rect x="879.2" y="275.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="882.2" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.07%)</title><rect x="879.2" y="259.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.2" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="879.5" y="243.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="882.5" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (3 samples, 0.03%)</title><rect x="880.0" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="883.0" y="302.0"></text>
</g>
<g>
<title>jni_NewByteArray (171 samples, 1.59%)</title><rect x="880.4" y="339.0" width="18.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="883.4" y="350.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (6 samples, 0.06%)</title><rect x="881.4" y="323.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="884.4" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="882.1" y="323.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="885.1" y="334.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (12 samples, 0.11%)</title><rect x="882.5" y="323.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="885.5" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (26 samples, 0.24%)</title><rect x="884.3" y="323.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="887.3" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (38 samples, 0.35%)</title><rect x="887.2" y="323.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="890.2" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (5 samples, 0.05%)</title><rect x="887.2" y="307.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="890.2" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (12 samples, 0.11%)</title><rect x="887.8" y="307.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="890.8" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (18 samples, 0.17%)</title><rect x="889.2" y="307.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="892.2" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (17 samples, 0.16%)</title><rect x="889.2" y="291.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="892.2" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (14 samples, 0.13%)</title><rect x="889.5" y="275.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="892.5" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (14 samples, 0.13%)</title><rect x="889.5" y="259.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="892.5" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (7 samples, 0.07%)</title><rect x="890.3" y="243.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="893.3" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (69 samples, 0.64%)</title><rect x="891.4" y="323.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="894.4" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (57 samples, 0.53%)</title><rect x="892.1" y="307.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="895.1" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (44 samples, 0.41%)</title><rect x="892.7" y="291.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="895.7" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (6 samples, 0.06%)</title><rect x="893.0" y="275.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="896.0" y="286.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jfr_sampler() (3 samples, 0.03%)</title><rect x="893.2" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="896.2" y="270.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (4 samples, 0.04%)</title><rect x="893.9" y="275.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="896.9" y="286.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (3 samples, 0.03%)</title><rect x="894.4" y="275.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="897.4" y="286.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="894.9" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="897.9" y="286.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (11 samples, 0.10%)</title><rect x="895.2" y="275.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.2" y="286.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="896.0" y="259.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="899.0" y="270.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.03%)</title><rect x="896.5" y="275.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="899.5" y="286.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="897.1" y="275.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="900.1" y="286.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (4 samples, 0.04%)</title><rect x="897.6" y="291.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="900.6" y="302.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (6 samples, 0.06%)</title><rect x="898.3" y="307.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.3" y="318.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (71 samples, 0.66%)</title><rect x="899.2" y="339.0" width="7.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="902.2" y="350.0"></text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (3 samples, 0.03%)</title><rect x="900.1" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.1" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (18 samples, 0.17%)</title><rect x="900.7" y="323.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="903.7" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (29 samples, 0.27%)</title><rect x="902.8" y="323.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="905.8" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.07%)</title><rect x="903.1" y="307.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="906.1" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (18 samples, 0.17%)</title><rect x="903.8" y="307.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="906.8" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (18 samples, 0.17%)</title><rect x="903.8" y="291.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="906.8" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (16 samples, 0.15%)</title><rect x="904.0" y="275.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="907.0" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (14 samples, 0.13%)</title><rect x="904.1" y="259.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="907.1" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (11 samples, 0.10%)</title><rect x="904.5" y="243.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="907.5" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="904.7" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="907.7" y="238.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (3 samples, 0.03%)</title><rect x="905.0" y="227.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.0" y="238.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="905.4" y="227.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="908.4" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="905.4" y="211.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.4" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (6 samples, 0.06%)</title><rect x="906.0" y="323.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="909.0" y="334.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.03%)</title><rect x="907.2" y="355.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="910.2" y="366.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (21 samples, 0.20%)</title><rect x="907.7" y="403.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="910.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (18 samples, 0.17%)</title><rect x="907.7" y="387.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="910.7" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (16 samples, 0.15%)</title><rect x="907.7" y="371.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="910.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="909.6" y="387.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="912.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.04%)</title><rect x="910.9" y="563.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="913.9" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (20 samples, 0.19%)</title><rect x="911.4" y="579.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="914.4" y="590.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (20 samples, 0.19%)</title><rect x="911.4" y="563.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="914.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (20 samples, 0.19%)</title><rect x="911.4" y="547.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="914.4" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (20 samples, 0.19%)</title><rect x="911.4" y="531.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="914.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (20 samples, 0.19%)</title><rect x="911.4" y="515.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="914.4" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.06%)</title><rect x="911.4" y="499.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="914.4" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.06%)</title><rect x="911.4" y="483.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="914.4" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (6 samples, 0.06%)</title><rect x="911.4" y="467.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="914.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (5 samples, 0.05%)</title><rect x="911.5" y="451.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="914.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.03%)</title><rect x="911.5" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="914.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (14 samples, 0.13%)</title><rect x="912.1" y="499.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="915.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (14 samples, 0.13%)</title><rect x="912.1" y="483.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="915.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (14 samples, 0.13%)</title><rect x="912.1" y="467.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="915.1" y="478.0"></text>
</g>
<g>
<title>rpc_errlist (14 samples, 0.13%)</title><rect x="912.1" y="451.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="915.1" y="462.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=38147] (2,383 samples, 22.19%)</title><rect x="913.7" y="643.0" width="261.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="916.7" y="654.0">[NIO Selector #7 tid=38147]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,382 samples, 22.18%)</title><rect x="913.8" y="627.0" width="261.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="916.8" y="638.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (87 samples, 0.81%)</title><rect x="914.0" y="611.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="917.0" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.03%)</title><rect x="914.2" y="595.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="917.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (83 samples, 0.77%)</title><rect x="914.5" y="595.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="917.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (83 samples, 0.77%)</title><rect x="914.5" y="579.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="917.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (83 samples, 0.77%)</title><rect x="914.5" y="563.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="917.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (78 samples, 0.73%)</title><rect x="914.5" y="547.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="917.5" y="558.0"></text>
</g>
<g>
<title>kevent (71 samples, 0.66%)</title><rect x="915.2" y="531.0" width="7.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="918.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.03%)</title><rect x="923.1" y="547.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.03%)</title><rect x="923.1" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="926.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.03%)</title><rect x="923.1" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.1" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="923.1" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="926.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="923.1" y="483.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="926.1" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,293 samples, 21.36%)</title><rect x="923.6" y="611.0" width="252.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="926.6" y="622.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,293 samples, 21.36%)</title><rect x="923.6" y="595.0" width="252.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="926.6" y="606.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,266 samples, 21.10%)</title><rect x="923.6" y="579.0" width="249.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="926.6" y="590.0">one/nio/http/HttpSession.processH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,254 samples, 20.99%)</title><rect x="923.9" y="563.0" width="247.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="926.9" y="574.0">one/nio/http/HttpSession.handlePa..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,253 samples, 20.98%)</title><rect x="923.9" y="547.0" width="247.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="926.9" y="558.0">one/nio/http/HttpServer.handleReq..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2,251 samples, 20.96%)</title><rect x="923.9" y="531.0" width="247.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="926.9" y="542.0">RequestHandler0_entity.handleRequ..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (44 samples, 0.41%)</title><rect x="923.9" y="515.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (41 samples, 0.38%)</title><rect x="923.9" y="499.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.9" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.03%)</title><rect x="923.9" y="483.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.9" y="494.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.03%)</title><rect x="923.9" y="467.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="926.9" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (38 samples, 0.35%)</title><rect x="924.3" y="483.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="927.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (38 samples, 0.35%)</title><rect x="924.3" y="467.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="927.3" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (38 samples, 0.35%)</title><rect x="924.3" y="451.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="927.3" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (38 samples, 0.35%)</title><rect x="924.3" y="435.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="927.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (38 samples, 0.35%)</title><rect x="924.3" y="419.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="927.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (37 samples, 0.34%)</title><rect x="924.3" y="403.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="927.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (37 samples, 0.34%)</title><rect x="924.3" y="387.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="927.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (34 samples, 0.32%)</title><rect x="924.3" y="371.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="927.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (34 samples, 0.32%)</title><rect x="924.3" y="355.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="927.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (34 samples, 0.32%)</title><rect x="924.3" y="339.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="927.3" y="350.0"></text>
</g>
<g>
<title>write (31 samples, 0.29%)</title><rect x="924.6" y="323.0" width="3.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="927.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.03%)</title><rect x="928.0" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="931.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="928.4" y="499.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="931.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="928.4" y="483.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="931.4" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="928.4" y="467.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="931.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="928.4" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="931.4" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="928.4" y="435.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="931.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.entity (2,206 samples, 20.55%)</title><rect x="928.9" y="515.0" width="242.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="931.9" y="526.0">ru/mail/polis/service/stakenschn..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.put (2,205 samples, 20.54%)</title><rect x="929.0" y="499.0" width="242.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="932.0" y="510.0">ru/mail/polis/service/stakenschn..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (2,202 samples, 20.51%)</title><rect x="929.3" y="483.0" width="242.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="932.3" y="494.0">ru/mail/polis/dao/RocksDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,200 samples, 20.49%)</title><rect x="929.4" y="467.0" width="241.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="932.4" y="478.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,200 samples, 20.49%)</title><rect x="929.4" y="451.0" width="241.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="932.4" y="462.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (6 samples, 0.06%)</title><rect x="929.6" y="435.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="932.6" y="446.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,678 samples, 15.63%)</title><rect x="930.3" y="435.0" width="184.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="933.3" y="446.0">Java_org_rocksdb_RocksDB..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,676 samples, 15.61%)</title><rect x="930.5" y="419.0" width="184.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.5" y="430.0">rocksdb_put_helper(JNIEn..</text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.04%)</title><rect x="931.3" y="403.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="934.3" y="414.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.03%)</title><rect x="931.4" y="387.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="934.4" y="398.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.03%)</title><rect x="931.7" y="403.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="934.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,660 samples, 15.46%)</title><rect x="932.3" y="403.0" width="182.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="935.3" y="414.0">rocksdb::CompactedDBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,660 samples, 15.46%)</title><rect x="932.3" y="387.0" width="182.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.3" y="398.0">rocksdb::DBImpl::Put(roc..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,659 samples, 15.45%)</title><rect x="932.3" y="371.0" width="182.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="935.3" y="382.0">rocksdb::DB::Put(rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,646 samples, 15.33%)</title><rect x="932.5" y="355.0" width="180.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="935.5" y="366.0">rocksdb::DBImpl::Write(..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,645 samples, 15.32%)</title><rect x="932.5" y="339.0" width="180.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="935.5" y="350.0">rocksdb::DBImpl::WriteI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (35 samples, 0.33%)</title><rect x="933.8" y="323.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="936.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (35 samples, 0.33%)</title><rect x="933.8" y="307.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="936.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (33 samples, 0.31%)</title><rect x="934.0" y="291.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (32 samples, 0.30%)</title><rect x="934.2" y="275.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (32 samples, 0.30%)</title><rect x="934.2" y="259.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="937.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (32 samples, 0.30%)</title><rect x="934.2" y="243.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.2" y="254.0"></text>
</g>
<g>
<title>write (32 samples, 0.30%)</title><rect x="934.2" y="227.0" width="3.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="937.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (5 samples, 0.05%)</title><rect x="937.9" y="323.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="940.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (5 samples, 0.05%)</title><rect x="937.9" y="307.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.05%)</title><rect x="937.9" y="291.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="940.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.05%)</title><rect x="937.9" y="275.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (5 samples, 0.05%)</title><rect x="937.9" y="259.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="940.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.04%)</title><rect x="938.0" y="243.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="941.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="938.1" y="227.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="941.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="938.1" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="941.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool) (1,151 samples, 10.72%)</title><rect x="938.4" y="323.0" width="126.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="941.4" y="334.0">rocksdb::WriteBa..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1,143 samples, 10.65%)</title><rect x="939.1" y="307.0" width="125.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.1" y="318.0">rocksdb::WriteB..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1,140 samples, 10.62%)</title><rect x="939.4" y="291.0" width="125.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.4" y="302.0">rocksdb::WriteB..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1,138 samples, 10.60%)</title><rect x="939.6" y="275.0" width="125.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.6" y="286.0">rocksdb::WriteB..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1,130 samples, 10.52%)</title><rect x="940.3" y="259.0" width="124.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.3" y="270.0">rocksdb::MemTab..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,126 samples, 10.49%)</title><rect x="940.7" y="243.0" width="123.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="943.7" y="254.0">rocksdb::SkipLi..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,124 samples, 10.47%)</title><rect x="941.0" y="227.0" width="123.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.0" y="238.0">rocksdb::SkipLi..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (61 samples, 0.57%)</title><rect x="945.1" y="211.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (59 samples, 0.55%)</title><rect x="945.4" y="195.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.4" y="206.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.04%)</title><rect x="945.6" y="179.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="948.6" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="945.7" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="948.7" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="945.7" y="147.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.7" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="945.7" y="131.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (41 samples, 0.38%)</title><rect x="946.4" y="179.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="949.4" y="190.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (7 samples, 0.07%)</title><rect x="946.4" y="163.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="949.4" y="174.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (4 samples, 0.04%)</title><rect x="946.7" y="147.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="949.7" y="158.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.07%)</title><rect x="947.1" y="163.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="950.1" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.04%)</title><rect x="947.6" y="147.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="950.6" y="158.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (26 samples, 0.24%)</title><rect x="948.0" y="163.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="951.0" y="174.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (24 samples, 0.22%)</title><rect x="948.2" y="147.0" width="2.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="951.2" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.05%)</title><rect x="948.5" y="131.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="951.5" y="142.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (14 samples, 0.13%)</title><rect x="949.3" y="131.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="952.3" y="142.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 0.06%)</title><rect x="950.0" y="115.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="953.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (5 samples, 0.05%)</title><rect x="951.1" y="179.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="954.1" y="190.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.05%)</title><rect x="951.1" y="163.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="954.1" y="174.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.05%)</title><rect x="951.1" y="147.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="954.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1,025 samples, 9.55%)</title><rect x="951.8" y="211.0" width="112.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.8" y="222.0">rocksdb::MemTa..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="952.9" y="195.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="955.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1,005 samples, 9.36%)</title><rect x="953.4" y="195.0" width="110.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="956.4" y="206.0">rocksdb::Base..</text>
</g>
<g>
<title>jni_ExceptionCheck (33 samples, 0.31%)</title><rect x="956.9" y="179.0" width="3.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="959.9" y="190.0"></text>
</g>
<g>
<title>OrderAccess::fence() (12 samples, 0.11%)</title><rect x="957.7" y="163.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="960.7" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (14 samples, 0.13%)</title><rect x="959.0" y="163.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="962.0" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="959.2" y="147.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="962.2" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.04%)</title><rect x="959.9" y="147.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="962.9" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.04%)</title><rect x="959.9" y="131.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="962.9" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="959.9" y="115.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.9" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.04%)</title><rect x="959.9" y="99.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.9" y="110.0"></text>
</g>
<g>
<title>jni_GetEnv (3 samples, 0.03%)</title><rect x="960.5" y="179.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="963.5" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.06%)</title><rect x="960.9" y="179.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="963.9" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (12 samples, 0.11%)</title><rect x="961.5" y="179.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="964.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (621 samples, 5.78%)</title><rect x="962.8" y="179.0" width="68.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.8" y="190.0">rocksdb..</text>
</g>
<g>
<title>OrderAccess::fence() (16 samples, 0.15%)</title><rect x="964.6" y="163.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.6" y="174.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (159 samples, 1.48%)</title><rect x="967.0" y="163.0" width="17.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="970.0" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.06%)</title><rect x="968.8" y="147.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.8" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (14 samples, 0.13%)</title><rect x="969.5" y="147.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.5" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.06%)</title><rect x="969.6" y="131.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="972.6" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.07%)</title><rect x="970.3" y="131.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.3" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.06%)</title><rect x="970.4" y="115.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.4" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (6 samples, 0.06%)</title><rect x="970.4" y="99.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.4" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.05%)</title><rect x="970.5" y="83.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="973.5" y="94.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (119 samples, 1.11%)</title><rect x="971.1" y="147.0" width="13.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="974.1" y="158.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (9 samples, 0.08%)</title><rect x="972.9" y="131.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="975.9" y="142.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (9 samples, 0.08%)</title><rect x="974.7" y="131.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="977.7" y="142.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (4 samples, 0.04%)</title><rect x="975.3" y="115.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="978.3" y="126.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (53 samples, 0.49%)</title><rect x="976.2" y="131.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.2" y="142.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (3 samples, 0.03%)</title><rect x="977.7" y="115.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.7" y="126.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (12 samples, 0.11%)</title><rect x="978.0" y="115.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="981.0" y="126.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (4 samples, 0.04%)</title><rect x="978.9" y="99.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.9" y="110.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (12 samples, 0.11%)</title><rect x="979.3" y="115.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="982.3" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.06%)</title><rect x="979.9" y="99.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.9" y="110.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.03%)</title><rect x="980.9" y="115.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="983.9" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.04%)</title><rect x="981.2" y="115.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.2" y="126.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.04%)</title><rect x="982.3" y="131.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.3" y="142.0"></text>
</g>
<g>
<title>Chunk::next() const (3 samples, 0.03%)</title><rect x="982.4" y="115.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.4" y="126.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (6 samples, 0.06%)</title><rect x="982.8" y="131.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.8" y="142.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (72 samples, 0.67%)</title><rect x="984.7" y="163.0" width="7.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="987.7" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (20 samples, 0.19%)</title><rect x="985.6" y="147.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.6" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (38 samples, 0.35%)</title><rect x="988.2" y="147.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="991.2" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.06%)</title><rect x="988.6" y="131.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="991.6" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (26 samples, 0.24%)</title><rect x="989.2" y="131.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.2" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (21 samples, 0.20%)</title><rect x="989.3" y="115.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.3" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (17 samples, 0.16%)</title><rect x="989.8" y="99.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.8" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (14 samples, 0.13%)</title><rect x="989.9" y="83.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.9" y="94.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (3 samples, 0.03%)</title><rect x="990.2" y="67.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="993.2" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (7 samples, 0.07%)</title><rect x="990.6" y="67.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="993.6" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="991.1" y="51.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="994.1" y="62.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (350 samples, 3.26%)</title><rect x="992.6" y="163.0" width="38.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="995.6" y="174.0">non..</text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.06%)</title><rect x="993.3" y="147.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.3" y="158.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (334 samples, 3.11%)</title><rect x="994.4" y="147.0" width="36.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="997.4" y="158.0">jni..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.03%)</title><rect x="995.9" y="131.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.9" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (19 samples, 0.18%)</title><rect x="997.3" y="131.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1000.3" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (58 samples, 0.54%)</title><rect x="999.8" y="131.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.8" y="142.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="999.9" y="115.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1002.9" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (17 samples, 0.16%)</title><rect x="1000.2" y="115.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1003.2" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (3 samples, 0.03%)</title><rect x="1002.1" y="115.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1005.1" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (30 samples, 0.28%)</title><rect x="1002.4" y="115.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1005.4" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (26 samples, 0.24%)</title><rect x="1002.7" y="99.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1005.7" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (22 samples, 0.20%)</title><rect x="1003.2" y="83.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1006.2" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (19 samples, 0.18%)</title><rect x="1003.4" y="67.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1006.4" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (11 samples, 0.10%)</title><rect x="1004.3" y="51.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1007.3" y="62.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (3 samples, 0.03%)</title><rect x="1004.9" y="35.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1007.9" y="46.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (223 samples, 2.08%)</title><rect x="1006.1" y="131.0" width="24.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1009.1" y="142.0">j..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (6 samples, 0.06%)</title><rect x="1009.7" y="115.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1012.7" y="126.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (4 samples, 0.04%)</title><rect x="1009.9" y="99.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1012.9" y="110.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (4 samples, 0.04%)</title><rect x="1010.3" y="115.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.3" y="126.0"></text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (3 samples, 0.03%)</title><rect x="1010.9" y="115.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.9" y="126.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (9 samples, 0.08%)</title><rect x="1011.2" y="115.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1014.2" y="126.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (6 samples, 0.06%)</title><rect x="1011.5" y="99.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1014.5" y="110.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (4 samples, 0.04%)</title><rect x="1012.2" y="115.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1015.2" y="126.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (3 samples, 0.03%)</title><rect x="1012.7" y="115.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1015.7" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (3 samples, 0.03%)</title><rect x="1013.1" y="115.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.1" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (20 samples, 0.19%)</title><rect x="1013.5" y="115.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.5" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (3 samples, 0.03%)</title><rect x="1015.0" y="99.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1018.0" y="110.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_long() (3 samples, 0.03%)</title><rect x="1015.4" y="99.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1018.4" y="110.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (107 samples, 1.00%)</title><rect x="1016.0" y="115.0" width="11.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1019.0" y="126.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (5 samples, 0.05%)</title><rect x="1018.1" y="99.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1021.1" y="110.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (3 samples, 0.03%)</title><rect x="1018.3" y="83.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1021.3" y="94.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (3 samples, 0.03%)</title><rect x="1018.7" y="99.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1021.7" y="110.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (14 samples, 0.13%)</title><rect x="1019.3" y="99.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1022.3" y="110.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (33 samples, 0.31%)</title><rect x="1020.9" y="99.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.9" y="110.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="1022.2" y="83.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1025.2" y="94.0"></text>
</g>
<g>
<title>os::is_MP() (3 samples, 0.03%)</title><rect x="1022.2" y="67.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1025.2" y="78.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (5 samples, 0.05%)</title><rect x="1022.5" y="83.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.5" y="94.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.09%)</title><rect x="1023.1" y="83.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1026.1" y="94.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (7 samples, 0.07%)</title><rect x="1024.8" y="99.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1027.8" y="110.0"></text>
</g>
<g>
<title>OrderAccess::fence() (15 samples, 0.14%)</title><rect x="1025.6" y="99.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.6" y="110.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (5 samples, 0.05%)</title><rect x="1027.2" y="99.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1030.2" y="110.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="1027.9" y="115.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.9" y="126.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (14 samples, 0.13%)</title><rect x="1028.2" y="115.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1031.2" y="126.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (5 samples, 0.05%)</title><rect x="1029.9" y="115.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1032.9" y="126.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.03%)</title><rect x="1030.6" y="131.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (9 samples, 0.08%)</title><rect x="1031.1" y="179.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.1" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.03%)</title><rect x="1031.2" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.2" y="174.0"></text>
</g>
<g>
<title>jni_GetEnv (3 samples, 0.03%)</title><rect x="1031.7" y="163.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1034.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (242 samples, 2.25%)</title><rect x="1032.3" y="179.0" width="26.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.3" y="190.0">r..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (241 samples, 2.24%)</title><rect x="1032.4" y="163.0" width="26.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1035.4" y="174.0">_..</text>
</g>
<g>
<title>__psynch_mutexwait (239 samples, 2.23%)</title><rect x="1032.5" y="147.0" width="26.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1035.5" y="158.0">_..</text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (45 samples, 0.42%)</title><rect x="1058.9" y="179.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.9" y="190.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (45 samples, 0.42%)</title><rect x="1058.9" y="163.0" width="4.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1061.9" y="174.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (42 samples, 0.39%)</title><rect x="1059.2" y="147.0" width="4.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1062.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (4 samples, 0.04%)</title><rect x="1063.9" y="195.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (233 samples, 2.17%)</title><rect x="1064.9" y="323.0" width="25.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.9" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (231 samples, 2.15%)</title><rect x="1065.0" y="307.0" width="25.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.0" y="318.0">r..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (46 samples, 0.43%)</title><rect x="1079.1" y="291.0" width="5.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1082.1" y="302.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (57 samples, 0.53%)</title><rect x="1084.2" y="291.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.2" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (52 samples, 0.48%)</title><rect x="1084.2" y="275.0" width="5.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1087.2" y="286.0"></text>
</g>
<g>
<title>_pthread_cond_wait (5 samples, 0.05%)</title><rect x="1089.9" y="275.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1092.9" y="286.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.04%)</title><rect x="1090.0" y="259.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1093.0" y="270.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.04%)</title><rect x="1090.0" y="243.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1093.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (11 samples, 0.10%)</title><rect x="1090.5" y="323.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (7 samples, 0.07%)</title><rect x="1090.5" y="307.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.5" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.06%)</title><rect x="1090.7" y="291.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.7" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.05%)</title><rect x="1090.7" y="275.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1093.7" y="286.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.04%)</title><rect x="1091.3" y="307.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.3" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.04%)</title><rect x="1091.3" y="291.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1094.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.03%)</title><rect x="1091.7" y="323.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.7" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.03%)</title><rect x="1091.7" y="307.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.7" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="1091.7" y="291.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1094.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (180 samples, 1.68%)</title><rect x="1092.1" y="323.0" width="19.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (179 samples, 1.67%)</title><rect x="1092.1" y="307.0" width="19.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.1" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (90 samples, 0.84%)</title><rect x="1101.8" y="291.0" width="9.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.8" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (77 samples, 0.72%)</title><rect x="1101.8" y="275.0" width="8.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1104.8" y="286.0"></text>
</g>
<g>
<title>_pthread_cond_wait (13 samples, 0.12%)</title><rect x="1110.2" y="275.0" width="1.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1113.2" y="286.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (11 samples, 0.10%)</title><rect x="1110.3" y="259.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1113.3" y="270.0"></text>
</g>
<g>
<title>__psynch_mutexwait (11 samples, 0.10%)</title><rect x="1110.3" y="243.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1113.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (12 samples, 0.11%)</title><rect x="1111.9" y="323.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.9" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.11%)</title><rect x="1111.9" y="307.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.9" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (12 samples, 0.11%)</title><rect x="1111.9" y="291.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1114.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.04%)</title><rect x="1113.6" y="355.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.04%)</title><rect x="1114.1" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.1" y="366.0"></text>
</g>
<g>
<title>free (3 samples, 0.03%)</title><rect x="1114.1" y="339.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1117.1" y="350.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.03%)</title><rect x="1114.1" y="323.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1117.1" y="334.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.03%)</title><rect x="1114.1" y="307.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1117.1" y="318.0"></text>
</g>
<g>
<title>call_stub (30 samples, 0.28%)</title><rect x="1114.7" y="435.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1117.7" y="446.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (38 samples, 0.35%)</title><rect x="1118.0" y="435.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1121.0" y="446.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (445 samples, 4.14%)</title><rect x="1122.3" y="435.0" width="48.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1125.3" y="446.0">org/..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (439 samples, 4.09%)</title><rect x="1123.0" y="419.0" width="48.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1126.0" y="430.0">org/..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (420 samples, 3.91%)</title><rect x="1123.0" y="403.0" width="46.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1126.0" y="414.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (21 samples, 0.20%)</title><rect x="1123.0" y="387.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1126.0" y="398.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (399 samples, 3.72%)</title><rect x="1125.3" y="387.0" width="43.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1128.3" y="398.0">org/..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (394 samples, 3.67%)</title><rect x="1125.8" y="371.0" width="43.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1128.8" y="382.0">org/..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (366 samples, 3.41%)</title><rect x="1128.7" y="355.0" width="40.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1131.7" y="366.0">Jav..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (4 samples, 0.04%)</title><rect x="1128.8" y="339.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.8" y="350.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="1129.2" y="339.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.2" y="350.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.03%)</title><rect x="1129.9" y="339.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.9" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (36 samples, 0.34%)</title><rect x="1130.4" y="339.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.4" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.05%)</title><rect x="1134.4" y="339.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.4" y="350.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="1135.4" y="339.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1138.4" y="350.0"></text>
</g>
<g>
<title>compiler_barrier() (3 samples, 0.03%)</title><rect x="1135.7" y="339.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1138.7" y="350.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (69 samples, 0.64%)</title><rect x="1136.0" y="339.0" width="7.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1139.0" y="350.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.04%)</title><rect x="1136.7" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.7" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (18 samples, 0.17%)</title><rect x="1137.4" y="323.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.4" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (33 samples, 0.31%)</title><rect x="1139.7" y="323.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.7" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.09%)</title><rect x="1139.9" y="307.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.9" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (20 samples, 0.19%)</title><rect x="1141.0" y="307.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.0" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (18 samples, 0.17%)</title><rect x="1141.1" y="291.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (14 samples, 0.13%)</title><rect x="1141.5" y="275.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.5" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (13 samples, 0.12%)</title><rect x="1141.6" y="259.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.6" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (8 samples, 0.07%)</title><rect x="1142.2" y="243.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.2" y="254.0"></text>
</g>
<g>
<title>jni_NewByteArray (130 samples, 1.21%)</title><rect x="1143.6" y="339.0" width="14.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1146.6" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (8 samples, 0.07%)</title><rect x="1144.8" y="323.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.8" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (31 samples, 0.29%)</title><rect x="1145.7" y="323.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.7" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (32 samples, 0.30%)</title><rect x="1149.4" y="323.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.4" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (11 samples, 0.10%)</title><rect x="1149.7" y="307.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.7" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (17 samples, 0.16%)</title><rect x="1151.1" y="307.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.1" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (13 samples, 0.12%)</title><rect x="1151.4" y="291.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.4" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (10 samples, 0.09%)</title><rect x="1151.8" y="275.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (9 samples, 0.08%)</title><rect x="1151.8" y="259.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.8" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (45 samples, 0.42%)</title><rect x="1153.0" y="323.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.0" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (40 samples, 0.37%)</title><rect x="1153.3" y="307.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.3" y="318.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::check_out_of_memory() (3 samples, 0.03%)</title><rect x="1153.5" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.5" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (29 samples, 0.27%)</title><rect x="1154.1" y="291.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.1" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (5 samples, 0.05%)</title><rect x="1154.8" y="275.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.8" y="286.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.04%)</title><rect x="1156.0" y="275.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="286.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="1156.2" y="259.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1159.2" y="270.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.03%)</title><rect x="1156.5" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.5" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (100 samples, 0.93%)</title><rect x="1157.9" y="339.0" width="11.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1160.9" y="350.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="1158.7" y="323.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.7" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (20 samples, 0.19%)</title><rect x="1159.2" y="323.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.2" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (42 samples, 0.39%)</title><rect x="1162.0" y="323.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.0" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (5 samples, 0.05%)</title><rect x="1162.2" y="307.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.2" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (9 samples, 0.08%)</title><rect x="1162.7" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.7" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (21 samples, 0.20%)</title><rect x="1164.0" y="307.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (19 samples, 0.18%)</title><rect x="1164.2" y="291.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.2" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (16 samples, 0.15%)</title><rect x="1164.5" y="275.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.5" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (15 samples, 0.14%)</title><rect x="1164.6" y="259.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.6" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (10 samples, 0.09%)</title><rect x="1165.2" y="243.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.2" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (13 samples, 0.12%)</title><rect x="1166.6" y="323.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1169.6" y="334.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (5 samples, 0.05%)</title><rect x="1168.1" y="323.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.1" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (19 samples, 0.18%)</title><rect x="1169.1" y="403.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1172.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (18 samples, 0.17%)</title><rect x="1169.1" y="387.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1172.1" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 0.13%)</title><rect x="1169.3" y="371.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1172.3" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.06%)</title><rect x="1171.6" y="563.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1174.6" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="1171.9" y="547.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1174.9" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="1171.9" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1174.9" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (27 samples, 0.25%)</title><rect x="1172.6" y="579.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1175.6" y="590.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (27 samples, 0.25%)</title><rect x="1172.6" y="563.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1175.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (24 samples, 0.22%)</title><rect x="1173.0" y="547.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1176.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (21 samples, 0.20%)</title><rect x="1173.3" y="531.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1176.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (21 samples, 0.20%)</title><rect x="1173.3" y="515.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1176.3" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.03%)</title><rect x="1173.5" y="499.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1176.5" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.03%)</title><rect x="1173.5" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1176.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.03%)</title><rect x="1173.5" y="467.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1176.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.03%)</title><rect x="1173.5" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1176.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.03%)</title><rect x="1173.5" y="435.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1176.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (15 samples, 0.14%)</title><rect x="1173.8" y="499.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1176.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (15 samples, 0.14%)</title><rect x="1173.8" y="483.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1176.8" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (15 samples, 0.14%)</title><rect x="1173.8" y="467.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1176.8" y="478.0"></text>
</g>
<g>
<title>rpc_errlist (14 samples, 0.13%)</title><rect x="1174.0" y="451.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1177.0" y="462.0"></text>
</g>
<g>
<title>[RMI TCP Connection(1)-127.0.0.1 tid=29443] (10 samples, 0.09%)</title><rect x="1175.6" y="643.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1178.6" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (10 samples, 0.09%)</title><rect x="1175.6" y="627.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1178.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (10 samples, 0.09%)</title><rect x="1175.6" y="611.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1178.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (10 samples, 0.09%)</title><rect x="1175.6" y="595.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1178.6" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (10 samples, 0.09%)</title><rect x="1175.6" y="579.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1178.6" y="590.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (10 samples, 0.09%)</title><rect x="1175.6" y="563.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1178.6" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$97/249391321.run (10 samples, 0.09%)</title><rect x="1175.6" y="547.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1178.6" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (10 samples, 0.09%)</title><rect x="1175.6" y="531.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1178.6" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (10 samples, 0.09%)</title><rect x="1175.6" y="515.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1178.6" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (10 samples, 0.09%)</title><rect x="1175.6" y="499.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1178.6" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (9 samples, 0.08%)</title><rect x="1175.7" y="483.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1178.7" y="494.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (8 samples, 0.07%)</title><rect x="1175.7" y="467.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1178.7" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (8 samples, 0.07%)</title><rect x="1175.7" y="451.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1178.7" y="462.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (8 samples, 0.07%)</title><rect x="1175.7" y="435.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1178.7" y="446.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (8 samples, 0.07%)</title><rect x="1175.7" y="419.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1178.7" y="430.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (3 samples, 0.03%)</title><rect x="1176.3" y="403.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1179.3" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.03%)</title><rect x="1176.3" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1179.3" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.03%)</title><rect x="1176.3" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.03%)</title><rect x="1176.3" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1179.3" y="366.0"></text>
</g>
<g>
<title>[tid=30219] (54 samples, 0.50%)</title><rect x="1176.9" y="643.0" width="6.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1179.9" y="654.0"></text>
</g>
<g>
<title>thread_start (54 samples, 0.50%)</title><rect x="1176.9" y="627.0" width="6.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>_pthread_start (54 samples, 0.50%)</title><rect x="1176.9" y="611.0" width="6.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (54 samples, 0.50%)</title><rect x="1176.9" y="595.0" width="6.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>Thread::call_run() (54 samples, 0.50%)</title><rect x="1176.9" y="579.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>JavaThread::run() (54 samples, 0.50%)</title><rect x="1176.9" y="563.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="574.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (54 samples, 0.50%)</title><rect x="1176.9" y="547.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="558.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (54 samples, 0.50%)</title><rect x="1176.9" y="531.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="542.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (54 samples, 0.50%)</title><rect x="1176.9" y="515.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="526.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (54 samples, 0.50%)</title><rect x="1176.9" y="499.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="510.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (54 samples, 0.50%)</title><rect x="1176.9" y="483.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="494.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (31 samples, 0.29%)</title><rect x="1176.9" y="467.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.03%)</title><rect x="1177.6" y="451.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.03%)</title><rect x="1177.6" y="435.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.6" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 0.20%)</title><rect x="1177.9" y="451.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.03%)</title><rect x="1178.1" y="435.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.1" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.04%)</title><rect x="1178.9" y="435.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.03%)</title><rect x="1179.4" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 0.14%)</title><rect x="1180.3" y="467.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.3" y="478.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (5 samples, 0.05%)</title><rect x="1180.3" y="451.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (5 samples, 0.05%)</title><rect x="1180.3" y="435.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (6 samples, 0.06%)</title><rect x="1181.1" y="451.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.03%)</title><rect x="1181.4" y="435.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.06%)</title><rect x="1182.2" y="467.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.06%)</title><rect x="1182.2" y="451.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.06%)</title><rect x="1182.2" y="435.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.06%)</title><rect x="1182.2" y="419.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.06%)</title><rect x="1182.2" y="403.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1182.3" y="387.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1182.3" y="371.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1182.3" y="355.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1182.3" y="339.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1182.3" y="323.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1182.3" y="307.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1182.3" y="291.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1182.3" y="275.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1182.3" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1182.3" y="243.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="254.0"></text>
</g>
<g>
<title>[tid=86535] (65 samples, 0.61%)</title><rect x="1182.9" y="643.0" width="7.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1185.9" y="654.0"></text>
</g>
<g>
<title>thread_start (65 samples, 0.61%)</title><rect x="1182.9" y="627.0" width="7.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1185.9" y="638.0"></text>
</g>
<g>
<title>_pthread_start (65 samples, 0.61%)</title><rect x="1182.9" y="611.0" width="7.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1185.9" y="622.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (65 samples, 0.61%)</title><rect x="1182.9" y="595.0" width="7.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1185.9" y="606.0"></text>
</g>
<g>
<title>Thread::call_run() (65 samples, 0.61%)</title><rect x="1182.9" y="579.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="590.0"></text>
</g>
<g>
<title>JavaThread::run() (65 samples, 0.61%)</title><rect x="1182.9" y="563.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.9" y="574.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (65 samples, 0.61%)</title><rect x="1182.9" y="547.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="558.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (65 samples, 0.61%)</title><rect x="1182.9" y="531.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="542.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (65 samples, 0.61%)</title><rect x="1182.9" y="515.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="526.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (65 samples, 0.61%)</title><rect x="1182.9" y="499.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="510.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (65 samples, 0.61%)</title><rect x="1182.9" y="483.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.9" y="494.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 0.38%)</title><rect x="1183.0" y="467.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.03%)</title><rect x="1183.0" y="451.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.05%)</title><rect x="1183.3" y="451.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="462.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.05%)</title><rect x="1183.3" y="435.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="446.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.03%)</title><rect x="1183.4" y="419.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="430.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.03%)</title><rect x="1183.4" y="403.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="414.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (3 samples, 0.03%)</title><rect x="1183.4" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.4" y="398.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.03%)</title><rect x="1183.8" y="451.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.03%)</title><rect x="1183.8" y="435.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.8" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 0.28%)</title><rect x="1184.2" y="451.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.2" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.03%)</title><rect x="1184.6" y="435.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.6" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.07%)</title><rect x="1184.9" y="435.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.04%)</title><rect x="1185.2" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.06%)</title><rect x="1185.7" y="435.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="446.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.03%)</title><rect x="1187.0" y="435.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.0" y="446.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 0.18%)</title><rect x="1187.5" y="467.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="478.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (8 samples, 0.07%)</title><rect x="1187.5" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (8 samples, 0.07%)</title><rect x="1187.5" y="435.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.03%)</title><rect x="1188.0" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.0" y="430.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.03%)</title><rect x="1188.0" y="403.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (6 samples, 0.06%)</title><rect x="1188.6" y="451.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1189.6" y="467.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1189.6" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1189.6" y="435.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1189.6" y="419.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1189.6" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1189.6" y="387.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1189.6" y="371.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1189.6" y="355.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1189.6" y="339.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1189.6" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.04%)</title><rect x="1189.6" y="307.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.04%)</title><rect x="1189.6" y="291.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.04%)</title><rect x="1189.6" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.04%)</title><rect x="1189.6" y="259.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.04%)</title><rect x="1189.6" y="243.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.6" y="254.0"></text>
</g>
</g>
</svg>
