<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="581"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="581"> </text>
<g id="frames">
<g>
<title>all (6,847 samples, 100.00%)</title><rect x="10.0" y="547.0" width="1180.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.0" y="558.0">all</text>
</g>
<g>
<title>[Java: C2 CompilerThread0 tid=21763] (9 samples, 0.13%)</title><rect x="10.2" y="531.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="13.2" y="542.0"></text>
</g>
<g>
<title>thread_start (9 samples, 0.13%)</title><rect x="10.2" y="515.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.2" y="526.0"></text>
</g>
<g>
<title>_pthread_start (9 samples, 0.13%)</title><rect x="10.2" y="499.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.2" y="510.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.13%)</title><rect x="10.2" y="483.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.2" y="494.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.13%)</title><rect x="10.2" y="467.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.2" y="478.0"></text>
</g>
<g>
<title>JavaThread::run() (9 samples, 0.13%)</title><rect x="10.2" y="451.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.2" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (9 samples, 0.13%)</title><rect x="10.2" y="435.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.2" y="446.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (9 samples, 0.13%)</title><rect x="10.2" y="419.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.2" y="430.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (9 samples, 0.13%)</title><rect x="10.2" y="403.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.2" y="414.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (9 samples, 0.13%)</title><rect x="10.2" y="387.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.2" y="398.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (9 samples, 0.13%)</title><rect x="10.2" y="371.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.2" y="382.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (5 samples, 0.07%)</title><rect x="10.2" y="355.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.2" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.04%)</title><rect x="10.5" y="339.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.5" y="350.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.04%)</title><rect x="11.0" y="355.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.0" y="366.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=13315] (5 samples, 0.07%)</title><rect x="11.7" y="531.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="14.7" y="542.0"></text>
</g>
<g>
<title>thread_start (5 samples, 0.07%)</title><rect x="11.7" y="515.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="14.7" y="526.0"></text>
</g>
<g>
<title>_pthread_start (5 samples, 0.07%)</title><rect x="11.7" y="499.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="14.7" y="510.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.07%)</title><rect x="11.7" y="483.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="14.7" y="494.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.07%)</title><rect x="11.7" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.7" y="478.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (5 samples, 0.07%)</title><rect x="11.7" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.7" y="462.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (5 samples, 0.07%)</title><rect x="11.7" y="435.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.7" y="446.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.03%)</title><rect x="11.7" y="419.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.7" y="430.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.03%)</title><rect x="11.7" y="403.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.7" y="414.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (3 samples, 0.04%)</title><rect x="12.1" y="419.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.1" y="430.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.04%)</title><rect x="12.1" y="403.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.1" y="414.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.04%)</title><rect x="12.1" y="387.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.1" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.04%)</title><rect x="12.1" y="371.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.1" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="12.1" y="355.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="15.1" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=40451] (1,817 samples, 26.54%)</title><rect x="13.3" y="531.0" width="313.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="16.3" y="542.0">[NIO Selector #1 tid=40451]</text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.06%)</title><rect x="13.4" y="515.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="16.4" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.03%)</title><rect x="13.8" y="499.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.8" y="510.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="13.8" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.8" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,812 samples, 26.46%)</title><rect x="14.1" y="515.0" width="312.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.1" y="526.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.06%)</title><rect x="14.5" y="499.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.5" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2 samples, 0.03%)</title><rect x="14.8" y="483.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.8" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (82 samples, 1.20%)</title><rect x="15.3" y="499.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.3" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.06%)</title><rect x="15.3" y="483.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.03%)</title><rect x="16.0" y="483.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.03%)</title><rect x="16.0" y="467.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (2 samples, 0.03%)</title><rect x="16.0" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (76 samples, 1.11%)</title><rect x="16.4" y="483.0" width="13.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (76 samples, 1.11%)</title><rect x="16.4" y="467.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (76 samples, 1.11%)</title><rect x="16.4" y="451.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (66 samples, 0.96%)</title><rect x="16.4" y="435.0" width="11.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.4" y="446.0"></text>
</g>
<g>
<title>kevent (60 samples, 0.88%)</title><rect x="17.4" y="419.0" width="10.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="20.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.03%)</title><rect x="27.8" y="435.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="27.8" y="419.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.8" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="27.8" y="403.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="27.8" y="387.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="27.8" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="28.1" y="435.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (5 samples, 0.07%)</title><rect x="28.6" y="435.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.6" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.06%)</title><rect x="28.8" y="419.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,723 samples, 25.16%)</title><rect x="29.5" y="499.0" width="296.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.5" y="510.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,722 samples, 25.15%)</title><rect x="29.6" y="483.0" width="296.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.6" y="494.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,694 samples, 24.74%)</title><rect x="29.6" y="467.0" width="292.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="32.6" y="478.0">one/nio/http/HttpSession.processHttpBuf..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,686 samples, 24.62%)</title><rect x="29.8" y="451.0" width="290.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.8" y="462.0">one/nio/http/HttpSession.handleParsedRe..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,686 samples, 24.62%)</title><rect x="29.8" y="435.0" width="290.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.8" y="446.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,685 samples, 24.61%)</title><rect x="29.8" y="419.0" width="290.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.8" y="430.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (50 samples, 0.73%)</title><rect x="29.8" y="403.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (46 samples, 0.67%)</title><rect x="29.8" y="387.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="29.8" y="371.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (44 samples, 0.64%)</title><rect x="30.2" y="371.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="33.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (44 samples, 0.64%)</title><rect x="30.2" y="355.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (44 samples, 0.64%)</title><rect x="30.2" y="339.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.2" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (44 samples, 0.64%)</title><rect x="30.2" y="323.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (43 samples, 0.63%)</title><rect x="30.3" y="307.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (43 samples, 0.63%)</title><rect x="30.3" y="291.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (43 samples, 0.63%)</title><rect x="30.3" y="275.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (43 samples, 0.63%)</title><rect x="30.3" y="259.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (43 samples, 0.63%)</title><rect x="30.3" y="243.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (43 samples, 0.63%)</title><rect x="30.3" y="227.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.3" y="238.0"></text>
</g>
<g>
<title>write (41 samples, 0.60%)</title><rect x="30.7" y="211.0" width="7.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="33.7" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.06%)</title><rect x="37.7" y="387.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="37.7" y="371.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.7" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="37.7" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.7" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="37.7" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.7" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="37.7" y="323.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.7" y="334.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.03%)</title><rect x="37.7" y="307.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="38.1" y="371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.1" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="38.1" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.1" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="38.1" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.1" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="38.1" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="41.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.04%)</title><rect x="38.4" y="403.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.entity (1,632 samples, 23.84%)</title><rect x="39.0" y="403.0" width="281.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.0" y="414.0">ru/mail/polis/service/stakenschneider/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.get (1,631 samples, 23.82%)</title><rect x="39.0" y="387.0" width="281.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.0" y="398.0">ru/mail/polis/service/stakenschneider/..</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (6 samples, 0.09%)</title><rect x="39.0" y="371.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="42.0" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (3 samples, 0.04%)</title><rect x="39.1" y="355.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="42.1" y="366.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.03%)</title><rect x="39.6" y="355.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="42.6" y="366.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="40.2" y="371.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="43.2" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.03%)</title><rect x="40.5" y="371.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="43.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (1,620 samples, 23.66%)</title><rect x="40.8" y="371.0" width="279.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="43.8" y="382.0">ru/mail/polis/dao/RocksDAO.get</text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (6 samples, 0.09%)</title><rect x="40.8" y="355.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (4 samples, 0.06%)</title><rect x="41.0" y="339.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="44.0" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.06%)</title><rect x="41.0" y="323.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.0" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.03%)</title><rect x="41.0" y="307.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.0" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,614 samples, 23.57%)</title><rect x="41.9" y="355.0" width="278.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.9" y="366.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,614 samples, 23.57%)</title><rect x="41.9" y="339.0" width="278.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.9" y="350.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.03%)</title><rect x="41.9" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="44.9" y="334.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,460 samples, 21.32%)</title><rect x="42.2" y="323.0" width="251.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="45.2" y="334.0">Java_org_rocksdb_RocksDB_get__J_3..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,458 samples, 21.29%)</title><rect x="42.6" y="307.0" width="251.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="45.6" y="318.0">rocksdb_get_helper(JNIEnv_*, rock..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.04%)</title><rect x="43.4" y="291.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="46.4" y="302.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="43.6" y="275.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="46.6" y="286.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="44.0" y="291.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="47.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,445 samples, 21.10%)</title><rect x="44.3" y="291.0" width="249.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="47.3" y="302.0">rocksdb::CompactedDBImpl::Open(ro..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,444 samples, 21.09%)</title><rect x="44.3" y="275.0" width="248.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="47.3" y="286.0">rocksdb::CompactedDBImpl::Open(ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1,443 samples, 21.07%)</title><rect x="44.5" y="259.0" width="248.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="47.5" y="270.0">rocksdb::DBImpl::Get(rocksdb::Rea..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (1,442 samples, 21.06%)</title><rect x="44.6" y="243.0" width="248.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="47.6" y="254.0">rocksdb::DBImpl::GetImpl(rocksdb:..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="44.8" y="227.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="47.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.03%)</title><rect x="45.2" y="227.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="48.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.03%)</title><rect x="45.2" y="211.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="48.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1,436 samples, 20.97%)</title><rect x="45.5" y="227.0" width="247.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="48.5" y="238.0">rocksdb::MemTable::Get(rocksdb::L..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,436 samples, 20.97%)</title><rect x="45.5" y="211.0" width="247.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="48.5" y="222.0">rocksdb::SkipListFactory::CreateM..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1,427 samples, 20.84%)</title><rect x="47.1" y="195.0" width="245.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="50.1" y="206.0">rocksdb::MemTable::KeyComparator:..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1,423 samples, 20.78%)</title><rect x="47.6" y="179.0" width="245.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="50.6" y="190.0">rocksdb::BaseComparatorJniCallbac..</text>
</g>
<g>
<title>jni_ExceptionCheck (10 samples, 0.15%)</title><rect x="50.3" y="163.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="53.3" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.06%)</title><rect x="51.4" y="147.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="54.4" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="51.7" y="131.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="54.7" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="51.7" y="115.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="54.7" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="51.7" y="99.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="54.7" y="110.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.06%)</title><rect x="52.2" y="163.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="55.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (228 samples, 3.33%)</title><rect x="52.9" y="163.0" width="39.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="55.9" y="174.0">roc..</text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="53.6" y="147.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="56.6" y="158.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.03%)</title><rect x="54.1" y="147.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="57.1" y="158.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (51 samples, 0.74%)</title><rect x="54.5" y="147.0" width="8.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="57.5" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="56.0" y="131.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="59.0" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="56.2" y="115.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="59.2" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="56.2" y="99.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="59.2" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="56.2" y="83.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="59.2" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="56.2" y="67.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="59.2" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="56.2" y="51.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="59.2" y="62.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (38 samples, 0.55%)</title><rect x="56.5" y="131.0" width="6.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="59.5" y="142.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.03%)</title><rect x="57.2" y="115.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="60.2" y="126.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (5 samples, 0.07%)</title><rect x="57.6" y="115.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="60.6" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (2 samples, 0.03%)</title><rect x="58.4" y="115.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="61.4" y="126.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (19 samples, 0.28%)</title><rect x="59.1" y="115.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="62.1" y="126.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.06%)</title><rect x="60.7" y="99.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="63.7" y="110.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (4 samples, 0.06%)</title><rect x="61.4" y="99.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="64.4" y="110.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="62.4" y="115.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="65.4" y="126.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.03%)</title><rect x="62.7" y="115.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="65.7" y="126.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (16 samples, 0.23%)</title><rect x="63.4" y="147.0" width="2.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="66.4" y="158.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="63.8" y="131.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="66.8" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.07%)</title><rect x="64.3" y="131.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="67.3" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.06%)</title><rect x="65.1" y="131.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="68.1" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.04%)</title><rect x="65.3" y="115.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="68.3" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title><rect x="65.3" y="99.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="68.3" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="65.3" y="83.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="68.3" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="65.3" y="67.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="68.3" y="78.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.03%)</title><rect x="65.8" y="131.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="68.8" y="142.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (151 samples, 2.21%)</title><rect x="66.2" y="147.0" width="26.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="69.2" y="158.0">n..</text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="67.2" y="131.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="70.2" y="142.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (141 samples, 2.06%)</title><rect x="67.9" y="131.0" width="24.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="70.9" y="142.0">j..</text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.10%)</title><rect x="69.5" y="115.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="72.5" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (2 samples, 0.03%)</title><rect x="70.7" y="115.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="73.7" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (11 samples, 0.16%)</title><rect x="71.2" y="115.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="74.2" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="71.4" y="99.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="74.4" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.12%)</title><rect x="71.7" y="99.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="74.7" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.10%)</title><rect x="71.7" y="83.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="74.7" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.07%)</title><rect x="72.0" y="67.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="75.0" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.07%)</title><rect x="72.0" y="51.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="75.0" y="62.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="72.4" y="35.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="75.4" y="46.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (110 samples, 1.61%)</title><rect x="73.1" y="115.0" width="18.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="76.1" y="126.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.03%)</title><rect x="81.3" y="99.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="84.3" y="110.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (3 samples, 0.04%)</title><rect x="81.9" y="99.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="84.9" y="110.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.03%)</title><rect x="82.0" y="83.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="85.0" y="94.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (2 samples, 0.03%)</title><rect x="82.0" y="67.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="85.0" y="78.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.03%)</title><rect x="82.4" y="99.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="85.4" y="110.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (7 samples, 0.10%)</title><rect x="82.9" y="99.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="85.9" y="110.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_long() (2 samples, 0.03%)</title><rect x="83.8" y="83.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="86.8" y="94.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (35 samples, 0.51%)</title><rect x="84.3" y="99.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="87.3" y="110.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.03%)</title><rect x="87.0" y="83.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="90.0" y="94.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.06%)</title><rect x="87.9" y="83.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="90.9" y="94.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (4 samples, 0.06%)</title><rect x="88.6" y="83.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="91.6" y="94.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (3 samples, 0.04%)</title><rect x="89.8" y="83.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="92.8" y="94.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.03%)</title><rect x="90.0" y="67.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="93.0" y="78.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="90.5" y="99.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="93.5" y="110.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.03%)</title><rect x="90.5" y="83.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="93.5" y="94.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.04%)</title><rect x="91.0" y="99.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="94.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (3 samples, 0.04%)</title><rect x="92.2" y="163.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="95.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (855 samples, 12.49%)</title><rect x="92.7" y="163.0" width="147.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="95.7" y="174.0">rocksdb::port::Mute..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (853 samples, 12.46%)</title><rect x="93.1" y="147.0" width="147.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="96.1" y="158.0">_pthread_mutex_firs..</text>
</g>
<g>
<title>__psynch_mutexwait (837 samples, 12.22%)</title><rect x="93.1" y="131.0" width="144.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="96.1" y="142.0">__psynch_mutexwait</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (16 samples, 0.23%)</title><rect x="237.3" y="131.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="240.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (306 samples, 4.47%)</title><rect x="240.1" y="163.0" width="52.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="243.1" y="174.0">rocks..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (304 samples, 4.44%)</title><rect x="240.2" y="147.0" width="52.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="243.2" y="158.0">_pthr..</text>
</g>
<g>
<title>__psynch_mutexdrop (294 samples, 4.29%)</title><rect x="241.6" y="131.0" width="50.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="244.6" y="142.0">__psy..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_wake (2 samples, 0.03%)</title><rect x="292.3" y="131.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="295.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.03%)</title><rect x="293.3" y="291.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="296.3" y="302.0"></text>
</g>
<g>
<title>call_stub (10 samples, 0.15%)</title><rect x="293.8" y="323.0" width="1.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="296.8" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (12 samples, 0.18%)</title><rect x="295.6" y="323.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.6" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (130 samples, 1.90%)</title><rect x="297.6" y="323.0" width="22.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="300.6" y="334.0">o..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (125 samples, 1.83%)</title><rect x="298.5" y="307.0" width="21.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.5" y="318.0">o..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (120 samples, 1.75%)</title><rect x="298.5" y="291.0" width="20.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.5" y="302.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (3 samples, 0.04%)</title><rect x="298.5" y="275.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.5" y="286.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (117 samples, 1.71%)</title><rect x="299.0" y="275.0" width="20.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.0" y="286.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (114 samples, 1.66%)</title><rect x="299.5" y="259.0" width="19.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.5" y="270.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (109 samples, 1.59%)</title><rect x="300.0" y="243.0" width="18.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="303.0" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="300.6" y="227.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="303.6" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="301.1" y="227.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="304.1" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (13 samples, 0.19%)</title><rect x="301.8" y="227.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="304.8" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="301.9" y="211.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="304.9" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.12%)</title><rect x="302.5" y="211.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="305.5" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="302.5" y="195.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="305.5" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.06%)</title><rect x="303.1" y="195.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="306.1" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title><rect x="303.1" y="179.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="306.1" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="303.1" y="163.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="306.1" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="303.1" y="147.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="306.1" y="158.0"></text>
</g>
<g>
<title>jni_NewByteArray (53 samples, 0.77%)</title><rect x="304.0" y="227.0" width="9.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="307.0" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.03%)</title><rect x="304.9" y="211.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="307.9" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="305.2" y="211.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="308.2" y="222.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="305.6" y="211.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="308.6" y="222.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.03%)</title><rect x="305.6" y="195.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="308.6" y="206.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.03%)</title><rect x="306.1" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="309.1" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.09%)</title><rect x="306.4" y="211.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="309.4" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.09%)</title><rect x="307.5" y="211.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="310.5" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="307.8" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="310.8" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="308.1" y="195.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="311.1" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="308.1" y="179.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="311.1" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="308.1" y="163.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="311.1" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="308.1" y="147.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="311.1" y="158.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (27 samples, 0.39%)</title><rect x="308.5" y="211.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="311.5" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (23 samples, 0.34%)</title><rect x="309.0" y="195.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="312.0" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (18 samples, 0.26%)</title><rect x="309.2" y="179.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="312.2" y="190.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (3 samples, 0.04%)</title><rect x="309.9" y="163.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="312.9" y="174.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jfr_sampler() (2 samples, 0.03%)</title><rect x="310.0" y="147.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="313.0" y="158.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.04%)</title><rect x="310.9" y="163.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="313.9" y="174.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.04%)</title><rect x="311.4" y="163.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="314.4" y="174.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="311.9" y="163.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="314.9" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="312.5" y="179.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="315.5" y="190.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (33 samples, 0.48%)</title><rect x="313.1" y="227.0" width="5.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="316.1" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="314.2" y="211.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="317.2" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (15 samples, 0.22%)</title><rect x="315.0" y="211.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="318.0" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="315.4" y="195.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="318.4" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (9 samples, 0.13%)</title><rect x="316.1" y="195.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="319.1" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.10%)</title><rect x="316.2" y="179.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="319.2" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.10%)</title><rect x="316.2" y="163.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="319.2" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.10%)</title><rect x="316.2" y="147.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="319.2" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="316.8" y="131.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="319.8" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="317.6" y="211.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="320.6" y="222.0"></text>
</g>
<g>
<title>compiler_barrier() (3 samples, 0.04%)</title><rect x="318.0" y="211.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="321.0" y="222.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (5 samples, 0.07%)</title><rect x="319.2" y="291.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="322.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.07%)</title><rect x="319.2" y="275.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.2" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.07%)</title><rect x="319.2" y="259.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.2" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.09%)</title><rect x="320.4" y="451.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.4" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.03%)</title><rect x="320.4" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.4" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.06%)</title><rect x="320.7" y="435.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.7" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.06%)</title><rect x="320.7" y="419.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.7" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (28 samples, 0.41%)</title><rect x="321.6" y="467.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.6" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (28 samples, 0.41%)</title><rect x="321.6" y="451.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (28 samples, 0.41%)</title><rect x="321.6" y="435.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (28 samples, 0.41%)</title><rect x="321.6" y="419.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (28 samples, 0.41%)</title><rect x="321.6" y="403.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.6" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (4 samples, 0.06%)</title><rect x="321.6" y="387.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.6" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.06%)</title><rect x="321.6" y="371.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.6" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.06%)</title><rect x="321.6" y="355.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.6" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.04%)</title><rect x="321.8" y="339.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.03%)</title><rect x="321.9" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.03%)</title><rect x="321.9" y="307.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="324.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (24 samples, 0.35%)</title><rect x="322.3" y="387.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (24 samples, 0.35%)</title><rect x="322.3" y="371.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (24 samples, 0.35%)</title><rect x="322.3" y="355.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.3" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (23 samples, 0.34%)</title><rect x="322.4" y="339.0" width="4.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="325.4" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=26627] (1,742 samples, 25.44%)</title><rect x="326.4" y="531.0" width="300.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="329.4" y="542.0">[NIO Selector #2 tid=26627]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,741 samples, 25.43%)</title><rect x="326.6" y="515.0" width="300.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="329.6" y="526.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (68 samples, 0.99%)</title><rect x="326.8" y="499.0" width="11.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (67 samples, 0.98%)</title><rect x="326.9" y="483.0" width="11.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="329.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (67 samples, 0.98%)</title><rect x="326.9" y="467.0" width="11.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="329.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (67 samples, 0.98%)</title><rect x="326.9" y="451.0" width="11.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (64 samples, 0.93%)</title><rect x="326.9" y="435.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.9" y="446.0"></text>
</g>
<g>
<title>kevent (63 samples, 0.92%)</title><rect x="327.1" y="419.0" width="10.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="330.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.04%)</title><rect x="338.0" y="435.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.04%)</title><rect x="338.0" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.04%)</title><rect x="338.0" y="403.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="341.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.04%)</title><rect x="338.0" y="387.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="341.0" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.04%)</title><rect x="338.0" y="371.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="341.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.03%)</title><rect x="338.1" y="355.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="341.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,672 samples, 24.42%)</title><rect x="338.5" y="499.0" width="288.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="341.5" y="510.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,672 samples, 24.42%)</title><rect x="338.5" y="483.0" width="288.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="341.5" y="494.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,661 samples, 24.26%)</title><rect x="338.5" y="467.0" width="286.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.5" y="478.0">one/nio/http/HttpSession.processHttpBu..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,659 samples, 24.23%)</title><rect x="338.5" y="451.0" width="285.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.5" y="462.0">one/nio/http/HttpSession.handleParsedR..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,659 samples, 24.23%)</title><rect x="338.5" y="435.0" width="285.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.5" y="446.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,658 samples, 24.21%)</title><rect x="338.6" y="419.0" width="285.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.6" y="430.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (57 samples, 0.83%)</title><rect x="338.8" y="403.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (52 samples, 0.76%)</title><rect x="338.8" y="387.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="341.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="338.8" y="371.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (50 samples, 0.73%)</title><rect x="339.2" y="371.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (50 samples, 0.73%)</title><rect x="339.2" y="355.0" width="8.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (50 samples, 0.73%)</title><rect x="339.2" y="339.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="342.2" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (50 samples, 0.73%)</title><rect x="339.2" y="323.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="342.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (49 samples, 0.72%)</title><rect x="339.3" y="307.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (49 samples, 0.72%)</title><rect x="339.3" y="291.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (49 samples, 0.72%)</title><rect x="339.3" y="275.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (46 samples, 0.67%)</title><rect x="339.5" y="259.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (46 samples, 0.67%)</title><rect x="339.5" y="243.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="342.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (46 samples, 0.67%)</title><rect x="339.5" y="227.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.5" y="238.0"></text>
</g>
<g>
<title>write (44 samples, 0.64%)</title><rect x="339.9" y="211.0" width="7.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="342.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.03%)</title><rect x="347.4" y="259.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.4" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.07%)</title><rect x="347.8" y="387.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="350.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="348.0" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="351.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="348.3" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="351.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="348.3" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="351.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="348.3" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="351.3" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="348.3" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="351.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.entity (1,599 samples, 23.35%)</title><rect x="348.8" y="403.0" width="275.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="351.8" y="414.0">ru/mail/polis/service/stakenschneider..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.get (1,597 samples, 23.32%)</title><rect x="349.0" y="387.0" width="275.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="352.0" y="398.0">ru/mail/polis/service/stakenschneider..</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (5 samples, 0.07%)</title><rect x="349.5" y="371.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="352.5" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (2 samples, 0.03%)</title><rect x="350.0" y="355.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="353.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (1,588 samples, 23.19%)</title><rect x="350.5" y="371.0" width="273.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="353.5" y="382.0">ru/mail/polis/dao/RocksDAO.get</text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (2 samples, 0.03%)</title><rect x="350.5" y="355.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (2 samples, 0.03%)</title><rect x="350.5" y="339.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.5" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.03%)</title><rect x="350.5" y="323.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.5" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,584 samples, 23.13%)</title><rect x="350.9" y="355.0" width="273.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="353.9" y="366.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,584 samples, 23.13%)</title><rect x="350.9" y="339.0" width="273.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.9" y="350.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.04%)</title><rect x="351.4" y="323.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="354.4" y="334.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,434 samples, 20.94%)</title><rect x="351.9" y="323.0" width="247.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="354.9" y="334.0">Java_org_rocksdb_RocksDB_get__J_3..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,432 samples, 20.91%)</title><rect x="352.3" y="307.0" width="246.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="355.3" y="318.0">rocksdb_get_helper(JNIEnv_*, rock..</text>
</g>
<g>
<title>free (3 samples, 0.04%)</title><rect x="352.4" y="291.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="355.4" y="302.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.03%)</title><rect x="352.6" y="275.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="355.6" y="286.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.03%)</title><rect x="352.6" y="259.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="355.6" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.09%)</title><rect x="353.1" y="291.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="356.1" y="302.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.09%)</title><rect x="353.1" y="275.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="356.1" y="286.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.07%)</title><rect x="353.1" y="259.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="356.1" y="270.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="353.5" y="243.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="356.5" y="254.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="353.5" y="227.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="356.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,418 samples, 20.71%)</title><rect x="354.2" y="291.0" width="244.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="357.2" y="302.0">rocksdb::CompactedDBImpl::Open(r..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,417 samples, 20.70%)</title><rect x="354.3" y="275.0" width="244.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="357.3" y="286.0">rocksdb::CompactedDBImpl::Open(r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1,417 samples, 20.70%)</title><rect x="354.3" y="259.0" width="244.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="357.3" y="270.0">rocksdb::DBImpl::Get(rocksdb::Re..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (1,416 samples, 20.68%)</title><rect x="354.3" y="243.0" width="244.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="357.3" y="254.0">rocksdb::DBImpl::GetImpl(rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1,411 samples, 20.61%)</title><rect x="354.8" y="227.0" width="243.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="357.8" y="238.0">rocksdb::MemTable::Get(rocksdb::..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,407 samples, 20.55%)</title><rect x="355.5" y="211.0" width="242.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="358.5" y="222.0">rocksdb::SkipListFactory::Create..</text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="357.1" y="195.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="360.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1,396 samples, 20.39%)</title><rect x="357.4" y="195.0" width="240.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="360.4" y="206.0">rocksdb::MemTable::KeyComparator..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1,382 samples, 20.18%)</title><rect x="359.3" y="179.0" width="238.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="362.3" y="190.0">rocksdb::BaseComparatorJniCallba..</text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="361.4" y="163.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="364.4" y="174.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.03%)</title><rect x="361.7" y="163.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="364.7" y="174.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (9 samples, 0.13%)</title><rect x="362.3" y="163.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="365.3" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="362.9" y="147.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="365.9" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="363.3" y="147.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="366.3" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.06%)</title><rect x="364.0" y="163.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="367.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (228 samples, 3.33%)</title><rect x="364.8" y="163.0" width="39.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="367.8" y="174.0">roc..</text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="365.7" y="147.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="368.7" y="158.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="366.2" y="147.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="369.2" y="158.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (46 samples, 0.67%)</title><rect x="366.7" y="147.0" width="8.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="369.7" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="367.4" y="131.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="370.4" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.07%)</title><rect x="368.1" y="131.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="371.1" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.04%)</title><rect x="368.3" y="115.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="371.3" y="126.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (31 samples, 0.45%)</title><rect x="369.0" y="131.0" width="5.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="372.0" y="142.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (2 samples, 0.03%)</title><rect x="370.7" y="115.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="373.7" y="126.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (14 samples, 0.20%)</title><rect x="371.2" y="115.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="374.2" y="126.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (6 samples, 0.09%)</title><rect x="372.1" y="99.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="375.1" y="110.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.04%)</title><rect x="373.1" y="99.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="376.1" y="110.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.04%)</title><rect x="373.8" y="115.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="376.8" y="126.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.03%)</title><rect x="374.3" y="131.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="377.3" y="142.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (13 samples, 0.19%)</title><rect x="374.7" y="147.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="377.7" y="158.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (2 samples, 0.03%)</title><rect x="374.7" y="131.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="377.7" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.07%)</title><rect x="375.0" y="131.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="378.0" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.09%)</title><rect x="375.9" y="131.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="378.9" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="375.9" y="115.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="378.9" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.04%)</title><rect x="376.4" y="115.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="379.4" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="376.4" y="99.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="379.4" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="376.4" y="83.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="379.4" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="376.4" y="67.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="379.4" y="78.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (158 samples, 2.31%)</title><rect x="376.9" y="147.0" width="27.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="379.9" y="158.0">n..</text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="377.4" y="131.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="380.4" y="142.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (150 samples, 2.19%)</title><rect x="378.3" y="131.0" width="25.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="381.3" y="142.0">j..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="380.2" y="115.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="383.2" y="126.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.03%)</title><rect x="380.9" y="115.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="383.9" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="381.2" y="115.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="384.2" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.13%)</title><rect x="381.9" y="115.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="384.9" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="382.1" y="99.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="385.1" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.09%)</title><rect x="382.4" y="99.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="385.4" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.09%)</title><rect x="382.4" y="83.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="385.4" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.07%)</title><rect x="382.6" y="67.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="385.6" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.07%)</title><rect x="382.6" y="51.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="385.6" y="62.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="382.8" y="35.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="385.8" y="46.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="383.1" y="35.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="386.1" y="46.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (112 samples, 1.64%)</title><rect x="383.6" y="115.0" width="19.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="386.6" y="126.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (6 samples, 0.09%)</title><rect x="390.5" y="99.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="393.5" y="110.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (4 samples, 0.06%)</title><rect x="390.9" y="83.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="393.9" y="94.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (4 samples, 0.06%)</title><rect x="391.9" y="99.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="394.9" y="110.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (4 samples, 0.06%)</title><rect x="391.9" y="83.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="394.9" y="94.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (2 samples, 0.03%)</title><rect x="392.8" y="99.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="395.8" y="110.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (5 samples, 0.07%)</title><rect x="393.3" y="99.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="396.3" y="110.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.03%)</title><rect x="394.3" y="99.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="397.3" y="110.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (32 samples, 0.47%)</title><rect x="394.8" y="99.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="397.8" y="110.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.03%)</title><rect x="395.7" y="83.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="398.7" y="94.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.03%)</title><rect x="396.0" y="83.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="399.0" y="94.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.03%)</title><rect x="396.6" y="83.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="399.6" y="94.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (7 samples, 0.10%)</title><rect x="396.9" y="83.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="399.9" y="94.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="397.4" y="67.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="400.4" y="78.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="398.5" y="83.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="401.5" y="94.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (5 samples, 0.07%)</title><rect x="399.5" y="83.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="402.5" y="94.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (3 samples, 0.04%)</title><rect x="400.3" y="99.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="403.3" y="110.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.04%)</title><rect x="401.2" y="99.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="404.2" y="110.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.03%)</title><rect x="401.7" y="99.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="404.7" y="110.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.04%)</title><rect x="402.1" y="99.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="405.1" y="110.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (2 samples, 0.03%)</title><rect x="402.6" y="99.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="405.6" y="110.0"></text>
</g>
<g>
<title>os::is_MP() (3 samples, 0.04%)</title><rect x="403.1" y="115.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="406.1" y="126.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.04%)</title><rect x="403.6" y="115.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="406.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (840 samples, 12.27%)</title><rect x="404.3" y="163.0" width="144.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="407.3" y="174.0">rocksdb::port::Mut..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (839 samples, 12.25%)</title><rect x="404.5" y="147.0" width="144.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="407.5" y="158.0">_pthread_mutex_fir..</text>
</g>
<g>
<title>__psynch_mutexwait (819 samples, 11.96%)</title><rect x="405.2" y="131.0" width="141.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="408.2" y="142.0">__psynch_mutexwait</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (16 samples, 0.23%)</title><rect x="546.3" y="131.0" width="2.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="549.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (281 samples, 4.10%)</title><rect x="549.1" y="163.0" width="48.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="552.1" y="174.0">rock..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (280 samples, 4.09%)</title><rect x="549.2" y="147.0" width="48.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="552.2" y="158.0">_pth..</text>
</g>
<g>
<title>__psynch_mutexdrop (275 samples, 4.02%)</title><rect x="549.8" y="131.0" width="47.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="552.8" y="142.0">__ps..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_wake (2 samples, 0.03%)</title><rect x="597.2" y="131.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="600.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.03%)</title><rect x="597.7" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="600.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.03%)</title><rect x="598.5" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="601.5" y="302.0"></text>
</g>
<g>
<title>call_stub (12 samples, 0.18%)</title><rect x="599.1" y="323.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="602.1" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (7 samples, 0.10%)</title><rect x="601.1" y="323.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="604.1" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (125 samples, 1.83%)</title><rect x="602.3" y="323.0" width="21.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="605.3" y="334.0">o..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (123 samples, 1.80%)</title><rect x="602.7" y="307.0" width="21.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="605.7" y="318.0">o..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (117 samples, 1.71%)</title><rect x="602.7" y="291.0" width="20.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="605.7" y="302.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (3 samples, 0.04%)</title><rect x="602.7" y="275.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="605.7" y="286.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (114 samples, 1.66%)</title><rect x="603.2" y="275.0" width="19.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="606.2" y="286.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (114 samples, 1.66%)</title><rect x="603.2" y="259.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.2" y="270.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (109 samples, 1.59%)</title><rect x="604.0" y="243.0" width="18.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="607.0" y="254.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="604.9" y="227.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="607.9" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="605.9" y="227.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="608.9" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="606.5" y="227.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="609.5" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (19 samples, 0.28%)</title><rect x="607.3" y="227.0" width="3.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="610.3" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.07%)</title><rect x="607.5" y="211.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="610.5" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (11 samples, 0.16%)</title><rect x="608.7" y="211.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="611.7" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.09%)</title><rect x="608.7" y="195.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="611.7" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.07%)</title><rect x="609.7" y="195.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="612.7" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.07%)</title><rect x="609.7" y="179.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="612.7" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="609.9" y="163.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="612.9" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.06%)</title><rect x="609.9" y="147.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="612.9" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="610.3" y="131.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="613.3" y="142.0"></text>
</g>
<g>
<title>jni_NewByteArray (47 samples, 0.69%)</title><rect x="610.6" y="227.0" width="8.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="613.6" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.03%)</title><rect x="610.9" y="211.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="613.9" y="222.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (4 samples, 0.06%)</title><rect x="611.5" y="211.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="614.5" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="612.1" y="211.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="615.1" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (13 samples, 0.19%)</title><rect x="612.5" y="211.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="615.5" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="612.5" y="195.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="615.5" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (9 samples, 0.13%)</title><rect x="613.2" y="195.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="616.2" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (9 samples, 0.13%)</title><rect x="613.2" y="179.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="616.2" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.12%)</title><rect x="613.4" y="163.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="616.4" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.10%)</title><rect x="613.5" y="147.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="616.5" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (5 samples, 0.07%)</title><rect x="613.9" y="131.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="616.9" y="142.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="614.0" y="115.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="617.0" y="126.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.03%)</title><rect x="614.4" y="115.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="617.4" y="126.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (22 samples, 0.32%)</title><rect x="614.7" y="211.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="617.7" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (18 samples, 0.26%)</title><rect x="615.1" y="195.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="618.1" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (13 samples, 0.19%)</title><rect x="615.4" y="179.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="618.4" y="190.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::check_out_of_memory() (2 samples, 0.03%)</title><rect x="615.8" y="163.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="618.8" y="174.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (5 samples, 0.07%)</title><rect x="616.1" y="163.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="619.1" y="174.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (2 samples, 0.03%)</title><rect x="616.6" y="147.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="619.6" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="617.8" y="179.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="620.8" y="190.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (2 samples, 0.03%)</title><rect x="618.2" y="195.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="621.2" y="206.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (23 samples, 0.34%)</title><rect x="618.7" y="227.0" width="4.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="621.7" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="619.6" y="211.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="622.6" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.13%)</title><rect x="619.9" y="211.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="622.9" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.09%)</title><rect x="620.4" y="195.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="623.4" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.07%)</title><rect x="620.6" y="179.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="623.6" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="620.8" y="163.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="623.8" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.06%)</title><rect x="620.8" y="147.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="623.8" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.03%)</title><rect x="620.9" y="131.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="623.9" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.07%)</title><rect x="621.5" y="211.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="624.5" y="222.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.03%)</title><rect x="622.3" y="211.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="625.3" y="222.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (6 samples, 0.09%)</title><rect x="622.8" y="291.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="625.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.07%)</title><rect x="622.8" y="275.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="625.8" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.07%)</title><rect x="622.8" y="259.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="625.8" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.03%)</title><rect x="624.4" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="627.4" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="624.4" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.4" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="624.4" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="627.4" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (11 samples, 0.16%)</title><rect x="624.7" y="467.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="627.7" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (11 samples, 0.16%)</title><rect x="624.7" y="451.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="627.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (11 samples, 0.16%)</title><rect x="624.7" y="435.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="627.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.16%)</title><rect x="624.7" y="419.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="627.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.16%)</title><rect x="624.7" y="403.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="627.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.13%)</title><rect x="625.1" y="387.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="628.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (9 samples, 0.13%)</title><rect x="625.1" y="371.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="628.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (9 samples, 0.13%)</title><rect x="625.1" y="355.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="628.1" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (8 samples, 0.12%)</title><rect x="625.2" y="339.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="628.2" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=40195] (1,723 samples, 25.16%)</title><rect x="626.6" y="531.0" width="297.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="629.6" y="542.0">[NIO Selector #3 tid=40195]</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.03%)</title><rect x="626.6" y="515.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="629.6" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,721 samples, 25.14%)</title><rect x="627.0" y="515.0" width="296.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="630.0" y="526.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (88 samples, 1.29%)</title><rect x="627.1" y="499.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="630.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.04%)</title><rect x="627.1" y="483.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="630.1" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.03%)</title><rect x="627.7" y="483.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="630.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.03%)</title><rect x="627.7" y="467.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="630.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (2 samples, 0.03%)</title><rect x="627.7" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="630.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (83 samples, 1.21%)</title><rect x="628.0" y="483.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="631.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (83 samples, 1.21%)</title><rect x="628.0" y="467.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="631.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (83 samples, 1.21%)</title><rect x="628.0" y="451.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="631.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (79 samples, 1.15%)</title><rect x="628.0" y="435.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="631.0" y="446.0"></text>
</g>
<g>
<title>kevent (69 samples, 1.01%)</title><rect x="629.7" y="419.0" width="11.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="632.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.03%)</title><rect x="641.6" y="435.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="644.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="641.6" y="419.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="644.6" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="641.6" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="644.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="641.6" y="387.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="641.6" y="371.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="644.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="642.0" y="435.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,632 samples, 23.84%)</title><rect x="642.3" y="499.0" width="281.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.3" y="510.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,632 samples, 23.84%)</title><rect x="642.3" y="483.0" width="281.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="645.3" y="494.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,609 samples, 23.50%)</title><rect x="642.3" y="467.0" width="277.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="645.3" y="478.0">one/nio/http/HttpSession.processHttpB..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,603 samples, 23.41%)</title><rect x="642.7" y="451.0" width="276.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="645.7" y="462.0">one/nio/http/HttpSession.handleParsed..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,603 samples, 23.41%)</title><rect x="642.7" y="435.0" width="276.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="645.7" y="446.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,601 samples, 23.38%)</title><rect x="642.8" y="419.0" width="275.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="645.8" y="430.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (62 samples, 0.91%)</title><rect x="642.8" y="403.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (59 samples, 0.86%)</title><rect x="642.8" y="387.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.06%)</title><rect x="642.8" y="371.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="645.8" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.04%)</title><rect x="643.0" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="643.2" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="643.2" y="323.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="646.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (55 samples, 0.80%)</title><rect x="643.5" y="371.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (55 samples, 0.80%)</title><rect x="643.5" y="355.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (55 samples, 0.80%)</title><rect x="643.5" y="339.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="646.5" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (55 samples, 0.80%)</title><rect x="643.5" y="323.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (55 samples, 0.80%)</title><rect x="643.5" y="307.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="646.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (55 samples, 0.80%)</title><rect x="643.5" y="291.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (55 samples, 0.80%)</title><rect x="643.5" y="275.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (52 samples, 0.76%)</title><rect x="643.5" y="259.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="646.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (52 samples, 0.76%)</title><rect x="643.5" y="243.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="646.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (52 samples, 0.76%)</title><rect x="643.5" y="227.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.5" y="238.0"></text>
</g>
<g>
<title>write (51 samples, 0.74%)</title><rect x="643.7" y="211.0" width="8.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="646.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.04%)</title><rect x="652.5" y="259.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="655.5" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.03%)</title><rect x="652.5" y="243.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="655.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.04%)</title><rect x="653.0" y="387.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="656.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="653.0" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="656.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.entity (1,538 samples, 22.46%)</title><rect x="653.7" y="403.0" width="265.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.7" y="414.0">ru/mail/polis/service/stakenschneid..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.get (1,538 samples, 22.46%)</title><rect x="653.7" y="387.0" width="265.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="656.7" y="398.0">ru/mail/polis/service/stakenschneid..</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (5 samples, 0.07%)</title><rect x="653.7" y="371.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="656.7" y="382.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.03%)</title><rect x="654.0" y="355.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="657.0" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="654.0" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="657.0" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="654.0" y="323.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="657.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (1,533 samples, 22.39%)</title><rect x="654.5" y="371.0" width="264.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.5" y="382.0">ru/mail/polis/dao/RocksDAO.get</text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (5 samples, 0.07%)</title><rect x="655.1" y="355.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.1" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (3 samples, 0.04%)</title><rect x="655.1" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="658.1" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.04%)</title><rect x="655.1" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="658.1" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.03%)</title><rect x="655.1" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.1" y="318.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (2 samples, 0.03%)</title><rect x="655.6" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="655.6" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="658.6" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,522 samples, 22.23%)</title><rect x="655.9" y="355.0" width="262.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="658.9" y="366.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,521 samples, 22.21%)</title><rect x="656.1" y="339.0" width="262.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.1" y="350.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.04%)</title><rect x="656.3" y="323.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.3" y="334.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,333 samples, 19.47%)</title><rect x="656.8" y="323.0" width="229.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="659.8" y="334.0">Java_org_rocksdb_RocksDB_get__..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,328 samples, 19.40%)</title><rect x="657.6" y="307.0" width="228.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="660.6" y="318.0">rocksdb_get_helper(JNIEnv_*, r..</text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="658.3" y="291.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="661.3" y="302.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.03%)</title><rect x="658.3" y="275.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="661.3" y="286.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.09%)</title><rect x="658.9" y="291.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="661.9" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="659.5" y="275.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="662.5" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="659.5" y="259.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="662.5" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="659.9" y="291.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="662.9" y="302.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="659.9" y="275.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="662.9" y="286.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="659.9" y="259.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="662.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,312 samples, 19.16%)</title><rect x="660.2" y="291.0" width="226.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="663.2" y="302.0">rocksdb::CompactedDBImpl::Open..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,311 samples, 19.15%)</title><rect x="660.4" y="275.0" width="225.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="663.4" y="286.0">rocksdb::CompactedDBImpl::Open..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1,308 samples, 19.10%)</title><rect x="660.9" y="259.0" width="225.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="663.9" y="270.0">rocksdb::DBImpl::Get(rocksdb::..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (2 samples, 0.03%)</title><rect x="660.9" y="243.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="663.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="661.3" y="243.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="664.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (1,304 samples, 19.04%)</title><rect x="661.6" y="243.0" width="224.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="664.6" y="254.0">rocksdb::DBImpl::GetImpl(rocks..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="661.6" y="227.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="664.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="662.3" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="665.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.03%)</title><rect x="662.3" y="211.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="665.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1,289 samples, 18.83%)</title><rect x="662.6" y="227.0" width="222.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="665.6" y="238.0">rocksdb::MemTable::Get(rocksd..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,286 samples, 18.78%)</title><rect x="663.2" y="211.0" width="221.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="666.2" y="222.0">rocksdb::SkipListFactory::Cre..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="667.3" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="670.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="667.6" y="195.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="670.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1,258 samples, 18.37%)</title><rect x="668.0" y="195.0" width="216.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="671.0" y="206.0">rocksdb::MemTable::KeyCompar..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1,247 samples, 18.21%)</title><rect x="668.8" y="179.0" width="215.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="671.8" y="190.0">rocksdb::BaseComparatorJniCa..</text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.12%)</title><rect x="670.2" y="163.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="673.2" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="670.4" y="147.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="673.4" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.07%)</title><rect x="670.7" y="147.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="673.7" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.06%)</title><rect x="670.7" y="131.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="673.7" y="142.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.07%)</title><rect x="672.0" y="163.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="675.0" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (5 samples, 0.07%)</title><rect x="672.8" y="163.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="675.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (253 samples, 3.70%)</title><rect x="673.7" y="163.0" width="43.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="676.7" y="174.0">rock..</text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="674.5" y="147.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="677.5" y="158.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="675.2" y="147.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="678.2" y="158.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (55 samples, 0.80%)</title><rect x="675.9" y="147.0" width="9.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="678.9" y="158.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="677.5" y="131.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="680.5" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.13%)</title><rect x="678.2" y="131.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="681.2" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="678.2" y="115.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="681.2" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.07%)</title><rect x="678.8" y="115.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="681.8" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.06%)</title><rect x="678.8" y="99.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="681.8" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="679.0" y="83.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="682.0" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="679.0" y="67.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="682.0" y="78.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (31 samples, 0.45%)</title><rect x="679.9" y="131.0" width="5.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="682.9" y="142.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (2 samples, 0.03%)</title><rect x="680.6" y="115.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="683.6" y="126.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (3 samples, 0.04%)</title><rect x="680.9" y="115.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="683.9" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (3 samples, 0.04%)</title><rect x="681.8" y="115.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="684.8" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (2 samples, 0.03%)</title><rect x="681.9" y="99.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="684.9" y="110.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (13 samples, 0.19%)</title><rect x="682.3" y="115.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="685.3" y="126.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (5 samples, 0.07%)</title><rect x="682.8" y="99.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="685.8" y="110.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.04%)</title><rect x="683.0" y="83.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="686.0" y="94.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.04%)</title><rect x="683.7" y="99.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="686.7" y="110.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.03%)</title><rect x="684.9" y="115.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="687.9" y="126.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (26 samples, 0.38%)</title><rect x="685.6" y="147.0" width="4.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="688.6" y="158.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="685.7" y="131.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="688.7" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.15%)</title><rect x="686.1" y="131.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="689.1" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="687.8" y="131.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="690.8" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.15%)</title><rect x="688.2" y="131.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="691.2" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="688.3" y="115.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="691.3" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.07%)</title><rect x="689.0" y="115.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="692.0" y="126.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (2 samples, 0.03%)</title><rect x="689.0" y="99.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="692.0" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title><rect x="689.4" y="99.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="692.4" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="689.5" y="83.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="692.5" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="689.5" y="67.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="692.5" y="78.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (158 samples, 2.31%)</title><rect x="690.0" y="147.0" width="27.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="693.0" y="158.0">n..</text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="691.4" y="131.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="694.4" y="142.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (142 samples, 2.07%)</title><rect x="692.6" y="131.0" width="24.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="695.6" y="142.0">j..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="694.2" y="115.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="697.2" y="126.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.06%)</title><rect x="694.7" y="115.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="697.7" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.09%)</title><rect x="695.6" y="115.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="698.6" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (15 samples, 0.22%)</title><rect x="696.6" y="115.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="699.6" y="126.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (4 samples, 0.06%)</title><rect x="696.8" y="99.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="699.8" y="110.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.03%)</title><rect x="697.1" y="83.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="700.1" y="94.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (2 samples, 0.03%)</title><rect x="697.6" y="99.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="700.6" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.10%)</title><rect x="698.0" y="99.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="701.0" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.09%)</title><rect x="698.0" y="83.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="701.0" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="698.3" y="67.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="701.3" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.06%)</title><rect x="698.3" y="51.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="701.3" y="62.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.03%)</title><rect x="698.5" y="35.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="701.5" y="46.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (100 samples, 1.46%)</title><rect x="699.2" y="115.0" width="17.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="702.2" y="126.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (2 samples, 0.03%)</title><rect x="706.1" y="99.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="709.1" y="110.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.03%)</title><rect x="706.4" y="99.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="709.4" y="110.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (2 samples, 0.03%)</title><rect x="707.5" y="99.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="710.5" y="110.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (37 samples, 0.54%)</title><rect x="708.1" y="99.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="711.1" y="110.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.03%)</title><rect x="708.8" y="83.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="711.8" y="94.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.03%)</title><rect x="709.2" y="83.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="712.2" y="94.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.04%)</title><rect x="709.7" y="83.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="712.7" y="94.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (6 samples, 0.09%)</title><rect x="710.4" y="83.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="713.4" y="94.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (6 samples, 0.09%)</title><rect x="711.4" y="83.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="714.4" y="94.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.04%)</title><rect x="711.8" y="67.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="714.8" y="78.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.03%)</title><rect x="712.6" y="83.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="715.6" y="94.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="713.1" y="83.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="716.1" y="94.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.06%)</title><rect x="713.8" y="83.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="716.8" y="94.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.03%)</title><rect x="714.5" y="99.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="717.5" y="110.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (4 samples, 0.06%)</title><rect x="714.9" y="99.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="717.9" y="110.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (4 samples, 0.06%)</title><rect x="715.6" y="99.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="718.6" y="110.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (4 samples, 0.06%)</title><rect x="716.4" y="115.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="719.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (4 samples, 0.06%)</title><rect x="717.3" y="163.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="720.3" y="174.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (2 samples, 0.03%)</title><rect x="717.6" y="147.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="720.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (675 samples, 9.86%)</title><rect x="718.0" y="163.0" width="116.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="721.0" y="174.0">rocksdb::port:..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (675 samples, 9.86%)</title><rect x="718.0" y="147.0" width="116.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="721.0" y="158.0">_pthread_mutex..</text>
</g>
<g>
<title>__psynch_mutexwait (666 samples, 9.73%)</title><rect x="718.1" y="131.0" width="114.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="721.1" y="142.0">__psynch_mutex..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (8 samples, 0.12%)</title><rect x="832.9" y="131.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="835.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (287 samples, 4.19%)</title><rect x="834.3" y="163.0" width="49.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="837.3" y="174.0">rocks..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (285 samples, 4.16%)</title><rect x="834.5" y="147.0" width="49.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="837.5" y="158.0">_pthr..</text>
</g>
<g>
<title>__psynch_mutexdrop (278 samples, 4.06%)</title><rect x="835.5" y="131.0" width="47.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="838.5" y="142.0">__ps..</text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (2 samples, 0.03%)</title><rect x="883.8" y="179.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="886.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (3 samples, 0.04%)</title><rect x="884.1" y="179.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="887.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (8 samples, 0.12%)</title><rect x="885.0" y="227.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="888.0" y="238.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="885.7" y="211.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="888.7" y="222.0"></text>
</g>
<g>
<title>call_stub (13 samples, 0.19%)</title><rect x="886.5" y="323.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="889.5" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (13 samples, 0.19%)</title><rect x="888.8" y="323.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="891.8" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (158 samples, 2.31%)</title><rect x="891.0" y="323.0" width="27.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="894.0" y="334.0">o..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (158 samples, 2.31%)</title><rect x="891.0" y="307.0" width="27.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="894.0" y="318.0">o..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (155 samples, 2.26%)</title><rect x="891.0" y="291.0" width="26.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="894.0" y="302.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (9 samples, 0.13%)</title><rect x="891.0" y="275.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="894.0" y="286.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (146 samples, 2.13%)</title><rect x="892.5" y="275.0" width="25.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="895.5" y="286.0">o..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (142 samples, 2.07%)</title><rect x="893.2" y="259.0" width="24.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="896.2" y="270.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (135 samples, 1.97%)</title><rect x="893.8" y="243.0" width="23.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="896.8" y="254.0">J..</text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.03%)</title><rect x="894.3" y="227.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="897.3" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.10%)</title><rect x="895.0" y="227.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="898.0" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (15 samples, 0.22%)</title><rect x="896.5" y="227.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="899.5" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="897.0" y="211.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="900.0" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.12%)</title><rect x="897.7" y="211.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="900.7" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.09%)</title><rect x="897.9" y="195.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="900.9" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.07%)</title><rect x="897.9" y="179.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="900.9" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="898.1" y="163.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="901.1" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="898.2" y="147.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="901.2" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="898.2" y="131.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="901.2" y="142.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="898.2" y="115.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="901.2" y="126.0"></text>
</g>
<g>
<title>jni_NewByteArray (57 samples, 0.83%)</title><rect x="899.1" y="227.0" width="9.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="902.1" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.03%)</title><rect x="899.4" y="211.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="902.4" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="899.8" y="211.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="902.8" y="222.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (4 samples, 0.06%)</title><rect x="900.5" y="211.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="903.5" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.09%)</title><rect x="901.3" y="211.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="904.3" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (11 samples, 0.16%)</title><rect x="902.4" y="211.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="905.4" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="902.4" y="195.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="905.4" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.09%)</title><rect x="903.1" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="906.1" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.09%)</title><rect x="903.1" y="179.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="906.1" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.07%)</title><rect x="903.2" y="163.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="906.2" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.07%)</title><rect x="903.2" y="147.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.2" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="903.6" y="131.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="906.6" y="142.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="903.7" y="115.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="906.7" y="126.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (27 samples, 0.39%)</title><rect x="904.3" y="211.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="907.3" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (24 samples, 0.35%)</title><rect x="904.6" y="195.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="907.6" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (20 samples, 0.29%)</title><rect x="905.0" y="179.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="908.0" y="190.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (3 samples, 0.04%)</title><rect x="906.2" y="163.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="909.2" y="174.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (3 samples, 0.04%)</title><rect x="906.2" y="147.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="909.2" y="158.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jfr_sampler() (2 samples, 0.03%)</title><rect x="906.7" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="909.7" y="174.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.04%)</title><rect x="907.5" y="163.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="910.5" y="174.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="907.7" y="147.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="910.7" y="158.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="908.1" y="163.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="911.1" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="908.4" y="179.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="911.4" y="190.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (47 samples, 0.69%)</title><rect x="908.9" y="227.0" width="8.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="911.9" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (12 samples, 0.18%)</title><rect x="910.8" y="211.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="913.8" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (20 samples, 0.29%)</title><rect x="912.9" y="211.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="915.9" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (8 samples, 0.12%)</title><rect x="913.4" y="195.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="916.4" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.12%)</title><rect x="914.8" y="195.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="917.8" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (8 samples, 0.12%)</title><rect x="914.8" y="179.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="917.8" y="190.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (2 samples, 0.03%)</title><rect x="914.9" y="163.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="917.9" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.07%)</title><rect x="915.3" y="163.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="918.3" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.07%)</title><rect x="915.3" y="147.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="918.3" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="915.8" y="131.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="918.8" y="142.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="915.8" y="115.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="918.8" y="126.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="917.0" y="243.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="920.0" y="254.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="917.4" y="243.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="920.4" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (3 samples, 0.04%)</title><rect x="917.7" y="291.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.7" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="917.7" y="275.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.7" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="917.7" y="259.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="920.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementLite.&lt;init&gt; (2 samples, 0.03%)</title><rect x="918.2" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="921.2" y="366.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (2 samples, 0.03%)</title><rect x="918.2" y="339.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="921.2" y="350.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (2 samples, 0.03%)</title><rect x="918.2" y="323.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="921.2" y="334.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (2 samples, 0.03%)</title><rect x="918.2" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="921.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2 samples, 0.03%)</title><rect x="918.2" y="291.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="921.2" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.04%)</title><rect x="918.9" y="451.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="921.9" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (23 samples, 0.34%)</title><rect x="919.6" y="467.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="922.6" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (23 samples, 0.34%)</title><rect x="919.6" y="451.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (22 samples, 0.32%)</title><rect x="919.8" y="435.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="922.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (21 samples, 0.31%)</title><rect x="919.9" y="419.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (21 samples, 0.31%)</title><rect x="919.9" y="403.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.9" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.04%)</title><rect x="919.9" y="387.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.9" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.04%)</title><rect x="919.9" y="371.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="922.9" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.03%)</title><rect x="920.1" y="355.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="920.1" y="339.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="923.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (18 samples, 0.26%)</title><rect x="920.5" y="387.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (18 samples, 0.26%)</title><rect x="920.5" y="371.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="923.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (18 samples, 0.26%)</title><rect x="920.5" y="355.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.5" y="366.0"></text>
</g>
<g>
<title>rpc_errlist (17 samples, 0.25%)</title><rect x="920.6" y="339.0" width="3.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="923.6" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=39427] (1,539 samples, 22.48%)</title><rect x="923.6" y="531.0" width="265.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="926.6" y="542.0">[NIO Selector #4 tid=39427]</text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.04%)</title><rect x="923.7" y="515.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="926.7" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (3 samples, 0.04%)</title><rect x="923.7" y="499.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.7" y="510.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.03%)</title><rect x="923.9" y="483.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="926.9" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,535 samples, 22.42%)</title><rect x="924.3" y="515.0" width="264.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="927.3" y="526.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (2 samples, 0.03%)</title><rect x="924.6" y="499.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="927.6" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.03%)</title><rect x="924.6" y="483.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="927.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.03%)</title><rect x="924.6" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="927.6" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (106 samples, 1.55%)</title><rect x="924.9" y="499.0" width="18.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="927.9" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.03%)</title><rect x="925.1" y="483.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="928.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.03%)</title><rect x="925.1" y="467.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="928.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (2 samples, 0.03%)</title><rect x="925.1" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (103 samples, 1.50%)</title><rect x="925.5" y="483.0" width="17.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="928.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (103 samples, 1.50%)</title><rect x="925.5" y="467.0" width="17.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (103 samples, 1.50%)</title><rect x="925.5" y="451.0" width="17.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="928.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (97 samples, 1.42%)</title><rect x="925.5" y="435.0" width="16.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="928.5" y="446.0"></text>
</g>
<g>
<title>kevent (88 samples, 1.29%)</title><rect x="927.0" y="419.0" width="15.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="930.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.03%)</title><rect x="942.2" y="435.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="945.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="942.2" y="419.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="945.2" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="942.2" y="403.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="945.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="942.2" y="387.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="945.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="942.2" y="371.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="945.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.06%)</title><rect x="942.5" y="435.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="945.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.06%)</title><rect x="942.5" y="419.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="945.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,425 samples, 20.81%)</title><rect x="943.2" y="499.0" width="245.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="946.2" y="510.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,425 samples, 20.81%)</title><rect x="943.2" y="483.0" width="245.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="946.2" y="494.0">one/nio/http/HttpSession.processR..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,400 samples, 20.45%)</title><rect x="943.2" y="467.0" width="241.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="946.2" y="478.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,392 samples, 20.33%)</title><rect x="943.6" y="451.0" width="239.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.6" y="462.0">one/nio/http/HttpSession.handleP..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,392 samples, 20.33%)</title><rect x="943.6" y="435.0" width="239.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="946.6" y="446.0">one/nio/http/HttpServer.handleRe..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,387 samples, 20.26%)</title><rect x="943.6" y="419.0" width="239.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="946.6" y="430.0">RequestHandler0_entity.handleReq..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (85 samples, 1.24%)</title><rect x="943.6" y="403.0" width="14.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="946.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (81 samples, 1.18%)</title><rect x="943.6" y="387.0" width="13.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="946.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.07%)</title><rect x="943.6" y="371.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="946.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.03%)</title><rect x="944.1" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="947.1" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="944.1" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="947.1" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="944.1" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="947.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (76 samples, 1.11%)</title><rect x="944.4" y="371.0" width="13.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="947.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (76 samples, 1.11%)</title><rect x="944.4" y="355.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="947.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (76 samples, 1.11%)</title><rect x="944.4" y="339.0" width="13.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="947.4" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (76 samples, 1.11%)</title><rect x="944.4" y="323.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="947.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (75 samples, 1.10%)</title><rect x="944.6" y="307.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="947.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (75 samples, 1.10%)</title><rect x="944.6" y="291.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="947.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (75 samples, 1.10%)</title><rect x="944.6" y="275.0" width="12.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="947.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (72 samples, 1.05%)</title><rect x="944.6" y="259.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="947.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (72 samples, 1.05%)</title><rect x="944.6" y="243.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="947.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (72 samples, 1.05%)</title><rect x="944.6" y="227.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="947.6" y="238.0"></text>
</g>
<g>
<title>write (69 samples, 1.01%)</title><rect x="945.1" y="211.0" width="11.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="948.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.04%)</title><rect x="957.0" y="259.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="960.0" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.03%)</title><rect x="957.2" y="243.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="960.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.06%)</title><rect x="957.5" y="387.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="960.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.04%)</title><rect x="957.5" y="371.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="960.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.04%)</title><rect x="957.5" y="355.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="960.5" y="366.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.04%)</title><rect x="957.5" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="960.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.03%)</title><rect x="957.7" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="960.7" y="334.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.03%)</title><rect x="957.7" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="960.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.entity (1,302 samples, 19.02%)</title><rect x="958.2" y="403.0" width="224.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="961.2" y="414.0">ru/mail/polis/service/stakensc..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.get (1,301 samples, 19.00%)</title><rect x="958.2" y="387.0" width="224.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="961.2" y="398.0">ru/mail/polis/service/stakensc..</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (5 samples, 0.07%)</title><rect x="958.2" y="371.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.2" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (4 samples, 0.06%)</title><rect x="958.4" y="355.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="961.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (1,291 samples, 18.85%)</title><rect x="959.9" y="371.0" width="222.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="962.9" y="382.0">ru/mail/polis/dao/RocksDAO.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.06%)</title><rect x="959.9" y="355.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="962.9" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/592688102.invoke (4 samples, 0.06%)</title><rect x="959.9" y="339.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="962.9" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.06%)</title><rect x="959.9" y="323.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="962.9" y="334.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (2 samples, 0.03%)</title><rect x="960.1" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="963.1" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="960.1" y="291.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="963.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (4 samples, 0.06%)</title><rect x="960.6" y="355.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="963.6" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (2 samples, 0.03%)</title><rect x="960.6" y="339.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="963.6" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.03%)</title><rect x="960.6" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="963.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (2 samples, 0.03%)</title><rect x="961.0" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="964.0" y="350.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,282 samples, 18.72%)</title><rect x="961.3" y="355.0" width="220.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="964.3" y="366.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,282 samples, 18.72%)</title><rect x="961.3" y="339.0" width="220.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="964.3" y="350.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>I2C/C2I adapters (6 samples, 0.09%)</title><rect x="961.5" y="323.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="964.5" y="334.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,062 samples, 15.51%)</title><rect x="962.5" y="323.0" width="183.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="965.5" y="334.0">Java_org_rocksdb_RocksDB..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,057 samples, 15.44%)</title><rect x="963.4" y="307.0" width="182.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="966.4" y="318.0">rocksdb_get_helper(JNIEn..</text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="963.7" y="291.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="966.7" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="964.4" y="291.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="967.4" y="302.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="964.4" y="275.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="967.4" y="286.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.04%)</title><rect x="964.4" y="259.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="967.4" y="270.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="964.4" y="243.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="967.4" y="254.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="964.4" y="227.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="967.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,047 samples, 15.29%)</title><rect x="964.9" y="291.0" width="180.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.9" y="302.0">rocksdb::CompactedDBImp..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,046 samples, 15.28%)</title><rect x="965.1" y="275.0" width="180.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="968.1" y="286.0">rocksdb::CompactedDBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1,042 samples, 15.22%)</title><rect x="965.8" y="259.0" width="179.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="968.8" y="270.0">rocksdb::DBImpl::Get(ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (1,040 samples, 15.19%)</title><rect x="965.8" y="243.0" width="179.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="968.8" y="254.0">rocksdb::DBImpl::GetImp..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 0.04%)</title><rect x="966.3" y="227.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="969.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.03%)</title><rect x="966.5" y="211.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="969.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="966.8" y="227.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="969.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1,026 samples, 14.98%)</title><rect x="967.2" y="227.0" width="176.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="970.2" y="238.0">rocksdb::MemTable::Get(..</text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1,022 samples, 14.93%)</title><rect x="967.7" y="211.0" width="176.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="970.7" y="222.0">rocksdb::SkipListFactor..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1,010 samples, 14.75%)</title><rect x="969.8" y="195.0" width="174.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.8" y="206.0">rocksdb::MemTable::Key..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (997 samples, 14.56%)</title><rect x="970.8" y="179.0" width="171.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="973.8" y="190.0">rocksdb::BaseComparato..</text>
</g>
<g>
<title>jni_CallIntMethodV (4 samples, 0.06%)</title><rect x="972.5" y="163.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="975.5" y="174.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (10 samples, 0.15%)</title><rect x="973.2" y="163.0" width="1.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="976.2" y="174.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="973.5" y="147.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.5" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.07%)</title><rect x="974.1" y="147.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="977.1" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.06%)</title><rect x="974.2" y="131.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="977.2" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.06%)</title><rect x="974.2" y="115.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="977.2" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="974.4" y="99.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.4" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="974.4" y="83.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.4" y="94.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.03%)</title><rect x="974.4" y="67.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="977.4" y="78.0"></text>
</g>
<g>
<title>pthread_mutex_lock (7 samples, 0.10%)</title><rect x="975.1" y="163.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="978.1" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.13%)</title><rect x="976.3" y="163.0" width="1.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="979.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (317 samples, 4.63%)</title><rect x="977.9" y="163.0" width="54.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.9" y="174.0">rocks..</text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="979.1" y="147.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="982.1" y="158.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.04%)</title><rect x="979.7" y="147.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.7" y="158.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (86 samples, 1.26%)</title><rect x="980.6" y="147.0" width="14.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="983.6" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="982.0" y="131.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.0" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (9 samples, 0.13%)</title><rect x="982.7" y="131.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="985.7" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="982.7" y="115.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.7" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.09%)</title><rect x="983.2" y="115.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.2" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.07%)</title><rect x="983.2" y="99.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.2" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="983.4" y="83.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="986.4" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.06%)</title><rect x="983.4" y="67.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.4" y="78.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (64 samples, 0.93%)</title><rect x="984.2" y="131.0" width="11.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="987.2" y="142.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (6 samples, 0.09%)</title><rect x="985.4" y="115.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.4" y="126.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.03%)</title><rect x="986.5" y="115.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="989.5" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (2 samples, 0.03%)</title><rect x="987.0" y="115.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.0" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (4 samples, 0.06%)</title><rect x="987.3" y="115.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.3" y="126.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (2 samples, 0.03%)</title><rect x="987.7" y="99.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.7" y="110.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (2 samples, 0.03%)</title><rect x="988.0" y="115.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="991.0" y="126.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (28 samples, 0.41%)</title><rect x="988.4" y="115.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="991.4" y="126.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (3 samples, 0.04%)</title><rect x="989.2" y="99.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.2" y="110.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.06%)</title><rect x="990.1" y="99.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="993.1" y="110.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (7 samples, 0.10%)</title><rect x="990.8" y="99.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="993.8" y="110.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.03%)</title><rect x="991.1" y="83.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.1" y="94.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="991.5" y="83.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="994.5" y="94.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (2 samples, 0.03%)</title><rect x="992.0" y="99.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.0" y="110.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="992.5" y="99.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.5" y="110.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (3 samples, 0.04%)</title><rect x="993.2" y="115.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.2" y="126.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.04%)</title><rect x="993.7" y="115.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="996.7" y="126.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.03%)</title><rect x="994.2" y="115.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="997.2" y="126.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.03%)</title><rect x="994.6" y="115.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="997.6" y="126.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.03%)</title><rect x="995.4" y="147.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="998.4" y="158.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (23 samples, 0.34%)</title><rect x="995.8" y="147.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="998.8" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.10%)</title><rect x="996.3" y="131.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="999.3" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (12 samples, 0.18%)</title><rect x="997.5" y="131.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1000.5" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="997.5" y="115.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.5" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.10%)</title><rect x="998.2" y="115.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.2" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.09%)</title><rect x="998.4" y="99.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.4" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="998.7" y="83.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.7" y="94.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.06%)</title><rect x="998.7" y="67.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.7" y="78.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (2 samples, 0.03%)</title><rect x="998.9" y="51.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.9" y="62.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (190 samples, 2.77%)</title><rect x="999.7" y="147.0" width="32.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1002.7" y="158.0">no..</text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="1000.1" y="131.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.1" y="142.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (184 samples, 2.69%)</title><rect x="1000.8" y="131.0" width="31.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1003.8" y="142.0">jn..</text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.06%)</title><rect x="1002.8" y="115.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.8" y="126.0"></text>
</g>
<g>
<title>OrderAccess::fence() (11 samples, 0.16%)</title><rect x="1003.9" y="115.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1006.9" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (19 samples, 0.28%)</title><rect x="1006.1" y="115.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.1" y="126.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="1006.1" y="99.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.1" y="110.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.09%)</title><rect x="1006.5" y="99.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.5" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (9 samples, 0.13%)</title><rect x="1007.7" y="99.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1010.7" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (8 samples, 0.12%)</title><rect x="1007.8" y="83.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1010.8" y="94.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (3 samples, 0.04%)</title><rect x="1008.0" y="67.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.0" y="78.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="1008.5" y="67.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.5" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.06%)</title><rect x="1008.5" y="51.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1011.5" y="62.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (127 samples, 1.85%)</title><rect x="1009.4" y="115.0" width="21.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1012.4" y="126.0">j..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (7 samples, 0.10%)</title><rect x="1013.9" y="99.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1016.9" y="110.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (6 samples, 0.09%)</title><rect x="1014.0" y="83.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1017.0" y="94.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (4 samples, 0.06%)</title><rect x="1015.2" y="99.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1018.2" y="110.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (4 samples, 0.06%)</title><rect x="1015.9" y="99.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1018.9" y="110.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.03%)</title><rect x="1016.3" y="83.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1019.3" y="94.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (2 samples, 0.03%)</title><rect x="1016.3" y="67.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.3" y="78.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.03%)</title><rect x="1016.6" y="99.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1019.6" y="110.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (7 samples, 0.10%)</title><rect x="1017.7" y="99.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1020.7" y="110.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (2 samples, 0.03%)</title><rect x="1018.4" y="83.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.4" y="94.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (55 samples, 0.80%)</title><rect x="1019.4" y="99.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.4" y="110.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.03%)</title><rect x="1021.1" y="83.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1024.1" y="94.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (2 samples, 0.03%)</title><rect x="1021.1" y="67.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1024.1" y="78.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.03%)</title><rect x="1021.6" y="83.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.6" y="94.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (3 samples, 0.04%)</title><rect x="1022.1" y="83.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1025.1" y="94.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (19 samples, 0.28%)</title><rect x="1022.7" y="83.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1025.7" y="94.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="1023.2" y="67.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1026.2" y="78.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (4 samples, 0.06%)</title><rect x="1023.5" y="67.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1026.5" y="78.0"></text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.10%)</title><rect x="1024.2" y="67.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1027.2" y="78.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.03%)</title><rect x="1025.6" y="67.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1028.6" y="78.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (6 samples, 0.09%)</title><rect x="1025.9" y="83.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1028.9" y="94.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.07%)</title><rect x="1027.0" y="83.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.0" y="94.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.06%)</title><rect x="1028.2" y="83.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.2" y="94.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.03%)</title><rect x="1028.5" y="67.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.5" y="78.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (2 samples, 0.03%)</title><rect x="1028.9" y="99.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1031.9" y="110.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="1029.2" y="99.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.2" y="110.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.03%)</title><rect x="1029.2" y="83.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1032.2" y="94.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.03%)</title><rect x="1029.6" y="99.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1032.6" y="110.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.03%)</title><rect x="1029.9" y="99.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1032.9" y="110.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.03%)</title><rect x="1030.2" y="99.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1033.2" y="110.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.03%)</title><rect x="1030.9" y="99.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.9" y="110.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (4 samples, 0.06%)</title><rect x="1031.3" y="115.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.3" y="126.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.04%)</title><rect x="1032.0" y="115.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (6 samples, 0.09%)</title><rect x="1032.5" y="163.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1035.5" y="174.0"></text>
</g>
<g>
<title>jni_GetEnv (4 samples, 0.06%)</title><rect x="1032.8" y="147.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1035.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (459 samples, 6.70%)</title><rect x="1033.5" y="163.0" width="79.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.5" y="174.0">rocksdb::..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (459 samples, 6.70%)</title><rect x="1033.5" y="147.0" width="79.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1036.5" y="158.0">_pthread_..</text>
</g>
<g>
<title>__psynch_mutexwait (447 samples, 6.53%)</title><rect x="1034.2" y="131.0" width="77.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1037.2" y="142.0">__psynch_..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (8 samples, 0.12%)</title><rect x="1111.2" y="131.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1114.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (174 samples, 2.54%)</title><rect x="1112.6" y="163.0" width="30.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.6" y="174.0">ro..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (173 samples, 2.53%)</title><rect x="1112.6" y="147.0" width="29.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1115.6" y="158.0">_p..</text>
</g>
<g>
<title>__psynch_mutexdrop (172 samples, 2.51%)</title><rect x="1112.8" y="131.0" width="29.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1115.8" y="142.0">__..</text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.03%)</title><rect x="1142.6" y="179.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (2 samples, 0.03%)</title><rect x="1143.0" y="179.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (3 samples, 0.04%)</title><rect x="1143.3" y="179.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.03%)</title><rect x="1144.0" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (3 samples, 0.04%)</title><rect x="1144.5" y="227.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.5" y="238.0"></text>
</g>
<g>
<title>call_stub (15 samples, 0.22%)</title><rect x="1145.5" y="323.0" width="2.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1148.5" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (14 samples, 0.20%)</title><rect x="1148.1" y="323.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1151.1" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (183 samples, 2.67%)</title><rect x="1150.7" y="323.0" width="31.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1153.7" y="334.0">or..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (182 samples, 2.66%)</title><rect x="1150.9" y="307.0" width="31.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1153.9" y="318.0">or..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (177 samples, 2.59%)</title><rect x="1150.9" y="291.0" width="30.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1153.9" y="302.0">or..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (6 samples, 0.09%)</title><rect x="1150.9" y="275.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1153.9" y="286.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (171 samples, 2.50%)</title><rect x="1151.9" y="275.0" width="29.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1154.9" y="286.0">or..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (170 samples, 2.48%)</title><rect x="1152.1" y="259.0" width="29.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1155.1" y="270.0">or..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (156 samples, 2.28%)</title><rect x="1153.6" y="243.0" width="26.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1156.6" y="254.0">J..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="1154.0" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.0" y="238.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.03%)</title><rect x="1154.5" y="227.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.5" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (8 samples, 0.12%)</title><rect x="1155.2" y="227.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.2" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1156.9" y="227.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1159.9" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (27 samples, 0.39%)</title><rect x="1157.4" y="227.0" width="4.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1160.4" y="238.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="1157.8" y="211.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.8" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="1158.3" y="211.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.3" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (16 samples, 0.23%)</title><rect x="1159.2" y="211.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.2" y="222.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="1159.2" y="195.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.2" y="206.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="1159.5" y="195.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.5" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (11 samples, 0.16%)</title><rect x="1160.0" y="195.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.0" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (10 samples, 0.15%)</title><rect x="1160.2" y="179.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.2" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (9 samples, 0.13%)</title><rect x="1160.4" y="163.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (8 samples, 0.12%)</title><rect x="1160.4" y="147.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.4" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="1161.4" y="131.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="142.0"></text>
</g>
<g>
<title>jni_NewByteArray (66 samples, 0.96%)</title><rect x="1162.1" y="227.0" width="11.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1165.1" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1163.3" y="211.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="222.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.03%)</title><rect x="1163.8" y="211.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.8" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.09%)</title><rect x="1164.3" y="211.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.3" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (17 samples, 0.25%)</title><rect x="1165.7" y="211.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.7" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.06%)</title><rect x="1165.9" y="195.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.9" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (10 samples, 0.15%)</title><rect x="1166.7" y="195.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.7" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (8 samples, 0.12%)</title><rect x="1166.9" y="179.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.9" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.12%)</title><rect x="1166.9" y="163.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.9" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (8 samples, 0.12%)</title><rect x="1166.9" y="147.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.9" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="1167.6" y="131.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.6" y="142.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (28 samples, 0.41%)</title><rect x="1168.6" y="211.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.6" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (19 samples, 0.28%)</title><rect x="1169.8" y="195.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.8" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (14 samples, 0.20%)</title><rect x="1170.2" y="179.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.2" y="190.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (5 samples, 0.07%)</title><rect x="1170.5" y="163.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.5" y="174.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (2 samples, 0.03%)</title><rect x="1171.0" y="147.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="158.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_dtrace_sampler() (2 samples, 0.03%)</title><rect x="1171.4" y="163.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="174.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.03%)</title><rect x="1172.2" y="163.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.2" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="1172.8" y="179.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1175.8" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1173.1" y="195.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.1" y="206.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (38 samples, 0.55%)</title><rect x="1173.5" y="227.0" width="6.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1176.5" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.09%)</title><rect x="1175.5" y="211.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (16 samples, 0.23%)</title><rect x="1176.6" y="211.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="1176.6" y="195.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (12 samples, 0.18%)</title><rect x="1177.2" y="195.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (9 samples, 0.13%)</title><rect x="1177.2" y="179.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.12%)</title><rect x="1177.4" y="163.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (8 samples, 0.12%)</title><rect x="1177.4" y="147.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (2 samples, 0.03%)</title><rect x="1177.8" y="131.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.03%)</title><rect x="1178.1" y="131.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="142.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (2 samples, 0.03%)</title><rect x="1179.0" y="179.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1182.0" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.06%)</title><rect x="1179.3" y="211.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1182.3" y="222.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.04%)</title><rect x="1180.0" y="227.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="238.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.04%)</title><rect x="1180.5" y="243.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1183.5" y="254.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="1181.0" y="243.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1184.0" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (5 samples, 0.07%)</title><rect x="1181.4" y="291.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1184.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.06%)</title><rect x="1181.4" y="275.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1184.4" y="286.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.06%)</title><rect x="1181.4" y="259.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1184.4" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (2 samples, 0.03%)</title><rect x="1182.6" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1185.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.04%)</title><rect x="1182.9" y="419.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.04%)</title><rect x="1182.9" y="403.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="1182.9" y="387.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="1182.9" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1182.9" y="355.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.07%)</title><rect x="1183.5" y="451.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1186.5" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1183.8" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1186.8" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1183.8" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1186.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (25 samples, 0.37%)</title><rect x="1184.5" y="467.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1187.5" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (25 samples, 0.37%)</title><rect x="1184.5" y="451.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1187.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="1184.5" y="435.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1187.5" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1184.5" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1187.5" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1184.5" y="403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1187.5" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1184.5" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1187.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (23 samples, 0.34%)</title><rect x="1184.8" y="435.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1187.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="1185.5" y="419.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1188.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="1185.5" y="403.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1188.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="1185.5" y="387.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1188.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.25%)</title><rect x="1185.9" y="419.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1188.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.25%)</title><rect x="1185.9" y="403.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1188.9" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.03%)</title><rect x="1186.0" y="387.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1189.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="1186.0" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1189.0" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.03%)</title><rect x="1186.0" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1189.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="1186.0" y="339.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1189.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.03%)</title><rect x="1186.0" y="323.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1189.0" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.03%)</title><rect x="1186.0" y="307.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1189.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (14 samples, 0.20%)</title><rect x="1186.4" y="387.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1189.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (14 samples, 0.20%)</title><rect x="1186.4" y="371.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1189.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (14 samples, 0.20%)</title><rect x="1186.4" y="355.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1189.4" y="366.0"></text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.03%)</title><rect x="1186.4" y="339.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1189.4" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (11 samples, 0.16%)</title><rect x="1186.9" y="339.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1189.9" y="350.0"></text>
</g>
<g>
<title>[RMI TCP Connection(5)-127.0.0.1 tid=29195] (7 samples, 0.10%)</title><rect x="1188.8" y="531.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1191.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (6 samples, 0.09%)</title><rect x="1189.0" y="515.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1192.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (6 samples, 0.09%)</title><rect x="1189.0" y="499.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1192.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (6 samples, 0.09%)</title><rect x="1189.0" y="483.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1192.0" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (6 samples, 0.09%)</title><rect x="1189.0" y="467.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1192.0" y="478.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (6 samples, 0.09%)</title><rect x="1189.0" y="451.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1192.0" y="462.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$97/249391321.run (6 samples, 0.09%)</title><rect x="1189.0" y="435.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1192.0" y="446.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (6 samples, 0.09%)</title><rect x="1189.0" y="419.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.0" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (6 samples, 0.09%)</title><rect x="1189.0" y="403.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1192.0" y="414.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (6 samples, 0.09%)</title><rect x="1189.0" y="387.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1192.0" y="398.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (4 samples, 0.06%)</title><rect x="1189.3" y="371.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1192.3" y="382.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (4 samples, 0.06%)</title><rect x="1189.3" y="355.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1192.3" y="366.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.06%)</title><rect x="1189.3" y="339.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1192.3" y="350.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.06%)</title><rect x="1189.3" y="323.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1192.3" y="334.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (4 samples, 0.06%)</title><rect x="1189.3" y="307.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1192.3" y="318.0"></text>
</g>
</g>
</svg>
