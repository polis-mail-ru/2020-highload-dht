<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (603 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>[Attach Listener tid=41479] (1 samples, 0.17%)</title><rect x="10.0" y="723.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.17%)</title><rect x="10.0" y="707.0" width="2.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.17%)</title><rect x="10.0" y="691.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.17%)</title><rect x="10.0" y="675.0" width="2.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.17%)</title><rect x="10.0" y="659.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.17%)</title><rect x="10.0" y="643.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.17%)</title><rect x="10.0" y="627.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.17%)</title><rect x="10.0" y="611.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>BsdAttachOperation::complete(int, bufferedStream*) (1 samples, 0.17%)</title><rect x="10.0" y="595.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>write (1 samples, 0.17%)</title><rect x="10.0" y="579.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>[JMX server connection timeout 30 tid=35331] (1 samples, 0.17%)</title><rect x="12.0" y="723.0" width="1.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="15.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.17%)</title><rect x="12.0" y="707.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.0" y="718.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (1 samples, 0.17%)</title><rect x="12.0" y="691.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.17%)</title><rect x="12.0" y="675.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.0" y="686.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.17%)</title><rect x="12.0" y="659.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="15.0" y="670.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.17%)</title><rect x="12.0" y="643.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.0" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.17%)</title><rect x="12.0" y="627.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.0" y="638.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.17%)</title><rect x="12.0" y="611.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.0" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.17%)</title><rect x="12.0" y="595.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="15.0" y="606.0"></text>
</g>
<g>
<title>[Java: C1 CompilerThread0 tid=43011] (1 samples, 0.17%)</title><rect x="13.9" y="723.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="16.9" y="734.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.17%)</title><rect x="13.9" y="707.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="16.9" y="718.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.17%)</title><rect x="13.9" y="691.0" width="2.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="16.9" y="702.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.17%)</title><rect x="13.9" y="675.0" width="2.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="16.9" y="686.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.17%)</title><rect x="13.9" y="659.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.9" y="670.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.17%)</title><rect x="13.9" y="643.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="16.9" y="654.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.17%)</title><rect x="13.9" y="627.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="16.9" y="638.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.17%)</title><rect x="13.9" y="611.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="16.9" y="622.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.17%)</title><rect x="13.9" y="595.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.9" y="606.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.17%)</title><rect x="13.9" y="579.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="16.9" y="590.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.17%)</title><rect x="13.9" y="563.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.9" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.17%)</title><rect x="13.9" y="547.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.9" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.17%)</title><rect x="13.9" y="531.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="16.9" y="542.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=13315] (1 samples, 0.17%)</title><rect x="15.9" y="723.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.9" y="734.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.17%)</title><rect x="15.9" y="707.0" width="1.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="18.9" y="718.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.17%)</title><rect x="15.9" y="691.0" width="1.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="18.9" y="702.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.17%)</title><rect x="15.9" y="675.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="18.9" y="686.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.17%)</title><rect x="15.9" y="659.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.9" y="670.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.17%)</title><rect x="15.9" y="643.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.9" y="654.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.17%)</title><rect x="15.9" y="627.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.9" y="638.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.17%)</title><rect x="15.9" y="611.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.9" y="622.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.17%)</title><rect x="15.9" y="595.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="18.9" y="606.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.17%)</title><rect x="15.9" y="579.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.9" y="590.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.17%)</title><rect x="15.9" y="563.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.9" y="574.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.17%)</title><rect x="15.9" y="547.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.9" y="558.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.17%)</title><rect x="15.9" y="531.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.9" y="542.0"></text>
</g>
<g>
<title>[Java: VM Thread tid=19715] (1 samples, 0.17%)</title><rect x="17.8" y="723.0" width="2.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="20.8" y="734.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.17%)</title><rect x="17.8" y="707.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="20.8" y="718.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.17%)</title><rect x="17.8" y="691.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="20.8" y="702.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.17%)</title><rect x="17.8" y="675.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="20.8" y="686.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.17%)</title><rect x="17.8" y="659.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.8" y="670.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.17%)</title><rect x="17.8" y="643.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.8" y="654.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.17%)</title><rect x="17.8" y="627.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="20.8" y="638.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.17%)</title><rect x="17.8" y="611.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="20.8" y="622.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.17%)</title><rect x="17.8" y="595.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="20.8" y="606.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.17%)</title><rect x="17.8" y="579.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="20.8" y="590.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.17%)</title><rect x="17.8" y="563.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="20.8" y="574.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=41219] (591 samples, 98.01%)</title><rect x="19.8" y="723.0" width="1156.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="22.8" y="734.0">[NIO Selector #0 tid=41219]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (591 samples, 98.01%)</title><rect x="19.8" y="707.0" width="1156.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.8" y="718.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.33%)</title><rect x="23.7" y="691.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.7" y="702.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.33%)</title><rect x="23.7" y="675.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.7" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.17%)</title><rect x="27.6" y="691.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.6" y="702.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.17%)</title><rect x="27.6" y="675.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.17%)</title><rect x="27.6" y="659.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.6" y="670.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (257 samples, 42.62%)</title><rect x="29.6" y="691.0" width="502.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.6" y="702.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.33%)</title><rect x="29.6" y="675.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.6" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (9 samples, 1.49%)</title><rect x="33.5" y="675.0" width="17.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (9 samples, 1.49%)</title><rect x="33.5" y="659.0" width="17.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (9 samples, 1.49%)</title><rect x="33.5" y="643.0" width="17.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.5" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (9 samples, 1.49%)</title><rect x="33.5" y="627.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.5" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (9 samples, 1.49%)</title><rect x="33.5" y="611.0" width="17.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="36.5" y="622.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.17%)</title><rect x="33.5" y="595.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="36.5" y="606.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (2 samples, 0.33%)</title><rect x="35.4" y="595.0" width="4.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="38.4" y="606.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (6 samples, 1.00%)</title><rect x="39.4" y="595.0" width="11.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="42.4" y="606.0"></text>
</g>
<g>
<title>__block_literal_global (3 samples, 0.50%)</title><rect x="45.2" y="579.0" width="5.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="48.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (246 samples, 40.80%)</title><rect x="51.1" y="675.0" width="481.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="54.1" y="686.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (246 samples, 40.80%)</title><rect x="51.1" y="659.0" width="481.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.1" y="670.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (246 samples, 40.80%)</title><rect x="51.1" y="643.0" width="481.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.1" y="654.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (229 samples, 37.98%)</title><rect x="51.1" y="627.0" width="448.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="54.1" y="638.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.50%)</title><rect x="105.9" y="611.0" width="5.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="108.9" y="622.0"></text>
</g>
<g>
<title>kevent (198 samples, 32.84%)</title><rect x="111.8" y="611.0" width="387.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="114.8" y="622.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.66%)</title><rect x="499.2" y="627.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.66%)</title><rect x="499.2" y="611.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.66%)</title><rect x="499.2" y="595.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.66%)</title><rect x="499.2" y="579.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="502.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.66%)</title><rect x="499.2" y="563.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.17%)</title><rect x="501.2" y="547.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="504.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.33%)</title><rect x="503.1" y="547.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="506.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.66%)</title><rect x="507.0" y="627.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="510.0" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.17%)</title><rect x="512.9" y="611.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="515.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (9 samples, 1.49%)</title><rect x="514.9" y="627.0" width="17.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="517.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (7 samples, 1.16%)</title><rect x="518.8" y="611.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="521.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.17%)</title><rect x="522.7" y="595.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="525.7" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.17%)</title><rect x="522.7" y="579.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="525.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.17%)</title><rect x="522.7" y="563.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="525.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.66%)</title><rect x="524.7" y="595.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="527.7" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (329 samples, 54.56%)</title><rect x="532.5" y="691.0" width="643.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="535.5" y="702.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (323 samples, 53.57%)</title><rect x="544.2" y="675.0" width="632.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="547.2" y="686.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (222 samples, 36.82%)</title><rect x="544.2" y="659.0" width="434.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="547.2" y="670.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (210 samples, 34.83%)</title><rect x="544.2" y="643.0" width="411.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="547.2" y="654.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (210 samples, 34.83%)</title><rect x="544.2" y="627.0" width="411.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.2" y="638.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_status.handleRequest (204 samples, 33.83%)</title><rect x="546.2" y="611.0" width="399.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="549.2" y="622.0">RequestHandler1_status.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (198 samples, 32.84%)</title><rect x="546.2" y="595.0" width="387.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="549.2" y="606.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.17%)</title><rect x="546.2" y="579.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="549.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (184 samples, 30.51%)</title><rect x="548.1" y="579.0" width="360.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="551.1" y="590.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 2.32%)</title><rect x="548.1" y="563.0" width="27.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="551.1" y="574.0">o..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.17%)</title><rect x="550.1" y="547.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="553.1" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.33%)</title><rect x="552.1" y="547.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="555.1" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.17%)</title><rect x="554.0" y="531.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="557.0" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.17%)</title><rect x="554.0" y="515.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="557.0" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.17%)</title><rect x="554.0" y="499.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="557.0" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.17%)</title><rect x="554.0" y="483.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="557.0" y="494.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.17%)</title><rect x="554.0" y="467.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="557.0" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.17%)</title><rect x="554.0" y="451.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="557.0" y="462.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 1.66%)</title><rect x="556.0" y="547.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="559.0" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.83%)</title><rect x="557.9" y="531.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.33%)</title><rect x="563.8" y="515.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.8" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.33%)</title><rect x="563.8" y="499.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="566.8" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.66%)</title><rect x="567.7" y="531.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="570.7" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.66%)</title><rect x="567.7" y="515.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="570.7" y="526.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (1 samples, 0.17%)</title><rect x="573.6" y="499.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="576.6" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (170 samples, 28.19%)</title><rect x="575.5" y="563.0" width="332.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="578.5" y="574.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (170 samples, 28.19%)</title><rect x="575.5" y="547.0" width="332.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="578.5" y="558.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (170 samples, 28.19%)</title><rect x="575.5" y="531.0" width="332.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="578.5" y="542.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (170 samples, 28.19%)</title><rect x="575.5" y="515.0" width="332.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.5" y="526.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (170 samples, 28.19%)</title><rect x="575.5" y="499.0" width="332.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="578.5" y="510.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (170 samples, 28.19%)</title><rect x="575.5" y="483.0" width="332.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="578.5" y="494.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (170 samples, 28.19%)</title><rect x="575.5" y="467.0" width="332.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="578.5" y="478.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (165 samples, 27.36%)</title><rect x="575.5" y="451.0" width="322.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="578.5" y="462.0">sun/nio/ch/IOUtil.writeFromNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (165 samples, 27.36%)</title><rect x="575.5" y="435.0" width="322.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="578.5" y="446.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (165 samples, 27.36%)</title><rect x="575.5" y="419.0" width="322.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="578.5" y="430.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.66%)</title><rect x="579.5" y="403.0" width="7.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="582.5" y="414.0"></text>
</g>
<g>
<title>write (159 samples, 26.37%)</title><rect x="587.3" y="403.0" width="311.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="590.3" y="414.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.83%)</title><rect x="898.4" y="451.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="901.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.83%)</title><rect x="898.4" y="435.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="901.4" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.50%)</title><rect x="902.3" y="419.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="905.3" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.50%)</title><rect x="902.3" y="403.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="905.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.50%)</title><rect x="902.3" y="387.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="905.3" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 2.16%)</title><rect x="908.2" y="579.0" width="25.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.2" y="590.0">o..</text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 1.16%)</title><rect x="908.2" y="563.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="911.2" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.83%)</title><rect x="912.1" y="547.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="915.1" y="558.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.66%)</title><rect x="912.1" y="531.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="915.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.66%)</title><rect x="912.1" y="515.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="915.1" y="526.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (4 samples, 0.66%)</title><rect x="912.1" y="499.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="915.1" y="510.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.17%)</title><rect x="920.0" y="531.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="923.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.17%)</title><rect x="920.0" y="515.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="923.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 1.00%)</title><rect x="921.9" y="563.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="924.9" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 1.00%)</title><rect x="921.9" y="547.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="924.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 1.00%)</title><rect x="921.9" y="531.0" width="11.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="924.9" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 1.00%)</title><rect x="921.9" y="515.0" width="11.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="924.9" y="526.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (2 samples, 0.33%)</title><rect x="921.9" y="499.0" width="3.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="924.9" y="510.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.17%)</title><rect x="925.8" y="499.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="928.8" y="510.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.50%)</title><rect x="927.8" y="499.0" width="5.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="930.8" y="510.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (3 samples, 0.50%)</title><rect x="927.8" y="483.0" width="5.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="930.8" y="494.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.33%)</title><rect x="929.7" y="467.0" width="3.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="932.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.status (5 samples, 0.83%)</title><rect x="933.6" y="595.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="936.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (5 samples, 0.83%)</title><rect x="933.6" y="579.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="936.6" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.83%)</title><rect x="933.6" y="563.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="936.6" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.50%)</title><rect x="937.6" y="547.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="940.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.17%)</title><rect x="943.4" y="595.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="946.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.17%)</title><rect x="943.4" y="579.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="946.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.17%)</title><rect x="943.4" y="563.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="946.4" y="574.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.66%)</title><rect x="945.4" y="611.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="948.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.66%)</title><rect x="945.4" y="595.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="948.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.66%)</title><rect x="945.4" y="579.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="948.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.66%)</title><rect x="945.4" y="563.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="948.4" y="574.0"></text>
</g>
<g>
<title>RequestHandler1_status.handleRequest (2 samples, 0.33%)</title><rect x="947.3" y="547.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="950.3" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.17%)</title><rect x="951.3" y="547.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="954.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.handleDefault (1 samples, 0.17%)</title><rect x="953.2" y="611.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="956.2" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.17%)</title><rect x="953.2" y="595.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="956.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 1.00%)</title><rect x="955.2" y="643.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="958.2" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.17%)</title><rect x="963.0" y="627.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="966.0" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.17%)</title><rect x="963.0" y="611.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="966.0" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.17%)</title><rect x="965.0" y="627.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="968.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.33%)</title><rect x="966.9" y="643.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="969.9" y="654.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.17%)</title><rect x="968.9" y="627.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="971.9" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.66%)</title><rect x="970.8" y="643.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="973.8" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.66%)</title><rect x="970.8" y="627.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="973.8" y="638.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (101 samples, 16.75%)</title><rect x="978.7" y="659.0" width="197.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="981.7" y="670.0">one/nio/net/Session.read</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (101 samples, 16.75%)</title><rect x="978.7" y="643.0" width="197.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="981.7" y="654.0">one/nio/net/JavaSocket.read</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 1.16%)</title><rect x="980.6" y="627.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="983.6" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 1.16%)</title><rect x="980.6" y="611.0" width="13.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="983.6" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 1.16%)</title><rect x="980.6" y="595.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="983.6" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 1.16%)</title><rect x="980.6" y="579.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="983.6" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.66%)</title><rect x="984.5" y="563.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="987.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.33%)</title><rect x="988.4" y="547.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="991.4" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.33%)</title><rect x="988.4" y="531.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="991.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.17%)</title><rect x="990.4" y="515.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="993.4" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.17%)</title><rect x="992.4" y="563.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="995.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (93 samples, 15.42%)</title><rect x="994.3" y="627.0" width="182.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="997.3" y="638.0">sun/nio/ch/SocketChanne..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.33%)</title><rect x="1000.2" y="611.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1003.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.33%)</title><rect x="1000.2" y="595.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1003.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.33%)</title><rect x="1000.2" y="579.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1003.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.17%)</title><rect x="1002.1" y="563.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1005.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.17%)</title><rect x="1002.1" y="547.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1005.1" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.17%)</title><rect x="1002.1" y="531.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1005.1" y="542.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.17%)</title><rect x="1002.1" y="515.0" width="2.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1005.1" y="526.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.17%)</title><rect x="1002.1" y="499.0" width="2.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1005.1" y="510.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.17%)</title><rect x="1002.1" y="483.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1005.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (88 samples, 14.59%)</title><rect x="1004.1" y="611.0" width="172.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1007.1" y="622.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (88 samples, 14.59%)</title><rect x="1004.1" y="595.0" width="172.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1007.1" y="606.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.66%)</title><rect x="1004.1" y="579.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1007.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (13 samples, 2.16%)</title><rect x="1011.9" y="579.0" width="25.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1014.9" y="590.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (13 samples, 2.16%)</title><rect x="1011.9" y="563.0" width="25.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1014.9" y="574.0">j..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 1.00%)</title><rect x="1011.9" y="547.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1014.9" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 1.00%)</title><rect x="1011.9" y="531.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1014.9" y="542.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.17%)</title><rect x="1011.9" y="515.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1014.9" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.66%)</title><rect x="1013.9" y="515.0" width="7.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1016.9" y="526.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.17%)</title><rect x="1021.7" y="515.0" width="2.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1024.7" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (7 samples, 1.16%)</title><rect x="1023.7" y="547.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1026.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (7 samples, 1.16%)</title><rect x="1023.7" y="531.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1026.7" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.50%)</title><rect x="1031.5" y="515.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1034.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.50%)</title><rect x="1031.5" y="499.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1034.5" y="510.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.17%)</title><rect x="1035.4" y="483.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1038.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (71 samples, 11.77%)</title><rect x="1037.4" y="579.0" width="138.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1040.4" y="590.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (71 samples, 11.77%)</title><rect x="1037.4" y="563.0" width="138.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.4" y="574.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (71 samples, 11.77%)</title><rect x="1037.4" y="547.0" width="138.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1040.4" y="558.0">sun/nio/ch/FileDi..</text>
</g>
<g>
<title>rpc_errlist (67 samples, 11.11%)</title><rect x="1045.2" y="531.0" width="131.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1048.2" y="542.0">rpc_errlist</text>
</g>
<g>
<title>[RMI TCP Connection(19)-127.0.0.1 tid=36127] (7 samples, 1.16%)</title><rect x="1176.3" y="723.0" width="13.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1179.3" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (7 samples, 1.16%)</title><rect x="1176.3" y="707.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1179.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (7 samples, 1.16%)</title><rect x="1176.3" y="691.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1179.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (7 samples, 1.16%)</title><rect x="1176.3" y="675.0" width="13.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1179.3" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (7 samples, 1.16%)</title><rect x="1176.3" y="659.0" width="13.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1179.3" y="670.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (7 samples, 1.16%)</title><rect x="1176.3" y="643.0" width="13.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1179.3" y="654.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$97/249391321.run (7 samples, 1.16%)</title><rect x="1176.3" y="627.0" width="13.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1179.3" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (7 samples, 1.16%)</title><rect x="1176.3" y="611.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1179.3" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (7 samples, 1.16%)</title><rect x="1176.3" y="595.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1179.3" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (7 samples, 1.16%)</title><rect x="1176.3" y="579.0" width="13.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1179.3" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (7 samples, 1.16%)</title><rect x="1176.3" y="563.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1179.3" y="574.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (7 samples, 1.16%)</title><rect x="1176.3" y="547.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1179.3" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (7 samples, 1.16%)</title><rect x="1176.3" y="531.0" width="13.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1179.3" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (7 samples, 1.16%)</title><rect x="1176.3" y="515.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1179.3" y="526.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (7 samples, 1.16%)</title><rect x="1176.3" y="499.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1179.3" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (5 samples, 0.83%)</title><rect x="1176.3" y="483.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (5 samples, 0.83%)</title><rect x="1176.3" y="467.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1179.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor31.invoke (2 samples, 0.33%)</title><rect x="1176.3" y="451.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1179.3" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getAttribute (2 samples, 0.33%)</title><rect x="1176.3" y="435.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1179.3" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (2 samples, 0.33%)</title><rect x="1176.3" y="419.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1179.3" y="430.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (2 samples, 0.33%)</title><rect x="1176.3" y="403.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1179.3" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (2 samples, 0.33%)</title><rect x="1176.3" y="387.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1179.3" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.getAttribute (2 samples, 0.33%)</title><rect x="1176.3" y="371.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1179.3" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.getAttribute (2 samples, 0.33%)</title><rect x="1176.3" y="355.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1179.3" y="366.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.getAttribute (2 samples, 0.33%)</title><rect x="1176.3" y="339.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1179.3" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.getAttribute (2 samples, 0.33%)</title><rect x="1176.3" y="323.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1179.3" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.getAttribute (2 samples, 0.33%)</title><rect x="1176.3" y="307.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1179.3" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (2 samples, 0.33%)</title><rect x="1176.3" y="291.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1179.3" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (2 samples, 0.33%)</title><rect x="1176.3" y="275.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1179.3" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (2 samples, 0.33%)</title><rect x="1176.3" y="259.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1179.3" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (2 samples, 0.33%)</title><rect x="1176.3" y="243.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1179.3" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (2 samples, 0.33%)</title><rect x="1176.3" y="227.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1179.3" y="238.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (2 samples, 0.33%)</title><rect x="1176.3" y="211.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1179.3" y="222.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.33%)</title><rect x="1176.3" y="195.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1179.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.33%)</title><rect x="1176.3" y="179.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1179.3" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (2 samples, 0.33%)</title><rect x="1176.3" y="163.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1179.3" y="174.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (2 samples, 0.33%)</title><rect x="1176.3" y="147.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1179.3" y="158.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.33%)</title><rect x="1176.3" y="131.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1179.3" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.33%)</title><rect x="1176.3" y="115.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1179.3" y="126.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor42.invoke (2 samples, 0.33%)</title><rect x="1176.3" y="99.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1179.3" y="110.0"></text>
</g>
<g>
<title>com/sun/management/internal/OperatingSystemImpl.getProcessCpuTime (2 samples, 0.33%)</title><rect x="1176.3" y="83.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1179.3" y="94.0"></text>
</g>
<g>
<title>com/sun/management/internal/OperatingSystemImpl.getProcessCpuTime0 (2 samples, 0.33%)</title><rect x="1176.3" y="67.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1179.3" y="78.0"></text>
</g>
<g>
<title>getrusage (2 samples, 0.33%)</title><rect x="1176.3" y="51.0" width="3.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1179.3" y="62.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (2 samples, 0.33%)</title><rect x="1180.2" y="451.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1183.2" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (2 samples, 0.33%)</title><rect x="1180.2" y="435.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1183.2" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1 samples, 0.17%)</title><rect x="1180.2" y="419.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1183.2" y="430.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1 samples, 0.17%)</title><rect x="1180.2" y="403.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1183.2" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1 samples, 0.17%)</title><rect x="1180.2" y="387.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1183.2" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (1 samples, 0.17%)</title><rect x="1180.2" y="371.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1183.2" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (1 samples, 0.17%)</title><rect x="1180.2" y="355.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1183.2" y="366.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (1 samples, 0.17%)</title><rect x="1180.2" y="339.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1183.2" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (1 samples, 0.17%)</title><rect x="1180.2" y="323.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1183.2" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (1 samples, 0.17%)</title><rect x="1180.2" y="307.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1183.2" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1 samples, 0.17%)</title><rect x="1180.2" y="291.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1183.2" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1 samples, 0.17%)</title><rect x="1180.2" y="275.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1183.2" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1 samples, 0.17%)</title><rect x="1180.2" y="259.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1183.2" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1 samples, 0.17%)</title><rect x="1180.2" y="243.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1183.2" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1 samples, 0.17%)</title><rect x="1180.2" y="227.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1183.2" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1 samples, 0.17%)</title><rect x="1180.2" y="211.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1183.2" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (1 samples, 0.17%)</title><rect x="1180.2" y="195.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1183.2" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1 samples, 0.17%)</title><rect x="1180.2" y="179.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1183.2" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1 samples, 0.17%)</title><rect x="1180.2" y="163.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1183.2" y="174.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1180.2" y="147.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1183.2" y="158.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1180.2" y="131.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1183.2" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.keySet (1 samples, 0.17%)</title><rect x="1180.2" y="115.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1183.2" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.navigableKeySet (1 samples, 0.17%)</title><rect x="1180.2" y="99.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1183.2" y="110.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1180.2" y="83.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1183.2" y="94.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1180.2" y="67.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1183.2" y="78.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1180.2" y="51.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1183.2" y="62.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1180.2" y="35.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1183.2" y="46.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (1 samples, 0.17%)</title><rect x="1182.2" y="419.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1185.2" y="430.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.17%)</title><rect x="1182.2" y="403.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1185.2" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (1 samples, 0.17%)</title><rect x="1182.2" y="387.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1185.2" y="398.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (1 samples, 0.17%)</title><rect x="1182.2" y="371.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1185.2" y="382.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$CombinedClassLoader.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1182.2" y="355.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1185.2" y="366.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1182.2" y="339.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1182.2" y="323.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1185.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor38.invoke (1 samples, 0.17%)</title><rect x="1184.1" y="451.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1187.1" y="462.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getAttributes (1 samples, 0.17%)</title><rect x="1184.1" y="435.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.1" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1 samples, 0.17%)</title><rect x="1184.1" y="419.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1 samples, 0.17%)</title><rect x="1184.1" y="403.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1 samples, 0.17%)</title><rect x="1184.1" y="387.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.getAttributes (1 samples, 0.17%)</title><rect x="1184.1" y="371.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.getAttributes (1 samples, 0.17%)</title><rect x="1184.1" y="355.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.getAttributes (1 samples, 0.17%)</title><rect x="1184.1" y="339.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1187.1" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.getAttributes (1 samples, 0.17%)</title><rect x="1184.1" y="323.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1187.1" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.getAttribute (1 samples, 0.17%)</title><rect x="1184.1" y="307.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1187.1" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.getAttribute (1 samples, 0.17%)</title><rect x="1184.1" y="291.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1187.1" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1 samples, 0.17%)</title><rect x="1184.1" y="275.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1187.1" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1 samples, 0.17%)</title><rect x="1184.1" y="259.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1187.1" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1 samples, 0.17%)</title><rect x="1184.1" y="243.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1187.1" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1 samples, 0.17%)</title><rect x="1184.1" y="227.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1187.1" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1 samples, 0.17%)</title><rect x="1184.1" y="211.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1187.1" y="222.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (1 samples, 0.17%)</title><rect x="1184.1" y="195.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1187.1" y="206.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.17%)</title><rect x="1184.1" y="179.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1187.1" y="190.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.17%)</title><rect x="1184.1" y="163.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1187.1" y="174.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (1 samples, 0.17%)</title><rect x="1184.1" y="147.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1187.1" y="158.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (1 samples, 0.17%)</title><rect x="1184.1" y="131.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1187.1" y="142.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.17%)</title><rect x="1184.1" y="115.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1187.1" y="126.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.17%)</title><rect x="1184.1" y="99.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1187.1" y="110.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor44.invoke (1 samples, 0.17%)</title><rect x="1184.1" y="83.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1187.1" y="94.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getDaemonThreadCount (1 samples, 0.17%)</title><rect x="1184.1" y="67.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1187.1" y="78.0"></text>
</g>
<g>
<title>sun/management/VMManagementImpl.getDaemonThreadCount (1 samples, 0.17%)</title><rect x="1184.1" y="51.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1187.1" y="62.0"></text>
</g>
<g>
<title>Java_sun_management_VMManagementImpl_getDaemonThreadCount (1 samples, 0.17%)</title><rect x="1184.1" y="35.0" width="2.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1187.1" y="46.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (1 samples, 0.17%)</title><rect x="1186.1" y="483.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1189.1" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.17%)</title><rect x="1186.1" y="467.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1189.1" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.17%)</title><rect x="1186.1" y="451.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1189.1" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.17%)</title><rect x="1186.1" y="435.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1189.1" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.17%)</title><rect x="1186.1" y="419.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1189.1" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.17%)</title><rect x="1186.1" y="403.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1189.1" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.17%)</title><rect x="1186.1" y="387.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1189.1" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.17%)</title><rect x="1186.1" y="371.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1189.1" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.17%)</title><rect x="1186.1" y="355.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1189.1" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.17%)</title><rect x="1186.1" y="339.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1189.1" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.17%)</title><rect x="1186.1" y="323.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1189.1" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.17%)</title><rect x="1186.1" y="307.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1189.1" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.17%)</title><rect x="1186.1" y="291.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1189.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.17%)</title><rect x="1186.1" y="275.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1189.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (1 samples, 0.17%)</title><rect x="1186.1" y="259.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1189.1" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (1 samples, 0.17%)</title><rect x="1186.1" y="243.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1189.1" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.17%)</title><rect x="1186.1" y="227.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1189.1" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.17%)</title><rect x="1186.1" y="211.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1189.1" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.lookup (1 samples, 0.17%)</title><rect x="1186.1" y="195.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1189.1" y="206.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (1 samples, 0.17%)</title><rect x="1188.0" y="483.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1191.0" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (1 samples, 0.17%)</title><rect x="1188.0" y="467.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1191.0" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1188.0" y="451.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1191.0" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1188.0" y="435.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1191.0" y="446.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (1 samples, 0.17%)</title><rect x="1188.0" y="419.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1191.0" y="430.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.17%)</title><rect x="1188.0" y="403.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1191.0" y="414.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (1 samples, 0.17%)</title><rect x="1188.0" y="387.0" width="2.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1191.0" y="398.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.17%)</title><rect x="1188.0" y="371.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.0" y="382.0"></text>
</g>
</g>
</svg>
