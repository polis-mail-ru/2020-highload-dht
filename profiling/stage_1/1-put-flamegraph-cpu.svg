<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="853"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="853"> </text>
<g id="frames">
<g>
<title>all (1,804 samples, 100.00%)</title><rect x="10.0" y="819.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="830.0">all</text>
</g>
<g>
<title>[Attach Listener tid=41479] (1 samples, 0.06%)</title><rect x="10.0" y="803.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.06%)</title><rect x="10.0" y="787.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.06%)</title><rect x="10.0" y="771.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="10.0" y="755.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.06%)</title><rect x="10.0" y="739.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.06%)</title><rect x="10.0" y="723.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.06%)</title><rect x="10.0" y="707.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.06%)</title><rect x="10.0" y="691.0" width="0.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.06%)</title><rect x="10.0" y="675.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=13315] (4 samples, 0.22%)</title><rect x="10.7" y="803.0" width="2.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.7" y="814.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.22%)</title><rect x="10.7" y="787.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.7" y="798.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.22%)</title><rect x="10.7" y="771.0" width="2.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.7" y="782.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.22%)</title><rect x="10.7" y="755.0" width="2.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.7" y="766.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.22%)</title><rect x="10.7" y="739.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.7" y="750.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.22%)</title><rect x="10.7" y="723.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.7" y="734.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.22%)</title><rect x="10.7" y="707.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.7" y="718.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.11%)</title><rect x="10.7" y="691.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.7" y="702.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.11%)</title><rect x="10.7" y="675.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.7" y="686.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.11%)</title><rect x="10.7" y="659.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.7" y="670.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (2 samples, 0.11%)</title><rect x="10.7" y="643.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.7" y="654.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.11%)</title><rect x="10.7" y="627.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.7" y="638.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.06%)</title><rect x="10.7" y="611.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.7" y="622.0"></text>
</g>
<g>
<title>G1Predictions::stddev_estimate(TruncatedSeq const*) const (1 samples, 0.06%)</title><rect x="10.7" y="595.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.7" y="606.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.06%)</title><rect x="11.3" y="611.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.3" y="622.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.06%)</title><rect x="11.3" y="595.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.3" y="606.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (2 samples, 0.11%)</title><rect x="12.0" y="691.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.0" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.11%)</title><rect x="12.0" y="675.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.0" y="686.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.11%)</title><rect x="12.0" y="659.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.0" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.11%)</title><rect x="12.0" y="643.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.0" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.11%)</title><rect x="12.0" y="627.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="15.0" y="638.0"></text>
</g>
<g>
<title>[Java: GC Thread#0 tid=11779] (1 samples, 0.06%)</title><rect x="13.3" y="803.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="16.3" y="814.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.06%)</title><rect x="13.3" y="787.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="16.3" y="798.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.06%)</title><rect x="13.3" y="771.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="16.3" y="782.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="13.3" y="755.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="16.3" y="766.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.06%)</title><rect x="13.3" y="739.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.3" y="750.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.06%)</title><rect x="13.3" y="723.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="16.3" y="734.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="13.3" y="707.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="16.3" y="718.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.06%)</title><rect x="13.3" y="691.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="16.3" y="702.0"></text>
</g>
<g>
<title>[Java: VM Periodic Task Thread tid=23299] (2 samples, 0.11%)</title><rect x="13.9" y="803.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="16.9" y="814.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.11%)</title><rect x="13.9" y="787.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="16.9" y="798.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.11%)</title><rect x="13.9" y="771.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="16.9" y="782.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.11%)</title><rect x="13.9" y="755.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="16.9" y="766.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.11%)</title><rect x="13.9" y="739.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.9" y="750.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.11%)</title><rect x="13.9" y="723.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.9" y="734.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.11%)</title><rect x="13.9" y="707.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.9" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.11%)</title><rect x="13.9" y="691.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.9" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.11%)</title><rect x="13.9" y="675.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.9" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.11%)</title><rect x="13.9" y="659.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="16.9" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.11%)</title><rect x="13.9" y="643.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="16.9" y="654.0"></text>
</g>
<g>
<title>[Java: VM Thread tid=19715] (1 samples, 0.06%)</title><rect x="15.2" y="803.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="18.2" y="814.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.06%)</title><rect x="15.2" y="787.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="18.2" y="798.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.06%)</title><rect x="15.2" y="771.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="18.2" y="782.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="15.2" y="755.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="18.2" y="766.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.06%)</title><rect x="15.2" y="739.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.2" y="750.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.06%)</title><rect x="15.2" y="723.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.2" y="734.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.06%)</title><rect x="15.2" y="707.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.2" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.06%)</title><rect x="15.2" y="691.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="18.2" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.06%)</title><rect x="15.2" y="675.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.2" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.06%)</title><rect x="15.2" y="659.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.2" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.06%)</title><rect x="15.2" y="643.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="18.2" y="654.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=38147] (1,785 samples, 98.95%)</title><rect x="15.9" y="803.0" width="1167.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="18.9" y="814.0">[NIO Selector #7 tid=38147]</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1 samples, 0.06%)</title><rect x="15.9" y="787.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="18.9" y="798.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.06%)</title><rect x="15.9" y="771.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="18.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.06%)</title><rect x="15.9" y="755.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="18.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.06%)</title><rect x="15.9" y="739.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.06%)</title><rect x="15.9" y="723.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.06%)</title><rect x="15.9" y="707.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1 samples, 0.06%)</title><rect x="15.9" y="691.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.06%)</title><rect x="15.9" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.06%)</title><rect x="15.9" y="659.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.06%)</title><rect x="15.9" y="643.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="18.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.06%)</title><rect x="15.9" y="627.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="18.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1 samples, 0.06%)</title><rect x="15.9" y="611.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="18.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.06%)</title><rect x="15.9" y="595.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.06%)</title><rect x="15.9" y="579.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.06%)</title><rect x="15.9" y="563.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="18.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.06%)</title><rect x="15.9" y="547.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="18.9" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.06%)</title><rect x="15.9" y="531.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="18.9" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (1 samples, 0.06%)</title><rect x="15.9" y="515.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="18.9" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.06%)</title><rect x="15.9" y="499.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.9" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (1 samples, 0.06%)</title><rect x="15.9" y="483.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.9" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,784 samples, 98.89%)</title><rect x="16.5" y="787.0" width="1167.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.5" y="798.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.11%)</title><rect x="17.2" y="771.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1 samples, 0.06%)</title><rect x="17.8" y="755.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.8" y="766.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.06%)</title><rect x="18.5" y="771.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.5" y="782.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.06%)</title><rect x="18.5" y="755.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="21.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.06%)</title><rect x="18.5" y="739.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.5" y="750.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (192 samples, 10.64%)</title><rect x="19.2" y="771.0" width="125.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.2" y="782.0">one/nio/net/Jav..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.11%)</title><rect x="19.2" y="755.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.06%)</title><rect x="19.8" y="739.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.06%)</title><rect x="19.8" y="723.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.06%)</title><rect x="19.8" y="707.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.8" y="718.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (7 samples, 0.39%)</title><rect x="20.5" y="755.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (7 samples, 0.39%)</title><rect x="20.5" y="739.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (7 samples, 0.39%)</title><rect x="20.5" y="723.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.5" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.06%)</title><rect x="20.5" y="707.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.5" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.06%)</title><rect x="20.5" y="691.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.5" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (6 samples, 0.33%)</title><rect x="21.1" y="707.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.1" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (6 samples, 0.33%)</title><rect x="21.1" y="691.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.1" y="702.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (2 samples, 0.11%)</title><rect x="21.1" y="675.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="24.1" y="686.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.22%)</title><rect x="22.4" y="675.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="25.4" y="686.0"></text>
</g>
<g>
<title>__block_literal_global (3 samples, 0.17%)</title><rect x="23.1" y="659.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="26.1" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (183 samples, 10.14%)</title><rect x="25.0" y="755.0" width="119.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.0" y="766.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (183 samples, 10.14%)</title><rect x="25.0" y="739.0" width="119.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.0" y="750.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (183 samples, 10.14%)</title><rect x="25.0" y="723.0" width="119.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.0" y="734.0">sun/nio/ch/KQue..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (172 samples, 9.53%)</title><rect x="25.0" y="707.0" width="112.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.0" y="718.0">sun/nio/ch/KQu..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.17%)</title><rect x="33.5" y="691.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="36.5" y="702.0"></text>
</g>
<g>
<title>kevent (156 samples, 8.65%)</title><rect x="35.5" y="691.0" width="102.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="38.5" y="702.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.17%)</title><rect x="137.5" y="707.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="140.5" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.17%)</title><rect x="137.5" y="691.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="140.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.17%)</title><rect x="137.5" y="675.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="140.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.17%)</title><rect x="137.5" y="659.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="140.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.17%)</title><rect x="137.5" y="643.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="140.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.11%)</title><rect x="137.5" y="627.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="140.5" y="638.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.06%)</title><rect x="138.9" y="627.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="141.9" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.17%)</title><rect x="139.5" y="707.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.5" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.06%)</title><rect x="140.8" y="691.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.8" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (1 samples, 0.06%)</title><rect x="140.8" y="675.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (5 samples, 0.28%)</title><rect x="141.5" y="707.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.28%)</title><rect x="141.5" y="691.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.11%)</title><rect x="142.8" y="675.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="145.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.11%)</title><rect x="142.8" y="659.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="145.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.11%)</title><rect x="142.8" y="643.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="145.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.06%)</title><rect x="144.1" y="675.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="147.1" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,588 samples, 88.03%)</title><rect x="144.7" y="771.0" width="1038.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="147.7" y="782.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,588 samples, 88.03%)</title><rect x="144.7" y="755.0" width="1038.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="147.7" y="766.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,520 samples, 84.26%)</title><rect x="144.7" y="739.0" width="994.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.7" y="750.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,497 samples, 82.98%)</title><rect x="146.1" y="723.0" width="979.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="149.1" y="734.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,497 samples, 82.98%)</title><rect x="146.1" y="707.0" width="979.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="149.1" y="718.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,490 samples, 82.59%)</title><rect x="146.1" y="691.0" width="974.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="149.1" y="702.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (164 samples, 9.09%)</title><rect x="148.0" y="675.0" width="107.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="151.0" y="686.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (154 samples, 8.54%)</title><rect x="148.7" y="659.0" width="100.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.7" y="670.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9 samples, 0.50%)</title><rect x="148.7" y="643.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="151.7" y="654.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.39%)</title><rect x="150.0" y="627.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.0" y="638.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.06%)</title><rect x="150.0" y="611.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="153.0" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.11%)</title><rect x="150.6" y="611.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.11%)</title><rect x="150.6" y="595.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="153.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.06%)</title><rect x="150.6" y="579.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="153.6" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.06%)</title><rect x="151.3" y="579.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="154.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.22%)</title><rect x="151.9" y="611.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="154.9" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.22%)</title><rect x="151.9" y="595.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.06%)</title><rect x="153.9" y="579.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.06%)</title><rect x="153.9" y="563.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="156.9" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (145 samples, 8.04%)</title><rect x="154.6" y="643.0" width="94.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="157.6" y="654.0">one/nio/net..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.06%)</title><rect x="154.6" y="627.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="157.6" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.06%)</title><rect x="154.6" y="611.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="157.6" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.06%)</title><rect x="154.6" y="595.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="157.6" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.06%)</title><rect x="154.6" y="579.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="157.6" y="590.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.06%)</title><rect x="154.6" y="563.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="157.6" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.06%)</title><rect x="154.6" y="547.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="157.6" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.06%)</title><rect x="154.6" y="531.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="157.6" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.06%)</title><rect x="154.6" y="515.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="157.6" y="526.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.06%)</title><rect x="154.6" y="499.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="157.6" y="510.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.06%)</title><rect x="154.6" y="483.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="157.6" y="494.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.06%)</title><rect x="154.6" y="467.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="157.6" y="478.0"></text>
</g>
<g>
<title>G1MonitoringSupport::recalculate_eden_size() (1 samples, 0.06%)</title><rect x="154.6" y="451.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="157.6" y="462.0"></text>
</g>
<g>
<title>G1SurvivorRegions::length() const (1 samples, 0.06%)</title><rect x="154.6" y="435.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="157.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (144 samples, 7.98%)</title><rect x="155.2" y="627.0" width="94.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.2" y="638.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (144 samples, 7.98%)</title><rect x="155.2" y="611.0" width="94.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="158.2" y="622.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (144 samples, 7.98%)</title><rect x="155.2" y="595.0" width="94.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.2" y="606.0">one/nio/net..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.17%)</title><rect x="155.2" y="579.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="158.2" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="156.5" y="563.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.5" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="156.5" y="547.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="159.5" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="156.5" y="531.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.06%)</title><rect x="156.5" y="515.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (141 samples, 7.82%)</title><rect x="157.2" y="579.0" width="92.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="160.2" y="590.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (141 samples, 7.82%)</title><rect x="157.2" y="563.0" width="92.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="160.2" y="574.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (141 samples, 7.82%)</title><rect x="157.2" y="547.0" width="92.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="160.2" y="558.0">sun/nio/ch/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.11%)</title><rect x="157.2" y="531.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.2" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.11%)</title><rect x="157.2" y="515.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.2" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.11%)</title><rect x="157.2" y="499.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="160.2" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.11%)</title><rect x="157.2" y="483.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="160.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.11%)</title><rect x="157.2" y="467.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.11%)</title><rect x="157.2" y="451.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (135 samples, 7.48%)</title><rect x="158.5" y="531.0" width="88.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="161.5" y="542.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (135 samples, 7.48%)</title><rect x="158.5" y="515.0" width="88.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.5" y="526.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (135 samples, 7.48%)</title><rect x="158.5" y="499.0" width="88.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.5" y="510.0">sun/nio/ch..</text>
</g>
<g>
<title>write (134 samples, 7.43%)</title><rect x="159.1" y="483.0" width="87.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="162.1" y="494.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.22%)</title><rect x="246.8" y="531.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.11%)</title><rect x="246.8" y="515.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.8" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.06%)</title><rect x="247.4" y="499.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.4" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="247.4" y="483.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="250.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.11%)</title><rect x="248.1" y="515.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.06%)</title><rect x="248.7" y="499.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.50%)</title><rect x="249.4" y="659.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.4" y="670.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.22%)</title><rect x="249.4" y="643.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.4" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.17%)</title><rect x="250.1" y="627.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.1" y="638.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.17%)</title><rect x="250.1" y="611.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.1" y="622.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.17%)</title><rect x="250.1" y="595.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.1" y="606.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.17%)</title><rect x="250.1" y="579.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.06%)</title><rect x="251.4" y="563.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.28%)</title><rect x="252.0" y="643.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.0" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.28%)</title><rect x="252.0" y="627.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.28%)</title><rect x="252.0" y="611.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="255.0" y="622.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.06%)</title><rect x="252.0" y="595.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="255.0" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.22%)</title><rect x="252.7" y="595.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="255.7" y="606.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.06%)</title><rect x="253.3" y="579.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="256.3" y="590.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.11%)</title><rect x="254.0" y="579.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="257.0" y="590.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.11%)</title><rect x="254.0" y="563.0" width="1.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="257.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.06%)</title><rect x="255.3" y="675.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.3" y="686.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.06%)</title><rect x="255.3" y="659.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.entity (1,322 samples, 73.28%)</title><rect x="255.9" y="675.0" width="864.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.9" y="686.0">ru/mail/polis/service/stakenschneider/ServiceImplementation.entity</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.get (1 samples, 0.06%)</title><rect x="256.6" y="659.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.06%)</title><rect x="256.6" y="643.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.6" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="256.6" y="627.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="259.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImplementation.put (1,320 samples, 73.17%)</title><rect x="257.3" y="659.0" width="863.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="260.3" y="670.0">ru/mail/polis/service/stakenschneider/ServiceImplementation.put</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,320 samples, 73.17%)</title><rect x="257.3" y="643.0" width="863.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.3" y="654.0">ru/mail/polis/dao/RocksDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,318 samples, 73.06%)</title><rect x="257.3" y="627.0" width="862.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.3" y="638.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,318 samples, 73.06%)</title><rect x="257.3" y="611.0" width="862.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.3" y="622.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>I2C/C2I adapters (7 samples, 0.39%)</title><rect x="257.9" y="595.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.9" y="606.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (924 samples, 51.22%)</title><rect x="262.5" y="595.0" width="604.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="265.5" y="606.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.06%)</title><rect x="262.5" y="579.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="265.5" y="590.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.06%)</title><rect x="263.1" y="579.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="266.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.17%)</title><rect x="263.8" y="579.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="266.8" y="590.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (919 samples, 50.94%)</title><rect x="265.8" y="579.0" width="601.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="268.8" y="590.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::C..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.06%)</title><rect x="266.4" y="563.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="269.4" y="574.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="267.1" y="563.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="270.1" y="574.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.06%)</title><rect x="267.7" y="563.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="270.7" y="574.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.11%)</title><rect x="268.4" y="563.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="271.4" y="574.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="269.7" y="563.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="272.7" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="270.3" y="563.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="273.3" y="574.0"></text>
</g>
<g>
<title>free (1 samples, 0.06%)</title><rect x="271.0" y="563.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="274.0" y="574.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.06%)</title><rect x="271.0" y="547.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="274.0" y="558.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.06%)</title><rect x="271.0" y="531.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="274.0" y="542.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.17%)</title><rect x="271.6" y="563.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="274.6" y="574.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.17%)</title><rect x="271.6" y="547.0" width="2.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="274.6" y="558.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="272.3" y="531.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="275.3" y="542.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="272.9" y="531.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="275.9" y="542.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.22%)</title><rect x="273.6" y="563.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="276.6" y="574.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="273.6" y="547.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="276.6" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.17%)</title><rect x="274.3" y="547.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="277.3" y="558.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.11%)</title><rect x="274.3" y="531.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="277.3" y="542.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.06%)</title><rect x="275.6" y="531.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="278.6" y="542.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.06%)</title><rect x="275.6" y="515.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="278.6" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.44%)</title><rect x="276.2" y="563.0" width="5.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="279.2" y="574.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="276.2" y="547.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="279.2" y="558.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="276.2" y="531.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="279.2" y="542.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="276.9" y="547.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="279.9" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.22%)</title><rect x="277.5" y="547.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="280.5" y="558.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.22%)</title><rect x="277.5" y="531.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="280.5" y="542.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.17%)</title><rect x="278.2" y="515.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="281.2" y="526.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.17%)</title><rect x="278.2" y="499.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="281.2" y="510.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.17%)</title><rect x="278.2" y="483.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="281.2" y="494.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="278.2" y="467.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="281.2" y="478.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.11%)</title><rect x="278.8" y="467.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="281.8" y="478.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.06%)</title><rect x="279.5" y="451.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="282.5" y="462.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="280.1" y="547.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="283.1" y="558.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.06%)</title><rect x="280.8" y="547.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="283.8" y="558.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.11%)</title><rect x="281.5" y="563.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="284.5" y="574.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.22%)</title><rect x="282.8" y="563.0" width="2.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="285.8" y="574.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.22%)</title><rect x="282.8" y="547.0" width="2.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="285.8" y="558.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.11%)</title><rect x="282.8" y="531.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="285.8" y="542.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.11%)</title><rect x="284.1" y="531.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="287.1" y="542.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.11%)</title><rect x="284.1" y="515.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="287.1" y="526.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.11%)</title><rect x="284.1" y="499.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="287.1" y="510.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.11%)</title><rect x="284.1" y="483.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="287.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (889 samples, 49.28%)</title><rect x="285.4" y="563.0" width="581.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="288.4" y="574.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;ch..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (889 samples, 49.28%)</title><rect x="285.4" y="547.0" width="581.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="288.4" y="558.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, ..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (886 samples, 49.11%)</title><rect x="286.0" y="531.0" width="579.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="289.0" y="542.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, roc..</text>
</g>
<g>
<title>free_tiny (1 samples, 0.06%)</title><rect x="287.3" y="515.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="290.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (857 samples, 47.51%)</title><rect x="288.0" y="515.0" width="560.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="291.0" y="526.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (855 samples, 47.39%)</title><rect x="288.0" y="499.0" width="559.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="291.0" y="510.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.11%)</title><rect x="298.5" y="483.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="301.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.06%)</title><rect x="299.8" y="483.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="302.8" y="494.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.06%)</title><rect x="299.8" y="467.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="302.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (198 samples, 10.98%)</title><rect x="300.4" y="483.0" width="129.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="303.4" y="494.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (196 samples, 10.86%)</title><rect x="301.1" y="467.0" width="128.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="304.1" y="478.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (193 samples, 10.70%)</title><rect x="302.4" y="451.0" width="126.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="305.4" y="462.0">rocksdb::log::Wr..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (6 samples, 0.33%)</title><rect x="302.4" y="435.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="305.4" y="446.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (187 samples, 10.37%)</title><rect x="306.3" y="435.0" width="122.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="309.3" y="446.0">rocksdb::log::W..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync() (2 samples, 0.11%)</title><rect x="307.0" y="419.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="310.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.06%)</title><rect x="308.3" y="419.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="311.3" y="430.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="308.3" y="403.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="311.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (183 samples, 10.14%)</title><rect x="308.9" y="419.0" width="119.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="311.9" y="430.0">rocksdb::Writab..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.11%)</title><rect x="308.9" y="403.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="311.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (1 samples, 0.06%)</title><rect x="310.2" y="403.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="313.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (180 samples, 9.98%)</title><rect x="310.9" y="403.0" width="117.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="313.9" y="414.0">rocksdb::Writa..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (1 samples, 0.06%)</title><rect x="310.9" y="387.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="313.9" y="398.0"></text>
</g>
<g>
<title>write (179 samples, 9.92%)</title><rect x="311.5" y="387.0" width="117.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="314.5" y="398.0">write</text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.06%)</title><rect x="428.6" y="451.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="431.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.06%)</title><rect x="429.3" y="467.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="432.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (1 samples, 0.06%)</title><rect x="429.9" y="483.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="432.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.06%)</title><rect x="430.6" y="483.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="433.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (626 samples, 34.70%)</title><rect x="431.2" y="483.0" width="409.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="434.2" y="494.0">rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteTh..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.11%)</title><rect x="432.5" y="467.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="435.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (621 samples, 34.42%)</title><rect x="433.9" y="467.0" width="406.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="436.9" y="478.0">rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handle..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (621 samples, 34.42%)</title><rect x="433.9" y="451.0" width="406.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="436.9" y="462.0">rocksdb::WriteBatchInternal::AppendedByteSize(unsigned l..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.06%)</title><rect x="433.9" y="435.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="436.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (620 samples, 34.37%)</title><rect x="434.5" y="435.0" width="405.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="437.5" y="446.0">rocksdb::WriteBatchInternal::AppendedByteSize(unsigned ..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.06%)</title><rect x="435.8" y="419.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="438.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (613 samples, 33.98%)</title><rect x="436.5" y="419.0" width="400.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="439.5" y="430.0">rocksdb::MemTable::Add(unsigned long long, rocksdb::Val..</text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.11%)</title><rect x="438.4" y="403.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="441.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.06%)</title><rect x="439.7" y="403.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="442.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (607 samples, 33.65%)</title><rect x="440.4" y="403.0" width="397.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="443.4" y="414.0">rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::M..</text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.11%)</title><rect x="463.9" y="387.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="466.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.11%)</title><rect x="465.3" y="387.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="468.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.06%)</title><rect x="465.3" y="371.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="468.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.06%)</title><rect x="465.9" y="371.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="468.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (48 samples, 2.66%)</title><rect x="466.6" y="387.0" width="31.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="469.6" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (47 samples, 2.61%)</title><rect x="467.2" y="371.0" width="30.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="470.2" y="382.0">ro..</text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.11%)</title><rect x="467.2" y="355.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="470.2" y="366.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.11%)</title><rect x="468.5" y="355.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="471.5" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="468.5" y="339.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="471.5" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="469.2" y="339.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="472.2" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.06%)</title><rect x="469.2" y="323.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="472.2" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.06%)</title><rect x="469.2" y="307.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="472.2" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="469.2" y="291.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="472.2" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="469.2" y="275.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="472.2" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="469.2" y="259.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="472.2" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.11%)</title><rect x="469.8" y="355.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="472.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (41 samples, 2.27%)</title><rect x="471.1" y="355.0" width="26.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="474.1" y="366.0">r..</text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="471.8" y="339.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="474.8" y="350.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (9 samples, 0.50%)</title><rect x="472.5" y="339.0" width="5.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="475.5" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="473.8" y="323.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="476.8" y="334.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (6 samples, 0.33%)</title><rect x="474.4" y="323.0" width="3.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="477.4" y="334.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.17%)</title><rect x="475.7" y="307.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="478.7" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="477.0" y="291.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="480.0" y="302.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.06%)</title><rect x="477.7" y="307.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="480.7" y="318.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.17%)</title><rect x="478.3" y="339.0" width="2.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="481.3" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.11%)</title><rect x="478.3" y="323.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="481.3" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="479.6" y="323.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="482.6" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.06%)</title><rect x="479.6" y="307.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="482.6" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.06%)</title><rect x="479.6" y="291.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="482.6" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="479.6" y="275.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="482.6" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="479.6" y="259.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="482.6" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="479.6" y="243.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="482.6" y="254.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (27 samples, 1.50%)</title><rect x="480.3" y="339.0" width="17.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="483.3" y="350.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (26 samples, 1.44%)</title><rect x="481.0" y="323.0" width="17.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="484.0" y="334.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.06%)</title><rect x="482.9" y="307.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="485.9" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="483.6" y="307.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="486.6" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.22%)</title><rect x="484.2" y="307.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="487.2" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.11%)</title><rect x="484.2" y="291.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="487.2" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="485.5" y="291.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="488.5" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.06%)</title><rect x="486.2" y="291.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="489.2" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.06%)</title><rect x="486.2" y="275.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="489.2" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="486.2" y="259.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="489.2" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="486.2" y="243.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="489.2" y="254.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (16 samples, 0.89%)</title><rect x="486.8" y="307.0" width="10.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="489.8" y="318.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.06%)</title><rect x="488.1" y="291.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="491.1" y="302.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.06%)</title><rect x="488.1" y="275.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="491.1" y="286.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (1 samples, 0.06%)</title><rect x="488.8" y="291.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="491.8" y="302.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (9 samples, 0.50%)</title><rect x="489.5" y="291.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="492.5" y="302.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.06%)</title><rect x="490.8" y="275.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="493.8" y="286.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.17%)</title><rect x="491.4" y="275.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="494.4" y="286.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="491.4" y="259.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="494.4" y="270.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="491.4" y="243.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="494.4" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="492.1" y="259.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="495.1" y="270.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="492.7" y="259.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="495.7" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="493.4" y="275.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="496.4" y="286.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.11%)</title><rect x="494.0" y="275.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="497.0" y="286.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.06%)</title><rect x="495.3" y="291.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="498.3" y="302.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.06%)</title><rect x="496.0" y="291.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="499.0" y="302.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.06%)</title><rect x="496.7" y="291.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="499.7" y="302.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.06%)</title><rect x="497.3" y="307.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="500.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (519 samples, 28.77%)</title><rect x="498.0" y="387.0" width="339.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="501.0" y="398.0">rocksdb::MemTable::KeyComparator::operator()(c..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.06%)</title><rect x="505.2" y="371.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="508.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (504 samples, 27.94%)</title><rect x="505.8" y="371.0" width="329.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="508.8" y="382.0">rocksdb::BaseComparatorJniCallback::Compare(r..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="511.0" y="355.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="514.0" y="366.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.06%)</title><rect x="511.7" y="355.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="514.7" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.17%)</title><rect x="512.4" y="355.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="515.4" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="514.3" y="355.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="517.3" y="366.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.11%)</title><rect x="515.0" y="355.0" width="1.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="518.0" y="366.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.06%)</title><rect x="516.3" y="355.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="519.3" y="366.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (3 samples, 0.17%)</title><rect x="516.9" y="355.0" width="2.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="519.9" y="366.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (28 samples, 1.55%)</title><rect x="518.9" y="355.0" width="18.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="521.9" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.55%)</title><rect x="521.5" y="339.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="524.5" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (2 samples, 0.11%)</title><rect x="528.0" y="339.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="531.0" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (12 samples, 0.67%)</title><rect x="529.4" y="339.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="532.4" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.28%)</title><rect x="532.0" y="323.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="535.0" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.17%)</title><rect x="535.2" y="323.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="538.2" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.17%)</title><rect x="535.2" y="307.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="538.2" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.17%)</title><rect x="535.2" y="291.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="538.2" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.11%)</title><rect x="535.9" y="275.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="538.9" y="286.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.06%)</title><rect x="535.9" y="259.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="538.9" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="536.6" y="259.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="539.6" y="270.0"></text>
</g>
<g>
<title>jni_GetEnv (5 samples, 0.28%)</title><rect x="537.2" y="355.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="540.2" y="366.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (1 samples, 0.06%)</title><rect x="540.5" y="355.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="543.5" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_lock (7 samples, 0.39%)</title><rect x="541.1" y="355.0" width="4.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="544.1" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (5 samples, 0.28%)</title><rect x="545.7" y="355.0" width="3.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="548.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (431 samples, 23.89%)</title><rect x="549.0" y="355.0" width="281.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="552.0" y="366.0">rocksdb::BaseComparatorJniCallback::Co..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.06%)</title><rect x="552.9" y="339.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="555.9" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (12 samples, 0.67%)</title><rect x="553.6" y="339.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="556.6" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.17%)</title><rect x="561.4" y="339.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="564.4" y="350.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.11%)</title><rect x="563.4" y="339.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="566.4" y="350.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (97 samples, 5.38%)</title><rect x="564.7" y="339.0" width="63.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="567.7" y="350.0">jni_Cal..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.06%)</title><rect x="569.3" y="323.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="572.3" y="334.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.06%)</title><rect x="569.9" y="323.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="572.9" y="334.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (1 samples, 0.06%)</title><rect x="570.6" y="323.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="573.6" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="571.2" y="323.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="574.2" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.06%)</title><rect x="571.9" y="323.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="574.9" y="334.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.06%)</title><rect x="572.5" y="323.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="575.5" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (9 samples, 0.50%)</title><rect x="573.2" y="323.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="576.2" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="579.1" y="323.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="582.1" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="579.7" y="323.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="582.7" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (15 samples, 0.83%)</title><rect x="580.4" y="323.0" width="9.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="583.4" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="581.0" y="307.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="584.0" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.28%)</title><rect x="581.7" y="307.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="584.7" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.44%)</title><rect x="585.0" y="307.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="588.0" y="318.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.06%)</title><rect x="585.0" y="291.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="588.0" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.33%)</title><rect x="585.6" y="291.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="588.6" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.28%)</title><rect x="586.3" y="275.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="589.3" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.28%)</title><rect x="586.3" y="259.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.3" y="270.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.06%)</title><rect x="586.3" y="243.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="589.3" y="254.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.06%)</title><rect x="586.9" y="243.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="589.9" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.17%)</title><rect x="587.6" y="243.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="590.6" y="254.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.06%)</title><rect x="588.2" y="227.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="591.2" y="238.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="588.9" y="227.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="591.9" y="238.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="588.9" y="211.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="591.9" y="222.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.06%)</title><rect x="589.5" y="291.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="592.5" y="302.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (58 samples, 3.22%)</title><rect x="590.2" y="323.0" width="37.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="593.2" y="334.0">jni..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.11%)</title><rect x="592.2" y="307.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="595.2" y="318.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.06%)</title><rect x="592.8" y="291.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="595.8" y="302.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (4 samples, 0.22%)</title><rect x="593.5" y="307.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="596.5" y="318.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.11%)</title><rect x="594.8" y="291.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="597.8" y="302.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.06%)</title><rect x="596.1" y="307.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="599.1" y="318.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.06%)</title><rect x="596.7" y="307.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="599.7" y="318.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (5 samples, 0.28%)</title><rect x="597.4" y="307.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="600.4" y="318.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_object() (1 samples, 0.06%)</title><rect x="600.0" y="291.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.0" y="302.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (32 samples, 1.77%)</title><rect x="600.7" y="307.0" width="20.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="603.7" y="318.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.06%)</title><rect x="603.9" y="291.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="606.9" y="302.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.06%)</title><rect x="604.6" y="291.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="607.6" y="302.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.11%)</title><rect x="605.2" y="291.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="608.2" y="302.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.06%)</title><rect x="605.9" y="275.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="608.9" y="286.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.06%)</title><rect x="606.5" y="291.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="609.5" y="302.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.06%)</title><rect x="607.2" y="291.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="610.2" y="302.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.22%)</title><rect x="607.8" y="291.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="610.8" y="302.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.06%)</title><rect x="608.5" y="275.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="611.5" y="286.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.11%)</title><rect x="609.2" y="275.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="612.2" y="286.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (5 samples, 0.28%)</title><rect x="610.5" y="291.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="613.5" y="302.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="611.1" y="275.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="614.1" y="286.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="611.1" y="259.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="614.1" y="270.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.06%)</title><rect x="611.8" y="275.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="614.8" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.11%)</title><rect x="612.4" y="275.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="615.4" y="286.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.06%)</title><rect x="613.7" y="291.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="616.7" y="302.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.11%)</title><rect x="614.4" y="291.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="617.4" y="302.0"></text>
</g>
<g>
<title>OrderAccess::fence() (8 samples, 0.44%)</title><rect x="615.7" y="291.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="618.7" y="302.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.06%)</title><rect x="620.9" y="291.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="623.9" y="302.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.06%)</title><rect x="621.6" y="307.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="624.6" y="318.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.11%)</title><rect x="622.2" y="307.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="625.2" y="318.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.06%)</title><rect x="623.5" y="307.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="626.5" y="318.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.06%)</title><rect x="624.2" y="307.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="627.2" y="318.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.11%)</title><rect x="624.9" y="307.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="627.9" y="318.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.17%)</title><rect x="626.2" y="307.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="629.2" y="318.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::decode&lt;oopDesc*&gt;(AccessInternal::EncodedType&lt;1097844ull, oopDesc*&gt;::type) (2 samples, 0.11%)</title><rect x="626.2" y="291.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="629.2" y="302.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.06%)</title><rect x="627.5" y="291.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="630.5" y="302.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.06%)</title><rect x="627.5" y="275.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="630.5" y="286.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.17%)</title><rect x="628.1" y="339.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="631.1" y="350.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (64 samples, 3.55%)</title><rect x="630.1" y="339.0" width="41.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="633.1" y="350.0">jni..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.11%)</title><rect x="633.4" y="323.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="636.4" y="334.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.11%)</title><rect x="633.4" y="307.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="636.4" y="318.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.11%)</title><rect x="634.7" y="323.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="637.7" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (14 samples, 0.78%)</title><rect x="636.0" y="323.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="639.0" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="645.1" y="323.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="648.1" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (36 samples, 2.00%)</title><rect x="645.8" y="323.0" width="23.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="648.8" y="334.0">T..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="645.8" y="307.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="648.8" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (17 samples, 0.94%)</title><rect x="646.4" y="307.0" width="11.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="649.4" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (18 samples, 1.00%)</title><rect x="657.6" y="307.0" width="11.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="660.6" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (14 samples, 0.78%)</title><rect x="658.2" y="291.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="661.2" y="302.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (2 samples, 0.11%)</title><rect x="659.5" y="275.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="662.5" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (10 samples, 0.55%)</title><rect x="660.8" y="275.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="663.8" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (8 samples, 0.44%)</title><rect x="660.8" y="259.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.8" y="270.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.06%)</title><rect x="660.8" y="243.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="663.8" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (7 samples, 0.39%)</title><rect x="661.5" y="243.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="664.5" y="254.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.06%)</title><rect x="663.4" y="227.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="666.4" y="238.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.06%)</title><rect x="664.1" y="227.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="667.1" y="238.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.11%)</title><rect x="664.8" y="227.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="667.8" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="664.8" y="211.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="667.8" y="222.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="665.4" y="211.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="668.4" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (2 samples, 0.11%)</title><rect x="666.1" y="259.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="669.1" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.06%)</title><rect x="667.4" y="291.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="670.4" y="302.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.06%)</title><rect x="668.0" y="291.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="671.0" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="668.7" y="291.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="671.7" y="302.0"></text>
</g>
<g>
<title>os::is_MP() (4 samples, 0.22%)</title><rect x="669.3" y="323.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="672.3" y="334.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (1 samples, 0.06%)</title><rect x="672.0" y="339.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="675.0" y="350.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::DirectComparatorJniCallback::~DirectComparatorJniCallback() (242 samples, 13.41%)</title><rect x="672.6" y="339.0" width="158.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="675.6" y="350.0">non-virtual thunk to..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.11%)</title><rect x="674.6" y="323.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="677.6" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.33%)</title><rect x="675.9" y="323.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="678.9" y="334.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (3 samples, 0.17%)</title><rect x="679.8" y="323.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="682.8" y="334.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.06%)</title><rect x="681.8" y="323.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="684.8" y="334.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (227 samples, 12.58%)</title><rect x="682.4" y="323.0" width="148.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="685.4" y="334.0">jni_CallVoidMethodV</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.06%)</title><rect x="693.5" y="307.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="696.5" y="318.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (2 samples, 0.11%)</title><rect x="694.2" y="307.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="697.2" y="318.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.06%)</title><rect x="695.5" y="307.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="698.5" y="318.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.06%)</title><rect x="696.2" y="307.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="699.2" y="318.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="696.8" y="307.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="699.8" y="318.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (2 samples, 0.11%)</title><rect x="697.5" y="307.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="700.5" y="318.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.06%)</title><rect x="698.8" y="307.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="701.8" y="318.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.06%)</title><rect x="699.4" y="307.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="702.4" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (13 samples, 0.72%)</title><rect x="700.1" y="307.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="703.1" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="708.6" y="307.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="711.6" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="709.2" y="307.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="712.2" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (20 samples, 1.11%)</title><rect x="709.9" y="307.0" width="13.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="712.9" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.55%)</title><rect x="710.5" y="291.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="713.5" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (9 samples, 0.50%)</title><rect x="717.1" y="291.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="720.1" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (8 samples, 0.44%)</title><rect x="717.1" y="275.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="720.1" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.44%)</title><rect x="717.1" y="259.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="720.1" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (8 samples, 0.44%)</title><rect x="717.1" y="243.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="720.1" y="254.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="717.1" y="227.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="720.1" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (7 samples, 0.39%)</title><rect x="717.7" y="227.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="720.7" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="720.4" y="211.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="723.4" y="222.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.06%)</title><rect x="721.0" y="211.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="724.0" y="222.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="721.7" y="211.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="724.7" y="222.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="721.7" y="195.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="724.7" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.06%)</title><rect x="722.3" y="275.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="725.3" y="286.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.06%)</title><rect x="723.0" y="307.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="726.0" y="318.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (155 samples, 8.59%)</title><rect x="723.6" y="307.0" width="101.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="726.6" y="318.0">jni_invoke_n..</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.11%)</title><rect x="734.1" y="291.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="737.1" y="302.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.11%)</title><rect x="735.4" y="291.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="738.4" y="302.0"></text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (2 samples, 0.11%)</title><rect x="736.7" y="291.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="739.7" y="302.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (5 samples, 0.28%)</title><rect x="738.0" y="291.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="741.0" y="302.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.11%)</title><rect x="740.0" y="275.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="743.0" y="286.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.06%)</title><rect x="740.6" y="259.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="743.6" y="270.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (4 samples, 0.22%)</title><rect x="741.3" y="291.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="744.3" y="302.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (4 samples, 0.22%)</title><rect x="743.9" y="291.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="746.9" y="302.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.11%)</title><rect x="746.5" y="291.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="749.5" y="302.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (1 samples, 0.06%)</title><rect x="747.8" y="291.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="750.8" y="302.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_long() (3 samples, 0.17%)</title><rect x="748.5" y="291.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="751.5" y="302.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (7 samples, 0.39%)</title><rect x="750.4" y="291.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="753.4" y="302.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_bool() (1 samples, 0.06%)</title><rect x="752.4" y="275.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="755.4" y="286.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::get_long() (3 samples, 0.17%)</title><rect x="753.1" y="275.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="756.1" y="286.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (5 samples, 0.28%)</title><rect x="755.0" y="291.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="758.0" y="302.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.06%)</title><rect x="758.3" y="291.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="761.3" y="302.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.06%)</title><rect x="758.9" y="291.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="761.9" y="302.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (79 samples, 4.38%)</title><rect x="759.6" y="291.0" width="51.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="762.6" y="302.0">JavaC..</text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.06%)</title><rect x="766.1" y="275.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="769.1" y="286.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.11%)</title><rect x="766.8" y="275.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="769.8" y="286.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.06%)</title><rect x="767.5" y="259.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="770.5" y="270.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (2 samples, 0.11%)</title><rect x="768.1" y="275.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="771.1" y="286.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (3 samples, 0.17%)</title><rect x="769.4" y="275.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="772.4" y="286.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (3 samples, 0.17%)</title><rect x="771.4" y="275.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="774.4" y="286.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.06%)</title><rect x="773.3" y="275.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="776.3" y="286.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.22%)</title><rect x="774.0" y="275.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="777.0" y="286.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (32 samples, 1.77%)</title><rect x="776.6" y="275.0" width="20.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="779.6" y="286.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="781.8" y="259.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="784.8" y="270.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="781.8" y="243.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="784.8" y="254.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (11 samples, 0.61%)</title><rect x="782.5" y="259.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="785.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.06%)</title><rect x="789.7" y="259.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="792.7" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.33%)</title><rect x="790.3" y="259.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="793.3" y="270.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (4 samples, 0.22%)</title><rect x="794.3" y="259.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="797.3" y="270.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="796.9" y="259.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="799.9" y="270.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (3 samples, 0.17%)</title><rect x="797.5" y="275.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="800.5" y="286.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.11%)</title><rect x="799.5" y="275.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="802.5" y="286.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.28%)</title><rect x="800.8" y="275.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="803.8" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.22%)</title><rect x="804.1" y="275.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="807.1" y="286.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (7 samples, 0.39%)</title><rect x="806.7" y="275.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="809.7" y="286.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.11%)</title><rect x="809.3" y="259.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="812.3" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.06%)</title><rect x="810.6" y="259.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="813.6" y="270.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.06%)</title><rect x="811.3" y="291.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="814.3" y="302.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (2 samples, 0.11%)</title><rect x="811.9" y="291.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="814.9" y="302.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.06%)</title><rect x="813.2" y="291.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="816.2" y="302.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (9 samples, 0.50%)</title><rect x="813.9" y="291.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="816.9" y="302.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.11%)</title><rect x="819.8" y="291.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="822.8" y="302.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (4 samples, 0.22%)</title><rect x="821.1" y="291.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="824.1" y="302.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (2 samples, 0.11%)</title><rect x="822.4" y="275.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="825.4" y="286.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.06%)</title><rect x="823.0" y="259.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="826.0" y="270.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.06%)</title><rect x="823.7" y="291.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="826.7" y="302.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.06%)</title><rect x="824.4" y="291.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="827.4" y="302.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (5 samples, 0.28%)</title><rect x="825.0" y="307.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="828.0" y="318.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.11%)</title><rect x="828.3" y="307.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="831.3" y="318.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.11%)</title><rect x="829.6" y="307.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="832.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (7 samples, 0.39%)</title><rect x="830.9" y="355.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="833.9" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.06%)</title><rect x="831.6" y="339.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="834.6" y="350.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.06%)</title><rect x="832.2" y="339.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="835.2" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.06%)</title><rect x="832.9" y="339.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="835.9" y="350.0"></text>
</g>
<g>
<title>jni_GetEnv (3 samples, 0.17%)</title><rect x="833.5" y="339.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="836.5" y="350.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version(int) (1 samples, 0.06%)</title><rect x="834.8" y="323.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="837.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.06%)</title><rect x="835.5" y="371.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="838.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.06%)</title><rect x="836.1" y="371.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.1" y="382.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.06%)</title><rect x="836.8" y="371.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="839.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (2 samples, 0.11%)</title><rect x="837.4" y="419.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="840.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.06%)</title><rect x="838.7" y="419.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="841.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.06%)</title><rect x="839.4" y="419.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="842.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.06%)</title><rect x="840.1" y="467.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="843.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.17%)</title><rect x="840.7" y="483.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="843.7" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (2 samples, 0.11%)</title><rect x="842.7" y="483.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="845.7" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.11%)</title><rect x="842.7" y="467.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="845.7" y="478.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.17%)</title><rect x="844.0" y="483.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="847.0" y="494.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.11%)</title><rect x="845.9" y="483.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="848.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.06%)</title><rect x="846.6" y="467.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="849.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.11%)</title><rect x="847.3" y="499.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="850.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.06%)</title><rect x="848.6" y="515.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="851.6" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.06%)</title><rect x="849.2" y="515.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="852.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.06%)</title><rect x="849.2" y="499.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="852.2" y="510.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.06%)</title><rect x="849.2" y="483.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="852.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (14 samples, 0.78%)</title><rect x="849.9" y="515.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="852.9" y="526.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="849.9" y="499.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="852.9" y="510.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.11%)</title><rect x="850.5" y="499.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="853.5" y="510.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (9 samples, 0.50%)</title><rect x="851.8" y="499.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="854.8" y="510.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.39%)</title><rect x="853.1" y="483.0" width="4.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="856.1" y="494.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.39%)</title><rect x="853.1" y="467.0" width="4.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="856.1" y="478.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.39%)</title><rect x="853.1" y="451.0" width="4.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="856.1" y="462.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.33%)</title><rect x="853.8" y="435.0" width="3.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="856.8" y="446.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.33%)</title><rect x="853.8" y="419.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="856.8" y="430.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.22%)</title><rect x="855.1" y="403.0" width="2.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="858.1" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.11%)</title><rect x="857.7" y="499.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="860.7" y="510.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.06%)</title><rect x="858.4" y="483.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="861.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (9 samples, 0.50%)</title><rect x="859.0" y="515.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.0" y="526.0"></text>
</g>
<g>
<title>free (6 samples, 0.33%)</title><rect x="859.0" y="499.0" width="3.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="862.0" y="510.0"></text>
</g>
<g>
<title>szone_size (4 samples, 0.22%)</title><rect x="859.0" y="483.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="862.0" y="494.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.22%)</title><rect x="859.0" y="467.0" width="2.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="862.0" y="478.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.11%)</title><rect x="861.6" y="483.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="864.6" y="494.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.06%)</title><rect x="862.9" y="499.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="865.9" y="510.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.11%)</title><rect x="863.6" y="499.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="866.6" y="510.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.06%)</title><rect x="864.9" y="515.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="867.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.06%)</title><rect x="865.6" y="531.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="868.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.06%)</title><rect x="866.2" y="531.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="869.2" y="542.0"></text>
</g>
<g>
<title>call_stub (9 samples, 0.50%)</title><rect x="866.9" y="595.0" width="5.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="869.9" y="606.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (28 samples, 1.55%)</title><rect x="872.8" y="595.0" width="18.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="875.8" y="606.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (349 samples, 19.35%)</title><rect x="891.1" y="595.0" width="228.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="894.1" y="606.0">org/rocksdb/util/BytewiseCompa..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (349 samples, 19.35%)</title><rect x="891.1" y="579.0" width="228.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="894.1" y="590.0">org/rocksdb/util/BytewiseCompa..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (336 samples, 18.63%)</title><rect x="891.1" y="563.0" width="219.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="894.1" y="574.0">org/rocksdb/AbstractSlice.data</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (14 samples, 0.78%)</title><rect x="891.1" y="547.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="894.1" y="558.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (322 samples, 17.85%)</title><rect x="900.2" y="547.0" width="210.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="903.2" y="558.0">org/rocksdb/Slice.data0</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (319 samples, 17.68%)</title><rect x="902.2" y="531.0" width="208.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="905.2" y="542.0">org/rocksdb/Slice.data0</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (296 samples, 16.41%)</title><rect x="911.4" y="515.0" width="193.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="914.4" y="526.0">Java_org_rocksdb_Slice_da..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.06%)</title><rect x="914.6" y="499.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.6" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.11%)</title><rect x="915.3" y="499.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="918.3" y="510.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.06%)</title><rect x="916.6" y="499.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="919.6" y="510.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.22%)</title><rect x="917.2" y="499.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.2" y="510.0"></text>
</g>
<g>
<title>OrderAccess::fence() (25 samples, 1.39%)</title><rect x="919.9" y="499.0" width="16.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="922.9" y="510.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.11%)</title><rect x="936.2" y="499.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.2" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="937.5" y="499.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="940.5" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.11%)</title><rect x="938.2" y="499.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.2" y="510.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (3 samples, 0.17%)</title><rect x="939.5" y="499.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="942.5" y="510.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.06%)</title><rect x="941.4" y="499.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="944.4" y="510.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (60 samples, 3.33%)</title><rect x="942.1" y="499.0" width="39.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="945.1" y="510.0">jni..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.11%)</title><rect x="942.7" y="483.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="945.7" y="494.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="943.4" y="467.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.4" y="478.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.06%)</title><rect x="944.1" y="483.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="947.1" y="494.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.06%)</title><rect x="944.7" y="483.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.7" y="494.0"></text>
</g>
<g>
<title>OrderAccess::fence() (12 samples, 0.67%)</title><rect x="945.4" y="483.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="948.4" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.11%)</title><rect x="953.2" y="483.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="956.2" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (39 samples, 2.16%)</title><rect x="954.5" y="483.0" width="25.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="957.5" y="494.0">T..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.06%)</title><rect x="955.8" y="467.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="958.8" y="478.0"></text>
</g>
<g>
<title>OrderAccess::fence() (13 samples, 0.72%)</title><rect x="956.5" y="467.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="959.5" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="965.0" y="467.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="968.0" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.06%)</title><rect x="965.0" y="451.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="968.0" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (21 samples, 1.16%)</title><rect x="965.6" y="467.0" width="13.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="968.6" y="478.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.06%)</title><rect x="966.3" y="451.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="969.3" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (17 samples, 0.94%)</title><rect x="967.0" y="451.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="970.0" y="462.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.11%)</title><rect x="967.0" y="435.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.0" y="446.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.06%)</title><rect x="968.3" y="435.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="971.3" y="446.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (14 samples, 0.78%)</title><rect x="968.9" y="435.0" width="9.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="971.9" y="446.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (14 samples, 0.78%)</title><rect x="968.9" y="419.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.9" y="430.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (2 samples, 0.11%)</title><rect x="969.6" y="403.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.6" y="414.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.11%)</title><rect x="970.9" y="403.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="973.9" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (9 samples, 0.50%)</title><rect x="972.2" y="403.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="975.2" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.11%)</title><rect x="972.8" y="387.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="975.8" y="398.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (3 samples, 0.17%)</title><rect x="974.1" y="387.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="977.1" y="398.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.11%)</title><rect x="976.1" y="387.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.1" y="398.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.06%)</title><rect x="977.4" y="387.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.4" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="977.4" y="371.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="980.4" y="382.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.06%)</title><rect x="978.1" y="451.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.1" y="462.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.06%)</title><rect x="978.7" y="451.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="981.7" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.06%)</title><rect x="979.4" y="467.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="982.4" y="478.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.11%)</title><rect x="980.0" y="483.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.0" y="494.0"></text>
</g>
<g>
<title>jni_NewByteArray (130 samples, 7.21%)</title><rect x="981.3" y="499.0" width="85.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="984.3" y="510.0">jni_NewByt..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.11%)</title><rect x="989.2" y="483.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.2" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.17%)</title><rect x="990.5" y="483.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.5" y="494.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.17%)</title><rect x="992.5" y="483.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.5" y="494.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="993.8" y="467.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="996.8" y="478.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (5 samples, 0.28%)</title><rect x="994.4" y="483.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="997.4" y="494.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.06%)</title><rect x="997.0" y="467.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1000.0" y="478.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.06%)</title><rect x="997.7" y="483.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.7" y="494.0"></text>
</g>
<g>
<title>OrderAccess::fence() (18 samples, 1.00%)</title><rect x="998.3" y="483.0" width="11.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1001.3" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.06%)</title><rect x="1010.1" y="483.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1013.1" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="1010.8" y="483.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1013.8" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (38 samples, 2.11%)</title><rect x="1011.4" y="483.0" width="24.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.4" y="494.0">T..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.17%)</title><rect x="1011.4" y="467.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1014.4" y="478.0"></text>
</g>
<g>
<title>OrderAccess::fence() (13 samples, 0.72%)</title><rect x="1013.4" y="467.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.4" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="1021.9" y="467.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.9" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (21 samples, 1.16%)</title><rect x="1022.5" y="467.0" width="13.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1025.5" y="478.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.06%)</title><rect x="1023.9" y="451.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.9" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (17 samples, 0.94%)</title><rect x="1024.5" y="451.0" width="11.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1027.5" y="462.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.11%)</title><rect x="1025.8" y="435.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.8" y="446.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (2 samples, 0.11%)</title><rect x="1027.1" y="435.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.1" y="446.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (11 samples, 0.61%)</title><rect x="1028.4" y="435.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1031.4" y="446.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (9 samples, 0.50%)</title><rect x="1029.7" y="419.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1032.7" y="430.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.06%)</title><rect x="1029.7" y="403.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.7" y="414.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (2 samples, 0.11%)</title><rect x="1030.4" y="403.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1033.4" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (6 samples, 0.33%)</title><rect x="1031.7" y="403.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.7" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="1033.7" y="387.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.7" y="398.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.11%)</title><rect x="1034.3" y="387.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.3" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="1034.3" y="371.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1037.3" y="382.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="1035.0" y="371.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.0" y="382.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.06%)</title><rect x="1035.6" y="451.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1038.6" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (43 samples, 2.38%)</title><rect x="1036.3" y="483.0" width="28.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1039.3" y="494.0">Ty..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (38 samples, 2.11%)</title><rect x="1038.9" y="467.0" width="24.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1041.9" y="478.0">C..</text>
</g>
<g>
<title>MemAllocator::Allocation::check_out_of_memory() (2 samples, 0.11%)</title><rect x="1039.6" y="451.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.6" y="462.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.11%)</title><rect x="1040.9" y="451.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1043.9" y="462.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.06%)</title><rect x="1042.2" y="451.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1045.2" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (30 samples, 1.66%)</title><rect x="1042.8" y="451.0" width="19.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.8" y="462.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::check_out_of_memory() (3 samples, 0.17%)</title><rect x="1044.8" y="435.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.8" y="446.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (4 samples, 0.22%)</title><rect x="1046.8" y="435.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1049.8" y="446.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_dtrace_sampler() (1 samples, 0.06%)</title><rect x="1047.4" y="419.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.4" y="430.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jfr_sampler() (1 samples, 0.06%)</title><rect x="1048.1" y="419.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.1" y="430.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.06%)</title><rect x="1048.7" y="419.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.7" y="430.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_dtrace_sampler() (3 samples, 0.17%)</title><rect x="1049.4" y="435.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.4" y="446.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jfr_sampler() (2 samples, 0.11%)</title><rect x="1051.3" y="435.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.3" y="446.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.06%)</title><rect x="1052.6" y="435.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.6" y="446.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.06%)</title><rect x="1052.6" y="419.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.6" y="430.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.06%)</title><rect x="1053.3" y="435.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.3" y="446.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (2 samples, 0.11%)</title><rect x="1053.9" y="435.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1056.9" y="446.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.22%)</title><rect x="1055.3" y="435.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.3" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab(MemAllocator::Allocation&amp;) const (1 samples, 0.06%)</title><rect x="1056.6" y="419.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1059.6" y="430.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.06%)</title><rect x="1057.2" y="419.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.2" y="430.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (6 samples, 0.33%)</title><rect x="1057.9" y="435.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.9" y="446.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (6 samples, 0.33%)</title><rect x="1057.9" y="419.0" width="3.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1060.9" y="430.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.06%)</title><rect x="1061.8" y="435.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1064.8" y="446.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.06%)</title><rect x="1062.5" y="451.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.5" y="462.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.06%)</title><rect x="1063.1" y="451.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1066.1" y="462.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (1 samples, 0.06%)</title><rect x="1063.8" y="467.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.8" y="478.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.11%)</title><rect x="1064.4" y="483.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1067.4" y="494.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="1065.7" y="483.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.7" y="494.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (59 samples, 3.27%)</title><rect x="1066.4" y="499.0" width="38.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1069.4" y="510.0">jni..</text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (1 samples, 0.06%)</title><rect x="1071.0" y="483.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.0" y="494.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.06%)</title><rect x="1071.6" y="483.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.6" y="494.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.11%)</title><rect x="1072.3" y="483.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1075.3" y="494.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="1072.9" y="467.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.9" y="478.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.06%)</title><rect x="1073.6" y="483.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.6" y="494.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.06%)</title><rect x="1074.2" y="483.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.2" y="494.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.55%)</title><rect x="1074.9" y="483.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.9" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.06%)</title><rect x="1081.4" y="483.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.4" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (24 samples, 1.33%)</title><rect x="1082.1" y="483.0" width="15.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.1" y="494.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.11%)</title><rect x="1082.7" y="467.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.7" y="478.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.28%)</title><rect x="1084.0" y="467.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1087.0" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.06%)</title><rect x="1087.3" y="467.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1090.3" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (13 samples, 0.72%)</title><rect x="1088.0" y="467.0" width="8.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1091.0" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (12 samples, 0.67%)</title><rect x="1088.6" y="451.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.6" y="462.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.11%)</title><rect x="1088.6" y="435.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.6" y="446.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.06%)</title><rect x="1089.9" y="435.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.9" y="446.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (9 samples, 0.50%)</title><rect x="1090.6" y="435.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.6" y="446.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (9 samples, 0.50%)</title><rect x="1090.6" y="419.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.6" y="430.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.06%)</title><rect x="1090.6" y="403.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.6" y="414.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.06%)</title><rect x="1091.2" y="403.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.2" y="414.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.17%)</title><rect x="1091.9" y="403.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.9" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.22%)</title><rect x="1093.8" y="403.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.8" y="414.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.06%)</title><rect x="1094.5" y="387.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.5" y="398.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.11%)</title><rect x="1095.2" y="387.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.2" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.06%)</title><rect x="1095.8" y="371.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.8" y="382.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.06%)</title><rect x="1096.5" y="467.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.5" y="478.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.06%)</title><rect x="1097.1" y="467.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.1" y="478.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.28%)</title><rect x="1097.8" y="483.0" width="3.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1100.8" y="494.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.06%)</title><rect x="1101.0" y="483.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.0" y="494.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (5 samples, 0.28%)</title><rect x="1101.7" y="483.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.7" y="494.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (1 samples, 0.06%)</title><rect x="1103.0" y="467.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.0" y="478.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (2 samples, 0.11%)</title><rect x="1103.7" y="467.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.7" y="478.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.06%)</title><rect x="1104.3" y="451.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.3" y="462.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.06%)</title><rect x="1105.0" y="515.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1108.0" y="526.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.44%)</title><rect x="1105.6" y="515.0" width="5.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1108.6" y="526.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (13 samples, 0.72%)</title><rect x="1110.9" y="563.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1113.9" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 0.67%)</title><rect x="1110.9" y="547.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1113.9" y="558.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 0.61%)</title><rect x="1110.9" y="531.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1113.9" y="542.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (2 samples, 0.11%)</title><rect x="1116.7" y="515.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1119.7" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.06%)</title><rect x="1118.0" y="531.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1121.0" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.06%)</title><rect x="1118.0" y="515.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1121.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.06%)</title><rect x="1118.7" y="547.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1121.7" y="558.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (1 samples, 0.06%)</title><rect x="1118.7" y="531.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1121.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.toArray (2 samples, 0.11%)</title><rect x="1119.4" y="627.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1122.4" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.11%)</title><rect x="1119.4" y="611.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1122.4" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.11%)</title><rect x="1119.4" y="595.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1122.4" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="1120.0" y="579.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1123.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (4 samples, 0.22%)</title><rect x="1120.7" y="691.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1123.7" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.17%)</title><rect x="1121.3" y="675.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1124.3" y="686.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.11%)</title><rect x="1123.3" y="691.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.11%)</title><rect x="1123.3" y="675.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1126.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.11%)</title><rect x="1123.3" y="659.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1126.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.06%)</title><rect x="1123.9" y="643.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1126.9" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="1123.9" y="627.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1126.9" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.06%)</title><rect x="1124.6" y="691.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1127.6" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.06%)</title><rect x="1124.6" y="675.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1127.6" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (13 samples, 0.72%)</title><rect x="1125.2" y="723.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1128.2" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.17%)</title><rect x="1126.6" y="707.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1129.6" y="718.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.06%)</title><rect x="1127.9" y="691.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1130.9" y="702.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.06%)</title><rect x="1127.9" y="675.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1130.9" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.06%)</title><rect x="1127.9" y="659.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1130.9" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.17%)</title><rect x="1128.5" y="707.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1131.5" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.17%)</title><rect x="1128.5" y="691.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1131.5" y="702.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.11%)</title><rect x="1129.2" y="675.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1132.2" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.11%)</title><rect x="1129.2" y="659.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1132.2" y="670.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.11%)</title><rect x="1129.2" y="643.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1132.2" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.28%)</title><rect x="1130.5" y="707.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1133.5" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.17%)</title><rect x="1133.7" y="723.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1136.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.06%)</title><rect x="1134.4" y="707.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1137.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.06%)</title><rect x="1134.4" y="691.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1137.4" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.06%)</title><rect x="1135.1" y="707.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1138.1" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.06%)</title><rect x="1135.1" y="691.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1138.1" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="1135.1" y="675.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1138.1" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.28%)</title><rect x="1135.7" y="723.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1138.7" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.28%)</title><rect x="1135.7" y="707.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1138.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.17%)</title><rect x="1137.0" y="691.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1140.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.17%)</title><rect x="1137.0" y="675.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1140.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.17%)</title><rect x="1137.0" y="659.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1140.0" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (68 samples, 3.77%)</title><rect x="1139.0" y="739.0" width="44.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1142.0" y="750.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (68 samples, 3.77%)</title><rect x="1139.0" y="723.0" width="44.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1142.0" y="734.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.33%)</title><rect x="1139.6" y="707.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1142.6" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.33%)</title><rect x="1139.6" y="691.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1142.6" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.33%)</title><rect x="1139.6" y="675.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1142.6" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.28%)</title><rect x="1140.3" y="659.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1143.3" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.06%)</title><rect x="1142.3" y="643.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1145.3" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.06%)</title><rect x="1142.3" y="627.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1145.3" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.06%)</title><rect x="1142.9" y="643.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1145.9" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.06%)</title><rect x="1142.9" y="627.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1145.9" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (61 samples, 3.38%)</title><rect x="1143.6" y="707.0" width="39.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1146.6" y="718.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.22%)</title><rect x="1145.5" y="691.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1148.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.22%)</title><rect x="1145.5" y="675.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1148.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.22%)</title><rect x="1145.5" y="659.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1148.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.22%)</title><rect x="1145.5" y="643.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1148.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.22%)</title><rect x="1145.5" y="627.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1148.5" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.22%)</title><rect x="1145.5" y="611.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.5" y="622.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.06%)</title><rect x="1145.5" y="595.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1148.5" y="606.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.17%)</title><rect x="1146.2" y="595.0" width="1.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1149.2" y="606.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.11%)</title><rect x="1146.8" y="579.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1149.8" y="590.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.06%)</title><rect x="1147.5" y="563.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1150.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (54 samples, 2.99%)</title><rect x="1148.1" y="691.0" width="35.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1151.1" y="702.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (54 samples, 2.99%)</title><rect x="1148.1" y="675.0" width="35.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1151.1" y="686.0">sun..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (8 samples, 0.44%)</title><rect x="1148.1" y="659.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1151.1" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (8 samples, 0.44%)</title><rect x="1148.1" y="643.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1151.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (8 samples, 0.44%)</title><rect x="1148.1" y="627.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1151.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (8 samples, 0.44%)</title><rect x="1148.1" y="611.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1151.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.11%)</title><rect x="1150.8" y="595.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1153.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.11%)</title><rect x="1150.8" y="579.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1153.8" y="590.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.06%)</title><rect x="1151.4" y="563.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1154.4" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (2 samples, 0.11%)</title><rect x="1152.1" y="595.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1155.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (46 samples, 2.55%)</title><rect x="1153.4" y="659.0" width="30.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1156.4" y="670.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (46 samples, 2.55%)</title><rect x="1153.4" y="643.0" width="30.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1156.4" y="654.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (46 samples, 2.55%)</title><rect x="1153.4" y="627.0" width="30.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1156.4" y="638.0">su..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.06%)</title><rect x="1155.3" y="611.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1158.3" y="622.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.11%)</title><rect x="1156.0" y="611.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1159.0" y="622.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.06%)</title><rect x="1156.6" y="595.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1159.6" y="606.0"></text>
</g>
<g>
<title>rpc_errlist (40 samples, 2.22%)</title><rect x="1157.3" y="611.0" width="26.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1160.3" y="622.0">r..</text>
</g>
<g>
<title>[RMI TCP Connection(25)-127.0.0.1 tid=30243] (10 samples, 0.55%)</title><rect x="1183.5" y="803.0" width="6.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1186.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (10 samples, 0.55%)</title><rect x="1183.5" y="787.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1186.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (10 samples, 0.55%)</title><rect x="1183.5" y="771.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1186.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (10 samples, 0.55%)</title><rect x="1183.5" y="755.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1186.5" y="766.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (10 samples, 0.55%)</title><rect x="1183.5" y="739.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1186.5" y="750.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (10 samples, 0.55%)</title><rect x="1183.5" y="723.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1186.5" y="734.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$97/249391321.run (10 samples, 0.55%)</title><rect x="1183.5" y="707.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1186.5" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (10 samples, 0.55%)</title><rect x="1183.5" y="691.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1186.5" y="702.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (10 samples, 0.55%)</title><rect x="1183.5" y="675.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1186.5" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (10 samples, 0.55%)</title><rect x="1183.5" y="659.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1186.5" y="670.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (2 samples, 0.11%)</title><rect x="1184.8" y="643.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1187.8" y="654.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (2 samples, 0.11%)</title><rect x="1184.8" y="627.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1187.8" y="638.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (2 samples, 0.11%)</title><rect x="1184.8" y="611.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1187.8" y="622.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (2 samples, 0.11%)</title><rect x="1184.8" y="595.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1187.8" y="606.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (2 samples, 0.11%)</title><rect x="1184.8" y="579.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1187.8" y="590.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead (2 samples, 0.11%)</title><rect x="1184.8" y="563.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1187.8" y="574.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead0 (2 samples, 0.11%)</title><rect x="1184.8" y="547.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1187.8" y="558.0"></text>
</g>
<g>
<title>Java_java_net_SocketInputStream_socketRead0 (1 samples, 0.06%)</title><rect x="1185.4" y="531.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1188.4" y="542.0"></text>
</g>
<g>
<title>recvfrom (1 samples, 0.06%)</title><rect x="1185.4" y="515.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1188.4" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (6 samples, 0.33%)</title><rect x="1186.1" y="643.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1189.1" y="654.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (6 samples, 0.33%)</title><rect x="1186.1" y="627.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1189.1" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (6 samples, 0.33%)</title><rect x="1186.1" y="611.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1189.1" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (6 samples, 0.33%)</title><rect x="1186.1" y="595.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1189.1" y="606.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (6 samples, 0.33%)</title><rect x="1186.1" y="579.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1189.1" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readLong (1 samples, 0.06%)</title><rect x="1186.1" y="563.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1189.1" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readLong (1 samples, 0.06%)</title><rect x="1186.1" y="547.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1189.1" y="558.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readLong (1 samples, 0.06%)</title><rect x="1186.1" y="531.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1189.1" y="542.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor31.invoke (1 samples, 0.06%)</title><rect x="1186.1" y="515.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1189.1" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (4 samples, 0.22%)</title><rect x="1186.7" y="563.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1189.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (4 samples, 0.22%)</title><rect x="1186.7" y="547.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1189.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (3 samples, 0.17%)</title><rect x="1186.7" y="531.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1189.7" y="542.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (3 samples, 0.17%)</title><rect x="1186.7" y="515.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1189.7" y="526.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (3 samples, 0.17%)</title><rect x="1186.7" y="499.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1189.7" y="510.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (3 samples, 0.17%)</title><rect x="1186.7" y="483.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1189.7" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (3 samples, 0.17%)</title><rect x="1186.7" y="467.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1189.7" y="478.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (3 samples, 0.17%)</title><rect x="1186.7" y="451.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1189.7" y="462.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (3 samples, 0.17%)</title><rect x="1186.7" y="435.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1189.7" y="446.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (3 samples, 0.17%)</title><rect x="1186.7" y="419.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1189.7" y="430.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (3 samples, 0.17%)</title><rect x="1186.7" y="403.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1189.7" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (3 samples, 0.17%)</title><rect x="1186.7" y="387.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1189.7" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (3 samples, 0.17%)</title><rect x="1186.7" y="371.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1189.7" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (3 samples, 0.17%)</title><rect x="1186.7" y="355.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1189.7" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (3 samples, 0.17%)</title><rect x="1186.7" y="339.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1189.7" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (3 samples, 0.17%)</title><rect x="1186.7" y="323.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1189.7" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (3 samples, 0.17%)</title><rect x="1186.7" y="307.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1189.7" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (3 samples, 0.17%)</title><rect x="1186.7" y="291.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1189.7" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (3 samples, 0.17%)</title><rect x="1186.7" y="275.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1189.7" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (3 samples, 0.17%)</title><rect x="1186.7" y="259.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1189.7" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (3 samples, 0.17%)</title><rect x="1186.7" y="243.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1189.7" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.11%)</title><rect x="1186.7" y="227.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1189.7" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (2 samples, 0.11%)</title><rect x="1186.7" y="211.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1189.7" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.11%)</title><rect x="1186.7" y="195.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1189.7" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (2 samples, 0.11%)</title><rect x="1186.7" y="179.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1189.7" y="190.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (2 samples, 0.11%)</title><rect x="1186.7" y="163.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1189.7" y="174.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1186.7" y="147.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1189.7" y="158.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (1 samples, 0.06%)</title><rect x="1186.7" y="131.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1189.7" y="142.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.06%)</title><rect x="1186.7" y="115.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1189.7" y="126.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (1 samples, 0.06%)</title><rect x="1186.7" y="99.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1189.7" y="110.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.contains (1 samples, 0.06%)</title><rect x="1186.7" y="83.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1189.7" y="94.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.06%)</title><rect x="1186.7" y="67.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1189.7" y="78.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.06%)</title><rect x="1186.7" y="51.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1189.7" y="62.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.06%)</title><rect x="1186.7" y="35.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1189.7" y="46.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (1 samples, 0.06%)</title><rect x="1187.4" y="147.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1190.4" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.06%)</title><rect x="1187.4" y="131.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1190.4" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.06%)</title><rect x="1187.4" y="115.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1190.4" y="126.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1188.0" y="227.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1191.0" y="238.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1188.0" y="211.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1191.0" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.06%)</title><rect x="1188.0" y="195.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1191.0" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.06%)</title><rect x="1188.0" y="179.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1191.0" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.06%)</title><rect x="1188.0" y="163.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1191.0" y="174.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.06%)</title><rect x="1188.0" y="147.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1191.0" y="158.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.06%)</title><rect x="1188.0" y="131.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1191.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.06%)</title><rect x="1188.0" y="115.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1191.0" y="126.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor38.invoke (1 samples, 0.06%)</title><rect x="1188.7" y="531.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1191.7" y="542.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getAttributes (1 samples, 0.06%)</title><rect x="1188.7" y="515.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1191.7" y="526.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1 samples, 0.06%)</title><rect x="1188.7" y="499.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1191.7" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.06%)</title><rect x="1188.7" y="483.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.7" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.06%)</title><rect x="1188.7" y="467.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.7" y="478.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.06%)</title><rect x="1188.7" y="451.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1191.7" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (1 samples, 0.06%)</title><rect x="1189.3" y="563.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1192.3" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.06%)</title><rect x="1189.3" y="547.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.3" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.06%)</title><rect x="1189.3" y="531.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1192.3" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.06%)</title><rect x="1189.3" y="515.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1192.3" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.06%)</title><rect x="1189.3" y="499.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1192.3" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.06%)</title><rect x="1189.3" y="483.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1192.3" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.06%)</title><rect x="1189.3" y="467.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1192.3" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.06%)</title><rect x="1189.3" y="451.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1192.3" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.06%)</title><rect x="1189.3" y="435.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.3" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.06%)</title><rect x="1189.3" y="419.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1192.3" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.06%)</title><rect x="1189.3" y="403.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1192.3" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.06%)</title><rect x="1189.3" y="387.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1192.3" y="398.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.06%)</title><rect x="1189.3" y="371.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1192.3" y="382.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.06%)</title><rect x="1189.3" y="355.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1192.3" y="366.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (1 samples, 0.06%)</title><rect x="1189.3" y="339.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1192.3" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (1 samples, 0.06%)</title><rect x="1189.3" y="323.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1192.3" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.06%)</title><rect x="1189.3" y="307.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1192.3" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.06%)</title><rect x="1189.3" y="291.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1192.3" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode (1 samples, 0.06%)</title><rect x="1189.3" y="275.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1192.3" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (1 samples, 0.06%)</title><rect x="1189.3" y="259.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.3" y="270.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (1 samples, 0.06%)</title><rect x="1189.3" y="243.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1192.3" y="254.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.06%)</title><rect x="1189.3" y="227.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1192.3" y="238.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (1 samples, 0.06%)</title><rect x="1189.3" y="211.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1192.3" y="222.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (1 samples, 0.06%)</title><rect x="1189.3" y="195.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1192.3" y="206.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (1 samples, 0.06%)</title><rect x="1189.3" y="179.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.3" y="190.0"></text>
</g>
<g>
<title>Java_java_net_SocketOutputStream_socketWrite0 (1 samples, 0.06%)</title><rect x="1189.3" y="163.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.3" y="174.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.06%)</title><rect x="1189.3" y="147.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1192.3" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.06%)</title><rect x="1189.3" y="131.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.3" y="142.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.06%)</title><rect x="1189.3" y="115.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.3" y="126.0"></text>
</g>
</g>
</svg>
