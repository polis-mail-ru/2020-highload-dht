<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="741"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="741"> </text>
<g id="frames">
<g>
<title>all (7,006 samples, 100.00%)</title><rect x="10.0" y="707.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="718.0">all</text>
</g>
<g>
<title>[Java: C1 CompilerThread0 tid=22275] (2 samples, 0.03%)</title><rect x="10.0" y="691.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.03%)</title><rect x="10.0" y="675.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.03%)</title><rect x="10.0" y="659.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.03%)</title><rect x="10.0" y="643.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.03%)</title><rect x="10.0" y="627.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.03%)</title><rect x="10.0" y="611.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.03%)</title><rect x="10.0" y="595.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.03%)</title><rect x="10.0" y="579.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.03%)</title><rect x="10.0" y="563.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.03%)</title><rect x="10.0" y="547.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.03%)</title><rect x="10.0" y="531.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.03%)</title><rect x="10.0" y="515.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>[Java: C2 CompilerThread0 tid=21763] (92 samples, 1.31%)</title><rect x="10.3" y="691.0" width="15.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.3" y="702.0"></text>
</g>
<g>
<title>thread_start (92 samples, 1.31%)</title><rect x="10.3" y="675.0" width="15.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.3" y="686.0"></text>
</g>
<g>
<title>_pthread_start (92 samples, 1.31%)</title><rect x="10.3" y="659.0" width="15.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.3" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (92 samples, 1.31%)</title><rect x="10.3" y="643.0" width="15.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="13.3" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (92 samples, 1.31%)</title><rect x="10.3" y="627.0" width="15.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.3" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (92 samples, 1.31%)</title><rect x="10.3" y="611.0" width="15.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.3" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (92 samples, 1.31%)</title><rect x="10.3" y="595.0" width="15.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.3" y="606.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (92 samples, 1.31%)</title><rect x="10.3" y="579.0" width="15.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.3" y="590.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (92 samples, 1.31%)</title><rect x="10.3" y="563.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.3" y="574.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (90 samples, 1.28%)</title><rect x="10.3" y="547.0" width="15.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.3" y="558.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (90 samples, 1.28%)</title><rect x="10.3" y="531.0" width="15.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.3" y="542.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (55 samples, 0.79%)</title><rect x="10.5" y="515.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.5" y="526.0"></text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.04%)</title><rect x="10.5" y="499.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.5" y="510.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.03%)</title><rect x="10.5" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.5" y="494.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.07%)</title><rect x="11.2" y="499.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.2" y="510.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.06%)</title><rect x="11.3" y="483.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.3" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.07%)</title><rect x="12.2" y="499.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.2" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.07%)</title><rect x="12.2" y="483.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.2" y="494.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.03%)</title><rect x="12.7" y="467.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.7" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (40 samples, 0.57%)</title><rect x="13.0" y="499.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.0" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.04%)</title><rect x="13.2" y="483.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.2" y="494.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.03%)</title><rect x="13.4" y="467.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="16.4" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.03%)</title><rect x="13.7" y="483.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="16.7" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 0.13%)</title><rect x="14.0" y="483.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.0" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.11%)</title><rect x="15.7" y="483.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.7" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.04%)</title><rect x="16.4" y="467.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.4" y="478.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.03%)</title><rect x="16.6" y="451.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.6" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.03%)</title><rect x="17.1" y="483.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.1" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.03%)</title><rect x="17.1" y="467.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="20.1" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.07%)</title><rect x="17.6" y="483.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="20.6" y="494.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (2 samples, 0.03%)</title><rect x="18.1" y="467.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="21.1" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.04%)</title><rect x="18.4" y="483.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="21.4" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.04%)</title><rect x="18.4" y="467.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="21.4" y="478.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.03%)</title><rect x="19.1" y="483.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="22.1" y="494.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.03%)</title><rect x="19.1" y="467.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="22.1" y="478.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="19.1" y="451.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="22.1" y="462.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.03%)</title><rect x="19.4" y="483.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="22.4" y="494.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 0.31%)</title><rect x="19.8" y="515.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="22.8" y="526.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.03%)</title><rect x="19.8" y="499.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="22.8" y="510.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.03%)</title><rect x="19.8" y="483.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="22.8" y="494.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (5 samples, 0.07%)</title><rect x="20.1" y="499.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.1" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (5 samples, 0.07%)</title><rect x="20.1" y="483.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="23.1" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="20.4" y="467.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="23.4" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 0.10%)</title><rect x="21.3" y="499.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.3" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="21.3" y="483.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="24.3" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.04%)</title><rect x="21.6" y="483.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="24.6" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.04%)</title><rect x="21.6" y="467.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="24.6" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.03%)</title><rect x="21.8" y="451.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="24.8" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.03%)</title><rect x="21.8" y="435.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.8" y="446.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.03%)</title><rect x="22.5" y="499.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.5" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.03%)</title><rect x="22.5" y="483.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="25.5" y="494.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.04%)</title><rect x="23.0" y="499.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="26.0" y="510.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.04%)</title><rect x="23.0" y="483.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="26.0" y="494.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.03%)</title><rect x="23.0" y="467.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="26.0" y="478.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.03%)</title><rect x="23.0" y="451.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="26.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.16%)</title><rect x="23.6" y="515.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="26.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.16%)</title><rect x="23.6" y="499.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="26.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.16%)</title><rect x="23.6" y="483.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.16%)</title><rect x="23.6" y="467.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="26.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.16%)</title><rect x="23.6" y="451.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="26.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.14%)</title><rect x="23.8" y="435.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="26.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.14%)</title><rect x="23.8" y="419.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.14%)</title><rect x="23.8" y="403.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="26.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.14%)</title><rect x="23.8" y="387.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="26.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.11%)</title><rect x="23.8" y="371.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="26.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.11%)</title><rect x="23.8" y="355.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.11%)</title><rect x="23.8" y="339.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.10%)</title><rect x="24.0" y="323.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="27.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.10%)</title><rect x="24.0" y="307.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="27.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.10%)</title><rect x="24.0" y="291.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="27.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.07%)</title><rect x="24.0" y="275.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="27.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.07%)</title><rect x="24.0" y="259.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.07%)</title><rect x="24.0" y="243.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="27.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.07%)</title><rect x="24.0" y="227.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="27.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.07%)</title><rect x="24.0" y="211.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="27.0" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.07%)</title><rect x="24.0" y="195.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="27.0" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.07%)</title><rect x="24.0" y="179.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.07%)</title><rect x="24.0" y="163.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="27.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.07%)</title><rect x="24.0" y="147.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="27.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.07%)</title><rect x="24.0" y="131.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="27.0" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.06%)</title><rect x="24.1" y="115.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="27.1" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.06%)</title><rect x="24.1" y="99.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="27.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.06%)</title><rect x="24.1" y="83.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="27.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.06%)</title><rect x="24.1" y="67.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.06%)</title><rect x="24.1" y="51.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="27.1" y="62.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (2 samples, 0.03%)</title><rect x="24.1" y="35.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="24.8" y="275.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="24.8" y="259.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="27.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="24.8" y="243.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="27.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="24.8" y="227.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="24.8" y="211.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="27.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="24.8" y="195.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.8" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="24.8" y="179.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="27.8" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="24.8" y="163.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="27.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="24.8" y="147.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="27.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="24.8" y="131.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="27.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="24.8" y="115.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="27.8" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="24.8" y="99.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="27.8" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="24.8" y="83.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="27.8" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="24.8" y="67.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="27.8" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="24.8" y="51.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.8" y="62.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=11779] (7 samples, 0.10%)</title><rect x="25.8" y="691.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="28.8" y="702.0"></text>
</g>
<g>
<title>thread_start (7 samples, 0.10%)</title><rect x="25.8" y="675.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="28.8" y="686.0"></text>
</g>
<g>
<title>_pthread_start (7 samples, 0.10%)</title><rect x="25.8" y="659.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="28.8" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (7 samples, 0.10%)</title><rect x="25.8" y="643.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="28.8" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (7 samples, 0.10%)</title><rect x="25.8" y="627.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="28.8" y="638.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (7 samples, 0.10%)</title><rect x="25.8" y="611.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="28.8" y="622.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (7 samples, 0.10%)</title><rect x="25.8" y="595.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="28.8" y="606.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.03%)</title><rect x="25.8" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="28.8" y="590.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.03%)</title><rect x="25.8" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="28.8" y="574.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.03%)</title><rect x="25.8" y="547.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="28.8" y="558.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (2 samples, 0.03%)</title><rect x="25.8" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="28.8" y="542.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (5 samples, 0.07%)</title><rect x="26.2" y="579.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="29.2" y="590.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.07%)</title><rect x="26.2" y="563.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="29.2" y="574.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.07%)</title><rect x="26.2" y="547.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="29.2" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.07%)</title><rect x="26.2" y="531.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="29.2" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.07%)</title><rect x="26.2" y="515.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="29.2" y="526.0"></text>
</g>
<g>
<title>[Java: Service Thread tid=22787] (4 samples, 0.06%)</title><rect x="27.0" y="691.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="30.0" y="702.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.06%)</title><rect x="27.0" y="675.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="30.0" y="686.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.06%)</title><rect x="27.0" y="659.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="30.0" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.06%)</title><rect x="27.0" y="643.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="30.0" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.06%)</title><rect x="27.0" y="627.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="30.0" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (4 samples, 0.06%)</title><rect x="27.0" y="611.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="30.0" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.06%)</title><rect x="27.0" y="595.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="30.0" y="606.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (4 samples, 0.06%)</title><rect x="27.0" y="579.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="30.0" y="590.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (4 samples, 0.06%)</title><rect x="27.0" y="563.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="30.0" y="574.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (4 samples, 0.06%)</title><rect x="27.0" y="547.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="30.0" y="558.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (4 samples, 0.06%)</title><rect x="27.0" y="531.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="30.0" y="542.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (3 samples, 0.04%)</title><rect x="27.2" y="515.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="30.2" y="526.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.03%)</title><rect x="27.3" y="499.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="30.3" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=40203] (971 samples, 13.86%)</title><rect x="27.9" y="691.0" width="163.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="30.9" y="702.0">[NIO Selector #0 tid=..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (971 samples, 13.86%)</title><rect x="27.9" y="675.0" width="163.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.9" y="686.0">one/nio/server/Select..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.03%)</title><rect x="28.0" y="659.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.0" y="670.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.03%)</title><rect x="28.0" y="643.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.0" y="654.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (306 samples, 4.37%)</title><rect x="28.4" y="659.0" width="51.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.4" y="670.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (11 samples, 0.16%)</title><rect x="28.5" y="643.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (11 samples, 0.16%)</title><rect x="28.5" y="627.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (9 samples, 0.13%)</title><rect x="28.9" y="611.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.9" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.04%)</title><rect x="29.0" y="595.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.0" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (3 samples, 0.04%)</title><rect x="29.0" y="579.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="29.2" y="563.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.2" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.07%)</title><rect x="29.5" y="595.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="32.5" y="606.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.06%)</title><rect x="29.7" y="579.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="32.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (294 samples, 4.20%)</title><rect x="30.4" y="643.0" width="49.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.4" y="654.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (294 samples, 4.20%)</title><rect x="30.4" y="627.0" width="49.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.4" y="638.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (293 samples, 4.18%)</title><rect x="30.5" y="611.0" width="49.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.5" y="622.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (278 samples, 3.97%)</title><rect x="30.5" y="595.0" width="46.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.5" y="606.0">sun/..</text>
</g>
<g>
<title>kevent (266 samples, 3.80%)</title><rect x="32.6" y="579.0" width="44.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="35.6" y="590.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (12 samples, 0.17%)</title><rect x="77.4" y="595.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.10%)</title><rect x="77.7" y="579.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.06%)</title><rect x="77.7" y="563.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.04%)</title><rect x="78.4" y="563.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.04%)</title><rect x="78.9" y="579.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.04%)</title><rect x="78.9" y="563.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.04%)</title><rect x="78.9" y="547.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.04%)</title><rect x="78.9" y="531.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.03%)</title><rect x="78.9" y="515.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.9" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="79.6" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.03%)</title><rect x="79.6" y="579.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.03%)</title><rect x="79.6" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.6" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (662 samples, 9.45%)</title><rect x="79.9" y="659.0" width="111.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.9" y="670.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (662 samples, 9.45%)</title><rect x="79.9" y="643.0" width="111.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.9" y="654.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (599 samples, 8.55%)</title><rect x="79.9" y="627.0" width="100.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.9" y="638.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (567 samples, 8.09%)</title><rect x="80.7" y="611.0" width="95.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.7" y="622.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (567 samples, 8.09%)</title><rect x="80.7" y="595.0" width="95.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.7" y="606.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (555 samples, 7.92%)</title><rect x="80.9" y="579.0" width="93.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.9" y="590.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (186 samples, 2.65%)</title><rect x="81.1" y="563.0" width="31.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.1" y="574.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (186 samples, 2.65%)</title><rect x="81.1" y="547.0" width="31.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.1" y="558.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.16%)</title><rect x="81.1" y="531.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.04%)</title><rect x="82.4" y="515.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.4" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.04%)</title><rect x="82.4" y="499.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.04%)</title><rect x="82.4" y="483.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.4" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="82.6" y="467.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="85.6" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (175 samples, 2.50%)</title><rect x="82.9" y="531.0" width="29.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.9" y="542.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (174 samples, 2.48%)</title><rect x="83.1" y="515.0" width="29.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.1" y="526.0">on..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="83.1" y="499.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="86.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (167 samples, 2.38%)</title><rect x="83.4" y="499.0" width="28.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="86.4" y="510.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (167 samples, 2.38%)</title><rect x="83.4" y="483.0" width="28.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="86.4" y="494.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (166 samples, 2.37%)</title><rect x="83.6" y="467.0" width="28.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.6" y="478.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (166 samples, 2.37%)</title><rect x="83.6" y="451.0" width="28.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="86.6" y="462.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (166 samples, 2.37%)</title><rect x="83.6" y="435.0" width="28.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.6" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (166 samples, 2.37%)</title><rect x="83.6" y="419.0" width="28.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.6" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (2 samples, 0.03%)</title><rect x="83.6" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (164 samples, 2.34%)</title><rect x="83.9" y="403.0" width="27.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.9" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (156 samples, 2.23%)</title><rect x="85.3" y="387.0" width="26.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.3" y="398.0">s..</text>
</g>
<g>
<title>write (152 samples, 2.17%)</title><rect x="86.0" y="371.0" width="25.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="89.0" y="382.0">w..</text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.07%)</title><rect x="111.6" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="114.6" y="510.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (2 samples, 0.03%)</title><rect x="111.6" y="483.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="114.6" y="494.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.03%)</title><rect x="111.9" y="483.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="114.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.06%)</title><rect x="112.4" y="563.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="112.4" y="547.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (364 samples, 5.20%)</title><rect x="113.1" y="563.0" width="61.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="116.1" y="574.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="113.6" y="547.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="113.6" y="531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.6" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="113.6" y="515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.6" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="113.6" y="499.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="116.6" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="113.6" y="483.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="116.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="113.6" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.6" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="113.6" y="451.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (358 samples, 5.11%)</title><rect x="113.9" y="547.0" width="60.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.9" y="558.0">ru/mai..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="113.9" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="116.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (3 samples, 0.04%)</title><rect x="114.4" y="531.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (352 samples, 5.02%)</title><rect x="114.9" y="531.0" width="59.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.9" y="542.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="114.9" y="515.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.9" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="114.9" y="499.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.9" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="114.9" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="114.9" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="117.9" y="478.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (346 samples, 4.94%)</title><rect x="115.3" y="515.0" width="58.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.3" y="526.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (346 samples, 4.94%)</title><rect x="115.3" y="499.0" width="58.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="118.3" y="510.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (344 samples, 4.91%)</title><rect x="115.4" y="483.0" width="58.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="118.4" y="494.0">Java_o..</text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="116.4" y="467.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="119.4" y="478.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (331 samples, 4.72%)</title><rect x="117.3" y="467.0" width="55.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="120.3" y="478.0">rocks..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="118.3" y="451.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="121.3" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="118.6" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="121.6" y="462.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (33 samples, 0.47%)</title><rect x="119.1" y="451.0" width="5.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="122.1" y="462.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="119.1" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="122.1" y="446.0"></text>
</g>
<g>
<title>jni_NewByteArray (24 samples, 0.34%)</title><rect x="120.0" y="435.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="123.0" y="446.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.03%)</title><rect x="120.7" y="419.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="123.7" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="121.3" y="419.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="124.3" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (14 samples, 0.20%)</title><rect x="121.7" y="419.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="124.7" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (11 samples, 0.16%)</title><rect x="122.0" y="403.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="125.0" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (9 samples, 0.13%)</title><rect x="122.0" y="387.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="125.0" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.03%)</title><rect x="122.2" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="125.2" y="382.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="123.2" y="371.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="126.2" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.04%)</title><rect x="124.0" y="435.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="127.0" y="446.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="124.9" y="451.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="127.9" y="462.0"></text>
</g>
<g>
<title>free_tiny (7 samples, 0.10%)</title><rect x="125.2" y="451.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="128.2" y="462.0"></text>
</g>
<g>
<title>tiny_free_no_lock (5 samples, 0.07%)</title><rect x="125.5" y="435.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="128.5" y="446.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (4 samples, 0.06%)</title><rect x="125.7" y="419.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="128.7" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.06%)</title><rect x="126.4" y="451.0" width="0.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="129.4" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="126.6" y="435.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="129.6" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.07%)</title><rect x="127.1" y="451.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="130.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.06%)</title><rect x="127.1" y="435.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="130.1" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.04%)</title><rect x="127.2" y="419.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="130.2" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="127.4" y="403.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="130.4" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="127.4" y="387.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="130.4" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="127.4" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="130.4" y="382.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.11%)</title><rect x="128.2" y="451.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="131.2" y="462.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.11%)</title><rect x="128.2" y="435.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="131.2" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.11%)</title><rect x="128.2" y="419.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="131.2" y="430.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.03%)</title><rect x="128.4" y="403.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="131.4" y="414.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.07%)</title><rect x="128.7" y="403.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="131.7" y="414.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.07%)</title><rect x="128.7" y="387.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="131.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (256 samples, 3.65%)</title><rect x="129.6" y="451.0" width="43.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="132.6" y="462.0">rock..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (256 samples, 3.65%)</title><rect x="129.6" y="435.0" width="43.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="132.6" y="446.0">rock..</text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.03%)</title><rect x="129.8" y="419.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="132.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (4 samples, 0.06%)</title><rect x="130.3" y="419.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="133.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.04%)</title><rect x="130.3" y="403.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="133.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (246 samples, 3.51%)</title><rect x="130.9" y="419.0" width="41.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="133.9" y="430.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (245 samples, 3.50%)</title><rect x="131.1" y="403.0" width="41.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="134.1" y="414.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (241 samples, 3.44%)</title><rect x="131.4" y="387.0" width="40.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="134.4" y="398.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.07%)</title><rect x="131.9" y="371.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="134.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (2 samples, 0.03%)</title><rect x="132.8" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="135.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.04%)</title><rect x="133.1" y="371.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="136.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.04%)</title><rect x="133.1" y="355.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="136.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.04%)</title><rect x="133.6" y="371.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="136.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (20 samples, 0.29%)</title><rect x="134.1" y="371.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="137.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="135.0" y="355.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="138.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (13 samples, 0.19%)</title><rect x="135.3" y="355.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="138.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (2 samples, 0.03%)</title><rect x="136.2" y="339.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="139.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.06%)</title><rect x="136.5" y="339.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="139.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="137.2" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="140.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (200 samples, 2.85%)</title><rect x="137.8" y="371.0" width="33.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="140.8" y="382.0">ro..</text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (191 samples, 2.73%)</title><rect x="139.2" y="355.0" width="32.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="142.2" y="366.0">ro..</text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="140.0" y="339.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="143.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (175 samples, 2.50%)</title><rect x="140.7" y="339.0" width="29.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="143.7" y="350.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="143.1" y="323.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="146.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (10 samples, 0.14%)</title><rect x="144.1" y="323.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="147.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (8 samples, 0.11%)</title><rect x="144.2" y="307.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="147.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (7 samples, 0.10%)</title><rect x="144.4" y="291.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="147.4" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.10%)</title><rect x="144.4" y="275.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="147.4" y="286.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.10%)</title><rect x="144.4" y="259.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="147.4" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.09%)</title><rect x="144.6" y="243.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="147.6" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.09%)</title><rect x="144.6" y="227.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="147.6" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.07%)</title><rect x="144.7" y="211.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="147.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (6 samples, 0.09%)</title><rect x="145.8" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="148.8" y="334.0"></text>
</g>
<g>
<title>free (3 samples, 0.04%)</title><rect x="146.3" y="307.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="149.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (55 samples, 0.79%)</title><rect x="146.8" y="323.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="149.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (50 samples, 0.71%)</title><rect x="147.6" y="307.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="150.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (45 samples, 0.64%)</title><rect x="148.3" y="291.0" width="7.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="151.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (39 samples, 0.56%)</title><rect x="148.8" y="275.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="151.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.03%)</title><rect x="149.5" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="152.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (31 samples, 0.44%)</title><rect x="150.0" y="259.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="153.0" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (7 samples, 0.10%)</title><rect x="151.0" y="243.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="154.0" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="152.2" y="243.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="155.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (9 samples, 0.13%)</title><rect x="152.5" y="243.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="155.5" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (9 samples, 0.13%)</title><rect x="152.5" y="227.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="155.5" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (9 samples, 0.13%)</title><rect x="152.5" y="211.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="155.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (7 samples, 0.10%)</title><rect x="154.0" y="243.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="157.0" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (7 samples, 0.10%)</title><rect x="154.0" y="227.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="157.0" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (7 samples, 0.10%)</title><rect x="154.0" y="211.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="157.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (2 samples, 0.03%)</title><rect x="155.5" y="275.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="158.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseCacheHandle(void*, void*) (2 samples, 0.03%)</title><rect x="156.0" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="159.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (8 samples, 0.11%)</title><rect x="156.4" y="323.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="159.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (6 samples, 0.09%)</title><rect x="156.7" y="307.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="159.7" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="156.9" y="291.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="159.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.04%)</title><rect x="157.2" y="291.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="160.2" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.04%)</title><rect x="157.2" y="275.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="160.2" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.04%)</title><rect x="157.2" y="259.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="160.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (32 samples, 0.46%)</title><rect x="157.7" y="323.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="160.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (27 samples, 0.39%)</title><rect x="158.0" y="307.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="161.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (8 samples, 0.11%)</title><rect x="160.2" y="291.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="163.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (6 samples, 0.09%)</title><rect x="161.6" y="291.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="164.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="162.3" y="275.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="165.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (2 samples, 0.03%)</title><rect x="162.8" y="307.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="165.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (4 samples, 0.06%)</title><rect x="163.1" y="323.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="166.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (34 samples, 0.49%)</title><rect x="163.9" y="323.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="166.9" y="334.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (3 samples, 0.04%)</title><rect x="164.1" y="307.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="167.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (27 samples, 0.39%)</title><rect x="165.0" y="307.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="168.0" y="318.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (3 samples, 0.04%)</title><rect x="167.1" y="291.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="170.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (6 samples, 0.09%)</title><rect x="167.8" y="291.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="170.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (3 samples, 0.04%)</title><rect x="168.3" y="275.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="171.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (2 samples, 0.03%)</title><rect x="168.5" y="259.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="171.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="168.8" y="291.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="171.8" y="302.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="169.8" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="172.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (3 samples, 0.04%)</title><rect x="170.3" y="339.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="173.3" y="350.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="171.5" y="371.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="174.5" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.03%)</title><rect x="173.0" y="467.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="176.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (4 samples, 0.06%)</title><rect x="173.5" y="515.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.5" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.06%)</title><rect x="173.5" y="499.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.5" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="173.7" y="483.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.7" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="173.7" y="467.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="176.7" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="173.7" y="451.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.04%)</title><rect x="173.7" y="435.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (8 samples, 0.11%)</title><rect x="174.6" y="579.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.09%)</title><rect x="174.7" y="563.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="177.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.09%)</title><rect x="174.7" y="547.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.7" y="558.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.07%)</title><rect x="174.7" y="531.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="175.2" y="515.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="175.9" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="175.9" y="563.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.9" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="175.9" y="547.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.9" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="175.9" y="531.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (11 samples, 0.16%)</title><rect x="176.2" y="611.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.2" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.03%)</title><rect x="176.4" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.4" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.11%)</title><rect x="176.7" y="595.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.7" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.11%)</title><rect x="176.7" y="579.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (10 samples, 0.14%)</title><rect x="178.1" y="611.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.1" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.07%)</title><rect x="178.6" y="595.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.04%)</title><rect x="178.9" y="579.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="181.9" y="590.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.03%)</title><rect x="179.1" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="182.1" y="574.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.03%)</title><rect x="179.1" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="182.1" y="558.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (2 samples, 0.03%)</title><rect x="179.1" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.1" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (2 samples, 0.03%)</title><rect x="179.4" y="595.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.03%)</title><rect x="179.8" y="611.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="180.1" y="611.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="183.1" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="180.4" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.4" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="180.4" y="595.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.4" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (63 samples, 0.90%)</title><rect x="180.8" y="627.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="183.8" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (63 samples, 0.90%)</title><rect x="180.8" y="611.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="183.8" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.06%)</title><rect x="181.0" y="595.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.0" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="181.0" y="579.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="181.0" y="563.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.0" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="181.0" y="547.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="184.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="181.1" y="531.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.1" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="181.1" y="515.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="184.1" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.04%)</title><rect x="181.1" y="499.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (58 samples, 0.83%)</title><rect x="181.6" y="595.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.09%)</title><rect x="181.6" y="579.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="181.6" y="563.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="184.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.04%)</title><rect x="181.6" y="547.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="184.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.04%)</title><rect x="181.6" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="181.8" y="515.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.8" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="181.8" y="499.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.8" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="182.1" y="563.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="185.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (52 samples, 0.74%)</title><rect x="182.6" y="579.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="185.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (52 samples, 0.74%)</title><rect x="182.6" y="563.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (52 samples, 0.74%)</title><rect x="182.6" y="547.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (52 samples, 0.74%)</title><rect x="182.6" y="531.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (52 samples, 0.74%)</title><rect x="182.6" y="515.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.6" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (48 samples, 0.69%)</title><rect x="183.3" y="499.0" width="8.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="186.3" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=39171] (1,097 samples, 15.66%)</title><rect x="191.4" y="691.0" width="184.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="194.4" y="702.0">[NIO Selector #1 tid=391..</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.04%)</title><rect x="191.4" y="675.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="194.4" y="686.0"></text>
</g>
<g>
<title>Method::from_compiled_entry_no_trampoline() const (2 samples, 0.03%)</title><rect x="191.4" y="659.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="194.4" y="670.0"></text>
</g>
<g>
<title>[unknown_Java] (13 samples, 0.19%)</title><rect x="191.9" y="675.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="194.9" y="686.0"></text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.03%)</title><rect x="191.9" y="659.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.9" y="670.0"></text>
</g>
<g>
<title>Interpreter (2 samples, 0.03%)</title><rect x="192.2" y="659.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="195.2" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (9 samples, 0.13%)</title><rect x="192.6" y="659.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="195.6" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (6 samples, 0.09%)</title><rect x="192.6" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="195.6" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.04%)</title><rect x="192.6" y="627.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="195.6" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.04%)</title><rect x="193.1" y="627.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="196.1" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.03%)</title><rect x="193.2" y="611.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="196.2" y="622.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,081 samples, 15.43%)</title><rect x="194.1" y="675.0" width="182.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.1" y="686.0">one/nio/server/SelectorT..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (431 samples, 6.15%)</title><rect x="194.3" y="659.0" width="72.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.3" y="670.0">one/nio/..</text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.06%)</title><rect x="198.8" y="643.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="201.8" y="654.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (5 samples, 0.07%)</title><rect x="199.6" y="643.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.6" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.06%)</title><rect x="199.8" y="627.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="202.8" y="638.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.03%)</title><rect x="200.0" y="611.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="203.0" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.07%)</title><rect x="200.5" y="643.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="203.5" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (388 samples, 5.54%)</title><rect x="201.5" y="643.0" width="65.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.5" y="654.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (387 samples, 5.52%)</title><rect x="201.7" y="627.0" width="65.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.7" y="638.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (383 samples, 5.47%)</title><rect x="202.2" y="611.0" width="64.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.2" y="622.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (371 samples, 5.30%)</title><rect x="202.5" y="595.0" width="62.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.5" y="606.0">sun/ni..</text>
</g>
<g>
<title>kevent (355 samples, 5.07%)</title><rect x="205.2" y="579.0" width="59.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="208.2" y="590.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.06%)</title><rect x="265.0" y="595.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="265.0" y="579.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="265.3" y="579.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="265.3" y="563.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="265.3" y="547.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="265.3" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.04%)</title><rect x="265.8" y="595.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.8" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.04%)</title><rect x="265.8" y="579.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.8" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.04%)</title><rect x="265.8" y="563.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.8" y="574.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.04%)</title><rect x="265.8" y="547.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.8" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.04%)</title><rect x="265.8" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="266.3" y="595.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (647 samples, 9.23%)</title><rect x="266.9" y="659.0" width="108.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.9" y="670.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (647 samples, 9.23%)</title><rect x="266.9" y="643.0" width="108.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.9" y="654.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (579 samples, 8.26%)</title><rect x="267.0" y="627.0" width="97.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.0" y="638.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (562 samples, 8.02%)</title><rect x="267.5" y="611.0" width="94.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.5" y="622.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (561 samples, 8.01%)</title><rect x="267.7" y="595.0" width="94.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.7" y="606.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (551 samples, 7.86%)</title><rect x="267.7" y="579.0" width="92.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.7" y="590.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (162 samples, 2.31%)</title><rect x="267.7" y="563.0" width="27.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.7" y="574.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (161 samples, 2.30%)</title><rect x="267.7" y="547.0" width="27.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.7" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.07%)</title><rect x="267.7" y="531.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="270.7" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.03%)</title><rect x="268.2" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.2" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.03%)</title><rect x="268.2" y="499.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="268.2" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.2" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (156 samples, 2.23%)</title><rect x="268.5" y="531.0" width="26.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.5" y="542.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (156 samples, 2.23%)</title><rect x="268.5" y="515.0" width="26.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.5" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (156 samples, 2.23%)</title><rect x="268.5" y="499.0" width="26.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.5" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (156 samples, 2.23%)</title><rect x="268.5" y="483.0" width="26.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.5" y="494.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.06%)</title><rect x="268.5" y="467.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.5" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="268.7" y="451.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="271.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="268.7" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (152 samples, 2.17%)</title><rect x="269.2" y="467.0" width="25.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="272.2" y="478.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="269.2" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="269.2" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="269.2" y="419.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="269.2" y="403.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (150 samples, 2.14%)</title><rect x="269.5" y="451.0" width="25.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.5" y="462.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (150 samples, 2.14%)</title><rect x="269.5" y="435.0" width="25.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.5" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (150 samples, 2.14%)</title><rect x="269.5" y="419.0" width="25.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.5" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (3 samples, 0.04%)</title><rect x="269.5" y="403.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (147 samples, 2.10%)</title><rect x="270.1" y="403.0" width="24.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.1" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (140 samples, 2.00%)</title><rect x="271.1" y="387.0" width="23.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.1" y="398.0">s..</text>
</g>
<g>
<title>write (132 samples, 1.88%)</title><rect x="272.4" y="371.0" width="22.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="275.4" y="382.0">w..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.09%)</title><rect x="295.0" y="563.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.06%)</title><rect x="295.0" y="547.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.0" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="295.3" y="531.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="298.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (383 samples, 5.47%)</title><rect x="296.0" y="563.0" width="64.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="299.0" y="574.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (378 samples, 5.40%)</title><rect x="296.3" y="547.0" width="63.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.3" y="558.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (4 samples, 0.06%)</title><rect x="296.3" y="531.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="299.3" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.04%)</title><rect x="296.5" y="515.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (374 samples, 5.34%)</title><rect x="297.0" y="531.0" width="63.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.0" y="542.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="297.0" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="297.0" y="499.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.0" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="297.0" y="483.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.0" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="297.0" y="467.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="300.0" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="297.0" y="451.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="297.0" y="435.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.0" y="446.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (369 samples, 5.27%)</title><rect x="297.3" y="515.0" width="62.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.3" y="526.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (369 samples, 5.27%)</title><rect x="297.3" y="499.0" width="62.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.3" y="510.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (366 samples, 5.22%)</title><rect x="297.8" y="483.0" width="61.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="300.8" y="494.0">Java_o..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="298.3" y="467.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="301.3" y="478.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (356 samples, 5.08%)</title><rect x="299.4" y="467.0" width="59.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="302.4" y="478.0">rocksd..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="299.5" y="451.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="302.5" y="462.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (30 samples, 0.43%)</title><rect x="299.9" y="451.0" width="5.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="302.9" y="462.0"></text>
</g>
<g>
<title>jni_NewByteArray (23 samples, 0.33%)</title><rect x="300.7" y="435.0" width="3.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="303.7" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="300.7" y="419.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="303.7" y="430.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (4 samples, 0.06%)</title><rect x="301.2" y="419.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="304.2" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="302.1" y="419.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="305.1" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="302.1" y="403.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="305.1" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (13 samples, 0.19%)</title><rect x="302.4" y="419.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="305.4" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (11 samples, 0.16%)</title><rect x="302.6" y="403.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="305.6" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (9 samples, 0.13%)</title><rect x="302.6" y="387.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="305.6" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.03%)</title><rect x="302.9" y="371.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="305.9" y="382.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.03%)</title><rect x="303.7" y="371.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="306.7" y="382.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="304.1" y="387.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="307.1" y="398.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="304.6" y="435.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="307.6" y="446.0"></text>
</g>
<g>
<title>free (3 samples, 0.04%)</title><rect x="304.9" y="451.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="307.9" y="462.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.04%)</title><rect x="304.9" y="435.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="307.9" y="446.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.04%)</title><rect x="304.9" y="419.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="307.9" y="430.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.09%)</title><rect x="305.4" y="451.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="308.4" y="462.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="305.4" y="435.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="308.4" y="446.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.06%)</title><rect x="305.8" y="435.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="308.8" y="446.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (2 samples, 0.03%)</title><rect x="306.1" y="419.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="309.1" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.04%)</title><rect x="306.4" y="451.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="309.4" y="462.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="306.6" y="435.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="309.6" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.09%)</title><rect x="306.9" y="451.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="309.9" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="307.3" y="435.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="310.3" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="307.3" y="419.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="310.3" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="307.3" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="310.3" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="307.3" y="387.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="310.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (301 samples, 4.30%)</title><rect x="308.3" y="451.0" width="50.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="311.3" y="462.0">rocks..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (2 samples, 0.03%)</title><rect x="308.5" y="435.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="311.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (296 samples, 4.22%)</title><rect x="308.8" y="435.0" width="49.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="311.8" y="446.0">rocks..</text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.03%)</title><rect x="309.0" y="419.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="312.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (5 samples, 0.07%)</title><rect x="309.5" y="419.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="312.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (4 samples, 0.06%)</title><rect x="309.6" y="403.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="312.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.04%)</title><rect x="309.8" y="387.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="312.8" y="398.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.04%)</title><rect x="309.8" y="371.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="312.8" y="382.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.04%)</title><rect x="309.8" y="355.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="312.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (286 samples, 4.08%)</title><rect x="310.3" y="419.0" width="48.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="313.3" y="430.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (286 samples, 4.08%)</title><rect x="310.3" y="403.0" width="48.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="313.3" y="414.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (279 samples, 3.98%)</title><rect x="310.5" y="387.0" width="47.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="313.5" y="398.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (6 samples, 0.09%)</title><rect x="310.8" y="371.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="313.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.03%)</title><rect x="311.8" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="314.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.03%)</title><rect x="311.8" y="355.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="314.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (4 samples, 0.06%)</title><rect x="312.2" y="371.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="315.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.03%)</title><rect x="312.3" y="355.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="315.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (2 samples, 0.03%)</title><rect x="312.8" y="371.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="315.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (13 samples, 0.19%)</title><rect x="313.2" y="371.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="316.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.14%)</title><rect x="313.7" y="355.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="316.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="314.9" y="339.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="317.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (247 samples, 3.53%)</title><rect x="315.7" y="371.0" width="41.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="318.7" y="382.0">roc..</text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (240 samples, 3.43%)</title><rect x="316.9" y="355.0" width="40.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="319.9" y="366.0">roc..</text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="317.5" y="339.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="320.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.06%)</title><rect x="317.9" y="339.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="320.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (225 samples, 3.21%)</title><rect x="318.6" y="339.0" width="37.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="321.6" y="350.0">roc..</text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="320.4" y="323.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="323.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (14 samples, 0.20%)</title><rect x="321.1" y="323.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="324.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (11 samples, 0.16%)</title><rect x="321.4" y="307.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="324.4" y="318.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="321.9" y="291.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="324.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (6 samples, 0.09%)</title><rect x="322.3" y="291.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="325.3" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.09%)</title><rect x="322.3" y="275.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="325.3" y="286.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.07%)</title><rect x="322.4" y="259.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="325.4" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.07%)</title><rect x="322.4" y="243.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="325.4" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.07%)</title><rect x="322.4" y="227.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="325.4" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.06%)</title><rect x="322.6" y="211.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="325.6" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="322.8" y="195.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="325.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.06%)</title><rect x="323.4" y="323.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="326.4" y="334.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="323.8" y="307.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="326.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (2 samples, 0.03%)</title><rect x="324.1" y="323.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="327.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (96 samples, 1.37%)</title><rect x="324.5" y="323.0" width="16.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="327.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.03%)</title><rect x="325.0" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="328.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (91 samples, 1.30%)</title><rect x="325.3" y="307.0" width="15.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="328.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (91 samples, 1.30%)</title><rect x="325.3" y="291.0" width="15.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="328.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (39 samples, 0.56%)</title><rect x="326.0" y="275.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="329.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (3 samples, 0.04%)</title><rect x="326.3" y="259.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="329.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (31 samples, 0.44%)</title><rect x="326.8" y="259.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="329.8" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="327.5" y="243.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="330.5" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.09%)</title><rect x="327.8" y="243.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="330.8" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.04%)</title><rect x="328.8" y="243.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="331.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (12 samples, 0.17%)</title><rect x="329.3" y="243.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="332.3" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (11 samples, 0.16%)</title><rect x="329.3" y="227.0" width="1.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="332.3" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (9 samples, 0.13%)</title><rect x="329.5" y="211.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="332.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (4 samples, 0.06%)</title><rect x="331.4" y="243.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="334.4" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.06%)</title><rect x="331.4" y="227.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="334.4" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.06%)</title><rect x="331.4" y="211.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="334.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (2 samples, 0.03%)</title><rect x="332.0" y="259.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="335.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (2 samples, 0.03%)</title><rect x="332.0" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="335.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (48 samples, 0.69%)</title><rect x="332.5" y="275.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="335.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (14 samples, 0.20%)</title><rect x="332.7" y="259.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="335.7" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (14 samples, 0.20%)</title><rect x="332.7" y="243.0" width="2.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="335.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (31 samples, 0.44%)</title><rect x="335.1" y="259.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="338.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (30 samples, 0.43%)</title><rect x="335.1" y="243.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="338.1" y="254.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (28 samples, 0.40%)</title><rect x="335.2" y="227.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="338.2" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (28 samples, 0.40%)</title><rect x="335.2" y="211.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="338.2" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (28 samples, 0.40%)</title><rect x="335.2" y="195.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="338.2" y="206.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (26 samples, 0.37%)</title><rect x="335.6" y="179.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="338.6" y="190.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (26 samples, 0.37%)</title><rect x="335.6" y="163.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="338.6" y="174.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (14 samples, 0.20%)</title><rect x="337.3" y="147.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="340.3" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (9 samples, 0.13%)</title><rect x="338.1" y="131.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="341.1" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (2 samples, 0.03%)</title><rect x="339.3" y="115.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="342.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (2 samples, 0.03%)</title><rect x="340.3" y="259.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="343.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (3 samples, 0.04%)</title><rect x="340.8" y="323.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="343.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.04%)</title><rect x="340.8" y="307.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="343.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.03%)</title><rect x="341.0" y="291.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="344.0" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.03%)</title><rect x="341.0" y="275.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="344.0" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.03%)</title><rect x="341.0" y="259.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="344.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (34 samples, 0.49%)</title><rect x="341.3" y="323.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="344.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (30 samples, 0.43%)</title><rect x="341.5" y="307.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="344.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (7 samples, 0.10%)</title><rect x="343.5" y="291.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="346.5" y="302.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="344.2" y="275.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="347.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (11 samples, 0.16%)</title><rect x="344.7" y="291.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="347.7" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="345.7" y="275.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="348.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (6 samples, 0.09%)</title><rect x="347.0" y="323.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="350.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (44 samples, 0.63%)</title><rect x="348.4" y="323.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="351.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (3 samples, 0.04%)</title><rect x="348.7" y="307.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="351.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (38 samples, 0.54%)</title><rect x="349.2" y="307.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="352.2" y="318.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (4 samples, 0.06%)</title><rect x="352.4" y="291.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="355.4" y="302.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="353.1" y="291.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="356.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (8 samples, 0.11%)</title><rect x="353.4" y="291.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="356.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.06%)</title><rect x="353.9" y="275.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="356.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="354.8" y="291.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="357.8" y="302.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="355.3" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="358.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="355.9" y="323.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="358.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (2 samples, 0.03%)</title><rect x="356.6" y="339.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="359.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (2 samples, 0.03%)</title><rect x="357.0" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="360.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (4 samples, 0.06%)</title><rect x="357.5" y="387.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="360.5" y="398.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="358.1" y="387.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="361.1" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="358.6" y="435.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="361.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (3 samples, 0.04%)</title><rect x="359.5" y="515.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.5" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.04%)</title><rect x="359.5" y="499.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.5" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="359.5" y="483.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="362.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="359.5" y="467.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (3 samples, 0.04%)</title><rect x="360.0" y="547.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="363.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (3 samples, 0.04%)</title><rect x="360.0" y="531.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="363.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (2 samples, 0.03%)</title><rect x="360.0" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.0" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="360.5" y="579.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.07%)</title><rect x="361.0" y="579.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="364.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.07%)</title><rect x="361.0" y="563.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="364.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.07%)</title><rect x="361.0" y="547.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.06%)</title><rect x="361.0" y="531.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.0" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.03%)</title><rect x="361.8" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.8" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="361.8" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.8" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="361.8" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.8" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="361.8" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.10%)</title><rect x="362.2" y="611.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.2" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.04%)</title><rect x="362.2" y="595.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="365.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.06%)</title><rect x="362.7" y="595.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="365.7" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.06%)</title><rect x="362.7" y="579.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="365.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 0.07%)</title><rect x="363.4" y="611.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="366.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="363.5" y="595.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="366.5" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="363.5" y="579.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (2 samples, 0.03%)</title><rect x="363.9" y="595.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.9" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (66 samples, 0.94%)</title><rect x="364.7" y="627.0" width="11.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="367.7" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (62 samples, 0.88%)</title><rect x="365.4" y="611.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="368.4" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="365.4" y="595.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="368.4" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="365.4" y="579.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="368.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="365.4" y="563.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="368.4" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="365.4" y="547.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="365.5" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="368.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (59 samples, 0.84%)</title><rect x="365.9" y="595.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="366.1" y="579.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="366.1" y="563.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="369.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="366.1" y="547.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="366.1" y="531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="369.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (55 samples, 0.79%)</title><rect x="366.6" y="579.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (55 samples, 0.79%)</title><rect x="366.6" y="563.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (52 samples, 0.74%)</title><rect x="366.9" y="547.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="369.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (52 samples, 0.74%)</title><rect x="366.9" y="531.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="369.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (52 samples, 0.74%)</title><rect x="366.9" y="515.0" width="8.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="369.9" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (48 samples, 0.69%)</title><rect x="367.6" y="499.0" width="8.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="370.6" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="375.8" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="378.8" y="670.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=38915] (1,022 samples, 14.59%)</title><rect x="376.2" y="691.0" width="172.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="379.2" y="702.0">[NIO Selector #2 tid=3..</text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 0.09%)</title><rect x="376.2" y="675.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="379.2" y="686.0"></text>
</g>
<g>
<title>Method::from_compiled_entry_no_trampoline() const (3 samples, 0.04%)</title><rect x="376.3" y="659.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="379.3" y="670.0"></text>
</g>
<g>
<title>[unknown_Java] (12 samples, 0.17%)</title><rect x="377.2" y="675.0" width="2.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="380.2" y="686.0"></text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.06%)</title><rect x="377.2" y="659.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="380.2" y="670.0"></text>
</g>
<g>
<title>Interpreter (5 samples, 0.07%)</title><rect x="377.8" y="659.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="380.8" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (3 samples, 0.04%)</title><rect x="378.7" y="659.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="381.7" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,003 samples, 14.32%)</title><rect x="379.4" y="675.0" width="168.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="382.4" y="686.0">one/nio/server/Selecto..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (360 samples, 5.14%)</title><rect x="380.7" y="659.0" width="60.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.7" y="670.0">one/ni..</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.04%)</title><rect x="382.6" y="643.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.6" y="654.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (6 samples, 0.09%)</title><rect x="383.2" y="643.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="386.2" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.07%)</title><rect x="383.4" y="627.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="386.4" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (336 samples, 4.80%)</title><rect x="384.2" y="643.0" width="56.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.2" y="654.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (336 samples, 4.80%)</title><rect x="384.2" y="627.0" width="56.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="387.2" y="638.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (334 samples, 4.77%)</title><rect x="384.4" y="611.0" width="56.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="387.4" y="622.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (315 samples, 4.50%)</title><rect x="384.6" y="595.0" width="53.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="387.6" y="606.0">sun/n..</text>
</g>
<g>
<title>kevent (301 samples, 4.30%)</title><rect x="386.9" y="579.0" width="50.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="389.9" y="590.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (10 samples, 0.14%)</title><rect x="437.6" y="595.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (8 samples, 0.11%)</title><rect x="438.0" y="579.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="441.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (7 samples, 0.10%)</title><rect x="438.0" y="563.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="441.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 0.10%)</title><rect x="438.0" y="547.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.10%)</title><rect x="438.0" y="531.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="441.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.03%)</title><rect x="438.1" y="515.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.1" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.04%)</title><rect x="438.5" y="515.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="441.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="439.3" y="595.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.03%)</title><rect x="439.7" y="595.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="442.7" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.03%)</title><rect x="439.7" y="579.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="442.7" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title><rect x="439.7" y="563.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.7" y="574.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.03%)</title><rect x="439.7" y="547.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="442.7" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.03%)</title><rect x="439.7" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="442.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.03%)</title><rect x="440.0" y="595.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.0" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.03%)</title><rect x="440.0" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.0" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title><rect x="440.0" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="443.0" y="574.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.03%)</title><rect x="440.0" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="443.0" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.03%)</title><rect x="440.0" y="531.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="440.3" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="443.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.03%)</title><rect x="441.0" y="643.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="444.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.03%)</title><rect x="441.0" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="444.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.03%)</title><rect x="441.0" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="444.0" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (634 samples, 9.05%)</title><rect x="441.3" y="659.0" width="106.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.3" y="670.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (634 samples, 9.05%)</title><rect x="441.3" y="643.0" width="106.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.3" y="654.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (581 samples, 8.29%)</title><rect x="441.5" y="627.0" width="97.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="444.5" y="638.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (565 samples, 8.06%)</title><rect x="442.9" y="611.0" width="95.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.9" y="622.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (565 samples, 8.06%)</title><rect x="442.9" y="595.0" width="95.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.9" y="606.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (559 samples, 7.98%)</title><rect x="443.0" y="579.0" width="94.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="446.0" y="590.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (179 samples, 2.55%)</title><rect x="443.2" y="563.0" width="30.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="446.2" y="574.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (179 samples, 2.55%)</title><rect x="443.2" y="547.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="446.2" y="558.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.16%)</title><rect x="443.2" y="531.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="446.2" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.10%)</title><rect x="443.9" y="515.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.9" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.10%)</title><rect x="443.9" y="499.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.9" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.10%)</title><rect x="443.9" y="483.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="446.9" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="444.7" y="467.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="447.7" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (168 samples, 2.40%)</title><rect x="445.0" y="531.0" width="28.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="448.0" y="542.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (168 samples, 2.40%)</title><rect x="445.0" y="515.0" width="28.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.0" y="526.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (159 samples, 2.27%)</title><rect x="445.7" y="499.0" width="26.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.7" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (158 samples, 2.26%)</title><rect x="445.9" y="483.0" width="26.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="448.9" y="494.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (157 samples, 2.24%)</title><rect x="446.1" y="467.0" width="26.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="449.1" y="478.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="446.2" y="451.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="446.2" y="435.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="446.2" y="419.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="446.2" y="403.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="449.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="446.2" y="387.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.2" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="446.2" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.2" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="446.2" y="355.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (153 samples, 2.18%)</title><rect x="446.7" y="451.0" width="25.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.7" y="462.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (153 samples, 2.18%)</title><rect x="446.7" y="435.0" width="25.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.7" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (153 samples, 2.18%)</title><rect x="446.7" y="419.0" width="25.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.7" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (3 samples, 0.04%)</title><rect x="446.7" y="403.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (150 samples, 2.14%)</title><rect x="447.2" y="403.0" width="25.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.2" y="414.0">s..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="448.2" y="387.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="451.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (142 samples, 2.03%)</title><rect x="448.6" y="387.0" width="23.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.6" y="398.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.03%)</title><rect x="449.6" y="371.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="452.6" y="382.0"></text>
</g>
<g>
<title>write (133 samples, 1.90%)</title><rect x="450.1" y="371.0" width="22.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="453.1" y="382.0">w..</text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.07%)</title><rect x="472.5" y="499.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="475.5" y="510.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="472.8" y="483.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="475.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.09%)</title><rect x="473.3" y="563.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="476.3" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="473.5" y="547.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="476.5" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="473.5" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="476.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="473.5" y="515.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.5" y="526.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="474.0" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (373 samples, 5.32%)</title><rect x="474.4" y="563.0" width="62.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="477.4" y="574.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (367 samples, 5.24%)</title><rect x="475.0" y="547.0" width="61.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="478.0" y="558.0">ru/mai..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="475.0" y="531.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="478.0" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="475.0" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="478.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="475.0" y="499.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.0" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="475.0" y="483.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.0" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="475.0" y="467.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="478.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (364 samples, 5.20%)</title><rect x="475.5" y="531.0" width="61.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.5" y="542.0">ru/mai..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (364 samples, 5.20%)</title><rect x="475.5" y="515.0" width="61.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.5" y="526.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (364 samples, 5.20%)</title><rect x="475.5" y="499.0" width="61.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.5" y="510.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (363 samples, 5.18%)</title><rect x="475.7" y="483.0" width="61.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="478.7" y="494.0">Java_o..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.03%)</title><rect x="476.0" y="467.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="479.0" y="478.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.03%)</title><rect x="476.5" y="467.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="479.5" y="478.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (353 samples, 5.04%)</title><rect x="477.0" y="467.0" width="59.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="480.0" y="478.0">rocksd..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (28 samples, 0.40%)</title><rect x="477.6" y="451.0" width="4.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="480.6" y="462.0"></text>
</g>
<g>
<title>jni_NewByteArray (20 samples, 0.29%)</title><rect x="478.2" y="435.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="481.2" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="478.9" y="419.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="481.9" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="479.2" y="419.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="482.2" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="479.2" y="403.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="482.2" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="479.2" y="387.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="482.2" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="479.2" y="371.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="482.2" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="479.2" y="355.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="482.2" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (12 samples, 0.17%)</title><rect x="479.6" y="419.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="482.6" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.10%)</title><rect x="480.2" y="403.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="483.2" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.07%)</title><rect x="480.4" y="387.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="483.4" y="398.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.06%)</title><rect x="481.6" y="435.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="484.6" y="446.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.03%)</title><rect x="482.3" y="451.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="485.3" y="462.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="482.6" y="451.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="485.6" y="462.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.06%)</title><rect x="482.9" y="451.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="485.9" y="462.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.04%)</title><rect x="483.1" y="435.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="486.1" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.04%)</title><rect x="483.6" y="451.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="486.6" y="462.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.10%)</title><rect x="484.1" y="451.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="487.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="484.8" y="435.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="487.8" y="446.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="484.8" y="419.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="487.8" y="430.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="485.6" y="451.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="488.6" y="462.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="485.6" y="435.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="488.6" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.04%)</title><rect x="485.6" y="419.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="488.6" y="430.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="485.8" y="403.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="488.8" y="414.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="485.8" y="387.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="488.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (297 samples, 4.24%)</title><rect x="486.1" y="451.0" width="50.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="489.1" y="462.0">rocks..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (295 samples, 4.21%)</title><rect x="486.3" y="435.0" width="49.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="489.3" y="446.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (288 samples, 4.11%)</title><rect x="487.2" y="419.0" width="48.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="490.2" y="430.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (288 samples, 4.11%)</title><rect x="487.2" y="403.0" width="48.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="490.2" y="414.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="487.2" y="387.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="490.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (283 samples, 4.04%)</title><rect x="487.5" y="387.0" width="47.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="490.5" y="398.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="487.8" y="371.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="490.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.04%)</title><rect x="488.3" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="491.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.03%)</title><rect x="488.5" y="355.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="491.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (13 samples, 0.19%)</title><rect x="489.2" y="371.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="492.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.09%)</title><rect x="490.4" y="355.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="493.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="491.0" y="339.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="494.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (258 samples, 3.68%)</title><rect x="491.5" y="371.0" width="43.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="494.5" y="382.0">rock..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (2 samples, 0.03%)</title><rect x="492.9" y="355.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="495.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (2 samples, 0.03%)</title><rect x="493.2" y="355.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="496.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (244 samples, 3.48%)</title><rect x="493.7" y="355.0" width="41.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="496.7" y="366.0">roc..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (4 samples, 0.06%)</title><rect x="494.4" y="339.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="497.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.03%)</title><rect x="495.1" y="339.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="498.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (232 samples, 3.31%)</title><rect x="495.4" y="339.0" width="39.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="498.4" y="350.0">roc..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (14 samples, 0.20%)</title><rect x="496.9" y="323.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="499.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (11 samples, 0.16%)</title><rect x="497.3" y="307.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="500.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (9 samples, 0.13%)</title><rect x="497.6" y="291.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="500.6" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.13%)</title><rect x="497.6" y="275.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="500.6" y="286.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.13%)</title><rect x="497.6" y="259.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="500.6" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (9 samples, 0.13%)</title><rect x="497.6" y="243.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="500.6" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.11%)</title><rect x="497.8" y="227.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="500.8" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.11%)</title><rect x="497.8" y="211.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="500.8" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="498.6" y="195.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="501.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (5 samples, 0.07%)</title><rect x="499.3" y="323.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="502.3" y="334.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.04%)</title><rect x="499.6" y="307.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="502.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (129 samples, 1.84%)</title><rect x="500.5" y="323.0" width="21.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="503.5" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (125 samples, 1.78%)</title><rect x="501.1" y="307.0" width="21.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="504.1" y="318.0">r..</text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (121 samples, 1.73%)</title><rect x="501.6" y="291.0" width="20.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="504.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (40 samples, 0.57%)</title><rect x="502.3" y="275.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="505.3" y="286.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (2 samples, 0.03%)</title><rect x="502.6" y="259.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="505.6" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="503.0" y="259.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="506.0" y="270.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="503.0" y="243.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="506.0" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="503.0" y="227.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="506.0" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="503.0" y="211.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="506.0" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="503.0" y="195.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="506.0" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="503.0" y="179.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="506.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.03%)</title><rect x="503.3" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="506.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheMissMetrics(rocksdb::BlockType, rocksdb::GetContext*) const (2 samples, 0.03%)</title><rect x="503.7" y="259.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="506.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (25 samples, 0.36%)</title><rect x="504.3" y="259.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="507.3" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="505.2" y="243.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="508.2" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="505.5" y="243.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="508.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (9 samples, 0.13%)</title><rect x="506.0" y="243.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="509.0" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (9 samples, 0.13%)</title><rect x="506.0" y="227.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="509.0" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (9 samples, 0.13%)</title><rect x="506.0" y="211.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="509.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (6 samples, 0.09%)</title><rect x="507.5" y="243.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="510.5" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (6 samples, 0.09%)</title><rect x="507.5" y="227.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="510.5" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (6 samples, 0.09%)</title><rect x="507.5" y="211.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="510.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (3 samples, 0.04%)</title><rect x="508.5" y="259.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="511.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (2 samples, 0.03%)</title><rect x="508.7" y="243.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="511.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (2 samples, 0.03%)</title><rect x="508.7" y="227.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="511.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (75 samples, 1.07%)</title><rect x="509.0" y="275.0" width="12.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="512.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (20 samples, 0.29%)</title><rect x="509.2" y="259.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="512.2" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (20 samples, 0.29%)</title><rect x="509.2" y="243.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="512.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (51 samples, 0.73%)</title><rect x="512.6" y="259.0" width="8.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="515.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (51 samples, 0.73%)</title><rect x="512.6" y="243.0" width="8.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="515.6" y="254.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (50 samples, 0.71%)</title><rect x="512.8" y="227.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="515.8" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (50 samples, 0.71%)</title><rect x="512.8" y="211.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="515.8" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (49 samples, 0.70%)</title><rect x="512.8" y="195.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="515.8" y="206.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (48 samples, 0.69%)</title><rect x="512.9" y="179.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="515.9" y="190.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (45 samples, 0.64%)</title><rect x="513.4" y="163.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="516.4" y="174.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.03%)</title><rect x="515.4" y="147.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="518.4" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (23 samples, 0.33%)</title><rect x="516.1" y="147.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="519.1" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::Produced() const (2 samples, 0.03%)</title><rect x="517.1" y="131.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="520.1" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (15 samples, 0.21%)</title><rect x="517.5" y="131.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="520.5" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (5 samples, 0.07%)</title><rect x="519.2" y="115.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="522.2" y="126.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::TryFastAppend(char const*, unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="520.0" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="523.0" y="158.0"></text>
</g>
<g>
<title>std::__1::_DeallocateCaller::__do_call(void*) (2 samples, 0.03%)</title><rect x="520.0" y="131.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="523.0" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::TryFastAppend(char const*, unsigned long, unsigned long) (4 samples, 0.06%)</title><rect x="520.3" y="147.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="523.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.04%)</title><rect x="521.2" y="259.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="524.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (2 samples, 0.03%)</title><rect x="521.7" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="524.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (7 samples, 0.10%)</title><rect x="522.4" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="525.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (5 samples, 0.07%)</title><rect x="522.5" y="307.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="525.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.04%)</title><rect x="522.9" y="291.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="525.9" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.04%)</title><rect x="522.9" y="275.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="525.9" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.04%)</title><rect x="522.9" y="259.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="525.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (30 samples, 0.43%)</title><rect x="523.7" y="323.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="526.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (27 samples, 0.39%)</title><rect x="523.7" y="307.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="526.7" y="318.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="525.0" y="291.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="528.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (6 samples, 0.09%)</title><rect x="525.4" y="291.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="528.4" y="302.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="525.9" y="275.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="528.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (11 samples, 0.16%)</title><rect x="526.4" y="291.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="529.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.06%)</title><rect x="527.4" y="275.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="530.4" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.04%)</title><rect x="527.6" y="259.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="530.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (2 samples, 0.03%)</title><rect x="528.4" y="307.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="531.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (33 samples, 0.47%)</title><rect x="528.9" y="323.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="531.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (30 samples, 0.43%)</title><rect x="529.4" y="307.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="532.4" y="318.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (4 samples, 0.06%)</title><rect x="532.0" y="291.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="535.0" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="532.0" y="275.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="535.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.03%)</title><rect x="533.0" y="291.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="536.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (3 samples, 0.04%)</title><rect x="533.3" y="291.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="536.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (3 samples, 0.04%)</title><rect x="533.3" y="275.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="536.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (2 samples, 0.03%)</title><rect x="533.5" y="259.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="536.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.06%)</title><rect x="533.8" y="291.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="536.8" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="535.7" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="538.7" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.03%)</title><rect x="536.5" y="467.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="539.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (2 samples, 0.03%)</title><rect x="536.8" y="547.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="539.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (2 samples, 0.03%)</title><rect x="536.8" y="531.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.07%)</title><rect x="537.2" y="579.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="540.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.07%)</title><rect x="537.2" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.07%)</title><rect x="537.2" y="547.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="540.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.07%)</title><rect x="537.2" y="531.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="540.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.03%)</title><rect x="538.0" y="611.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="541.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.03%)</title><rect x="538.0" y="595.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="541.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.06%)</title><rect x="538.4" y="611.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="541.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="538.7" y="595.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="541.7" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="538.7" y="579.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="541.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="538.7" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="541.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.03%)</title><rect x="538.7" y="547.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="541.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (52 samples, 0.74%)</title><rect x="539.4" y="627.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="542.4" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (51 samples, 0.73%)</title><rect x="539.5" y="611.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="542.5" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="539.5" y="595.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="542.5" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="539.5" y="579.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="539.5" y="563.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="542.5" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="539.5" y="547.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="542.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="539.7" y="531.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="542.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="539.7" y="515.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="542.7" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.03%)</title><rect x="539.7" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="542.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (48 samples, 0.69%)</title><rect x="540.0" y="595.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.07%)</title><rect x="540.0" y="579.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.06%)</title><rect x="540.0" y="563.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="543.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.04%)</title><rect x="540.2" y="547.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="543.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.04%)</title><rect x="540.2" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="543.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.03%)</title><rect x="540.2" y="515.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="543.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (43 samples, 0.61%)</title><rect x="540.9" y="579.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="543.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (43 samples, 0.61%)</title><rect x="540.9" y="563.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="543.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (42 samples, 0.60%)</title><rect x="540.9" y="547.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="543.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (42 samples, 0.60%)</title><rect x="540.9" y="531.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="543.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (42 samples, 0.60%)</title><rect x="540.9" y="515.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="543.9" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (41 samples, 0.59%)</title><rect x="541.1" y="499.0" width="6.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="544.1" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=38403] (868 samples, 12.39%)</title><rect x="548.3" y="691.0" width="146.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="551.3" y="702.0">[NIO Selector #3 t..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (867 samples, 12.38%)</title><rect x="548.5" y="675.0" width="146.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="551.5" y="686.0">one/nio/server/Sel..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (297 samples, 4.24%)</title><rect x="549.0" y="659.0" width="50.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.0" y="670.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (6 samples, 0.09%)</title><rect x="549.1" y="643.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.03%)</title><rect x="549.8" y="627.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (2 samples, 0.03%)</title><rect x="549.8" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="552.8" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (290 samples, 4.14%)</title><rect x="550.1" y="643.0" width="48.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="553.1" y="654.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (290 samples, 4.14%)</title><rect x="550.1" y="627.0" width="48.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.1" y="638.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (290 samples, 4.14%)</title><rect x="550.1" y="611.0" width="48.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="553.1" y="622.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (279 samples, 3.98%)</title><rect x="550.1" y="595.0" width="47.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.1" y="606.0">sun/..</text>
</g>
<g>
<title>kevent (273 samples, 3.90%)</title><rect x="551.2" y="579.0" width="45.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="554.2" y="590.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.07%)</title><rect x="597.1" y="595.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="600.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.07%)</title><rect x="597.1" y="579.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="600.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.06%)</title><rect x="597.1" y="563.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="600.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.06%)</title><rect x="597.1" y="547.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="600.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.06%)</title><rect x="597.1" y="531.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="600.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.03%)</title><rect x="597.1" y="515.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="600.1" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.03%)</title><rect x="597.5" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="600.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (5 samples, 0.07%)</title><rect x="598.1" y="595.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="601.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.03%)</title><rect x="598.7" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="601.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.03%)</title><rect x="598.7" y="563.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="601.7" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (566 samples, 8.08%)</title><rect x="599.0" y="659.0" width="95.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="602.0" y="670.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (565 samples, 8.06%)</title><rect x="599.2" y="643.0" width="95.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="602.2" y="654.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (514 samples, 7.34%)</title><rect x="599.2" y="627.0" width="86.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="602.2" y="638.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (500 samples, 7.14%)</title><rect x="599.5" y="611.0" width="84.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="602.5" y="622.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (500 samples, 7.14%)</title><rect x="599.5" y="595.0" width="84.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="602.5" y="606.0">one/nio/ht..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (493 samples, 7.04%)</title><rect x="599.5" y="579.0" width="83.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="602.5" y="590.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (150 samples, 2.14%)</title><rect x="599.5" y="563.0" width="25.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="602.5" y="574.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (150 samples, 2.14%)</title><rect x="599.5" y="547.0" width="25.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="602.5" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.17%)</title><rect x="599.5" y="531.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="602.5" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.10%)</title><rect x="600.3" y="515.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="603.3" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.10%)</title><rect x="600.3" y="499.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="603.3" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.10%)</title><rect x="600.3" y="483.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="603.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (138 samples, 1.97%)</title><rect x="601.5" y="531.0" width="23.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="604.5" y="542.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (138 samples, 1.97%)</title><rect x="601.5" y="515.0" width="23.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="604.5" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (134 samples, 1.91%)</title><rect x="601.5" y="499.0" width="22.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="604.5" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (134 samples, 1.91%)</title><rect x="601.5" y="483.0" width="22.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="604.5" y="494.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (134 samples, 1.91%)</title><rect x="601.5" y="467.0" width="22.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="604.5" y="478.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="601.5" y="451.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="604.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="601.5" y="435.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="604.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="601.5" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="604.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="601.5" y="403.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="604.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="601.5" y="387.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="604.5" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="601.5" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="604.5" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="601.5" y="355.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="604.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (132 samples, 1.88%)</title><rect x="601.9" y="451.0" width="22.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="604.9" y="462.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (132 samples, 1.88%)</title><rect x="601.9" y="435.0" width="22.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="604.9" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (132 samples, 1.88%)</title><rect x="601.9" y="419.0" width="22.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="604.9" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (3 samples, 0.04%)</title><rect x="601.9" y="403.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="604.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (129 samples, 1.84%)</title><rect x="602.4" y="403.0" width="21.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="605.4" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (128 samples, 1.83%)</title><rect x="602.5" y="387.0" width="21.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="605.5" y="398.0">s..</text>
</g>
<g>
<title>write (125 samples, 1.78%)</title><rect x="603.0" y="371.0" width="21.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="606.0" y="382.0">w..</text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.06%)</title><rect x="624.1" y="499.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="627.1" y="510.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="624.4" y="483.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="627.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (342 samples, 4.88%)</title><rect x="624.9" y="563.0" width="57.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="627.9" y="574.0">ru/mai..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="625.1" y="547.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="628.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (339 samples, 4.84%)</title><rect x="625.4" y="547.0" width="57.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.4" y="558.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (6 samples, 0.09%)</title><rect x="625.8" y="531.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="628.8" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="626.4" y="515.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (331 samples, 4.72%)</title><rect x="626.8" y="531.0" width="55.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="629.8" y="542.0">ru/ma..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (329 samples, 4.70%)</title><rect x="626.9" y="515.0" width="55.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="629.9" y="526.0">org/r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (329 samples, 4.70%)</title><rect x="626.9" y="499.0" width="55.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="629.9" y="510.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (329 samples, 4.70%)</title><rect x="626.9" y="483.0" width="55.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="629.9" y="494.0">Java_..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (325 samples, 4.64%)</title><rect x="627.5" y="467.0" width="54.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="630.5" y="478.0">rocks..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="627.6" y="451.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="630.6" y="462.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (20 samples, 0.29%)</title><rect x="628.1" y="451.0" width="3.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="631.1" y="462.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="628.5" y="435.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="631.5" y="446.0"></text>
</g>
<g>
<title>jni_NewByteArray (12 samples, 0.17%)</title><rect x="629.0" y="435.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="632.0" y="446.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="629.1" y="419.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="632.1" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.10%)</title><rect x="629.6" y="419.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="632.6" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.09%)</title><rect x="629.8" y="403.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="632.8" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.07%)</title><rect x="630.0" y="387.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="633.0" y="398.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.04%)</title><rect x="631.0" y="435.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="634.0" y="446.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.06%)</title><rect x="631.7" y="451.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="634.7" y="462.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="632.0" y="435.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="635.0" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="632.3" y="451.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="635.3" y="462.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.07%)</title><rect x="632.7" y="451.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="635.7" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="632.8" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="635.8" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="632.8" y="419.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="635.8" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="632.8" y="403.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="635.8" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="632.8" y="387.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="635.8" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="632.8" y="371.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="635.8" y="382.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.06%)</title><rect x="633.7" y="451.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="636.7" y="462.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="633.9" y="435.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="636.9" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="634.0" y="419.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="637.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (282 samples, 4.03%)</title><rect x="634.4" y="451.0" width="47.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="637.4" y="462.0">rock..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (280 samples, 4.00%)</title><rect x="634.7" y="435.0" width="47.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="637.7" y="446.0">rock..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (5 samples, 0.07%)</title><rect x="635.2" y="419.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="638.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.04%)</title><rect x="635.4" y="403.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="638.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (272 samples, 3.88%)</title><rect x="636.0" y="419.0" width="45.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="639.0" y="430.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (271 samples, 3.87%)</title><rect x="636.2" y="403.0" width="45.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="639.2" y="414.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (267 samples, 3.81%)</title><rect x="636.5" y="387.0" width="45.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="639.5" y="398.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="636.9" y="371.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="639.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.04%)</title><rect x="637.6" y="371.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="640.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.03%)</title><rect x="637.6" y="355.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="640.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (8 samples, 0.11%)</title><rect x="638.2" y="371.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="641.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.09%)</title><rect x="638.6" y="355.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="641.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="639.1" y="339.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="642.1" y="350.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="639.1" y="323.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="642.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (246 samples, 3.51%)</title><rect x="639.9" y="371.0" width="41.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="642.9" y="382.0">roc..</text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (2 samples, 0.03%)</title><rect x="641.4" y="355.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="644.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (234 samples, 3.34%)</title><rect x="641.9" y="355.0" width="39.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="644.9" y="366.0">roc..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (224 samples, 3.20%)</title><rect x="643.5" y="339.0" width="37.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="646.5" y="350.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="644.8" y="323.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="647.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (14 samples, 0.20%)</title><rect x="645.8" y="323.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="648.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (11 samples, 0.16%)</title><rect x="646.0" y="307.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="649.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (9 samples, 0.13%)</title><rect x="646.3" y="291.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="649.3" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.11%)</title><rect x="646.5" y="275.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="649.5" y="286.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.11%)</title><rect x="646.5" y="259.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="649.5" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.11%)</title><rect x="646.5" y="243.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="649.5" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.09%)</title><rect x="646.7" y="227.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="649.7" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.07%)</title><rect x="646.8" y="211.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="649.8" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="647.3" y="195.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="650.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (2 samples, 0.03%)</title><rect x="647.8" y="307.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="650.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (5 samples, 0.07%)</title><rect x="648.2" y="323.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="651.2" y="334.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.04%)</title><rect x="648.5" y="307.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="651.5" y="318.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="648.7" y="291.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="651.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (2 samples, 0.03%)</title><rect x="649.0" y="323.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="652.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (127 samples, 1.81%)</title><rect x="649.5" y="323.0" width="21.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="652.5" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (121 samples, 1.73%)</title><rect x="650.4" y="307.0" width="20.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="653.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (2 samples, 0.03%)</title><rect x="650.5" y="291.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="653.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (115 samples, 1.64%)</title><rect x="650.9" y="291.0" width="19.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="653.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (32 samples, 0.46%)</title><rect x="652.0" y="275.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="655.0" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.06%)</title><rect x="652.9" y="259.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="655.9" y="270.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.06%)</title><rect x="652.9" y="243.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="655.9" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.06%)</title><rect x="652.9" y="227.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="655.9" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="653.1" y="211.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="656.1" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="653.1" y="195.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="656.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.03%)</title><rect x="653.6" y="259.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="656.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (16 samples, 0.23%)</title><rect x="654.1" y="259.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="657.1" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.06%)</title><rect x="654.2" y="243.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="657.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (8 samples, 0.11%)</title><rect x="655.1" y="243.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="658.1" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (8 samples, 0.11%)</title><rect x="655.1" y="227.0" width="1.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="658.1" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (8 samples, 0.11%)</title><rect x="655.1" y="211.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="658.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.03%)</title><rect x="656.4" y="243.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="659.4" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.03%)</title><rect x="656.4" y="227.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="659.4" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.03%)</title><rect x="656.4" y="211.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="659.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (3 samples, 0.04%)</title><rect x="656.8" y="259.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="659.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (3 samples, 0.04%)</title><rect x="656.8" y="243.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="659.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (75 samples, 1.07%)</title><rect x="657.4" y="275.0" width="12.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="660.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (16 samples, 0.23%)</title><rect x="657.8" y="259.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="660.8" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (15 samples, 0.21%)</title><rect x="657.8" y="243.0" width="2.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="660.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (53 samples, 0.76%)</title><rect x="660.5" y="259.0" width="8.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="663.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (52 samples, 0.74%)</title><rect x="660.6" y="243.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="663.6" y="254.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (50 samples, 0.71%)</title><rect x="661.0" y="227.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="664.0" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (49 samples, 0.70%)</title><rect x="661.1" y="211.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="664.1" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (49 samples, 0.70%)</title><rect x="661.1" y="195.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="664.1" y="206.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (49 samples, 0.70%)</title><rect x="661.1" y="179.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="664.1" y="190.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.03%)</title><rect x="661.1" y="163.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="664.1" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (45 samples, 0.64%)</title><rect x="661.8" y="163.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="664.8" y="174.0"></text>
</g>
<g>
<title>snappy::LittleEndian::Load32(void const*) (2 samples, 0.03%)</title><rect x="664.2" y="147.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="667.2" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (25 samples, 0.36%)</title><rect x="664.5" y="147.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="667.5" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (16 samples, 0.23%)</title><rect x="666.0" y="131.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="669.0" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (7 samples, 0.10%)</title><rect x="667.5" y="115.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="670.5" y="126.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::TryFastAppend(char const*, unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="668.7" y="147.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="671.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.06%)</title><rect x="669.4" y="259.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="672.4" y="270.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (3 samples, 0.04%)</title><rect x="670.2" y="291.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="673.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (6 samples, 0.09%)</title><rect x="671.1" y="323.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="674.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (4 samples, 0.06%)</title><rect x="671.4" y="307.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="674.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.03%)</title><rect x="671.6" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="674.6" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.03%)</title><rect x="671.6" y="275.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="674.6" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.03%)</title><rect x="671.6" y="259.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="674.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.03%)</title><rect x="672.1" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="675.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (27 samples, 0.39%)</title><rect x="672.4" y="323.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="675.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (24 samples, 0.34%)</title><rect x="672.6" y="307.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="675.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (6 samples, 0.09%)</title><rect x="674.1" y="291.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="677.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (9 samples, 0.13%)</title><rect x="675.1" y="291.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="678.1" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="675.8" y="275.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="678.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="676.1" y="275.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="679.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (23 samples, 0.33%)</title><rect x="677.3" y="323.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="680.3" y="334.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (2 samples, 0.03%)</title><rect x="677.5" y="307.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="680.5" y="318.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="677.8" y="307.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="680.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (18 samples, 0.26%)</title><rect x="678.2" y="307.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="681.2" y="318.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (2 samples, 0.03%)</title><rect x="679.7" y="291.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="682.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (4 samples, 0.06%)</title><rect x="680.3" y="291.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="683.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.03%)</title><rect x="680.7" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="683.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.09%)</title><rect x="682.5" y="579.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="685.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.09%)</title><rect x="682.5" y="563.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.09%)</title><rect x="682.5" y="547.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="685.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.equals (6 samples, 0.09%)</title><rect x="682.5" y="531.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.03%)</title><rect x="683.0" y="515.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="686.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.09%)</title><rect x="683.7" y="611.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.7" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.09%)</title><rect x="683.7" y="595.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="686.7" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.07%)</title><rect x="683.9" y="579.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="686.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.06%)</title><rect x="684.7" y="611.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="687.7" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="685.1" y="595.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.1" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="685.1" y="579.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="688.1" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (51 samples, 0.73%)</title><rect x="685.7" y="627.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="688.7" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (51 samples, 0.73%)</title><rect x="685.7" y="611.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="688.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (51 samples, 0.73%)</title><rect x="685.7" y="595.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="688.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (49 samples, 0.70%)</title><rect x="685.7" y="579.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (49 samples, 0.70%)</title><rect x="685.7" y="563.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="688.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (47 samples, 0.67%)</title><rect x="685.9" y="547.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (47 samples, 0.67%)</title><rect x="685.9" y="531.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="688.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (47 samples, 0.67%)</title><rect x="685.9" y="515.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.9" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (43 samples, 0.61%)</title><rect x="686.6" y="499.0" width="7.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="689.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (2 samples, 0.03%)</title><rect x="694.0" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="697.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (2 samples, 0.03%)</title><rect x="694.0" y="563.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="697.0" y="574.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=37891] (890 samples, 12.70%)</title><rect x="694.5" y="691.0" width="149.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="697.5" y="702.0">[NIO Selector #4 ti..</text>
</g>
<g>
<title>[unknown_Java] (9 samples, 0.13%)</title><rect x="694.7" y="675.0" width="1.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="697.7" y="686.0"></text>
</g>
<g>
<title>Interpreter (2 samples, 0.03%)</title><rect x="694.7" y="659.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="697.7" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (7 samples, 0.10%)</title><rect x="695.0" y="659.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="698.0" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.06%)</title><rect x="695.0" y="643.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="698.0" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.04%)</title><rect x="695.0" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="698.0" y="638.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (2 samples, 0.03%)</title><rect x="695.8" y="643.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="698.8" y="654.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (880 samples, 12.56%)</title><rect x="696.2" y="675.0" width="148.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="699.2" y="686.0">one/nio/server/Sele..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (323 samples, 4.61%)</title><rect x="696.5" y="659.0" width="54.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="699.5" y="670.0">one/n..</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.03%)</title><rect x="698.7" y="643.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="701.7" y="654.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (7 samples, 0.10%)</title><rect x="699.2" y="643.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="702.2" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.07%)</title><rect x="699.5" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="702.5" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.07%)</title><rect x="700.4" y="643.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="703.4" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (295 samples, 4.21%)</title><rect x="701.2" y="643.0" width="49.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.2" y="654.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (293 samples, 4.18%)</title><rect x="701.6" y="627.0" width="49.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="704.6" y="638.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (293 samples, 4.18%)</title><rect x="701.6" y="611.0" width="49.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="704.6" y="622.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (277 samples, 3.95%)</title><rect x="701.7" y="595.0" width="46.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="704.7" y="606.0">sun/..</text>
</g>
<g>
<title>kevent (261 samples, 3.73%)</title><rect x="704.4" y="579.0" width="44.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="707.4" y="590.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.07%)</title><rect x="748.4" y="595.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="751.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="748.6" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="751.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="748.6" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="751.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="748.9" y="579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="751.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="748.9" y="563.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="751.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="748.9" y="547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="751.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="748.9" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="751.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="749.2" y="595.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (8 samples, 0.11%)</title><rect x="749.6" y="595.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.6" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (8 samples, 0.11%)</title><rect x="749.6" y="579.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="752.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.03%)</title><rect x="749.6" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="752.6" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.09%)</title><rect x="749.9" y="563.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="752.9" y="574.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.09%)</title><rect x="749.9" y="547.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.09%)</title><rect x="749.9" y="531.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="752.9" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (555 samples, 7.92%)</title><rect x="750.9" y="659.0" width="93.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="753.9" y="670.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (555 samples, 7.92%)</title><rect x="750.9" y="643.0" width="93.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="753.9" y="654.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (504 samples, 7.19%)</title><rect x="751.1" y="627.0" width="84.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="754.1" y="638.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (495 samples, 7.07%)</title><rect x="751.8" y="611.0" width="83.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="754.8" y="622.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (494 samples, 7.05%)</title><rect x="751.9" y="595.0" width="83.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="754.9" y="606.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (487 samples, 6.95%)</title><rect x="751.9" y="579.0" width="82.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="754.9" y="590.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (157 samples, 2.24%)</title><rect x="751.9" y="563.0" width="26.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="754.9" y="574.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (156 samples, 2.23%)</title><rect x="751.9" y="547.0" width="26.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="754.9" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.14%)</title><rect x="751.9" y="531.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="754.9" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.10%)</title><rect x="752.4" y="515.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="755.4" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.10%)</title><rect x="752.4" y="499.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="755.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.10%)</title><rect x="752.4" y="483.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.4" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (146 samples, 2.08%)</title><rect x="753.6" y="531.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="756.6" y="542.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (146 samples, 2.08%)</title><rect x="753.6" y="515.0" width="24.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="756.6" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (143 samples, 2.04%)</title><rect x="753.9" y="499.0" width="24.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="756.9" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (143 samples, 2.04%)</title><rect x="753.9" y="483.0" width="24.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.9" y="494.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (142 samples, 2.03%)</title><rect x="754.1" y="467.0" width="23.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="757.1" y="478.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="754.1" y="451.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="757.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="754.1" y="435.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="757.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="754.1" y="419.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="754.1" y="403.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="757.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="754.1" y="387.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="757.1" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="754.1" y="371.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="757.1" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="754.1" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="757.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (140 samples, 2.00%)</title><rect x="754.4" y="451.0" width="23.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="757.4" y="462.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (139 samples, 1.98%)</title><rect x="754.6" y="435.0" width="23.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.6" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (139 samples, 1.98%)</title><rect x="754.6" y="419.0" width="23.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.6" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (4 samples, 0.06%)</title><rect x="754.6" y="403.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="757.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (135 samples, 1.93%)</title><rect x="755.3" y="403.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="758.3" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (131 samples, 1.87%)</title><rect x="756.0" y="387.0" width="22.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="759.0" y="398.0">s..</text>
</g>
<g>
<title>write (128 samples, 1.83%)</title><rect x="756.5" y="371.0" width="21.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="759.5" y="382.0">w..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.03%)</title><rect x="778.4" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="781.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (328 samples, 4.68%)</title><rect x="778.7" y="563.0" width="55.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="781.7" y="574.0">ru/ma..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="778.9" y="547.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="781.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (325 samples, 4.64%)</title><rect x="779.2" y="547.0" width="54.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="782.2" y="558.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (323 samples, 4.61%)</title><rect x="779.5" y="531.0" width="54.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="782.5" y="542.0">ru/ma..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (321 samples, 4.58%)</title><rect x="779.5" y="515.0" width="54.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="782.5" y="526.0">org/r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (321 samples, 4.58%)</title><rect x="779.5" y="499.0" width="54.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="782.5" y="510.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (318 samples, 4.54%)</title><rect x="780.0" y="483.0" width="53.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="783.0" y="494.0">Java_..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (314 samples, 4.48%)</title><rect x="780.7" y="467.0" width="52.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="783.7" y="478.0">rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (38 samples, 0.54%)</title><rect x="781.2" y="451.0" width="6.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="784.2" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.03%)</title><rect x="782.1" y="435.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="785.1" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="782.7" y="435.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="785.7" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="782.7" y="419.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="785.7" y="430.0"></text>
</g>
<g>
<title>jni_NewByteArray (23 samples, 0.33%)</title><rect x="783.1" y="435.0" width="3.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="786.1" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="783.6" y="419.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="786.6" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.07%)</title><rect x="783.9" y="419.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="786.9" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.06%)</title><rect x="784.1" y="403.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="787.1" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.06%)</title><rect x="784.1" y="387.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="787.1" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.06%)</title><rect x="784.1" y="371.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="787.1" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="784.1" y="355.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="787.1" y="366.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.03%)</title><rect x="784.1" y="339.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="787.1" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (13 samples, 0.19%)</title><rect x="784.8" y="419.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="787.8" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (9 samples, 0.13%)</title><rect x="785.1" y="403.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="788.1" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.10%)</title><rect x="785.4" y="387.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="788.4" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.03%)</title><rect x="785.6" y="371.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="788.6" y="382.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (2 samples, 0.03%)</title><rect x="785.6" y="355.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="788.6" y="366.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_dtrace_sampler() (2 samples, 0.03%)</title><rect x="785.9" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="788.9" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="786.6" y="403.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="789.6" y="414.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.04%)</title><rect x="787.0" y="435.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="790.0" y="446.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.07%)</title><rect x="787.8" y="451.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="790.8" y="462.0"></text>
</g>
<g>
<title>tiny_free_no_lock (5 samples, 0.07%)</title><rect x="787.8" y="435.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="790.8" y="446.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.04%)</title><rect x="788.1" y="419.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="791.1" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.13%)</title><rect x="788.6" y="451.0" width="1.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="791.6" y="462.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="789.0" y="435.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="792.0" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="789.3" y="435.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="792.3" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="789.3" y="419.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="792.3" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="789.3" y="403.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="792.3" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="789.3" y="387.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="792.3" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="789.3" y="371.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="792.3" y="382.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.03%)</title><rect x="789.8" y="435.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="792.8" y="446.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.06%)</title><rect x="790.2" y="451.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="793.2" y="462.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.06%)</title><rect x="790.2" y="435.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="793.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (252 samples, 3.60%)</title><rect x="790.8" y="451.0" width="42.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="793.8" y="462.0">rock..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (250 samples, 3.57%)</title><rect x="791.2" y="435.0" width="42.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="794.2" y="446.0">rock..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (5 samples, 0.07%)</title><rect x="791.5" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="794.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.04%)</title><rect x="791.7" y="403.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="794.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.04%)</title><rect x="791.7" y="387.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="794.7" y="398.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.04%)</title><rect x="791.7" y="371.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="794.7" y="382.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.04%)</title><rect x="791.7" y="355.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="794.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (240 samples, 3.43%)</title><rect x="792.3" y="419.0" width="40.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="795.3" y="430.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (240 samples, 3.43%)</title><rect x="792.3" y="403.0" width="40.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="795.3" y="414.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (237 samples, 3.38%)</title><rect x="792.5" y="387.0" width="39.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="795.5" y="398.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="793.0" y="371.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="796.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="793.7" y="371.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="796.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.03%)</title><rect x="793.7" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="796.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (15 samples, 0.21%)</title><rect x="794.2" y="371.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="797.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.14%)</title><rect x="795.0" y="355.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="796.4" y="339.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="799.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="796.4" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="799.4" y="334.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="796.4" y="307.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="799.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.03%)</title><rect x="796.9" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="799.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (208 samples, 2.97%)</title><rect x="797.4" y="371.0" width="35.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="800.4" y="382.0">roc..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (2 samples, 0.03%)</title><rect x="798.6" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="801.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (198 samples, 2.83%)</title><rect x="798.9" y="355.0" width="33.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="801.9" y="366.0">ro..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (191 samples, 2.73%)</title><rect x="799.2" y="339.0" width="32.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="802.2" y="350.0">ro..</text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="800.6" y="323.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="803.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (12 samples, 0.17%)</title><rect x="800.9" y="323.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="803.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (10 samples, 0.14%)</title><rect x="801.1" y="307.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="804.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (8 samples, 0.11%)</title><rect x="801.4" y="291.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="804.4" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.11%)</title><rect x="801.4" y="275.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="804.4" y="286.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.11%)</title><rect x="801.4" y="259.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="804.4" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.11%)</title><rect x="801.4" y="243.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="804.4" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (7 samples, 0.10%)</title><rect x="801.6" y="227.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="804.6" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (7 samples, 0.10%)</title><rect x="801.6" y="211.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="804.6" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="802.3" y="195.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="805.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.06%)</title><rect x="803.0" y="323.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="806.0" y="334.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="803.3" y="307.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="806.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (103 samples, 1.47%)</title><rect x="803.8" y="323.0" width="17.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="806.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (101 samples, 1.44%)</title><rect x="804.1" y="307.0" width="17.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="807.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (96 samples, 1.37%)</title><rect x="804.8" y="291.0" width="16.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="807.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (32 samples, 0.46%)</title><rect x="805.6" y="275.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="808.6" y="286.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (2 samples, 0.03%)</title><rect x="805.8" y="259.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="808.8" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="806.2" y="259.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="809.2" y="270.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="806.2" y="243.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="809.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (17 samples, 0.24%)</title><rect x="806.8" y="259.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="809.8" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.04%)</title><rect x="807.5" y="243.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="810.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (6 samples, 0.09%)</title><rect x="808.2" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="811.2" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.09%)</title><rect x="808.2" y="227.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="811.2" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.09%)</title><rect x="808.2" y="211.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="811.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (3 samples, 0.04%)</title><rect x="809.2" y="243.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="812.2" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.04%)</title><rect x="809.2" y="227.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="812.2" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.04%)</title><rect x="809.2" y="211.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="812.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (3 samples, 0.04%)</title><rect x="809.7" y="259.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="812.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (3 samples, 0.04%)</title><rect x="809.7" y="243.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="812.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (5 samples, 0.07%)</title><rect x="810.2" y="259.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="813.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (56 samples, 0.80%)</title><rect x="811.0" y="275.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="814.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (10 samples, 0.14%)</title><rect x="811.0" y="259.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="814.0" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (10 samples, 0.14%)</title><rect x="811.0" y="243.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="814.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (41 samples, 0.59%)</title><rect x="812.7" y="259.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="815.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (41 samples, 0.59%)</title><rect x="812.7" y="243.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="815.7" y="254.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (41 samples, 0.59%)</title><rect x="812.7" y="227.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="815.7" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (41 samples, 0.59%)</title><rect x="812.7" y="211.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="815.7" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (41 samples, 0.59%)</title><rect x="812.7" y="195.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="815.7" y="206.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (40 samples, 0.57%)</title><rect x="812.9" y="179.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="815.9" y="190.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.03%)</title><rect x="812.9" y="163.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="815.9" y="174.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::TryFastAppend(char const*, unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="813.2" y="163.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="816.2" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (35 samples, 0.50%)</title><rect x="813.7" y="163.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="816.7" y="174.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (4 samples, 0.06%)</title><rect x="815.1" y="147.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="818.1" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (14 samples, 0.20%)</title><rect x="816.1" y="147.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="819.1" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (10 samples, 0.14%)</title><rect x="816.8" y="131.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.8" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (3 samples, 0.04%)</title><rect x="817.9" y="115.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="820.9" y="126.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::TryFastAppend(char const*, unsigned long, unsigned long) (5 samples, 0.07%)</title><rect x="818.4" y="147.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="821.4" y="158.0"></text>
</g>
<g>
<title>std::__1::_DeallocateCaller::__do_call(void*) (4 samples, 0.06%)</title><rect x="818.6" y="131.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="821.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (5 samples, 0.07%)</title><rect x="819.6" y="259.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="822.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (4 samples, 0.06%)</title><rect x="821.3" y="323.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="824.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.04%)</title><rect x="821.3" y="307.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="824.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.03%)</title><rect x="821.5" y="291.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="824.5" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.03%)</title><rect x="821.5" y="275.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="824.5" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.03%)</title><rect x="821.5" y="259.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="824.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (27 samples, 0.39%)</title><rect x="822.0" y="323.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="825.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (27 samples, 0.39%)</title><rect x="822.0" y="307.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="825.0" y="318.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="822.8" y="291.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="825.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (11 samples, 0.16%)</title><rect x="823.3" y="291.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="826.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (8 samples, 0.11%)</title><rect x="825.2" y="291.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="828.2" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="825.4" y="275.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="828.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.07%)</title><rect x="825.7" y="275.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="828.7" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="826.2" y="259.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="829.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (5 samples, 0.07%)</title><rect x="826.5" y="323.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="829.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (21 samples, 0.30%)</title><rect x="827.5" y="323.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="830.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (3 samples, 0.04%)</title><rect x="828.1" y="307.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="831.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (15 samples, 0.21%)</title><rect x="828.6" y="307.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="831.6" y="318.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (3 samples, 0.04%)</title><rect x="829.6" y="291.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="832.6" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="829.7" y="275.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="832.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (5 samples, 0.07%)</title><rect x="830.1" y="291.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="833.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.06%)</title><rect x="830.2" y="275.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="833.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (3 samples, 0.04%)</title><rect x="830.4" y="259.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="833.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (2 samples, 0.03%)</title><rect x="831.9" y="339.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="834.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.03%)</title><rect x="833.6" y="515.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.6" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="833.6" y="499.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="836.6" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="833.6" y="483.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="836.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="833.6" y="467.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="836.6" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="833.6" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="836.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.10%)</title><rect x="833.9" y="579.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="836.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.10%)</title><rect x="833.9" y="563.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="836.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.09%)</title><rect x="833.9" y="547.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="836.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.equals (6 samples, 0.09%)</title><rect x="833.9" y="531.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="836.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.06%)</title><rect x="835.3" y="611.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="838.3" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (50 samples, 0.71%)</title><rect x="836.0" y="627.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="839.0" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (50 samples, 0.71%)</title><rect x="836.0" y="611.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="839.0" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.07%)</title><rect x="836.0" y="595.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="839.0" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="836.0" y="579.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="839.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="836.0" y="563.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="839.0" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="836.0" y="547.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="839.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.07%)</title><rect x="836.0" y="531.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="839.0" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="836.3" y="515.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.3" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.04%)</title><rect x="836.3" y="499.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="839.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (45 samples, 0.64%)</title><rect x="836.8" y="595.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="836.8" y="579.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="839.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 0.60%)</title><rect x="837.3" y="579.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="840.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 0.60%)</title><rect x="837.3" y="563.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="840.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.04%)</title><rect x="837.7" y="547.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="840.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (37 samples, 0.53%)</title><rect x="838.2" y="547.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="841.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (37 samples, 0.53%)</title><rect x="838.2" y="531.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (37 samples, 0.53%)</title><rect x="838.2" y="515.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="841.2" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (35 samples, 0.50%)</title><rect x="838.5" y="499.0" width="5.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="841.5" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=25859] (778 samples, 11.10%)</title><rect x="844.4" y="691.0" width="131.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="847.4" y="702.0">[NIO Selector #5..</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.03%)</title><rect x="844.4" y="675.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="847.4" y="686.0"></text>
</g>
<g>
<title>nmethod::verified_entry_point() const (2 samples, 0.03%)</title><rect x="844.4" y="659.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="847.4" y="670.0"></text>
</g>
<g>
<title>[unknown_Java] (11 samples, 0.16%)</title><rect x="844.7" y="675.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="847.7" y="686.0"></text>
</g>
<g>
<title>Interpreter (5 samples, 0.07%)</title><rect x="844.9" y="659.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="847.9" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (5 samples, 0.07%)</title><rect x="845.7" y="659.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="848.7" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="845.7" y="643.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="848.7" y="654.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (2 samples, 0.03%)</title><rect x="846.2" y="643.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="849.2" y="654.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (765 samples, 10.92%)</title><rect x="846.6" y="675.0" width="128.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="849.6" y="686.0">one/nio/server/S..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (250 samples, 3.57%)</title><rect x="846.6" y="659.0" width="42.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="849.6" y="670.0">one/..</text>
</g>
<g>
<title>java/lang/System.nanoTime (4 samples, 0.06%)</title><rect x="847.9" y="643.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="850.9" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="848.3" y="627.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="851.3" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (235 samples, 3.35%)</title><rect x="848.8" y="643.0" width="39.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="851.8" y="654.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (233 samples, 3.33%)</title><rect x="849.1" y="627.0" width="39.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.1" y="638.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (230 samples, 3.28%)</title><rect x="849.6" y="611.0" width="38.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.6" y="622.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (218 samples, 3.11%)</title><rect x="849.9" y="595.0" width="36.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.9" y="606.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.03%)</title><rect x="851.5" y="579.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="854.5" y="590.0"></text>
</g>
<g>
<title>kevent (207 samples, 2.95%)</title><rect x="851.8" y="579.0" width="34.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="854.8" y="590.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.04%)</title><rect x="886.7" y="595.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="889.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.04%)</title><rect x="886.7" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="889.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.03%)</title><rect x="886.8" y="563.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="889.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.04%)</title><rect x="887.2" y="595.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="890.2" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.03%)</title><rect x="887.3" y="579.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="890.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.03%)</title><rect x="887.7" y="595.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="890.7" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.03%)</title><rect x="887.7" y="579.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="890.7" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title><rect x="887.7" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="890.7" y="574.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.03%)</title><rect x="887.7" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="890.7" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.03%)</title><rect x="887.7" y="531.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="890.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="888.0" y="595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="891.0" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (514 samples, 7.34%)</title><rect x="888.7" y="659.0" width="86.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="891.7" y="670.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (514 samples, 7.34%)</title><rect x="888.7" y="643.0" width="86.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="891.7" y="654.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (479 samples, 6.84%)</title><rect x="888.9" y="627.0" width="80.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="891.9" y="638.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (463 samples, 6.61%)</title><rect x="889.2" y="611.0" width="78.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="892.2" y="622.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (462 samples, 6.59%)</title><rect x="889.4" y="595.0" width="77.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="892.4" y="606.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (453 samples, 6.47%)</title><rect x="889.4" y="579.0" width="76.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="892.4" y="590.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (133 samples, 1.90%)</title><rect x="889.4" y="563.0" width="22.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="892.4" y="574.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (131 samples, 1.87%)</title><rect x="889.5" y="547.0" width="22.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="892.5" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.04%)</title><rect x="889.5" y="531.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="892.5" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.03%)</title><rect x="889.7" y="515.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="892.7" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.03%)</title><rect x="889.7" y="499.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="892.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="889.7" y="483.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="892.7" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (128 samples, 1.83%)</title><rect x="890.0" y="531.0" width="21.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="893.0" y="542.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (128 samples, 1.83%)</title><rect x="890.0" y="515.0" width="21.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="893.0" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (124 samples, 1.77%)</title><rect x="890.4" y="499.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="893.4" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (124 samples, 1.77%)</title><rect x="890.4" y="483.0" width="20.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="893.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (124 samples, 1.77%)</title><rect x="890.4" y="467.0" width="20.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="893.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (123 samples, 1.76%)</title><rect x="890.5" y="451.0" width="20.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="893.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (123 samples, 1.76%)</title><rect x="890.5" y="435.0" width="20.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="893.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (123 samples, 1.76%)</title><rect x="890.5" y="419.0" width="20.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="893.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (2 samples, 0.03%)</title><rect x="890.5" y="403.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="893.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (121 samples, 1.73%)</title><rect x="890.9" y="403.0" width="20.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="893.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (113 samples, 1.61%)</title><rect x="892.2" y="387.0" width="19.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="895.2" y="398.0"></text>
</g>
<g>
<title>write (110 samples, 1.57%)</title><rect x="892.7" y="371.0" width="18.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="895.7" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="911.3" y="499.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.3" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.03%)</title><rect x="911.8" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="914.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (318 samples, 4.54%)</title><rect x="912.1" y="563.0" width="53.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.1" y="574.0">ru/ma..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="912.3" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="915.3" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.03%)</title><rect x="912.3" y="531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="915.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (314 samples, 4.48%)</title><rect x="912.6" y="547.0" width="52.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="915.6" y="558.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (313 samples, 4.47%)</title><rect x="912.8" y="531.0" width="52.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.8" y="542.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="912.8" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="915.8" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="912.8" y="499.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="915.8" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="912.8" y="483.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="915.8" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="912.8" y="467.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.8" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="912.8" y="451.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="915.8" y="462.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (309 samples, 4.41%)</title><rect x="913.1" y="515.0" width="52.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="916.1" y="526.0">org/r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (309 samples, 4.41%)</title><rect x="913.1" y="499.0" width="52.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="916.1" y="510.0">org/r..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (309 samples, 4.41%)</title><rect x="913.1" y="483.0" width="52.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="916.1" y="494.0">Java_..</text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="913.8" y="467.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="916.8" y="478.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.03%)</title><rect x="914.1" y="467.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="917.1" y="478.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (299 samples, 4.27%)</title><rect x="914.6" y="467.0" width="50.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.6" y="478.0">rocks..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="915.0" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="918.0" y="462.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="915.3" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="918.3" y="462.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (22 samples, 0.31%)</title><rect x="915.6" y="451.0" width="3.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="918.6" y="462.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="916.0" y="435.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="919.0" y="446.0"></text>
</g>
<g>
<title>jni_NewByteArray (11 samples, 0.16%)</title><rect x="917.3" y="435.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="920.3" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="917.8" y="419.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.8" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.07%)</title><rect x="918.3" y="419.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.3" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="918.7" y="403.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="921.7" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="918.7" y="387.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="921.7" y="398.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (2 samples, 0.03%)</title><rect x="918.7" y="371.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="921.7" y="382.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.04%)</title><rect x="920.3" y="451.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="923.3" y="462.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="920.5" y="435.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="923.5" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="920.9" y="451.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="923.9" y="462.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.09%)</title><rect x="921.2" y="451.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="924.2" y="462.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="921.7" y="435.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="924.7" y="446.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.06%)</title><rect x="922.4" y="451.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="925.4" y="462.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.06%)</title><rect x="922.4" y="435.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="925.4" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.06%)</title><rect x="922.4" y="419.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="925.4" y="430.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="922.5" y="403.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="925.5" y="414.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="922.5" y="387.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="925.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (246 samples, 3.51%)</title><rect x="923.0" y="451.0" width="41.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="926.0" y="462.0">roc..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (244 samples, 3.48%)</title><rect x="923.2" y="435.0" width="41.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.2" y="446.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (242 samples, 3.45%)</title><rect x="923.5" y="419.0" width="40.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.5" y="430.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (242 samples, 3.45%)</title><rect x="923.5" y="403.0" width="40.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="926.5" y="414.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (241 samples, 3.44%)</title><rect x="923.5" y="387.0" width="40.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.5" y="398.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.06%)</title><rect x="924.1" y="371.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="927.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.03%)</title><rect x="924.9" y="371.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="927.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (16 samples, 0.23%)</title><rect x="925.6" y="371.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="928.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.16%)</title><rect x="926.4" y="355.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.07%)</title><rect x="927.3" y="339.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (208 samples, 2.97%)</title><rect x="928.9" y="371.0" width="35.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="931.9" y="382.0">roc..</text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (203 samples, 2.90%)</title><rect x="929.8" y="355.0" width="34.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="932.8" y="366.0">ro..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (196 samples, 2.80%)</title><rect x="930.3" y="339.0" width="33.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.3" y="350.0">ro..</text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="932.1" y="323.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="935.1" y="334.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="932.5" y="323.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="935.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (7 samples, 0.10%)</title><rect x="932.8" y="323.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="935.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (6 samples, 0.09%)</title><rect x="932.8" y="307.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="935.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (5 samples, 0.07%)</title><rect x="933.0" y="291.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.0" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.07%)</title><rect x="933.0" y="275.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="936.0" y="286.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.07%)</title><rect x="933.0" y="259.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="936.0" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.06%)</title><rect x="933.1" y="243.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="936.1" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="933.3" y="227.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="936.3" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="933.3" y="211.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="936.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (8 samples, 0.11%)</title><rect x="934.0" y="323.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.0" y="334.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="934.7" y="307.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="937.7" y="318.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="935.0" y="307.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="938.0" y="318.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="935.0" y="291.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="938.0" y="302.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="935.0" y="275.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="938.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (99 samples, 1.41%)</title><rect x="935.3" y="323.0" width="16.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="938.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (97 samples, 1.38%)</title><rect x="935.7" y="307.0" width="16.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (94 samples, 1.34%)</title><rect x="936.0" y="291.0" width="15.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="939.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (38 samples, 0.54%)</title><rect x="936.7" y="275.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.03%)</title><rect x="937.0" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="940.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (28 samples, 0.40%)</title><rect x="937.5" y="259.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="940.5" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.06%)</title><rect x="938.4" y="243.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="941.4" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="939.0" y="243.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="942.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (13 samples, 0.19%)</title><rect x="939.4" y="243.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.4" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (13 samples, 0.19%)</title><rect x="939.4" y="227.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="942.4" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (13 samples, 0.19%)</title><rect x="939.4" y="211.0" width="2.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="942.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (4 samples, 0.06%)</title><rect x="941.6" y="243.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="944.6" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.06%)</title><rect x="941.6" y="227.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="944.6" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.06%)</title><rect x="941.6" y="211.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="944.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (4 samples, 0.06%)</title><rect x="942.2" y="259.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="945.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (4 samples, 0.06%)</title><rect x="942.2" y="243.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="945.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.03%)</title><rect x="942.6" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="945.6" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.03%)</title><rect x="942.6" y="211.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="945.6" y="222.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.03%)</title><rect x="942.6" y="195.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="945.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (52 samples, 0.74%)</title><rect x="943.1" y="275.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="946.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (14 samples, 0.20%)</title><rect x="943.3" y="259.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.3" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (12 samples, 0.17%)</title><rect x="943.3" y="243.0" width="2.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="946.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (33 samples, 0.47%)</title><rect x="945.6" y="259.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="948.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (33 samples, 0.47%)</title><rect x="945.6" y="243.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="948.6" y="254.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (33 samples, 0.47%)</title><rect x="945.6" y="227.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="948.6" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (33 samples, 0.47%)</title><rect x="945.6" y="211.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="948.6" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (33 samples, 0.47%)</title><rect x="945.6" y="195.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.6" y="206.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (32 samples, 0.46%)</title><rect x="945.6" y="179.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.6" y="190.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (30 samples, 0.43%)</title><rect x="945.9" y="163.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="948.9" y="174.0"></text>
</g>
<g>
<title>snappy::LittleEndian::ToHost32(unsigned int) (2 samples, 0.03%)</title><rect x="947.3" y="147.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="950.3" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (11 samples, 0.16%)</title><rect x="947.8" y="147.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="950.8" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (7 samples, 0.10%)</title><rect x="948.5" y="131.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="951.5" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (2 samples, 0.03%)</title><rect x="949.3" y="115.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.3" y="126.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::TryFastAppend(char const*, unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="949.8" y="147.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="952.8" y="158.0"></text>
</g>
<g>
<title>std::__1::_DeallocateCaller::__do_call(void*) (3 samples, 0.04%)</title><rect x="949.8" y="131.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="952.8" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::TryFastAppend(char const*, unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="950.3" y="147.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.06%)</title><rect x="951.2" y="259.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.03%)</title><rect x="952.2" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="955.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (36 samples, 0.51%)</title><rect x="952.7" y="323.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="955.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (35 samples, 0.50%)</title><rect x="952.9" y="307.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="955.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (8 samples, 0.11%)</title><rect x="954.9" y="291.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="957.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (14 samples, 0.20%)</title><rect x="956.2" y="291.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="959.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.11%)</title><rect x="957.2" y="275.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="960.2" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.10%)</title><rect x="957.4" y="259.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="960.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (2 samples, 0.03%)</title><rect x="958.9" y="323.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="961.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (24 samples, 0.34%)</title><rect x="959.3" y="323.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (3 samples, 0.04%)</title><rect x="959.4" y="307.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="962.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (20 samples, 0.29%)</title><rect x="959.9" y="307.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="962.9" y="318.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (2 samples, 0.03%)</title><rect x="961.6" y="291.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="964.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (6 samples, 0.09%)</title><rect x="962.3" y="291.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="965.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.06%)</title><rect x="962.6" y="275.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (2 samples, 0.03%)</title><rect x="963.3" y="339.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="966.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.03%)</title><rect x="964.5" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="967.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.03%)</title><rect x="965.1" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="968.1" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="965.1" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="968.1" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="965.1" y="483.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="968.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="965.1" y="467.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="968.1" y="478.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.10%)</title><rect x="965.8" y="579.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="968.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.09%)</title><rect x="966.0" y="563.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="969.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.09%)</title><rect x="966.0" y="547.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="969.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.06%)</title><rect x="966.0" y="531.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="969.0" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="966.7" y="531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="969.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.06%)</title><rect x="967.2" y="611.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="970.2" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.03%)</title><rect x="967.2" y="595.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="970.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="967.5" y="595.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="970.5" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="967.5" y="579.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="970.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.09%)</title><rect x="967.8" y="611.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="970.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.04%)</title><rect x="968.2" y="595.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="971.2" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.04%)</title><rect x="968.2" y="579.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="971.2" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="969.2" y="611.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="972.2" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="969.2" y="595.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="972.2" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (34 samples, 0.49%)</title><rect x="969.5" y="627.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="972.5" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (33 samples, 0.47%)</title><rect x="969.7" y="611.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="972.7" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="969.7" y="595.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="972.7" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="969.7" y="579.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="972.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="969.7" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="972.7" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="969.7" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="972.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (31 samples, 0.44%)</title><rect x="970.0" y="595.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="973.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 0.44%)</title><rect x="970.0" y="579.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="973.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 0.44%)</title><rect x="970.0" y="563.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="973.0" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (30 samples, 0.43%)</title><rect x="970.0" y="547.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="973.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (30 samples, 0.43%)</title><rect x="970.0" y="531.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="973.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (30 samples, 0.43%)</title><rect x="970.0" y="515.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="973.0" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (29 samples, 0.41%)</title><rect x="970.2" y="499.0" width="4.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="973.2" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=26371] (626 samples, 8.94%)</title><rect x="975.4" y="691.0" width="105.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="978.4" y="702.0">[NIO Selector..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (626 samples, 8.94%)</title><rect x="975.4" y="675.0" width="105.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="978.4" y="686.0">one/nio/serve..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (215 samples, 3.07%)</title><rect x="975.9" y="659.0" width="36.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="978.9" y="670.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (6 samples, 0.09%)</title><rect x="976.1" y="643.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="979.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (6 samples, 0.09%)</title><rect x="976.1" y="627.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="979.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (5 samples, 0.07%)</title><rect x="976.3" y="611.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="979.3" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (4 samples, 0.06%)</title><rect x="976.4" y="595.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.4" y="606.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.06%)</title><rect x="976.4" y="579.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (208 samples, 2.97%)</title><rect x="977.1" y="643.0" width="35.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="980.1" y="654.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (208 samples, 2.97%)</title><rect x="977.1" y="627.0" width="35.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="980.1" y="638.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (208 samples, 2.97%)</title><rect x="977.1" y="611.0" width="35.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="980.1" y="622.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (201 samples, 2.87%)</title><rect x="977.1" y="595.0" width="33.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="980.1" y="606.0">su..</text>
</g>
<g>
<title>kevent (196 samples, 2.80%)</title><rect x="978.0" y="579.0" width="33.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="981.0" y="590.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.07%)</title><rect x="1011.0" y="595.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1014.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.04%)</title><rect x="1011.3" y="579.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1014.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="1011.3" y="563.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1014.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="1011.3" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1014.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="1011.3" y="531.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1014.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="1011.8" y="595.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1014.8" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (408 samples, 5.82%)</title><rect x="1012.1" y="659.0" width="68.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1015.1" y="670.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (408 samples, 5.82%)</title><rect x="1012.1" y="643.0" width="68.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1015.1" y="654.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (370 samples, 5.28%)</title><rect x="1012.1" y="627.0" width="62.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1015.1" y="638.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (360 samples, 5.14%)</title><rect x="1013.0" y="611.0" width="60.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1016.0" y="622.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (360 samples, 5.14%)</title><rect x="1013.0" y="595.0" width="60.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1016.0" y="606.0">one/ni..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (353 samples, 5.04%)</title><rect x="1013.0" y="579.0" width="59.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1016.0" y="590.0">Reques..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (123 samples, 1.76%)</title><rect x="1013.3" y="563.0" width="20.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1016.3" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (123 samples, 1.76%)</title><rect x="1013.3" y="547.0" width="20.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1016.3" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.23%)</title><rect x="1013.3" y="531.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1016.3" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.11%)</title><rect x="1014.7" y="515.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1017.7" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (8 samples, 0.11%)</title><rect x="1014.7" y="499.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1017.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.11%)</title><rect x="1014.7" y="483.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1017.7" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="1015.5" y="467.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1018.5" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (107 samples, 1.53%)</title><rect x="1016.0" y="531.0" width="18.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (107 samples, 1.53%)</title><rect x="1016.0" y="515.0" width="18.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1019.0" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (106 samples, 1.51%)</title><rect x="1016.2" y="499.0" width="17.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1019.2" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (106 samples, 1.51%)</title><rect x="1016.2" y="483.0" width="17.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1019.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (106 samples, 1.51%)</title><rect x="1016.2" y="467.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1019.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (105 samples, 1.50%)</title><rect x="1016.4" y="451.0" width="17.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1019.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (104 samples, 1.48%)</title><rect x="1016.5" y="435.0" width="17.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1019.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (104 samples, 1.48%)</title><rect x="1016.5" y="419.0" width="17.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1019.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (2 samples, 0.03%)</title><rect x="1016.5" y="403.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1019.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (102 samples, 1.46%)</title><rect x="1016.9" y="403.0" width="17.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1019.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (99 samples, 1.41%)</title><rect x="1017.4" y="387.0" width="16.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1020.4" y="398.0"></text>
</g>
<g>
<title>write (94 samples, 1.34%)</title><rect x="1018.2" y="371.0" width="15.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1021.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.06%)</title><rect x="1034.0" y="563.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1037.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="1034.2" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1037.2" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="1034.2" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1037.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1034.2" y="515.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1037.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (224 samples, 3.20%)</title><rect x="1034.7" y="563.0" width="37.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1037.7" y="574.0">ru/..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="1035.4" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1038.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.03%)</title><rect x="1035.4" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1038.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (216 samples, 3.08%)</title><rect x="1035.9" y="547.0" width="36.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1038.9" y="558.0">ru/..</text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.03%)</title><rect x="1035.9" y="531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1038.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1035.9" y="515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1038.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (2 samples, 0.03%)</title><rect x="1036.2" y="531.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1039.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (212 samples, 3.03%)</title><rect x="1036.6" y="531.0" width="35.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1039.6" y="542.0">ru/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (210 samples, 3.00%)</title><rect x="1036.6" y="515.0" width="35.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1039.6" y="526.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (210 samples, 3.00%)</title><rect x="1036.6" y="499.0" width="35.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1039.6" y="510.0">org..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (206 samples, 2.94%)</title><rect x="1037.1" y="483.0" width="34.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1040.1" y="494.0">Ja..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (204 samples, 2.91%)</title><rect x="1037.4" y="467.0" width="34.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1040.4" y="478.0">ro..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (22 samples, 0.31%)</title><rect x="1038.1" y="451.0" width="3.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1041.1" y="462.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="1038.1" y="435.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1041.1" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.07%)</title><rect x="1038.4" y="435.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1041.4" y="446.0"></text>
</g>
<g>
<title>jni_NewByteArray (11 samples, 0.16%)</title><rect x="1039.3" y="435.0" width="1.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1042.3" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.14%)</title><rect x="1039.4" y="419.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.4" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.10%)</title><rect x="1039.9" y="403.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1042.9" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.07%)</title><rect x="1039.9" y="387.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1042.9" y="398.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="1039.9" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1042.9" y="382.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1039.9" y="355.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1042.9" y="366.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="1040.8" y="387.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1043.8" y="398.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.06%)</title><rect x="1041.1" y="435.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1044.1" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.03%)</title><rect x="1041.4" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1044.4" y="430.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.06%)</title><rect x="1042.0" y="451.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1045.0" y="462.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.06%)</title><rect x="1042.0" y="435.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1045.0" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="1042.8" y="451.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1045.8" y="462.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="1043.3" y="451.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1046.3" y="462.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="1043.3" y="435.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1046.3" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.04%)</title><rect x="1043.3" y="419.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1046.3" y="430.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="1043.3" y="403.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1046.3" y="414.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="1043.5" y="387.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1046.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (166 samples, 2.37%)</title><rect x="1043.8" y="451.0" width="28.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.8" y="462.0">r..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (164 samples, 2.34%)</title><rect x="1044.1" y="435.0" width="27.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.1" y="446.0">r..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (6 samples, 0.09%)</title><rect x="1044.3" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1047.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (4 samples, 0.06%)</title><rect x="1044.3" y="403.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.04%)</title><rect x="1044.5" y="387.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1047.5" y="398.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.04%)</title><rect x="1044.5" y="371.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1047.5" y="382.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.03%)</title><rect x="1044.6" y="355.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1047.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (155 samples, 2.21%)</title><rect x="1045.3" y="419.0" width="26.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1048.3" y="430.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (155 samples, 2.21%)</title><rect x="1045.3" y="403.0" width="26.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1048.3" y="414.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (150 samples, 2.14%)</title><rect x="1045.8" y="387.0" width="25.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.8" y="398.0">r..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.04%)</title><rect x="1046.3" y="371.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1049.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.03%)</title><rect x="1046.5" y="355.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (16 samples, 0.23%)</title><rect x="1047.2" y="371.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (2 samples, 0.03%)</title><rect x="1048.0" y="355.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.13%)</title><rect x="1048.4" y="355.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1051.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.04%)</title><rect x="1049.2" y="339.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (124 samples, 1.77%)</title><rect x="1050.0" y="371.0" width="20.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (2 samples, 0.03%)</title><rect x="1051.0" y="355.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (115 samples, 1.64%)</title><rect x="1051.6" y="355.0" width="19.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (111 samples, 1.58%)</title><rect x="1052.1" y="339.0" width="18.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (8 samples, 0.11%)</title><rect x="1053.2" y="323.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1056.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (5 samples, 0.07%)</title><rect x="1053.2" y="307.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (5 samples, 0.07%)</title><rect x="1053.2" y="291.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.2" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.07%)</title><rect x="1053.2" y="275.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1056.2" y="286.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.07%)</title><rect x="1053.2" y="259.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1056.2" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.06%)</title><rect x="1053.4" y="243.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1056.4" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.06%)</title><rect x="1053.4" y="227.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1056.4" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.06%)</title><rect x="1053.4" y="211.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1056.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (3 samples, 0.04%)</title><rect x="1054.1" y="307.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (7 samples, 0.10%)</title><rect x="1054.6" y="323.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.6" y="334.0"></text>
</g>
<g>
<title>free (3 samples, 0.04%)</title><rect x="1054.9" y="307.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1057.9" y="318.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.03%)</title><rect x="1055.1" y="291.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1058.1" y="302.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.03%)</title><rect x="1055.1" y="275.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1058.1" y="286.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="1055.4" y="307.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1058.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (27 samples, 0.39%)</title><rect x="1055.8" y="323.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1058.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.03%)</title><rect x="1056.4" y="307.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (2 samples, 0.03%)</title><rect x="1056.4" y="291.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1059.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (21 samples, 0.30%)</title><rect x="1056.8" y="307.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (19 samples, 0.27%)</title><rect x="1056.8" y="291.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (17 samples, 0.24%)</title><rect x="1056.9" y="275.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.03%)</title><rect x="1057.3" y="259.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1060.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (10 samples, 0.14%)</title><rect x="1057.6" y="259.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.6" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="1057.8" y="243.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1060.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (4 samples, 0.06%)</title><rect x="1058.3" y="243.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.3" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.06%)</title><rect x="1058.3" y="227.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1061.3" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.06%)</title><rect x="1058.3" y="211.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1061.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.03%)</title><rect x="1059.0" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1062.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (3 samples, 0.04%)</title><rect x="1059.3" y="259.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1062.3" y="270.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (2 samples, 0.03%)</title><rect x="1060.0" y="291.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1063.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (6 samples, 0.09%)</title><rect x="1060.5" y="323.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1063.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (5 samples, 0.07%)</title><rect x="1060.5" y="307.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1063.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.04%)</title><rect x="1060.8" y="291.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1063.8" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.04%)</title><rect x="1060.8" y="275.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1063.8" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.04%)</title><rect x="1060.8" y="259.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1063.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (24 samples, 0.34%)</title><rect x="1061.5" y="323.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1064.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (22 samples, 0.31%)</title><rect x="1061.5" y="307.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.5" y="318.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1063.0" y="291.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1066.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (6 samples, 0.09%)</title><rect x="1063.3" y="291.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (5 samples, 0.07%)</title><rect x="1064.4" y="291.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1067.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="1064.9" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::SeekForPrev(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="1065.2" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1068.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (2 samples, 0.03%)</title><rect x="1065.5" y="323.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (29 samples, 0.41%)</title><rect x="1065.9" y="323.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1068.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (26 samples, 0.37%)</title><rect x="1066.4" y="307.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1069.4" y="318.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (4 samples, 0.06%)</title><rect x="1068.4" y="291.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1071.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (6 samples, 0.09%)</title><rect x="1069.4" y="291.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.03%)</title><rect x="1069.7" y="275.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (2 samples, 0.03%)</title><rect x="1069.7" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (2 samples, 0.03%)</title><rect x="1070.1" y="275.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="1070.4" y="291.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1073.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (2 samples, 0.03%)</title><rect x="1071.1" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.1" y="398.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (2 samples, 0.03%)</title><rect x="1071.4" y="419.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.03%)</title><rect x="1071.9" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1074.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.10%)</title><rect x="1072.4" y="579.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1075.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.09%)</title><rect x="1072.6" y="563.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1075.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.09%)</title><rect x="1072.6" y="547.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1075.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.06%)</title><rect x="1072.8" y="531.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1075.8" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1073.1" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1076.1" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3 samples, 0.04%)</title><rect x="1073.8" y="611.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1076.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="1074.0" y="595.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1077.0" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="1074.0" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1077.0" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (38 samples, 0.54%)</title><rect x="1074.5" y="627.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1077.5" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 0.53%)</title><rect x="1074.6" y="611.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1077.6" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (37 samples, 0.53%)</title><rect x="1074.6" y="595.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1077.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="1074.6" y="579.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1077.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (35 samples, 0.50%)</title><rect x="1075.0" y="579.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1078.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (35 samples, 0.50%)</title><rect x="1075.0" y="563.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1078.0" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (34 samples, 0.49%)</title><rect x="1075.0" y="547.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1078.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (34 samples, 0.49%)</title><rect x="1075.0" y="531.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1078.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (34 samples, 0.49%)</title><rect x="1075.0" y="515.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1078.0" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (32 samples, 0.46%)</title><rect x="1075.3" y="499.0" width="5.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1078.3" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=26883] (648 samples, 9.25%)</title><rect x="1080.9" y="691.0" width="109.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1083.9" y="702.0">[NIO Selector..</text>
</g>
<g>
<title>[unknown_Java] (13 samples, 0.19%)</title><rect x="1081.0" y="675.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1084.0" y="686.0"></text>
</g>
<g>
<title>Interpreter (5 samples, 0.07%)</title><rect x="1081.0" y="659.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1084.0" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (8 samples, 0.11%)</title><rect x="1081.9" y="659.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.9" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.07%)</title><rect x="1081.9" y="643.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.9" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.04%)</title><rect x="1081.9" y="627.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.9" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="1082.4" y="627.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1085.4" y="638.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.03%)</title><rect x="1082.4" y="611.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.4" y="622.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (2 samples, 0.03%)</title><rect x="1082.7" y="643.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.7" y="654.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (634 samples, 9.05%)</title><rect x="1083.2" y="675.0" width="106.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1086.2" y="686.0">one/nio/serve..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (215 samples, 3.07%)</title><rect x="1083.9" y="659.0" width="36.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1086.9" y="670.0">one..</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.04%)</title><rect x="1085.4" y="643.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1088.4" y="654.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (2 samples, 0.03%)</title><rect x="1086.1" y="643.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1089.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (198 samples, 2.83%)</title><rect x="1086.8" y="643.0" width="33.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1089.8" y="654.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (197 samples, 2.81%)</title><rect x="1086.9" y="627.0" width="33.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1089.9" y="638.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (197 samples, 2.81%)</title><rect x="1086.9" y="611.0" width="33.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1089.9" y="622.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (187 samples, 2.67%)</title><rect x="1086.9" y="595.0" width="31.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1089.9" y="606.0">su..</text>
</g>
<g>
<title>kevent (183 samples, 2.61%)</title><rect x="1087.6" y="579.0" width="30.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1090.6" y="590.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.04%)</title><rect x="1118.4" y="595.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1121.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="1118.6" y="579.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1121.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="1118.6" y="563.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1121.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="1118.6" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1121.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="1118.6" y="531.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1121.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.04%)</title><rect x="1118.9" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1121.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.06%)</title><rect x="1119.4" y="595.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1122.4" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.06%)</title><rect x="1119.4" y="579.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1122.4" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.04%)</title><rect x="1119.6" y="563.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1122.6" y="574.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.04%)</title><rect x="1119.6" y="547.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1122.6" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.04%)</title><rect x="1119.6" y="531.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1122.6" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (414 samples, 5.91%)</title><rect x="1120.1" y="659.0" width="69.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1123.1" y="670.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (414 samples, 5.91%)</title><rect x="1120.1" y="643.0" width="69.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1123.1" y="654.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (383 samples, 5.47%)</title><rect x="1120.1" y="627.0" width="64.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1123.1" y="638.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (373 samples, 5.32%)</title><rect x="1120.4" y="611.0" width="62.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1123.4" y="622.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (373 samples, 5.32%)</title><rect x="1120.4" y="595.0" width="62.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1123.4" y="606.0">one/ni..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (368 samples, 5.25%)</title><rect x="1120.4" y="579.0" width="62.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1123.4" y="590.0">Reques..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (120 samples, 1.71%)</title><rect x="1120.8" y="563.0" width="20.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1123.8" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (120 samples, 1.71%)</title><rect x="1120.8" y="547.0" width="20.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1123.8" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.16%)</title><rect x="1120.8" y="531.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1123.8" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 0.13%)</title><rect x="1121.1" y="515.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1124.1" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (9 samples, 0.13%)</title><rect x="1121.1" y="499.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1124.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.charAt (9 samples, 0.13%)</title><rect x="1121.1" y="483.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1124.1" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1122.3" y="467.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1125.3" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (109 samples, 1.56%)</title><rect x="1122.6" y="531.0" width="18.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1125.6" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (109 samples, 1.56%)</title><rect x="1122.6" y="515.0" width="18.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1125.6" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (109 samples, 1.56%)</title><rect x="1122.6" y="499.0" width="18.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1125.6" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (109 samples, 1.56%)</title><rect x="1122.6" y="483.0" width="18.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1125.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (108 samples, 1.54%)</title><rect x="1122.8" y="467.0" width="18.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1125.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.03%)</title><rect x="1123.0" y="451.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1126.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="1123.0" y="435.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1126.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="1123.0" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1126.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (105 samples, 1.50%)</title><rect x="1123.3" y="451.0" width="17.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1126.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (105 samples, 1.50%)</title><rect x="1123.3" y="435.0" width="17.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1126.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (105 samples, 1.50%)</title><rect x="1123.3" y="419.0" width="17.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1126.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (2 samples, 0.03%)</title><rect x="1123.3" y="403.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1126.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (103 samples, 1.47%)</title><rect x="1123.6" y="403.0" width="17.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1126.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (100 samples, 1.43%)</title><rect x="1124.1" y="387.0" width="16.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1127.1" y="398.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.04%)</title><rect x="1124.3" y="371.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1127.3" y="382.0"></text>
</g>
<g>
<title>write (95 samples, 1.36%)</title><rect x="1125.0" y="371.0" width="16.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1128.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (245 samples, 3.50%)</title><rect x="1141.2" y="563.0" width="41.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1144.2" y="574.0">ru/..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="1141.2" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1144.2" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.03%)</title><rect x="1141.2" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1144.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (242 samples, 3.45%)</title><rect x="1141.7" y="547.0" width="40.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1144.7" y="558.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (3 samples, 0.04%)</title><rect x="1141.8" y="531.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1144.8" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="1142.0" y="515.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1145.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (238 samples, 3.40%)</title><rect x="1142.3" y="531.0" width="40.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1145.3" y="542.0">ru/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (237 samples, 3.38%)</title><rect x="1142.3" y="515.0" width="40.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1145.3" y="526.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (237 samples, 3.38%)</title><rect x="1142.3" y="499.0" width="40.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1145.3" y="510.0">org..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (235 samples, 3.35%)</title><rect x="1142.5" y="483.0" width="39.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1145.5" y="494.0">Jav..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (230 samples, 3.28%)</title><rect x="1143.2" y="467.0" width="38.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.2" y="478.0">roc..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (25 samples, 0.36%)</title><rect x="1143.9" y="451.0" width="4.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1146.9" y="462.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="1144.4" y="435.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.4" y="446.0"></text>
</g>
<g>
<title>jni_NewByteArray (12 samples, 0.17%)</title><rect x="1145.4" y="435.0" width="2.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1148.4" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.13%)</title><rect x="1145.9" y="419.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.9" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.10%)</title><rect x="1146.2" y="403.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.2" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.09%)</title><rect x="1146.4" y="387.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.4" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.03%)</title><rect x="1146.5" y="371.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.5" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.06%)</title><rect x="1147.4" y="435.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1150.4" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.06%)</title><rect x="1148.6" y="451.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1151.6" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="1148.6" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.6" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.04%)</title><rect x="1148.6" y="419.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.6" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title><rect x="1148.6" y="403.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.6" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="1148.7" y="387.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.7" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="1148.7" y="371.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.7" y="382.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.03%)</title><rect x="1149.2" y="451.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1152.2" y="462.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.09%)</title><rect x="1149.7" y="451.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1152.7" y="462.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.07%)</title><rect x="1149.9" y="435.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1152.9" y="446.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="1150.1" y="419.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1153.1" y="430.0"></text>
</g>
<g>
<title>szone_malloc (2 samples, 0.03%)</title><rect x="1150.4" y="419.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1153.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (185 samples, 2.64%)</title><rect x="1150.8" y="451.0" width="31.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.8" y="462.0">ro..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (183 samples, 2.61%)</title><rect x="1150.8" y="435.0" width="30.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.8" y="446.0">ro..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (4 samples, 0.06%)</title><rect x="1151.3" y="419.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (4 samples, 0.06%)</title><rect x="1151.3" y="403.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.03%)</title><rect x="1151.4" y="387.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.4" y="398.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.03%)</title><rect x="1151.4" y="371.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1154.4" y="382.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.03%)</title><rect x="1151.4" y="355.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1154.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (172 samples, 2.46%)</title><rect x="1151.9" y="419.0" width="29.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.9" y="430.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (172 samples, 2.46%)</title><rect x="1151.9" y="403.0" width="29.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="414.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (171 samples, 2.44%)</title><rect x="1151.9" y="387.0" width="28.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.9" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.04%)</title><rect x="1152.4" y="371.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.03%)</title><rect x="1152.6" y="355.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="1152.9" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (6 samples, 0.09%)</title><rect x="1153.3" y="371.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.07%)</title><rect x="1153.5" y="355.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="1154.0" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (154 samples, 2.20%)</title><rect x="1154.5" y="371.0" width="25.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.5" y="382.0">r..</text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (142 samples, 2.03%)</title><rect x="1156.5" y="355.0" width="23.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (135 samples, 1.93%)</title><rect x="1157.2" y="339.0" width="22.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.2" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (6 samples, 0.09%)</title><rect x="1158.0" y="323.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (4 samples, 0.06%)</title><rect x="1158.2" y="307.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (3 samples, 0.04%)</title><rect x="1158.3" y="291.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.3" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="1158.3" y="275.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1161.3" y="286.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="1158.3" y="259.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1161.3" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="1158.3" y="243.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1161.3" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="1158.3" y="227.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1161.3" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="1158.3" y="211.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1161.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (3 samples, 0.04%)</title><rect x="1159.0" y="323.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (85 samples, 1.21%)</title><rect x="1159.5" y="323.0" width="14.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (81 samples, 1.16%)</title><rect x="1160.2" y="307.0" width="13.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (79 samples, 1.13%)</title><rect x="1160.5" y="291.0" width="13.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (31 samples, 0.44%)</title><rect x="1161.0" y="275.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.0" y="286.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (2 samples, 0.03%)</title><rect x="1161.2" y="259.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1164.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.03%)</title><rect x="1161.9" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (18 samples, 0.26%)</title><rect x="1162.5" y="259.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.5" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="1162.9" y="243.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1165.9" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.06%)</title><rect x="1163.2" y="243.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1166.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (8 samples, 0.11%)</title><rect x="1163.9" y="243.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.9" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (8 samples, 0.11%)</title><rect x="1163.9" y="227.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1166.9" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (8 samples, 0.11%)</title><rect x="1163.9" y="211.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1166.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.03%)</title><rect x="1165.2" y="243.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.2" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.03%)</title><rect x="1165.2" y="227.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1168.2" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.03%)</title><rect x="1165.2" y="211.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1168.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (3 samples, 0.04%)</title><rect x="1165.6" y="259.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (3 samples, 0.04%)</title><rect x="1165.6" y="243.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (44 samples, 0.63%)</title><rect x="1166.3" y="275.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (5 samples, 0.07%)</title><rect x="1166.6" y="259.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.6" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.07%)</title><rect x="1166.6" y="243.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1169.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (33 samples, 0.47%)</title><rect x="1167.4" y="259.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (33 samples, 0.47%)</title><rect x="1167.4" y="243.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.4" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="1167.4" y="227.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1170.4" y="238.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="1167.4" y="211.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1170.4" y="222.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="1167.4" y="195.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1170.4" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="1167.4" y="179.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1170.4" y="190.0"></text>
</g>
<g>
<title>small_malloc_should_clear (2 samples, 0.03%)</title><rect x="1167.4" y="163.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1170.4" y="174.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (31 samples, 0.44%)</title><rect x="1167.8" y="227.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (31 samples, 0.44%)</title><rect x="1167.8" y="211.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (31 samples, 0.44%)</title><rect x="1167.8" y="195.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="206.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (31 samples, 0.44%)</title><rect x="1167.8" y="179.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.8" y="190.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.03%)</title><rect x="1167.8" y="163.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1170.8" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (28 samples, 0.40%)</title><rect x="1168.3" y="163.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.3" y="174.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (16 samples, 0.23%)</title><rect x="1170.0" y="147.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.0" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (8 samples, 0.11%)</title><rect x="1171.3" y="131.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (4 samples, 0.06%)</title><rect x="1172.0" y="115.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.06%)</title><rect x="1173.0" y="259.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (19 samples, 0.27%)</title><rect x="1174.2" y="323.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.2" y="334.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="1174.3" y="307.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1177.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (15 samples, 0.21%)</title><rect x="1174.7" y="307.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (2 samples, 0.03%)</title><rect x="1175.7" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (5 samples, 0.07%)</title><rect x="1176.0" y="291.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="1176.5" y="275.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="1176.9" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (3 samples, 0.04%)</title><rect x="1177.4" y="323.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (12 samples, 0.17%)</title><rect x="1177.9" y="323.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (10 samples, 0.14%)</title><rect x="1178.2" y="307.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="1179.4" y="291.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="302.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="1179.6" y="275.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1182.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (2 samples, 0.03%)</title><rect x="1180.1" y="339.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.1" y="350.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="1180.4" y="371.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="1180.9" y="419.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (2 samples, 0.03%)</title><rect x="1181.2" y="419.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="1181.6" y="435.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.6" y="446.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.06%)</title><rect x="1182.4" y="579.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1185.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="1182.8" y="563.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="1182.8" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1185.8" y="558.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="1182.8" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1185.8" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1182.8" y="515.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1185.8" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.04%)</title><rect x="1183.3" y="611.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1186.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1183.4" y="595.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1186.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.03%)</title><rect x="1183.8" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1186.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="1183.8" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1186.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.03%)</title><rect x="1183.8" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1186.8" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.03%)</title><rect x="1184.1" y="611.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1187.1" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (31 samples, 0.44%)</title><rect x="1184.6" y="627.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1187.6" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (29 samples, 0.41%)</title><rect x="1184.9" y="611.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (28 samples, 0.40%)</title><rect x="1185.1" y="595.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1188.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.37%)</title><rect x="1185.1" y="579.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1188.1" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.37%)</title><rect x="1185.1" y="563.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1188.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (26 samples, 0.37%)</title><rect x="1185.1" y="547.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1188.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (26 samples, 0.37%)</title><rect x="1185.1" y="531.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1188.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (26 samples, 0.37%)</title><rect x="1185.1" y="515.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1188.1" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (24 samples, 0.34%)</title><rect x="1185.5" y="499.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1188.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (2 samples, 0.03%)</title><rect x="1189.5" y="579.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1192.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (2 samples, 0.03%)</title><rect x="1189.5" y="563.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1192.5" y="574.0"></text>
</g>
</g>
</svg>
