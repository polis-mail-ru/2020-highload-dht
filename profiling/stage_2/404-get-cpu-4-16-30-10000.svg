<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="725"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="725"> </text>
<g id="frames">
<g>
<title>all (9,225 samples, 100.00%)</title><rect x="10.0" y="691.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="702.0">all</text>
</g>
<g>
<title>[JMX server connection timeout 31 tid=43779] (2 samples, 0.02%)</title><rect x="10.1" y="675.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.1" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2 samples, 0.02%)</title><rect x="10.1" y="659.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.1" y="670.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (2 samples, 0.02%)</title><rect x="10.1" y="643.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.1" y="654.0"></text>
</g>
<g>
<title>java/lang/Object.wait (2 samples, 0.02%)</title><rect x="10.1" y="627.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.1" y="638.0"></text>
</g>
<g>
<title>[Java: C1 CompilerThread0 tid=22275] (5 samples, 0.05%)</title><rect x="10.4" y="675.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.4" y="686.0"></text>
</g>
<g>
<title>thread_start (5 samples, 0.05%)</title><rect x="10.4" y="659.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.4" y="670.0"></text>
</g>
<g>
<title>_pthread_start (5 samples, 0.05%)</title><rect x="10.4" y="643.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.4" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.05%)</title><rect x="10.4" y="627.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.4" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.05%)</title><rect x="10.4" y="611.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.4" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (5 samples, 0.05%)</title><rect x="10.4" y="595.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.4" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (5 samples, 0.05%)</title><rect x="10.4" y="579.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.4" y="590.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (5 samples, 0.05%)</title><rect x="10.4" y="563.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.4" y="574.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (4 samples, 0.04%)</title><rect x="10.4" y="547.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.4" y="558.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 0.04%)</title><rect x="10.4" y="531.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.4" y="542.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 0.04%)</title><rect x="10.4" y="515.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.4" y="526.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.04%)</title><rect x="10.4" y="499.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.4" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 0.04%)</title><rect x="10.4" y="483.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.4" y="494.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.03%)</title><rect x="10.4" y="467.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.4" y="478.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.02%)</title><rect x="10.4" y="451.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.4" y="462.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.02%)</title><rect x="10.4" y="435.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.4" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.02%)</title><rect x="10.4" y="419.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.4" y="430.0"></text>
</g>
<g>
<title>[Java: C2 CompilerThread0 tid=21763] (13 samples, 0.14%)</title><rect x="11.0" y="675.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="14.0" y="686.0"></text>
</g>
<g>
<title>thread_start (13 samples, 0.14%)</title><rect x="11.0" y="659.0" width="1.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="14.0" y="670.0"></text>
</g>
<g>
<title>_pthread_start (13 samples, 0.14%)</title><rect x="11.0" y="643.0" width="1.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="14.0" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (13 samples, 0.14%)</title><rect x="11.0" y="627.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="14.0" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (13 samples, 0.14%)</title><rect x="11.0" y="611.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.0" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (13 samples, 0.14%)</title><rect x="11.0" y="595.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.0" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (13 samples, 0.14%)</title><rect x="11.0" y="579.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.0" y="590.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (13 samples, 0.14%)</title><rect x="11.0" y="563.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.0" y="574.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (13 samples, 0.14%)</title><rect x="11.0" y="547.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.0" y="558.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (13 samples, 0.14%)</title><rect x="11.0" y="531.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.0" y="542.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (13 samples, 0.14%)</title><rect x="11.0" y="515.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.0" y="526.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (10 samples, 0.11%)</title><rect x="11.0" y="499.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.0" y="510.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.03%)</title><rect x="11.0" y="483.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.0" y="494.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.02%)</title><rect x="11.0" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.0" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (7 samples, 0.08%)</title><rect x="11.4" y="483.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.4" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.04%)</title><rect x="11.4" y="467.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.4" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.03%)</title><rect x="11.5" y="451.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.5" y="462.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.02%)</title><rect x="11.7" y="435.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.7" y="446.0"></text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 0.02%)</title><rect x="12.3" y="499.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.3" y="510.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=12547] (4 samples, 0.04%)</title><rect x="12.7" y="675.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="15.7" y="686.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.04%)</title><rect x="12.7" y="659.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="15.7" y="670.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.04%)</title><rect x="12.7" y="643.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="15.7" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.04%)</title><rect x="12.7" y="627.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="15.7" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.04%)</title><rect x="12.7" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.7" y="622.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.04%)</title><rect x="12.7" y="595.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.7" y="606.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.04%)</title><rect x="12.7" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.7" y="590.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (3 samples, 0.03%)</title><rect x="12.8" y="563.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.8" y="574.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.03%)</title><rect x="12.8" y="547.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.8" y="558.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.03%)</title><rect x="12.8" y="531.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.8" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.03%)</title><rect x="12.8" y="515.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.8" y="526.0"></text>
</g>
<g>
<title>__gettimeofday (2 samples, 0.02%)</title><rect x="12.8" y="499.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="15.8" y="510.0"></text>
</g>
<g>
<title>[Java: GC Thread#0 tid=20995] (3 samples, 0.03%)</title><rect x="13.2" y="675.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="16.2" y="686.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.03%)</title><rect x="13.2" y="659.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="16.2" y="670.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.03%)</title><rect x="13.2" y="643.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="16.2" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.03%)</title><rect x="13.2" y="627.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="16.2" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.03%)</title><rect x="13.2" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="16.2" y="622.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.03%)</title><rect x="13.2" y="595.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.2" y="606.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 0.02%)</title><rect x="13.3" y="579.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.3" y="590.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (2 samples, 0.02%)</title><rect x="13.3" y="563.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="16.3" y="574.0"></text>
</g>
<g>
<title>[Java: VM Periodic Task Thread tid=23299] (6 samples, 0.07%)</title><rect x="14.1" y="675.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="17.1" y="686.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.07%)</title><rect x="14.1" y="659.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="17.1" y="670.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.07%)</title><rect x="14.1" y="643.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="17.1" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.07%)</title><rect x="14.1" y="627.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="17.1" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.07%)</title><rect x="14.1" y="611.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.1" y="622.0"></text>
</g>
<g>
<title>WatcherThread::run() (6 samples, 0.07%)</title><rect x="14.1" y="595.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.1" y="606.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (6 samples, 0.07%)</title><rect x="14.1" y="579.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.1" y="590.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.07%)</title><rect x="14.1" y="563.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.1" y="574.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.07%)</title><rect x="14.1" y="547.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.1" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.05%)</title><rect x="14.1" y="531.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.1" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.03%)</title><rect x="14.1" y="515.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="17.1" y="526.0"></text>
</g>
<g>
<title>[Java: VM Thread tid=18691] (9 samples, 0.10%)</title><rect x="14.9" y="675.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.9" y="686.0"></text>
</g>
<g>
<title>thread_start (9 samples, 0.10%)</title><rect x="14.9" y="659.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="17.9" y="670.0"></text>
</g>
<g>
<title>_pthread_start (9 samples, 0.10%)</title><rect x="14.9" y="643.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="17.9" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.10%)</title><rect x="14.9" y="627.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="17.9" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.10%)</title><rect x="14.9" y="611.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.9" y="622.0"></text>
</g>
<g>
<title>VMThread::run() (9 samples, 0.10%)</title><rect x="14.9" y="595.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="17.9" y="606.0"></text>
</g>
<g>
<title>VMThread::loop() (9 samples, 0.10%)</title><rect x="14.9" y="579.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.9" y="590.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.02%)</title><rect x="14.9" y="563.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.9" y="574.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.02%)</title><rect x="14.9" y="547.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.9" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.02%)</title><rect x="14.9" y="531.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="17.9" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.02%)</title><rect x="14.9" y="515.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="17.9" y="526.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (4 samples, 0.04%)</title><rect x="15.1" y="563.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.1" y="574.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (3 samples, 0.03%)</title><rect x="15.2" y="547.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="18.2" y="558.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (3 samples, 0.03%)</title><rect x="15.2" y="531.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.2" y="542.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (3 samples, 0.03%)</title><rect x="15.2" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.2" y="526.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (3 samples, 0.03%)</title><rect x="15.2" y="499.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="18.2" y="510.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.03%)</title><rect x="15.6" y="563.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.6" y="574.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.03%)</title><rect x="15.6" y="547.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="18.6" y="558.0"></text>
</g>
<g>
<title>VM_ThreadDump::doit() (2 samples, 0.02%)</title><rect x="15.8" y="531.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="18.8" y="542.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=40707] (1,142 samples, 12.38%)</title><rect x="16.0" y="675.0" width="146.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="19.0" y="686.0">[NIO Selector #0 t..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,142 samples, 12.38%)</title><rect x="16.0" y="659.0" width="146.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.0" y="670.0">one/nio/server/Sel..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (472 samples, 5.12%)</title><rect x="16.9" y="643.0" width="60.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="654.0">one/ni..</text>
</g>
<g>
<title>__block_literal_global (3 samples, 0.03%)</title><rect x="17.2" y="627.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="20.2" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (5 samples, 0.05%)</title><rect x="17.8" y="627.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="20.8" y="638.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.02%)</title><rect x="17.9" y="611.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="20.9" y="622.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.02%)</title><rect x="18.2" y="611.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="21.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (460 samples, 4.99%)</title><rect x="18.4" y="627.0" width="58.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.4" y="638.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (459 samples, 4.98%)</title><rect x="18.6" y="611.0" width="58.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.6" y="622.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (456 samples, 4.94%)</title><rect x="19.0" y="595.0" width="58.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.0" y="606.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (428 samples, 4.64%)</title><rect x="19.2" y="579.0" width="54.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.2" y="590.0">sun/n..</text>
</g>
<g>
<title>kevent (408 samples, 4.42%)</title><rect x="21.8" y="563.0" width="52.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="24.8" y="574.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (10 samples, 0.11%)</title><rect x="74.0" y="579.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.04%)</title><rect x="74.2" y="563.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.03%)</title><rect x="74.3" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.04%)</title><rect x="74.7" y="563.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.03%)</title><rect x="74.7" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="77.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="74.7" y="531.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="77.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="74.7" y="515.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.02%)</title><rect x="74.7" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.02%)</title><rect x="75.2" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (8 samples, 0.09%)</title><rect x="75.5" y="579.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="78.5" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (8 samples, 0.09%)</title><rect x="75.5" y="563.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.5" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (8 samples, 0.09%)</title><rect x="75.5" y="547.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.5" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (8 samples, 0.09%)</title><rect x="75.5" y="531.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.5" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (8 samples, 0.09%)</title><rect x="75.5" y="515.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (3 samples, 0.03%)</title><rect x="76.5" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.5" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (3 samples, 0.03%)</title><rect x="76.5" y="563.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.5" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.03%)</title><rect x="76.5" y="547.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.5" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.03%)</title><rect x="76.5" y="531.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.5" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.03%)</title><rect x="76.5" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.03%)</title><rect x="76.9" y="579.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.9" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (663 samples, 7.19%)</title><rect x="77.3" y="643.0" width="84.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.3" y="654.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (661 samples, 7.17%)</title><rect x="77.5" y="627.0" width="84.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.5" y="638.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (576 samples, 6.24%)</title><rect x="77.5" y="611.0" width="73.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.5" y="622.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (549 samples, 5.95%)</title><rect x="78.6" y="595.0" width="70.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.6" y="606.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (549 samples, 5.95%)</title><rect x="78.6" y="579.0" width="70.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.6" y="590.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (539 samples, 5.84%)</title><rect x="78.6" y="563.0" width="68.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.6" y="574.0">Request..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (184 samples, 1.99%)</title><rect x="78.6" y="547.0" width="23.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="81.6" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (183 samples, 1.98%)</title><rect x="78.6" y="531.0" width="23.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.6" y="542.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.12%)</title><rect x="78.6" y="515.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.6" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.03%)</title><rect x="79.6" y="499.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.6" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="79.6" y="483.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.6" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="79.6" y="467.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.6" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="79.6" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="79.6" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="82.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (172 samples, 1.86%)</title><rect x="80.0" y="515.0" width="22.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.0" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (172 samples, 1.86%)</title><rect x="80.0" y="499.0" width="22.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.0" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (171 samples, 1.85%)</title><rect x="80.1" y="483.0" width="21.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.1" y="494.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (171 samples, 1.85%)</title><rect x="80.1" y="467.0" width="21.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.1" y="478.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (170 samples, 1.84%)</title><rect x="80.2" y="451.0" width="21.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.2" y="462.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.02%)</title><rect x="80.2" y="435.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.02%)</title><rect x="80.2" y="419.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.02%)</title><rect x="80.2" y="403.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.02%)</title><rect x="80.2" y="387.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="83.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (168 samples, 1.82%)</title><rect x="80.5" y="435.0" width="21.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.5" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (168 samples, 1.82%)</title><rect x="80.5" y="419.0" width="21.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.5" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (168 samples, 1.82%)</title><rect x="80.5" y="403.0" width="21.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.5" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (164 samples, 1.78%)</title><rect x="81.0" y="387.0" width="21.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (159 samples, 1.72%)</title><rect x="81.6" y="371.0" width="20.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.6" y="382.0"></text>
</g>
<g>
<title>write (155 samples, 1.68%)</title><rect x="82.1" y="355.0" width="19.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="85.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (354 samples, 3.84%)</title><rect x="102.2" y="547.0" width="45.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.2" y="558.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.11%)</title><rect x="102.2" y="531.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.2" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.11%)</title><rect x="102.2" y="515.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="105.2" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="102.2" y="499.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.2" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="102.2" y="483.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.2" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="102.7" y="467.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.7" y="478.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="103.2" y="467.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="106.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (344 samples, 3.73%)</title><rect x="103.5" y="531.0" width="44.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="106.5" y="542.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (9 samples, 0.10%)</title><rect x="103.5" y="515.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="106.5" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="103.5" y="499.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="103.5" y="483.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.5" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="103.8" y="467.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="103.8" y="451.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="106.8" y="462.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.02%)</title><rect x="104.0" y="451.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="107.0" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="104.3" y="467.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="107.3" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (4 samples, 0.04%)</title><rect x="104.8" y="515.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="107.8" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.03%)</title><rect x="104.9" y="499.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.9" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="104.9" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="107.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="104.9" y="467.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.9" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="104.9" y="451.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="107.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (330 samples, 3.58%)</title><rect x="105.3" y="515.0" width="42.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="108.3" y="526.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="105.3" y="499.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="105.3" y="483.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="108.3" y="494.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (323 samples, 3.50%)</title><rect x="105.6" y="499.0" width="41.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="108.6" y="510.0">org..</text>
</g>
<g>
<title>java/lang/Byte.toUnsignedInt (2 samples, 0.02%)</title><rect x="105.7" y="483.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="108.7" y="494.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (320 samples, 3.47%)</title><rect x="105.9" y="483.0" width="41.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.9" y="494.0">org..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (317 samples, 3.44%)</title><rect x="106.2" y="467.0" width="40.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="109.2" y="478.0">Jav..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (310 samples, 3.36%)</title><rect x="106.8" y="451.0" width="39.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="109.8" y="462.0">roc..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (34 samples, 0.37%)</title><rect x="107.5" y="435.0" width="4.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="110.5" y="446.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.02%)</title><rect x="108.1" y="419.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="111.1" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.04%)</title><rect x="108.4" y="419.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="111.4" y="430.0"></text>
</g>
<g>
<title>jni_NewByteArray (15 samples, 0.16%)</title><rect x="108.9" y="419.0" width="1.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="111.9" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="109.3" y="403.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="112.3" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="109.3" y="387.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="112.3" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="109.3" y="371.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="112.3" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="109.3" y="355.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="112.3" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="109.3" y="339.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="112.3" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.10%)</title><rect x="109.6" y="403.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="112.6" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (9 samples, 0.10%)</title><rect x="109.6" y="387.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="112.6" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.07%)</title><rect x="109.8" y="371.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="112.8" y="382.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="110.5" y="371.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="113.5" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.09%)</title><rect x="110.8" y="419.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="113.8" y="430.0"></text>
</g>
<g>
<title>free (6 samples, 0.07%)</title><rect x="111.9" y="435.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="114.9" y="446.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.03%)</title><rect x="112.3" y="419.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="115.3" y="430.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.03%)</title><rect x="112.3" y="403.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="115.3" y="414.0"></text>
</g>
<g>
<title>free_tiny (11 samples, 0.12%)</title><rect x="112.7" y="435.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="115.7" y="446.0"></text>
</g>
<g>
<title>tiny_free_no_lock (9 samples, 0.10%)</title><rect x="113.0" y="419.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="116.0" y="430.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="113.9" y="403.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="116.9" y="414.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="114.1" y="435.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="117.1" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="114.2" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="117.2" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.02%)</title><rect x="114.2" y="403.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="117.2" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.02%)</title><rect x="114.2" y="387.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="117.2" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="114.2" y="371.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="117.2" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="114.2" y="355.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="117.2" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.03%)</title><rect x="114.5" y="435.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="117.5" y="446.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.09%)</title><rect x="115.0" y="435.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="118.0" y="446.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.09%)</title><rect x="115.0" y="419.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="118.0" y="430.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.08%)</title><rect x="115.0" y="403.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="118.0" y="414.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.05%)</title><rect x="115.1" y="387.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="118.1" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.05%)</title><rect x="115.1" y="371.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="118.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (236 samples, 2.56%)</title><rect x="116.0" y="435.0" width="30.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="119.0" y="446.0">ro..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (235 samples, 2.55%)</title><rect x="116.0" y="419.0" width="30.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="119.0" y="430.0">ro..</text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseCacheHandle(void*, void*) (2 samples, 0.02%)</title><rect x="116.2" y="403.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="119.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (9 samples, 0.10%)</title><rect x="116.4" y="403.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="119.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (4 samples, 0.04%)</title><rect x="116.7" y="387.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="119.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.02%)</title><rect x="117.2" y="387.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="120.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (219 samples, 2.37%)</title><rect x="117.6" y="403.0" width="28.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="120.6" y="414.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (219 samples, 2.37%)</title><rect x="117.6" y="387.0" width="28.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="120.6" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (215 samples, 2.33%)</title><rect x="117.7" y="371.0" width="27.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="120.7" y="382.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.05%)</title><rect x="118.5" y="355.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="121.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.02%)</title><rect x="119.1" y="355.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="122.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (4 samples, 0.04%)</title><rect x="119.4" y="355.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="122.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.03%)</title><rect x="119.9" y="355.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="122.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (30 samples, 0.33%)</title><rect x="120.6" y="355.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="123.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.02%)</title><rect x="120.9" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="123.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (26 samples, 0.28%)</title><rect x="121.2" y="339.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="124.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (14 samples, 0.15%)</title><rect x="122.4" y="323.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="125.4" y="334.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="123.1" y="307.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="126.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.07%)</title><rect x="123.3" y="307.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="126.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="124.2" y="323.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="127.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (157 samples, 1.70%)</title><rect x="124.9" y="355.0" width="20.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="127.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const (2 samples, 0.02%)</title><rect x="125.1" y="339.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="128.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (2 samples, 0.02%)</title><rect x="125.5" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="128.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (146 samples, 1.58%)</title><rect x="126.1" y="339.0" width="18.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="129.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.02%)</title><rect x="126.7" y="323.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="129.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (132 samples, 1.43%)</title><rect x="126.9" y="323.0" width="16.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="129.9" y="334.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="128.6" y="307.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="131.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (12 samples, 0.13%)</title><rect x="129.1" y="307.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="132.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (10 samples, 0.11%)</title><rect x="129.1" y="291.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="132.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (6 samples, 0.07%)</title><rect x="129.6" y="275.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="132.6" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.07%)</title><rect x="129.6" y="259.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="132.6" y="270.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.07%)</title><rect x="129.6" y="243.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="132.6" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.05%)</title><rect x="129.7" y="227.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="132.7" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.04%)</title><rect x="129.7" y="211.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="132.7" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.04%)</title><rect x="129.7" y="195.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="132.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (2 samples, 0.02%)</title><rect x="130.4" y="291.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="133.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (6 samples, 0.07%)</title><rect x="130.6" y="307.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="133.6" y="318.0"></text>
</g>
<g>
<title>free (3 samples, 0.03%)</title><rect x="130.9" y="291.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="133.9" y="302.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.02%)</title><rect x="131.0" y="275.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="134.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (2 samples, 0.02%)</title><rect x="131.4" y="307.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="134.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (32 samples, 0.35%)</title><rect x="131.9" y="307.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="134.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.02%)</title><rect x="132.2" y="291.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="135.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (28 samples, 0.30%)</title><rect x="132.4" y="291.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="135.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (25 samples, 0.27%)</title><rect x="132.5" y="275.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="135.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (11 samples, 0.12%)</title><rect x="133.2" y="259.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="136.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (9 samples, 0.10%)</title><rect x="133.4" y="243.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="136.4" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.02%)</title><rect x="134.1" y="227.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="137.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (8 samples, 0.09%)</title><rect x="134.7" y="259.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="137.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (7 samples, 0.08%)</title><rect x="134.8" y="243.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="137.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (7 samples, 0.08%)</title><rect x="134.8" y="227.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="137.8" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (7 samples, 0.08%)</title><rect x="134.8" y="211.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="137.8" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (7 samples, 0.08%)</title><rect x="134.8" y="195.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="137.8" y="206.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (7 samples, 0.08%)</title><rect x="134.8" y="179.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="137.8" y="190.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (7 samples, 0.08%)</title><rect x="134.8" y="163.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="137.8" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (7 samples, 0.08%)</title><rect x="134.8" y="147.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="137.8" y="158.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (2 samples, 0.02%)</title><rect x="135.7" y="275.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="138.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.02%)</title><rect x="136.0" y="307.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="139.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (31 samples, 0.34%)</title><rect x="136.3" y="307.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="139.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (28 samples, 0.30%)</title><rect x="136.4" y="291.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="139.4" y="302.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="137.5" y="275.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="140.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (7 samples, 0.08%)</title><rect x="137.9" y="275.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="140.9" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="138.6" y="259.0" width="0.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="141.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (8 samples, 0.09%)</title><rect x="138.8" y="275.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="141.8" y="286.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.02%)</title><rect x="139.2" y="259.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="142.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="139.4" y="259.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="142.4" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.03%)</title><rect x="139.4" y="243.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="142.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (2 samples, 0.02%)</title><rect x="140.2" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="143.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (3 samples, 0.03%)</title><rect x="140.5" y="307.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="143.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (21 samples, 0.23%)</title><rect x="140.9" y="307.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="143.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (18 samples, 0.20%)</title><rect x="141.2" y="291.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="144.2" y="302.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.02%)</title><rect x="142.4" y="275.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="145.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (3 samples, 0.03%)</title><rect x="142.9" y="275.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="145.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (3 samples, 0.03%)</title><rect x="142.9" y="259.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="145.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (2 samples, 0.02%)</title><rect x="143.0" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="146.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="143.3" y="275.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="146.3" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.02%)</title><rect x="143.3" y="259.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="146.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (2 samples, 0.02%)</title><rect x="143.9" y="323.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="146.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (3 samples, 0.03%)</title><rect x="144.3" y="323.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="147.3" y="334.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="144.9" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="147.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (2 samples, 0.02%)</title><rect x="145.2" y="371.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="148.2" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.02%)</title><rect x="146.5" y="451.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="149.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (5 samples, 0.05%)</title><rect x="146.9" y="499.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.9" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.02%)</title><rect x="146.9" y="483.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toUnsignedByte (2 samples, 0.02%)</title><rect x="147.3" y="483.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="150.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (10 samples, 0.11%)</title><rect x="147.5" y="563.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="150.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.11%)</title><rect x="147.5" y="547.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.02%)</title><rect x="147.5" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.09%)</title><rect x="147.8" y="531.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="150.8" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.09%)</title><rect x="147.8" y="515.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.8" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (8 samples, 0.09%)</title><rect x="147.8" y="499.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.8" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (17 samples, 0.18%)</title><rect x="148.8" y="595.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.8" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.09%)</title><rect x="149.3" y="579.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.3" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.07%)</title><rect x="149.6" y="563.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="152.6" y="574.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.05%)</title><rect x="149.7" y="547.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="152.7" y="558.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (5 samples, 0.05%)</title><rect x="149.7" y="531.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="152.7" y="542.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.02%)</title><rect x="150.1" y="515.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="153.1" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.05%)</title><rect x="150.3" y="579.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.3" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (85 samples, 0.92%)</title><rect x="151.2" y="611.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.2" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (84 samples, 0.91%)</title><rect x="151.3" y="595.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (84 samples, 0.91%)</title><rect x="151.3" y="579.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (84 samples, 0.91%)</title><rect x="151.3" y="563.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="154.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (84 samples, 0.91%)</title><rect x="151.3" y="547.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="154.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (82 samples, 0.89%)</title><rect x="151.3" y="531.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (82 samples, 0.89%)</title><rect x="151.3" y="515.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="154.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (74 samples, 0.80%)</title><rect x="152.4" y="499.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.4" y="510.0"></text>
</g>
<g>
<title>rpc_errlist (72 samples, 0.78%)</title><rect x="152.6" y="483.0" width="9.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="155.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.02%)</title><rect x="161.8" y="531.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.02%)</title><rect x="161.8" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="164.8" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.02%)</title><rect x="161.8" y="499.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="164.8" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=39939] (652 samples, 7.07%)</title><rect x="162.1" y="675.0" width="83.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="165.1" y="686.0">[NIO Sele..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (652 samples, 7.07%)</title><rect x="162.1" y="659.0" width="83.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.1" y="670.0">one/nio/s..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (299 samples, 3.24%)</title><rect x="162.6" y="643.0" width="38.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="165.6" y="654.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.02%)</title><rect x="162.7" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.02%)</title><rect x="162.7" y="611.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.7" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.02%)</title><rect x="163.0" y="627.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="166.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (294 samples, 3.19%)</title><rect x="163.2" y="627.0" width="37.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.2" y="638.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (294 samples, 3.19%)</title><rect x="163.2" y="611.0" width="37.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="166.2" y="622.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (293 samples, 3.18%)</title><rect x="163.4" y="595.0" width="37.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="166.4" y="606.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (280 samples, 3.04%)</title><rect x="163.5" y="579.0" width="35.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.5" y="590.0">sun..</text>
</g>
<g>
<title>kevent (270 samples, 2.93%)</title><rect x="164.8" y="563.0" width="34.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="167.8" y="574.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.02%)</title><rect x="199.3" y="579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.03%)</title><rect x="199.6" y="579.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (6 samples, 0.07%)</title><rect x="200.0" y="579.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.0" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (6 samples, 0.07%)</title><rect x="200.0" y="563.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.0" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.07%)</title><rect x="200.0" y="547.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.0" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.07%)</title><rect x="200.0" y="531.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.07%)</title><rect x="200.0" y="515.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.0" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (349 samples, 3.78%)</title><rect x="200.8" y="643.0" width="44.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="203.8" y="654.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (349 samples, 3.78%)</title><rect x="200.8" y="627.0" width="44.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.8" y="638.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (322 samples, 3.49%)</title><rect x="200.8" y="611.0" width="41.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.8" y="622.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (311 samples, 3.37%)</title><rect x="201.2" y="595.0" width="39.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.2" y="606.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (311 samples, 3.37%)</title><rect x="201.2" y="579.0" width="39.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.2" y="590.0">one..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (309 samples, 3.35%)</title><rect x="201.2" y="563.0" width="39.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.2" y="574.0">Req..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (99 samples, 1.07%)</title><rect x="201.2" y="547.0" width="12.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.04%)</title><rect x="201.4" y="531.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.4" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.04%)</title><rect x="201.4" y="515.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.4" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.04%)</title><rect x="201.4" y="499.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.4" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="201.6" y="483.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="204.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (92 samples, 1.00%)</title><rect x="201.9" y="531.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.11%)</title><rect x="201.9" y="515.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.9" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.02%)</title><rect x="202.9" y="499.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="205.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.02%)</title><rect x="202.9" y="483.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.9" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.02%)</title><rect x="202.9" y="467.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.9" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.02%)</title><rect x="202.9" y="451.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.9" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="202.9" y="435.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (82 samples, 0.89%)</title><rect x="203.1" y="515.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.1" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (82 samples, 0.89%)</title><rect x="203.1" y="499.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (82 samples, 0.89%)</title><rect x="203.1" y="483.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="206.1" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (82 samples, 0.89%)</title><rect x="203.1" y="467.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.1" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (81 samples, 0.88%)</title><rect x="203.3" y="451.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="206.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.02%)</title><rect x="203.3" y="435.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.02%)</title><rect x="203.3" y="419.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.02%)</title><rect x="203.3" y="403.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.02%)</title><rect x="203.3" y="387.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (79 samples, 0.86%)</title><rect x="203.5" y="435.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (79 samples, 0.86%)</title><rect x="203.5" y="419.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (79 samples, 0.86%)</title><rect x="203.5" y="403.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (79 samples, 0.86%)</title><rect x="203.5" y="387.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="206.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (74 samples, 0.80%)</title><rect x="204.2" y="371.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.2" y="382.0"></text>
</g>
<g>
<title>write (74 samples, 0.80%)</title><rect x="204.2" y="355.0" width="9.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="207.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.02%)</title><rect x="213.6" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.6" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.03%)</title><rect x="213.9" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="216.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (207 samples, 2.24%)</title><rect x="214.3" y="547.0" width="26.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.3" y="558.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="214.3" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.3" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="214.3" y="515.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.3" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="214.3" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="214.3" y="483.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.3" y="494.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="214.4" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (204 samples, 2.21%)</title><rect x="214.7" y="531.0" width="26.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.7" y="542.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (202 samples, 2.19%)</title><rect x="214.9" y="515.0" width="25.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.9" y="526.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="214.9" y="499.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.9" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="214.9" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.9" y="494.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (194 samples, 2.10%)</title><rect x="215.3" y="499.0" width="24.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.3" y="510.0">o..</text>
</g>
<g>
<title>java/lang/Byte.toUnsignedInt (2 samples, 0.02%)</title><rect x="215.3" y="483.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.3" y="494.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (192 samples, 2.08%)</title><rect x="215.6" y="483.0" width="24.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.6" y="494.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (192 samples, 2.08%)</title><rect x="215.6" y="467.0" width="24.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="218.6" y="478.0">J..</text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="215.9" y="451.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="218.9" y="462.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (185 samples, 2.01%)</title><rect x="216.3" y="451.0" width="23.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="219.3" y="462.0">r..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.02%)</title><rect x="216.7" y="435.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="219.7" y="446.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (20 samples, 0.22%)</title><rect x="217.0" y="435.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="220.0" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="217.3" y="419.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="220.3" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="217.5" y="403.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="220.5" y="414.0"></text>
</g>
<g>
<title>jni_NewByteArray (11 samples, 0.12%)</title><rect x="217.7" y="419.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="220.7" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="217.9" y="403.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="220.9" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="217.9" y="387.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="220.9" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="217.9" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="220.9" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="217.9" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="220.9" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.03%)</title><rect x="217.9" y="339.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="220.9" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.08%)</title><rect x="218.2" y="403.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="221.2" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.07%)</title><rect x="218.4" y="387.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="221.4" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.04%)</title><rect x="218.4" y="371.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="221.4" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.03%)</title><rect x="219.1" y="419.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="222.1" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="219.3" y="403.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="222.3" y="414.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="219.8" y="435.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="222.8" y="446.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.03%)</title><rect x="219.8" y="419.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="222.8" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="220.2" y="435.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="223.2" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.04%)</title><rect x="220.5" y="435.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="223.5" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="220.8" y="419.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="223.8" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.02%)</title><rect x="220.8" y="403.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="223.8" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.02%)</title><rect x="220.8" y="387.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="223.8" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="220.8" y="371.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="223.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (145 samples, 1.57%)</title><rect x="221.3" y="435.0" width="18.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="224.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (145 samples, 1.57%)</title><rect x="221.3" y="419.0" width="18.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="224.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (5 samples, 0.05%)</title><rect x="221.3" y="403.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="224.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.03%)</title><rect x="221.4" y="387.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="224.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (138 samples, 1.50%)</title><rect x="222.0" y="403.0" width="17.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="225.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (137 samples, 1.49%)</title><rect x="222.1" y="387.0" width="17.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="225.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (133 samples, 1.44%)</title><rect x="222.6" y="371.0" width="17.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="225.6" y="382.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.05%)</title><rect x="222.8" y="355.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="225.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.02%)</title><rect x="223.5" y="355.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="226.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.02%)</title><rect x="223.5" y="339.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="226.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.02%)</title><rect x="223.7" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="226.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.02%)</title><rect x="223.7" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="226.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (25 samples, 0.27%)</title><rect x="224.1" y="355.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="227.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (21 samples, 0.23%)</title><rect x="224.6" y="339.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="227.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.02%)</title><rect x="227.1" y="323.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="230.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (96 samples, 1.04%)</title><rect x="227.3" y="355.0" width="12.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="230.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (2 samples, 0.02%)</title><rect x="227.8" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="230.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (89 samples, 0.96%)</title><rect x="228.1" y="339.0" width="11.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="231.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (87 samples, 0.94%)</title><rect x="228.1" y="323.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="231.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (3 samples, 0.03%)</title><rect x="228.6" y="307.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="231.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (2 samples, 0.02%)</title><rect x="228.6" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="231.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (3 samples, 0.03%)</title><rect x="229.0" y="307.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="232.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (38 samples, 0.41%)</title><rect x="229.4" y="307.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="232.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (33 samples, 0.36%)</title><rect x="230.0" y="291.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="233.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (30 samples, 0.33%)</title><rect x="230.4" y="275.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="233.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (13 samples, 0.14%)</title><rect x="230.7" y="259.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="233.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.02%)</title><rect x="230.7" y="243.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="233.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (5 samples, 0.05%)</title><rect x="231.3" y="243.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="234.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.02%)</title><rect x="231.7" y="227.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="234.7" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.02%)</title><rect x="231.7" y="211.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="234.7" y="222.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.02%)</title><rect x="231.7" y="195.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="234.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (14 samples, 0.15%)</title><rect x="232.3" y="259.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="235.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (11 samples, 0.12%)</title><rect x="232.6" y="243.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="235.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (11 samples, 0.12%)</title><rect x="232.6" y="227.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="235.6" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (11 samples, 0.12%)</title><rect x="232.6" y="211.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="235.6" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (11 samples, 0.12%)</title><rect x="232.6" y="195.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="235.6" y="206.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (11 samples, 0.12%)</title><rect x="232.6" y="179.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="235.6" y="190.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (11 samples, 0.12%)</title><rect x="232.6" y="163.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="235.6" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (9 samples, 0.10%)</title><rect x="232.8" y="147.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="235.8" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (6 samples, 0.07%)</title><rect x="233.1" y="131.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="236.1" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (4 samples, 0.04%)</title><rect x="233.3" y="115.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="236.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (22 samples, 0.24%)</title><rect x="234.2" y="307.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="237.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (2 samples, 0.02%)</title><rect x="234.5" y="291.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="237.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (17 samples, 0.18%)</title><rect x="234.7" y="291.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="237.7" y="302.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="235.5" y="275.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="238.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (4 samples, 0.04%)</title><rect x="235.8" y="275.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="238.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (5 samples, 0.05%)</title><rect x="236.3" y="275.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="239.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="236.5" y="259.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="239.5" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.02%)</title><rect x="236.5" y="243.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="239.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (13 samples, 0.14%)</title><rect x="237.4" y="307.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="240.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (13 samples, 0.14%)</title><rect x="237.4" y="291.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="240.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (4 samples, 0.04%)</title><rect x="238.5" y="275.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="241.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (3 samples, 0.03%)</title><rect x="238.6" y="259.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="241.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (5 samples, 0.05%)</title><rect x="240.1" y="499.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.1" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.03%)</title><rect x="240.1" y="483.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.1" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="240.1" y="467.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.1" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="240.1" y="451.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="243.1" y="462.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.02%)</title><rect x="240.8" y="563.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.02%)</title><rect x="240.8" y="547.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.8" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.08%)</title><rect x="241.0" y="595.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="244.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.02%)</title><rect x="241.1" y="579.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.1" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="241.1" y="563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="241.1" y="547.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.1" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="241.1" y="531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="241.4" y="579.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.4" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="241.4" y="563.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.4" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (27 samples, 0.29%)</title><rect x="242.0" y="611.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.0" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (26 samples, 0.28%)</title><rect x="242.2" y="595.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (26 samples, 0.28%)</title><rect x="242.2" y="579.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.28%)</title><rect x="242.2" y="563.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="245.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.28%)</title><rect x="242.2" y="547.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (23 samples, 0.25%)</title><rect x="242.2" y="531.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (23 samples, 0.25%)</title><rect x="242.2" y="515.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (22 samples, 0.24%)</title><rect x="242.3" y="499.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.3" y="510.0"></text>
</g>
<g>
<title>rpc_errlist (21 samples, 0.23%)</title><rect x="242.4" y="483.0" width="2.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="245.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.03%)</title><rect x="245.1" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="248.1" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.03%)</title><rect x="245.1" y="515.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="248.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.03%)</title><rect x="245.1" y="499.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.1" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25603] (1,180 samples, 12.79%)</title><rect x="245.5" y="675.0" width="150.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="248.5" y="686.0">[NIO Selector #2 ti..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,180 samples, 12.79%)</title><rect x="245.5" y="659.0" width="150.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.5" y="670.0">one/nio/server/Sele..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (470 samples, 5.09%)</title><rect x="245.7" y="643.0" width="60.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.7" y="654.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.03%)</title><rect x="246.0" y="627.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.02%)</title><rect x="246.4" y="627.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.02%)</title><rect x="246.4" y="611.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (461 samples, 5.00%)</title><rect x="246.8" y="627.0" width="58.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.8" y="638.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (461 samples, 5.00%)</title><rect x="246.8" y="611.0" width="58.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.8" y="622.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (461 samples, 5.00%)</title><rect x="246.8" y="595.0" width="58.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.8" y="606.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (452 samples, 4.90%)</title><rect x="246.8" y="579.0" width="57.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.8" y="590.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.02%)</title><rect x="249.1" y="563.0" width="0.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="252.1" y="574.0"></text>
</g>
<g>
<title>kevent (432 samples, 4.68%)</title><rect x="249.3" y="563.0" width="55.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="252.3" y="574.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.04%)</title><rect x="304.6" y="579.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="307.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.03%)</title><rect x="304.7" y="563.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.02%)</title><rect x="305.1" y="579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.1" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (708 samples, 7.67%)</title><rect x="305.9" y="643.0" width="90.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.9" y="654.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (708 samples, 7.67%)</title><rect x="305.9" y="627.0" width="90.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.9" y="638.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (638 samples, 6.92%)</title><rect x="305.9" y="611.0" width="81.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.9" y="622.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (604 samples, 6.55%)</title><rect x="307.3" y="595.0" width="77.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.3" y="606.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (604 samples, 6.55%)</title><rect x="307.3" y="579.0" width="77.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.3" y="590.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (594 samples, 6.44%)</title><rect x="307.3" y="563.0" width="76.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="310.3" y="574.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (211 samples, 2.29%)</title><rect x="307.5" y="547.0" width="27.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.5" y="558.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.07%)</title><rect x="307.9" y="531.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.07%)</title><rect x="307.9" y="515.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.9" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.07%)</title><rect x="307.9" y="499.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="310.9" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.05%)</title><rect x="308.0" y="483.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="311.0" y="494.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.02%)</title><rect x="308.2" y="467.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="311.2" y="478.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="308.4" y="467.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="311.4" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.02%)</title><rect x="308.4" y="451.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="311.4" y="462.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.02%)</title><rect x="308.4" y="435.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="311.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (202 samples, 2.19%)</title><rect x="308.7" y="531.0" width="25.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.7" y="542.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.13%)</title><rect x="308.7" y="515.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.7" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.04%)</title><rect x="309.7" y="499.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.7" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.04%)</title><rect x="309.7" y="483.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.7" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.04%)</title><rect x="309.7" y="467.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.7" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (4 samples, 0.04%)</title><rect x="309.7" y="451.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="309.7" y="435.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.7" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (190 samples, 2.06%)</title><rect x="310.2" y="515.0" width="24.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.2" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (190 samples, 2.06%)</title><rect x="310.2" y="499.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.2" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (188 samples, 2.04%)</title><rect x="310.2" y="483.0" width="24.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.2" y="494.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (188 samples, 2.04%)</title><rect x="310.2" y="467.0" width="24.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.2" y="478.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="310.2" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.2" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="310.2" y="435.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.2" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="310.2" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.2" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="310.2" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.2" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="310.2" y="387.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (185 samples, 2.01%)</title><rect x="310.6" y="451.0" width="23.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.6" y="462.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (184 samples, 1.99%)</title><rect x="310.7" y="435.0" width="23.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.7" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (182 samples, 1.97%)</title><rect x="311.0" y="419.0" width="23.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.0" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (182 samples, 1.97%)</title><rect x="311.0" y="403.0" width="23.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.0" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (180 samples, 1.95%)</title><rect x="311.2" y="387.0" width="23.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.2" y="398.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (178 samples, 1.93%)</title><rect x="311.5" y="371.0" width="22.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="314.5" y="382.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.02%)</title><rect x="311.5" y="355.0" width="0.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="314.5" y="366.0"></text>
</g>
<g>
<title>write (175 samples, 1.90%)</title><rect x="311.9" y="355.0" width="22.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="314.9" y="366.0">w..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.02%)</title><rect x="334.3" y="483.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.07%)</title><rect x="334.5" y="547.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="337.5" y="558.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.02%)</title><rect x="334.8" y="531.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="337.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (375 samples, 4.07%)</title><rect x="335.3" y="547.0" width="48.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="338.3" y="558.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.05%)</title><rect x="335.3" y="531.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="338.3" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.05%)</title><rect x="335.3" y="515.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.3" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="335.3" y="499.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="335.3" y="483.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="338.3" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="335.4" y="467.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="338.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (369 samples, 4.00%)</title><rect x="335.9" y="531.0" width="47.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.9" y="542.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="335.9" y="515.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="338.9" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="335.9" y="499.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="338.9" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="335.9" y="483.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="338.9" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="335.9" y="467.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="338.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (3 samples, 0.03%)</title><rect x="336.2" y="515.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="339.2" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="336.3" y="499.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.3" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="336.3" y="483.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="339.3" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="336.3" y="467.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.3" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="336.3" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="339.3" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (364 samples, 3.95%)</title><rect x="336.6" y="515.0" width="46.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.6" y="526.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="336.6" y="499.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.6" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="336.6" y="483.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.6" y="494.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (360 samples, 3.90%)</title><rect x="336.8" y="499.0" width="46.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="339.8" y="510.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (356 samples, 3.86%)</title><rect x="337.3" y="483.0" width="45.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.3" y="494.0">org/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (354 samples, 3.84%)</title><rect x="337.5" y="467.0" width="45.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="340.5" y="478.0">Java..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.02%)</title><rect x="338.4" y="451.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="341.4" y="462.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (345 samples, 3.74%)</title><rect x="338.6" y="451.0" width="44.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="341.6" y="462.0">rock..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (4 samples, 0.04%)</title><rect x="338.7" y="435.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="341.7" y="446.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.03%)</title><rect x="339.4" y="435.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="342.4" y="446.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (34 samples, 0.37%)</title><rect x="339.9" y="435.0" width="4.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="342.9" y="446.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.02%)</title><rect x="340.3" y="419.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="343.3" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.05%)</title><rect x="340.5" y="419.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="343.5" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="340.8" y="403.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="343.8" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="340.8" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="343.8" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.02%)</title><rect x="340.9" y="371.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="343.9" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="340.9" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="343.9" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="340.9" y="339.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="343.9" y="350.0"></text>
</g>
<g>
<title>jni_NewByteArray (16 samples, 0.17%)</title><rect x="341.2" y="419.0" width="2.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="344.2" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="341.7" y="403.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="344.7" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.10%)</title><rect x="342.1" y="403.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="345.1" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 0.09%)</title><rect x="342.2" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="345.2" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.08%)</title><rect x="342.3" y="371.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="345.3" y="382.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.02%)</title><rect x="343.0" y="355.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="346.0" y="366.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.09%)</title><rect x="343.2" y="419.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="346.2" y="430.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="343.7" y="403.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="346.7" y="414.0"></text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="344.4" y="435.0" width="0.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="347.4" y="446.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.02%)</title><rect x="344.4" y="419.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="347.4" y="430.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.02%)</title><rect x="344.4" y="403.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="347.4" y="414.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.07%)</title><rect x="344.6" y="435.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="347.6" y="446.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.04%)</title><rect x="344.9" y="419.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="347.9" y="430.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="345.1" y="403.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="348.1" y="414.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.07%)</title><rect x="345.4" y="435.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="348.4" y="446.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="345.9" y="419.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="348.9" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (12 samples, 0.13%)</title><rect x="346.2" y="435.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="349.2" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.07%)</title><rect x="346.8" y="419.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="349.8" y="430.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="346.8" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="349.8" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.03%)</title><rect x="347.1" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="350.1" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.03%)</title><rect x="347.1" y="387.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="350.1" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="347.1" y="371.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="350.1" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="347.1" y="355.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="350.1" y="366.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="347.7" y="435.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="350.7" y="446.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.08%)</title><rect x="348.1" y="435.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="351.1" y="446.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.08%)</title><rect x="348.1" y="419.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="351.1" y="430.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.08%)</title><rect x="348.1" y="403.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="351.1" y="414.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.02%)</title><rect x="348.2" y="387.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="351.2" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.04%)</title><rect x="348.5" y="387.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="351.5" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.04%)</title><rect x="348.5" y="371.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="351.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (263 samples, 2.85%)</title><rect x="349.0" y="435.0" width="33.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="352.0" y="446.0">ro..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (260 samples, 2.82%)</title><rect x="349.1" y="419.0" width="33.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="352.1" y="430.0">ro..</text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.02%)</title><rect x="349.1" y="403.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="352.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (4 samples, 0.04%)</title><rect x="349.4" y="403.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="352.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.03%)</title><rect x="349.4" y="387.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="352.4" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (253 samples, 2.74%)</title><rect x="349.9" y="403.0" width="32.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="352.9" y="414.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (253 samples, 2.74%)</title><rect x="349.9" y="387.0" width="32.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="352.9" y="398.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="349.9" y="371.0" width="0.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="352.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (248 samples, 2.69%)</title><rect x="350.2" y="371.0" width="31.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="353.2" y="382.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.04%)</title><rect x="350.9" y="355.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="353.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (7 samples, 0.08%)</title><rect x="351.4" y="355.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="354.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.03%)</title><rect x="351.7" y="339.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="354.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.02%)</title><rect x="351.8" y="323.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="354.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.02%)</title><rect x="352.0" y="339.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="355.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (6 samples, 0.07%)</title><rect x="352.3" y="355.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="355.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (5 samples, 0.05%)</title><rect x="352.3" y="339.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="355.3" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="352.6" y="323.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="355.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (31 samples, 0.34%)</title><rect x="353.4" y="355.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="356.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (24 samples, 0.26%)</title><rect x="354.3" y="339.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="357.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.10%)</title><rect x="356.0" y="323.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="359.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.07%)</title><rect x="356.4" y="307.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="359.4" y="318.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.03%)</title><rect x="356.8" y="291.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="359.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="357.2" y="323.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="360.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.02%)</title><rect x="357.5" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="360.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (184 samples, 1.99%)</title><rect x="358.1" y="355.0" width="23.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="361.1" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (2 samples, 0.02%)</title><rect x="358.8" y="339.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="361.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (7 samples, 0.08%)</title><rect x="359.3" y="339.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="362.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.05%)</title><rect x="359.6" y="323.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="362.6" y="334.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="359.8" y="307.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="362.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (167 samples, 1.81%)</title><rect x="360.2" y="339.0" width="21.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="363.2" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (163 samples, 1.77%)</title><rect x="360.7" y="323.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="363.7" y="334.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.02%)</title><rect x="362.0" y="307.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="365.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (10 samples, 0.11%)</title><rect x="362.3" y="307.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="365.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (9 samples, 0.10%)</title><rect x="362.3" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="365.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (8 samples, 0.09%)</title><rect x="362.4" y="275.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="365.4" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.07%)</title><rect x="362.7" y="259.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="365.7" y="270.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.07%)</title><rect x="362.7" y="243.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="365.7" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.07%)</title><rect x="362.7" y="227.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="365.7" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.05%)</title><rect x="362.8" y="211.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="365.8" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.05%)</title><rect x="362.8" y="195.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="365.8" y="206.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="362.8" y="179.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="365.8" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="363.0" y="179.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="366.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (10 samples, 0.11%)</title><rect x="363.6" y="307.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="366.6" y="318.0"></text>
</g>
<g>
<title>free (6 samples, 0.07%)</title><rect x="363.9" y="291.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="366.9" y="302.0"></text>
</g>
<g>
<title>szone_size (4 samples, 0.04%)</title><rect x="364.2" y="275.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="367.2" y="286.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.03%)</title><rect x="364.3" y="259.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="367.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::FindBlockForward() (2 samples, 0.02%)</title><rect x="364.8" y="307.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="367.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (58 samples, 0.63%)</title><rect x="365.1" y="307.0" width="7.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="368.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.02%)</title><rect x="365.9" y="291.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="368.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (2 samples, 0.02%)</title><rect x="365.9" y="275.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="368.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (50 samples, 0.54%)</title><rect x="366.1" y="291.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="369.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (47 samples, 0.51%)</title><rect x="366.4" y="275.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="369.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (28 samples, 0.30%)</title><rect x="367.1" y="259.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="370.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (4 samples, 0.04%)</title><rect x="367.5" y="243.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="370.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (2 samples, 0.02%)</title><rect x="368.0" y="243.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="371.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (15 samples, 0.16%)</title><rect x="368.3" y="243.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="371.3" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.04%)</title><rect x="368.8" y="227.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="371.8" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="369.3" y="227.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="372.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (4 samples, 0.04%)</title><rect x="369.6" y="227.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="372.6" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.04%)</title><rect x="369.6" y="211.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="372.6" y="222.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.04%)</title><rect x="369.6" y="195.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="372.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (2 samples, 0.02%)</title><rect x="370.2" y="243.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="373.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (2 samples, 0.02%)</title><rect x="370.2" y="227.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="373.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.02%)</title><rect x="370.2" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="373.2" y="222.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.02%)</title><rect x="370.2" y="195.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="373.2" y="206.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.02%)</title><rect x="370.2" y="179.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="373.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (2 samples, 0.02%)</title><rect x="370.5" y="243.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="373.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (12 samples, 0.13%)</title><rect x="370.7" y="259.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="373.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (11 samples, 0.12%)</title><rect x="370.8" y="243.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="373.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (11 samples, 0.12%)</title><rect x="370.8" y="227.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="373.8" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (11 samples, 0.12%)</title><rect x="370.8" y="211.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="373.8" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (11 samples, 0.12%)</title><rect x="370.8" y="195.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="373.8" y="206.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (11 samples, 0.12%)</title><rect x="370.8" y="179.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="373.8" y="190.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (11 samples, 0.12%)</title><rect x="370.8" y="163.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="373.8" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (10 samples, 0.11%)</title><rect x="371.0" y="147.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="374.0" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (7 samples, 0.08%)</title><rect x="371.4" y="131.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="374.4" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (7 samples, 0.08%)</title><rect x="371.4" y="115.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="374.4" y="126.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (2 samples, 0.02%)</title><rect x="372.0" y="99.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="375.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (32 samples, 0.35%)</title><rect x="372.8" y="307.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="375.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (3 samples, 0.03%)</title><rect x="372.9" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="375.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (26 samples, 0.28%)</title><rect x="373.3" y="291.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="376.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (10 samples, 0.11%)</title><rect x="374.2" y="275.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="377.2" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="375.1" y="259.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="378.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (9 samples, 0.10%)</title><rect x="375.4" y="275.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="378.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.04%)</title><rect x="376.0" y="259.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="379.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (3 samples, 0.03%)</title><rect x="376.9" y="307.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="379.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (33 samples, 0.36%)</title><rect x="377.4" y="307.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="380.4" y="318.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="377.6" y="291.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="380.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (27 samples, 0.29%)</title><rect x="378.1" y="291.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="381.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (12 samples, 0.13%)</title><rect x="379.7" y="275.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="382.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (6 samples, 0.07%)</title><rect x="380.3" y="259.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="383.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (3 samples, 0.03%)</title><rect x="380.4" y="243.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="383.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (2 samples, 0.02%)</title><rect x="380.8" y="243.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="383.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="381.2" y="275.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="384.2" y="286.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.03%)</title><rect x="381.6" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="384.6" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.02%)</title><rect x="382.4" y="419.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="385.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.02%)</title><rect x="382.9" y="499.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.9" y="510.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (10 samples, 0.11%)</title><rect x="383.3" y="563.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.11%)</title><rect x="383.3" y="547.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="386.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.05%)</title><rect x="383.3" y="531.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.05%)</title><rect x="383.9" y="531.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="386.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.05%)</title><rect x="383.9" y="515.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="386.9" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.05%)</title><rect x="383.9" y="499.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="386.9" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (19 samples, 0.21%)</title><rect x="384.5" y="595.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="387.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.02%)</title><rect x="385.0" y="579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="388.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.03%)</title><rect x="385.3" y="579.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="388.3" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="385.4" y="563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="385.4" y="547.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="385.4" y="531.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.4" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.11%)</title><rect x="385.7" y="579.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.7" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.05%)</title><rect x="386.1" y="563.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="389.1" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="386.7" y="563.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="389.7" y="574.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="386.7" y="547.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="389.7" y="558.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.02%)</title><rect x="386.7" y="531.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="389.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.04%)</title><rect x="387.0" y="595.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="390.0" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (70 samples, 0.76%)</title><rect x="387.5" y="611.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.5" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (69 samples, 0.75%)</title><rect x="387.6" y="595.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (69 samples, 0.75%)</title><rect x="387.6" y="579.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="390.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (69 samples, 0.75%)</title><rect x="387.6" y="563.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (69 samples, 0.75%)</title><rect x="387.6" y="547.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (62 samples, 0.67%)</title><rect x="387.6" y="531.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (62 samples, 0.67%)</title><rect x="387.6" y="515.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.6" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (55 samples, 0.60%)</title><rect x="388.5" y="499.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.5" y="510.0"></text>
</g>
<g>
<title>rpc_errlist (50 samples, 0.54%)</title><rect x="389.1" y="483.0" width="6.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="392.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.08%)</title><rect x="395.5" y="531.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="398.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.08%)</title><rect x="395.5" y="515.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="398.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.08%)</title><rect x="395.5" y="499.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="398.5" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=38915] (1,150 samples, 12.47%)</title><rect x="396.4" y="675.0" width="147.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="399.4" y="686.0">[NIO Selector #3 ti..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,150 samples, 12.47%)</title><rect x="396.4" y="659.0" width="147.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="399.4" y="670.0">one/nio/server/Sele..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (438 samples, 4.75%)</title><rect x="396.7" y="643.0" width="56.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.7" y="654.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.02%)</title><rect x="396.8" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="399.8" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.03%)</title><rect x="397.2" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="400.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (431 samples, 4.67%)</title><rect x="397.6" y="627.0" width="55.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="400.6" y="638.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (431 samples, 4.67%)</title><rect x="397.6" y="611.0" width="55.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.6" y="622.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (430 samples, 4.66%)</title><rect x="397.7" y="595.0" width="55.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.7" y="606.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (413 samples, 4.48%)</title><rect x="397.8" y="579.0" width="52.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="400.8" y="590.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.03%)</title><rect x="400.0" y="563.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="403.0" y="574.0"></text>
</g>
<g>
<title>kevent (393 samples, 4.26%)</title><rect x="400.4" y="563.0" width="50.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="403.4" y="574.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.05%)</title><rect x="450.7" y="579.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="453.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.02%)</title><rect x="451.3" y="579.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="454.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (6 samples, 0.07%)</title><rect x="451.6" y="579.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.6" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (6 samples, 0.07%)</title><rect x="451.6" y="563.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="454.6" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.07%)</title><rect x="451.6" y="547.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.6" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.07%)</title><rect x="451.6" y="531.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="454.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.07%)</title><rect x="451.6" y="515.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="454.6" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.03%)</title><rect x="452.3" y="579.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.02%)</title><rect x="452.5" y="563.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="455.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.02%)</title><rect x="452.5" y="547.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (710 samples, 7.70%)</title><rect x="452.7" y="643.0" width="90.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="455.7" y="654.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (709 samples, 7.69%)</title><rect x="452.8" y="627.0" width="90.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.8" y="638.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (631 samples, 6.84%)</title><rect x="452.8" y="611.0" width="80.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.8" y="622.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (595 samples, 6.45%)</title><rect x="454.6" y="595.0" width="76.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.6" y="606.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (595 samples, 6.45%)</title><rect x="454.6" y="579.0" width="76.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.6" y="590.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (589 samples, 6.38%)</title><rect x="454.6" y="563.0" width="75.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.6" y="574.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (194 samples, 2.10%)</title><rect x="454.9" y="547.0" width="24.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.9" y="558.0">o..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.04%)</title><rect x="455.1" y="531.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="458.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.04%)</title><rect x="455.1" y="515.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="458.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.04%)</title><rect x="455.1" y="499.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="458.1" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.04%)</title><rect x="455.1" y="483.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="458.1" y="494.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="455.3" y="467.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="458.3" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (3 samples, 0.03%)</title><rect x="455.3" y="451.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="458.3" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (187 samples, 2.03%)</title><rect x="455.6" y="531.0" width="24.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.6" y="542.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.17%)</title><rect x="455.6" y="515.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.6" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.07%)</title><rect x="456.9" y="499.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="459.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.07%)</title><rect x="456.9" y="483.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="459.9" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.07%)</title><rect x="456.9" y="467.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.9" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.07%)</title><rect x="456.9" y="451.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="459.9" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.07%)</title><rect x="456.9" y="435.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.9" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="457.4" y="419.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="460.4" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (171 samples, 1.85%)</title><rect x="457.7" y="515.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="460.7" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (171 samples, 1.85%)</title><rect x="457.7" y="499.0" width="21.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="460.7" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (170 samples, 1.84%)</title><rect x="457.8" y="483.0" width="21.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="460.8" y="494.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (170 samples, 1.84%)</title><rect x="457.8" y="467.0" width="21.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.8" y="478.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="457.8" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="460.8" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="457.8" y="435.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="460.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="457.8" y="419.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="460.8" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="457.8" y="403.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="460.8" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="457.8" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="460.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (167 samples, 1.81%)</title><rect x="458.2" y="451.0" width="21.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="461.2" y="462.0">s..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.02%)</title><rect x="458.2" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="461.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.02%)</title><rect x="458.2" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="461.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.02%)</title><rect x="458.2" y="403.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.02%)</title><rect x="458.2" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="461.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (165 samples, 1.79%)</title><rect x="458.5" y="435.0" width="21.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="461.5" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (165 samples, 1.79%)</title><rect x="458.5" y="419.0" width="21.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="461.5" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (165 samples, 1.79%)</title><rect x="458.5" y="403.0" width="21.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.5" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (163 samples, 1.77%)</title><rect x="458.7" y="387.0" width="20.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="461.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (159 samples, 1.72%)</title><rect x="459.2" y="371.0" width="20.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="462.2" y="382.0"></text>
</g>
<g>
<title>write (156 samples, 1.69%)</title><rect x="459.6" y="355.0" width="20.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="462.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.02%)</title><rect x="479.7" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (390 samples, 4.23%)</title><rect x="480.1" y="547.0" width="49.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="483.1" y="558.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="480.1" y="531.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="483.1" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="480.1" y="515.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="483.1" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="480.1" y="499.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="483.1" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="480.1" y="483.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (388 samples, 4.21%)</title><rect x="480.3" y="531.0" width="49.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="483.3" y="542.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="480.3" y="515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.3" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="480.3" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="483.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="480.3" y="483.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (9 samples, 0.10%)</title><rect x="480.6" y="515.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="483.6" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (7 samples, 0.08%)</title><rect x="480.6" y="499.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="483.6" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.08%)</title><rect x="480.6" y="483.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="483.6" y="494.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.02%)</title><rect x="481.2" y="467.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="484.2" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="481.5" y="499.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="484.5" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="481.5" y="483.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (377 samples, 4.09%)</title><rect x="481.7" y="515.0" width="48.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="484.7" y="526.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="481.7" y="499.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="481.7" y="483.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="484.7" y="494.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (371 samples, 4.02%)</title><rect x="482.0" y="499.0" width="47.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.0" y="510.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (369 samples, 4.00%)</title><rect x="482.3" y="483.0" width="47.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.3" y="494.0">org/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (365 samples, 3.96%)</title><rect x="482.8" y="467.0" width="46.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="485.8" y="478.0">Java..</text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="484.0" y="451.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="487.0" y="462.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (350 samples, 3.79%)</title><rect x="484.7" y="451.0" width="44.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="487.7" y="462.0">rock..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (32 samples, 0.35%)</title><rect x="485.1" y="435.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="488.1" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.04%)</title><rect x="485.5" y="419.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="488.5" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="485.6" y="403.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="488.6" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.02%)</title><rect x="485.6" y="387.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="488.6" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.02%)</title><rect x="485.6" y="371.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="488.6" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="485.6" y="355.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="488.6" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="485.6" y="339.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="488.6" y="350.0"></text>
</g>
<g>
<title>jni_NewByteArray (22 samples, 0.24%)</title><rect x="486.0" y="419.0" width="2.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="489.0" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="486.0" y="403.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="489.0" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (18 samples, 0.20%)</title><rect x="486.3" y="403.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="489.3" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (16 samples, 0.17%)</title><rect x="486.5" y="387.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="489.5" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::check_out_of_memory() (2 samples, 0.02%)</title><rect x="486.5" y="371.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="489.5" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (9 samples, 0.10%)</title><rect x="486.7" y="371.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="489.7" y="382.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::check_out_of_memory() (2 samples, 0.02%)</title><rect x="487.0" y="355.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="490.0" y="366.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.02%)</title><rect x="487.2" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="490.2" y="366.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.03%)</title><rect x="487.9" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="490.9" y="382.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="488.3" y="371.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="491.3" y="382.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.03%)</title><rect x="488.8" y="419.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="491.8" y="430.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="489.5" y="435.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="492.5" y="446.0"></text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="490.1" y="435.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="493.1" y="446.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.02%)</title><rect x="490.1" y="419.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="493.1" y="430.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.02%)</title><rect x="490.1" y="403.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="493.1" y="414.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.05%)</title><rect x="490.3" y="435.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="493.3" y="446.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.03%)</title><rect x="490.6" y="419.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="493.6" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="491.0" y="435.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="494.0" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.11%)</title><rect x="491.3" y="435.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="494.3" y="446.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="491.7" y="419.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="494.7" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.05%)</title><rect x="492.0" y="419.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="495.0" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.02%)</title><rect x="492.4" y="403.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="495.4" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.02%)</title><rect x="492.4" y="387.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="495.4" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="492.4" y="371.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="495.4" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="492.4" y="355.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="495.4" y="366.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.02%)</title><rect x="492.6" y="435.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="495.6" y="446.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.02%)</title><rect x="492.9" y="435.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="495.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (282 samples, 3.06%)</title><rect x="493.1" y="435.0" width="36.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="496.1" y="446.0">roc..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (280 samples, 3.04%)</title><rect x="493.1" y="419.0" width="35.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="496.1" y="430.0">roc..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (6 samples, 0.07%)</title><rect x="493.6" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="496.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (5 samples, 0.05%)</title><rect x="493.6" y="387.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="496.6" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (266 samples, 2.88%)</title><rect x="494.4" y="403.0" width="34.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="497.4" y="414.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (266 samples, 2.88%)</title><rect x="494.4" y="387.0" width="34.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="497.4" y="398.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="494.4" y="371.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="497.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (259 samples, 2.81%)</title><rect x="494.8" y="371.0" width="33.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="497.8" y="382.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="495.0" y="355.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="498.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (5 samples, 0.05%)</title><rect x="495.4" y="355.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="498.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.02%)</title><rect x="495.7" y="339.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="498.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.03%)</title><rect x="496.1" y="355.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="499.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (2 samples, 0.02%)</title><rect x="496.5" y="355.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="499.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (56 samples, 0.61%)</title><rect x="496.7" y="355.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="499.7" y="366.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="497.5" y="339.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="500.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (2 samples, 0.02%)</title><rect x="497.7" y="339.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="500.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (46 samples, 0.50%)</title><rect x="498.0" y="339.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="501.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (21 samples, 0.23%)</title><rect x="501.1" y="323.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="504.1" y="334.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.02%)</title><rect x="502.1" y="307.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="505.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (9 samples, 0.10%)</title><rect x="502.3" y="307.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="505.3" y="318.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="503.5" y="307.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="506.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (183 samples, 1.98%)</title><rect x="504.4" y="355.0" width="23.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="507.4" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const (2 samples, 0.02%)</title><rect x="505.3" y="339.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="508.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (4 samples, 0.04%)</title><rect x="505.9" y="339.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="508.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="505.9" y="323.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="508.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (165 samples, 1.79%)</title><rect x="506.6" y="339.0" width="21.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="509.6" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (155 samples, 1.68%)</title><rect x="507.1" y="323.0" width="19.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="510.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (12 samples, 0.13%)</title><rect x="508.2" y="307.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="511.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (10 samples, 0.11%)</title><rect x="508.4" y="291.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="511.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (8 samples, 0.09%)</title><rect x="508.6" y="275.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="511.6" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.08%)</title><rect x="508.7" y="259.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="511.7" y="270.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.08%)</title><rect x="508.7" y="243.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="511.7" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.08%)</title><rect x="508.7" y="227.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="511.7" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.05%)</title><rect x="509.0" y="211.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="512.0" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.04%)</title><rect x="509.1" y="195.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="512.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (8 samples, 0.09%)</title><rect x="509.8" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="512.8" y="318.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.07%)</title><rect x="510.0" y="291.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="513.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (54 samples, 0.59%)</title><rect x="511.0" y="307.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="514.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (49 samples, 0.53%)</title><rect x="511.7" y="291.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="514.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (2 samples, 0.02%)</title><rect x="511.8" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="514.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (46 samples, 0.50%)</title><rect x="512.1" y="275.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="515.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (32 samples, 0.35%)</title><rect x="512.4" y="259.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="515.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (4 samples, 0.04%)</title><rect x="513.0" y="243.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="516.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (2 samples, 0.02%)</title><rect x="513.5" y="243.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="516.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (19 samples, 0.21%)</title><rect x="513.7" y="243.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="516.7" y="254.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.02%)</title><rect x="514.5" y="227.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="517.5" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.07%)</title><rect x="514.7" y="227.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="517.7" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="515.5" y="227.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="518.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.02%)</title><rect x="515.9" y="227.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="518.9" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.02%)</title><rect x="515.9" y="211.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="518.9" y="222.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.02%)</title><rect x="515.9" y="195.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="518.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (2 samples, 0.02%)</title><rect x="516.2" y="243.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="519.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (2 samples, 0.02%)</title><rect x="516.2" y="227.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="519.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (8 samples, 0.09%)</title><rect x="516.7" y="259.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="519.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (5 samples, 0.05%)</title><rect x="516.9" y="243.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="519.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (5 samples, 0.05%)</title><rect x="516.9" y="227.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="519.9" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (5 samples, 0.05%)</title><rect x="516.9" y="211.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="519.9" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (5 samples, 0.05%)</title><rect x="516.9" y="195.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="519.9" y="206.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (5 samples, 0.05%)</title><rect x="516.9" y="179.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="519.9" y="190.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (5 samples, 0.05%)</title><rect x="516.9" y="163.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="519.9" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (5 samples, 0.05%)</title><rect x="516.9" y="147.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="519.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (32 samples, 0.35%)</title><rect x="518.1" y="307.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="521.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (28 samples, 0.30%)</title><rect x="518.5" y="291.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="521.5" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="520.2" y="275.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="523.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (4 samples, 0.04%)</title><rect x="520.5" y="275.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="523.5" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="520.6" y="259.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="523.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (7 samples, 0.08%)</title><rect x="521.0" y="275.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="524.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="521.5" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="524.5" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.02%)</title><rect x="521.7" y="243.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="524.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (3 samples, 0.03%)</title><rect x="522.2" y="307.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="525.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (30 samples, 0.33%)</title><rect x="522.7" y="307.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="525.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (3 samples, 0.03%)</title><rect x="523.1" y="291.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="526.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (23 samples, 0.25%)</title><rect x="523.4" y="291.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="526.4" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="524.5" y="275.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="527.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (12 samples, 0.13%)</title><rect x="524.7" y="275.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="527.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (5 samples, 0.05%)</title><rect x="525.4" y="259.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="528.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (3 samples, 0.03%)</title><rect x="525.6" y="243.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="528.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (2 samples, 0.02%)</title><rect x="526.0" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="529.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="526.5" y="307.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="529.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (4 samples, 0.04%)</title><rect x="527.2" y="323.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="530.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (3 samples, 0.03%)</title><rect x="527.9" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="530.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.02%)</title><rect x="528.4" y="403.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="531.4" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.02%)</title><rect x="528.7" y="403.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="531.7" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.02%)</title><rect x="528.9" y="419.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="531.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (4 samples, 0.04%)</title><rect x="529.5" y="499.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="532.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.02%)</title><rect x="529.5" y="483.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="532.5" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.02%)</title><rect x="529.5" y="467.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="532.5" y="478.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.07%)</title><rect x="530.0" y="563.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="533.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.07%)</title><rect x="530.0" y="547.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="533.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.05%)</title><rect x="530.1" y="531.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="533.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.05%)</title><rect x="530.1" y="515.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.05%)</title><rect x="530.1" y="499.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="533.1" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (18 samples, 0.20%)</title><rect x="530.7" y="595.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="533.7" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.02%)</title><rect x="531.5" y="579.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="531.5" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="534.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="531.5" y="547.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="534.5" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="531.5" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.5" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.08%)</title><rect x="531.8" y="579.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="534.8" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="531.8" y="563.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.8" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="532.3" y="563.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="535.3" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.03%)</title><rect x="532.7" y="579.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="535.7" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="533.2" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="533.2" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.2" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (78 samples, 0.85%)</title><rect x="533.5" y="611.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="536.5" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (77 samples, 0.83%)</title><rect x="533.7" y="595.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="536.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (77 samples, 0.83%)</title><rect x="533.7" y="579.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="536.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (77 samples, 0.83%)</title><rect x="533.7" y="563.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="536.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (77 samples, 0.83%)</title><rect x="533.7" y="547.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="536.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (72 samples, 0.78%)</title><rect x="533.7" y="531.0" width="9.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="536.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (72 samples, 0.78%)</title><rect x="533.7" y="515.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="536.7" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (68 samples, 0.74%)</title><rect x="534.2" y="499.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="537.2" y="510.0"></text>
</g>
<g>
<title>rpc_errlist (63 samples, 0.68%)</title><rect x="534.8" y="483.0" width="8.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="537.8" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.05%)</title><rect x="542.9" y="531.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.9" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.05%)</title><rect x="542.9" y="515.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="545.9" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.05%)</title><rect x="542.9" y="499.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="545.9" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=26371] (1,612 samples, 17.47%)</title><rect x="543.5" y="675.0" width="206.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="546.5" y="686.0">[NIO Selector #4 tid=26371]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,611 samples, 17.46%)</title><rect x="543.7" y="659.0" width="206.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.7" y="670.0">one/nio/server/SelectorThre..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (593 samples, 6.43%)</title><rect x="544.2" y="643.0" width="75.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.2" y="654.0">one/nio/..</text>
</g>
<g>
<title>__cxx_global_var_init.4 (2 samples, 0.02%)</title><rect x="544.7" y="627.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="547.7" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.04%)</title><rect x="544.9" y="627.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="547.9" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.04%)</title><rect x="545.6" y="627.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="548.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (575 samples, 6.23%)</title><rect x="546.1" y="627.0" width="73.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="549.1" y="638.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (574 samples, 6.22%)</title><rect x="546.2" y="611.0" width="73.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="549.2" y="622.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (572 samples, 6.20%)</title><rect x="546.3" y="595.0" width="73.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="549.3" y="606.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (540 samples, 5.85%)</title><rect x="546.5" y="579.0" width="69.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="549.5" y="590.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.02%)</title><rect x="550.0" y="563.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="553.0" y="574.0"></text>
</g>
<g>
<title>kevent (510 samples, 5.53%)</title><rect x="550.3" y="563.0" width="65.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="553.3" y="574.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (16 samples, 0.17%)</title><rect x="615.5" y="579.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="618.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.02%)</title><rect x="615.5" y="563.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="618.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.02%)</title><rect x="615.5" y="547.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="618.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (13 samples, 0.14%)</title><rect x="615.9" y="563.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="618.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 0.09%)</title><rect x="615.9" y="547.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="618.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.09%)</title><rect x="615.9" y="531.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="618.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 0.09%)</title><rect x="615.9" y="515.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="618.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.02%)</title><rect x="616.6" y="499.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="619.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (2 samples, 0.02%)</title><rect x="616.9" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="619.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (3 samples, 0.03%)</title><rect x="617.2" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="620.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.03%)</title><rect x="617.6" y="579.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="620.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (9 samples, 0.10%)</title><rect x="618.0" y="579.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="621.0" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (9 samples, 0.10%)</title><rect x="618.0" y="563.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.0" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (8 samples, 0.09%)</title><rect x="618.1" y="547.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.1" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (8 samples, 0.09%)</title><rect x="618.1" y="531.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="621.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (8 samples, 0.09%)</title><rect x="618.1" y="515.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="621.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.02%)</title><rect x="619.1" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="622.1" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.02%)</title><rect x="619.1" y="563.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="622.1" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.02%)</title><rect x="619.1" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="622.1" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.02%)</title><rect x="619.1" y="531.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.02%)</title><rect x="619.1" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="622.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (3 samples, 0.03%)</title><rect x="619.6" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (3 samples, 0.03%)</title><rect x="619.6" y="611.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="622.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (3 samples, 0.03%)</title><rect x="619.6" y="595.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="622.6" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,014 samples, 10.99%)</title><rect x="620.0" y="643.0" width="129.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="623.0" y="654.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,014 samples, 10.99%)</title><rect x="620.0" y="627.0" width="129.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.0" y="638.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (893 samples, 9.68%)</title><rect x="620.0" y="611.0" width="114.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="623.0" y="622.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (843 samples, 9.14%)</title><rect x="623.0" y="595.0" width="107.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.0" y="606.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (843 samples, 9.14%)</title><rect x="623.0" y="579.0" width="107.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="626.0" y="590.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (835 samples, 9.05%)</title><rect x="623.0" y="563.0" width="106.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="626.0" y="574.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (308 samples, 3.34%)</title><rect x="623.2" y="547.0" width="39.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.2" y="558.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (11 samples, 0.12%)</title><rect x="624.5" y="531.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.12%)</title><rect x="624.5" y="515.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.5" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.12%)</title><rect x="624.5" y="499.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="627.5" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.10%)</title><rect x="624.8" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="627.8" y="494.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.08%)</title><rect x="625.0" y="467.0" width="0.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="628.0" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (7 samples, 0.08%)</title><rect x="625.0" y="451.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="628.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (285 samples, 3.09%)</title><rect x="625.9" y="531.0" width="36.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="628.9" y="542.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.13%)</title><rect x="626.2" y="515.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.2" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.05%)</title><rect x="627.1" y="499.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="630.1" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.05%)</title><rect x="627.1" y="483.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="630.1" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.05%)</title><rect x="627.1" y="467.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="630.1" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.05%)</title><rect x="627.1" y="451.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="630.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.05%)</title><rect x="627.1" y="435.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="630.1" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (271 samples, 2.94%)</title><rect x="627.7" y="515.0" width="34.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="630.7" y="526.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (271 samples, 2.94%)</title><rect x="627.7" y="499.0" width="34.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="630.7" y="510.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (271 samples, 2.94%)</title><rect x="627.7" y="483.0" width="34.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="630.7" y="494.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (271 samples, 2.94%)</title><rect x="627.7" y="467.0" width="34.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="630.7" y="478.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (270 samples, 2.93%)</title><rect x="627.8" y="451.0" width="34.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="630.8" y="462.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (270 samples, 2.93%)</title><rect x="627.8" y="435.0" width="34.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="630.8" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (270 samples, 2.93%)</title><rect x="627.8" y="419.0" width="34.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="630.8" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (270 samples, 2.93%)</title><rect x="627.8" y="403.0" width="34.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="630.8" y="414.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (268 samples, 2.91%)</title><rect x="628.1" y="387.0" width="34.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="631.1" y="398.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (259 samples, 2.81%)</title><rect x="629.2" y="371.0" width="33.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.2" y="382.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.03%)</title><rect x="629.7" y="355.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="632.7" y="366.0"></text>
</g>
<g>
<title>write (251 samples, 2.72%)</title><rect x="630.3" y="355.0" width="32.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="633.3" y="366.0">wr..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.02%)</title><rect x="662.4" y="531.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.02%)</title><rect x="662.6" y="547.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="665.6" y="558.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="662.6" y="531.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="665.6" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="662.6" y="515.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="665.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="662.6" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="665.6" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="662.6" y="483.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="665.6" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (523 samples, 5.67%)</title><rect x="662.9" y="547.0" width="66.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="665.9" y="558.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.10%)</title><rect x="662.9" y="531.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="665.9" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9 samples, 0.10%)</title><rect x="662.9" y="515.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="665.9" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="662.9" y="499.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="665.9" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="662.9" y="483.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="665.9" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="663.4" y="467.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.4" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (512 samples, 5.55%)</title><rect x="664.0" y="531.0" width="65.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="667.0" y="542.0">ru/mail..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (11 samples, 0.12%)</title><rect x="664.0" y="515.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="667.0" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="664.0" y="499.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="667.0" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="664.0" y="483.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="667.0" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="664.3" y="467.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="667.3" y="478.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.03%)</title><rect x="664.7" y="451.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="667.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (7 samples, 0.08%)</title><rect x="665.4" y="515.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.4" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (6 samples, 0.07%)</title><rect x="665.4" y="499.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="668.4" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.07%)</title><rect x="665.4" y="483.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.4" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (2 samples, 0.02%)</title><rect x="665.7" y="467.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (494 samples, 5.36%)</title><rect x="666.3" y="515.0" width="63.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.3" y="526.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.07%)</title><rect x="666.3" y="499.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.07%)</title><rect x="666.3" y="483.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.3" y="494.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2 samples, 0.02%)</title><rect x="666.8" y="467.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="669.8" y="478.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (482 samples, 5.22%)</title><rect x="667.1" y="499.0" width="61.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="670.1" y="510.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (478 samples, 5.18%)</title><rect x="667.6" y="483.0" width="61.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.6" y="494.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (475 samples, 5.15%)</title><rect x="668.0" y="467.0" width="60.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="671.0" y="478.0">Java_o..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.02%)</title><rect x="668.5" y="451.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="671.5" y="462.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.02%)</title><rect x="669.0" y="451.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="672.0" y="462.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (462 samples, 5.01%)</title><rect x="669.5" y="451.0" width="59.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="672.5" y="462.0">rocksd..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="669.8" y="435.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="672.8" y="446.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (44 samples, 0.48%)</title><rect x="670.3" y="435.0" width="5.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="673.3" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="670.7" y="419.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="673.7" y="430.0"></text>
</g>
<g>
<title>jni_NewByteArray (31 samples, 0.34%)</title><rect x="671.1" y="419.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="674.1" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.04%)</title><rect x="671.6" y="403.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="674.6" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="672.6" y="403.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="675.6" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.02%)</title><rect x="672.7" y="387.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="675.7" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.02%)</title><rect x="672.7" y="371.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="675.7" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="672.7" y="355.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="675.7" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="672.7" y="339.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="675.7" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (16 samples, 0.17%)</title><rect x="673.0" y="403.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="676.0" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (12 samples, 0.13%)</title><rect x="673.4" y="387.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="676.4" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (9 samples, 0.10%)</title><rect x="673.5" y="371.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="676.5" y="382.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.02%)</title><rect x="673.5" y="355.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="676.5" y="366.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (2 samples, 0.02%)</title><rect x="674.0" y="355.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="677.0" y="366.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.05%)</title><rect x="675.0" y="419.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="678.0" y="430.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.02%)</title><rect x="675.3" y="403.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="678.3" y="414.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.02%)</title><rect x="675.7" y="419.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="678.7" y="430.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="676.2" y="435.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="679.2" y="446.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.07%)</title><rect x="676.6" y="435.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="679.6" y="446.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="676.6" y="419.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="679.6" y="430.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.04%)</title><rect x="676.8" y="419.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="679.8" y="430.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="677.1" y="403.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="680.1" y="414.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.05%)</title><rect x="677.3" y="435.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="680.3" y="446.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="677.6" y="419.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="680.6" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (21 samples, 0.23%)</title><rect x="678.0" y="435.0" width="2.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="681.0" y="446.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="678.6" y="419.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="681.6" y="430.0"></text>
</g>
<g>
<title>os::is_MP() (3 samples, 0.03%)</title><rect x="678.6" y="403.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="681.6" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.11%)</title><rect x="679.0" y="419.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="682.0" y="430.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="679.0" y="403.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="682.0" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.09%)</title><rect x="679.2" y="403.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="682.2" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.08%)</title><rect x="679.4" y="387.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="682.4" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.08%)</title><rect x="679.4" y="371.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="682.4" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.08%)</title><rect x="679.4" y="355.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="682.4" y="366.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.02%)</title><rect x="679.4" y="339.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="682.4" y="350.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="680.0" y="339.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="683.0" y="350.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.02%)</title><rect x="680.4" y="419.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="683.4" y="430.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.02%)</title><rect x="680.8" y="435.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="683.8" y="446.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.02%)</title><rect x="681.0" y="435.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="684.0" y="446.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.10%)</title><rect x="681.3" y="435.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="684.3" y="446.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.10%)</title><rect x="681.3" y="419.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="684.3" y="430.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.09%)</title><rect x="681.4" y="403.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="684.4" y="414.0"></text>
</g>
<g>
<title>default_zone_malloc (4 samples, 0.04%)</title><rect x="681.5" y="387.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="684.5" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="682.1" y="387.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="685.1" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="682.1" y="371.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="685.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (354 samples, 3.84%)</title><rect x="682.4" y="435.0" width="45.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="685.4" y="446.0">rock..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (349 samples, 3.78%)</title><rect x="682.6" y="419.0" width="44.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="685.6" y="430.0">rock..</text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.02%)</title><rect x="682.7" y="403.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="685.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (4 samples, 0.04%)</title><rect x="683.0" y="403.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="686.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.03%)</title><rect x="683.1" y="387.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="686.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (340 samples, 3.69%)</title><rect x="683.5" y="403.0" width="43.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="686.5" y="414.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (340 samples, 3.69%)</title><rect x="683.5" y="387.0" width="43.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="686.5" y="398.0">rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (336 samples, 3.64%)</title><rect x="683.6" y="371.0" width="43.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="686.6" y="382.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.05%)</title><rect x="685.8" y="355.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="688.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (6 samples, 0.07%)</title><rect x="686.5" y="355.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="689.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (4 samples, 0.04%)</title><rect x="687.3" y="355.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="690.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.02%)</title><rect x="687.3" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="690.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.02%)</title><rect x="687.6" y="339.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="690.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.02%)</title><rect x="687.9" y="355.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="690.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (3 samples, 0.03%)</title><rect x="688.2" y="355.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="691.2" y="366.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="688.2" y="339.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="691.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (54 samples, 0.59%)</title><rect x="688.6" y="355.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="691.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (45 samples, 0.49%)</title><rect x="689.7" y="339.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="692.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (21 samples, 0.23%)</title><rect x="692.5" y="323.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="695.5" y="334.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="693.6" y="307.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="696.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.08%)</title><rect x="694.1" y="307.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="697.1" y="318.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.03%)</title><rect x="694.6" y="291.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="697.6" y="302.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="695.0" y="307.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="698.0" y="318.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="695.2" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="698.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.02%)</title><rect x="696.0" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="699.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (236 samples, 2.56%)</title><rect x="696.4" y="355.0" width="30.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="699.4" y="366.0">ro..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (3 samples, 0.03%)</title><rect x="697.8" y="339.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="700.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const (6 samples, 0.07%)</title><rect x="698.2" y="339.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="701.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (2 samples, 0.02%)</title><rect x="698.9" y="339.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="701.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.02%)</title><rect x="699.2" y="339.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="702.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (8 samples, 0.09%)</title><rect x="699.5" y="339.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="702.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.05%)</title><rect x="699.8" y="323.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="702.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (202 samples, 2.19%)</title><rect x="700.5" y="339.0" width="25.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="703.5" y="350.0">r..</text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="701.2" y="323.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="704.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.04%)</title><rect x="701.5" y="323.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="704.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (187 samples, 2.03%)</title><rect x="702.0" y="323.0" width="23.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="705.0" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (13 samples, 0.14%)</title><rect x="703.4" y="307.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="706.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (12 samples, 0.13%)</title><rect x="703.4" y="291.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="706.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (10 samples, 0.11%)</title><rect x="703.7" y="275.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="706.7" y="286.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="703.7" y="259.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="706.7" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.08%)</title><rect x="704.1" y="259.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="707.1" y="270.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.08%)</title><rect x="704.1" y="243.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="707.1" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.08%)</title><rect x="704.1" y="227.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="707.1" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.07%)</title><rect x="704.2" y="211.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="707.2" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.07%)</title><rect x="704.2" y="195.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="707.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (9 samples, 0.10%)</title><rect x="705.1" y="307.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="708.1" y="318.0"></text>
</g>
<g>
<title>free (4 samples, 0.04%)</title><rect x="705.6" y="291.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="708.6" y="302.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.02%)</title><rect x="705.8" y="275.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="708.8" y="286.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.02%)</title><rect x="705.8" y="259.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="708.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (2 samples, 0.02%)</title><rect x="706.4" y="307.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="709.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (50 samples, 0.54%)</title><rect x="706.7" y="307.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="709.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.02%)</title><rect x="707.1" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="710.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (2 samples, 0.02%)</title><rect x="707.1" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="710.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (45 samples, 0.49%)</title><rect x="707.4" y="291.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="710.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (38 samples, 0.41%)</title><rect x="708.0" y="275.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="711.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (25 samples, 0.27%)</title><rect x="708.7" y="259.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="711.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (5 samples, 0.05%)</title><rect x="709.0" y="243.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="712.0" y="254.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="709.4" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="712.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (13 samples, 0.14%)</title><rect x="709.8" y="243.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="712.8" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.02%)</title><rect x="710.3" y="227.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="713.3" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="710.6" y="227.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="713.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (4 samples, 0.04%)</title><rect x="710.8" y="227.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="713.8" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.04%)</title><rect x="710.8" y="211.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="713.8" y="222.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.04%)</title><rect x="710.8" y="195.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="713.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (3 samples, 0.03%)</title><rect x="711.5" y="243.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="714.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (7 samples, 0.08%)</title><rect x="711.9" y="259.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="714.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (6 samples, 0.07%)</title><rect x="712.0" y="243.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="715.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (6 samples, 0.07%)</title><rect x="712.0" y="227.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="715.0" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (6 samples, 0.07%)</title><rect x="712.0" y="211.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="715.0" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (6 samples, 0.07%)</title><rect x="712.0" y="195.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="715.0" y="206.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (6 samples, 0.07%)</title><rect x="712.0" y="179.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="715.0" y="190.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (6 samples, 0.07%)</title><rect x="712.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="715.0" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (6 samples, 0.07%)</title><rect x="712.0" y="147.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="715.0" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (3 samples, 0.03%)</title><rect x="712.2" y="131.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="715.2" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (2 samples, 0.02%)</title><rect x="712.4" y="115.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="715.4" y="126.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (2 samples, 0.02%)</title><rect x="712.9" y="275.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="715.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (54 samples, 0.59%)</title><rect x="713.4" y="307.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="716.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (2 samples, 0.02%)</title><rect x="713.5" y="291.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="716.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (46 samples, 0.50%)</title><rect x="713.8" y="291.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="716.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (9 samples, 0.10%)</title><rect x="716.1" y="275.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="719.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (17 samples, 0.18%)</title><rect x="717.2" y="275.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="720.2" y="286.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.02%)</title><rect x="717.5" y="259.0" width="0.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="720.5" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="717.7" y="259.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="720.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (10 samples, 0.11%)</title><rect x="718.0" y="259.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="721.0" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.07%)</title><rect x="718.5" y="243.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="721.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::SeekForPrev(rocksdb::Slice const&amp;) (2 samples, 0.02%)</title><rect x="719.7" y="291.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="722.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (3 samples, 0.03%)</title><rect x="719.9" y="291.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="722.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (6 samples, 0.07%)</title><rect x="720.3" y="307.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="723.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (35 samples, 0.38%)</title><rect x="721.1" y="307.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="724.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (3 samples, 0.03%)</title><rect x="721.5" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="724.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (28 samples, 0.30%)</title><rect x="721.8" y="291.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="724.8" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (3 samples, 0.03%)</title><rect x="723.5" y="275.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="726.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (8 samples, 0.09%)</title><rect x="724.0" y="275.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="727.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (7 samples, 0.08%)</title><rect x="724.1" y="259.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="727.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (2 samples, 0.02%)</title><rect x="724.7" y="243.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="727.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="725.0" y="275.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="728.0" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.02%)</title><rect x="725.0" y="259.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="728.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (2 samples, 0.02%)</title><rect x="725.5" y="307.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="728.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (2 samples, 0.02%)</title><rect x="725.9" y="323.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="728.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (2 samples, 0.02%)</title><rect x="726.3" y="339.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="729.3" y="350.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (3 samples, 0.03%)</title><rect x="727.3" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="730.3" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.02%)</title><rect x="727.7" y="435.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="730.7" y="446.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.02%)</title><rect x="728.0" y="435.0" width="0.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="731.0" y="446.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.03%)</title><rect x="728.2" y="435.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="731.2" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (6 samples, 0.07%)</title><rect x="728.7" y="499.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="731.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.03%)</title><rect x="728.9" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="731.9" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="728.9" y="467.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="731.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (2 samples, 0.02%)</title><rect x="729.5" y="531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="732.5" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="729.5" y="515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="732.5" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="729.5" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.5" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="729.5" y="483.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.5" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (8 samples, 0.09%)</title><rect x="729.8" y="563.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="732.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.09%)</title><rect x="729.8" y="547.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="732.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.08%)</title><rect x="729.9" y="531.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="732.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.08%)</title><rect x="729.9" y="515.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="732.9" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (7 samples, 0.08%)</title><rect x="729.9" y="499.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="732.9" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (20 samples, 0.22%)</title><rect x="730.8" y="595.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="733.8" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.14%)</title><rect x="731.6" y="579.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.6" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.10%)</title><rect x="731.8" y="563.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="734.8" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="733.0" y="563.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="736.0" y="574.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="733.0" y="547.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="736.0" y="558.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.02%)</title><rect x="733.0" y="531.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="736.0" y="542.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.02%)</title><rect x="733.0" y="515.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="736.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="733.3" y="595.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="736.3" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="733.7" y="595.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="736.7" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="733.9" y="579.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.9" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (121 samples, 1.31%)</title><rect x="734.2" y="611.0" width="15.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="737.2" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (121 samples, 1.31%)</title><rect x="734.2" y="595.0" width="15.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (121 samples, 1.31%)</title><rect x="734.2" y="579.0" width="15.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="737.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (121 samples, 1.31%)</title><rect x="734.2" y="563.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="737.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (121 samples, 1.31%)</title><rect x="734.2" y="547.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="737.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (116 samples, 1.26%)</title><rect x="734.2" y="531.0" width="14.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (116 samples, 1.26%)</title><rect x="734.2" y="515.0" width="14.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="737.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (108 samples, 1.17%)</title><rect x="735.3" y="499.0" width="13.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="738.3" y="510.0"></text>
</g>
<g>
<title>rpc_errlist (103 samples, 1.12%)</title><rect x="735.9" y="483.0" width="13.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="738.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.05%)</title><rect x="749.1" y="531.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.1" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.05%)</title><rect x="749.1" y="515.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="752.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.05%)</title><rect x="749.1" y="499.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="752.1" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="749.5" y="483.0" width="0.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="752.5" y="494.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=38659] (1,593 samples, 17.27%)</title><rect x="749.7" y="675.0" width="203.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="752.7" y="686.0">[NIO Selector #5 tid=38659]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,593 samples, 17.27%)</title><rect x="749.7" y="659.0" width="203.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="752.7" y="670.0">one/nio/server/SelectorThre..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (608 samples, 6.59%)</title><rect x="750.5" y="643.0" width="77.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="753.5" y="654.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.04%)</title><rect x="751.0" y="627.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="754.0" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.04%)</title><rect x="751.5" y="627.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="754.5" y="638.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.02%)</title><rect x="751.8" y="611.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="754.8" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (596 samples, 6.46%)</title><rect x="752.0" y="627.0" width="76.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="755.0" y="638.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (596 samples, 6.46%)</title><rect x="752.0" y="611.0" width="76.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="755.0" y="622.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (593 samples, 6.43%)</title><rect x="752.3" y="595.0" width="75.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.3" y="606.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (566 samples, 6.14%)</title><rect x="752.4" y="579.0" width="72.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="755.4" y="590.0">sun/nio/..</text>
</g>
<g>
<title>kevent (555 samples, 6.02%)</title><rect x="753.8" y="563.0" width="71.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="756.8" y="574.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (7 samples, 0.08%)</title><rect x="824.8" y="579.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="827.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.02%)</title><rect x="824.8" y="563.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="827.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.02%)</title><rect x="824.8" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="827.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.03%)</title><rect x="825.3" y="563.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="828.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.02%)</title><rect x="825.3" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="828.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.02%)</title><rect x="825.3" y="531.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="828.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.02%)</title><rect x="825.3" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="828.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.02%)</title><rect x="825.7" y="579.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="828.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (14 samples, 0.15%)</title><rect x="826.0" y="579.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="829.0" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (14 samples, 0.15%)</title><rect x="826.0" y="563.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="829.0" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.02%)</title><rect x="826.0" y="547.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="829.0" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (11 samples, 0.12%)</title><rect x="826.2" y="547.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="829.2" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (11 samples, 0.12%)</title><rect x="826.2" y="531.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="829.2" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (11 samples, 0.12%)</title><rect x="826.2" y="515.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="829.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (3 samples, 0.03%)</title><rect x="827.7" y="579.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="830.7" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (3 samples, 0.03%)</title><rect x="827.7" y="563.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="830.7" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.03%)</title><rect x="827.7" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="830.7" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.03%)</title><rect x="827.7" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="830.7" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.03%)</title><rect x="827.7" y="515.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="830.7" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (979 samples, 10.61%)</title><rect x="828.3" y="643.0" width="125.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="831.3" y="654.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (977 samples, 10.59%)</title><rect x="828.5" y="627.0" width="125.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="831.5" y="638.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (860 samples, 9.32%)</title><rect x="828.5" y="611.0" width="110.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="831.5" y="622.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (822 samples, 8.91%)</title><rect x="830.3" y="595.0" width="105.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="833.3" y="606.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (822 samples, 8.91%)</title><rect x="830.3" y="579.0" width="105.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="833.3" y="590.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (815 samples, 8.83%)</title><rect x="830.3" y="563.0" width="104.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="833.3" y="574.0">RequestHandl..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (297 samples, 3.22%)</title><rect x="831.1" y="547.0" width="38.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="834.1" y="558.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.07%)</title><rect x="831.5" y="531.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="834.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.07%)</title><rect x="831.5" y="515.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="834.5" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.07%)</title><rect x="831.5" y="499.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="834.5" y="510.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="831.6" y="483.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="834.6" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="831.8" y="483.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="834.8" y="494.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="832.0" y="467.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="835.0" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.02%)</title><rect x="832.0" y="451.0" width="0.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="835.0" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (285 samples, 3.09%)</title><rect x="832.2" y="531.0" width="36.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="835.2" y="542.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.17%)</title><rect x="832.4" y="515.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="835.4" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.05%)</title><rect x="833.8" y="499.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="836.8" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.05%)</title><rect x="833.8" y="483.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="836.8" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.05%)</title><rect x="833.8" y="467.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.8" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.05%)</title><rect x="833.8" y="451.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="836.8" y="462.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.05%)</title><rect x="833.8" y="435.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="836.8" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="834.1" y="419.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="837.1" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (268 samples, 2.91%)</title><rect x="834.4" y="515.0" width="34.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="837.4" y="526.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (268 samples, 2.91%)</title><rect x="834.4" y="499.0" width="34.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="837.4" y="510.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (266 samples, 2.88%)</title><rect x="834.4" y="483.0" width="34.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="837.4" y="494.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (266 samples, 2.88%)</title><rect x="834.4" y="467.0" width="34.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="837.4" y="478.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (265 samples, 2.87%)</title><rect x="834.5" y="451.0" width="33.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="837.5" y="462.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.05%)</title><rect x="834.5" y="435.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="837.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.05%)</title><rect x="834.5" y="419.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="837.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.05%)</title><rect x="834.5" y="403.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="837.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.05%)</title><rect x="834.5" y="387.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="837.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.03%)</title><rect x="834.8" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="837.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (260 samples, 2.82%)</title><rect x="835.2" y="435.0" width="33.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.2" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (259 samples, 2.81%)</title><rect x="835.3" y="419.0" width="33.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="838.3" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (259 samples, 2.81%)</title><rect x="835.3" y="403.0" width="33.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="838.3" y="414.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (257 samples, 2.79%)</title><rect x="835.6" y="387.0" width="32.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="838.6" y="398.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (253 samples, 2.74%)</title><rect x="836.1" y="371.0" width="32.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="839.1" y="382.0">su..</text>
</g>
<g>
<title>write (246 samples, 2.67%)</title><rect x="837.0" y="355.0" width="31.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="840.0" y="366.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.02%)</title><rect x="868.4" y="483.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="871.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="868.7" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="871.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (11 samples, 0.12%)</title><rect x="869.1" y="547.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="872.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="869.6" y="531.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="872.6" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="869.6" y="515.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="872.6" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="869.8" y="531.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="872.8" y="542.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.03%)</title><rect x="870.1" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="873.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.02%)</title><rect x="870.5" y="547.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="873.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (499 samples, 5.41%)</title><rect x="870.7" y="547.0" width="63.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="873.7" y="558.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.07%)</title><rect x="870.7" y="531.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="873.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.07%)</title><rect x="870.7" y="515.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="873.7" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="870.7" y="499.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="873.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.07%)</title><rect x="870.7" y="483.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="873.7" y="494.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="871.2" y="467.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="874.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (491 samples, 5.32%)</title><rect x="871.5" y="531.0" width="62.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.5" y="542.0">ru/mai..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.05%)</title><rect x="871.5" y="515.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.5" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="871.5" y="499.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="874.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="871.5" y="483.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="874.5" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="871.6" y="467.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="874.6" y="478.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.03%)</title><rect x="871.8" y="451.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="874.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (9 samples, 0.10%)</title><rect x="872.1" y="515.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="875.1" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (6 samples, 0.07%)</title><rect x="872.1" y="499.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="875.1" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.07%)</title><rect x="872.1" y="483.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="875.1" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (2 samples, 0.02%)</title><rect x="872.3" y="467.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="875.3" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.03%)</title><rect x="872.9" y="499.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="875.9" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="872.9" y="483.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="875.9" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.02%)</title><rect x="873.0" y="467.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="876.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (477 samples, 5.17%)</title><rect x="873.3" y="515.0" width="61.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="876.3" y="526.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="873.3" y="499.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="876.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="873.3" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="876.3" y="494.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (462 samples, 5.01%)</title><rect x="873.7" y="499.0" width="59.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="876.7" y="510.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (460 samples, 4.99%)</title><rect x="873.9" y="483.0" width="58.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="876.9" y="494.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (457 samples, 4.95%)</title><rect x="874.2" y="467.0" width="58.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="877.2" y="478.0">Java_o..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.02%)</title><rect x="875.1" y="451.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="878.1" y="462.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (444 samples, 4.81%)</title><rect x="875.8" y="451.0" width="56.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="878.8" y="462.0">rocksd..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.02%)</title><rect x="876.7" y="435.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="879.7" y="446.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (50 samples, 0.54%)</title><rect x="877.4" y="435.0" width="6.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="880.4" y="446.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.02%)</title><rect x="877.4" y="419.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="880.4" y="430.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="877.8" y="419.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="880.8" y="430.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.02%)</title><rect x="878.1" y="419.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="881.1" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="878.4" y="419.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="881.4" y="430.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="878.4" y="403.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="881.4" y="414.0"></text>
</g>
<g>
<title>jni_NewByteArray (30 samples, 0.33%)</title><rect x="878.8" y="419.0" width="3.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="881.8" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="879.2" y="403.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="882.2" y="414.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (2 samples, 0.02%)</title><rect x="879.7" y="403.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="882.7" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.03%)</title><rect x="880.1" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="883.1" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.02%)</title><rect x="880.2" y="387.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="883.2" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.02%)</title><rect x="880.2" y="371.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="883.2" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="880.2" y="355.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="883.2" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="880.2" y="339.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="883.2" y="350.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="880.2" y="323.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="883.2" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 0.18%)</title><rect x="880.4" y="403.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="883.4" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (16 samples, 0.17%)</title><rect x="880.4" y="387.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="883.4" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (15 samples, 0.16%)</title><rect x="880.6" y="371.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="883.6" y="382.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (4 samples, 0.04%)</title><rect x="880.6" y="355.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="883.6" y="366.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (2 samples, 0.02%)</title><rect x="880.8" y="339.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="883.8" y="350.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (3 samples, 0.03%)</title><rect x="881.2" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="884.2" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.02%)</title><rect x="881.6" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="884.6" y="366.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.02%)</title><rect x="881.9" y="355.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="884.9" y="366.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="881.9" y="339.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="884.9" y="350.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.09%)</title><rect x="882.6" y="419.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="885.6" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="883.4" y="403.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.4" y="414.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.02%)</title><rect x="883.9" y="435.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="886.9" y="446.0"></text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="884.2" y="435.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="887.2" y="446.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.02%)</title><rect x="884.2" y="419.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="887.2" y="430.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.02%)</title><rect x="884.2" y="403.0" width="0.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="887.2" y="414.0"></text>
</g>
<g>
<title>free_tiny (11 samples, 0.12%)</title><rect x="884.4" y="435.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="887.4" y="446.0"></text>
</g>
<g>
<title>tiny_free_no_lock (5 samples, 0.05%)</title><rect x="885.2" y="419.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="888.2" y="430.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="885.4" y="403.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="888.4" y="414.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.04%)</title><rect x="885.8" y="435.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="888.8" y="446.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.02%)</title><rect x="885.8" y="419.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="888.8" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="886.1" y="419.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="889.1" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (18 samples, 0.20%)</title><rect x="886.3" y="435.0" width="2.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="889.3" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (8 samples, 0.09%)</title><rect x="887.2" y="419.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="890.2" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.08%)</title><rect x="887.4" y="403.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="890.4" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.05%)</title><rect x="887.6" y="387.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="890.6" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="887.7" y="371.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="890.7" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.04%)</title><rect x="887.7" y="355.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="890.7" y="366.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="888.0" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.0" y="350.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.02%)</title><rect x="888.4" y="419.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="891.4" y="430.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.02%)</title><rect x="888.6" y="435.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="891.6" y="446.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.10%)</title><rect x="889.0" y="435.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="892.0" y="446.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.10%)</title><rect x="889.0" y="419.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="892.0" y="430.0"></text>
</g>
<g>
<title>malloc_zone_malloc (7 samples, 0.08%)</title><rect x="889.1" y="403.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="892.1" y="414.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.05%)</title><rect x="889.1" y="387.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="892.1" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.05%)</title><rect x="889.1" y="371.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="892.1" y="382.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="889.8" y="387.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="892.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (329 samples, 3.57%)</title><rect x="890.2" y="435.0" width="42.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="893.2" y="446.0">rock..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (325 samples, 3.52%)</title><rect x="890.4" y="419.0" width="41.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.4" y="430.0">roc..</text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (3 samples, 0.03%)</title><rect x="890.6" y="403.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="893.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (10 samples, 0.11%)</title><rect x="891.1" y="403.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="894.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (5 samples, 0.05%)</title><rect x="891.1" y="387.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="894.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (4 samples, 0.04%)</title><rect x="891.7" y="387.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="894.7" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="892.0" y="371.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="895.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (307 samples, 3.33%)</title><rect x="892.3" y="403.0" width="39.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="895.3" y="414.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (307 samples, 3.33%)</title><rect x="892.3" y="387.0" width="39.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="895.3" y="398.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="892.3" y="371.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="895.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (298 samples, 3.23%)</title><rect x="892.9" y="371.0" width="38.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="895.9" y="382.0">roc..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="893.5" y="355.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="896.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (8 samples, 0.09%)</title><rect x="893.9" y="355.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="896.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (4 samples, 0.04%)</title><rect x="894.4" y="339.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="897.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.02%)</title><rect x="894.6" y="323.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="897.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (5 samples, 0.05%)</title><rect x="894.9" y="355.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="897.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (4 samples, 0.04%)</title><rect x="894.9" y="339.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="897.9" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="895.2" y="323.0" width="0.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="898.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (2 samples, 0.02%)</title><rect x="895.7" y="355.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="898.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (43 samples, 0.47%)</title><rect x="896.1" y="355.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="899.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (38 samples, 0.41%)</title><rect x="896.6" y="339.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (18 samples, 0.20%)</title><rect x="899.0" y="323.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="902.0" y="334.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.02%)</title><rect x="899.4" y="307.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="902.4" y="318.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="899.6" y="307.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="902.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.09%)</title><rect x="900.1" y="307.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="903.1" y="318.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.03%)</title><rect x="900.8" y="291.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="903.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.03%)</title><rect x="901.8" y="355.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="904.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (222 samples, 2.41%)</title><rect x="902.5" y="355.0" width="28.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.5" y="366.0">ro..</text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const (3 samples, 0.03%)</title><rect x="903.9" y="339.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="906.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (3 samples, 0.03%)</title><rect x="904.2" y="339.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="907.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (5 samples, 0.05%)</title><rect x="904.8" y="339.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="907.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="905.0" y="323.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="908.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="905.4" y="339.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (192 samples, 2.08%)</title><rect x="905.6" y="339.0" width="24.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="908.6" y="350.0">r..</text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="906.7" y="323.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="909.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (176 samples, 1.91%)</title><rect x="907.2" y="323.0" width="22.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.2" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (16 samples, 0.17%)</title><rect x="909.2" y="307.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="912.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (14 samples, 0.15%)</title><rect x="909.4" y="291.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="912.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (14 samples, 0.15%)</title><rect x="909.4" y="275.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="912.4" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.10%)</title><rect x="910.0" y="259.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="913.0" y="270.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.10%)</title><rect x="910.0" y="243.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="913.0" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.09%)</title><rect x="910.1" y="227.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="913.1" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.09%)</title><rect x="910.1" y="211.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="913.1" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (7 samples, 0.08%)</title><rect x="910.3" y="195.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="913.3" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="910.9" y="179.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="913.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (9 samples, 0.10%)</title><rect x="911.3" y="307.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="914.3" y="318.0"></text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="911.5" y="291.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="914.5" y="302.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.02%)</title><rect x="911.5" y="275.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="914.5" y="286.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.02%)</title><rect x="911.5" y="259.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="914.5" y="270.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.04%)</title><rect x="911.8" y="291.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="914.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (3 samples, 0.03%)</title><rect x="912.4" y="307.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="915.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (50 samples, 0.54%)</title><rect x="912.8" y="307.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="915.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.02%)</title><rect x="913.7" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="916.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (41 samples, 0.44%)</title><rect x="914.0" y="291.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="917.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (36 samples, 0.39%)</title><rect x="914.3" y="275.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="917.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (17 samples, 0.18%)</title><rect x="914.6" y="259.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="917.6" y="270.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (2 samples, 0.02%)</title><rect x="914.7" y="243.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="917.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.02%)</title><rect x="915.1" y="243.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="918.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (7 samples, 0.08%)</title><rect x="915.5" y="243.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="918.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.03%)</title><rect x="916.0" y="227.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="919.0" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.03%)</title><rect x="916.0" y="211.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="919.0" y="222.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.02%)</title><rect x="916.0" y="195.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="919.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (3 samples, 0.03%)</title><rect x="916.4" y="243.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="919.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (17 samples, 0.18%)</title><rect x="916.8" y="259.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="919.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (3 samples, 0.03%)</title><rect x="916.8" y="243.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="919.8" y="254.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.02%)</title><rect x="916.8" y="227.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="919.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (11 samples, 0.12%)</title><rect x="917.2" y="243.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (11 samples, 0.12%)</title><rect x="917.2" y="227.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="920.2" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (11 samples, 0.12%)</title><rect x="917.2" y="211.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="920.2" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (11 samples, 0.12%)</title><rect x="917.2" y="195.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="920.2" y="206.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (11 samples, 0.12%)</title><rect x="917.2" y="179.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="920.2" y="190.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (11 samples, 0.12%)</title><rect x="917.2" y="163.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.2" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (10 samples, 0.11%)</title><rect x="917.3" y="147.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="920.3" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (7 samples, 0.08%)</title><rect x="917.5" y="131.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="920.5" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (5 samples, 0.05%)</title><rect x="917.8" y="115.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="920.8" y="126.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (2 samples, 0.02%)</title><rect x="918.2" y="99.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.03%)</title><rect x="918.6" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="921.6" y="254.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (2 samples, 0.02%)</title><rect x="919.0" y="275.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="922.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.02%)</title><rect x="919.2" y="307.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="922.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (41 samples, 0.44%)</title><rect x="919.5" y="307.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="922.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (3 samples, 0.03%)</title><rect x="919.7" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (32 samples, 0.35%)</title><rect x="920.1" y="291.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (7 samples, 0.08%)</title><rect x="921.4" y="275.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (13 samples, 0.14%)</title><rect x="922.3" y="275.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="925.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.05%)</title><rect x="923.3" y="259.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::SeekForPrev(rocksdb::Slice const&amp;) (2 samples, 0.02%)</title><rect x="924.2" y="291.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="927.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (2 samples, 0.02%)</title><rect x="924.5" y="291.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="927.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (2 samples, 0.02%)</title><rect x="924.7" y="307.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="927.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (33 samples, 0.36%)</title><rect x="925.1" y="307.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (28 samples, 0.30%)</title><rect x="925.6" y="291.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="928.6" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (2 samples, 0.02%)</title><rect x="927.5" y="275.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="930.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (6 samples, 0.07%)</title><rect x="927.8" y="275.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="930.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.04%)</title><rect x="928.0" y="259.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (2 samples, 0.02%)</title><rect x="928.2" y="243.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="931.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.05%)</title><rect x="928.5" y="275.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="931.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (3 samples, 0.03%)</title><rect x="929.3" y="307.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (5 samples, 0.05%)</title><rect x="930.2" y="339.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="930.5" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="933.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.02%)</title><rect x="931.0" y="371.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="934.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (2 samples, 0.02%)</title><rect x="931.6" y="403.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.6" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.02%)</title><rect x="932.0" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="935.0" y="430.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.02%)</title><rect x="932.3" y="435.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="935.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (12 samples, 0.13%)</title><rect x="932.8" y="499.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="935.8" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (8 samples, 0.09%)</title><rect x="932.8" y="483.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="935.8" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="933.0" y="467.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="936.0" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="933.4" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="936.4" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="933.4" y="451.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="936.4" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="933.8" y="483.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="936.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toUnsignedByte (2 samples, 0.02%)</title><rect x="934.0" y="483.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="937.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (2 samples, 0.02%)</title><rect x="934.3" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="937.3" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="934.3" y="515.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="937.3" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="934.3" y="499.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="937.3" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="934.3" y="483.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="937.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.07%)</title><rect x="934.6" y="563.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="937.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.07%)</title><rect x="934.6" y="547.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="937.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.05%)</title><rect x="934.7" y="531.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="937.7" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.05%)</title><rect x="934.7" y="515.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="937.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.05%)</title><rect x="934.7" y="499.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="937.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (20 samples, 0.22%)</title><rect x="935.5" y="595.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="938.5" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.16%)</title><rect x="936.1" y="579.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="939.1" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.11%)</title><rect x="936.5" y="563.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.5" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="937.8" y="563.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="940.8" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.02%)</title><rect x="938.0" y="595.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="941.0" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.02%)</title><rect x="938.3" y="595.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="941.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (117 samples, 1.27%)</title><rect x="938.5" y="611.0" width="15.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="941.5" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (117 samples, 1.27%)</title><rect x="938.5" y="595.0" width="15.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="941.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (117 samples, 1.27%)</title><rect x="938.5" y="579.0" width="15.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="941.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (117 samples, 1.27%)</title><rect x="938.5" y="563.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="941.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (117 samples, 1.27%)</title><rect x="938.5" y="547.0" width="15.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="941.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (111 samples, 1.20%)</title><rect x="938.5" y="531.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="941.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (111 samples, 1.20%)</title><rect x="938.5" y="515.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="941.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (103 samples, 1.12%)</title><rect x="939.5" y="499.0" width="13.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="942.5" y="510.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.02%)</title><rect x="940.3" y="483.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="943.3" y="494.0"></text>
</g>
<g>
<title>rpc_errlist (95 samples, 1.03%)</title><rect x="940.6" y="483.0" width="12.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="943.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 0.07%)</title><rect x="952.7" y="531.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="955.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.07%)</title><rect x="952.7" y="515.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.07%)</title><rect x="952.7" y="499.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.7" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=27395] (659 samples, 7.14%)</title><rect x="953.5" y="675.0" width="84.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="956.5" y="686.0">[NIO Selec..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (659 samples, 7.14%)</title><rect x="953.5" y="659.0" width="84.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="956.5" y="670.0">one/nio/se..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (286 samples, 3.10%)</title><rect x="953.9" y="643.0" width="36.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="956.9" y="654.0">one..</text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.02%)</title><rect x="954.0" y="627.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="957.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (283 samples, 3.07%)</title><rect x="954.3" y="627.0" width="36.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="957.3" y="638.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (283 samples, 3.07%)</title><rect x="954.3" y="611.0" width="36.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="957.3" y="622.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (282 samples, 3.06%)</title><rect x="954.4" y="595.0" width="36.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="957.4" y="606.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (272 samples, 2.95%)</title><rect x="954.4" y="579.0" width="34.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="957.4" y="590.0">su..</text>
</g>
<g>
<title>kevent (261 samples, 2.83%)</title><rect x="955.8" y="563.0" width="33.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="958.8" y="574.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.04%)</title><rect x="989.2" y="579.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="992.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.02%)</title><rect x="989.2" y="563.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="992.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.02%)</title><rect x="989.4" y="563.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="992.4" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.02%)</title><rect x="989.4" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="992.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.02%)</title><rect x="989.4" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="992.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.02%)</title><rect x="989.4" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="992.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.05%)</title><rect x="989.8" y="579.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="992.8" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.05%)</title><rect x="989.8" y="563.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="992.8" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.05%)</title><rect x="989.8" y="547.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="992.8" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.05%)</title><rect x="989.8" y="531.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="992.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.05%)</title><rect x="989.8" y="515.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="992.8" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (370 samples, 4.01%)</title><rect x="990.5" y="643.0" width="47.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="993.5" y="654.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (369 samples, 4.00%)</title><rect x="990.6" y="627.0" width="47.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="993.6" y="638.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (334 samples, 3.62%)</title><rect x="990.6" y="611.0" width="42.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="993.6" y="622.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (306 samples, 3.32%)</title><rect x="992.5" y="595.0" width="39.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="995.5" y="606.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (306 samples, 3.32%)</title><rect x="992.5" y="579.0" width="39.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="995.5" y="590.0">one..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (305 samples, 3.31%)</title><rect x="992.5" y="563.0" width="39.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="995.5" y="574.0">Req..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (106 samples, 1.15%)</title><rect x="992.5" y="547.0" width="13.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="995.5" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (105 samples, 1.14%)</title><rect x="992.6" y="531.0" width="13.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="995.6" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.08%)</title><rect x="992.8" y="515.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="995.8" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (97 samples, 1.05%)</title><rect x="993.7" y="515.0" width="12.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="996.7" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (97 samples, 1.05%)</title><rect x="993.7" y="499.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="996.7" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (96 samples, 1.04%)</title><rect x="993.8" y="483.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="996.8" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (96 samples, 1.04%)</title><rect x="993.8" y="467.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="996.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (96 samples, 1.04%)</title><rect x="993.8" y="451.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="996.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (95 samples, 1.03%)</title><rect x="993.9" y="435.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="996.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (95 samples, 1.03%)</title><rect x="993.9" y="419.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="996.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (95 samples, 1.03%)</title><rect x="993.9" y="403.0" width="12.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="996.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (94 samples, 1.02%)</title><rect x="994.0" y="387.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="997.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (86 samples, 0.93%)</title><rect x="994.9" y="371.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="997.9" y="382.0"></text>
</g>
<g>
<title>write (83 samples, 0.90%)</title><rect x="995.3" y="355.0" width="10.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="998.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.05%)</title><rect x="1006.1" y="547.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1009.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="1006.2" y="531.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1009.2" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="1006.2" y="515.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1009.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (194 samples, 2.10%)</title><rect x="1006.7" y="547.0" width="24.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1009.7" y="558.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="1006.7" y="531.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1009.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="1006.7" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1009.7" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1006.7" y="499.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1009.7" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1006.7" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1009.7" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1006.7" y="467.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1009.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (192 samples, 2.08%)</title><rect x="1007.0" y="531.0" width="24.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1010.0" y="542.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="1007.0" y="515.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1010.0" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1007.0" y="499.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1010.0" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1007.0" y="483.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1010.0" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1007.0" y="467.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1010.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (2 samples, 0.02%)</title><rect x="1007.2" y="515.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1010.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (188 samples, 2.04%)</title><rect x="1007.5" y="515.0" width="24.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1010.5" y="526.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="1007.5" y="499.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1010.5" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="1007.5" y="483.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1010.5" y="494.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (184 samples, 1.99%)</title><rect x="1007.7" y="499.0" width="23.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1010.7" y="510.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (184 samples, 1.99%)</title><rect x="1007.7" y="483.0" width="23.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1010.7" y="494.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (183 samples, 1.98%)</title><rect x="1007.9" y="467.0" width="23.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1010.9" y="478.0">J..</text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (177 samples, 1.92%)</title><rect x="1008.6" y="451.0" width="22.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.6" y="462.0">r..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (12 samples, 0.13%)</title><rect x="1008.9" y="435.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1011.9" y="446.0"></text>
</g>
<g>
<title>jni_NewByteArray (11 samples, 0.12%)</title><rect x="1009.0" y="419.0" width="1.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1012.0" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.08%)</title><rect x="1009.5" y="403.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1012.5" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.07%)</title><rect x="1009.6" y="387.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1012.6" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="1009.8" y="371.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1012.8" y="382.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="1010.4" y="435.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.4" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="1010.9" y="435.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1013.9" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.04%)</title><rect x="1011.3" y="435.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1014.3" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="1011.6" y="419.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1014.6" y="430.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.04%)</title><rect x="1011.9" y="435.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1014.9" y="446.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="1012.1" y="419.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1015.1" y="430.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.02%)</title><rect x="1012.1" y="403.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1015.1" y="414.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="1012.1" y="387.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1015.1" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="1012.1" y="371.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1015.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (146 samples, 1.58%)</title><rect x="1012.5" y="435.0" width="18.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1015.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (142 samples, 1.54%)</title><rect x="1012.7" y="419.0" width="18.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1015.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (3 samples, 0.03%)</title><rect x="1012.8" y="403.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1015.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.03%)</title><rect x="1012.8" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1015.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (137 samples, 1.49%)</title><rect x="1013.2" y="403.0" width="17.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (137 samples, 1.49%)</title><rect x="1013.2" y="387.0" width="17.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (135 samples, 1.46%)</title><rect x="1013.2" y="371.0" width="17.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1016.2" y="382.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="1013.6" y="355.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1016.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.03%)</title><rect x="1013.9" y="355.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1016.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.02%)</title><rect x="1014.0" y="339.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (2 samples, 0.02%)</title><rect x="1014.4" y="355.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (20 samples, 0.22%)</title><rect x="1014.6" y="355.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1017.6" y="366.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (19 samples, 0.21%)</title><rect x="1014.8" y="339.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.10%)</title><rect x="1015.9" y="323.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1018.9" y="334.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.02%)</title><rect x="1016.3" y="307.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1019.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="1016.5" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1019.5" y="318.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.02%)</title><rect x="1016.5" y="291.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1019.5" y="302.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="1016.8" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1019.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (104 samples, 1.13%)</title><rect x="1017.2" y="355.0" width="13.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1020.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (4 samples, 0.04%)</title><rect x="1017.8" y="339.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="1018.1" y="323.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1021.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (93 samples, 1.01%)</title><rect x="1018.3" y="339.0" width="11.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1021.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (89 samples, 0.96%)</title><rect x="1018.6" y="323.0" width="11.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (4 samples, 0.04%)</title><rect x="1019.2" y="307.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (4 samples, 0.04%)</title><rect x="1019.2" y="291.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1022.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (4 samples, 0.04%)</title><rect x="1019.2" y="275.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1022.2" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.04%)</title><rect x="1019.2" y="259.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1022.2" y="270.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.04%)</title><rect x="1019.2" y="243.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1022.2" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.04%)</title><rect x="1019.2" y="227.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1022.2" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.04%)</title><rect x="1019.2" y="211.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1022.2" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.04%)</title><rect x="1019.2" y="195.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1022.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.04%)</title><rect x="1019.7" y="307.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1022.7" y="318.0"></text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="1020.0" y="291.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1023.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (33 samples, 0.36%)</title><rect x="1020.3" y="307.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1023.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (27 samples, 0.29%)</title><rect x="1021.0" y="291.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (27 samples, 0.29%)</title><rect x="1021.0" y="275.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (14 samples, 0.15%)</title><rect x="1021.2" y="259.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1024.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (11 samples, 0.12%)</title><rect x="1021.3" y="243.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.3" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.03%)</title><rect x="1021.5" y="227.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1024.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (5 samples, 0.05%)</title><rect x="1021.9" y="227.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.9" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.05%)</title><rect x="1021.9" y="211.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1024.9" y="222.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.05%)</title><rect x="1021.9" y="195.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1024.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (11 samples, 0.12%)</title><rect x="1022.9" y="259.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1025.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (9 samples, 0.10%)</title><rect x="1023.1" y="243.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (9 samples, 0.10%)</title><rect x="1023.1" y="227.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1026.1" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (8 samples, 0.09%)</title><rect x="1023.2" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1026.2" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (7 samples, 0.08%)</title><rect x="1023.3" y="195.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1026.3" y="206.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (7 samples, 0.08%)</title><rect x="1023.3" y="179.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.3" y="190.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (7 samples, 0.08%)</title><rect x="1023.3" y="163.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1026.3" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (7 samples, 0.08%)</title><rect x="1023.3" y="147.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.3" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (4 samples, 0.04%)</title><rect x="1023.7" y="131.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.7" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (4 samples, 0.04%)</title><rect x="1023.7" y="115.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (16 samples, 0.17%)</title><rect x="1024.7" y="307.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1027.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (14 samples, 0.15%)</title><rect x="1024.9" y="291.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1027.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (5 samples, 0.05%)</title><rect x="1025.5" y="275.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.5" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1025.9" y="259.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1028.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (4 samples, 0.04%)</title><rect x="1026.1" y="275.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.1" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="1026.3" y="259.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1029.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (2 samples, 0.02%)</title><rect x="1026.8" y="307.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (22 samples, 0.24%)</title><rect x="1027.0" y="307.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (18 samples, 0.20%)</title><rect x="1027.3" y="291.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1030.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (9 samples, 0.10%)</title><rect x="1028.3" y="275.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1031.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (7 samples, 0.08%)</title><rect x="1028.4" y="259.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1031.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (2 samples, 0.02%)</title><rect x="1028.6" y="243.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (4 samples, 0.04%)</title><rect x="1028.8" y="243.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="1029.6" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (2 samples, 0.02%)</title><rect x="1030.0" y="323.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1033.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (2 samples, 0.02%)</title><rect x="1030.2" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1033.2" y="350.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.02%)</title><rect x="1030.9" y="419.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1033.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.02%)</title><rect x="1031.3" y="499.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1034.3" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.02%)</title><rect x="1031.3" y="483.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 0.11%)</title><rect x="1031.6" y="595.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1034.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1031.9" y="579.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1034.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1031.9" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1034.9" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1031.9" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1034.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="1031.9" y="531.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1034.9" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.02%)</title><rect x="1032.0" y="515.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1035.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="1032.3" y="579.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1035.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="1032.3" y="563.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1035.3" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="1032.9" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.02%)</title><rect x="1033.1" y="579.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1036.1" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.02%)</title><rect x="1033.1" y="563.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1036.1" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (35 samples, 0.38%)</title><rect x="1033.3" y="611.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1036.3" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (31 samples, 0.34%)</title><rect x="1033.8" y="595.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1036.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (31 samples, 0.34%)</title><rect x="1033.8" y="579.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1036.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 0.34%)</title><rect x="1033.8" y="563.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1036.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (31 samples, 0.34%)</title><rect x="1033.8" y="547.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1036.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (30 samples, 0.33%)</title><rect x="1033.8" y="531.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1036.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (30 samples, 0.33%)</title><rect x="1033.8" y="515.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1036.8" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (29 samples, 0.31%)</title><rect x="1033.9" y="499.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1036.9" y="510.0"></text>
</g>
<g>
<title>rpc_errlist (29 samples, 0.31%)</title><rect x="1033.9" y="483.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1036.9" y="494.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=27907] (1,165 samples, 12.63%)</title><rect x="1037.8" y="675.0" width="149.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1040.8" y="686.0">[NIO Selector #7 ti..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,165 samples, 12.63%)</title><rect x="1037.8" y="659.0" width="149.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1040.8" y="670.0">one/nio/server/Sele..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (463 samples, 5.02%)</title><rect x="1038.0" y="643.0" width="59.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1041.0" y="654.0">one/ni..</text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.02%)</title><rect x="1038.8" y="627.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (455 samples, 4.93%)</title><rect x="1039.1" y="627.0" width="58.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1042.1" y="638.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (455 samples, 4.93%)</title><rect x="1039.1" y="611.0" width="58.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1042.1" y="622.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (455 samples, 4.93%)</title><rect x="1039.1" y="595.0" width="58.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1042.1" y="606.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (437 samples, 4.74%)</title><rect x="1039.1" y="579.0" width="55.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1042.1" y="590.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.05%)</title><rect x="1040.7" y="563.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1043.7" y="574.0"></text>
</g>
<g>
<title>kevent (419 samples, 4.54%)</title><rect x="1041.4" y="563.0" width="53.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1044.4" y="574.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (11 samples, 0.12%)</title><rect x="1095.0" y="579.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1098.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.03%)</title><rect x="1095.1" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1098.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="1095.1" y="547.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1098.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (7 samples, 0.08%)</title><rect x="1095.5" y="563.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1098.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.04%)</title><rect x="1095.5" y="547.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1098.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.04%)</title><rect x="1095.5" y="531.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1098.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.04%)</title><rect x="1095.5" y="515.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1098.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (3 samples, 0.03%)</title><rect x="1096.0" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1099.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.03%)</title><rect x="1096.4" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1099.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.02%)</title><rect x="1096.8" y="579.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1099.8" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.02%)</title><rect x="1096.8" y="563.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1099.8" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.02%)</title><rect x="1096.8" y="547.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1099.8" y="558.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.02%)</title><rect x="1096.8" y="531.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1099.8" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.02%)</title><rect x="1096.8" y="515.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1099.8" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.02%)</title><rect x="1097.0" y="579.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1100.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.02%)</title><rect x="1097.0" y="563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1100.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (2 samples, 0.02%)</title><rect x="1097.0" y="547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1100.0" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (700 samples, 7.59%)</title><rect x="1097.3" y="643.0" width="89.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1100.3" y="654.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (699 samples, 7.58%)</title><rect x="1097.4" y="627.0" width="89.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1100.4" y="638.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (633 samples, 6.86%)</title><rect x="1097.4" y="611.0" width="81.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1100.4" y="622.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (602 samples, 6.53%)</title><rect x="1098.9" y="595.0" width="77.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1101.9" y="606.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (602 samples, 6.53%)</title><rect x="1098.9" y="579.0" width="77.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1101.9" y="590.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (600 samples, 6.50%)</title><rect x="1098.9" y="563.0" width="76.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1101.9" y="574.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (227 samples, 2.46%)</title><rect x="1099.4" y="547.0" width="29.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1102.4" y="558.0">on..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (12 samples, 0.13%)</title><rect x="1099.7" y="531.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1102.7" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.13%)</title><rect x="1099.7" y="515.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1102.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.13%)</title><rect x="1099.7" y="499.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1102.7" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.10%)</title><rect x="1100.1" y="483.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.1" y="494.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (3 samples, 0.03%)</title><rect x="1100.1" y="467.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1103.1" y="478.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.05%)</title><rect x="1100.6" y="467.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1103.6" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (4 samples, 0.04%)</title><rect x="1100.7" y="451.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1103.7" y="462.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.02%)</title><rect x="1101.0" y="435.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1104.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (213 samples, 2.31%)</title><rect x="1101.2" y="531.0" width="27.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1104.2" y="542.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.05%)</title><rect x="1101.2" y="515.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1104.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (208 samples, 2.25%)</title><rect x="1101.9" y="515.0" width="26.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1104.9" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (208 samples, 2.25%)</title><rect x="1101.9" y="499.0" width="26.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1104.9" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (206 samples, 2.23%)</title><rect x="1102.0" y="483.0" width="26.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1105.0" y="494.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (206 samples, 2.23%)</title><rect x="1102.0" y="467.0" width="26.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1105.0" y="478.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="1102.0" y="451.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1105.0" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1102.0" y="435.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1105.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1102.0" y="419.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1105.0" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1102.0" y="403.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1105.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="1102.0" y="387.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1105.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (202 samples, 2.19%)</title><rect x="1102.5" y="451.0" width="25.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1105.5" y="462.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (202 samples, 2.19%)</title><rect x="1102.5" y="435.0" width="25.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1105.5" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (200 samples, 2.17%)</title><rect x="1102.8" y="419.0" width="25.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1105.8" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (200 samples, 2.17%)</title><rect x="1102.8" y="403.0" width="25.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1105.8" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (200 samples, 2.17%)</title><rect x="1102.8" y="387.0" width="25.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1105.8" y="398.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (195 samples, 2.11%)</title><rect x="1103.4" y="371.0" width="24.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1106.4" y="382.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.02%)</title><rect x="1104.3" y="355.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1107.3" y="366.0"></text>
</g>
<g>
<title>write (185 samples, 2.01%)</title><rect x="1104.7" y="355.0" width="23.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1107.7" y="366.0">w..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.10%)</title><rect x="1128.5" y="547.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1131.5" y="558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="1129.0" y="531.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1132.0" y="542.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="1129.4" y="531.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1132.4" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="1129.4" y="515.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1132.4" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="1129.4" y="499.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1132.4" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="1129.4" y="483.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1132.4" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (360 samples, 3.90%)</title><rect x="1129.6" y="547.0" width="46.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1132.6" y="558.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.05%)</title><rect x="1129.6" y="531.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1132.6" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.05%)</title><rect x="1129.6" y="515.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1132.6" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1129.6" y="499.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1132.6" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="1129.6" y="483.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1132.6" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1129.6" y="467.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1132.6" y="478.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.02%)</title><rect x="1130.0" y="467.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1133.0" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.get (355 samples, 3.85%)</title><rect x="1130.3" y="531.0" width="45.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1133.3" y="542.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (13 samples, 0.14%)</title><rect x="1130.5" y="515.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1133.5" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (10 samples, 0.11%)</title><rect x="1130.5" y="499.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1133.5" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.11%)</title><rect x="1130.5" y="483.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1133.5" y="494.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (2 samples, 0.02%)</title><rect x="1130.9" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1133.9" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.02%)</title><rect x="1131.2" y="467.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1134.2" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="1131.5" y="467.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1134.5" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.03%)</title><rect x="1131.8" y="499.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1134.8" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1131.8" y="483.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1134.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (340 samples, 3.69%)</title><rect x="1132.2" y="515.0" width="43.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1135.2" y="526.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="1132.2" y="499.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1135.2" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.04%)</title><rect x="1132.2" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1135.2" y="494.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (334 samples, 3.62%)</title><rect x="1132.7" y="499.0" width="42.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1135.7" y="510.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (332 samples, 3.60%)</title><rect x="1133.0" y="483.0" width="42.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1136.0" y="494.0">org/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (330 samples, 3.58%)</title><rect x="1133.2" y="467.0" width="42.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1136.2" y="478.0">Java..</text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (2 samples, 0.02%)</title><rect x="1133.3" y="451.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.3" y="462.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.02%)</title><rect x="1133.7" y="451.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1136.7" y="462.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.02%)</title><rect x="1134.0" y="451.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1137.0" y="462.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (321 samples, 3.48%)</title><rect x="1134.2" y="451.0" width="41.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.2" y="462.0">roc..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (26 samples, 0.28%)</title><rect x="1135.1" y="435.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1138.1" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="1135.6" y="419.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1138.6" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="1135.8" y="403.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.8" y="414.0"></text>
</g>
<g>
<title>jni_NewByteArray (16 samples, 0.17%)</title><rect x="1136.0" y="419.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1139.0" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.02%)</title><rect x="1136.7" y="403.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.7" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.02%)</title><rect x="1136.7" y="387.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.7" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.02%)</title><rect x="1136.7" y="371.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.7" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="1136.7" y="355.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.7" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="1136.7" y="339.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.7" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.10%)</title><rect x="1136.9" y="403.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.9" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.08%)</title><rect x="1137.0" y="387.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.0" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.07%)</title><rect x="1137.0" y="371.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.0" y="382.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.02%)</title><rect x="1137.6" y="355.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.6" y="366.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.03%)</title><rect x="1138.1" y="419.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1141.1" y="430.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.02%)</title><rect x="1138.6" y="435.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1141.6" y="446.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="1138.8" y="435.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1141.8" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.07%)</title><rect x="1139.2" y="435.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1142.2" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.05%)</title><rect x="1139.2" y="419.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.2" y="430.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.05%)</title><rect x="1139.2" y="403.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.2" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.05%)</title><rect x="1139.2" y="387.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.2" y="398.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.04%)</title><rect x="1139.3" y="371.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.3" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.02%)</title><rect x="1139.5" y="355.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.5" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.04%)</title><rect x="1140.2" y="435.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1143.2" y="446.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.04%)</title><rect x="1140.2" y="419.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1143.2" y="430.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.04%)</title><rect x="1140.2" y="403.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1143.2" y="414.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="1140.4" y="387.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1143.4" y="398.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="1140.5" y="371.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1143.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (269 samples, 2.92%)</title><rect x="1140.8" y="435.0" width="34.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.8" y="446.0">ro..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (264 samples, 2.86%)</title><rect x="1141.1" y="419.0" width="33.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.1" y="430.0">ro..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (4 samples, 0.04%)</title><rect x="1141.3" y="403.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.02%)</title><rect x="1141.5" y="387.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (255 samples, 2.76%)</title><rect x="1141.8" y="403.0" width="32.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.8" y="414.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (255 samples, 2.76%)</title><rect x="1141.8" y="387.0" width="32.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.8" y="398.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (249 samples, 2.70%)</title><rect x="1142.0" y="371.0" width="31.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.0" y="382.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="1142.5" y="355.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1145.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.03%)</title><rect x="1143.1" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.02%)</title><rect x="1143.2" y="339.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (4 samples, 0.04%)</title><rect x="1143.4" y="355.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.02%)</title><rect x="1143.6" y="339.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.02%)</title><rect x="1144.0" y="355.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (2 samples, 0.02%)</title><rect x="1144.2" y="355.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (39 samples, 0.42%)</title><rect x="1144.5" y="355.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (31 samples, 0.34%)</title><rect x="1145.4" y="339.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (19 samples, 0.21%)</title><rect x="1146.8" y="323.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.8" y="334.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.02%)</title><rect x="1147.7" y="307.0" width="0.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1150.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (7 samples, 0.08%)</title><rect x="1148.0" y="307.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.0" y="318.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="1148.9" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.02%)</title><rect x="1149.5" y="355.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.02%)</title><rect x="1149.7" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.7" y="366.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (186 samples, 2.02%)</title><rect x="1150.0" y="355.0" width="23.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.0" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (2 samples, 0.02%)</title><rect x="1151.4" y="339.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (3 samples, 0.03%)</title><rect x="1151.9" y="339.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.02%)</title><rect x="1152.3" y="339.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (5 samples, 0.05%)</title><rect x="1152.5" y="339.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (157 samples, 1.70%)</title><rect x="1153.2" y="339.0" width="20.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (151 samples, 1.64%)</title><rect x="1153.7" y="323.0" width="19.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.7" y="334.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1155.1" y="307.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1158.1" y="318.0"></text>
</g>
<g>
<title>free (3 samples, 0.03%)</title><rect x="1155.3" y="307.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1158.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (11 samples, 0.12%)</title><rect x="1155.8" y="307.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (9 samples, 0.10%)</title><rect x="1156.1" y="291.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (8 samples, 0.09%)</title><rect x="1156.2" y="275.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.2" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.05%)</title><rect x="1156.6" y="259.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1159.6" y="270.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.04%)</title><rect x="1156.7" y="243.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1159.7" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.04%)</title><rect x="1156.7" y="227.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1159.7" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.04%)</title><rect x="1156.7" y="211.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1159.7" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.04%)</title><rect x="1156.7" y="195.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1159.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (5 samples, 0.05%)</title><rect x="1157.3" y="307.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.3" y="318.0"></text>
</g>
<g>
<title>free (3 samples, 0.03%)</title><rect x="1157.4" y="291.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1160.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (45 samples, 0.49%)</title><rect x="1158.0" y="307.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::FindBlockForward() (2 samples, 0.02%)</title><rect x="1158.9" y="291.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (35 samples, 0.38%)</title><rect x="1159.3" y="291.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (31 samples, 0.34%)</title><rect x="1159.4" y="275.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (17 samples, 0.18%)</title><rect x="1159.7" y="259.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (3 samples, 0.03%)</title><rect x="1159.9" y="243.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (9 samples, 0.10%)</title><rect x="1160.3" y="243.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.02%)</title><rect x="1161.2" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.2" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.02%)</title><rect x="1161.2" y="211.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1164.2" y="222.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.02%)</title><rect x="1161.2" y="195.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1164.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (3 samples, 0.03%)</title><rect x="1161.5" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.02%)</title><rect x="1161.9" y="259.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (7 samples, 0.08%)</title><rect x="1162.1" y="259.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (6 samples, 0.07%)</title><rect x="1162.2" y="243.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (6 samples, 0.07%)</title><rect x="1162.2" y="227.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.2" y="238.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (6 samples, 0.07%)</title><rect x="1162.2" y="211.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.2" y="222.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (6 samples, 0.07%)</title><rect x="1162.2" y="195.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.2" y="206.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (6 samples, 0.07%)</title><rect x="1162.2" y="179.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.2" y="190.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (6 samples, 0.07%)</title><rect x="1162.2" y="163.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.2" y="174.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (6 samples, 0.07%)</title><rect x="1162.2" y="147.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.2" y="158.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (2 samples, 0.02%)</title><rect x="1162.5" y="131.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.5" y="142.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (2 samples, 0.02%)</title><rect x="1162.5" y="115.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (2 samples, 0.02%)</title><rect x="1163.1" y="259.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.1" y="270.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (3 samples, 0.03%)</title><rect x="1163.4" y="275.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1166.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (30 samples, 0.33%)</title><rect x="1163.8" y="307.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (2 samples, 0.02%)</title><rect x="1163.8" y="291.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (27 samples, 0.29%)</title><rect x="1164.0" y="291.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (10 samples, 0.11%)</title><rect x="1165.1" y="275.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.1" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1166.1" y="259.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1169.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (7 samples, 0.08%)</title><rect x="1166.3" y="275.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.05%)</title><rect x="1166.6" y="259.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.6" y="270.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.04%)</title><rect x="1166.7" y="243.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1169.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.02%)</title><rect x="1167.2" y="275.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (4 samples, 0.04%)</title><rect x="1167.6" y="307.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (2 samples, 0.02%)</title><rect x="1168.1" y="307.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (36 samples, 0.39%)</title><rect x="1168.4" y="307.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.4" y="318.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (3 samples, 0.03%)</title><rect x="1168.5" y="291.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1171.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (31 samples, 0.34%)</title><rect x="1168.9" y="291.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (4 samples, 0.04%)</title><rect x="1170.8" y="275.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1173.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (8 samples, 0.09%)</title><rect x="1171.6" y="275.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.04%)</title><rect x="1172.1" y="259.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (2 samples, 0.02%)</title><rect x="1172.3" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (2 samples, 0.02%)</title><rect x="1173.0" y="323.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (4 samples, 0.04%)</title><rect x="1173.2" y="339.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.02%)</title><rect x="1174.0" y="371.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.0" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.02%)</title><rect x="1174.9" y="419.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.02%)</title><rect x="1175.4" y="499.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1178.4" y="510.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.02%)</title><rect x="1175.7" y="563.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1178.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.02%)</title><rect x="1175.7" y="547.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1178.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="1175.7" y="531.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1178.7" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.02%)</title><rect x="1175.7" y="515.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1178.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.02%)</title><rect x="1175.7" y="499.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1178.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16 samples, 0.17%)</title><rect x="1175.9" y="595.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1178.9" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="1176.1" y="579.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1179.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1176.4" y="579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1179.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="1176.4" y="563.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1179.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="1176.4" y="547.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1179.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="1176.4" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1179.4" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.08%)</title><rect x="1176.7" y="579.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1179.7" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="1176.8" y="563.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1179.8" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.02%)</title><rect x="1177.3" y="563.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.3" y="574.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.02%)</title><rect x="1177.3" y="547.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1180.3" y="558.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.02%)</title><rect x="1177.3" y="531.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1180.3" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.03%)</title><rect x="1177.6" y="579.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1180.6" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="1178.0" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1181.0" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="1178.0" y="579.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1181.0" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (66 samples, 0.72%)</title><rect x="1178.4" y="611.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1181.4" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (66 samples, 0.72%)</title><rect x="1178.4" y="595.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1181.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (66 samples, 0.72%)</title><rect x="1178.4" y="579.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1181.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (66 samples, 0.72%)</title><rect x="1178.4" y="563.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1181.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (66 samples, 0.72%)</title><rect x="1178.4" y="547.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1181.4" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (63 samples, 0.68%)</title><rect x="1178.4" y="531.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1181.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (63 samples, 0.68%)</title><rect x="1178.4" y="515.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1181.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (56 samples, 0.61%)</title><rect x="1179.3" y="499.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1182.3" y="510.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.02%)</title><rect x="1179.4" y="483.0" width="0.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1182.4" y="494.0"></text>
</g>
<g>
<title>rpc_errlist (53 samples, 0.57%)</title><rect x="1179.6" y="483.0" width="6.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1182.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.03%)</title><rect x="1186.4" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1189.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.03%)</title><rect x="1186.4" y="515.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1189.4" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.03%)</title><rect x="1186.4" y="499.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1189.4" y="510.0"></text>
</g>
<g>
<title>[RMI TCP Connection(3)-127.0.0.1 tid=32771] (18 samples, 0.20%)</title><rect x="1186.8" y="675.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1189.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.run (17 samples, 0.18%)</title><rect x="1186.9" y="659.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1189.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (17 samples, 0.18%)</title><rect x="1186.9" y="643.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1189.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (17 samples, 0.18%)</title><rect x="1186.9" y="627.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1189.9" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (17 samples, 0.18%)</title><rect x="1186.9" y="611.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1189.9" y="622.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (17 samples, 0.18%)</title><rect x="1186.9" y="595.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1189.9" y="606.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$103/1230999400.run (17 samples, 0.18%)</title><rect x="1186.9" y="579.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1189.9" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (17 samples, 0.18%)</title><rect x="1186.9" y="563.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1189.9" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (17 samples, 0.18%)</title><rect x="1186.9" y="547.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1189.9" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (17 samples, 0.18%)</title><rect x="1186.9" y="531.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1189.9" y="542.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (4 samples, 0.04%)</title><rect x="1186.9" y="515.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1189.9" y="526.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (4 samples, 0.04%)</title><rect x="1186.9" y="499.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1189.9" y="510.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (4 samples, 0.04%)</title><rect x="1186.9" y="483.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1189.9" y="494.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (4 samples, 0.04%)</title><rect x="1186.9" y="467.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1189.9" y="478.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (4 samples, 0.04%)</title><rect x="1186.9" y="451.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1189.9" y="462.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead (4 samples, 0.04%)</title><rect x="1186.9" y="435.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1189.9" y="446.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead0 (4 samples, 0.04%)</title><rect x="1186.9" y="419.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1189.9" y="430.0"></text>
</g>
<g>
<title>Java_java_net_SocketInputStream_socketRead0 (4 samples, 0.04%)</title><rect x="1186.9" y="403.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1189.9" y="414.0"></text>
</g>
<g>
<title>select$DARWIN_EXTSN (3 samples, 0.03%)</title><rect x="1187.1" y="387.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1190.1" y="398.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (13 samples, 0.14%)</title><rect x="1187.4" y="515.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1190.4" y="526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (13 samples, 0.14%)</title><rect x="1187.4" y="499.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1190.4" y="510.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (12 samples, 0.13%)</title><rect x="1187.6" y="483.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1190.6" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (12 samples, 0.13%)</title><rect x="1187.6" y="467.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1190.6" y="478.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (12 samples, 0.13%)</title><rect x="1187.6" y="451.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1190.6" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (7 samples, 0.08%)</title><rect x="1187.6" y="435.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1190.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (7 samples, 0.08%)</title><rect x="1187.6" y="419.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1190.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (6 samples, 0.07%)</title><rect x="1187.7" y="403.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1190.7" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (6 samples, 0.07%)</title><rect x="1187.7" y="387.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1190.7" y="398.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (5 samples, 0.05%)</title><rect x="1187.7" y="371.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1190.7" y="382.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (5 samples, 0.05%)</title><rect x="1187.7" y="355.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1190.7" y="366.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (5 samples, 0.05%)</title><rect x="1187.7" y="339.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1190.7" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (5 samples, 0.05%)</title><rect x="1187.7" y="323.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1190.7" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (5 samples, 0.05%)</title><rect x="1187.7" y="307.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1190.7" y="318.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (5 samples, 0.05%)</title><rect x="1187.7" y="291.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1190.7" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (5 samples, 0.05%)</title><rect x="1187.7" y="275.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1190.7" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (5 samples, 0.05%)</title><rect x="1187.7" y="259.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1190.7" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (4 samples, 0.04%)</title><rect x="1187.7" y="243.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1190.7" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (4 samples, 0.04%)</title><rect x="1187.7" y="227.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1190.7" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (4 samples, 0.04%)</title><rect x="1187.7" y="211.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1190.7" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (4 samples, 0.04%)</title><rect x="1187.7" y="195.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1190.7" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (4 samples, 0.04%)</title><rect x="1187.7" y="179.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1190.7" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.02%)</title><rect x="1187.7" y="163.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1190.7" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (2 samples, 0.02%)</title><rect x="1187.7" y="147.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1190.7" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.02%)</title><rect x="1187.7" y="131.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1190.7" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (2 samples, 0.02%)</title><rect x="1187.7" y="115.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1190.7" y="126.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1187.7" y="99.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1190.7" y="110.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (2 samples, 0.02%)</title><rect x="1188.0" y="163.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1191.0" y="174.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.02%)</title><rect x="1188.0" y="147.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1191.0" y="158.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.02%)</title><rect x="1188.0" y="131.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1191.0" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (2 samples, 0.02%)</title><rect x="1188.0" y="115.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1191.0" y="126.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (2 samples, 0.02%)</title><rect x="1188.0" y="99.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1191.0" y="110.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.02%)</title><rect x="1188.0" y="83.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1191.0" y="94.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.02%)</title><rect x="1188.0" y="67.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1191.0" y="78.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (2 samples, 0.02%)</title><rect x="1188.0" y="51.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1191.0" y="62.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (2 samples, 0.02%)</title><rect x="1188.0" y="35.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1191.0" y="46.0"></text>
</g>
<g>
<title>[tid=29203] (6 samples, 0.07%)</title><rect x="1189.2" y="675.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1192.2" y="686.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.07%)</title><rect x="1189.2" y="659.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1192.2" y="670.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.07%)</title><rect x="1189.2" y="643.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.2" y="654.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.07%)</title><rect x="1189.2" y="627.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.2" y="638.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.07%)</title><rect x="1189.2" y="611.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.2" y="622.0"></text>
</g>
<g>
<title>JavaThread::run() (6 samples, 0.07%)</title><rect x="1189.2" y="595.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.2" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (6 samples, 0.07%)</title><rect x="1189.2" y="579.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.2" y="590.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (6 samples, 0.07%)</title><rect x="1189.2" y="563.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.2" y="574.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (6 samples, 0.07%)</title><rect x="1189.2" y="547.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.2" y="558.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 0.07%)</title><rect x="1189.2" y="531.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.2" y="542.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (6 samples, 0.07%)</title><rect x="1189.2" y="515.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.2" y="526.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (4 samples, 0.04%)</title><rect x="1189.2" y="499.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.2" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (4 samples, 0.04%)</title><rect x="1189.2" y="483.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.2" y="494.0"></text>
</g>
</g>
</svg>
