<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (7,771 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>[Java: C2 CompilerThread0 tid=21763] (49 samples, 0.63%)</title><rect x="10.3" y="659.0" width="7.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.3" y="670.0"></text>
</g>
<g>
<title>thread_start (48 samples, 0.62%)</title><rect x="10.5" y="643.0" width="7.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.5" y="654.0"></text>
</g>
<g>
<title>_pthread_start (48 samples, 0.62%)</title><rect x="10.5" y="627.0" width="7.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.5" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (48 samples, 0.62%)</title><rect x="10.5" y="611.0" width="7.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.5" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (48 samples, 0.62%)</title><rect x="10.5" y="595.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.5" y="606.0"></text>
</g>
<g>
<title>JavaThread::run() (48 samples, 0.62%)</title><rect x="10.5" y="579.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.5" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (48 samples, 0.62%)</title><rect x="10.5" y="563.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.5" y="574.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (48 samples, 0.62%)</title><rect x="10.5" y="547.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.5" y="558.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (48 samples, 0.62%)</title><rect x="10.5" y="531.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.5" y="542.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (48 samples, 0.62%)</title><rect x="10.5" y="515.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.5" y="526.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (48 samples, 0.62%)</title><rect x="10.5" y="499.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.5" y="510.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (31 samples, 0.40%)</title><rect x="10.5" y="483.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.5" y="494.0"></text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.03%)</title><rect x="10.5" y="467.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.5" y="478.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.04%)</title><rect x="10.8" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="478.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.04%)</title><rect x="10.8" y="451.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="462.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.03%)</title><rect x="10.8" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.05%)</title><rect x="11.2" y="467.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.2" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.05%)</title><rect x="11.2" y="451.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.2" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 0.28%)</title><rect x="11.8" y="467.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.8" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.04%)</title><rect x="12.1" y="451.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.1" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.06%)</title><rect x="12.6" y="451.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.6" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.04%)</title><rect x="12.7" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.7" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.03%)</title><rect x="13.5" y="451.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.5" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.04%)</title><rect x="13.8" y="451.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.8" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.03%)</title><rect x="13.8" y="435.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.8" y="446.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.03%)</title><rect x="14.3" y="451.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.3" y="462.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.04%)</title><rect x="14.6" y="451.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.6" y="462.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 0.12%)</title><rect x="15.2" y="483.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.2" y="494.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (3 samples, 0.04%)</title><rect x="15.2" y="467.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="18.2" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 0.04%)</title><rect x="15.2" y="451.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.2" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="15.3" y="435.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="18.3" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (3 samples, 0.04%)</title><rect x="15.8" y="467.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.8" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.03%)</title><rect x="15.8" y="451.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.8" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.03%)</title><rect x="16.2" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="19.2" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.03%)</title><rect x="16.2" y="451.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="19.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.10%)</title><rect x="16.5" y="483.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="19.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.10%)</title><rect x="16.5" y="467.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.10%)</title><rect x="16.5" y="451.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.10%)</title><rect x="16.5" y="435.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.10%)</title><rect x="16.5" y="419.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="16.7" y="403.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="19.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.06%)</title><rect x="16.7" y="387.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="19.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.06%)</title><rect x="16.7" y="371.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.06%)</title><rect x="16.7" y="355.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.06%)</title><rect x="16.7" y="339.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="19.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="16.8" y="323.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="19.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="16.8" y="307.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="16.8" y="291.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="16.8" y="275.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="19.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="16.8" y="259.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="16.8" y="243.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="19.8" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="16.8" y="227.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="19.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="16.8" y="211.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="19.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="16.8" y="195.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="16.8" y="179.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.8" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="16.8" y="163.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="19.8" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="16.8" y="147.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="19.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="16.8" y="131.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="19.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="16.8" y="115.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="16.8" y="99.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="19.8" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="17.0" y="83.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="20.0" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="17.0" y="67.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.0" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="17.0" y="51.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="20.0" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="17.0" y="35.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="20.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="17.4" y="403.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="17.4" y="387.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="20.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="17.4" y="371.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="20.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="17.4" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="17.4" y="339.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="20.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="17.4" y="323.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="20.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="17.4" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="20.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="17.4" y="291.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="17.4" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="20.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="17.4" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="20.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="17.4" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="20.4" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="17.4" y="227.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="17.4" y="211.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="20.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="17.4" y="195.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="20.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="17.4" y="179.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="20.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="17.4" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="20.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="17.4" y="147.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.4" y="158.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=11779] (9 samples, 0.12%)</title><rect x="17.7" y="659.0" width="1.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="20.7" y="670.0"></text>
</g>
<g>
<title>thread_start (9 samples, 0.12%)</title><rect x="17.7" y="643.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="20.7" y="654.0"></text>
</g>
<g>
<title>_pthread_start (9 samples, 0.12%)</title><rect x="17.7" y="627.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="20.7" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.12%)</title><rect x="17.7" y="611.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="20.7" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.12%)</title><rect x="17.7" y="595.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.7" y="606.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (9 samples, 0.12%)</title><rect x="17.7" y="579.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="20.7" y="590.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (9 samples, 0.12%)</title><rect x="17.7" y="563.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="20.7" y="574.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.03%)</title><rect x="17.7" y="547.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="20.7" y="558.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.03%)</title><rect x="17.7" y="531.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="20.7" y="542.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.03%)</title><rect x="17.7" y="515.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="20.7" y="526.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (2 samples, 0.03%)</title><rect x="17.7" y="499.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.7" y="510.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.03%)</title><rect x="17.7" y="483.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="20.7" y="494.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (2 samples, 0.03%)</title><rect x="17.7" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.7" y="478.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (2 samples, 0.03%)</title><rect x="17.7" y="451.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.7" y="462.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (7 samples, 0.09%)</title><rect x="18.0" y="547.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="21.0" y="558.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.09%)</title><rect x="18.0" y="531.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="21.0" y="542.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (7 samples, 0.09%)</title><rect x="18.0" y="515.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.0" y="526.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (7 samples, 0.09%)</title><rect x="18.0" y="499.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.0" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.08%)</title><rect x="18.2" y="483.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="21.2" y="494.0"></text>
</g>
<g>
<title>[Java: VM Periodic Task Thread tid=23043] (2 samples, 0.03%)</title><rect x="19.4" y="659.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="22.4" y="670.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.03%)</title><rect x="19.4" y="643.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="22.4" y="654.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.03%)</title><rect x="19.4" y="627.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="22.4" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.03%)</title><rect x="19.4" y="611.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="22.4" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.03%)</title><rect x="19.4" y="595.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="22.4" y="606.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.03%)</title><rect x="19.4" y="579.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.4" y="590.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.03%)</title><rect x="19.4" y="563.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="22.4" y="574.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.03%)</title><rect x="19.4" y="547.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="22.4" y="558.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.03%)</title><rect x="19.4" y="531.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="22.4" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.03%)</title><rect x="19.4" y="515.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="22.4" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="19.4" y="499.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="22.4" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=25091] (1,452 samples, 18.68%)</title><rect x="19.9" y="659.0" width="220.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="22.9" y="670.0">[NIO Selector #0 tid=25091]</text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.05%)</title><rect x="20.0" y="643.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="23.0" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (2 samples, 0.03%)</title><rect x="20.2" y="627.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="23.2" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="20.2" y="611.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="23.2" y="622.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,447 samples, 18.62%)</title><rect x="20.6" y="643.0" width="219.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.6" y="654.0">one/nio/server/SelectorThread..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (285 samples, 3.67%)</title><rect x="21.4" y="627.0" width="43.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.4" y="638.0">one/..</text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.05%)</title><rect x="24.1" y="611.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.1" y="622.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (5 samples, 0.06%)</title><rect x="24.7" y="611.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.7" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.04%)</title><rect x="25.0" y="595.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="28.0" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.06%)</title><rect x="25.5" y="611.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.03%)</title><rect x="25.9" y="595.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.03%)</title><rect x="25.9" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="25.9" y="563.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="25.9" y="547.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="25.9" y="531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (252 samples, 3.24%)</title><rect x="26.2" y="611.0" width="38.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="29.2" y="622.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (252 samples, 3.24%)</title><rect x="26.2" y="595.0" width="38.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.2" y="606.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (249 samples, 3.20%)</title><rect x="26.7" y="579.0" width="37.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.7" y="590.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (227 samples, 2.92%)</title><rect x="26.7" y="563.0" width="34.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.7" y="574.0">su..</text>
</g>
<g>
<title>kevent (210 samples, 2.70%)</title><rect x="29.3" y="547.0" width="31.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="32.3" y="558.0">ke..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (15 samples, 0.19%)</title><rect x="61.2" y="563.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="61.3" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.03%)</title><rect x="61.3" y="531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (9 samples, 0.12%)</title><rect x="62.1" y="547.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (5 samples, 0.06%)</title><rect x="62.1" y="531.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="65.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.06%)</title><rect x="62.1" y="515.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.1" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.06%)</title><rect x="62.1" y="499.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.04%)</title><rect x="62.4" y="483.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (3 samples, 0.04%)</title><rect x="62.8" y="531.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (3 samples, 0.04%)</title><rect x="62.8" y="515.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="62.8" y="499.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="65.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.03%)</title><rect x="63.6" y="563.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.6" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.03%)</title><rect x="63.6" y="547.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.6" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title><rect x="63.6" y="531.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="66.6" y="542.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.03%)</title><rect x="63.6" y="515.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.6" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.03%)</title><rect x="63.6" y="499.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="66.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.04%)</title><rect x="64.1" y="563.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.1" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,157 samples, 14.89%)</title><rect x="64.7" y="627.0" width="175.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.7" y="638.0">one/nio/net/Session.pro..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,156 samples, 14.88%)</title><rect x="64.8" y="611.0" width="175.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.8" y="622.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,104 samples, 14.21%)</title><rect x="64.8" y="595.0" width="167.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.8" y="606.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="65.4" y="579.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="68.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,078 samples, 13.87%)</title><rect x="65.9" y="579.0" width="163.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.9" y="590.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,078 samples, 13.87%)</title><rect x="65.9" y="563.0" width="163.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.9" y="574.0">one/nio/http/HttpServ..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,071 samples, 13.78%)</title><rect x="65.9" y="547.0" width="162.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="68.9" y="558.0">RequestHandler0_entit..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (150 samples, 1.93%)</title><rect x="66.0" y="531.0" width="22.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.0" y="542.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (146 samples, 1.88%)</title><rect x="66.3" y="515.0" width="22.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.3" y="526.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.08%)</title><rect x="66.5" y="499.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.5" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.06%)</title><rect x="66.6" y="483.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.6" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.06%)</title><rect x="66.6" y="467.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.06%)</title><rect x="66.6" y="451.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.6" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (139 samples, 1.79%)</title><rect x="67.4" y="499.0" width="21.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.4" y="510.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="67.4" y="483.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.4" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (137 samples, 1.76%)</title><rect x="67.7" y="483.0" width="20.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.7" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (136 samples, 1.75%)</title><rect x="67.7" y="467.0" width="20.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.7" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (136 samples, 1.75%)</title><rect x="67.7" y="451.0" width="20.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="67.7" y="435.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (134 samples, 1.72%)</title><rect x="68.0" y="435.0" width="20.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (134 samples, 1.72%)</title><rect x="68.0" y="419.0" width="20.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="71.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (132 samples, 1.70%)</title><rect x="68.3" y="403.0" width="20.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (132 samples, 1.70%)</title><rect x="68.3" y="387.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (131 samples, 1.69%)</title><rect x="68.5" y="371.0" width="19.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (128 samples, 1.65%)</title><rect x="68.9" y="355.0" width="19.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.9" y="366.0"></text>
</g>
<g>
<title>write (124 samples, 1.60%)</title><rect x="69.5" y="339.0" width="18.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="72.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="88.5" y="515.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.5" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (9 samples, 0.12%)</title><rect x="88.8" y="531.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (911 samples, 11.72%)</title><rect x="90.2" y="531.0" width="138.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.2" y="542.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title><rect x="90.2" y="515.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="93.2" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title><rect x="90.2" y="499.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (907 samples, 11.67%)</title><rect x="90.8" y="515.0" width="137.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="93.8" y="526.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (907 samples, 11.67%)</title><rect x="90.8" y="499.0" width="137.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.8" y="510.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (903 samples, 11.62%)</title><rect x="90.8" y="483.0" width="137.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.8" y="494.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (903 samples, 11.62%)</title><rect x="90.8" y="467.0" width="137.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.8" y="478.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (898 samples, 11.56%)</title><rect x="91.5" y="451.0" width="136.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="94.5" y="462.0">Java_org_rocksdb_..</text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (2 samples, 0.03%)</title><rect x="92.5" y="435.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="95.5" y="446.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (888 samples, 11.43%)</title><rect x="93.1" y="435.0" width="134.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="96.1" y="446.0">rocksdb_put_helpe..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="93.2" y="419.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="96.2" y="430.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="94.0" y="419.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="97.0" y="430.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.06%)</title><rect x="94.4" y="419.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="97.4" y="430.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.05%)</title><rect x="94.6" y="403.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="97.6" y="414.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.09%)</title><rect x="95.3" y="419.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="98.3" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.05%)</title><rect x="95.6" y="403.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="98.6" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.05%)</title><rect x="95.6" y="387.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="98.6" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.05%)</title><rect x="95.6" y="371.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="98.6" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.04%)</title><rect x="95.8" y="355.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="98.8" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="95.8" y="339.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="98.8" y="350.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="95.8" y="323.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="98.8" y="334.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.10%)</title><rect x="96.6" y="419.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="99.6" y="430.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.10%)</title><rect x="96.6" y="403.0" width="1.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="99.6" y="414.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.10%)</title><rect x="96.6" y="387.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="99.6" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (7 samples, 0.09%)</title><rect x="96.7" y="371.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="99.7" y="382.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (7 samples, 0.09%)</title><rect x="96.7" y="355.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="99.7" y="366.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.05%)</title><rect x="97.2" y="339.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="100.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (855 samples, 11.00%)</title><rect x="97.8" y="419.0" width="129.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="100.8" y="430.0">rocksdb::Compact..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (855 samples, 11.00%)</title><rect x="97.8" y="403.0" width="129.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="100.8" y="414.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (855 samples, 11.00%)</title><rect x="97.8" y="387.0" width="129.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="100.8" y="398.0">rocksdb::DB::Put..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.03%)</title><rect x="97.8" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="100.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (829 samples, 10.67%)</title><rect x="98.1" y="371.0" width="125.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="101.1" y="382.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (820 samples, 10.55%)</title><rect x="98.2" y="355.0" width="124.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="101.2" y="366.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.05%)</title><rect x="100.7" y="339.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="103.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (143 samples, 1.84%)</title><rect x="101.4" y="339.0" width="21.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="104.4" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (3 samples, 0.04%)</title><rect x="101.6" y="323.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="104.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (3 samples, 0.04%)</title><rect x="101.6" y="307.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="104.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (134 samples, 1.72%)</title><rect x="102.0" y="323.0" width="20.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="105.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (131 samples, 1.69%)</title><rect x="102.3" y="307.0" width="19.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="105.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (121 samples, 1.56%)</title><rect x="102.6" y="291.0" width="18.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="105.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (119 samples, 1.53%)</title><rect x="102.9" y="275.0" width="18.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="105.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.03%)</title><rect x="103.1" y="259.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="106.1" y="270.0"></text>
</g>
<g>
<title>write (116 samples, 1.49%)</title><rect x="103.4" y="259.0" width="17.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="106.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.04%)</title><rect x="121.0" y="291.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="124.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (5 samples, 0.06%)</title><rect x="121.5" y="291.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="124.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="121.9" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="124.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (3 samples, 0.04%)</title><rect x="122.4" y="323.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="125.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="122.8" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="125.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.04%)</title><rect x="123.1" y="339.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="126.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (22 samples, 0.28%)</title><rect x="123.6" y="339.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="126.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (20 samples, 0.26%)</title><rect x="123.9" y="323.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="126.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (19 samples, 0.24%)</title><rect x="124.0" y="307.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="127.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (18 samples, 0.23%)</title><rect x="124.2" y="291.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="127.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (15 samples, 0.19%)</title><rect x="124.3" y="275.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="127.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.15%)</title><rect x="124.8" y="259.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="127.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="126.0" y="243.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="129.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (70 samples, 0.90%)</title><rect x="126.9" y="339.0" width="10.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="129.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (2 samples, 0.03%)</title><rect x="128.4" y="323.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="131.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="128.7" y="323.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="131.7" y="334.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="128.9" y="307.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="131.9" y="318.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="128.9" y="291.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="131.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (55 samples, 0.71%)</title><rect x="129.2" y="323.0" width="8.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="132.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (53 samples, 0.68%)</title><rect x="129.5" y="307.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="132.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (52 samples, 0.67%)</title><rect x="129.7" y="291.0" width="7.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="132.7" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="130.3" y="275.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="133.3" y="286.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="130.3" y="259.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="133.3" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="130.3" y="243.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="133.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (41 samples, 0.53%)</title><rect x="130.7" y="275.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="133.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (36 samples, 0.46%)</title><rect x="131.5" y="259.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="134.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.04%)</title><rect x="131.6" y="243.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="134.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (30 samples, 0.39%)</title><rect x="132.4" y="243.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="135.4" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="135.3" y="227.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="138.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.03%)</title><rect x="135.6" y="227.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="138.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.09%)</title><rect x="135.9" y="227.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="138.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="136.3" y="211.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="139.3" y="222.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="136.5" y="195.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="139.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="137.2" y="275.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="140.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (350 samples, 4.50%)</title><rect x="137.7" y="339.0" width="53.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="140.7" y="350.0">rocks..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (9 samples, 0.12%)</title><rect x="163.7" y="323.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="166.7" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (168 samples, 2.16%)</title><rect x="165.0" y="323.0" width="25.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="168.0" y="334.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (152 samples, 1.96%)</title><rect x="165.0" y="307.0" width="23.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="168.0" y="318.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (15 samples, 0.19%)</title><rect x="188.1" y="307.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="191.1" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (2 samples, 0.03%)</title><rect x="188.4" y="291.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="191.4" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (11 samples, 0.14%)</title><rect x="188.7" y="291.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="191.7" y="302.0"></text>
</g>
<g>
<title>__psynch_mutexwait (11 samples, 0.14%)</title><rect x="188.7" y="275.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="191.7" y="286.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (2 samples, 0.03%)</title><rect x="190.5" y="323.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="193.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (138 samples, 1.78%)</title><rect x="190.8" y="339.0" width="21.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="193.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (134 samples, 1.72%)</title><rect x="191.5" y="323.0" width="20.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="194.5" y="334.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (32 samples, 0.41%)</title><rect x="202.5" y="307.0" width="4.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="205.5" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (29 samples, 0.37%)</title><rect x="207.4" y="307.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="210.4" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (24 samples, 0.31%)</title><rect x="207.4" y="291.0" width="3.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="210.4" y="302.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.05%)</title><rect x="211.0" y="291.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="214.0" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.05%)</title><rect x="211.0" y="275.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="214.0" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.05%)</title><rect x="211.0" y="259.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="214.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (19 samples, 0.24%)</title><rect x="212.0" y="339.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="215.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (11 samples, 0.14%)</title><rect x="212.0" y="323.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="215.0" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.10%)</title><rect x="212.1" y="307.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="215.1" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.10%)</title><rect x="212.1" y="291.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="215.1" y="302.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.08%)</title><rect x="213.6" y="323.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="216.6" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.08%)</title><rect x="213.6" y="307.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="216.6" y="318.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.03%)</title><rect x="214.5" y="323.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="217.5" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.03%)</title><rect x="214.5" y="307.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="217.5" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.03%)</title><rect x="214.5" y="291.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="217.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (10 samples, 0.13%)</title><rect x="214.8" y="339.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="217.8" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.09%)</title><rect x="215.1" y="323.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="218.1" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.09%)</title><rect x="215.1" y="307.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="218.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (35 samples, 0.45%)</title><rect x="216.4" y="339.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="219.4" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (29 samples, 0.37%)</title><rect x="216.7" y="323.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="219.7" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (28 samples, 0.36%)</title><rect x="216.7" y="307.0" width="4.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="219.7" y="318.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (4 samples, 0.05%)</title><rect x="221.1" y="323.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="224.1" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (4 samples, 0.05%)</title><rect x="221.1" y="307.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="224.1" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (4 samples, 0.05%)</title><rect x="221.1" y="291.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="224.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.03%)</title><rect x="221.8" y="339.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="224.8" y="350.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.03%)</title><rect x="222.4" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="225.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.03%)</title><rect x="222.9" y="355.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="225.9" y="366.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="223.5" y="355.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="226.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (2 samples, 0.03%)</title><rect x="224.0" y="371.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="227.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.08%)</title><rect x="224.3" y="371.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="227.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.04%)</title><rect x="224.4" y="355.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="227.4" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="224.6" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="227.6" y="350.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.03%)</title><rect x="224.9" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="227.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (7 samples, 0.09%)</title><rect x="225.2" y="371.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="228.2" y="382.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="225.2" y="355.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="228.2" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.03%)</title><rect x="225.5" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="228.5" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="225.5" y="339.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="228.5" y="350.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="225.5" y="323.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="228.5" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="225.5" y="307.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="228.5" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.04%)</title><rect x="225.8" y="355.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="228.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (9 samples, 0.12%)</title><rect x="226.2" y="371.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="229.2" y="382.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="226.2" y="355.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="229.2" y="366.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.03%)</title><rect x="226.2" y="339.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="229.2" y="350.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.03%)</title><rect x="226.2" y="323.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="229.2" y="334.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.08%)</title><rect x="226.5" y="355.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="229.5" y="366.0"></text>
</g>
<g>
<title>tiny_free_no_lock (5 samples, 0.06%)</title><rect x="226.7" y="339.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="229.7" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="227.1" y="323.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="230.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (4 samples, 0.05%)</title><rect x="227.9" y="483.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (2 samples, 0.03%)</title><rect x="228.5" y="547.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.5" y="558.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="228.8" y="547.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="228.8" y="531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.04%)</title><rect x="229.1" y="547.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.1" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="229.1" y="531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="229.1" y="515.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.1" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.06%)</title><rect x="229.6" y="579.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.6" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.04%)</title><rect x="229.6" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="229.7" y="547.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.7" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="229.7" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.7" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="229.7" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="232.7" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.03%)</title><rect x="230.0" y="563.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.03%)</title><rect x="230.3" y="579.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.3" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (12 samples, 0.15%)</title><rect x="230.6" y="579.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.6" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.14%)</title><rect x="230.8" y="563.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.8" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.14%)</title><rect x="230.8" y="547.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (52 samples, 0.67%)</title><rect x="232.5" y="595.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.5" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (52 samples, 0.67%)</title><rect x="232.5" y="579.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="232.5" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="232.5" y="547.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="232.5" y="531.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.5" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="232.6" y="515.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.6" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (49 samples, 0.63%)</title><rect x="232.9" y="563.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (48 samples, 0.62%)</title><rect x="233.1" y="547.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (48 samples, 0.62%)</title><rect x="233.1" y="531.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.1" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (5 samples, 0.06%)</title><rect x="233.2" y="515.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.2" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.04%)</title><rect x="233.5" y="499.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.04%)</title><rect x="233.5" y="483.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="236.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.04%)</title><rect x="233.5" y="467.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.03%)</title><rect x="233.5" y="451.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="236.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.03%)</title><rect x="233.5" y="435.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (42 samples, 0.54%)</title><rect x="234.0" y="515.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (42 samples, 0.54%)</title><rect x="234.0" y="499.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (42 samples, 0.54%)</title><rect x="234.0" y="483.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.0" y="494.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.03%)</title><rect x="234.3" y="467.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="237.3" y="478.0"></text>
</g>
<g>
<title>rpc_errlist (37 samples, 0.48%)</title><rect x="234.7" y="467.0" width="5.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="237.7" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25347] (1,148 samples, 14.77%)</title><rect x="240.4" y="659.0" width="174.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="243.4" y="670.0">[NIO Selector #1 tid=2..</text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.05%)</title><rect x="240.4" y="643.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="243.4" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="240.4" y="627.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="243.4" y="638.0"></text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.09%)</title><rect x="241.0" y="643.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="244.0" y="654.0"></text>
</g>
<g>
<title>Interpreter (3 samples, 0.04%)</title><rect x="241.0" y="627.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="244.0" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (4 samples, 0.05%)</title><rect x="241.4" y="627.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="244.4" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="241.4" y="611.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="244.4" y="622.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,137 samples, 14.63%)</title><rect x="242.0" y="643.0" width="172.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.0" y="654.0">one/nio/server/Selecto..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (200 samples, 2.57%)</title><rect x="242.8" y="627.0" width="30.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.8" y="638.0">on..</text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.05%)</title><rect x="245.2" y="611.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.2" y="622.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (6 samples, 0.08%)</title><rect x="245.8" y="611.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.8" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.04%)</title><rect x="246.3" y="595.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="249.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (5 samples, 0.06%)</title><rect x="246.7" y="611.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.03%)</title><rect x="247.2" y="595.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.03%)</title><rect x="247.2" y="579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="247.2" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="247.2" y="547.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="250.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="247.2" y="531.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.04%)</title><rect x="247.5" y="611.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.03%)</title><rect x="247.6" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (164 samples, 2.11%)</title><rect x="247.9" y="611.0" width="24.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.9" y="622.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (163 samples, 2.10%)</title><rect x="248.1" y="595.0" width="24.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.1" y="606.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (158 samples, 2.03%)</title><rect x="248.9" y="579.0" width="23.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.9" y="590.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (143 samples, 1.84%)</title><rect x="249.0" y="563.0" width="21.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.0" y="574.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.04%)</title><rect x="250.5" y="547.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="253.5" y="558.0"></text>
</g>
<g>
<title>kevent (130 samples, 1.67%)</title><rect x="251.0" y="547.0" width="19.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="254.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.06%)</title><rect x="270.7" y="563.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.04%)</title><rect x="271.0" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="271.0" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="271.0" y="515.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="271.0" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.05%)</title><rect x="271.6" y="563.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.6" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.05%)</title><rect x="271.6" y="547.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.6" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.05%)</title><rect x="271.6" y="531.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.6" y="542.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.05%)</title><rect x="271.6" y="515.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.6" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.05%)</title><rect x="271.6" y="499.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.03%)</title><rect x="272.2" y="563.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.2" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.03%)</title><rect x="272.2" y="547.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.2" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title><rect x="272.2" y="531.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="275.2" y="542.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.03%)</title><rect x="272.2" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.2" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.03%)</title><rect x="272.2" y="499.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="272.5" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.5" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (932 samples, 11.99%)</title><rect x="273.2" y="627.0" width="141.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.2" y="638.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (931 samples, 11.98%)</title><rect x="273.3" y="611.0" width="141.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.3" y="622.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (879 samples, 11.31%)</title><rect x="273.3" y="595.0" width="133.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.3" y="606.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (863 samples, 11.11%)</title><rect x="273.6" y="579.0" width="131.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.6" y="590.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (863 samples, 11.11%)</title><rect x="273.6" y="563.0" width="131.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.6" y="574.0">one/nio/http/Htt..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (855 samples, 11.00%)</title><rect x="273.6" y="547.0" width="129.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.6" y="558.0">RequestHandler0_..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (91 samples, 1.17%)</title><rect x="273.6" y="531.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="276.6" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (87 samples, 1.12%)</title><rect x="274.1" y="515.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.1" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="274.1" y="499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (85 samples, 1.09%)</title><rect x="274.4" y="499.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.4" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (84 samples, 1.08%)</title><rect x="274.5" y="483.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.5" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (84 samples, 1.08%)</title><rect x="274.5" y="467.0" width="12.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.5" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (84 samples, 1.08%)</title><rect x="274.5" y="451.0" width="12.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="274.5" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.5" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="274.5" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="277.5" y="430.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.03%)</title><rect x="274.5" y="403.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="277.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (82 samples, 1.06%)</title><rect x="274.8" y="435.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (82 samples, 1.06%)</title><rect x="274.8" y="419.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (81 samples, 1.04%)</title><rect x="275.0" y="403.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (81 samples, 1.04%)</title><rect x="275.0" y="387.0" width="12.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (80 samples, 1.03%)</title><rect x="275.1" y="371.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (77 samples, 0.99%)</title><rect x="275.6" y="355.0" width="11.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.6" y="366.0"></text>
</g>
<g>
<title>write (74 samples, 0.95%)</title><rect x="276.0" y="339.0" width="11.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="279.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.03%)</title><rect x="287.4" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (762 samples, 9.81%)</title><rect x="287.7" y="531.0" width="115.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.7" y="542.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (762 samples, 9.81%)</title><rect x="287.7" y="515.0" width="115.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.7" y="526.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (762 samples, 9.81%)</title><rect x="287.7" y="499.0" width="115.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.7" y="510.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (762 samples, 9.81%)</title><rect x="287.7" y="483.0" width="115.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.7" y="494.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (760 samples, 9.78%)</title><rect x="288.0" y="467.0" width="115.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.0" y="478.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (754 samples, 9.70%)</title><rect x="288.9" y="451.0" width="114.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="291.9" y="462.0">Java_org_rocks..</text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="289.5" y="435.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="292.5" y="446.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (747 samples, 9.61%)</title><rect x="290.0" y="435.0" width="113.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="293.0" y="446.0">rocksdb_put_he..</text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="290.8" y="419.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="293.8" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="291.1" y="419.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="294.1" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (12 samples, 0.15%)</title><rect x="291.4" y="419.0" width="1.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="294.4" y="430.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="291.7" y="403.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="294.7" y="414.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.03%)</title><rect x="291.7" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="294.7" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.09%)</title><rect x="292.1" y="403.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="295.1" y="414.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="292.3" y="387.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="295.3" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.04%)</title><rect x="292.7" y="387.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="295.7" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title><rect x="292.7" y="371.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="295.7" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="292.9" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="295.9" y="366.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="293.2" y="419.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="296.2" y="430.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.10%)</title><rect x="293.5" y="419.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="296.5" y="430.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.10%)</title><rect x="293.5" y="403.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="296.5" y="414.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.10%)</title><rect x="293.5" y="387.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="296.5" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.10%)</title><rect x="293.5" y="371.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="296.5" y="382.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.10%)</title><rect x="293.5" y="355.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="296.5" y="366.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="294.4" y="339.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="297.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (714 samples, 9.19%)</title><rect x="294.7" y="419.0" width="108.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="297.7" y="430.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (713 samples, 9.18%)</title><rect x="294.9" y="403.0" width="108.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="297.9" y="414.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (713 samples, 9.18%)</title><rect x="294.9" y="387.0" width="108.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="297.9" y="398.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (701 samples, 9.02%)</title><rect x="295.0" y="371.0" width="106.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="298.0" y="382.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (698 samples, 8.98%)</title><rect x="295.2" y="355.0" width="106.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="298.2" y="366.0">rocksdb::DBIm..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="296.4" y="339.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="299.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (99 samples, 1.27%)</title><rect x="296.8" y="339.0" width="15.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="299.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (96 samples, 1.24%)</title><rect x="297.1" y="323.0" width="14.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="300.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (94 samples, 1.21%)</title><rect x="297.4" y="307.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="300.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (91 samples, 1.17%)</title><rect x="297.4" y="291.0" width="13.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="300.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (88 samples, 1.13%)</title><rect x="297.9" y="275.0" width="13.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="300.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.03%)</title><rect x="298.1" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="301.1" y="270.0"></text>
</g>
<g>
<title>write (85 samples, 1.09%)</title><rect x="298.4" y="259.0" width="12.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="301.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.03%)</title><rect x="311.4" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="314.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (15 samples, 0.19%)</title><rect x="312.2" y="339.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="315.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (15 samples, 0.19%)</title><rect x="312.2" y="323.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="315.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (14 samples, 0.18%)</title><rect x="312.3" y="307.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="315.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (14 samples, 0.18%)</title><rect x="312.3" y="291.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="315.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (10 samples, 0.13%)</title><rect x="312.5" y="275.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="315.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.13%)</title><rect x="312.5" y="259.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="315.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="313.5" y="243.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="316.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="313.5" y="227.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="316.5" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="313.5" y="211.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="316.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="314.1" y="275.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="317.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (50 samples, 0.64%)</title><rect x="314.5" y="339.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="317.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="316.3" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="319.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (36 samples, 0.46%)</title><rect x="316.6" y="323.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="319.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (36 samples, 0.46%)</title><rect x="316.6" y="307.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="319.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (33 samples, 0.42%)</title><rect x="317.0" y="291.0" width="5.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="320.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (27 samples, 0.35%)</title><rect x="317.8" y="275.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="320.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (25 samples, 0.32%)</title><rect x="318.1" y="259.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="321.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (23 samples, 0.30%)</title><rect x="318.4" y="243.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="321.4" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="319.6" y="227.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="322.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.12%)</title><rect x="320.1" y="227.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="323.1" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="320.5" y="211.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="323.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="320.8" y="211.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="323.8" y="222.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.03%)</title><rect x="321.0" y="195.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="324.0" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="321.6" y="227.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="324.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (352 samples, 4.53%)</title><rect x="322.0" y="339.0" width="53.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="325.0" y="350.0">rocks..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (8 samples, 0.10%)</title><rect x="344.5" y="323.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="347.5" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (195 samples, 2.51%)</title><rect x="345.7" y="323.0" width="29.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="348.7" y="334.0">st..</text>
</g>
<g>
<title>__psynch_cvwait (184 samples, 2.37%)</title><rect x="345.7" y="307.0" width="28.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="348.7" y="318.0">_..</text>
</g>
<g>
<title>_pthread_cond_check_init_slow (2 samples, 0.03%)</title><rect x="373.7" y="307.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="376.7" y="318.0"></text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.10%)</title><rect x="374.0" y="307.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="377.0" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (8 samples, 0.10%)</title><rect x="374.0" y="291.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="377.0" y="302.0"></text>
</g>
<g>
<title>__psynch_mutexwait (8 samples, 0.10%)</title><rect x="374.0" y="275.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="377.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (123 samples, 1.58%)</title><rect x="375.5" y="339.0" width="18.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="378.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (123 samples, 1.58%)</title><rect x="375.5" y="323.0" width="18.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="378.5" y="334.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (28 samples, 0.36%)</title><rect x="384.8" y="307.0" width="4.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="387.8" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (34 samples, 0.44%)</title><rect x="389.0" y="307.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="392.0" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (31 samples, 0.40%)</title><rect x="389.0" y="291.0" width="4.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="392.0" y="302.0"></text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.04%)</title><rect x="393.7" y="291.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="396.7" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.04%)</title><rect x="393.7" y="275.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="396.7" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.04%)</title><rect x="393.7" y="259.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="396.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (12 samples, 0.15%)</title><rect x="394.3" y="339.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="397.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (11 samples, 0.14%)</title><rect x="394.3" y="323.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="397.3" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (8 samples, 0.10%)</title><rect x="394.8" y="307.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="397.8" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.09%)</title><rect x="394.8" y="291.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="397.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.06%)</title><rect x="396.1" y="339.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="399.1" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.04%)</title><rect x="396.1" y="323.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="399.1" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.04%)</title><rect x="396.1" y="307.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="399.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (24 samples, 0.31%)</title><rect x="397.1" y="339.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="400.1" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (18 samples, 0.23%)</title><rect x="397.2" y="323.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="400.2" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (17 samples, 0.22%)</title><rect x="397.4" y="307.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="400.4" y="318.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (5 samples, 0.06%)</title><rect x="399.9" y="323.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="402.9" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (5 samples, 0.06%)</title><rect x="399.9" y="307.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="402.9" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (5 samples, 0.06%)</title><rect x="399.9" y="291.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="402.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.05%)</title><rect x="401.5" y="371.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="404.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.06%)</title><rect x="402.1" y="371.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="405.1" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.04%)</title><rect x="402.2" y="355.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="405.2" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="402.2" y="339.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="405.2" y="350.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="402.4" y="323.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="405.4" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="402.4" y="307.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="405.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.09%)</title><rect x="403.6" y="547.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="403.6" y="531.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.05%)</title><rect x="404.0" y="531.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="407.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.05%)</title><rect x="404.0" y="515.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.04%)</title><rect x="404.0" y="499.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="407.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.09%)</title><rect x="404.6" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.6" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.08%)</title><rect x="404.6" y="563.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.08%)</title><rect x="404.6" y="547.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.08%)</title><rect x="404.6" y="531.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.6" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.08%)</title><rect x="404.6" y="515.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="407.6" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.09%)</title><rect x="405.7" y="579.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="408.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.09%)</title><rect x="405.7" y="563.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="408.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.09%)</title><rect x="405.7" y="547.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (52 samples, 0.67%)</title><rect x="406.8" y="595.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.8" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (52 samples, 0.67%)</title><rect x="406.8" y="579.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="406.8" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="409.8" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="406.8" y="547.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.8" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="406.8" y="531.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="409.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (50 samples, 0.64%)</title><rect x="407.1" y="563.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.06%)</title><rect x="407.1" y="547.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.05%)</title><rect x="407.2" y="531.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.05%)</title><rect x="407.2" y="515.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.05%)</title><rect x="407.2" y="499.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="410.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.05%)</title><rect x="407.2" y="483.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="410.2" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.05%)</title><rect x="407.2" y="467.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="410.2" y="478.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="407.5" y="451.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="410.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (45 samples, 0.58%)</title><rect x="407.8" y="547.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="410.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (45 samples, 0.58%)</title><rect x="407.8" y="531.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="410.8" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.08%)</title><rect x="407.8" y="515.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="410.8" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (6 samples, 0.08%)</title><rect x="407.8" y="499.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="410.8" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (5 samples, 0.06%)</title><rect x="408.0" y="483.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="411.0" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (5 samples, 0.06%)</title><rect x="408.0" y="467.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.0" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (5 samples, 0.06%)</title><rect x="408.0" y="451.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (5 samples, 0.06%)</title><rect x="408.0" y="435.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (39 samples, 0.50%)</title><rect x="408.7" y="515.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.7" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (39 samples, 0.50%)</title><rect x="408.7" y="499.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="411.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (39 samples, 0.50%)</title><rect x="408.7" y="483.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.7" y="494.0"></text>
</g>
<g>
<title>rpc_errlist (37 samples, 0.48%)</title><rect x="409.1" y="467.0" width="5.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="412.1" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25859] (695 samples, 8.94%)</title><rect x="414.7" y="659.0" width="105.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="417.7" y="670.0">[NIO Selector..</text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.03%)</title><rect x="414.8" y="643.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="417.8" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (2 samples, 0.03%)</title><rect x="414.8" y="627.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="417.8" y="638.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (692 samples, 8.90%)</title><rect x="415.1" y="643.0" width="105.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="418.1" y="654.0">one/nio/serve..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (138 samples, 1.78%)</title><rect x="415.3" y="627.0" width="20.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.3" y="638.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (3 samples, 0.04%)</title><rect x="416.3" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.3" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="416.5" y="595.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="419.5" y="606.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.03%)</title><rect x="416.5" y="579.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="419.5" y="590.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.04%)</title><rect x="416.8" y="611.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.8" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.03%)</title><rect x="416.9" y="595.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="419.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.03%)</title><rect x="416.9" y="579.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="416.9" y="563.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="419.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="416.9" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="416.9" y="531.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (119 samples, 1.53%)</title><rect x="417.4" y="611.0" width="18.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="420.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (118 samples, 1.52%)</title><rect x="417.6" y="595.0" width="17.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (117 samples, 1.51%)</title><rect x="417.7" y="579.0" width="17.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (114 samples, 1.47%)</title><rect x="417.7" y="563.0" width="17.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.7" y="574.0"></text>
</g>
<g>
<title>kevent (106 samples, 1.36%)</title><rect x="418.9" y="547.0" width="16.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="421.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.04%)</title><rect x="435.0" y="563.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.0" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (3 samples, 0.04%)</title><rect x="435.5" y="611.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="438.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.03%)</title><rect x="435.9" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="438.9" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (553 samples, 7.12%)</title><rect x="436.2" y="627.0" width="84.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="439.2" y="638.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (553 samples, 7.12%)</title><rect x="436.2" y="611.0" width="84.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.2" y="622.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (526 samples, 6.77%)</title><rect x="436.2" y="595.0" width="79.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="439.2" y="606.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (518 samples, 6.67%)</title><rect x="436.7" y="579.0" width="78.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.7" y="590.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (518 samples, 6.67%)</title><rect x="436.7" y="563.0" width="78.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="439.7" y="574.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (515 samples, 6.63%)</title><rect x="436.7" y="547.0" width="78.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.7" y="558.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (46 samples, 0.59%)</title><rect x="436.8" y="531.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.8" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (46 samples, 0.59%)</title><rect x="436.8" y="515.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="439.8" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (45 samples, 0.58%)</title><rect x="437.0" y="499.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.0" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (45 samples, 0.58%)</title><rect x="437.0" y="483.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.0" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (44 samples, 0.57%)</title><rect x="437.1" y="467.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.1" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (44 samples, 0.57%)</title><rect x="437.1" y="451.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="440.1" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="437.1" y="435.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="440.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (42 samples, 0.54%)</title><rect x="437.4" y="435.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="440.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (42 samples, 0.54%)</title><rect x="437.4" y="419.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="440.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (42 samples, 0.54%)</title><rect x="437.4" y="403.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (42 samples, 0.54%)</title><rect x="437.4" y="387.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (42 samples, 0.54%)</title><rect x="437.4" y="371.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="440.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (41 samples, 0.53%)</title><rect x="437.6" y="355.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.6" y="366.0"></text>
</g>
<g>
<title>write (39 samples, 0.50%)</title><rect x="437.9" y="339.0" width="5.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="440.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (468 samples, 6.02%)</title><rect x="443.8" y="531.0" width="71.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="446.8" y="542.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (468 samples, 6.02%)</title><rect x="443.8" y="515.0" width="71.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="446.8" y="526.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (468 samples, 6.02%)</title><rect x="443.8" y="499.0" width="71.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.8" y="510.0">ru/mail/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (466 samples, 6.00%)</title><rect x="443.8" y="483.0" width="70.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="446.8" y="494.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (466 samples, 6.00%)</title><rect x="443.8" y="467.0" width="70.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="446.8" y="478.0">org/rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (465 samples, 5.98%)</title><rect x="444.0" y="451.0" width="70.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="447.0" y="462.0">Java_org..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (462 samples, 5.95%)</title><rect x="444.4" y="435.0" width="70.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="447.4" y="446.0">rocksdb_..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.04%)</title><rect x="444.6" y="419.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="447.6" y="430.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.04%)</title><rect x="444.6" y="403.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="447.6" y="414.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.04%)</title><rect x="445.2" y="419.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="448.2" y="430.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.05%)</title><rect x="445.6" y="419.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="448.6" y="430.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.05%)</title><rect x="445.6" y="403.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="448.6" y="414.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.05%)</title><rect x="445.6" y="387.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="448.6" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="445.6" y="371.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="448.6" y="382.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.05%)</title><rect x="445.6" y="355.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="448.6" y="366.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="446.0" y="339.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="449.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (449 samples, 5.78%)</title><rect x="446.3" y="419.0" width="68.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="449.3" y="430.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (448 samples, 5.77%)</title><rect x="446.4" y="403.0" width="68.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="449.4" y="414.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (448 samples, 5.77%)</title><rect x="446.4" y="387.0" width="68.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="449.4" y="398.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (437 samples, 5.62%)</title><rect x="446.4" y="371.0" width="66.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="449.4" y="382.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (435 samples, 5.60%)</title><rect x="446.4" y="355.0" width="66.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="449.4" y="366.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (48 samples, 0.62%)</title><rect x="447.5" y="339.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="450.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (43 samples, 0.55%)</title><rect x="447.9" y="323.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="450.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (43 samples, 0.55%)</title><rect x="447.9" y="307.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="450.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (40 samples, 0.51%)</title><rect x="447.9" y="291.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="450.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (38 samples, 0.49%)</title><rect x="448.2" y="275.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="451.2" y="286.0"></text>
</g>
<g>
<title>write (38 samples, 0.49%)</title><rect x="448.2" y="259.0" width="5.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="451.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (3 samples, 0.04%)</title><rect x="454.0" y="291.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="457.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.03%)</title><rect x="454.0" y="275.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="457.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.04%)</title><rect x="454.8" y="339.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="457.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="454.8" y="323.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="457.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="454.8" y="307.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="457.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="454.8" y="291.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="457.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.03%)</title><rect x="454.9" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="457.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.03%)</title><rect x="454.9" y="259.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="457.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (26 samples, 0.33%)</title><rect x="455.2" y="339.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="458.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (18 samples, 0.23%)</title><rect x="456.4" y="323.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="459.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.19%)</title><rect x="456.9" y="307.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="459.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.19%)</title><rect x="456.9" y="291.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="459.9" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="456.9" y="275.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="459.9" y="286.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="456.9" y="259.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="459.9" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.04%)</title><rect x="456.9" y="243.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="459.9" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="457.0" y="227.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="460.0" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="457.0" y="211.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="460.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (12 samples, 0.15%)</title><rect x="457.3" y="275.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="460.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.15%)</title><rect x="457.3" y="259.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="460.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.13%)</title><rect x="457.6" y="243.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="460.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.05%)</title><rect x="458.6" y="227.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="461.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="458.7" y="211.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="461.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (249 samples, 3.20%)</title><rect x="459.3" y="339.0" width="37.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="462.3" y="350.0">roc..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (3 samples, 0.04%)</title><rect x="476.3" y="323.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="479.3" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (133 samples, 1.71%)</title><rect x="476.8" y="323.0" width="20.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="479.8" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (120 samples, 1.54%)</title><rect x="476.8" y="307.0" width="18.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="479.8" y="318.0"></text>
</g>
<g>
<title>_pthread_cond_wait (12 samples, 0.15%)</title><rect x="495.1" y="307.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="498.1" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (9 samples, 0.12%)</title><rect x="495.5" y="291.0" width="1.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="498.5" y="302.0"></text>
</g>
<g>
<title>__psynch_mutexwait (9 samples, 0.12%)</title><rect x="495.5" y="275.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="498.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (75 samples, 0.97%)</title><rect x="497.1" y="339.0" width="11.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="500.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (75 samples, 0.97%)</title><rect x="497.1" y="323.0" width="11.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="500.1" y="334.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (24 samples, 0.31%)</title><rect x="503.0" y="307.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="506.0" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (12 samples, 0.15%)</title><rect x="506.7" y="307.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="509.7" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.15%)</title><rect x="506.7" y="291.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="509.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.04%)</title><rect x="508.5" y="339.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="511.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.03%)</title><rect x="508.5" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="511.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.04%)</title><rect x="509.0" y="339.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="512.0" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.03%)</title><rect x="509.0" y="323.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="512.0" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="509.0" y="307.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="512.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (18 samples, 0.23%)</title><rect x="509.4" y="339.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="512.4" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (15 samples, 0.19%)</title><rect x="509.4" y="323.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="512.4" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (15 samples, 0.19%)</title><rect x="509.4" y="307.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="512.4" y="318.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.04%)</title><rect x="511.7" y="323.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="514.7" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.04%)</title><rect x="511.7" y="307.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="514.7" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.04%)</title><rect x="511.7" y="291.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="514.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.04%)</title><rect x="512.9" y="371.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="515.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="513.1" y="355.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="516.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.05%)</title><rect x="513.4" y="371.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="516.4" y="382.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="513.4" y="355.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="516.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.03%)</title><rect x="514.0" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="517.0" y="382.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="514.0" y="355.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="517.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.03%)</title><rect x="514.6" y="483.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="517.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.04%)</title><rect x="514.9" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="517.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="515.0" y="531.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="518.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="515.0" y="515.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="518.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.05%)</title><rect x="515.5" y="579.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="518.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.05%)</title><rect x="515.5" y="563.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="518.5" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.05%)</title><rect x="515.5" y="547.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="518.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (27 samples, 0.35%)</title><rect x="516.1" y="595.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.1" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (27 samples, 0.35%)</title><rect x="516.1" y="579.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="519.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="516.3" y="563.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="516.3" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.3" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="516.3" y="531.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.3" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="516.3" y="515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (24 samples, 0.31%)</title><rect x="516.6" y="563.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="519.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.28%)</title><rect x="516.9" y="547.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.28%)</title><rect x="516.9" y="531.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.9" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.03%)</title><rect x="516.9" y="515.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="519.9" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="516.9" y="499.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="519.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (20 samples, 0.26%)</title><rect x="517.2" y="515.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="520.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (20 samples, 0.26%)</title><rect x="517.2" y="499.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (20 samples, 0.26%)</title><rect x="517.2" y="483.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="520.2" y="494.0"></text>
</g>
<g>
<title>rpc_errlist (19 samples, 0.24%)</title><rect x="517.3" y="467.0" width="2.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="520.3" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=39427] (995 samples, 12.80%)</title><rect x="520.2" y="659.0" width="151.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="523.2" y="670.0">[NIO Selector #3 ti..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (995 samples, 12.80%)</title><rect x="520.2" y="643.0" width="151.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="523.2" y="654.0">one/nio/server/Sele..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.04%)</title><rect x="520.8" y="627.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="523.8" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (122 samples, 1.57%)</title><rect x="521.4" y="627.0" width="18.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.4" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.03%)</title><rect x="521.6" y="611.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="524.6" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (118 samples, 1.52%)</title><rect x="522.0" y="611.0" width="17.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.0" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (118 samples, 1.52%)</title><rect x="522.0" y="595.0" width="17.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="525.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (117 samples, 1.51%)</title><rect x="522.2" y="579.0" width="17.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (103 samples, 1.33%)</title><rect x="522.2" y="563.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.2" y="574.0"></text>
</g>
<g>
<title>kevent (103 samples, 1.33%)</title><rect x="522.2" y="547.0" width="15.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="525.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.05%)</title><rect x="537.8" y="563.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.05%)</title><rect x="537.8" y="547.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.05%)</title><rect x="537.8" y="531.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="540.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.05%)</title><rect x="537.8" y="515.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="540.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.05%)</title><rect x="537.8" y="499.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="540.8" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.03%)</title><rect x="538.1" y="483.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="541.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="538.4" y="563.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="541.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (7 samples, 0.09%)</title><rect x="538.9" y="563.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="541.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.06%)</title><rect x="539.0" y="547.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="542.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.03%)</title><rect x="539.0" y="531.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="542.0" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="539.0" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="542.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.04%)</title><rect x="539.3" y="531.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.3" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (865 samples, 11.13%)</title><rect x="539.9" y="627.0" width="131.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="542.9" y="638.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (865 samples, 11.13%)</title><rect x="539.9" y="611.0" width="131.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.9" y="622.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (825 samples, 10.62%)</title><rect x="539.9" y="595.0" width="125.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="542.9" y="606.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (808 samples, 10.40%)</title><rect x="540.4" y="579.0" width="122.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="543.4" y="590.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (808 samples, 10.40%)</title><rect x="540.4" y="563.0" width="122.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.4" y="574.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (806 samples, 10.37%)</title><rect x="540.4" y="547.0" width="122.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="543.4" y="558.0">RequestHandler0..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (79 samples, 1.02%)</title><rect x="540.4" y="531.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="543.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (77 samples, 0.99%)</title><rect x="540.6" y="515.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="543.6" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.05%)</title><rect x="540.6" y="499.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.6" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (73 samples, 0.94%)</title><rect x="541.2" y="499.0" width="11.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="544.2" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (73 samples, 0.94%)</title><rect x="541.2" y="483.0" width="11.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="544.2" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (73 samples, 0.94%)</title><rect x="541.2" y="467.0" width="11.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="544.2" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (73 samples, 0.94%)</title><rect x="541.2" y="451.0" width="11.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="541.2" y="435.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.2" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="541.2" y="419.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="544.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (70 samples, 0.90%)</title><rect x="541.6" y="435.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="544.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (70 samples, 0.90%)</title><rect x="541.6" y="419.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="544.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (68 samples, 0.88%)</title><rect x="541.9" y="403.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (68 samples, 0.88%)</title><rect x="541.9" y="387.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="544.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (67 samples, 0.86%)</title><rect x="542.1" y="371.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="545.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (67 samples, 0.86%)</title><rect x="542.1" y="355.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="545.1" y="366.0"></text>
</g>
<g>
<title>write (63 samples, 0.81%)</title><rect x="542.7" y="339.0" width="9.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="545.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (726 samples, 9.34%)</title><rect x="552.5" y="531.0" width="110.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="555.5" y="542.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title><rect x="552.5" y="515.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="555.5" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title><rect x="552.5" y="499.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="555.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (722 samples, 9.29%)</title><rect x="553.2" y="515.0" width="109.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="556.2" y="526.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (721 samples, 9.28%)</title><rect x="553.3" y="499.0" width="109.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="556.3" y="510.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (721 samples, 9.28%)</title><rect x="553.3" y="483.0" width="109.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.3" y="494.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (719 samples, 9.25%)</title><rect x="553.6" y="467.0" width="109.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="556.6" y="478.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (712 samples, 9.16%)</title><rect x="554.7" y="451.0" width="108.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="557.7" y="462.0">Java_org_rock..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (710 samples, 9.14%)</title><rect x="555.0" y="435.0" width="107.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="558.0" y="446.0">rocksdb_put_h..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.04%)</title><rect x="555.6" y="419.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="558.6" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.10%)</title><rect x="556.0" y="419.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="559.0" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.05%)</title><rect x="556.6" y="403.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="559.6" y="414.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="556.6" y="387.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="559.6" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="557.0" y="387.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="560.0" y="398.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.08%)</title><rect x="557.3" y="419.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="560.3" y="430.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.08%)</title><rect x="557.3" y="403.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="560.3" y="414.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.08%)</title><rect x="557.3" y="387.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="560.3" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.06%)</title><rect x="557.3" y="371.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="560.3" y="382.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.06%)</title><rect x="557.3" y="355.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="560.3" y="366.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="557.6" y="339.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="560.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (688 samples, 8.85%)</title><rect x="558.2" y="419.0" width="104.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="561.2" y="430.0">rocksdb::Com..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (688 samples, 8.85%)</title><rect x="558.2" y="403.0" width="104.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="561.2" y="414.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (688 samples, 8.85%)</title><rect x="558.2" y="387.0" width="104.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="561.2" y="398.0">rocksdb::DB:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (673 samples, 8.66%)</title><rect x="558.6" y="371.0" width="102.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="561.6" y="382.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (671 samples, 8.63%)</title><rect x="558.9" y="355.0" width="101.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="561.9" y="366.0">rocksdb::DBI..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="560.4" y="339.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="563.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.03%)</title><rect x="560.9" y="339.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="563.9" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="560.9" y="323.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="563.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (64 samples, 0.82%)</title><rect x="561.2" y="339.0" width="9.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="564.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (63 samples, 0.81%)</title><rect x="561.4" y="323.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="564.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (62 samples, 0.80%)</title><rect x="561.5" y="307.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="564.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (57 samples, 0.73%)</title><rect x="561.8" y="291.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="564.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (56 samples, 0.72%)</title><rect x="562.0" y="275.0" width="8.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="565.0" y="286.0"></text>
</g>
<g>
<title>write (54 samples, 0.69%)</title><rect x="562.3" y="259.0" width="8.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="565.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (3 samples, 0.04%)</title><rect x="570.5" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="573.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="570.6" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="573.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.03%)</title><rect x="571.1" y="339.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="574.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (7 samples, 0.09%)</title><rect x="572.0" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="575.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 0.09%)</title><rect x="572.0" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="575.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.09%)</title><rect x="572.0" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="575.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.09%)</title><rect x="572.0" y="291.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="575.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (6 samples, 0.08%)</title><rect x="572.1" y="275.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="575.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.06%)</title><rect x="572.3" y="259.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="575.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (36 samples, 0.46%)</title><rect x="573.0" y="339.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="576.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="574.0" y="323.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="577.0" y="334.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="574.1" y="307.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="577.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (27 samples, 0.35%)</title><rect x="574.4" y="323.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="577.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.31%)</title><rect x="574.9" y="307.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="577.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.30%)</title><rect x="575.0" y="291.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="578.0" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="575.2" y="275.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="578.2" y="286.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="575.2" y="259.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="578.2" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="575.2" y="243.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="578.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (19 samples, 0.24%)</title><rect x="575.5" y="275.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="578.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (17 samples, 0.22%)</title><rect x="575.8" y="259.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="578.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.15%)</title><rect x="576.5" y="243.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="579.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.05%)</title><rect x="577.5" y="227.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="580.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="578.1" y="227.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="581.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (355 samples, 4.57%)</title><rect x="578.7" y="339.0" width="53.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="581.7" y="350.0">rocks..</text>
</g>
<g>
<title>pthread_cond_wait (2 samples, 0.03%)</title><rect x="600.2" y="323.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="603.2" y="334.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (11 samples, 0.14%)</title><rect x="600.7" y="323.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="603.7" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (193 samples, 2.48%)</title><rect x="602.4" y="323.0" width="29.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="605.4" y="334.0">st..</text>
</g>
<g>
<title>__psynch_cvwait (177 samples, 2.28%)</title><rect x="602.4" y="307.0" width="26.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="605.4" y="318.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (13 samples, 0.17%)</title><rect x="629.4" y="307.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="632.4" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (12 samples, 0.15%)</title><rect x="629.4" y="291.0" width="1.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="632.4" y="302.0"></text>
</g>
<g>
<title>__psynch_mutexwait (12 samples, 0.15%)</title><rect x="629.4" y="275.0" width="1.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="632.4" y="286.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (6 samples, 0.08%)</title><rect x="631.7" y="323.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="634.7" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (5 samples, 0.06%)</title><rect x="631.8" y="307.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="634.8" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (5 samples, 0.06%)</title><rect x="631.8" y="291.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="634.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (142 samples, 1.83%)</title><rect x="632.6" y="339.0" width="21.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="635.6" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (141 samples, 1.81%)</title><rect x="632.6" y="323.0" width="21.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="635.6" y="334.0">r..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (47 samples, 0.60%)</title><rect x="640.9" y="307.0" width="7.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="643.9" y="318.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.03%)</title><rect x="648.1" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="651.1" y="318.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.03%)</title><rect x="648.1" y="291.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="651.1" y="302.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="648.1" y="275.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="651.1" y="286.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (37 samples, 0.48%)</title><rect x="648.4" y="307.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="651.4" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (36 samples, 0.46%)</title><rect x="648.4" y="291.0" width="5.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="651.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (2 samples, 0.03%)</title><rect x="654.1" y="339.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="657.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (9 samples, 0.12%)</title><rect x="654.4" y="339.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="657.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (7 samples, 0.09%)</title><rect x="654.6" y="323.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="657.6" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.06%)</title><rect x="654.7" y="307.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="657.7" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.06%)</title><rect x="654.7" y="291.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="657.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (27 samples, 0.35%)</title><rect x="656.1" y="339.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="659.1" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (23 samples, 0.30%)</title><rect x="656.3" y="323.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="659.3" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.23%)</title><rect x="656.3" y="307.0" width="2.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="659.3" y="318.0"></text>
</g>
<g>
<title>pthread_cond_signal (4 samples, 0.05%)</title><rect x="659.0" y="307.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="662.0" y="318.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.03%)</title><rect x="659.3" y="291.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="662.3" y="302.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.04%)</title><rect x="659.8" y="323.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="662.8" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.04%)</title><rect x="659.8" y="307.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="662.8" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.04%)</title><rect x="659.8" y="291.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="662.8" y="302.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="660.5" y="339.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="663.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.05%)</title><rect x="660.8" y="371.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="663.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="661.1" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="664.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.04%)</title><rect x="661.4" y="371.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="664.4" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.03%)</title><rect x="661.4" y="355.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="664.4" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="661.4" y="339.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="664.4" y="350.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="661.4" y="323.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="664.4" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="661.4" y="307.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="664.4" y="318.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="661.4" y="291.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="664.4" y="302.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="661.4" y="275.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="664.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.03%)</title><rect x="661.9" y="371.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="664.9" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.03%)</title><rect x="662.2" y="371.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="665.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="662.8" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="665.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="662.8" y="531.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="665.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="662.8" y="515.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.8" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.03%)</title><rect x="662.8" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="665.8" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.05%)</title><rect x="663.1" y="579.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.03%)</title><rect x="663.4" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="663.4" y="547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.4" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="663.4" y="531.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.4" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="663.4" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.4" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.12%)</title><rect x="663.9" y="579.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.09%)</title><rect x="664.2" y="563.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="667.2" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.09%)</title><rect x="664.2" y="547.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (40 samples, 0.51%)</title><rect x="665.2" y="595.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="668.2" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (40 samples, 0.51%)</title><rect x="665.2" y="579.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="668.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (39 samples, 0.50%)</title><rect x="665.4" y="563.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="668.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (38 samples, 0.49%)</title><rect x="665.5" y="547.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (38 samples, 0.49%)</title><rect x="665.5" y="531.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="668.5" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.03%)</title><rect x="665.5" y="515.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="668.5" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="665.5" y="499.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.03%)</title><rect x="665.5" y="483.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="668.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="665.5" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.5" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.03%)</title><rect x="665.5" y="451.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.03%)</title><rect x="665.5" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 0.46%)</title><rect x="665.8" y="515.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="668.8" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (36 samples, 0.46%)</title><rect x="665.8" y="499.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="668.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (36 samples, 0.46%)</title><rect x="665.8" y="483.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="668.8" y="494.0"></text>
</g>
<g>
<title>rpc_errlist (33 samples, 0.42%)</title><rect x="666.3" y="467.0" width="5.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="669.3" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=38659] (954 samples, 12.28%)</title><rect x="671.3" y="659.0" width="144.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="674.3" y="670.0">[NIO Selector #4 t..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (952 samples, 12.25%)</title><rect x="671.6" y="643.0" width="144.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="674.6" y="654.0">one/nio/server/Sel..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (109 samples, 1.40%)</title><rect x="671.6" y="627.0" width="16.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="674.6" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.03%)</title><rect x="671.6" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="674.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.03%)</title><rect x="671.6" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="674.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (107 samples, 1.38%)</title><rect x="671.9" y="611.0" width="16.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="674.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (107 samples, 1.38%)</title><rect x="671.9" y="595.0" width="16.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="674.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (107 samples, 1.38%)</title><rect x="671.9" y="579.0" width="16.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="674.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (99 samples, 1.27%)</title><rect x="671.9" y="563.0" width="15.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="674.9" y="574.0"></text>
</g>
<g>
<title>kevent (96 samples, 1.24%)</title><rect x="672.4" y="547.0" width="14.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="675.4" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.03%)</title><rect x="686.9" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="686.9" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="689.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="686.9" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="689.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="686.9" y="515.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="689.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="686.9" y="499.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="689.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (5 samples, 0.06%)</title><rect x="687.4" y="563.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="690.4" y="574.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.03%)</title><rect x="687.5" y="547.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="690.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (843 samples, 10.85%)</title><rect x="688.1" y="627.0" width="128.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="691.1" y="638.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (843 samples, 10.85%)</title><rect x="688.1" y="611.0" width="128.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="691.1" y="622.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (806 samples, 10.37%)</title><rect x="688.1" y="595.0" width="122.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="691.1" y="606.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (787 samples, 10.13%)</title><rect x="688.6" y="579.0" width="119.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.6" y="590.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (787 samples, 10.13%)</title><rect x="688.6" y="563.0" width="119.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="691.6" y="574.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (785 samples, 10.10%)</title><rect x="688.6" y="547.0" width="119.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="691.6" y="558.0">RequestHandler0..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (70 samples, 0.90%)</title><rect x="688.9" y="531.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="691.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (65 samples, 0.84%)</title><rect x="689.2" y="515.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="692.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="689.2" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="692.2" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.03%)</title><rect x="689.2" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.2" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.03%)</title><rect x="689.2" y="467.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="692.2" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="689.2" y="451.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="692.2" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (63 samples, 0.81%)</title><rect x="689.5" y="499.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.5" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (62 samples, 0.80%)</title><rect x="689.7" y="483.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="692.7" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (62 samples, 0.80%)</title><rect x="689.7" y="467.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="692.7" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (62 samples, 0.80%)</title><rect x="689.7" y="451.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="692.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (61 samples, 0.78%)</title><rect x="689.8" y="435.0" width="9.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="692.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (61 samples, 0.78%)</title><rect x="689.8" y="419.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="692.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (61 samples, 0.78%)</title><rect x="689.8" y="403.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (61 samples, 0.78%)</title><rect x="689.8" y="387.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="692.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (61 samples, 0.78%)</title><rect x="689.8" y="371.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="692.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (56 samples, 0.72%)</title><rect x="690.6" y="355.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="693.6" y="366.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.04%)</title><rect x="691.0" y="339.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="694.0" y="350.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="691.2" y="323.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="694.2" y="334.0"></text>
</g>
<g>
<title>write (50 samples, 0.64%)</title><rect x="691.5" y="339.0" width="7.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="694.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.04%)</title><rect x="699.1" y="515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="702.1" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.04%)</title><rect x="699.5" y="531.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="702.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (710 samples, 9.14%)</title><rect x="700.0" y="531.0" width="107.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="703.0" y="542.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="700.0" y="515.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="703.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="700.0" y="499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="703.0" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="700.0" y="483.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="703.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (708 samples, 9.11%)</title><rect x="700.3" y="515.0" width="107.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="703.3" y="526.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (706 samples, 9.09%)</title><rect x="700.6" y="499.0" width="107.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="703.6" y="510.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (705 samples, 9.07%)</title><rect x="700.6" y="483.0" width="107.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="703.6" y="494.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (703 samples, 9.05%)</title><rect x="700.9" y="467.0" width="106.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="703.9" y="478.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (701 samples, 9.02%)</title><rect x="701.2" y="451.0" width="106.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="704.2" y="462.0">Java_org_rock..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (699 samples, 8.99%)</title><rect x="701.5" y="435.0" width="106.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="704.5" y="446.0">rocksdb_put_h..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.04%)</title><rect x="702.1" y="419.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="705.1" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.06%)</title><rect x="702.6" y="419.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="705.6" y="430.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="702.7" y="403.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="705.7" y="414.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.06%)</title><rect x="703.3" y="419.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="706.3" y="430.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="703.6" y="403.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="706.6" y="414.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.06%)</title><rect x="704.1" y="419.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="707.1" y="430.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.06%)</title><rect x="704.1" y="403.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="707.1" y="414.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.06%)</title><rect x="704.1" y="387.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="707.1" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="704.2" y="371.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="707.2" y="382.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.05%)</title><rect x="704.2" y="355.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="707.2" y="366.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="704.5" y="339.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="707.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (675 samples, 8.69%)</title><rect x="704.9" y="419.0" width="102.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="707.9" y="430.0">rocksdb::Com..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (675 samples, 8.69%)</title><rect x="704.9" y="403.0" width="102.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="707.9" y="414.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (675 samples, 8.69%)</title><rect x="704.9" y="387.0" width="102.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="707.9" y="398.0">rocksdb::DB:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (663 samples, 8.53%)</title><rect x="705.2" y="371.0" width="100.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="708.2" y="382.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (658 samples, 8.47%)</title><rect x="705.3" y="355.0" width="99.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="708.3" y="366.0">rocksdb::DBI..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="706.7" y="339.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="709.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (86 samples, 1.11%)</title><rect x="707.4" y="339.0" width="13.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="710.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (81 samples, 1.04%)</title><rect x="707.4" y="323.0" width="12.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="710.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (81 samples, 1.04%)</title><rect x="707.4" y="307.0" width="12.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="710.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (75 samples, 0.97%)</title><rect x="707.7" y="291.0" width="11.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="710.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (75 samples, 0.97%)</title><rect x="707.7" y="275.0" width="11.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="710.7" y="286.0"></text>
</g>
<g>
<title>write (72 samples, 0.93%)</title><rect x="708.2" y="259.0" width="10.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="711.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (3 samples, 0.04%)</title><rect x="719.3" y="291.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="722.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="719.4" y="275.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="722.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (4 samples, 0.05%)</title><rect x="719.7" y="323.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="722.7" y="334.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.04%)</title><rect x="719.9" y="307.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="722.9" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (3 samples, 0.04%)</title><rect x="719.9" y="291.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="722.9" y="302.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="719.9" y="275.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="722.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (9 samples, 0.12%)</title><rect x="720.5" y="339.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="723.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (9 samples, 0.12%)</title><rect x="720.5" y="323.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="723.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (8 samples, 0.10%)</title><rect x="720.6" y="307.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="723.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (8 samples, 0.10%)</title><rect x="720.6" y="291.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="723.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (8 samples, 0.10%)</title><rect x="720.6" y="275.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="723.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.08%)</title><rect x="720.9" y="259.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="723.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (41 samples, 0.53%)</title><rect x="721.9" y="339.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="724.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="723.4" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="726.4" y="334.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="723.4" y="307.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="726.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (29 samples, 0.37%)</title><rect x="723.7" y="323.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="726.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (27 samples, 0.35%)</title><rect x="724.0" y="307.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="727.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (25 samples, 0.32%)</title><rect x="724.3" y="291.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="727.3" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.06%)</title><rect x="724.4" y="275.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="727.4" y="286.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.06%)</title><rect x="724.4" y="259.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="727.4" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.06%)</title><rect x="724.4" y="243.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="727.4" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="724.6" y="227.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="727.6" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="724.6" y="211.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="727.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (17 samples, 0.22%)</title><rect x="725.2" y="275.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="728.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.18%)</title><rect x="725.7" y="259.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="728.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (13 samples, 0.17%)</title><rect x="725.8" y="243.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="728.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.04%)</title><rect x="727.2" y="227.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="730.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (299 samples, 3.85%)</title><rect x="728.1" y="339.0" width="45.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="731.1" y="350.0">rock..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.03%)</title><rect x="749.6" y="323.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="752.6" y="334.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (12 samples, 0.15%)</title><rect x="750.3" y="323.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="753.3" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (141 samples, 1.81%)</title><rect x="752.1" y="323.0" width="21.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="755.1" y="334.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (134 samples, 1.72%)</title><rect x="752.1" y="307.0" width="20.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="755.1" y="318.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.09%)</title><rect x="772.4" y="307.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="775.4" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.06%)</title><rect x="772.6" y="291.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="775.6" y="302.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.06%)</title><rect x="772.6" y="275.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="775.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (159 samples, 2.05%)</title><rect x="773.5" y="339.0" width="24.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="776.5" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (158 samples, 2.03%)</title><rect x="773.6" y="323.0" width="24.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="776.6" y="334.0">r..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.03%)</title><rect x="785.8" y="307.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="788.8" y="318.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (36 samples, 0.46%)</title><rect x="786.1" y="307.0" width="5.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="789.1" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (39 samples, 0.50%)</title><rect x="791.7" y="307.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="794.7" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (35 samples, 0.45%)</title><rect x="791.7" y="291.0" width="5.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="794.7" y="302.0"></text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.04%)</title><rect x="797.0" y="291.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="800.0" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.03%)</title><rect x="797.0" y="275.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="800.0" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.03%)</title><rect x="797.0" y="259.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="800.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (5 samples, 0.06%)</title><rect x="797.6" y="339.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="800.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.06%)</title><rect x="797.6" y="323.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.6" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.06%)</title><rect x="797.6" y="307.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="800.6" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.05%)</title><rect x="797.6" y="291.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="800.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.04%)</title><rect x="798.4" y="339.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="801.4" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.03%)</title><rect x="798.5" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="801.5" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="798.5" y="307.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="801.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (35 samples, 0.45%)</title><rect x="798.8" y="339.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="801.8" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (29 samples, 0.37%)</title><rect x="799.1" y="323.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="802.1" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (29 samples, 0.37%)</title><rect x="799.1" y="307.0" width="4.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="802.1" y="318.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.04%)</title><rect x="803.7" y="323.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="806.7" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.04%)</title><rect x="803.7" y="307.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="806.7" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.04%)</title><rect x="803.7" y="291.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="806.7" y="302.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.04%)</title><rect x="804.2" y="339.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="807.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="805.8" y="371.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="808.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (6 samples, 0.08%)</title><rect x="806.1" y="371.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="809.1" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.05%)</title><rect x="806.3" y="355.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="809.3" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.05%)</title><rect x="806.3" y="339.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="809.3" y="350.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.05%)</title><rect x="806.3" y="323.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="809.3" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.05%)</title><rect x="806.3" y="307.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="809.3" y="318.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="806.3" y="291.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="809.3" y="302.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="806.4" y="275.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="809.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 0.09%)</title><rect x="808.1" y="579.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.06%)</title><rect x="808.3" y="563.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="811.3" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.06%)</title><rect x="808.3" y="547.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="811.3" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.06%)</title><rect x="808.3" y="531.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="811.3" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.06%)</title><rect x="808.3" y="515.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="811.3" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.12%)</title><rect x="809.2" y="579.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="812.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.12%)</title><rect x="809.2" y="563.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="812.2" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.12%)</title><rect x="809.2" y="547.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="812.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (37 samples, 0.48%)</title><rect x="810.5" y="595.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.5" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 0.48%)</title><rect x="810.5" y="579.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="813.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="810.5" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="813.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="810.5" y="547.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="813.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="810.5" y="531.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (35 samples, 0.45%)</title><rect x="810.8" y="563.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (34 samples, 0.44%)</title><rect x="811.0" y="547.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="814.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (34 samples, 0.44%)</title><rect x="811.0" y="531.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="814.0" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.03%)</title><rect x="811.3" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.3" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="811.3" y="499.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="814.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (29 samples, 0.37%)</title><rect x="811.6" y="515.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="814.6" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (29 samples, 0.37%)</title><rect x="811.6" y="499.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (29 samples, 0.37%)</title><rect x="811.6" y="483.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="814.6" y="494.0"></text>
</g>
<g>
<title>rpc_errlist (27 samples, 0.35%)</title><rect x="811.9" y="467.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="814.9" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=38403] (899 samples, 11.57%)</title><rect x="816.2" y="659.0" width="136.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="819.2" y="670.0">[NIO Selector #5 ..</text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.09%)</title><rect x="816.3" y="643.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="819.3" y="654.0"></text>
</g>
<g>
<title>Interpreter (2 samples, 0.03%)</title><rect x="816.5" y="627.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="819.5" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (4 samples, 0.05%)</title><rect x="816.8" y="627.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="819.8" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="816.8" y="611.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="819.8" y="622.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (891 samples, 11.47%)</title><rect x="817.4" y="643.0" width="135.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="820.4" y="654.0">one/nio/server/Se..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (111 samples, 1.43%)</title><rect x="817.4" y="627.0" width="16.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="820.4" y="638.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (2 samples, 0.03%)</title><rect x="818.4" y="611.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="821.4" y="622.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (2 samples, 0.03%)</title><rect x="818.4" y="595.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="821.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (98 samples, 1.26%)</title><rect x="818.9" y="611.0" width="14.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="821.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (98 samples, 1.26%)</title><rect x="818.9" y="595.0" width="14.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="821.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (97 samples, 1.25%)</title><rect x="819.0" y="579.0" width="14.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="822.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (89 samples, 1.15%)</title><rect x="819.2" y="563.0" width="13.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="822.2" y="574.0"></text>
</g>
<g>
<title>kevent (80 samples, 1.03%)</title><rect x="820.6" y="547.0" width="12.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="823.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.04%)</title><rect x="832.7" y="563.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="832.9" y="547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="835.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="832.9" y="531.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="835.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="832.9" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="835.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="832.9" y="499.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="835.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title><rect x="833.5" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="836.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (3 samples, 0.04%)</title><rect x="833.8" y="611.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="836.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.03%)</title><rect x="833.9" y="595.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="836.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.03%)</title><rect x="833.9" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="836.9" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (780 samples, 10.04%)</title><rect x="834.2" y="627.0" width="118.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="837.2" y="638.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (780 samples, 10.04%)</title><rect x="834.2" y="611.0" width="118.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="837.2" y="622.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (753 samples, 9.69%)</title><rect x="834.2" y="595.0" width="114.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="837.2" y="606.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (743 samples, 9.56%)</title><rect x="834.7" y="579.0" width="112.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="837.7" y="590.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (743 samples, 9.56%)</title><rect x="834.7" y="563.0" width="112.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="837.7" y="574.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (736 samples, 9.47%)</title><rect x="834.7" y="547.0" width="111.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="837.7" y="558.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (71 samples, 0.91%)</title><rect x="835.0" y="531.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="838.0" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (70 samples, 0.90%)</title><rect x="835.1" y="515.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="838.1" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="835.3" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="838.3" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (67 samples, 0.86%)</title><rect x="835.6" y="499.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="838.6" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (67 samples, 0.86%)</title><rect x="835.6" y="483.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="838.6" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (67 samples, 0.86%)</title><rect x="835.6" y="467.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.6" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (67 samples, 0.86%)</title><rect x="835.6" y="451.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="838.6" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="835.6" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="838.6" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="835.7" y="419.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="838.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (64 samples, 0.82%)</title><rect x="836.0" y="435.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="839.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (64 samples, 0.82%)</title><rect x="836.0" y="419.0" width="9.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (62 samples, 0.80%)</title><rect x="836.3" y="403.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="839.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (62 samples, 0.80%)</title><rect x="836.3" y="387.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="839.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (2 samples, 0.03%)</title><rect x="836.3" y="371.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="839.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (60 samples, 0.77%)</title><rect x="836.7" y="371.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="839.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (55 samples, 0.71%)</title><rect x="837.4" y="355.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="840.4" y="366.0"></text>
</g>
<g>
<title>write (51 samples, 0.66%)</title><rect x="838.0" y="339.0" width="7.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="841.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.06%)</title><rect x="845.8" y="531.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="848.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (658 samples, 8.47%)</title><rect x="846.5" y="531.0" width="99.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="849.5" y="542.0">ru/mail/poli..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="846.5" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="849.5" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="846.5" y="499.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="849.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (656 samples, 8.44%)</title><rect x="846.8" y="515.0" width="99.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="849.8" y="526.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (655 samples, 8.43%)</title><rect x="847.0" y="499.0" width="99.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="850.0" y="510.0">ru/mail/poli..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (654 samples, 8.42%)</title><rect x="847.0" y="483.0" width="99.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="850.0" y="494.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (654 samples, 8.42%)</title><rect x="847.0" y="467.0" width="99.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="850.0" y="478.0">org/rocksdb/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (651 samples, 8.38%)</title><rect x="847.4" y="451.0" width="98.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="850.4" y="462.0">Java_org_roc..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (649 samples, 8.35%)</title><rect x="847.7" y="435.0" width="98.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="850.7" y="446.0">rocksdb_put_..</text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="848.2" y="419.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="851.2" y="430.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="848.2" y="403.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="851.2" y="414.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.06%)</title><rect x="848.6" y="419.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="851.6" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="848.8" y="403.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="851.8" y="414.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="849.0" y="387.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="852.0" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="849.0" y="371.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="852.0" y="382.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="849.4" y="419.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="852.4" y="430.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="849.4" y="403.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="852.4" y="414.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.04%)</title><rect x="849.4" y="387.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="852.4" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="849.4" y="371.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="852.4" y="382.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="849.4" y="355.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="852.4" y="366.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="849.6" y="339.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="852.6" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="849.6" y="323.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="852.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (634 samples, 8.16%)</title><rect x="849.9" y="419.0" width="96.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="852.9" y="430.0">rocksdb::Co..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (634 samples, 8.16%)</title><rect x="849.9" y="403.0" width="96.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="852.9" y="414.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (634 samples, 8.16%)</title><rect x="849.9" y="387.0" width="96.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="852.9" y="398.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (617 samples, 7.94%)</title><rect x="850.0" y="371.0" width="93.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="853.0" y="382.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (617 samples, 7.94%)</title><rect x="850.0" y="355.0" width="93.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="853.0" y="366.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (61 samples, 0.78%)</title><rect x="851.2" y="339.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="854.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (58 samples, 0.75%)</title><rect x="851.4" y="323.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="854.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (58 samples, 0.75%)</title><rect x="851.4" y="307.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="854.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (56 samples, 0.72%)</title><rect x="851.5" y="291.0" width="8.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="854.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (55 samples, 0.71%)</title><rect x="851.7" y="275.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="854.7" y="286.0"></text>
</g>
<g>
<title>write (54 samples, 0.69%)</title><rect x="851.8" y="259.0" width="8.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="854.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (2 samples, 0.03%)</title><rect x="860.2" y="323.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="863.2" y="334.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.03%)</title><rect x="860.2" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="863.2" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.03%)</title><rect x="860.2" y="291.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="863.2" y="302.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="860.2" y="275.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="863.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.04%)</title><rect x="860.5" y="339.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="863.5" y="350.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.04%)</title><rect x="860.5" y="323.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="863.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (8 samples, 0.10%)</title><rect x="860.9" y="339.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="863.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 0.09%)</title><rect x="861.1" y="323.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.08%)</title><rect x="861.3" y="307.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.08%)</title><rect x="861.3" y="291.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (6 samples, 0.08%)</title><rect x="861.3" y="275.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="864.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.06%)</title><rect x="861.4" y="259.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (40 samples, 0.51%)</title><rect x="862.2" y="339.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="865.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.03%)</title><rect x="862.9" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="865.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (32 samples, 0.41%)</title><rect x="863.4" y="323.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="866.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (30 samples, 0.39%)</title><rect x="863.7" y="307.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="866.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (27 samples, 0.35%)</title><rect x="864.1" y="291.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="867.1" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="864.4" y="275.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="867.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (22 samples, 0.28%)</title><rect x="864.7" y="275.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="867.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.26%)</title><rect x="865.0" y="259.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="868.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (19 samples, 0.24%)</title><rect x="865.2" y="243.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="868.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.03%)</title><rect x="866.7" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="869.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.08%)</title><rect x="867.0" y="227.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="870.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="867.5" y="211.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="870.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (306 samples, 3.94%)</title><rect x="868.2" y="339.0" width="46.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="871.2" y="350.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (11 samples, 0.14%)</title><rect x="887.1" y="323.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="890.1" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (168 samples, 2.16%)</title><rect x="888.9" y="323.0" width="25.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="891.9" y="334.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (152 samples, 1.96%)</title><rect x="889.0" y="307.0" width="23.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="892.0" y="318.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (13 samples, 0.17%)</title><rect x="912.3" y="307.0" width="1.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="915.3" y="318.0"></text>
</g>
<g>
<title>_pthread_cond_check_init_slow (2 samples, 0.03%)</title><rect x="912.3" y="291.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="915.3" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (10 samples, 0.13%)</title><rect x="912.6" y="291.0" width="1.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="915.6" y="302.0"></text>
</g>
<g>
<title>__psynch_mutexwait (10 samples, 0.13%)</title><rect x="912.6" y="275.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="915.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (146 samples, 1.88%)</title><rect x="914.7" y="339.0" width="22.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.7" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (146 samples, 1.88%)</title><rect x="914.7" y="323.0" width="22.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="917.7" y="334.0">r..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.03%)</title><rect x="923.1" y="307.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="926.1" y="318.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (49 samples, 0.63%)</title><rect x="923.4" y="307.0" width="7.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="926.4" y="318.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (39 samples, 0.50%)</title><rect x="930.9" y="307.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.9" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (37 samples, 0.48%)</title><rect x="930.9" y="291.0" width="5.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="933.9" y="302.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.03%)</title><rect x="936.6" y="291.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="939.6" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.03%)</title><rect x="936.6" y="275.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="939.6" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.03%)</title><rect x="936.6" y="259.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="939.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (8 samples, 0.10%)</title><rect x="937.0" y="339.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (6 samples, 0.08%)</title><rect x="937.0" y="323.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="940.0" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.08%)</title><rect x="937.0" y="307.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.0" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.06%)</title><rect x="937.0" y="291.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="940.0" y="302.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.03%)</title><rect x="937.9" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.9" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="937.9" y="307.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="940.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.05%)</title><rect x="938.2" y="339.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="941.2" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.04%)</title><rect x="938.4" y="323.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="941.4" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="938.4" y="307.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="941.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (28 samples, 0.36%)</title><rect x="938.8" y="339.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="941.8" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (26 samples, 0.33%)</title><rect x="938.8" y="323.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="941.8" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (24 samples, 0.31%)</title><rect x="938.8" y="307.0" width="3.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="941.8" y="318.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.03%)</title><rect x="942.5" y="307.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="945.5" y="318.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.03%)</title><rect x="942.8" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.8" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.03%)</title><rect x="942.8" y="307.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="945.8" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.03%)</title><rect x="942.8" y="291.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="945.8" y="302.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.03%)</title><rect x="943.1" y="339.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.05%)</title><rect x="943.9" y="371.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="946.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.03%)</title><rect x="943.9" y="355.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="946.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="944.2" y="355.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="947.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (6 samples, 0.08%)</title><rect x="944.5" y="371.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.5" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.06%)</title><rect x="944.5" y="355.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.5" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.06%)</title><rect x="944.5" y="339.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="947.5" y="350.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.06%)</title><rect x="944.5" y="323.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="947.5" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.06%)</title><rect x="944.5" y="307.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="947.5" y="318.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="944.6" y="291.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="947.6" y="302.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.05%)</title><rect x="944.6" y="275.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="947.6" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="944.8" y="259.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="947.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.06%)</title><rect x="945.4" y="371.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="948.4" y="382.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.05%)</title><rect x="945.5" y="355.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="948.5" y="366.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="945.8" y="339.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="948.8" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="945.8" y="323.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="948.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (3 samples, 0.04%)</title><rect x="946.4" y="547.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.05%)</title><rect x="946.9" y="547.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="949.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.05%)</title><rect x="946.9" y="531.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="949.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.05%)</title><rect x="946.9" y="515.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="949.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.04%)</title><rect x="947.5" y="579.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="950.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.04%)</title><rect x="947.5" y="563.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="950.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="947.5" y="547.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="950.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="947.5" y="531.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="950.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.04%)</title><rect x="947.5" y="515.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="950.5" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.05%)</title><rect x="948.0" y="579.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="951.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.04%)</title><rect x="948.1" y="563.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="951.1" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.04%)</title><rect x="948.1" y="547.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="951.1" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (27 samples, 0.35%)</title><rect x="948.6" y="595.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="951.6" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (27 samples, 0.35%)</title><rect x="948.6" y="579.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="951.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (26 samples, 0.33%)</title><rect x="948.7" y="563.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="951.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.33%)</title><rect x="948.7" y="547.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="951.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.33%)</title><rect x="948.7" y="531.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="951.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (25 samples, 0.32%)</title><rect x="948.9" y="515.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="951.9" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (25 samples, 0.32%)</title><rect x="948.9" y="499.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="951.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (25 samples, 0.32%)</title><rect x="948.9" y="483.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="951.9" y="494.0"></text>
</g>
<g>
<title>rpc_errlist (23 samples, 0.30%)</title><rect x="949.2" y="467.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="952.2" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=26883] (783 samples, 10.08%)</title><rect x="952.7" y="659.0" width="118.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="955.7" y="670.0">[NIO Selector ..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (783 samples, 10.08%)</title><rect x="952.7" y="643.0" width="118.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="955.7" y="654.0">one/nio/server..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.04%)</title><rect x="953.3" y="627.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="956.3" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (92 samples, 1.18%)</title><rect x="953.7" y="627.0" width="14.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.7" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.03%)</title><rect x="953.7" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="956.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (89 samples, 1.15%)</title><rect x="954.2" y="611.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="957.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (89 samples, 1.15%)</title><rect x="954.2" y="595.0" width="13.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="957.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (89 samples, 1.15%)</title><rect x="954.2" y="579.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="957.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (80 samples, 1.03%)</title><rect x="954.5" y="563.0" width="12.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="957.5" y="574.0"></text>
</g>
<g>
<title>kevent (76 samples, 0.98%)</title><rect x="955.1" y="547.0" width="11.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="958.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.03%)</title><rect x="966.6" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="969.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.03%)</title><rect x="966.6" y="547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="969.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.03%)</title><rect x="966.6" y="531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="969.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.03%)</title><rect x="966.6" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="969.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="966.6" y="499.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="969.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.05%)</title><rect x="967.1" y="563.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="970.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.04%)</title><rect x="967.2" y="547.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="970.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.04%)</title><rect x="967.2" y="531.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="970.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="967.2" y="515.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="970.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (684 samples, 8.80%)</title><rect x="967.7" y="627.0" width="103.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="970.7" y="638.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (684 samples, 8.80%)</title><rect x="967.7" y="611.0" width="103.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="970.7" y="622.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (658 samples, 8.47%)</title><rect x="967.7" y="595.0" width="99.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="970.7" y="606.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (652 samples, 8.39%)</title><rect x="968.0" y="579.0" width="99.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="971.0" y="590.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (652 samples, 8.39%)</title><rect x="968.0" y="563.0" width="99.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="971.0" y="574.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (650 samples, 8.36%)</title><rect x="968.0" y="547.0" width="98.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="971.0" y="558.0">RequestHandl..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (44 samples, 0.57%)</title><rect x="968.0" y="531.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="971.0" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (44 samples, 0.57%)</title><rect x="968.0" y="515.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="971.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.05%)</title><rect x="968.0" y="499.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="971.0" y="510.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.03%)</title><rect x="968.3" y="483.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="971.3" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.03%)</title><rect x="968.3" y="467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="971.3" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="968.3" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="971.3" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (40 samples, 0.51%)</title><rect x="968.6" y="499.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="971.6" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (40 samples, 0.51%)</title><rect x="968.6" y="483.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="971.6" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (39 samples, 0.50%)</title><rect x="968.6" y="467.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="971.6" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (39 samples, 0.50%)</title><rect x="968.6" y="451.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="971.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (38 samples, 0.49%)</title><rect x="968.8" y="435.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="971.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (38 samples, 0.49%)</title><rect x="968.8" y="419.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="971.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (38 samples, 0.49%)</title><rect x="968.8" y="403.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="971.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (38 samples, 0.49%)</title><rect x="968.8" y="387.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="971.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (38 samples, 0.49%)</title><rect x="968.8" y="371.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="971.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (36 samples, 0.46%)</title><rect x="969.1" y="355.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="972.1" y="366.0"></text>
</g>
<g>
<title>write (35 samples, 0.45%)</title><rect x="969.2" y="339.0" width="5.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="972.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.05%)</title><rect x="974.7" y="531.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="977.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (602 samples, 7.75%)</title><rect x="975.3" y="531.0" width="91.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="978.3" y="542.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (599 samples, 7.71%)</title><rect x="975.7" y="515.0" width="91.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="978.7" y="526.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (599 samples, 7.71%)</title><rect x="975.7" y="499.0" width="91.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="978.7" y="510.0">ru/mail/po..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (597 samples, 7.68%)</title><rect x="975.7" y="483.0" width="90.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="978.7" y="494.0">org/rocksd..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (597 samples, 7.68%)</title><rect x="975.7" y="467.0" width="90.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="978.7" y="478.0">org/rocksd..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (594 samples, 7.64%)</title><rect x="976.2" y="451.0" width="90.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="979.2" y="462.0">Java_org_r..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (591 samples, 7.61%)</title><rect x="976.7" y="435.0" width="89.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.7" y="446.0">rocksdb_pu..</text>
</g>
<g>
<title>free_tiny (4 samples, 0.05%)</title><rect x="977.0" y="419.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="980.0" y="430.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.04%)</title><rect x="977.1" y="403.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="980.1" y="414.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.04%)</title><rect x="977.7" y="419.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="980.7" y="430.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="978.2" y="419.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="981.2" y="430.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="978.2" y="403.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="981.2" y="414.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.03%)</title><rect x="978.2" y="387.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="981.2" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="978.2" y="371.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="981.2" y="382.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="978.2" y="355.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="981.2" y="366.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title><rect x="978.2" y="339.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="981.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (578 samples, 7.44%)</title><rect x="978.5" y="419.0" width="87.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.5" y="430.0">rocksdb::C..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (578 samples, 7.44%)</title><rect x="978.5" y="403.0" width="87.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.5" y="414.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (577 samples, 7.43%)</title><rect x="978.5" y="387.0" width="87.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.5" y="398.0">rocksdb::D..</text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="978.5" y="371.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="981.5" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (563 samples, 7.24%)</title><rect x="978.9" y="371.0" width="85.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.9" y="382.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (563 samples, 7.24%)</title><rect x="978.9" y="355.0" width="85.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.9" y="366.0">rocksdb::D..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="979.5" y="339.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="982.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (58 samples, 0.75%)</title><rect x="980.0" y="339.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="983.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (56 samples, 0.72%)</title><rect x="980.1" y="323.0" width="8.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="983.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (54 samples, 0.69%)</title><rect x="980.5" y="307.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="983.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (50 samples, 0.64%)</title><rect x="980.5" y="291.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (48 samples, 0.62%)</title><rect x="980.8" y="275.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.8" y="286.0"></text>
</g>
<g>
<title>write (46 samples, 0.59%)</title><rect x="981.1" y="259.0" width="6.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="984.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (2 samples, 0.03%)</title><rect x="988.0" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="991.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.03%)</title><rect x="988.3" y="291.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="991.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="988.3" y="275.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="991.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (7 samples, 0.09%)</title><rect x="988.8" y="339.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="991.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 0.09%)</title><rect x="988.8" y="323.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="991.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.08%)</title><rect x="989.0" y="307.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="992.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.08%)</title><rect x="989.0" y="291.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.05%)</title><rect x="989.1" y="275.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="989.1" y="259.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.03%)</title><rect x="989.4" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="992.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (33 samples, 0.42%)</title><rect x="989.9" y="339.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (2 samples, 0.03%)</title><rect x="990.3" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="993.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.05%)</title><rect x="990.6" y="323.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="993.6" y="334.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.03%)</title><rect x="990.9" y="307.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="993.9" y="318.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="990.9" y="291.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="993.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (24 samples, 0.31%)</title><rect x="991.2" y="323.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="994.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.31%)</title><rect x="991.2" y="307.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="994.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (24 samples, 0.31%)</title><rect x="991.2" y="291.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="994.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (22 samples, 0.28%)</title><rect x="991.4" y="275.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (18 samples, 0.23%)</title><rect x="992.0" y="259.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.03%)</title><rect x="992.0" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (16 samples, 0.21%)</title><rect x="992.3" y="243.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="995.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.08%)</title><rect x="993.8" y="227.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.04%)</title><rect x="994.3" y="211.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="997.3" y="222.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.04%)</title><rect x="994.3" y="195.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="997.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (269 samples, 3.46%)</title><rect x="994.9" y="339.0" width="40.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="997.9" y="350.0">roc..</text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="1012.2" y="323.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1015.2" y="334.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (14 samples, 0.18%)</title><rect x="1012.6" y="323.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1015.6" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (138 samples, 1.78%)</title><rect x="1014.8" y="323.0" width="20.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.8" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (123 samples, 1.58%)</title><rect x="1014.8" y="307.0" width="18.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1017.8" y="318.0"></text>
</g>
<g>
<title>_pthread_cond_wait (13 samples, 0.17%)</title><rect x="1033.4" y="307.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1036.4" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (12 samples, 0.15%)</title><rect x="1033.6" y="291.0" width="1.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1036.6" y="302.0"></text>
</g>
<g>
<title>__psynch_mutexwait (12 samples, 0.15%)</title><rect x="1033.6" y="275.0" width="1.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1036.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (154 samples, 1.98%)</title><rect x="1035.7" y="339.0" width="23.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.7" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (153 samples, 1.97%)</title><rect x="1035.7" y="323.0" width="23.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.7" y="334.0">r..</text>
</g>
<g>
<title>sched_yield (2 samples, 0.03%)</title><rect x="1042.7" y="307.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1045.7" y="318.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (61 samples, 0.78%)</title><rect x="1043.0" y="307.0" width="9.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1046.0" y="318.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.05%)</title><rect x="1052.3" y="307.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.3" y="318.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.05%)</title><rect x="1052.3" y="291.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1055.3" y="302.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.03%)</title><rect x="1052.3" y="275.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1055.3" y="286.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="1052.6" y="275.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1055.6" y="286.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (40 samples, 0.51%)</title><rect x="1052.9" y="307.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.9" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (39 samples, 0.50%)</title><rect x="1052.9" y="291.0" width="5.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1055.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (4 samples, 0.05%)</title><rect x="1059.1" y="339.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.03%)</title><rect x="1059.1" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1062.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (28 samples, 0.36%)</title><rect x="1059.9" y="339.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.9" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (26 samples, 0.33%)</title><rect x="1059.9" y="323.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.9" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (24 samples, 0.31%)</title><rect x="1059.9" y="307.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1062.9" y="318.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="1063.5" y="307.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1066.5" y="318.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.03%)</title><rect x="1063.8" y="323.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.8" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.03%)</title><rect x="1063.8" y="307.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1066.8" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.03%)</title><rect x="1063.8" y="291.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1066.8" y="302.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="1064.1" y="339.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (7 samples, 0.09%)</title><rect x="1064.6" y="371.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.6" y="382.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.03%)</title><rect x="1064.6" y="355.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1067.6" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.03%)</title><rect x="1065.2" y="355.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.03%)</title><rect x="1065.6" y="371.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1068.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (2 samples, 0.03%)</title><rect x="1066.4" y="483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1069.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="1066.7" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1069.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="1066.7" y="531.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1069.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="1067.3" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1070.3" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="1067.3" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1070.3" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="1067.3" y="547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1070.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (26 samples, 0.33%)</title><rect x="1067.6" y="595.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1070.6" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (26 samples, 0.33%)</title><rect x="1067.6" y="579.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1070.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (25 samples, 0.32%)</title><rect x="1067.8" y="563.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="1067.8" y="547.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1070.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (23 samples, 0.30%)</title><rect x="1068.1" y="547.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1071.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (23 samples, 0.30%)</title><rect x="1068.1" y="531.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1071.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (22 samples, 0.28%)</title><rect x="1068.1" y="515.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1071.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (22 samples, 0.28%)</title><rect x="1068.1" y="499.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (22 samples, 0.28%)</title><rect x="1068.1" y="483.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1071.1" y="494.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.04%)</title><rect x="1068.4" y="467.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1071.4" y="478.0"></text>
</g>
<g>
<title>rpc_errlist (17 samples, 0.22%)</title><rect x="1068.8" y="467.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1071.8" y="478.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=37123] (775 samples, 9.97%)</title><rect x="1071.6" y="659.0" width="117.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1074.6" y="670.0">[NIO Selector ..</text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.05%)</title><rect x="1071.6" y="643.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1074.6" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (3 samples, 0.04%)</title><rect x="1071.7" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.7" y="638.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (2 samples, 0.03%)</title><rect x="1071.9" y="611.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.9" y="622.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (771 samples, 9.92%)</title><rect x="1072.2" y="643.0" width="117.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1075.2" y="654.0">one/nio/server..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (96 samples, 1.24%)</title><rect x="1072.2" y="627.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1075.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (77 samples, 0.99%)</title><rect x="1074.7" y="611.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1077.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (77 samples, 0.99%)</title><rect x="1074.7" y="595.0" width="11.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1077.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (77 samples, 0.99%)</title><rect x="1074.7" y="579.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1077.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (71 samples, 0.91%)</title><rect x="1074.7" y="563.0" width="10.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1077.7" y="574.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.03%)</title><rect x="1075.7" y="547.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1078.7" y="558.0"></text>
</g>
<g>
<title>kevent (63 samples, 0.81%)</title><rect x="1076.0" y="547.0" width="9.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1079.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.03%)</title><rect x="1085.5" y="563.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1088.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.03%)</title><rect x="1085.8" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1088.8" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (675 samples, 8.69%)</title><rect x="1086.7" y="627.0" width="102.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1089.7" y="638.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (675 samples, 8.69%)</title><rect x="1086.7" y="611.0" width="102.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1089.7" y="622.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (649 samples, 8.35%)</title><rect x="1086.7" y="595.0" width="98.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1089.7" y="606.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (641 samples, 8.25%)</title><rect x="1087.0" y="579.0" width="97.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1090.0" y="590.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (641 samples, 8.25%)</title><rect x="1087.0" y="563.0" width="97.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1090.0" y="574.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (639 samples, 8.22%)</title><rect x="1087.0" y="547.0" width="97.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1090.0" y="558.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (67 samples, 0.86%)</title><rect x="1087.4" y="531.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1090.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (63 samples, 0.81%)</title><rect x="1087.7" y="515.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1090.7" y="526.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (61 samples, 0.78%)</title><rect x="1088.0" y="499.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1091.0" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (61 samples, 0.78%)</title><rect x="1088.0" y="483.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1091.0" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (61 samples, 0.78%)</title><rect x="1088.0" y="467.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1091.0" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (61 samples, 0.78%)</title><rect x="1088.0" y="451.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1091.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (61 samples, 0.78%)</title><rect x="1088.0" y="435.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1091.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (61 samples, 0.78%)</title><rect x="1088.0" y="419.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1091.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (59 samples, 0.76%)</title><rect x="1088.3" y="403.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1091.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (59 samples, 0.76%)</title><rect x="1088.3" y="387.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1091.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (59 samples, 0.76%)</title><rect x="1088.3" y="371.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1091.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (59 samples, 0.76%)</title><rect x="1088.3" y="355.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1091.3" y="366.0"></text>
</g>
<g>
<title>write (54 samples, 0.69%)</title><rect x="1089.0" y="339.0" width="8.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1092.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="1097.2" y="515.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1100.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.03%)</title><rect x="1097.5" y="531.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1100.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (568 samples, 7.31%)</title><rect x="1097.8" y="531.0" width="86.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1100.8" y="542.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (567 samples, 7.30%)</title><rect x="1098.0" y="515.0" width="86.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1101.0" y="526.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (567 samples, 7.30%)</title><rect x="1098.0" y="499.0" width="86.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1101.0" y="510.0">ru/mail/po..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (567 samples, 7.30%)</title><rect x="1098.0" y="483.0" width="86.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1101.0" y="494.0">org/rocksd..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (567 samples, 7.30%)</title><rect x="1098.0" y="467.0" width="86.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1101.0" y="478.0">org/rocksd..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (565 samples, 7.27%)</title><rect x="1098.3" y="451.0" width="85.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1101.3" y="462.0">Java_org_r..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (564 samples, 7.26%)</title><rect x="1098.4" y="435.0" width="85.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.4" y="446.0">rocksdb_pu..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.08%)</title><rect x="1099.2" y="419.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1102.2" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.05%)</title><rect x="1099.3" y="403.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.3" y="414.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="1099.3" y="387.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.3" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="1099.7" y="387.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.7" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="1099.7" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.7" y="382.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="1099.7" y="355.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.7" y="366.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="1099.7" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.7" y="350.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="1100.1" y="419.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1103.1" y="430.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.04%)</title><rect x="1100.1" y="403.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1103.1" y="414.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.04%)</title><rect x="1100.1" y="387.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1103.1" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="1100.1" y="371.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1103.1" y="382.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="1100.1" y="355.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1103.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (549 samples, 7.06%)</title><rect x="1100.6" y="419.0" width="83.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.6" y="430.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (547 samples, 7.04%)</title><rect x="1100.9" y="403.0" width="83.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.9" y="414.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (547 samples, 7.04%)</title><rect x="1100.9" y="387.0" width="83.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.9" y="398.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.03%)</title><rect x="1101.2" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1104.2" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (529 samples, 6.81%)</title><rect x="1101.5" y="371.0" width="80.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.5" y="382.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (527 samples, 6.78%)</title><rect x="1101.5" y="355.0" width="80.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.5" y="366.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (37 samples, 0.48%)</title><rect x="1102.1" y="339.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (36 samples, 0.46%)</title><rect x="1102.2" y="323.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (36 samples, 0.46%)</title><rect x="1102.2" y="307.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (36 samples, 0.46%)</title><rect x="1102.2" y="291.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (35 samples, 0.45%)</title><rect x="1102.4" y="275.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.4" y="286.0"></text>
</g>
<g>
<title>write (35 samples, 0.45%)</title><rect x="1102.4" y="259.0" width="5.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1105.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.03%)</title><rect x="1107.7" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (8 samples, 0.10%)</title><rect x="1108.2" y="339.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 0.09%)</title><rect x="1108.3" y="323.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.08%)</title><rect x="1108.5" y="307.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1111.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.08%)</title><rect x="1108.5" y="291.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (5 samples, 0.06%)</title><rect x="1108.5" y="275.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.04%)</title><rect x="1108.8" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="1108.9" y="243.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (26 samples, 0.33%)</title><rect x="1109.4" y="339.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (19 samples, 0.24%)</title><rect x="1110.4" y="323.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (18 samples, 0.23%)</title><rect x="1110.6" y="307.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (18 samples, 0.23%)</title><rect x="1110.6" y="291.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.6" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.05%)</title><rect x="1111.0" y="275.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1114.0" y="286.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.05%)</title><rect x="1111.0" y="259.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1114.0" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.05%)</title><rect x="1111.0" y="243.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1114.0" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="1111.0" y="227.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1114.0" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.05%)</title><rect x="1111.0" y="211.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1114.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (10 samples, 0.13%)</title><rect x="1111.6" y="275.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.12%)</title><rect x="1111.8" y="259.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.10%)</title><rect x="1112.0" y="243.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="1112.9" y="227.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1115.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.03%)</title><rect x="1112.9" y="211.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (233 samples, 3.00%)</title><rect x="1113.3" y="339.0" width="35.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.3" y="350.0">roc..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (12 samples, 0.15%)</title><rect x="1129.1" y="323.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1132.1" y="334.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (115 samples, 1.48%)</title><rect x="1131.1" y="323.0" width="17.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.1" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (106 samples, 1.36%)</title><rect x="1131.1" y="307.0" width="16.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1134.1" y="318.0"></text>
</g>
<g>
<title>_pthread_cond_wait (9 samples, 0.12%)</title><rect x="1147.2" y="307.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1150.2" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.05%)</title><rect x="1147.5" y="291.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1150.5" y="302.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.05%)</title><rect x="1147.5" y="275.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1150.5" y="286.0"></text>
</g>
<g>
<title>_pthread_testcancel (3 samples, 0.04%)</title><rect x="1148.1" y="291.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1151.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (185 samples, 2.38%)</title><rect x="1148.7" y="339.0" width="28.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.7" y="350.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (182 samples, 2.34%)</title><rect x="1148.8" y="323.0" width="27.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.8" y="334.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title><rect x="1157.2" y="307.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1160.2" y="318.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.03%)</title><rect x="1157.5" y="307.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1160.5" y="318.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (68 samples, 0.88%)</title><rect x="1158.1" y="307.0" width="10.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1161.1" y="318.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.03%)</title><rect x="1168.4" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.4" y="318.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.03%)</title><rect x="1168.4" y="291.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1171.4" y="302.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="1168.4" y="275.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1171.4" y="286.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (51 samples, 0.66%)</title><rect x="1168.7" y="307.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.7" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (44 samples, 0.57%)</title><rect x="1168.7" y="291.0" width="6.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1171.7" y="302.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.09%)</title><rect x="1175.4" y="291.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1178.4" y="302.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.05%)</title><rect x="1175.7" y="275.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1178.7" y="286.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.05%)</title><rect x="1175.7" y="259.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1178.7" y="270.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (2 samples, 0.03%)</title><rect x="1176.5" y="323.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.04%)</title><rect x="1176.8" y="339.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.03%)</title><rect x="1176.8" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.05%)</title><rect x="1177.2" y="339.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.04%)</title><rect x="1177.2" y="323.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.2" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.04%)</title><rect x="1177.2" y="307.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1180.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (22 samples, 0.28%)</title><rect x="1178.0" y="339.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="350.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (18 samples, 0.23%)</title><rect x="1178.3" y="323.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.23%)</title><rect x="1178.3" y="307.0" width="2.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1181.3" y="318.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.03%)</title><rect x="1181.0" y="323.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (2 samples, 0.03%)</title><rect x="1181.0" y="307.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1184.0" y="318.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.03%)</title><rect x="1181.0" y="291.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1184.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (9 samples, 0.12%)</title><rect x="1182.0" y="371.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.06%)</title><rect x="1182.3" y="355.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.06%)</title><rect x="1182.3" y="339.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.06%)</title><rect x="1182.3" y="323.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (5 samples, 0.06%)</title><rect x="1182.3" y="307.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="1182.4" y="291.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1185.4" y="302.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.05%)</title><rect x="1182.4" y="275.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1185.4" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="1182.6" y="259.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1185.6" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.03%)</title><rect x="1183.0" y="355.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.03%)</title><rect x="1183.0" y="339.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="350.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1183.0" y="323.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1186.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.05%)</title><rect x="1183.3" y="371.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.3" y="382.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.05%)</title><rect x="1183.3" y="355.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1186.3" y="366.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="1183.6" y="339.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1186.6" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="1183.6" y="323.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1186.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.03%)</title><rect x="1184.1" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.03%)</title><rect x="1184.1" y="531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1187.1" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.08%)</title><rect x="1184.4" y="579.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.06%)</title><rect x="1184.5" y="563.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1187.5" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.06%)</title><rect x="1184.5" y="547.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (26 samples, 0.33%)</title><rect x="1185.3" y="595.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1188.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (26 samples, 0.33%)</title><rect x="1185.3" y="579.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1188.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="1185.3" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1188.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1185.3" y="547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1188.3" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1185.3" y="531.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1188.3" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1185.3" y="515.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1188.3" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="1185.3" y="499.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1188.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (24 samples, 0.31%)</title><rect x="1185.6" y="563.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1188.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.31%)</title><rect x="1185.6" y="547.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1188.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.31%)</title><rect x="1185.6" y="531.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1188.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (21 samples, 0.27%)</title><rect x="1185.9" y="515.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1188.9" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (21 samples, 0.27%)</title><rect x="1185.9" y="499.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1188.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (21 samples, 0.27%)</title><rect x="1185.9" y="483.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1188.9" y="494.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.03%)</title><rect x="1186.1" y="467.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1189.1" y="478.0"></text>
</g>
<g>
<title>rpc_errlist (18 samples, 0.23%)</title><rect x="1186.4" y="467.0" width="2.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1189.4" y="478.0"></text>
</g>
<g>
<title>[RMI TCP Connection(9)-127.0.0.1 tid=29195] (5 samples, 0.06%)</title><rect x="1189.2" y="659.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1192.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (5 samples, 0.06%)</title><rect x="1189.2" y="643.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1192.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5 samples, 0.06%)</title><rect x="1189.2" y="627.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1192.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5 samples, 0.06%)</title><rect x="1189.2" y="611.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1192.2" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (5 samples, 0.06%)</title><rect x="1189.2" y="595.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1192.2" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (5 samples, 0.06%)</title><rect x="1189.2" y="579.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1192.2" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$102/1952040929.run (5 samples, 0.06%)</title><rect x="1189.2" y="563.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1192.2" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (5 samples, 0.06%)</title><rect x="1189.2" y="547.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1192.2" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (5 samples, 0.06%)</title><rect x="1189.2" y="531.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1192.2" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (5 samples, 0.06%)</title><rect x="1189.2" y="515.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1192.2" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (5 samples, 0.06%)</title><rect x="1189.2" y="499.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1192.2" y="510.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (4 samples, 0.05%)</title><rect x="1189.2" y="483.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1192.2" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.05%)</title><rect x="1189.2" y="467.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.2" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.05%)</title><rect x="1189.2" y="451.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1192.2" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (4 samples, 0.05%)</title><rect x="1189.2" y="435.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1192.2" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.03%)</title><rect x="1189.2" y="419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1192.2" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.03%)</title><rect x="1189.2" y="403.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1192.2" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (2 samples, 0.03%)</title><rect x="1189.2" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1192.2" y="398.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (2 samples, 0.03%)</title><rect x="1189.2" y="371.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.2" y="382.0"></text>
</g>
</g>
</svg>
