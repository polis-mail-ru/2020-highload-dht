<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (11,941 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=12547] (6 samples, 0.05%)</title><rect x="10.3" y="483.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.3" y="494.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.05%)</title><rect x="10.3" y="467.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.3" y="478.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.05%)</title><rect x="10.3" y="451.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.3" y="462.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.05%)</title><rect x="10.3" y="435.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.3" y="446.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.05%)</title><rect x="10.3" y="419.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.3" y="430.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (6 samples, 0.05%)</title><rect x="10.3" y="403.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.3" y="414.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (6 samples, 0.05%)</title><rect x="10.3" y="387.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.3" y="398.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (6 samples, 0.05%)</title><rect x="10.3" y="371.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.3" y="382.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.05%)</title><rect x="10.3" y="355.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.3" y="366.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.04%)</title><rect x="10.3" y="339.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.3" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.04%)</title><rect x="10.3" y="323.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.3" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.03%)</title><rect x="10.3" y="307.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.3" y="318.0"></text>
</g>
<g>
<title>[Java: VM Thread tid=18691] (8 samples, 0.07%)</title><rect x="11.3" y="483.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="14.3" y="494.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.07%)</title><rect x="11.3" y="467.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.3" y="478.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.07%)</title><rect x="11.3" y="451.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="14.3" y="462.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.07%)</title><rect x="11.3" y="435.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="14.3" y="446.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.07%)</title><rect x="11.3" y="419.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.3" y="430.0"></text>
</g>
<g>
<title>VMThread::run() (8 samples, 0.07%)</title><rect x="11.3" y="403.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.3" y="414.0"></text>
</g>
<g>
<title>VMThread::loop() (8 samples, 0.07%)</title><rect x="11.3" y="387.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.3" y="398.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.03%)</title><rect x="11.5" y="371.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.5" y="382.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (3 samples, 0.03%)</title><rect x="11.5" y="355.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=40707] (1,103 samples, 9.24%)</title><rect x="12.1" y="483.0" width="109.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="15.1" y="494.0">[NIO Selector..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,102 samples, 9.23%)</title><rect x="12.2" y="467.0" width="108.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.2" y="478.0">one/nio/serve..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (106 samples, 0.89%)</title><rect x="12.2" y="451.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (103 samples, 0.86%)</title><rect x="12.5" y="435.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (103 samples, 0.86%)</title><rect x="12.5" y="419.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (102 samples, 0.85%)</title><rect x="12.6" y="403.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (95 samples, 0.80%)</title><rect x="12.7" y="387.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.7" y="398.0"></text>
</g>
<g>
<title>kevent (89 samples, 0.75%)</title><rect x="13.3" y="371.0" width="8.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="16.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (996 samples, 8.34%)</title><rect x="22.6" y="451.0" width="98.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.6" y="462.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (996 samples, 8.34%)</title><rect x="22.6" y="435.0" width="98.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.6" y="446.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (968 samples, 8.11%)</title><rect x="22.6" y="419.0" width="95.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.6" y="430.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (959 samples, 8.03%)</title><rect x="22.7" y="403.0" width="94.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.7" y="414.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (959 samples, 8.03%)</title><rect x="22.7" y="387.0" width="94.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.7" y="398.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (957 samples, 8.01%)</title><rect x="22.7" y="371.0" width="94.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.7" y="382.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (54 samples, 0.45%)</title><rect x="22.7" y="355.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (50 samples, 0.42%)</title><rect x="23.1" y="339.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.1" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (48 samples, 0.40%)</title><rect x="23.3" y="323.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.3" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (48 samples, 0.40%)</title><rect x="23.3" y="307.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (48 samples, 0.40%)</title><rect x="23.3" y="291.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.3" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (48 samples, 0.40%)</title><rect x="23.3" y="275.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (47 samples, 0.39%)</title><rect x="23.4" y="259.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (45 samples, 0.38%)</title><rect x="23.6" y="243.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (45 samples, 0.38%)</title><rect x="23.6" y="227.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (45 samples, 0.38%)</title><rect x="23.6" y="211.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (44 samples, 0.37%)</title><rect x="23.7" y="195.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (43 samples, 0.36%)</title><rect x="23.8" y="179.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.8" y="190.0"></text>
</g>
<g>
<title>write (40 samples, 0.33%)</title><rect x="24.1" y="163.0" width="4.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="27.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (901 samples, 7.55%)</title><rect x="28.3" y="355.0" width="89.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.3" y="366.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (898 samples, 7.52%)</title><rect x="28.6" y="339.0" width="88.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.6" y="350.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (898 samples, 7.52%)</title><rect x="28.6" y="323.0" width="88.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.6" y="334.0">ru/mail/po..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (896 samples, 7.50%)</title><rect x="28.6" y="307.0" width="88.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.6" y="318.0">org/rocksd..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (896 samples, 7.50%)</title><rect x="28.6" y="291.0" width="88.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.6" y="302.0">org/rocksd..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (890 samples, 7.45%)</title><rect x="29.2" y="275.0" width="87.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="32.2" y="286.0">Java_org_r..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (887 samples, 7.43%)</title><rect x="29.5" y="259.0" width="87.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="32.5" y="270.0">rocksdb_pu..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="29.8" y="243.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="32.8" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="30.1" y="243.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="33.1" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.07%)</title><rect x="30.4" y="243.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="33.4" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.05%)</title><rect x="31.1" y="243.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="34.1" y="254.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.05%)</title><rect x="31.1" y="227.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="34.1" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.05%)</title><rect x="31.1" y="211.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="34.1" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.04%)</title><rect x="31.2" y="195.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="34.2" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.04%)</title><rect x="31.2" y="179.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="34.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (862 samples, 7.22%)</title><rect x="31.7" y="243.0" width="85.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="34.7" y="254.0">rocksdb::C..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (862 samples, 7.22%)</title><rect x="31.7" y="227.0" width="85.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="34.7" y="238.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (862 samples, 7.22%)</title><rect x="31.7" y="211.0" width="85.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="34.7" y="222.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (846 samples, 7.08%)</title><rect x="31.7" y="195.0" width="83.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="34.7" y="206.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (845 samples, 7.08%)</title><rect x="31.7" y="179.0" width="83.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="34.7" y="190.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (35 samples, 0.29%)</title><rect x="32.5" y="163.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="35.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (35 samples, 0.29%)</title><rect x="32.5" y="147.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="35.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (35 samples, 0.29%)</title><rect x="32.5" y="131.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="35.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (34 samples, 0.28%)</title><rect x="32.5" y="115.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="35.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (33 samples, 0.28%)</title><rect x="32.6" y="99.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="35.6" y="110.0"></text>
</g>
<g>
<title>write (32 samples, 0.27%)</title><rect x="32.7" y="83.0" width="3.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="35.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (7 samples, 0.06%)</title><rect x="36.1" y="163.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="39.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="36.1" y="147.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="39.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="36.1" y="131.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="39.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="36.1" y="115.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="39.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (7 samples, 0.06%)</title><rect x="36.1" y="99.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="39.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.04%)</title><rect x="36.3" y="83.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="39.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (29 samples, 0.24%)</title><rect x="36.8" y="163.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="39.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (23 samples, 0.19%)</title><rect x="37.4" y="147.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="40.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (22 samples, 0.18%)</title><rect x="37.5" y="131.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="40.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (22 samples, 0.18%)</title><rect x="37.5" y="115.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="40.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (18 samples, 0.15%)</title><rect x="37.7" y="99.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="40.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.13%)</title><rect x="38.0" y="83.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="41.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.12%)</title><rect x="38.1" y="67.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="41.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.04%)</title><rect x="39.0" y="51.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="42.0" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (253 samples, 2.12%)</title><rect x="39.7" y="163.0" width="25.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="42.7" y="174.0">r..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (67 samples, 0.56%)</title><rect x="48.8" y="147.0" width="6.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="51.8" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (94 samples, 0.79%)</title><rect x="55.5" y="147.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="58.5" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (86 samples, 0.72%)</title><rect x="55.5" y="131.0" width="8.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="58.5" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.07%)</title><rect x="64.0" y="131.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="67.0" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.03%)</title><rect x="64.4" y="115.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="67.4" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.03%)</title><rect x="64.4" y="99.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="67.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (496 samples, 4.15%)</title><rect x="64.7" y="163.0" width="49.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="67.7" y="174.0">rocks..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (495 samples, 4.15%)</title><rect x="64.8" y="147.0" width="49.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="67.8" y="158.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (442 samples, 3.70%)</title><rect x="69.7" y="131.0" width="43.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="72.7" y="142.0">si_m..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.03%)</title><rect x="113.5" y="131.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="116.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.03%)</title><rect x="114.0" y="163.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="117.0" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.03%)</title><rect x="114.0" y="147.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="117.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.03%)</title><rect x="114.0" y="131.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="117.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (6 samples, 0.05%)</title><rect x="114.5" y="163.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="117.5" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.04%)</title><rect x="114.6" y="147.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="117.6" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.04%)</title><rect x="114.6" y="131.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="117.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.06%)</title><rect x="115.3" y="195.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="118.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="115.4" y="179.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="118.4" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.03%)</title><rect x="115.7" y="179.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="118.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="116.0" y="195.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="119.0" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.03%)</title><rect x="116.0" y="179.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="119.0" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.03%)</title><rect x="116.3" y="179.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="119.3" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.03%)</title><rect x="117.5" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (28 samples, 0.23%)</title><rect x="118.3" y="419.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.3" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (26 samples, 0.22%)</title><rect x="118.5" y="403.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="121.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (26 samples, 0.22%)</title><rect x="118.5" y="387.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.22%)</title><rect x="118.5" y="371.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.22%)</title><rect x="118.5" y="355.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (24 samples, 0.20%)</title><rect x="118.5" y="339.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (24 samples, 0.20%)</title><rect x="118.5" y="323.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (21 samples, 0.18%)</title><rect x="118.8" y="307.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="121.8" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (18 samples, 0.15%)</title><rect x="119.1" y="291.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="122.1" y="302.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=39939] (1,841 samples, 15.42%)</title><rect x="121.1" y="483.0" width="181.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="124.1" y="494.0">[NIO Selector #1 tid=39..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,841 samples, 15.42%)</title><rect x="121.1" y="467.0" width="181.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.1" y="478.0">one/nio/server/Selector..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (111 samples, 0.93%)</title><rect x="121.2" y="451.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (108 samples, 0.90%)</title><rect x="121.5" y="435.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="124.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (108 samples, 0.90%)</title><rect x="121.5" y="419.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (106 samples, 0.89%)</title><rect x="121.6" y="403.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="124.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (95 samples, 0.80%)</title><rect x="121.6" y="387.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.6" y="398.0"></text>
</g>
<g>
<title>kevent (88 samples, 0.74%)</title><rect x="122.3" y="371.0" width="8.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="125.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.04%)</title><rect x="131.0" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.03%)</title><rect x="131.2" y="371.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.03%)</title><rect x="131.2" y="355.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="131.2" y="339.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="134.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.03%)</title><rect x="131.2" y="323.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.03%)</title><rect x="131.5" y="387.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.5" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.03%)</title><rect x="131.5" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="134.5" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.03%)</title><rect x="131.5" y="355.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.5" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.03%)</title><rect x="131.5" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="134.5" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.03%)</title><rect x="131.5" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.5" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,729 samples, 14.48%)</title><rect x="132.1" y="451.0" width="170.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.1" y="462.0">one/nio/net/Session.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,729 samples, 14.48%)</title><rect x="132.1" y="435.0" width="170.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.1" y="446.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,667 samples, 13.96%)</title><rect x="132.1" y="419.0" width="164.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.1" y="430.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,640 samples, 13.73%)</title><rect x="132.8" y="403.0" width="162.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.8" y="414.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,640 samples, 13.73%)</title><rect x="132.8" y="387.0" width="162.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="135.8" y="398.0">one/nio/http/HttpServ..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,634 samples, 13.68%)</title><rect x="132.8" y="371.0" width="161.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="135.8" y="382.0">RequestHandler0_entit..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (166 samples, 1.39%)</title><rect x="132.9" y="355.0" width="16.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.04%)</title><rect x="133.1" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="136.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.04%)</title><rect x="133.1" y="323.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="136.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.04%)</title><rect x="133.1" y="307.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.1" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.04%)</title><rect x="133.1" y="291.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="136.1" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (159 samples, 1.33%)</title><rect x="133.6" y="339.0" width="15.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="136.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.06%)</title><rect x="133.6" y="323.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="136.6" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.03%)</title><rect x="134.0" y="307.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.0" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="134.0" y="291.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.0" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="134.0" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="137.0" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.03%)</title><rect x="134.0" y="259.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="137.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="134.0" y="243.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.0" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (152 samples, 1.27%)</title><rect x="134.3" y="323.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="137.3" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (152 samples, 1.27%)</title><rect x="134.3" y="307.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="137.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (151 samples, 1.26%)</title><rect x="134.4" y="291.0" width="14.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="137.4" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (151 samples, 1.26%)</title><rect x="134.4" y="275.0" width="14.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="137.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (149 samples, 1.25%)</title><rect x="134.6" y="259.0" width="14.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="137.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (147 samples, 1.23%)</title><rect x="134.8" y="243.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="137.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (146 samples, 1.22%)</title><rect x="134.9" y="227.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="137.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (146 samples, 1.22%)</title><rect x="134.9" y="211.0" width="14.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (146 samples, 1.22%)</title><rect x="134.9" y="195.0" width="14.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="137.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (140 samples, 1.17%)</title><rect x="135.5" y="179.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="138.5" y="190.0"></text>
</g>
<g>
<title>write (135 samples, 1.13%)</title><rect x="136.0" y="163.0" width="13.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="139.0" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.04%)</title><rect x="149.3" y="355.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (1,461 samples, 12.24%)</title><rect x="149.9" y="355.0" width="144.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.9" y="366.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="150.1" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="153.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="150.1" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="150.1" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="150.1" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="153.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (1,454 samples, 12.18%)</title><rect x="150.6" y="339.0" width="143.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.6" y="350.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.03%)</title><rect x="150.6" y="323.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.03%)</title><rect x="150.6" y="307.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.6" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="150.6" y="291.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,450 samples, 12.14%)</title><rect x="151.0" y="323.0" width="143.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.0" y="334.0">ru/mail/polis/dao/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,440 samples, 12.06%)</title><rect x="151.0" y="307.0" width="142.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.0" y="318.0">org/rocksdb/RocksD..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,440 samples, 12.06%)</title><rect x="151.0" y="291.0" width="142.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="154.0" y="302.0">org/rocksdb/RocksD..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,429 samples, 11.97%)</title><rect x="152.1" y="275.0" width="141.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="155.1" y="286.0">Java_org_rocksdb_R..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,425 samples, 11.93%)</title><rect x="152.5" y="259.0" width="140.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="155.5" y="270.0">rocksdb_put_helper..</text>
</g>
<g>
<title>free_tiny (7 samples, 0.06%)</title><rect x="153.1" y="243.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="156.1" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (5 samples, 0.04%)</title><rect x="153.3" y="227.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="156.3" y="238.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.03%)</title><rect x="153.5" y="211.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="156.5" y="222.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.03%)</title><rect x="153.8" y="243.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="156.8" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.08%)</title><rect x="154.1" y="243.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="157.1" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.04%)</title><rect x="155.1" y="243.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="158.1" y="254.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.04%)</title><rect x="155.1" y="227.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="158.1" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.03%)</title><rect x="155.1" y="211.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="158.1" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="155.1" y="195.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="158.1" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="155.2" y="179.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="158.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,393 samples, 11.67%)</title><rect x="155.6" y="243.0" width="137.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="158.6" y="254.0">rocksdb::Compacte..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,392 samples, 11.66%)</title><rect x="155.7" y="227.0" width="137.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="158.7" y="238.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,390 samples, 11.64%)</title><rect x="155.7" y="211.0" width="137.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="158.7" y="222.0">rocksdb::DB::Put(..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,365 samples, 11.43%)</title><rect x="155.9" y="195.0" width="134.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="158.9" y="206.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,359 samples, 11.38%)</title><rect x="156.0" y="179.0" width="134.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="159.0" y="190.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.03%)</title><rect x="157.8" y="163.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="160.8" y="174.0"></text>
</g>
<g>
<title>pthread_cond_destroy (3 samples, 0.03%)</title><rect x="158.2" y="163.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="161.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (133 samples, 1.11%)</title><rect x="158.7" y="163.0" width="13.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="161.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (133 samples, 1.11%)</title><rect x="158.7" y="147.0" width="13.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="161.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (131 samples, 1.10%)</title><rect x="158.9" y="131.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="161.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (119 samples, 1.00%)</title><rect x="158.9" y="115.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="161.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (117 samples, 0.98%)</title><rect x="159.1" y="99.0" width="11.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="162.1" y="110.0"></text>
</g>
<g>
<title>write (117 samples, 0.98%)</title><rect x="159.1" y="83.0" width="11.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="162.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (6 samples, 0.05%)</title><rect x="170.7" y="115.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="173.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (6 samples, 0.05%)</title><rect x="171.3" y="115.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="174.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.03%)</title><rect x="171.3" y="99.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="174.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="171.6" y="99.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="174.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (20 samples, 0.17%)</title><rect x="172.2" y="163.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="175.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (17 samples, 0.14%)</title><rect x="172.5" y="147.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="175.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.13%)</title><rect x="172.7" y="131.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="175.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (15 samples, 0.13%)</title><rect x="172.7" y="115.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="175.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (14 samples, 0.12%)</title><rect x="172.8" y="99.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="175.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.08%)</title><rect x="173.2" y="83.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="176.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="173.7" y="67.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="176.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (55 samples, 0.46%)</title><rect x="174.1" y="163.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="177.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="175.6" y="147.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="178.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (34 samples, 0.28%)</title><rect x="176.2" y="147.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="179.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (30 samples, 0.25%)</title><rect x="176.6" y="131.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="179.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.23%)</title><rect x="176.8" y="115.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="179.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (26 samples, 0.22%)</title><rect x="177.0" y="99.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="180.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (22 samples, 0.18%)</title><rect x="177.4" y="83.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="180.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.17%)</title><rect x="177.6" y="67.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="180.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.06%)</title><rect x="178.8" y="51.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="181.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="179.0" y="35.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="182.0" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (469 samples, 3.93%)</title><rect x="179.7" y="163.0" width="46.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="182.7" y="174.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (70 samples, 0.59%)</title><rect x="198.4" y="147.0" width="7.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="201.4" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (207 samples, 1.73%)</title><rect x="205.5" y="147.0" width="20.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="208.5" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (193 samples, 1.62%)</title><rect x="205.6" y="131.0" width="19.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="208.6" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (12 samples, 0.10%)</title><rect x="224.6" y="131.0" width="1.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="227.6" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.05%)</title><rect x="225.1" y="115.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="228.1" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.05%)</title><rect x="225.1" y="99.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="228.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (594 samples, 4.97%)</title><rect x="226.0" y="163.0" width="58.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="229.0" y="174.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (589 samples, 4.93%)</title><rect x="226.2" y="147.0" width="58.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="229.2" y="158.0">rocksd..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (480 samples, 4.02%)</title><rect x="234.0" y="131.0" width="47.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="237.0" y="142.0">si_m..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.03%)</title><rect x="281.5" y="131.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="284.5" y="142.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.03%)</title><rect x="281.6" y="115.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="284.6" y="126.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (3 samples, 0.03%)</title><rect x="281.6" y="99.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="284.6" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (25 samples, 0.21%)</title><rect x="281.9" y="131.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="284.9" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (25 samples, 0.21%)</title><rect x="281.9" y="115.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="284.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (17 samples, 0.14%)</title><rect x="284.8" y="163.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="287.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (13 samples, 0.11%)</title><rect x="284.9" y="147.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="287.9" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.09%)</title><rect x="284.9" y="131.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="287.9" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.09%)</title><rect x="284.9" y="115.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="287.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.03%)</title><rect x="286.5" y="163.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="289.5" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.03%)</title><rect x="286.5" y="147.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="289.5" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.03%)</title><rect x="286.5" y="131.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="289.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (26 samples, 0.22%)</title><rect x="287.1" y="163.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="290.1" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (24 samples, 0.20%)</title><rect x="287.2" y="147.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="290.2" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (23 samples, 0.19%)</title><rect x="287.2" y="131.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="290.2" y="142.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.03%)</title><rect x="290.0" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="293.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (3 samples, 0.03%)</title><rect x="290.3" y="179.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="293.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.06%)</title><rect x="290.8" y="195.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="293.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.03%)</title><rect x="291.0" y="179.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="294.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="291.5" y="195.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="294.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.03%)</title><rect x="291.7" y="179.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="294.7" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="291.7" y="163.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="294.7" y="174.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="291.7" y="147.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="294.7" y="158.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="291.7" y="131.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="294.7" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="291.7" y="115.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="294.7" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="291.7" y="99.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="294.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.04%)</title><rect x="292.2" y="195.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="295.2" y="206.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="292.3" y="179.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="295.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArray (4 samples, 0.03%)</title><rect x="293.3" y="307.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.3" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.03%)</title><rect x="293.3" y="291.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.3" y="302.0"></text>
</g>
<g>
<title>java/lang/Byte.toUnsignedInt (4 samples, 0.03%)</title><rect x="293.3" y="275.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (6 samples, 0.05%)</title><rect x="293.7" y="307.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.05%)</title><rect x="294.3" y="371.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.05%)</title><rect x="294.3" y="355.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.05%)</title><rect x="294.3" y="339.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.05%)</title><rect x="294.3" y="323.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (6 samples, 0.05%)</title><rect x="294.3" y="307.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8 samples, 0.07%)</title><rect x="294.9" y="403.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.04%)</title><rect x="295.0" y="387.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.04%)</title><rect x="295.0" y="371.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="298.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.05%)</title><rect x="295.9" y="403.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="296.2" y="387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="299.2" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="296.2" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.03%)</title><rect x="296.5" y="403.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.5" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.03%)</title><rect x="296.5" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="299.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (62 samples, 0.52%)</title><rect x="296.9" y="419.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (60 samples, 0.50%)</title><rect x="297.1" y="403.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (60 samples, 0.50%)</title><rect x="297.1" y="387.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (60 samples, 0.50%)</title><rect x="297.1" y="371.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="300.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (60 samples, 0.50%)</title><rect x="297.1" y="355.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (57 samples, 0.48%)</title><rect x="297.1" y="339.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="300.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (57 samples, 0.48%)</title><rect x="297.1" y="323.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (55 samples, 0.46%)</title><rect x="297.3" y="307.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.3" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (51 samples, 0.43%)</title><rect x="297.7" y="291.0" width="5.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="300.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.03%)</title><rect x="302.7" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.7" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.03%)</title><rect x="302.7" y="323.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.7" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.03%)</title><rect x="302.7" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.7" y="318.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25603] (1,663 samples, 13.93%)</title><rect x="303.0" y="483.0" width="164.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="306.0" y="494.0">[NIO Selector #2 tid=..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,663 samples, 13.93%)</title><rect x="303.0" y="467.0" width="164.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.0" y="478.0">one/nio/server/Select..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (113 samples, 0.95%)</title><rect x="303.4" y="451.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.4" y="462.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.03%)</title><rect x="303.4" y="435.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="306.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (109 samples, 0.91%)</title><rect x="303.8" y="435.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="306.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (109 samples, 0.91%)</title><rect x="303.8" y="419.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="306.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (109 samples, 0.91%)</title><rect x="303.8" y="403.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (95 samples, 0.80%)</title><rect x="303.9" y="387.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="306.9" y="398.0"></text>
</g>
<g>
<title>kevent (93 samples, 0.78%)</title><rect x="304.1" y="371.0" width="9.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="307.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.05%)</title><rect x="313.3" y="387.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.03%)</title><rect x="313.6" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.04%)</title><rect x="314.0" y="387.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.0" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.04%)</title><rect x="314.0" y="371.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.0" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.04%)</title><rect x="314.0" y="355.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.0" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.04%)</title><rect x="314.0" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="317.0" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.04%)</title><rect x="314.0" y="323.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.0" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,546 samples, 12.95%)</title><rect x="314.6" y="451.0" width="152.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.6" y="462.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,546 samples, 12.95%)</title><rect x="314.6" y="435.0" width="152.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.6" y="446.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,505 samples, 12.60%)</title><rect x="314.6" y="419.0" width="148.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.6" y="430.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,485 samples, 12.44%)</title><rect x="315.2" y="403.0" width="146.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.2" y="414.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,485 samples, 12.44%)</title><rect x="315.2" y="387.0" width="146.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.2" y="398.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,479 samples, 12.39%)</title><rect x="315.2" y="371.0" width="146.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.2" y="382.0">RequestHandler0_en..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (107 samples, 0.90%)</title><rect x="315.2" y="355.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="318.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.03%)</title><rect x="315.5" y="339.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="318.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="315.5" y="323.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="318.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.03%)</title><rect x="315.5" y="307.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="318.5" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="315.5" y="291.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="318.5" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (101 samples, 0.85%)</title><rect x="315.7" y="339.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="318.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.03%)</title><rect x="315.7" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="318.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (98 samples, 0.82%)</title><rect x="316.0" y="323.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.0" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (98 samples, 0.82%)</title><rect x="316.0" y="307.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="319.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (98 samples, 0.82%)</title><rect x="316.0" y="291.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.0" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (98 samples, 0.82%)</title><rect x="316.0" y="275.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="319.0" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="316.0" y="259.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.0" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="316.0" y="243.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="316.0" y="227.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="319.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="316.0" y="211.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="319.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (95 samples, 0.80%)</title><rect x="316.3" y="259.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (94 samples, 0.79%)</title><rect x="316.4" y="243.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (94 samples, 0.79%)</title><rect x="316.4" y="227.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (94 samples, 0.79%)</title><rect x="316.4" y="211.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (94 samples, 0.79%)</title><rect x="316.4" y="195.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (93 samples, 0.78%)</title><rect x="316.5" y="179.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.5" y="190.0"></text>
</g>
<g>
<title>write (88 samples, 0.74%)</title><rect x="317.0" y="163.0" width="8.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="320.0" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.03%)</title><rect x="325.7" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (1,368 samples, 11.46%)</title><rect x="326.1" y="355.0" width="135.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.1" y="366.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.03%)</title><rect x="326.6" y="339.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="329.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.03%)</title><rect x="326.6" y="323.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.6" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="326.6" y="307.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="326.6" y="291.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="329.6" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="326.7" y="275.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="329.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (1,358 samples, 11.37%)</title><rect x="327.1" y="339.0" width="134.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.1" y="350.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="327.1" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="327.1" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.1" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="327.1" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,355 samples, 11.35%)</title><rect x="327.4" y="323.0" width="133.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="330.4" y="334.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,351 samples, 11.31%)</title><rect x="327.4" y="307.0" width="133.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.4" y="318.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,351 samples, 11.31%)</title><rect x="327.4" y="291.0" width="133.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.4" y="302.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,349 samples, 11.30%)</title><rect x="327.6" y="275.0" width="133.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="330.6" y="286.0">Java_org_rocksdb_..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,346 samples, 11.27%)</title><rect x="327.9" y="259.0" width="133.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="330.9" y="270.0">rocksdb_put_helpe..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="328.7" y="243.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="331.7" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.03%)</title><rect x="329.2" y="243.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="332.2" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.06%)</title><rect x="329.7" y="243.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="332.7" y="254.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.06%)</title><rect x="329.7" y="227.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="332.7" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.05%)</title><rect x="329.7" y="211.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="332.7" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (6 samples, 0.05%)</title><rect x="329.7" y="195.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="332.7" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.04%)</title><rect x="329.8" y="179.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="332.8" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="330.0" y="163.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="333.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,321 samples, 11.06%)</title><rect x="330.4" y="243.0" width="130.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="333.4" y="254.0">rocksdb::Compact..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,321 samples, 11.06%)</title><rect x="330.4" y="227.0" width="130.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="333.4" y="238.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,321 samples, 11.06%)</title><rect x="330.4" y="211.0" width="130.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="333.4" y="222.0">rocksdb::DB::Put..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,293 samples, 10.83%)</title><rect x="330.8" y="195.0" width="127.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="333.8" y="206.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,291 samples, 10.81%)</title><rect x="330.9" y="179.0" width="127.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="333.9" y="190.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.03%)</title><rect x="331.8" y="163.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="334.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (68 samples, 0.57%)</title><rect x="332.2" y="163.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="335.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (64 samples, 0.54%)</title><rect x="332.4" y="147.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="335.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (63 samples, 0.53%)</title><rect x="332.5" y="131.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="335.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (58 samples, 0.49%)</title><rect x="332.5" y="115.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="335.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (56 samples, 0.47%)</title><rect x="332.7" y="99.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="335.7" y="110.0"></text>
</g>
<g>
<title>write (56 samples, 0.47%)</title><rect x="332.7" y="83.0" width="5.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="335.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.03%)</title><rect x="338.3" y="115.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="341.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (12 samples, 0.10%)</title><rect x="339.1" y="163.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="342.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (11 samples, 0.09%)</title><rect x="339.2" y="147.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="342.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.09%)</title><rect x="339.2" y="131.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="342.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.09%)</title><rect x="339.2" y="115.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="342.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (9 samples, 0.08%)</title><rect x="339.4" y="99.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="342.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.07%)</title><rect x="339.5" y="83.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="342.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.03%)</title><rect x="339.9" y="67.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="342.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (42 samples, 0.35%)</title><rect x="340.3" y="163.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="343.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.04%)</title><rect x="340.6" y="147.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="343.6" y="158.0"></text>
</g>
<g>
<title>free (3 samples, 0.03%)</title><rect x="340.6" y="131.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="343.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (33 samples, 0.28%)</title><rect x="341.1" y="147.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="344.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (30 samples, 0.25%)</title><rect x="341.4" y="131.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="344.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.23%)</title><rect x="341.6" y="115.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="344.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (22 samples, 0.18%)</title><rect x="341.9" y="99.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="344.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (18 samples, 0.15%)</title><rect x="342.3" y="83.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="345.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.03%)</title><rect x="342.4" y="67.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="345.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.10%)</title><rect x="342.9" y="67.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="345.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.03%)</title><rect x="343.2" y="51.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="346.2" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.04%)</title><rect x="343.5" y="51.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="346.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (418 samples, 3.50%)</title><rect x="344.5" y="163.0" width="41.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="347.5" y="174.0">roc..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (69 samples, 0.58%)</title><rect x="361.3" y="147.0" width="6.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="364.3" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (177 samples, 1.48%)</title><rect x="368.1" y="147.0" width="17.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="371.1" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (170 samples, 1.42%)</title><rect x="368.2" y="131.0" width="16.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="371.2" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.05%)</title><rect x="385.0" y="131.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="388.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (703 samples, 5.89%)</title><rect x="385.8" y="163.0" width="69.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="388.8" y="174.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (701 samples, 5.87%)</title><rect x="385.9" y="147.0" width="69.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="388.9" y="158.0">rocksdb..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (586 samples, 4.91%)</title><rect x="394.3" y="131.0" width="57.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="397.3" y="142.0">si_mod..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (4 samples, 0.03%)</title><rect x="452.2" y="131.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="455.2" y="142.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.03%)</title><rect x="452.2" y="115.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="455.2" y="126.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (24 samples, 0.20%)</title><rect x="452.6" y="131.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="455.6" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (23 samples, 0.19%)</title><rect x="452.6" y="115.0" width="2.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="455.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (9 samples, 0.08%)</title><rect x="455.3" y="163.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="458.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (8 samples, 0.07%)</title><rect x="455.3" y="147.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="458.3" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.05%)</title><rect x="455.5" y="131.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="458.5" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.05%)</title><rect x="455.5" y="115.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="458.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (19 samples, 0.16%)</title><rect x="456.3" y="163.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="459.3" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (13 samples, 0.11%)</title><rect x="456.6" y="147.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="459.6" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.11%)</title><rect x="456.6" y="131.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="459.6" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (3 samples, 0.03%)</title><rect x="457.8" y="147.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="460.8" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.03%)</title><rect x="457.8" y="131.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="460.8" y="142.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.03%)</title><rect x="457.8" y="115.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="460.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.04%)</title><rect x="458.7" y="195.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="461.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="458.7" y="179.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="461.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (10 samples, 0.08%)</title><rect x="459.2" y="195.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="462.2" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (6 samples, 0.05%)</title><rect x="459.3" y="179.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="462.3" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.03%)</title><rect x="459.5" y="163.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="462.5" y="174.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.03%)</title><rect x="459.5" y="147.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="462.5" y="158.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.03%)</title><rect x="459.5" y="131.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="462.5" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="459.5" y="115.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="462.5" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.03%)</title><rect x="459.5" y="99.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="462.5" y="110.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (3 samples, 0.03%)</title><rect x="459.9" y="179.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="462.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.04%)</title><rect x="460.2" y="195.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="463.2" y="206.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="460.3" y="179.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="463.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (4 samples, 0.03%)</title><rect x="460.9" y="307.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="463.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.05%)</title><rect x="461.3" y="371.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="464.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.05%)</title><rect x="461.3" y="355.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.04%)</title><rect x="461.4" y="339.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="464.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.04%)</title><rect x="461.4" y="323.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.4" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.04%)</title><rect x="461.4" y="307.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 0.08%)</title><rect x="461.9" y="403.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.04%)</title><rect x="462.3" y="387.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.3" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (41 samples, 0.34%)</title><rect x="463.3" y="419.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="466.3" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (41 samples, 0.34%)</title><rect x="463.3" y="403.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (41 samples, 0.34%)</title><rect x="463.3" y="387.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="466.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 0.34%)</title><rect x="463.3" y="371.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 0.34%)</title><rect x="463.3" y="355.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="466.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (38 samples, 0.32%)</title><rect x="463.3" y="339.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="466.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (38 samples, 0.32%)</title><rect x="463.3" y="323.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="466.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (37 samples, 0.31%)</title><rect x="463.4" y="307.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="466.4" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (34 samples, 0.28%)</title><rect x="463.7" y="291.0" width="3.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="466.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.03%)</title><rect x="467.0" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.0" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.03%)</title><rect x="467.0" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="470.0" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.03%)</title><rect x="467.0" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="470.0" y="318.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=38915] (1,606 samples, 13.45%)</title><rect x="467.3" y="483.0" width="158.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="470.3" y="494.0">[NIO Selector #3 tid..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,606 samples, 13.45%)</title><rect x="467.3" y="467.0" width="158.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.3" y="478.0">one/nio/server/Selec..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (104 samples, 0.87%)</title><rect x="467.4" y="451.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (100 samples, 0.84%)</title><rect x="467.8" y="435.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (100 samples, 0.84%)</title><rect x="467.8" y="419.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="470.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (100 samples, 0.84%)</title><rect x="467.8" y="403.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (95 samples, 0.80%)</title><rect x="467.8" y="387.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.8" y="398.0"></text>
</g>
<g>
<title>kevent (88 samples, 0.74%)</title><rect x="468.5" y="371.0" width="8.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="471.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.03%)</title><rect x="477.4" y="387.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.4" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.03%)</title><rect x="477.4" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.4" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.03%)</title><rect x="477.4" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.4" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.03%)</title><rect x="477.4" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="480.4" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.03%)</title><rect x="477.4" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.4" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,501 samples, 12.57%)</title><rect x="477.7" y="451.0" width="148.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.7" y="462.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,500 samples, 12.56%)</title><rect x="477.8" y="435.0" width="148.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.8" y="446.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,457 samples, 12.20%)</title><rect x="477.8" y="419.0" width="144.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.8" y="430.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,434 samples, 12.01%)</title><rect x="478.5" y="403.0" width="141.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.5" y="414.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,434 samples, 12.01%)</title><rect x="478.5" y="387.0" width="141.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="481.5" y="398.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,432 samples, 11.99%)</title><rect x="478.5" y="371.0" width="141.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.5" y="382.0">RequestHandler0_en..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (109 samples, 0.91%)</title><rect x="478.7" y="355.0" width="10.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="481.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (105 samples, 0.88%)</title><rect x="478.9" y="339.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="481.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.07%)</title><rect x="478.9" y="323.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="481.9" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (97 samples, 0.81%)</title><rect x="479.7" y="323.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="482.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (97 samples, 0.81%)</title><rect x="479.7" y="307.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.7" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (97 samples, 0.81%)</title><rect x="479.7" y="291.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="482.7" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (97 samples, 0.81%)</title><rect x="479.7" y="275.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="482.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (95 samples, 0.80%)</title><rect x="479.9" y="259.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (95 samples, 0.80%)</title><rect x="479.9" y="243.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (95 samples, 0.80%)</title><rect x="479.9" y="227.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="482.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (95 samples, 0.80%)</title><rect x="479.9" y="211.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="482.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (92 samples, 0.77%)</title><rect x="480.2" y="195.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="483.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (89 samples, 0.75%)</title><rect x="480.5" y="179.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.5" y="190.0"></text>
</g>
<g>
<title>write (84 samples, 0.70%)</title><rect x="481.0" y="163.0" width="8.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="484.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (1,320 samples, 11.05%)</title><rect x="489.6" y="355.0" width="130.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="492.6" y="366.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (1,314 samples, 11.00%)</title><rect x="490.2" y="339.0" width="129.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="493.2" y="350.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,313 samples, 11.00%)</title><rect x="490.3" y="323.0" width="129.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.3" y="334.0">ru/mail/polis/da..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,309 samples, 10.96%)</title><rect x="490.3" y="307.0" width="129.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="493.3" y="318.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,309 samples, 10.96%)</title><rect x="490.3" y="291.0" width="129.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="493.3" y="302.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,301 samples, 10.90%)</title><rect x="491.1" y="275.0" width="128.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="494.1" y="286.0">Java_org_rocksdb..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,300 samples, 10.89%)</title><rect x="491.2" y="259.0" width="128.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="494.2" y="270.0">rocksdb_put_help..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.03%)</title><rect x="491.3" y="243.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="494.3" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.04%)</title><rect x="492.0" y="243.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="495.0" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.07%)</title><rect x="492.5" y="243.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="495.5" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.03%)</title><rect x="492.8" y="227.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="495.8" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.03%)</title><rect x="492.8" y="211.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="495.8" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.03%)</title><rect x="492.8" y="195.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="495.8" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.03%)</title><rect x="492.9" y="179.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="495.9" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.05%)</title><rect x="493.3" y="243.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="496.3" y="254.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.05%)</title><rect x="493.3" y="227.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="496.3" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.05%)</title><rect x="493.3" y="211.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="496.3" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (5 samples, 0.04%)</title><rect x="493.3" y="195.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="496.3" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (5 samples, 0.04%)</title><rect x="493.3" y="179.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="496.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,271 samples, 10.64%)</title><rect x="493.9" y="243.0" width="125.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="496.9" y="254.0">rocksdb::Compac..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,271 samples, 10.64%)</title><rect x="493.9" y="227.0" width="125.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="496.9" y="238.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,268 samples, 10.62%)</title><rect x="493.9" y="211.0" width="125.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="496.9" y="222.0">rocksdb::DB::Pu..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,251 samples, 10.48%)</title><rect x="494.0" y="195.0" width="123.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="497.0" y="206.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,250 samples, 10.47%)</title><rect x="494.0" y="179.0" width="123.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="497.0" y="190.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (63 samples, 0.53%)</title><rect x="494.9" y="163.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="497.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (61 samples, 0.51%)</title><rect x="495.0" y="147.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="498.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (61 samples, 0.51%)</title><rect x="495.0" y="131.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="498.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (58 samples, 0.49%)</title><rect x="495.0" y="115.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="498.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (58 samples, 0.49%)</title><rect x="495.0" y="99.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="498.0" y="110.0"></text>
</g>
<g>
<title>write (57 samples, 0.48%)</title><rect x="495.1" y="83.0" width="5.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="498.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.03%)</title><rect x="500.7" y="115.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="503.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (7 samples, 0.06%)</title><rect x="501.3" y="163.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="504.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="501.3" y="147.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="504.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="501.4" y="131.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="504.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.05%)</title><rect x="501.4" y="115.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="504.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (5 samples, 0.04%)</title><rect x="501.5" y="99.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="504.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.04%)</title><rect x="501.5" y="83.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="504.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="501.7" y="67.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="504.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (48 samples, 0.40%)</title><rect x="502.0" y="163.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="505.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (38 samples, 0.32%)</title><rect x="503.0" y="147.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="506.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (35 samples, 0.29%)</title><rect x="503.3" y="131.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="506.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (34 samples, 0.28%)</title><rect x="503.4" y="115.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="506.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (28 samples, 0.23%)</title><rect x="503.8" y="99.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="506.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (23 samples, 0.19%)</title><rect x="504.3" y="83.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="507.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (20 samples, 0.17%)</title><rect x="504.6" y="67.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="507.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.08%)</title><rect x="505.5" y="51.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="508.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (426 samples, 3.57%)</title><rect x="506.8" y="163.0" width="42.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="509.8" y="174.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (83 samples, 0.70%)</title><rect x="520.5" y="147.0" width="8.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="523.5" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (201 samples, 1.68%)</title><rect x="528.8" y="147.0" width="19.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="531.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (189 samples, 1.58%)</title><rect x="528.8" y="131.0" width="18.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="531.8" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (11 samples, 0.09%)</title><rect x="547.6" y="131.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="550.6" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.05%)</title><rect x="548.1" y="115.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="551.1" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.04%)</title><rect x="548.2" y="99.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="551.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (668 samples, 5.59%)</title><rect x="548.9" y="163.0" width="66.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="551.9" y="174.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (666 samples, 5.58%)</title><rect x="549.1" y="147.0" width="65.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="552.1" y="158.0">rocksdb..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (537 samples, 4.50%)</title><rect x="558.5" y="131.0" width="53.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="561.5" y="142.0">si_mo..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (33 samples, 0.28%)</title><rect x="611.6" y="131.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="614.6" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (32 samples, 0.27%)</title><rect x="611.6" y="115.0" width="3.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="614.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (6 samples, 0.05%)</title><rect x="614.9" y="163.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="617.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (6 samples, 0.05%)</title><rect x="614.9" y="147.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="617.9" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.05%)</title><rect x="614.9" y="131.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="617.9" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.05%)</title><rect x="614.9" y="115.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="617.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.03%)</title><rect x="615.5" y="163.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="618.5" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.03%)</title><rect x="615.5" y="147.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="618.5" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.03%)</title><rect x="615.5" y="131.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="618.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (14 samples, 0.12%)</title><rect x="615.9" y="163.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="618.9" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (12 samples, 0.10%)</title><rect x="615.9" y="147.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="618.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.09%)</title><rect x="615.9" y="131.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="618.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.03%)</title><rect x="617.6" y="195.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="620.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (8 samples, 0.07%)</title><rect x="618.0" y="195.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="621.0" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.03%)</title><rect x="618.0" y="179.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="621.0" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.03%)</title><rect x="618.0" y="163.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="621.0" y="174.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.03%)</title><rect x="618.0" y="147.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="621.0" y="158.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.03%)</title><rect x="618.0" y="131.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="621.0" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="618.0" y="115.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="621.0" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.03%)</title><rect x="618.0" y="99.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="621.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.03%)</title><rect x="618.8" y="195.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="621.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 0.08%)</title><rect x="620.2" y="403.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.03%)</title><rect x="620.3" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="620.3" y="371.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="623.3" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="620.3" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.3" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="620.3" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="623.3" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.04%)</title><rect x="620.6" y="387.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="623.6" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="620.7" y="371.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="623.7" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (43 samples, 0.36%)</title><rect x="621.8" y="419.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="624.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (42 samples, 0.35%)</title><rect x="621.9" y="403.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="624.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (42 samples, 0.35%)</title><rect x="621.9" y="387.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 0.35%)</title><rect x="621.9" y="371.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="624.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 0.35%)</title><rect x="621.9" y="355.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="624.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (39 samples, 0.33%)</title><rect x="621.9" y="339.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="624.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (39 samples, 0.33%)</title><rect x="621.9" y="323.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="624.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (37 samples, 0.31%)</title><rect x="622.1" y="307.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="625.1" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (34 samples, 0.28%)</title><rect x="622.4" y="291.0" width="3.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="625.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.03%)</title><rect x="625.7" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="628.7" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.03%)</title><rect x="625.7" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="628.7" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.03%)</title><rect x="625.7" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="628.7" y="318.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=26371] (1,554 samples, 13.01%)</title><rect x="626.0" y="483.0" width="153.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="629.0" y="494.0">[NIO Selector #4 ti..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,554 samples, 13.01%)</title><rect x="626.0" y="467.0" width="153.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="629.0" y="478.0">one/nio/server/Sele..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (110 samples, 0.92%)</title><rect x="626.1" y="451.0" width="10.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="629.1" y="462.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.03%)</title><rect x="626.6" y="435.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="629.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (101 samples, 0.85%)</title><rect x="627.0" y="435.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="630.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (101 samples, 0.85%)</title><rect x="627.0" y="419.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="630.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (100 samples, 0.84%)</title><rect x="627.0" y="403.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="630.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (85 samples, 0.71%)</title><rect x="627.0" y="387.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="630.0" y="398.0"></text>
</g>
<g>
<title>kevent (82 samples, 0.69%)</title><rect x="627.3" y="371.0" width="8.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="630.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (12 samples, 0.10%)</title><rect x="635.4" y="387.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (8 samples, 0.07%)</title><rect x="635.8" y="371.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.05%)</title><rect x="635.8" y="355.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.8" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.05%)</title><rect x="635.8" y="339.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.8" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.05%)</title><rect x="635.8" y="323.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.03%)</title><rect x="635.9" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.03%)</title><rect x="636.6" y="387.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="639.6" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.03%)</title><rect x="636.6" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="639.6" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.03%)</title><rect x="636.6" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.6" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.03%)</title><rect x="636.6" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.6" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.03%)</title><rect x="636.6" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="639.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,443 samples, 12.08%)</title><rect x="637.0" y="451.0" width="142.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.0" y="462.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,443 samples, 12.08%)</title><rect x="637.0" y="435.0" width="142.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="640.0" y="446.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,408 samples, 11.79%)</title><rect x="637.0" y="419.0" width="139.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="640.0" y="430.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,398 samples, 11.71%)</title><rect x="637.1" y="403.0" width="138.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.1" y="414.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,398 samples, 11.71%)</title><rect x="637.1" y="387.0" width="138.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.1" y="398.0">one/nio/http/Http..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,397 samples, 11.70%)</title><rect x="637.1" y="371.0" width="138.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.1" y="382.0">RequestHandler0_e..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (112 samples, 0.94%)</title><rect x="637.3" y="355.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (108 samples, 0.90%)</title><rect x="637.7" y="339.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="640.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.07%)</title><rect x="637.7" y="323.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.7" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (100 samples, 0.84%)</title><rect x="638.5" y="323.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="641.5" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (100 samples, 0.84%)</title><rect x="638.5" y="307.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="641.5" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (100 samples, 0.84%)</title><rect x="638.5" y="291.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.5" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (100 samples, 0.84%)</title><rect x="638.5" y="275.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (99 samples, 0.83%)</title><rect x="638.6" y="259.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="641.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (97 samples, 0.81%)</title><rect x="638.8" y="243.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (96 samples, 0.80%)</title><rect x="638.9" y="227.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="641.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (96 samples, 0.80%)</title><rect x="638.9" y="211.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="641.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (95 samples, 0.80%)</title><rect x="639.0" y="195.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="642.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (93 samples, 0.78%)</title><rect x="639.2" y="179.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="642.2" y="190.0"></text>
</g>
<g>
<title>write (92 samples, 0.77%)</title><rect x="639.3" y="163.0" width="9.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="642.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (1,281 samples, 10.73%)</title><rect x="648.6" y="355.0" width="126.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.6" y="366.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (1,279 samples, 10.71%)</title><rect x="648.8" y="339.0" width="126.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="651.8" y="350.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,279 samples, 10.71%)</title><rect x="648.8" y="323.0" width="126.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="651.8" y="334.0">ru/mail/polis/da..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,278 samples, 10.70%)</title><rect x="648.8" y="307.0" width="126.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="651.8" y="318.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,278 samples, 10.70%)</title><rect x="648.8" y="291.0" width="126.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="651.8" y="302.0">org/rocksdb/Rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,275 samples, 10.68%)</title><rect x="649.1" y="275.0" width="126.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="652.1" y="286.0">Java_org_rocksd..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,274 samples, 10.67%)</title><rect x="649.2" y="259.0" width="125.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="652.2" y="270.0">rocksdb_put_hel..</text>
</g>
<g>
<title>free_tiny (7 samples, 0.06%)</title><rect x="650.0" y="243.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="653.0" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (4 samples, 0.03%)</title><rect x="650.2" y="227.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="653.2" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.04%)</title><rect x="650.6" y="243.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="653.6" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.08%)</title><rect x="651.1" y="243.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="654.1" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.04%)</title><rect x="651.5" y="227.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="654.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,242 samples, 10.40%)</title><rect x="652.2" y="243.0" width="122.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="655.2" y="254.0">rocksdb::Compac..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,242 samples, 10.40%)</title><rect x="652.2" y="227.0" width="122.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.2" y="238.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,242 samples, 10.40%)</title><rect x="652.2" y="211.0" width="122.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="655.2" y="222.0">rocksdb::DB::Pu..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,229 samples, 10.29%)</title><rect x="652.4" y="195.0" width="121.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="655.4" y="206.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,227 samples, 10.28%)</title><rect x="652.5" y="179.0" width="121.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="655.5" y="190.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (49 samples, 0.41%)</title><rect x="653.3" y="163.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="656.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (47 samples, 0.39%)</title><rect x="653.4" y="147.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="656.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (47 samples, 0.39%)</title><rect x="653.4" y="131.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="656.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (43 samples, 0.36%)</title><rect x="653.5" y="115.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="656.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (43 samples, 0.36%)</title><rect x="653.5" y="99.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="656.5" y="110.0"></text>
</g>
<g>
<title>write (43 samples, 0.36%)</title><rect x="653.5" y="83.0" width="4.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="656.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (13 samples, 0.11%)</title><rect x="658.4" y="163.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="661.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (11 samples, 0.09%)</title><rect x="658.6" y="147.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="661.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.09%)</title><rect x="658.6" y="131.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="661.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.09%)</title><rect x="658.6" y="115.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="661.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (11 samples, 0.09%)</title><rect x="658.6" y="99.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="661.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.08%)</title><rect x="658.6" y="83.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="661.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (39 samples, 0.33%)</title><rect x="659.6" y="163.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="662.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.03%)</title><rect x="660.5" y="147.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="663.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (26 samples, 0.22%)</title><rect x="660.9" y="147.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="663.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (25 samples, 0.21%)</title><rect x="661.0" y="131.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="664.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (23 samples, 0.19%)</title><rect x="661.2" y="115.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="664.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (21 samples, 0.18%)</title><rect x="661.4" y="99.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="664.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (19 samples, 0.16%)</title><rect x="661.6" y="83.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="664.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (15 samples, 0.13%)</title><rect x="662.0" y="67.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="665.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.05%)</title><rect x="662.8" y="51.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="665.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.03%)</title><rect x="663.1" y="35.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="666.1" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (394 samples, 3.30%)</title><rect x="663.6" y="163.0" width="38.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="666.6" y="174.0">roc..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (89 samples, 0.75%)</title><rect x="675.3" y="147.0" width="8.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="678.3" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (186 samples, 1.56%)</title><rect x="684.1" y="147.0" width="18.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="687.1" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (175 samples, 1.47%)</title><rect x="684.2" y="131.0" width="17.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="687.2" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (10 samples, 0.08%)</title><rect x="701.5" y="131.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="704.5" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (8 samples, 0.07%)</title><rect x="701.6" y="115.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="704.6" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (8 samples, 0.07%)</title><rect x="701.6" y="99.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="704.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (687 samples, 5.75%)</title><rect x="702.5" y="163.0" width="67.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="705.5" y="174.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (685 samples, 5.74%)</title><rect x="702.5" y="147.0" width="67.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="705.5" y="158.0">rocksdb..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (577 samples, 4.83%)</title><rect x="710.3" y="131.0" width="57.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="713.3" y="142.0">si_mod..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (5 samples, 0.04%)</title><rect x="767.4" y="131.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="770.4" y="142.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.04%)</title><rect x="767.4" y="115.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="770.4" y="126.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (3 samples, 0.03%)</title><rect x="767.5" y="99.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="770.5" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (24 samples, 0.20%)</title><rect x="767.8" y="131.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="770.8" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (24 samples, 0.20%)</title><rect x="767.8" y="115.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="770.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (10 samples, 0.08%)</title><rect x="770.4" y="163.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="773.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (7 samples, 0.06%)</title><rect x="770.4" y="147.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="773.4" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.04%)</title><rect x="770.6" y="131.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="773.6" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.03%)</title><rect x="770.6" y="115.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="773.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (20 samples, 0.17%)</title><rect x="771.6" y="163.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="774.6" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (18 samples, 0.15%)</title><rect x="771.7" y="147.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="774.7" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.15%)</title><rect x="771.7" y="131.0" width="1.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="774.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="773.9" y="195.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="776.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (6 samples, 0.05%)</title><rect x="774.3" y="195.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="777.3" y="206.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="774.6" y="179.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="777.6" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.04%)</title><rect x="775.5" y="403.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (35 samples, 0.29%)</title><rect x="776.1" y="419.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.1" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (34 samples, 0.28%)</title><rect x="776.2" y="403.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="779.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (34 samples, 0.28%)</title><rect x="776.2" y="387.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="779.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (34 samples, 0.28%)</title><rect x="776.2" y="371.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="779.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (34 samples, 0.28%)</title><rect x="776.2" y="355.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="779.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (34 samples, 0.28%)</title><rect x="776.2" y="339.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="779.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (34 samples, 0.28%)</title><rect x="776.2" y="323.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="779.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (31 samples, 0.26%)</title><rect x="776.5" y="307.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="779.5" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (29 samples, 0.24%)</title><rect x="776.7" y="291.0" width="2.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="779.7" y="302.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=38659] (1,729 samples, 14.48%)</title><rect x="779.6" y="483.0" width="170.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="782.6" y="494.0">[NIO Selector #5 tid=3..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,729 samples, 14.48%)</title><rect x="779.6" y="467.0" width="170.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.6" y="478.0">one/nio/server/Selecto..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (106 samples, 0.89%)</title><rect x="779.8" y="451.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="782.8" y="462.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.03%)</title><rect x="780.1" y="435.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (100 samples, 0.84%)</title><rect x="780.4" y="435.0" width="9.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="783.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (100 samples, 0.84%)</title><rect x="780.4" y="419.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="783.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (100 samples, 0.84%)</title><rect x="780.4" y="403.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (90 samples, 0.75%)</title><rect x="780.4" y="387.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="783.4" y="398.0"></text>
</g>
<g>
<title>kevent (79 samples, 0.66%)</title><rect x="781.5" y="371.0" width="7.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="784.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (7 samples, 0.06%)</title><rect x="789.3" y="387.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (7 samples, 0.06%)</title><rect x="789.3" y="371.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="792.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.03%)</title><rect x="789.3" y="355.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="792.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.03%)</title><rect x="789.3" y="339.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="792.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.03%)</title><rect x="789.3" y="323.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="792.3" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,621 samples, 13.58%)</title><rect x="790.3" y="451.0" width="160.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="793.3" y="462.0">one/nio/net/Session...</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,621 samples, 13.58%)</title><rect x="790.3" y="435.0" width="160.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="793.3" y="446.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,584 samples, 13.27%)</title><rect x="790.3" y="419.0" width="156.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="793.3" y="430.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,556 samples, 13.03%)</title><rect x="791.2" y="403.0" width="153.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="794.2" y="414.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,556 samples, 13.03%)</title><rect x="791.2" y="387.0" width="153.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.2" y="398.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,555 samples, 13.02%)</title><rect x="791.2" y="371.0" width="153.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.2" y="382.0">RequestHandler0_ent..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (159 samples, 1.33%)</title><rect x="791.3" y="355.0" width="15.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="794.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.03%)</title><rect x="791.4" y="339.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="794.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.03%)</title><rect x="791.4" y="323.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.4" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.03%)</title><rect x="791.4" y="307.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="794.4" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="791.5" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="794.5" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (153 samples, 1.28%)</title><rect x="791.8" y="339.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.05%)</title><rect x="791.8" y="323.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="794.8" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (147 samples, 1.23%)</title><rect x="792.4" y="323.0" width="14.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="795.4" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (147 samples, 1.23%)</title><rect x="792.4" y="307.0" width="14.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="795.4" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (146 samples, 1.22%)</title><rect x="792.5" y="291.0" width="14.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.5" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (146 samples, 1.22%)</title><rect x="792.5" y="275.0" width="14.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (146 samples, 1.22%)</title><rect x="792.5" y="259.0" width="14.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="795.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (145 samples, 1.21%)</title><rect x="792.5" y="243.0" width="14.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="795.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (144 samples, 1.21%)</title><rect x="792.6" y="227.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="795.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (144 samples, 1.21%)</title><rect x="792.6" y="211.0" width="14.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (140 samples, 1.17%)</title><rect x="793.0" y="195.0" width="13.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (136 samples, 1.14%)</title><rect x="793.4" y="179.0" width="13.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="796.4" y="190.0"></text>
</g>
<g>
<title>write (131 samples, 1.10%)</title><rect x="793.9" y="163.0" width="13.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="796.9" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.03%)</title><rect x="807.0" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="810.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (1,392 samples, 11.66%)</title><rect x="807.3" y="355.0" width="137.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="810.3" y="366.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.05%)</title><rect x="807.6" y="339.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="810.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.05%)</title><rect x="807.6" y="323.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="810.6" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.05%)</title><rect x="807.6" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.05%)</title><rect x="807.6" y="291.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.6" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="807.8" y="275.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="810.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (1,383 samples, 11.58%)</title><rect x="808.2" y="339.0" width="136.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="811.2" y="350.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,383 samples, 11.58%)</title><rect x="808.2" y="323.0" width="136.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="811.2" y="334.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,381 samples, 11.57%)</title><rect x="808.2" y="307.0" width="136.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="811.2" y="318.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,381 samples, 11.57%)</title><rect x="808.2" y="291.0" width="136.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.2" y="302.0">org/rocksdb/Rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,377 samples, 11.53%)</title><rect x="808.6" y="275.0" width="136.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="811.6" y="286.0">Java_org_rocksdb_..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,372 samples, 11.49%)</title><rect x="809.1" y="259.0" width="135.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="812.1" y="270.0">rocksdb_put_helpe..</text>
</g>
<g>
<title>free_tiny (3 samples, 0.03%)</title><rect x="809.6" y="243.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="812.6" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.03%)</title><rect x="809.6" y="227.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="812.6" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.08%)</title><rect x="810.0" y="243.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="813.0" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.03%)</title><rect x="810.0" y="227.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="813.0" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.05%)</title><rect x="810.3" y="227.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="813.3" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.03%)</title><rect x="810.5" y="211.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="813.5" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.05%)</title><rect x="811.1" y="243.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="814.1" y="254.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.05%)</title><rect x="811.1" y="227.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="814.1" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.05%)</title><rect x="811.1" y="211.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="814.1" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="811.3" y="195.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="814.3" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.03%)</title><rect x="811.3" y="179.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="814.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,344 samples, 11.26%)</title><rect x="811.7" y="243.0" width="132.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="814.7" y="254.0">rocksdb::Compact..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,344 samples, 11.26%)</title><rect x="811.7" y="227.0" width="132.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="814.7" y="238.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,343 samples, 11.25%)</title><rect x="811.7" y="211.0" width="132.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="814.7" y="222.0">rocksdb::DB::Put..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,320 samples, 11.05%)</title><rect x="811.9" y="195.0" width="130.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="814.9" y="206.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,312 samples, 10.99%)</title><rect x="812.1" y="179.0" width="129.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="815.1" y="190.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (6 samples, 0.05%)</title><rect x="813.2" y="163.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="816.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (77 samples, 0.64%)</title><rect x="813.9" y="163.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="816.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (77 samples, 0.64%)</title><rect x="813.9" y="147.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="816.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (77 samples, 0.64%)</title><rect x="813.9" y="131.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="816.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (73 samples, 0.61%)</title><rect x="813.9" y="115.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="816.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (72 samples, 0.60%)</title><rect x="814.0" y="99.0" width="7.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="817.0" y="110.0"></text>
</g>
<g>
<title>write (71 samples, 0.59%)</title><rect x="814.1" y="83.0" width="7.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="817.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.03%)</title><rect x="821.5" y="163.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="824.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (14 samples, 0.12%)</title><rect x="821.8" y="163.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="824.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (13 samples, 0.11%)</title><rect x="821.9" y="147.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="824.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.09%)</title><rect x="822.1" y="131.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="825.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.09%)</title><rect x="822.1" y="115.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="825.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (9 samples, 0.08%)</title><rect x="822.1" y="99.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="825.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.06%)</title><rect x="822.3" y="83.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="825.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (36 samples, 0.30%)</title><rect x="823.2" y="163.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="826.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (30 samples, 0.25%)</title><rect x="823.8" y="147.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="826.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (29 samples, 0.24%)</title><rect x="823.9" y="131.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="826.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (28 samples, 0.23%)</title><rect x="824.0" y="115.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="827.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (19 samples, 0.16%)</title><rect x="824.8" y="99.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="827.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (16 samples, 0.13%)</title><rect x="825.1" y="83.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="828.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.12%)</title><rect x="825.3" y="67.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="828.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (455 samples, 3.81%)</title><rect x="826.7" y="163.0" width="45.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="829.7" y="174.0">rock..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (84 samples, 0.70%)</title><rect x="843.2" y="147.0" width="8.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="846.2" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (202 samples, 1.69%)</title><rect x="851.5" y="147.0" width="20.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="854.5" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (193 samples, 1.62%)</title><rect x="851.5" y="131.0" width="19.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="854.5" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.06%)</title><rect x="870.7" y="131.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="873.7" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.03%)</title><rect x="871.0" y="115.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="874.0" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.03%)</title><rect x="871.0" y="99.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="874.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (666 samples, 5.58%)</title><rect x="871.7" y="163.0" width="65.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="874.7" y="174.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (666 samples, 5.58%)</title><rect x="871.7" y="147.0" width="65.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.7" y="158.0">rocksdb..</text>
</g>
<g>
<title>sched_yield (6 samples, 0.05%)</title><rect x="879.0" y="131.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="882.0" y="142.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (548 samples, 4.59%)</title><rect x="879.6" y="131.0" width="54.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="882.6" y="142.0">si_mo..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (5 samples, 0.04%)</title><rect x="933.8" y="131.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="936.8" y="142.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.04%)</title><rect x="933.8" y="115.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="936.8" y="126.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.03%)</title><rect x="933.9" y="99.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="936.9" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (33 samples, 0.28%)</title><rect x="934.3" y="131.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.3" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (33 samples, 0.28%)</title><rect x="934.3" y="115.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="937.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (10 samples, 0.08%)</title><rect x="937.5" y="163.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="940.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (10 samples, 0.08%)</title><rect x="937.5" y="147.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="940.5" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.04%)</title><rect x="937.7" y="131.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="940.7" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.04%)</title><rect x="937.7" y="115.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="940.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (25 samples, 0.21%)</title><rect x="938.9" y="163.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="941.9" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (22 samples, 0.18%)</title><rect x="939.0" y="147.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (22 samples, 0.18%)</title><rect x="939.0" y="131.0" width="2.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="942.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.06%)</title><rect x="942.5" y="195.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (4 samples, 0.03%)</title><rect x="942.8" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="945.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.04%)</title><rect x="943.1" y="195.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (6 samples, 0.05%)</title><rect x="943.6" y="195.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="946.6" y="206.0"></text>
</g>
<g>
<title>free (4 samples, 0.03%)</title><rect x="943.6" y="179.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="946.6" y="190.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.03%)</title><rect x="943.7" y="163.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="946.7" y="174.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.03%)</title><rect x="943.7" y="147.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="946.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9 samples, 0.08%)</title><rect x="944.9" y="403.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="947.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.03%)</title><rect x="944.9" y="387.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="947.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="944.9" y="371.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="947.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="944.9" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="947.9" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="944.9" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="947.9" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.03%)</title><rect x="945.2" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="948.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.06%)</title><rect x="946.0" y="403.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="949.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.04%)</title><rect x="946.2" y="387.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.2" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.04%)</title><rect x="946.2" y="371.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="949.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (37 samples, 0.31%)</title><rect x="946.8" y="419.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="949.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (35 samples, 0.29%)</title><rect x="947.0" y="403.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="950.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (35 samples, 0.29%)</title><rect x="947.0" y="387.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="950.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (35 samples, 0.29%)</title><rect x="947.0" y="371.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="950.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (35 samples, 0.29%)</title><rect x="947.0" y="355.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="950.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (33 samples, 0.28%)</title><rect x="947.0" y="339.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="950.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (33 samples, 0.28%)</title><rect x="947.0" y="323.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="950.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (32 samples, 0.27%)</title><rect x="947.1" y="307.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="950.1" y="318.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.03%)</title><rect x="947.2" y="291.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="950.2" y="302.0"></text>
</g>
<g>
<title>rpc_errlist (28 samples, 0.23%)</title><rect x="947.5" y="291.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="950.5" y="302.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=27395] (988 samples, 8.27%)</title><rect x="950.5" y="483.0" width="97.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="953.5" y="494.0">[NIO Select..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (988 samples, 8.27%)</title><rect x="950.5" y="467.0" width="97.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="953.5" y="478.0">one/nio/ser..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (88 samples, 0.74%)</title><rect x="950.7" y="451.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="953.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (85 samples, 0.71%)</title><rect x="950.9" y="435.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="953.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (85 samples, 0.71%)</title><rect x="950.9" y="419.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="953.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (85 samples, 0.71%)</title><rect x="950.9" y="403.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="953.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (79 samples, 0.66%)</title><rect x="950.9" y="387.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="953.9" y="398.0"></text>
</g>
<g>
<title>kevent (72 samples, 0.60%)</title><rect x="951.5" y="371.0" width="7.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="954.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.03%)</title><rect x="958.7" y="387.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="961.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (898 samples, 7.52%)</title><rect x="959.4" y="451.0" width="88.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="962.4" y="462.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (897 samples, 7.51%)</title><rect x="959.5" y="435.0" width="88.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="962.5" y="446.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (875 samples, 7.33%)</title><rect x="959.5" y="419.0" width="86.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="962.5" y="430.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (868 samples, 7.27%)</title><rect x="959.6" y="403.0" width="85.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="962.6" y="414.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (868 samples, 7.27%)</title><rect x="959.6" y="387.0" width="85.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="962.6" y="398.0">one/nio/ht..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (867 samples, 7.26%)</title><rect x="959.6" y="371.0" width="85.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="962.6" y="382.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (41 samples, 0.34%)</title><rect x="959.6" y="355.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="962.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (40 samples, 0.33%)</title><rect x="959.6" y="339.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="962.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.03%)</title><rect x="959.6" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (37 samples, 0.31%)</title><rect x="959.9" y="323.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="962.9" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (37 samples, 0.31%)</title><rect x="959.9" y="307.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="962.9" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (37 samples, 0.31%)</title><rect x="959.9" y="291.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="962.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (37 samples, 0.31%)</title><rect x="959.9" y="275.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="962.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (37 samples, 0.31%)</title><rect x="959.9" y="259.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (37 samples, 0.31%)</title><rect x="959.9" y="243.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="962.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (37 samples, 0.31%)</title><rect x="959.9" y="227.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="962.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (37 samples, 0.31%)</title><rect x="959.9" y="211.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="962.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (37 samples, 0.31%)</title><rect x="959.9" y="195.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="962.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (34 samples, 0.28%)</title><rect x="960.1" y="179.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="963.1" y="190.0"></text>
</g>
<g>
<title>write (33 samples, 0.28%)</title><rect x="960.2" y="163.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="963.2" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.03%)</title><rect x="963.6" y="355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="966.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (823 samples, 6.89%)</title><rect x="963.9" y="355.0" width="81.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="966.9" y="366.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (821 samples, 6.88%)</title><rect x="964.1" y="339.0" width="81.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="967.1" y="350.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (821 samples, 6.88%)</title><rect x="964.1" y="323.0" width="81.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="967.1" y="334.0">ru/mail/p..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (820 samples, 6.87%)</title><rect x="964.1" y="307.0" width="81.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="967.1" y="318.0">org/rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (820 samples, 6.87%)</title><rect x="964.1" y="291.0" width="81.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="967.1" y="302.0">org/rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (819 samples, 6.86%)</title><rect x="964.2" y="275.0" width="80.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="967.2" y="286.0">Java_org_..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (817 samples, 6.84%)</title><rect x="964.4" y="259.0" width="80.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.4" y="270.0">rocksdb_p..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.03%)</title><rect x="964.5" y="243.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="967.5" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="964.9" y="243.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="967.9" y="254.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="964.9" y="227.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="967.9" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="964.9" y="211.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="967.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (808 samples, 6.77%)</title><rect x="965.2" y="243.0" width="79.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="968.2" y="254.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (808 samples, 6.77%)</title><rect x="965.2" y="227.0" width="79.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="968.2" y="238.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (808 samples, 6.77%)</title><rect x="965.2" y="211.0" width="79.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="968.2" y="222.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (796 samples, 6.67%)</title><rect x="965.2" y="195.0" width="78.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="968.2" y="206.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (796 samples, 6.67%)</title><rect x="965.2" y="179.0" width="78.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="968.2" y="190.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (22 samples, 0.18%)</title><rect x="965.3" y="163.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="968.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (21 samples, 0.18%)</title><rect x="965.3" y="147.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="968.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (21 samples, 0.18%)</title><rect x="965.3" y="131.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="968.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (17 samples, 0.14%)</title><rect x="965.4" y="115.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="968.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (17 samples, 0.14%)</title><rect x="965.4" y="99.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="968.4" y="110.0"></text>
</g>
<g>
<title>write (17 samples, 0.14%)</title><rect x="965.4" y="83.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="968.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (15 samples, 0.13%)</title><rect x="967.7" y="163.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="970.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (13 samples, 0.11%)</title><rect x="967.9" y="147.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="970.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (12 samples, 0.10%)</title><rect x="968.0" y="131.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="971.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (12 samples, 0.10%)</title><rect x="968.0" y="115.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (8 samples, 0.07%)</title><rect x="968.3" y="99.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.06%)</title><rect x="968.4" y="83.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.05%)</title><rect x="968.5" y="67.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="971.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (212 samples, 1.78%)</title><rect x="969.1" y="163.0" width="21.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.1" y="174.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (69 samples, 0.58%)</title><rect x="976.7" y="147.0" width="6.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="979.7" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (64 samples, 0.54%)</title><rect x="983.8" y="147.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (61 samples, 0.51%)</title><rect x="983.8" y="131.0" width="6.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="986.8" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.03%)</title><rect x="989.8" y="131.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="992.8" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.03%)</title><rect x="989.8" y="115.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="992.8" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.03%)</title><rect x="989.8" y="99.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="992.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (540 samples, 4.52%)</title><rect x="990.1" y="163.0" width="53.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="993.1" y="174.0">rocks..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (540 samples, 4.52%)</title><rect x="990.1" y="147.0" width="53.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.1" y="158.0">rocks..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (493 samples, 4.13%)</title><rect x="993.5" y="131.0" width="48.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="996.5" y="142.0">si_m..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (10 samples, 0.08%)</title><rect x="1042.5" y="131.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1045.5" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (10 samples, 0.08%)</title><rect x="1042.5" y="115.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1045.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.04%)</title><rect x="1043.8" y="195.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1046.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.04%)</title><rect x="1044.3" y="195.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.3" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.03%)</title><rect x="1045.4" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1048.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="1045.5" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1048.5" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="1045.5" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1048.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (22 samples, 0.18%)</title><rect x="1045.9" y="419.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1048.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (21 samples, 0.18%)</title><rect x="1046.0" y="403.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1049.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (21 samples, 0.18%)</title><rect x="1046.0" y="387.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1049.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (21 samples, 0.18%)</title><rect x="1046.0" y="371.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1049.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (21 samples, 0.18%)</title><rect x="1046.0" y="355.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1049.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (19 samples, 0.16%)</title><rect x="1046.0" y="339.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1049.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (19 samples, 0.16%)</title><rect x="1046.0" y="323.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1049.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (17 samples, 0.14%)</title><rect x="1046.2" y="307.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1049.2" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (17 samples, 0.14%)</title><rect x="1046.2" y="291.0" width="1.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1049.2" y="302.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=27907] (1,408 samples, 11.79%)</title><rect x="1048.1" y="483.0" width="139.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1051.1" y="494.0">[NIO Selector #7 ..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,408 samples, 11.79%)</title><rect x="1048.1" y="467.0" width="139.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1051.1" y="478.0">one/nio/server/Se..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (105 samples, 0.88%)</title><rect x="1048.1" y="451.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1051.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (103 samples, 0.86%)</title><rect x="1048.3" y="435.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1051.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (103 samples, 0.86%)</title><rect x="1048.3" y="419.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1051.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (103 samples, 0.86%)</title><rect x="1048.3" y="403.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1051.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (97 samples, 0.81%)</title><rect x="1048.4" y="387.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1051.4" y="398.0"></text>
</g>
<g>
<title>kevent (92 samples, 0.77%)</title><rect x="1048.9" y="371.0" width="9.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1051.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.03%)</title><rect x="1058.0" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1061.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,303 samples, 10.91%)</title><rect x="1058.5" y="451.0" width="128.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1061.5" y="462.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,303 samples, 10.91%)</title><rect x="1058.5" y="435.0" width="128.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1061.5" y="446.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,279 samples, 10.71%)</title><rect x="1058.5" y="419.0" width="126.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1061.5" y="430.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,264 samples, 10.59%)</title><rect x="1059.0" y="403.0" width="124.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1062.0" y="414.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,264 samples, 10.59%)</title><rect x="1059.0" y="387.0" width="124.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1062.0" y="398.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,264 samples, 10.59%)</title><rect x="1059.0" y="371.0" width="124.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1062.0" y="382.0">RequestHandler0..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (63 samples, 0.53%)</title><rect x="1059.2" y="355.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1062.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.03%)</title><rect x="1059.2" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1062.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="1059.2" y="323.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1062.2" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.03%)</title><rect x="1059.2" y="307.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1062.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (60 samples, 0.50%)</title><rect x="1059.5" y="339.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1062.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.05%)</title><rect x="1059.5" y="323.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1062.5" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (54 samples, 0.45%)</title><rect x="1060.1" y="323.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1063.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (54 samples, 0.45%)</title><rect x="1060.1" y="307.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1063.1" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (54 samples, 0.45%)</title><rect x="1060.1" y="291.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1063.1" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (54 samples, 0.45%)</title><rect x="1060.1" y="275.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1063.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (54 samples, 0.45%)</title><rect x="1060.1" y="259.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1063.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (53 samples, 0.44%)</title><rect x="1060.2" y="243.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1063.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (53 samples, 0.44%)</title><rect x="1060.2" y="227.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1063.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (53 samples, 0.44%)</title><rect x="1060.2" y="211.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1063.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (52 samples, 0.44%)</title><rect x="1060.3" y="195.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1063.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (52 samples, 0.44%)</title><rect x="1060.3" y="179.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.3" y="190.0"></text>
</g>
<g>
<title>write (51 samples, 0.43%)</title><rect x="1060.3" y="163.0" width="5.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1063.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.entity (1,198 samples, 10.03%)</title><rect x="1065.5" y="355.0" width="118.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1068.5" y="366.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.03%)</title><rect x="1065.5" y="339.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1068.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.03%)</title><rect x="1065.5" y="323.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1068.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="1065.5" y="307.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1068.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="1065.5" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1068.5" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1065.5" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1068.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/stakenschneider/ServiceImpl.put (1,192 samples, 9.98%)</title><rect x="1066.1" y="339.0" width="117.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1069.1" y="350.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,191 samples, 9.97%)</title><rect x="1066.2" y="323.0" width="117.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1069.2" y="334.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,187 samples, 9.94%)</title><rect x="1066.2" y="307.0" width="117.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1069.2" y="318.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,187 samples, 9.94%)</title><rect x="1066.2" y="291.0" width="117.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1069.2" y="302.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,186 samples, 9.93%)</title><rect x="1066.3" y="275.0" width="117.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1069.3" y="286.0">Java_org_rocks..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,184 samples, 9.92%)</title><rect x="1066.5" y="259.0" width="117.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.5" y="270.0">rocksdb_put_he..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.03%)</title><rect x="1066.8" y="243.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1069.8" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.03%)</title><rect x="1067.2" y="243.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1070.2" y="254.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.03%)</title><rect x="1067.2" y="227.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1070.2" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.03%)</title><rect x="1067.2" y="211.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1070.2" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="1067.2" y="195.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1070.2" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.03%)</title><rect x="1067.2" y="179.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1070.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,171 samples, 9.81%)</title><rect x="1067.6" y="243.0" width="115.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.6" y="254.0">rocksdb::Compa..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,171 samples, 9.81%)</title><rect x="1067.6" y="227.0" width="115.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.6" y="238.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,171 samples, 9.81%)</title><rect x="1067.6" y="211.0" width="115.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.6" y="222.0">rocksdb::DB::P..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,159 samples, 9.71%)</title><rect x="1067.7" y="195.0" width="114.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.7" y="206.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,157 samples, 9.69%)</title><rect x="1067.8" y="179.0" width="114.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1070.8" y="190.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (40 samples, 0.33%)</title><rect x="1068.5" y="163.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (38 samples, 0.32%)</title><rect x="1068.7" y="147.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (38 samples, 0.32%)</title><rect x="1068.7" y="131.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1071.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (35 samples, 0.29%)</title><rect x="1068.8" y="115.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (33 samples, 0.28%)</title><rect x="1069.0" y="99.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.0" y="110.0"></text>
</g>
<g>
<title>write (31 samples, 0.26%)</title><rect x="1069.2" y="83.0" width="3.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1072.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (6 samples, 0.05%)</title><rect x="1072.7" y="163.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (5 samples, 0.04%)</title><rect x="1072.8" y="147.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.03%)</title><rect x="1072.9" y="131.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1075.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.03%)</title><rect x="1072.9" y="115.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.03%)</title><rect x="1072.9" y="99.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (24 samples, 0.20%)</title><rect x="1073.3" y="163.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (18 samples, 0.15%)</title><rect x="1073.8" y="147.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (16 samples, 0.13%)</title><rect x="1074.0" y="131.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (16 samples, 0.13%)</title><rect x="1074.0" y="115.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.0" y="126.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.03%)</title><rect x="1074.1" y="99.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1077.1" y="110.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.03%)</title><rect x="1074.1" y="83.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1077.1" y="94.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.03%)</title><rect x="1074.1" y="67.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1077.1" y="78.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="1074.1" y="51.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1077.1" y="62.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="1074.1" y="35.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1077.1" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (11 samples, 0.09%)</title><rect x="1074.4" y="99.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1077.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.09%)</title><rect x="1074.4" y="83.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.08%)</title><rect x="1074.5" y="67.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.03%)</title><rect x="1075.1" y="51.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (315 samples, 2.64%)</title><rect x="1075.8" y="163.0" width="31.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.8" y="174.0">ro..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (91 samples, 0.76%)</title><rect x="1084.9" y="147.0" width="8.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1087.9" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (129 samples, 1.08%)</title><rect x="1093.8" y="147.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (122 samples, 1.02%)</title><rect x="1093.8" y="131.0" width="12.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1096.8" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.06%)</title><rect x="1105.9" y="131.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1108.9" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (6 samples, 0.05%)</title><rect x="1106.0" y="115.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1109.0" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (6 samples, 0.05%)</title><rect x="1106.0" y="99.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1109.0" y="110.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (3 samples, 0.03%)</title><rect x="1106.6" y="147.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.6" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (3 samples, 0.03%)</title><rect x="1106.6" y="131.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1109.6" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (3 samples, 0.03%)</title><rect x="1106.6" y="115.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1109.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (742 samples, 6.21%)</title><rect x="1106.9" y="163.0" width="73.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.9" y="174.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (739 samples, 6.19%)</title><rect x="1107.1" y="147.0" width="73.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.1" y="158.0">rocksdb:..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (644 samples, 5.39%)</title><rect x="1113.3" y="131.0" width="63.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1116.3" y="142.0">si_modu..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (29 samples, 0.24%)</title><rect x="1177.2" y="131.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (27 samples, 0.23%)</title><rect x="1177.2" y="115.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1180.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (4 samples, 0.03%)</title><rect x="1180.2" y="163.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.03%)</title><rect x="1180.2" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (10 samples, 0.08%)</title><rect x="1180.7" y="163.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (9 samples, 0.08%)</title><rect x="1180.8" y="147.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.08%)</title><rect x="1180.8" y="131.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1183.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (5 samples, 0.04%)</title><rect x="1182.5" y="195.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.04%)</title><rect x="1182.5" y="179.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.03%)</title><rect x="1182.6" y="163.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1185.6" y="174.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.03%)</title><rect x="1182.6" y="147.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1185.6" y="158.0"></text>
</g>
<g>
<title>malloc_zone_malloc (4 samples, 0.03%)</title><rect x="1182.6" y="131.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1185.6" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="1182.6" y="115.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1185.6" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.03%)</title><rect x="1182.6" y="99.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1185.6" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.03%)</title><rect x="1182.6" y="83.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1185.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.03%)</title><rect x="1183.0" y="195.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferConverter.toArrayShifted (3 samples, 0.03%)</title><rect x="1183.6" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1186.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (6 samples, 0.05%)</title><rect x="1183.9" y="403.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1186.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.03%)</title><rect x="1184.0" y="387.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1187.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="1184.1" y="371.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (24 samples, 0.20%)</title><rect x="1184.9" y="419.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1187.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (24 samples, 0.20%)</title><rect x="1184.9" y="403.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1187.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (24 samples, 0.20%)</title><rect x="1184.9" y="387.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1187.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.20%)</title><rect x="1184.9" y="371.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1187.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.20%)</title><rect x="1184.9" y="355.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1187.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (23 samples, 0.19%)</title><rect x="1184.9" y="339.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1187.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (23 samples, 0.19%)</title><rect x="1184.9" y="323.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1187.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (22 samples, 0.18%)</title><rect x="1185.0" y="307.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1188.0" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (19 samples, 0.16%)</title><rect x="1185.3" y="291.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1188.3" y="302.0"></text>
</g>
<g>
<title>[RMI TCP Connection(21)-127.0.0.1 tid=33811] (6 samples, 0.05%)</title><rect x="1187.2" y="483.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1190.2" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.run (6 samples, 0.05%)</title><rect x="1187.2" y="467.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1190.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (6 samples, 0.05%)</title><rect x="1187.2" y="451.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1190.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (6 samples, 0.05%)</title><rect x="1187.2" y="435.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1190.2" y="446.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (6 samples, 0.05%)</title><rect x="1187.2" y="419.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1190.2" y="430.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (6 samples, 0.05%)</title><rect x="1187.2" y="403.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1190.2" y="414.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$103/1230999400.run (6 samples, 0.05%)</title><rect x="1187.2" y="387.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1190.2" y="398.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (6 samples, 0.05%)</title><rect x="1187.2" y="371.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1190.2" y="382.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (6 samples, 0.05%)</title><rect x="1187.2" y="355.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1190.2" y="366.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (6 samples, 0.05%)</title><rect x="1187.2" y="339.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1190.2" y="350.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (4 samples, 0.03%)</title><rect x="1187.4" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1190.4" y="334.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (4 samples, 0.03%)</title><rect x="1187.4" y="307.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1190.4" y="318.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.03%)</title><rect x="1187.4" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1190.4" y="302.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (4 samples, 0.03%)</title><rect x="1187.4" y="275.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1190.4" y="286.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (4 samples, 0.03%)</title><rect x="1187.4" y="259.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1190.4" y="270.0"></text>
</g>
<g>
<title>[tid=41219] (22 samples, 0.18%)</title><rect x="1187.8" y="483.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1190.8" y="494.0"></text>
</g>
<g>
<title>thread_start (22 samples, 0.18%)</title><rect x="1187.8" y="467.0" width="2.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1190.8" y="478.0"></text>
</g>
<g>
<title>_pthread_start (22 samples, 0.18%)</title><rect x="1187.8" y="451.0" width="2.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1190.8" y="462.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, void (*)(void*), rocksdb::BGThreadMetadata*&gt; &gt;(void*) (22 samples, 0.18%)</title><rect x="1187.8" y="435.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (22 samples, 0.18%)</title><rect x="1187.8" y="419.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (22 samples, 0.18%)</title><rect x="1187.8" y="403.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) (22 samples, 0.18%)</title><rect x="1187.8" y="387.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) (22 samples, 0.18%)</title><rect x="1187.8" y="371.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector&lt;rocksdb::DBImpl::BGFlushArg, 8ul&gt; const&amp;, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (22 samples, 0.18%)</title><rect x="1187.8" y="355.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt; &gt;&amp;, unsigned long long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (22 samples, 0.18%)</title><rect x="1187.8" y="339.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*) (22 samples, 0.18%)</title><rect x="1187.8" y="323.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::WriteLevel0Table() (22 samples, 0.18%)</title><rect x="1187.8" y="307.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::BuildTable(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, rocksdb::FileSystem*, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, rocksdb::FileOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt; &gt; &gt;, rocksdb::FileMetaData*, rocksdb::InternalKeyComparator const&amp;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollectorFactory, std::__1::default_delete&lt;rocks (22 samples, 0.18%)</title><rect x="1187.8" y="291.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 0.08%)</title><rect x="1187.8" y="275.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Flush() (7 samples, 0.06%)</title><rect x="1187.8" y="259.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, bool) (7 samples, 0.06%)</title><rect x="1187.8" y="243.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::CompressAndVerifyBlock(rocksdb::Slice const&amp;, bool, rocksdb::CompressionContext&amp;, rocksdb::UncompressionContext*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Slice*, rocksdb::CompressionType*, rocksdb::Status*) (7 samples, 0.06%)</title><rect x="1187.8" y="227.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (7 samples, 0.06%)</title><rect x="1187.8" y="211.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (7 samples, 0.06%)</title><rect x="1187.8" y="195.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="206.0"></text>
</g>
<g>
<title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (7 samples, 0.06%)</title><rect x="1187.8" y="179.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="190.0"></text>
</g>
<g>
<title>snappy::Compress(snappy::Source*, snappy::Sink*) (7 samples, 0.06%)</title><rect x="1187.8" y="163.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="174.0"></text>
</g>
<g>
<title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (7 samples, 0.06%)</title><rect x="1187.8" y="147.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="158.0"></text>
</g>
<g>
<title>snappy::Bits::Log2Floor(unsigned int) (3 samples, 0.03%)</title><rect x="1188.2" y="131.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::Next() (12 samples, 0.10%)</title><rect x="1188.8" y="275.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::NextFromInput() (11 samples, 0.09%)</title><rect x="1188.8" y="259.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.03%)</title><rect x="1189.4" y="243.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.4" y="254.0"></text>
</g>
</g>
</svg>
