<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="741"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="741"> </text>
<g id="frames">
<g>
<title>all (622 samples, 100.00%)</title><rect x="10.0" y="707.0" width="1180.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="13.0" y="718.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (14 samples, 2.25%)</title><rect x="10.0" y="691.0" width="26.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="702.0">j..</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (2 samples, 0.32%)</title><rect x="10.0" y="675.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (2 samples, 0.32%)</title><rect x="10.0" y="659.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/237835482.linkToTargetMethod (2 samples, 0.32%)</title><rect x="10.0" y="643.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/545541912.invoke (2 samples, 0.32%)</title><rect x="10.0" y="627.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.32%)</title><rect x="10.0" y="611.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (2 samples, 0.32%)</title><rect x="10.0" y="595.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (2 samples, 0.32%)</title><rect x="10.0" y="579.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.32%)</title><rect x="10.0" y="563.0" width="3.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (12 samples, 1.93%)</title><rect x="13.8" y="675.0" width="22.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.8" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (12 samples, 1.93%)</title><rect x="13.8" y="659.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.8" y="670.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (12 samples, 1.93%)</title><rect x="13.8" y="643.0" width="22.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.8" y="654.0">s..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (12 samples, 1.93%)</title><rect x="13.8" y="627.0" width="22.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.8" y="638.0">j..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$90/453267912.run (12 samples, 1.93%)</title><rect x="13.8" y="611.0" width="22.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.8" y="622.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (12 samples, 1.93%)</title><rect x="13.8" y="595.0" width="22.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.8" y="606.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (12 samples, 1.93%)</title><rect x="13.8" y="579.0" width="22.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.8" y="590.0">s..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (12 samples, 1.93%)</title><rect x="13.8" y="563.0" width="22.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="574.0">s..</text>
</g>
<g>
<title>java.io.DataOutputStream (2 samples, 0.32%)</title><rect x="13.8" y="547.0" width="3.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="16.8" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (10 samples, 1.61%)</title><rect x="17.6" y="547.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.6" y="558.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (10 samples, 1.61%)</title><rect x="17.6" y="531.0" width="19.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.6" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (10 samples, 1.61%)</title><rect x="17.6" y="515.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.6" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (10 samples, 1.61%)</title><rect x="17.6" y="499.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.6" y="510.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (10 samples, 1.61%)</title><rect x="17.6" y="483.0" width="19.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.6" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (5 samples, 0.80%)</title><rect x="17.6" y="467.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (5 samples, 0.80%)</title><rect x="17.6" y="451.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor40.invoke (5 samples, 0.80%)</title><rect x="17.6" y="435.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.6" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (5 samples, 0.80%)</title><rect x="17.6" y="419.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.6" y="430.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (3 samples, 0.48%)</title><rect x="17.6" y="403.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (3 samples, 0.48%)</title><rect x="17.6" y="387.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.6" y="398.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (3 samples, 0.48%)</title><rect x="17.6" y="371.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.6" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (3 samples, 0.48%)</title><rect x="17.6" y="355.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.6" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (3 samples, 0.48%)</title><rect x="17.6" y="339.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.6" y="350.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (3 samples, 0.48%)</title><rect x="17.6" y="323.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.6" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (3 samples, 0.48%)</title><rect x="17.6" y="307.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.6" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (3 samples, 0.48%)</title><rect x="17.6" y="291.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.6" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (3 samples, 0.48%)</title><rect x="17.6" y="275.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.6" y="286.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (3 samples, 0.48%)</title><rect x="17.6" y="259.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.6" y="270.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (3 samples, 0.48%)</title><rect x="17.6" y="243.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.6" y="254.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (3 samples, 0.48%)</title><rect x="17.6" y="227.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.6" y="238.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (3 samples, 0.48%)</title><rect x="17.6" y="211.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.6" y="222.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (3 samples, 0.48%)</title><rect x="17.6" y="195.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.6" y="206.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (3 samples, 0.48%)</title><rect x="17.6" y="179.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.6" y="190.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (3 samples, 0.48%)</title><rect x="17.6" y="163.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.6" y="174.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (3 samples, 0.48%)</title><rect x="17.6" y="147.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.6" y="158.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (2 samples, 0.32%)</title><rect x="17.6" y="131.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.6" y="142.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (2 samples, 0.32%)</title><rect x="17.6" y="115.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.6" y="126.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1 samples, 0.16%)</title><rect x="17.6" y="99.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.6" y="110.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1 samples, 0.16%)</title><rect x="17.6" y="83.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.6" y="94.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (1 samples, 0.16%)</title><rect x="17.6" y="67.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="20.6" y="78.0"></text>
</g>
<g>
<title>java.lang.Object[] (1 samples, 0.16%)</title><rect x="17.6" y="51.0" width="1.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="20.6" y="62.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (1 samples, 0.16%)</title><rect x="19.5" y="99.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.5" y="110.0"></text>
</g>
<g>
<title>javax.management.openmbean.CompositeData[] (1 samples, 0.16%)</title><rect x="19.5" y="83.0" width="1.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="22.5" y="94.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.16%)</title><rect x="21.4" y="131.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.4" y="142.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.16%)</title><rect x="21.4" y="115.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.4" y="126.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.16%)</title><rect x="21.4" y="99.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.4" y="110.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.16%)</title><rect x="21.4" y="83.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.4" y="94.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (1 samples, 0.16%)</title><rect x="21.4" y="67.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.4" y="78.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (1 samples, 0.16%)</title><rect x="21.4" y="51.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.4" y="62.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (1 samples, 0.16%)</title><rect x="21.4" y="35.0" width="1.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="24.4" y="46.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getClassLoaderFor (1 samples, 0.16%)</title><rect x="23.3" y="403.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.3" y="414.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.withPermissions (1 samples, 0.16%)</title><rect x="23.3" y="387.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.3" y="398.0"></text>
</g>
<g>
<title>java/security/Permissions.&lt;init&gt; (1 samples, 0.16%)</title><rect x="23.3" y="371.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.3" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentHashMap (1 samples, 0.16%)</title><rect x="23.3" y="355.0" width="1.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="26.3" y="366.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (1 samples, 0.16%)</title><rect x="25.2" y="403.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.2" y="414.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.16%)</title><rect x="25.2" y="387.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.2" y="398.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (1 samples, 0.16%)</title><rect x="25.2" y="371.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.2" y="382.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (1 samples, 0.16%)</title><rect x="25.2" y="355.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.2" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/util/OrderClassLoaders.&lt;init&gt; (1 samples, 0.16%)</title><rect x="25.2" y="339.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.2" y="350.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (1 samples, 0.16%)</title><rect x="25.2" y="323.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.2" y="334.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (1 samples, 0.16%)</title><rect x="25.2" y="307.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.2" y="318.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.nameAndId (1 samples, 0.16%)</title><rect x="25.2" y="291.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.2" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.16%)</title><rect x="25.2" y="275.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.2" y="286.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.16%)</title><rect x="25.2" y="259.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.2" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.16%)</title><rect x="25.2" y="243.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.2" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.16%)</title><rect x="25.2" y="227.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.2" y="238.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.16%)</title><rect x="25.2" y="211.0" width="1.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="28.2" y="222.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (2 samples, 0.32%)</title><rect x="27.1" y="467.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.1" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 0.32%)</title><rect x="27.1" y="451.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.1" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.32%)</title><rect x="27.1" y="435.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.1" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.32%)</title><rect x="27.1" y="419.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.1" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.32%)</title><rect x="27.1" y="403.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.1" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.32%)</title><rect x="27.1" y="387.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.1" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.32%)</title><rect x="27.1" y="371.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.1" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.32%)</title><rect x="27.1" y="355.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.1" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.32%)</title><rect x="27.1" y="339.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.1" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.32%)</title><rect x="27.1" y="323.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.1" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.32%)</title><rect x="27.1" y="307.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.1" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.16%)</title><rect x="27.1" y="291.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.1" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (1 samples, 0.16%)</title><rect x="27.1" y="275.0" width="1.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="30.1" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.16%)</title><rect x="29.0" y="291.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="32.0" y="302.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.16%)</title><rect x="29.0" y="275.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.16%)</title><rect x="29.0" y="259.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.0" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (1 samples, 0.16%)</title><rect x="29.0" y="243.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="32.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (1 samples, 0.16%)</title><rect x="29.0" y="227.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="32.0" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.16%)</title><rect x="29.0" y="211.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.0" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.16%)</title><rect x="29.0" y="195.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.0" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.16%)</title><rect x="29.0" y="179.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.0" y="190.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (1 samples, 0.16%)</title><rect x="29.0" y="163.0" width="1.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="32.0" y="174.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (1 samples, 0.16%)</title><rect x="30.9" y="467.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.9" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.16%)</title><rect x="30.9" y="451.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.9" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.16%)</title><rect x="30.9" y="435.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.9" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.16%)</title><rect x="30.9" y="419.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.9" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.16%)</title><rect x="30.9" y="403.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.9" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.16%)</title><rect x="30.9" y="387.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.9" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1 samples, 0.16%)</title><rect x="30.9" y="371.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.9" y="382.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.16%)</title><rect x="30.9" y="355.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.9" y="366.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.16%)</title><rect x="30.9" y="339.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor48.invoke (1 samples, 0.16%)</title><rect x="30.9" y="323.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.9" y="334.0"></text>
</g>
<g>
<title>javax/management/ObjectName.readObject (1 samples, 0.16%)</title><rect x="30.9" y="307.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.9" y="318.0"></text>
</g>
<g>
<title>javax/management/ObjectName.construct (1 samples, 0.16%)</title><rect x="30.9" y="291.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.9" y="302.0"></text>
</g>
<g>
<title>javax/management/ObjectName.setCanonicalName (1 samples, 0.16%)</title><rect x="30.9" y="275.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.9" y="286.0"></text>
</g>
<g>
<title>javax.management.ObjectName$Property[] (1 samples, 0.16%)</title><rect x="30.9" y="259.0" width="1.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="33.9" y="270.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (2 samples, 0.32%)</title><rect x="32.8" y="467.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.8" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (2 samples, 0.32%)</title><rect x="32.8" y="451.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.8" y="462.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (2 samples, 0.32%)</title><rect x="32.8" y="435.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="35.8" y="446.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (2 samples, 0.32%)</title><rect x="32.8" y="419.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="35.8" y="430.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (2 samples, 0.32%)</title><rect x="32.8" y="403.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.8" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (2 samples, 0.32%)</title><rect x="32.8" y="387.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.8" y="398.0"></text>
</g>
<g>
<title>java.io.ObjectOutputStream$ReplaceTable (1 samples, 0.16%)</title><rect x="32.8" y="371.0" width="1.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="35.8" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$ReplaceTable.&lt;init&gt; (1 samples, 0.16%)</title><rect x="34.7" y="371.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.7" y="382.0"></text>
</g>
<g>
<title>java.lang.Object[] (1 samples, 0.16%)</title><rect x="34.7" y="355.0" width="1.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="37.7" y="366.0"></text>
</g>
<g>
<title>jdk/internal/vm/VMSupport.serializePropertiesToByteArray (2 samples, 0.32%)</title><rect x="36.6" y="691.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="39.6" y="702.0"></text>
</g>
<g>
<title>jdk/internal/vm/VMSupport.serializePropertiesToByteArray (2 samples, 0.32%)</title><rect x="36.6" y="675.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.6" y="686.0"></text>
</g>
<g>
<title>java.io.ByteArrayOutputStream (1 samples, 0.16%)</title><rect x="36.6" y="659.0" width="1.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="39.6" y="670.0"></text>
</g>
<g>
<title>java/util/Properties.store (1 samples, 0.16%)</title><rect x="38.5" y="659.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.5" y="670.0"></text>
</g>
<g>
<title>java/util/Properties.store0 (1 samples, 0.16%)</title><rect x="38.5" y="643.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="41.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$EntryIterator.next (1 samples, 0.16%)</title><rect x="38.5" y="627.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$EntryIterator.next (1 samples, 0.16%)</title><rect x="38.5" y="611.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.5" y="622.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentHashMap$MapEntry (1 samples, 0.16%)</title><rect x="38.5" y="595.0" width="1.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="41.5" y="606.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (606 samples, 97.43%)</title><rect x="40.4" y="691.0" width="1149.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.4" y="702.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (606 samples, 97.43%)</title><rect x="40.4" y="675.0" width="1149.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.4" y="686.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (606 samples, 97.43%)</title><rect x="40.4" y="659.0" width="1149.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.4" y="670.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (606 samples, 97.43%)</title><rect x="40.4" y="643.0" width="1149.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.4" y="654.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (599 samples, 96.30%)</title><rect x="40.4" y="627.0" width="1136.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.4" y="638.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (599 samples, 96.30%)</title><rect x="40.4" y="611.0" width="1136.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.4" y="622.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (596 samples, 95.82%)</title><rect x="40.4" y="595.0" width="1130.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.4" y="606.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.32%)</title><rect x="40.4" y="579.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2 samples, 0.32%)</title><rect x="40.4" y="563.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.4" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.32%)</title><rect x="40.4" y="547.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.4" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.32%)</title><rect x="40.4" y="531.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.4" y="542.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.32%)</title><rect x="40.4" y="515.0" width="3.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="43.4" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.16%)</title><rect x="44.1" y="579.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="47.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.16%)</title><rect x="44.1" y="563.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.1" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.16%)</title><rect x="44.1" y="547.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.1" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.16%)</title><rect x="44.1" y="531.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.1" y="542.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.16%)</title><rect x="44.1" y="515.0" width="1.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="47.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/re1nex/MyService.get (593 samples, 95.34%)</title><rect x="46.0" y="579.0" width="1125.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.0" y="590.0">ru/mail/polis/service/re1nex/MyService.get</text>
</g>
<g>
<title>byte[] (1 samples, 0.16%)</title><rect x="46.0" y="563.0" width="1.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="49.0" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.error (24 samples, 3.86%)</title><rect x="47.9" y="563.0" width="45.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.9" y="574.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (24 samples, 3.86%)</title><rect x="47.9" y="547.0" width="45.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.9" y="558.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (24 samples, 3.86%)</title><rect x="47.9" y="531.0" width="45.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.9" y="542.0">ch/q..</text>
</g>
<g>
<title>ch.qos.logback.classic.spi.LoggingEvent (1 samples, 0.16%)</title><rect x="47.9" y="515.0" width="1.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="50.9" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (23 samples, 3.70%)</title><rect x="49.8" y="515.0" width="43.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="52.8" y="526.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (23 samples, 3.70%)</title><rect x="49.8" y="499.0" width="43.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.8" y="510.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (23 samples, 3.70%)</title><rect x="49.8" y="483.0" width="43.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.8" y="494.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (23 samples, 3.70%)</title><rect x="49.8" y="467.0" width="43.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.8" y="478.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (23 samples, 3.70%)</title><rect x="49.8" y="451.0" width="43.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.8" y="462.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (23 samples, 3.70%)</title><rect x="49.8" y="435.0" width="43.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.8" y="446.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (6 samples, 0.96%)</title><rect x="49.8" y="419.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.8" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (6 samples, 0.96%)</title><rect x="49.8" y="403.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.8" y="414.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (6 samples, 0.96%)</title><rect x="49.8" y="387.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.8" y="398.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (6 samples, 0.96%)</title><rect x="49.8" y="371.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.8" y="382.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (2 samples, 0.32%)</title><rect x="49.8" y="355.0" width="3.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="52.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (3 samples, 0.48%)</title><rect x="53.6" y="355.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.6" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (3 samples, 0.48%)</title><rect x="53.6" y="339.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.6" y="350.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.48%)</title><rect x="53.6" y="323.0" width="5.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="56.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.16%)</title><rect x="59.3" y="355.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.3" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.16%)</title><rect x="59.3" y="339.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.3" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.16%)</title><rect x="59.3" y="323.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.3" y="334.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.16%)</title><rect x="59.3" y="307.0" width="1.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="62.3" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (17 samples, 2.73%)</title><rect x="61.2" y="419.0" width="32.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.2" y="430.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (13 samples, 2.09%)</title><rect x="61.2" y="403.0" width="24.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.2" y="414.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/layout/TTLLLayout.doLayout (13 samples, 2.09%)</title><rect x="61.2" y="387.0" width="24.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.2" y="398.0">c..</text>
</g>
<g>
<title>ch/qos/logback/core/util/CachingDateFormatter.format (5 samples, 0.80%)</title><rect x="61.2" y="371.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.2" y="382.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (5 samples, 0.80%)</title><rect x="61.2" y="355.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.2" y="366.0"></text>
</g>
<g>
<title>java.lang.StringBuffer (1 samples, 0.16%)</title><rect x="61.2" y="339.0" width="1.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="64.2" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.&lt;init&gt; (1 samples, 0.16%)</title><rect x="63.1" y="339.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.1" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.16%)</title><rect x="63.1" y="323.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.1" y="334.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.16%)</title><rect x="63.1" y="307.0" width="1.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="66.1" y="318.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (3 samples, 0.48%)</title><rect x="65.0" y="339.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.48%)</title><rect x="65.0" y="323.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.0" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.48%)</title><rect x="65.0" y="307.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="68.0" y="318.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.48%)</title><rect x="65.0" y="291.0" width="5.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="68.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (3 samples, 0.48%)</title><rect x="70.7" y="371.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.7" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (3 samples, 0.48%)</title><rect x="70.7" y="355.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.7" y="366.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.48%)</title><rect x="70.7" y="339.0" width="5.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="73.7" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.16%)</title><rect x="76.4" y="371.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.4" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.16%)</title><rect x="76.4" y="355.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.4" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.16%)</title><rect x="76.4" y="339.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.4" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.16%)</title><rect x="76.4" y="323.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.4" y="334.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.16%)</title><rect x="76.4" y="307.0" width="1.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="79.4" y="318.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.64%)</title><rect x="78.3" y="371.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="81.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.64%)</title><rect x="78.3" y="355.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.3" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.64%)</title><rect x="78.3" y="339.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.3" y="350.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.64%)</title><rect x="78.3" y="323.0" width="7.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="81.3" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.convertToBytes (4 samples, 0.64%)</title><rect x="85.9" y="403.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.64%)</title><rect x="85.9" y="387.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="88.9" y="398.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.64%)</title><rect x="85.9" y="371.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.9" y="382.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4 samples, 0.64%)</title><rect x="85.9" y="355.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.9" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.64%)</title><rect x="85.9" y="339.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="88.9" y="350.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.64%)</title><rect x="85.9" y="323.0" width="7.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="88.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.16%)</title><rect x="93.5" y="563.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="96.5" y="574.0"></text>
</g>
<g>
<title>java.lang.String[] (1 samples, 0.16%)</title><rect x="93.5" y="547.0" width="1.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="96.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (567 samples, 91.16%)</title><rect x="95.4" y="563.0" width="1075.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.4" y="574.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (87 samples, 13.99%)</title><rect x="95.4" y="547.0" width="165.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.4" y="558.0">com/google/common/col..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (87 samples, 13.99%)</title><rect x="95.4" y="531.0" width="165.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.4" y="542.0">com/google/common/col..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (87 samples, 13.99%)</title><rect x="95.4" y="515.0" width="165.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.4" y="526.0">com/google/common/col..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (87 samples, 13.99%)</title><rect x="95.4" y="499.0" width="165.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.4" y="510.0">com/google/common/col..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (87 samples, 13.99%)</title><rect x="95.4" y="483.0" width="165.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.4" y="494.0">ru/mail/polis/dao/Ite..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (73 samples, 11.74%)</title><rect x="95.4" y="467.0" width="138.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.4" y="478.0">com/google/common..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (11 samples, 1.77%)</title><rect x="95.4" y="451.0" width="20.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.4" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (11 samples, 1.77%)</title><rect x="95.4" y="435.0" width="20.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.4" y="446.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (11 samples, 1.77%)</title><rect x="95.4" y="419.0" width="20.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="98.4" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 1.77%)</title><rect x="95.4" y="403.0" width="20.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.4" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 1.77%)</title><rect x="95.4" y="387.0" width="20.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.4" y="398.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (11 samples, 1.77%)</title><rect x="95.4" y="371.0" width="20.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.4" y="382.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (11 samples, 1.77%)</title><rect x="95.4" y="355.0" width="20.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (11 samples, 1.77%)</title><rect x="95.4" y="339.0" width="20.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (11 samples, 1.77%)</title><rect x="95.4" y="323.0" width="20.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (11 samples, 1.77%)</title><rect x="95.4" y="307.0" width="20.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="98.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (11 samples, 1.77%)</title><rect x="95.4" y="291.0" width="20.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.4" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (11 samples, 1.77%)</title><rect x="95.4" y="275.0" width="20.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="98.4" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (62 samples, 9.97%)</title><rect x="116.2" y="451.0" width="117.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.2" y="462.0">java/util/Prio..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (62 samples, 9.97%)</title><rect x="116.2" y="435.0" width="117.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="119.2" y="446.0">java/util/Prio..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (62 samples, 9.97%)</title><rect x="116.2" y="419.0" width="117.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.2" y="430.0">java/util/Prio..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (62 samples, 9.97%)</title><rect x="116.2" y="403.0" width="117.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.2" y="414.0">java/util/Prio..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (62 samples, 9.97%)</title><rect x="116.2" y="387.0" width="117.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.2" y="398.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (62 samples, 9.97%)</title><rect x="116.2" y="371.0" width="117.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="119.2" y="382.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (59 samples, 9.49%)</title><rect x="116.2" y="355.0" width="112.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="119.2" y="366.0">com/google/co..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (59 samples, 9.49%)</title><rect x="116.2" y="339.0" width="112.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.2" y="350.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (59 samples, 9.49%)</title><rect x="116.2" y="323.0" width="112.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.2" y="334.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (59 samples, 9.49%)</title><rect x="116.2" y="307.0" width="112.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.2" y="318.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (23 samples, 3.70%)</title><rect x="116.2" y="291.0" width="43.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.2" y="302.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (12 samples, 1.93%)</title><rect x="116.2" y="275.0" width="22.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="119.2" y="286.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 1.77%)</title><rect x="139.0" y="275.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.0" y="286.0"></text>
</g>
<g>
<title>byte[] (11 samples, 1.77%)</title><rect x="139.0" y="259.0" width="20.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="142.0" y="270.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (3 samples, 0.48%)</title><rect x="159.9" y="291.0" width="5.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="162.9" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Value (4 samples, 0.64%)</title><rect x="165.6" y="291.0" width="7.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="168.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (8 samples, 1.29%)</title><rect x="173.2" y="291.0" width="15.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8 samples, 1.29%)</title><rect x="173.2" y="275.0" width="15.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.2" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7 samples, 1.13%)</title><rect x="173.2" y="259.0" width="13.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="176.2" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.16%)</title><rect x="186.4" y="259.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="189.4" y="270.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.16%)</title><rect x="186.4" y="243.0" width="1.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="189.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (21 samples, 3.38%)</title><rect x="188.3" y="291.0" width="39.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.3" y="302.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (14 samples, 2.25%)</title><rect x="188.3" y="275.0" width="26.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.3" y="286.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (11 samples, 1.77%)</title><rect x="188.3" y="259.0" width="20.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="191.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.48%)</title><rect x="209.2" y="259.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.2" y="270.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.48%)</title><rect x="209.2" y="243.0" width="5.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="212.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (7 samples, 1.13%)</title><rect x="214.9" y="275.0" width="13.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 1.13%)</title><rect x="214.9" y="259.0" width="13.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="217.9" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.48%)</title><rect x="214.9" y="243.0" width="5.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="217.9" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.64%)</title><rect x="220.6" y="243.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.6" y="254.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.64%)</title><rect x="220.6" y="227.0" width="7.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="223.6" y="238.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (3 samples, 0.48%)</title><rect x="228.2" y="355.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.2" y="366.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (3 samples, 0.48%)</title><rect x="228.2" y="339.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (3 samples, 0.48%)</title><rect x="228.2" y="323.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (3 samples, 0.48%)</title><rect x="228.2" y="307.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (3 samples, 0.48%)</title><rect x="228.2" y="291.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.2" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.48%)</title><rect x="228.2" y="275.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.2" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.48%)</title><rect x="228.2" y="259.0" width="5.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="231.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$108/1077331757.apply (14 samples, 2.25%)</title><rect x="233.9" y="467.0" width="26.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.9" y="478.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (14 samples, 2.25%)</title><rect x="233.9" y="451.0" width="26.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.9" y="462.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (14 samples, 2.25%)</title><rect x="233.9" y="435.0" width="26.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.9" y="446.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (14 samples, 2.25%)</title><rect x="233.9" y="419.0" width="26.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="236.9" y="430.0">j..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (2 samples, 0.32%)</title><rect x="260.4" y="547.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="263.4" y="558.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (2 samples, 0.32%)</title><rect x="260.4" y="531.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.4" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$110/718820481.apply (2 samples, 0.32%)</title><rect x="260.4" y="515.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$iterator$4 (2 samples, 0.32%)</title><rect x="260.4" y="499.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Value.getData (2 samples, 0.32%)</title><rect x="260.4" y="483.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.4" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.32%)</title><rect x="260.4" y="467.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.4" y="478.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2 samples, 0.32%)</title><rect x="260.4" y="451.0" width="3.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="263.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (2 samples, 0.32%)</title><rect x="264.2" y="547.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.2" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (2 samples, 0.32%)</title><rect x="264.2" y="531.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.2" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.32%)</title><rect x="264.2" y="515.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.2" y="526.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2 samples, 0.32%)</title><rect x="264.2" y="499.0" width="3.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="267.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.iterator (476 samples, 76.53%)</title><rect x="268.0" y="547.0" width="903.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.0" y="558.0">ru/mail/polis/dao/re1nex/NewDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (1 samples, 0.16%)</title><rect x="268.0" y="531.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.0" y="542.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (1 samples, 0.16%)</title><rect x="268.0" y="515.0" width="1.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="271.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.cellIterator (475 samples, 76.37%)</title><rect x="269.9" y="531.0" width="901.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.9" y="542.0">ru/mail/polis/dao/re1nex/NewDAO.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (79 samples, 12.70%)</title><rect x="269.9" y="515.0" width="149.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.9" y="526.0">com/google/common/c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (1 samples, 0.16%)</title><rect x="269.9" y="499.0" width="1.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="272.9" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (78 samples, 12.54%)</title><rect x="271.8" y="499.0" width="148.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.8" y="510.0">com/google/common/c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (2 samples, 0.32%)</title><rect x="271.8" y="483.0" width="3.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="274.8" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (4 samples, 0.64%)</title><rect x="275.6" y="483.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.6" y="494.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (4 samples, 0.64%)</title><rect x="275.6" y="467.0" width="7.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="278.6" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (64 samples, 10.29%)</title><rect x="283.2" y="483.0" width="121.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.2" y="494.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (64 samples, 10.29%)</title><rect x="283.2" y="467.0" width="121.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.2" y="478.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (2 samples, 0.32%)</title><rect x="283.2" y="451.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.2" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.32%)</title><rect x="283.2" y="435.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.2" y="446.0"></text>
</g>
<g>
<title>java.lang.Object[] (2 samples, 0.32%)</title><rect x="283.2" y="419.0" width="3.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="286.2" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (62 samples, 9.97%)</title><rect x="287.0" y="451.0" width="117.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.0" y="462.0">java/util/Prio..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (62 samples, 9.97%)</title><rect x="287.0" y="435.0" width="117.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.0" y="446.0">java/util/Prio..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (62 samples, 9.97%)</title><rect x="287.0" y="419.0" width="117.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.0" y="430.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (62 samples, 9.97%)</title><rect x="287.0" y="403.0" width="117.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.0" y="414.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (57 samples, 9.16%)</title><rect x="287.0" y="387.0" width="108.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.0" y="398.0">com/google/co..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (57 samples, 9.16%)</title><rect x="287.0" y="371.0" width="108.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.0" y="382.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (57 samples, 9.16%)</title><rect x="287.0" y="355.0" width="108.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.0" y="366.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (57 samples, 9.16%)</title><rect x="287.0" y="339.0" width="108.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.0" y="350.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (21 samples, 3.38%)</title><rect x="287.0" y="323.0" width="39.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.0" y="334.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (14 samples, 2.25%)</title><rect x="287.0" y="307.0" width="26.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="290.0" y="318.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 1.13%)</title><rect x="313.5" y="307.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.5" y="318.0"></text>
</g>
<g>
<title>byte[] (7 samples, 1.13%)</title><rect x="313.5" y="291.0" width="13.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="316.5" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Cell (4 samples, 0.64%)</title><rect x="326.8" y="323.0" width="7.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="329.8" y="334.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Value (2 samples, 0.32%)</title><rect x="334.4" y="323.0" width="3.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="337.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (5 samples, 0.80%)</title><rect x="338.2" y="323.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="341.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5 samples, 0.80%)</title><rect x="338.2" y="307.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="341.2" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.48%)</title><rect x="338.2" y="291.0" width="5.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="341.2" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.32%)</title><rect x="343.9" y="291.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="346.9" y="302.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.32%)</title><rect x="343.9" y="275.0" width="3.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="346.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (25 samples, 4.02%)</title><rect x="347.7" y="323.0" width="47.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="350.7" y="334.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (20 samples, 3.22%)</title><rect x="347.7" y="307.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.7" y="318.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (12 samples, 1.93%)</title><rect x="347.7" y="291.0" width="22.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="350.7" y="302.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 1.29%)</title><rect x="370.5" y="291.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.5" y="302.0"></text>
</g>
<g>
<title>byte[] (8 samples, 1.29%)</title><rect x="370.5" y="275.0" width="15.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="373.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (5 samples, 0.80%)</title><rect x="385.6" y="307.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="388.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5 samples, 0.80%)</title><rect x="385.6" y="291.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="388.6" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.48%)</title><rect x="385.6" y="275.0" width="5.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="388.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.32%)</title><rect x="391.3" y="275.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.3" y="286.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.32%)</title><rect x="391.3" y="259.0" width="3.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="394.3" y="270.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (5 samples, 0.80%)</title><rect x="395.1" y="387.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.1" y="398.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (5 samples, 0.80%)</title><rect x="395.1" y="371.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (5 samples, 0.80%)</title><rect x="395.1" y="355.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (5 samples, 0.80%)</title><rect x="395.1" y="339.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (5 samples, 0.80%)</title><rect x="395.1" y="323.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="398.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.80%)</title><rect x="395.1" y="307.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="398.1" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5 samples, 0.80%)</title><rect x="395.1" y="291.0" width="9.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="398.1" y="302.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (8 samples, 1.29%)</title><rect x="404.6" y="483.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.6" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (8 samples, 1.29%)</title><rect x="404.6" y="467.0" width="15.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (8 samples, 1.29%)</title><rect x="404.6" y="451.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="407.6" y="462.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (4 samples, 0.64%)</title><rect x="404.6" y="435.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.6" y="446.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (4 samples, 0.64%)</title><rect x="404.6" y="419.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="407.6" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (3 samples, 0.48%)</title><rect x="404.6" y="403.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="407.6" y="414.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (3 samples, 0.48%)</title><rect x="404.6" y="387.0" width="5.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="407.6" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.size (1 samples, 0.16%)</title><rect x="410.3" y="403.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.3" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (1 samples, 0.16%)</title><rect x="410.3" y="387.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="413.3" y="398.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (1 samples, 0.16%)</title><rect x="410.3" y="371.0" width="1.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="413.3" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (4 samples, 0.64%)</title><rect x="412.2" y="435.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.2" y="446.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (1 samples, 0.16%)</title><rect x="412.2" y="419.0" width="1.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="415.2" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.16%)</title><rect x="414.1" y="419.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.1" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.16%)</title><rect x="414.1" y="403.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.1" y="414.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (1 samples, 0.16%)</title><rect x="414.1" y="387.0" width="1.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="417.1" y="398.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (2 samples, 0.32%)</title><rect x="416.0" y="419.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="419.0" y="430.0"></text>
</g>
<g>
<title>java.lang.Object[] (2 samples, 0.32%)</title><rect x="416.0" y="403.0" width="3.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="419.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (368 samples, 59.16%)</title><rect x="419.8" y="515.0" width="698.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.8" y="526.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$107/2037690967.accept (368 samples, 59.16%)</title><rect x="419.8" y="499.0" width="698.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.8" y="510.0">ru/mail/polis/dao/re1nex/NewDAO$$Lambda$107/2037690967.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIterator$5 (368 samples, 59.16%)</title><rect x="419.8" y="483.0" width="698.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.8" y="494.0">ru/mail/polis/dao/re1nex/NewDAO.lambda$cellIterator$5</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.iterator (368 samples, 59.16%)</title><rect x="419.8" y="467.0" width="698.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.8" y="478.0">ru/mail/polis/dao/re1nex/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.SSTable$1 (1 samples, 0.16%)</title><rect x="419.8" y="451.0" width="1.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="422.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt; (367 samples, 59.00%)</title><rect x="421.7" y="451.0" width="696.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="424.7" y="462.0">ru/mail/polis/dao/re1nex/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.binarySearch (367 samples, 59.00%)</title><rect x="421.7" y="435.0" width="696.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="424.7" y="446.0">ru/mail/polis/dao/re1nex/SSTable.binarySearch</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (367 samples, 59.00%)</title><rect x="421.7" y="419.0" width="696.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.7" y="430.0">ru/mail/polis/dao/re1nex/SSTable.key</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (254 samples, 40.84%)</title><rect x="421.7" y="403.0" width="481.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="424.7" y="414.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (182 samples, 29.26%)</title><rect x="421.7" y="387.0" width="345.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="424.7" y="398.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (72 samples, 11.58%)</title><rect x="766.9" y="387.0" width="136.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="769.9" y="398.0">java/nio/HeapByte..</text>
</g>
<g>
<title>byte[] (72 samples, 11.58%)</title><rect x="766.9" y="371.0" width="136.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="769.9" y="382.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (113 samples, 18.17%)</title><rect x="903.5" y="403.0" width="214.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.5" y="414.0">ru/mail/polis/dao/re1nex/SST..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (113 samples, 18.17%)</title><rect x="903.5" y="387.0" width="214.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="906.5" y="398.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (85 samples, 13.67%)</title><rect x="903.5" y="371.0" width="161.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="906.5" y="382.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (28 samples, 4.50%)</title><rect x="1064.8" y="371.0" width="53.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1067.8" y="382.0">java/..</text>
</g>
<g>
<title>byte[] (28 samples, 4.50%)</title><rect x="1064.8" y="355.0" width="53.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1067.8" y="366.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.32%)</title><rect x="1117.9" y="515.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1120.9" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.32%)</title><rect x="1117.9" y="499.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1120.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/NewDAO$$Lambda$107/2037690967.get$Lambda (2 samples, 0.32%)</title><rect x="1117.9" y="483.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1120.9" y="494.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.NewDAO$$Lambda$107 (2 samples, 0.32%)</title><rect x="1117.9" y="467.0" width="3.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1120.9" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.32%)</title><rect x="1121.7" y="515.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1124.7" y="526.0"></text>
</g>
<g>
<title>java.lang.Object[] (2 samples, 0.32%)</title><rect x="1121.7" y="499.0" width="3.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1124.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (18 samples, 2.89%)</title><rect x="1125.5" y="515.0" width="34.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1128.5" y="526.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (18 samples, 2.89%)</title><rect x="1125.5" y="499.0" width="34.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1128.5" y="510.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (18 samples, 2.89%)</title><rect x="1125.5" y="483.0" width="34.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1128.5" y="494.0">co..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (5 samples, 0.80%)</title><rect x="1125.5" y="467.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1128.5" y="478.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (5 samples, 0.80%)</title><rect x="1125.5" y="451.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1128.5" y="462.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (5 samples, 0.80%)</title><rect x="1125.5" y="435.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1128.5" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.80%)</title><rect x="1125.5" y="419.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1128.5" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5 samples, 0.80%)</title><rect x="1125.5" y="403.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1128.5" y="414.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (5 samples, 0.80%)</title><rect x="1125.5" y="387.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1128.5" y="398.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (5 samples, 0.80%)</title><rect x="1125.5" y="371.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1128.5" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (5 samples, 0.80%)</title><rect x="1125.5" y="355.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1128.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (5 samples, 0.80%)</title><rect x="1125.5" y="339.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1128.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (5 samples, 0.80%)</title><rect x="1125.5" y="323.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1128.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5 samples, 0.80%)</title><rect x="1125.5" y="307.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1128.5" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5 samples, 0.80%)</title><rect x="1125.5" y="291.0" width="9.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1128.5" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (13 samples, 2.09%)</title><rect x="1135.0" y="467.0" width="24.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1138.0" y="478.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (13 samples, 2.09%)</title><rect x="1135.0" y="451.0" width="24.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1138.0" y="462.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (13 samples, 2.09%)</title><rect x="1135.0" y="435.0" width="24.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1138.0" y="446.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (13 samples, 2.09%)</title><rect x="1135.0" y="419.0" width="24.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1138.0" y="430.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 2.09%)</title><rect x="1135.0" y="403.0" width="24.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1138.0" y="414.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 2.09%)</title><rect x="1135.0" y="387.0" width="24.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1138.0" y="398.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (12 samples, 1.93%)</title><rect x="1135.0" y="371.0" width="22.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1138.0" y="382.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (12 samples, 1.93%)</title><rect x="1135.0" y="355.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1138.0" y="366.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable$1.next (12 samples, 1.93%)</title><rect x="1135.0" y="339.0" width="22.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1138.0" y="350.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.cell (12 samples, 1.93%)</title><rect x="1135.0" y="323.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1138.0" y="334.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (6 samples, 0.96%)</title><rect x="1135.0" y="307.0" width="11.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1138.0" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4 samples, 0.64%)</title><rect x="1135.0" y="291.0" width="7.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1138.0" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.32%)</title><rect x="1142.6" y="291.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1145.6" y="302.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.32%)</title><rect x="1142.6" y="275.0" width="3.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1145.6" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.re1nex.Value (1 samples, 0.16%)</title><rect x="1146.4" y="307.0" width="1.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1149.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.getOffset (3 samples, 0.48%)</title><rect x="1148.3" y="307.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1151.3" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.48%)</title><rect x="1148.3" y="291.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1151.3" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.48%)</title><rect x="1148.3" y="275.0" width="5.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1151.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/SSTable.key (2 samples, 0.32%)</title><rect x="1154.0" y="307.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1157.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.32%)</title><rect x="1154.0" y="291.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1157.0" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.32%)</title><rect x="1154.0" y="275.0" width="3.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1157.0" y="286.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.16%)</title><rect x="1157.7" y="371.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1160.7" y="382.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1 samples, 0.16%)</title><rect x="1157.7" y="355.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1160.7" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.16%)</title><rect x="1157.7" y="339.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1160.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.compareTo (1 samples, 0.16%)</title><rect x="1157.7" y="323.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1160.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/Cell.getKey (1 samples, 0.16%)</title><rect x="1157.7" y="307.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1160.7" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.16%)</title><rect x="1157.7" y="291.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1160.7" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1 samples, 0.16%)</title><rect x="1157.7" y="275.0" width="1.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1160.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/re1nex/MemTable.iterator (6 samples, 0.96%)</title><rect x="1159.6" y="515.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1162.6" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.16%)</title><rect x="1159.6" y="499.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1162.6" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1 samples, 0.16%)</title><rect x="1159.6" y="483.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1162.6" y="494.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (1 samples, 0.16%)</title><rect x="1159.6" y="467.0" width="1.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1162.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (1 samples, 0.16%)</title><rect x="1161.5" y="499.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1164.5" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (1 samples, 0.16%)</title><rect x="1161.5" y="483.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1164.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (1 samples, 0.16%)</title><rect x="1161.5" y="467.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1164.5" y="478.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (1 samples, 0.16%)</title><rect x="1161.5" y="451.0" width="1.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="1164.5" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (4 samples, 0.64%)</title><rect x="1163.4" y="499.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1166.4" y="510.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (4 samples, 0.64%)</title><rect x="1163.4" y="483.0" width="7.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1166.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.48%)</title><rect x="1171.0" y="595.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1174.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.48%)</title><rect x="1171.0" y="579.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1174.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.48%)</title><rect x="1171.0" y="563.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1174.0" y="574.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.48%)</title><rect x="1171.0" y="547.0" width="5.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1174.0" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.64%)</title><rect x="1176.7" y="627.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1179.7" y="638.0"></text>
</g>
<g>
<title>one.nio.http.Request (1 samples, 0.16%)</title><rect x="1176.7" y="611.0" width="1.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1179.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.16%)</title><rect x="1178.6" y="611.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1181.6" y="622.0"></text>
</g>
<g>
<title>java.lang.String[] (1 samples, 0.16%)</title><rect x="1178.6" y="595.0" width="1.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1181.6" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.32%)</title><rect x="1180.5" y="611.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1183.5" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.32%)</title><rect x="1180.5" y="595.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1183.5" y="606.0"></text>
</g>
<g>
<title>char[] (1 samples, 0.16%)</title><rect x="1180.5" y="579.0" width="1.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1183.5" y="590.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.16%)</title><rect x="1182.4" y="579.0" width="1.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1185.4" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.48%)</title><rect x="1184.3" y="627.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1187.3" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.48%)</title><rect x="1184.3" y="611.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1187.3" y="622.0"></text>
</g>
<g>
<title>char[] (1 samples, 0.16%)</title><rect x="1184.3" y="595.0" width="1.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1187.3" y="606.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.16%)</title><rect x="1186.2" y="595.0" width="1.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1189.2" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.16%)</title><rect x="1188.1" y="595.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1191.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.16%)</title><rect x="1188.1" y="579.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1191.1" y="590.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.16%)</title><rect x="1188.1" y="563.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1191.1" y="574.0"></text>
</g>
<g>
<title>byte[] (1 samples, 0.16%)</title><rect x="1188.1" y="547.0" width="1.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1191.1" y="558.0"></text>
</g>
</g>
</svg>
