<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="517"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="517"> </text>
<g id="frames">
<g>
<title>all (687 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="13.0" y="494.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (685 samples, 99.71%)</title><rect x="10.0" y="467.0" width="1176.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (14 samples, 2.04%)</title><rect x="10.0" y="451.0" width="24.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="462.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (14 samples, 2.04%)</title><rect x="10.0" y="435.0" width="24.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="446.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (14 samples, 2.04%)</title><rect x="10.0" y="419.0" width="24.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="430.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (14 samples, 2.04%)</title><rect x="10.0" y="403.0" width="24.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (11 samples, 1.60%)</title><rect x="10.0" y="387.0" width="18.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.15%)</title><rect x="11.7" y="371.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="14.7" y="382.0"></text>
</g>
<g>
<title>kevent (9 samples, 1.31%)</title><rect x="13.4" y="371.0" width="15.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="16.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.44%)</title><rect x="28.9" y="387.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.44%)</title><rect x="28.9" y="371.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.44%)</title><rect x="28.9" y="355.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="31.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.44%)</title><rect x="28.9" y="339.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.44%)</title><rect x="28.9" y="323.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.15%)</title><rect x="30.6" y="307.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.6" y="318.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.15%)</title><rect x="32.3" y="307.0" width="1.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="35.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (671 samples, 97.67%)</title><rect x="34.0" y="451.0" width="1152.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.0" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (670 samples, 97.53%)</title><rect x="35.8" y="435.0" width="1150.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.8" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (663 samples, 96.51%)</title><rect x="35.8" y="419.0" width="1138.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.8" y="430.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (662 samples, 96.36%)</title><rect x="35.8" y="403.0" width="1137.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.8" y="414.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (662 samples, 96.36%)</title><rect x="35.8" y="387.0" width="1137.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.8" y="398.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (661 samples, 96.22%)</title><rect x="35.8" y="371.0" width="1135.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.8" y="382.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (17 samples, 2.47%)</title><rect x="35.8" y="355.0" width="29.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.8" y="366.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (17 samples, 2.47%)</title><rect x="35.8" y="339.0" width="29.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.8" y="350.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (17 samples, 2.47%)</title><rect x="35.8" y="323.0" width="29.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="38.8" y="334.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (17 samples, 2.47%)</title><rect x="35.8" y="307.0" width="29.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="38.8" y="318.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (17 samples, 2.47%)</title><rect x="35.8" y="291.0" width="29.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="38.8" y="302.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (17 samples, 2.47%)</title><rect x="35.8" y="275.0" width="29.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.8" y="286.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (17 samples, 2.47%)</title><rect x="35.8" y="259.0" width="29.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.8" y="270.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.29%)</title><rect x="35.8" y="243.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.29%)</title><rect x="35.8" y="227.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.15%)</title><rect x="37.5" y="211.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.15%)</title><rect x="37.5" y="195.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.15%)</title><rect x="37.5" y="179.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.5" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.15%)</title><rect x="37.5" y="163.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.5" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.15%)</title><rect x="37.5" y="147.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (15 samples, 2.18%)</title><rect x="39.2" y="243.0" width="25.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.2" y="254.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (15 samples, 2.18%)</title><rect x="39.2" y="227.0" width="25.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.2" y="238.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (14 samples, 2.04%)</title><rect x="39.2" y="211.0" width="24.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.2" y="222.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (14 samples, 2.04%)</title><rect x="39.2" y="195.0" width="24.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.2" y="206.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (14 samples, 2.04%)</title><rect x="39.2" y="179.0" width="24.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="42.2" y="190.0">s..</text>
</g>
<g>
<title>write (14 samples, 2.04%)</title><rect x="39.2" y="163.0" width="24.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="42.2" y="174.0">w..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.15%)</title><rect x="63.2" y="211.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="66.2" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.15%)</title><rect x="63.2" y="195.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.2" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.15%)</title><rect x="63.2" y="179.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="66.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.get (644 samples, 93.74%)</title><rect x="65.0" y="355.0" width="1106.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.0" y="366.0">ru/mail/polis/service/suhova/MoribundService.get</text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (644 samples, 93.74%)</title><rect x="65.0" y="339.0" width="1106.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.0" y="350.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (26 samples, 3.78%)</title><rect x="65.0" y="323.0" width="44.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="68.0" y="334.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (26 samples, 3.78%)</title><rect x="65.0" y="307.0" width="44.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.0" y="318.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (26 samples, 3.78%)</title><rect x="65.0" y="291.0" width="44.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.0" y="302.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (26 samples, 3.78%)</title><rect x="65.0" y="275.0" width="44.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.0" y="286.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (26 samples, 3.78%)</title><rect x="65.0" y="259.0" width="44.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.0" y="270.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (26 samples, 3.78%)</title><rect x="65.0" y="243.0" width="44.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.0" y="254.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (26 samples, 3.78%)</title><rect x="65.0" y="227.0" width="44.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="68.0" y="238.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable$1.next (26 samples, 3.78%)</title><rect x="65.0" y="211.0" width="44.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.0" y="222.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable$1.next (26 samples, 3.78%)</title><rect x="65.0" y="195.0" width="44.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="68.0" y="206.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable.getCell (26 samples, 3.78%)</title><rect x="65.0" y="179.0" width="44.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.0" y="190.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable.getOffset (10 samples, 1.46%)</title><rect x="65.0" y="163.0" width="17.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (10 samples, 1.46%)</title><rect x="65.0" y="147.0" width="17.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (10 samples, 1.46%)</title><rect x="65.0" y="131.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.0" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (10 samples, 1.46%)</title><rect x="65.0" y="115.0" width="17.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="68.0" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (10 samples, 1.46%)</title><rect x="65.0" y="99.0" width="17.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="68.0" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (10 samples, 1.46%)</title><rect x="65.0" y="83.0" width="17.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.0" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (10 samples, 1.46%)</title><rect x="65.0" y="67.0" width="17.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.0" y="78.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (10 samples, 1.46%)</title><rect x="65.0" y="51.0" width="17.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="68.0" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (16 samples, 2.33%)</title><rect x="82.1" y="163.0" width="27.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.1" y="174.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (16 samples, 2.33%)</title><rect x="82.1" y="147.0" width="27.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.1" y="158.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (16 samples, 2.33%)</title><rect x="82.1" y="131.0" width="27.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.1" y="142.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (15 samples, 2.18%)</title><rect x="82.1" y="115.0" width="25.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="85.1" y="126.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (15 samples, 2.18%)</title><rect x="82.1" y="99.0" width="25.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.1" y="110.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (15 samples, 2.18%)</title><rect x="82.1" y="83.0" width="25.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.1" y="94.0">s..</text>
</g>
<g>
<title>rcmd_af.canonnamebuf (15 samples, 2.18%)</title><rect x="82.1" y="67.0" width="25.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="85.1" y="78.0">r..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.15%)</title><rect x="107.9" y="115.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.15%)</title><rect x="107.9" y="99.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.9" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="107.9" y="83.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="110.9" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="107.9" y="67.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.9" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.15%)</title><rect x="107.9" y="51.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.9" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.15%)</title><rect x="107.9" y="35.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.9" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.iterator (618 samples, 89.96%)</title><rect x="109.6" y="323.0" width="1061.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="112.6" y="334.0">ru/mail/polis/dao/suhova/TurboDAO.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (618 samples, 89.96%)</title><rect x="109.6" y="307.0" width="1061.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="112.6" y="318.0">ru/mail/polis/dao/suhova/TurboDAO.cellIterator</text>
</g>
<g>
<title>java/lang/Iterable.forEach (567 samples, 82.53%)</title><rect x="109.6" y="291.0" width="973.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="112.6" y="302.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$64/2062306986.accept (567 samples, 82.53%)</title><rect x="109.6" y="275.0" width="973.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="112.6" y="286.0">ru/mail/polis/dao/suhova/TurboDAO$$Lambda$64/2062306986.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.lambda$cellIterator$5 (567 samples, 82.53%)</title><rect x="109.6" y="259.0" width="973.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="112.6" y="270.0">ru/mail/polis/dao/suhova/TurboDAO.lambda$cellIterator$5</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.15%)</title><rect x="109.6" y="243.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable.iterator (566 samples, 82.39%)</title><rect x="111.3" y="243.0" width="972.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="114.3" y="254.0">ru/mail/polis/dao/suhova/SSTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable$1.&lt;init&gt; (566 samples, 82.39%)</title><rect x="111.3" y="227.0" width="972.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="114.3" y="238.0">ru/mail/polis/dao/suhova/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable.getKeyPosition (566 samples, 82.39%)</title><rect x="111.3" y="211.0" width="972.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.3" y="222.0">ru/mail/polis/dao/suhova/SSTable.getKeyPosition</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.58%)</title><rect x="113.1" y="195.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="116.1" y="206.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.15%)</title><rect x="116.5" y="179.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.5" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="116.5" y="163.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.5" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="118.2" y="179.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="121.2" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.15%)</title><rect x="118.2" y="163.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="121.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable.getKey (561 samples, 81.66%)</title><rect x="119.9" y="195.0" width="963.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="122.9" y="206.0">ru/mail/polis/dao/suhova/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.15%)</title><rect x="119.9" y="179.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="122.9" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.15%)</title><rect x="119.9" y="163.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="122.9" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.15%)</title><rect x="119.9" y="147.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="122.9" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.15%)</title><rect x="119.9" y="131.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="122.9" y="142.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.15%)</title><rect x="119.9" y="115.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="122.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable.getOffset (197 samples, 28.68%)</title><rect x="121.6" y="179.0" width="338.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.6" y="190.0">ru/mail/polis/dao/suhova/SSTable.getOffset</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (197 samples, 28.68%)</title><rect x="121.6" y="163.0" width="338.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.6" y="174.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (197 samples, 28.68%)</title><rect x="121.6" y="147.0" width="338.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="124.6" y="158.0">sun/nio/ch/FileChannelImpl.readInternal</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (8 samples, 1.16%)</title><rect x="121.6" y="131.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="124.6" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (8 samples, 1.16%)</title><rect x="121.6" y="115.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.6" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.15%)</title><rect x="133.7" y="99.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="136.7" y="110.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.15%)</title><rect x="133.7" y="83.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="136.7" y="94.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.15%)</title><rect x="133.7" y="67.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.7" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (2 samples, 0.29%)</title><rect x="135.4" y="131.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="138.4" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.29%)</title><rect x="135.4" y="115.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.4" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.15%)</title><rect x="137.1" y="99.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="140.1" y="110.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.15%)</title><rect x="137.1" y="83.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.1" y="94.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.15%)</title><rect x="137.1" y="67.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.1" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (184 samples, 26.78%)</title><rect x="138.8" y="131.0" width="316.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="141.8" y="142.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.15%)</title><rect x="138.8" y="115.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.8" y="126.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.15%)</title><rect x="138.8" y="99.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="141.8" y="110.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.15%)</title><rect x="138.8" y="83.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.8" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (174 samples, 25.33%)</title><rect x="140.5" y="115.0" width="298.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="143.5" y="126.0">sun/nio/ch/IOUtil.readIntoNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (174 samples, 25.33%)</title><rect x="140.5" y="99.0" width="298.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.5" y="110.0">sun/nio/ch/FileDispatcherImpl.pread</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (174 samples, 25.33%)</title><rect x="140.5" y="83.0" width="298.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.5" y="94.0">sun/nio/ch/FileDispatcherImpl.pread0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (1 samples, 0.15%)</title><rect x="140.5" y="67.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="143.5" y="78.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.15%)</title><rect x="142.3" y="67.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="145.3" y="78.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (172 samples, 25.04%)</title><rect x="144.0" y="67.0" width="295.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="147.0" y="78.0">rcmd_af.canonnamebuf</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 1.31%)</title><rect x="439.4" y="115.0" width="15.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="442.4" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.58%)</title><rect x="439.4" y="99.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="442.4" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.15%)</title><rect x="444.6" y="83.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="447.6" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.73%)</title><rect x="446.3" y="99.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.3" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.29%)</title><rect x="449.7" y="83.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.7" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (1 samples, 0.15%)</title><rect x="453.1" y="83.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="456.1" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.29%)</title><rect x="454.9" y="131.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="457.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.29%)</title><rect x="454.9" y="115.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="457.9" y="126.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.15%)</title><rect x="456.6" y="99.0" width="1.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="459.6" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.15%)</title><rect x="458.3" y="131.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.3" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (363 samples, 52.84%)</title><rect x="460.0" y="179.0" width="623.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.0" y="190.0">sun/nio/ch/FileChannelImpl.read</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (363 samples, 52.84%)</title><rect x="460.0" y="163.0" width="623.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.0" y="174.0">sun/nio/ch/FileChannelImpl.readInternal</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (1 samples, 0.15%)</title><rect x="463.4" y="147.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (6 samples, 0.87%)</title><rect x="465.2" y="147.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="468.2" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (6 samples, 0.87%)</title><rect x="465.2" y="131.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="468.2" y="142.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.15%)</title><rect x="472.0" y="115.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="475.0" y="126.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.15%)</title><rect x="473.8" y="115.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="476.8" y="126.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.15%)</title><rect x="473.8" y="99.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="476.8" y="110.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.15%)</title><rect x="473.8" y="83.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.8" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.endBlocking (3 samples, 0.44%)</title><rect x="475.5" y="147.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="478.5" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.44%)</title><rect x="475.5" y="131.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="478.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (345 samples, 50.22%)</title><rect x="480.6" y="147.0" width="592.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="483.6" y="158.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.15%)</title><rect x="480.6" y="131.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.6" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.15%)</title><rect x="480.6" y="115.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (332 samples, 48.33%)</title><rect x="482.3" y="131.0" width="570.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="485.3" y="142.0">sun/nio/ch/IOUtil.readIntoNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (331 samples, 48.18%)</title><rect x="484.1" y="115.0" width="568.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="487.1" y="126.0">sun/nio/ch/FileDispatcherImpl.pread</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (331 samples, 48.18%)</title><rect x="484.1" y="99.0" width="568.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="487.1" y="110.0">sun/nio/ch/FileDispatcherImpl.pread0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_pread0 (3 samples, 0.44%)</title><rect x="496.1" y="83.0" width="5.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="499.1" y="94.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.29%)</title><rect x="501.2" y="83.0" width="3.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="504.2" y="94.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (319 samples, 46.43%)</title><rect x="504.7" y="83.0" width="547.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="507.7" y="94.0">rcmd_af.canonnamebuf</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (12 samples, 1.75%)</title><rect x="1052.6" y="131.0" width="20.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1055.6" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.44%)</title><rect x="1054.3" y="115.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1057.3" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (8 samples, 1.16%)</title><rect x="1059.5" y="115.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1062.5" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (6 samples, 0.87%)</title><rect x="1062.9" y="99.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1065.9" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="1071.5" y="83.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1074.5" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.15%)</title><rect x="1071.5" y="67.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1074.5" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (5 samples, 0.73%)</title><rect x="1073.2" y="147.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1076.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (4 samples, 0.58%)</title><rect x="1074.9" y="131.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1077.9" y="142.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.15%)</title><rect x="1080.1" y="115.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1083.1" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.15%)</title><rect x="1081.8" y="147.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1084.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (44 samples, 6.40%)</title><rect x="1083.5" y="291.0" width="75.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1086.5" y="302.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (44 samples, 6.40%)</title><rect x="1083.5" y="275.0" width="75.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1086.5" y="286.0">ru/mail/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (44 samples, 6.40%)</title><rect x="1083.5" y="259.0" width="75.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1086.5" y="270.0">com/goog..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (44 samples, 6.40%)</title><rect x="1083.5" y="243.0" width="75.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1086.5" y="254.0">com/goog..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable$1.next (44 samples, 6.40%)</title><rect x="1083.5" y="227.0" width="75.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1086.5" y="238.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable$1.next (44 samples, 6.40%)</title><rect x="1083.5" y="211.0" width="75.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1086.5" y="222.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable.getCell (44 samples, 6.40%)</title><rect x="1083.5" y="195.0" width="75.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1086.5" y="206.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/SSTable.getOffset (17 samples, 2.47%)</title><rect x="1083.5" y="179.0" width="29.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1086.5" y="190.0">ru..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (16 samples, 2.33%)</title><rect x="1085.2" y="163.0" width="27.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1088.2" y="174.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (16 samples, 2.33%)</title><rect x="1085.2" y="147.0" width="27.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1088.2" y="158.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (16 samples, 2.33%)</title><rect x="1085.2" y="131.0" width="27.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1088.2" y="142.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (16 samples, 2.33%)</title><rect x="1085.2" y="115.0" width="27.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1088.2" y="126.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (16 samples, 2.33%)</title><rect x="1085.2" y="99.0" width="27.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1088.2" y="110.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (16 samples, 2.33%)</title><rect x="1085.2" y="83.0" width="27.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1088.2" y="94.0">s..</text>
</g>
<g>
<title>rcmd_af.canonnamebuf (16 samples, 2.33%)</title><rect x="1085.2" y="67.0" width="27.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1088.2" y="78.0">r..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.read (27 samples, 3.93%)</title><rect x="1112.7" y="179.0" width="46.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1115.7" y="190.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.readInternal (27 samples, 3.93%)</title><rect x="1112.7" y="163.0" width="46.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1115.7" y="174.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 3.78%)</title><rect x="1112.7" y="147.0" width="44.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1115.7" y="158.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (24 samples, 3.49%)</title><rect x="1112.7" y="131.0" width="41.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1115.7" y="142.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread (24 samples, 3.49%)</title><rect x="1112.7" y="115.0" width="41.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1115.7" y="126.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.pread0 (24 samples, 3.49%)</title><rect x="1112.7" y="99.0" width="41.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1115.7" y="110.0">sun..</text>
</g>
<g>
<title>rcmd_af.canonnamebuf (24 samples, 3.49%)</title><rect x="1112.7" y="83.0" width="41.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1115.7" y="94.0">rcm..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.29%)</title><rect x="1153.9" y="131.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1156.9" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.15%)</title><rect x="1153.9" y="115.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1156.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.15%)</title><rect x="1155.6" y="115.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1158.6" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="1155.6" y="99.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1158.6" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.15%)</title><rect x="1157.4" y="147.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1160.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.15%)</title><rect x="1157.4" y="131.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1160.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (7 samples, 1.02%)</title><rect x="1159.1" y="291.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1162.1" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (7 samples, 1.02%)</title><rect x="1159.1" y="275.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1162.1" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (7 samples, 1.02%)</title><rect x="1159.1" y="259.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1162.1" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (7 samples, 1.02%)</title><rect x="1159.1" y="243.0" width="12.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1162.1" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (7 samples, 1.02%)</title><rect x="1159.1" y="227.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1162.1" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.44%)</title><rect x="1166.0" y="211.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1169.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.44%)</title><rect x="1166.0" y="195.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1169.0" y="206.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.29%)</title><rect x="1166.0" y="179.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1169.0" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.29%)</title><rect x="1166.0" y="163.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1169.0" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.29%)</title><rect x="1166.0" y="147.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1169.0" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="1169.4" y="179.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1172.4" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.15%)</title><rect x="1169.4" y="163.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1172.4" y="174.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.15%)</title><rect x="1171.1" y="371.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1174.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.15%)</title><rect x="1171.1" y="355.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1174.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.15%)</title><rect x="1171.1" y="339.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1174.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.15%)</title><rect x="1172.8" y="403.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1175.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.15%)</title><rect x="1172.8" y="387.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1175.8" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.15%)</title><rect x="1172.8" y="371.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1175.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.15%)</title><rect x="1172.8" y="355.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1175.8" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.15%)</title><rect x="1172.8" y="339.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1175.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (7 samples, 1.02%)</title><rect x="1174.5" y="419.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1177.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (7 samples, 1.02%)</title><rect x="1174.5" y="403.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1177.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (7 samples, 1.02%)</title><rect x="1174.5" y="387.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1177.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (7 samples, 1.02%)</title><rect x="1174.5" y="371.0" width="12.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1177.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (7 samples, 1.02%)</title><rect x="1174.5" y="355.0" width="12.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1177.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (7 samples, 1.02%)</title><rect x="1174.5" y="339.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1177.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (7 samples, 1.02%)</title><rect x="1174.5" y="323.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1177.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (7 samples, 1.02%)</title><rect x="1174.5" y="307.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1177.5" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (5 samples, 0.73%)</title><rect x="1178.0" y="291.0" width="8.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1181.0" y="302.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.29%)</title><rect x="1186.6" y="467.0" width="3.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1189.6" y="478.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.29%)</title><rect x="1186.6" y="451.0" width="3.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1189.6" y="462.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.29%)</title><rect x="1186.6" y="435.0" width="3.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1189.6" y="446.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.29%)</title><rect x="1186.6" y="419.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.6" y="430.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.15%)</title><rect x="1186.6" y="403.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="414.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.15%)</title><rect x="1186.6" y="387.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="398.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.15%)</title><rect x="1186.6" y="371.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="382.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.15%)</title><rect x="1186.6" y="355.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="366.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.15%)</title><rect x="1186.6" y="339.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.6" y="350.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.15%)</title><rect x="1186.6" y="323.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.15%)</title><rect x="1186.6" y="307.0" width="1.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1189.6" y="318.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.15%)</title><rect x="1188.3" y="403.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="414.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.15%)</title><rect x="1188.3" y="387.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.3" y="398.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.15%)</title><rect x="1188.3" y="371.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1191.3" y="382.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.15%)</title><rect x="1188.3" y="355.0" width="1.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1191.3" y="366.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.15%)</title><rect x="1188.3" y="339.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.3" y="350.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.15%)</title><rect x="1188.3" y="323.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1191.3" y="334.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.15%)</title><rect x="1188.3" y="307.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="318.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.15%)</title><rect x="1188.3" y="291.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1191.3" y="302.0"></text>
</g>
</g>
</svg>
