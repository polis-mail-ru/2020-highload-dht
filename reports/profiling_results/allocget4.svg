<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="373"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="373"> </text>
<g id="frames">
<g>
<title>all (6,709 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="13.0" y="350.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (4,096 samples, 61.05%)</title><rect x="10.0" y="323.0" width="720.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,096 samples, 61.05%)</title><rect x="10.0" y="307.0" width="720.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,096 samples, 61.05%)</title><rect x="10.0" y="291.0" width="720.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (58 samples, 0.86%)</title><rect x="10.0" y="275.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (58 samples, 0.86%)</title><rect x="10.0" y="259.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (56 samples, 0.83%)</title><rect x="10.0" y="243.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (56 samples, 0.83%)</title><rect x="10.0" y="227.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (56 samples, 0.83%)</title><rect x="10.0" y="211.0" width="9.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.03%)</title><rect x="19.8" y="243.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.03%)</title><rect x="19.8" y="227.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.03%)</title><rect x="19.8" y="211.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.03%)</title><rect x="19.8" y="195.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.8" y="206.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (2 samples, 0.03%)</title><rect x="19.8" y="179.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="22.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$73/1096742976.run (4,038 samples, 60.19%)</title><rect x="20.2" y="275.0" width="710.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.2" y="286.0">ru/mail/polis/service/suhova/MoribundService$$Lambda$73/1096742976.run</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (4,038 samples, 60.19%)</title><rect x="20.2" y="259.0" width="710.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.2" y="270.0">ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (221 samples, 3.29%)</title><rect x="20.2" y="243.0" width="38.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.2" y="254.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (221 samples, 3.29%)</title><rect x="20.2" y="227.0" width="38.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.2" y="238.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (100 samples, 1.49%)</title><rect x="20.2" y="211.0" width="17.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.2" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (100 samples, 1.49%)</title><rect x="20.2" y="195.0" width="17.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.2" y="206.0"></text>
</g>
<g>
<title>byte[] (100 samples, 1.49%)</title><rect x="20.2" y="179.0" width="17.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="23.2" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (121 samples, 1.80%)</title><rect x="37.8" y="211.0" width="21.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.8" y="222.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (58 samples, 0.86%)</title><rect x="37.8" y="195.0" width="10.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="40.8" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (63 samples, 0.94%)</title><rect x="48.0" y="195.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.0" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (63 samples, 0.94%)</title><rect x="48.0" y="179.0" width="11.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.0" y="190.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (63 samples, 0.94%)</title><rect x="48.0" y="163.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (63 samples, 0.94%)</title><rect x="48.0" y="147.0" width="11.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.0" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (63 samples, 0.94%)</title><rect x="48.0" y="131.0" width="11.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="51.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (922 samples, 13.74%)</title><rect x="59.1" y="243.0" width="162.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="62.1" y="254.0">ru/mail/polis/dao/suh..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (922 samples, 13.74%)</title><rect x="59.1" y="227.0" width="162.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.1" y="238.0">ru/mail/polis/dao/suh..</text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (104 samples, 1.55%)</title><rect x="59.1" y="211.0" width="18.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.1" y="222.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.makeHash (104 samples, 1.55%)</title><rect x="59.1" y="195.0" width="18.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.1" y="206.0"></text>
</g>
<g>
<title>byte[] (104 samples, 1.55%)</title><rect x="59.1" y="179.0" width="18.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="62.1" y="190.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (624 samples, 9.30%)</title><rect x="77.4" y="211.0" width="109.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.4" y="222.0">com/google/co..</text>
</g>
<g>
<title>com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher (239 samples, 3.56%)</title><rect x="77.4" y="195.0" width="42.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="80.4" y="206.0">com...</text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (385 samples, 5.74%)</title><rect x="119.4" y="195.0" width="67.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.4" y="206.0">com/goo..</text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (385 samples, 5.74%)</title><rect x="119.4" y="179.0" width="67.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.4" y="190.0">com/goo..</text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (385 samples, 5.74%)</title><rect x="119.4" y="163.0" width="67.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="122.4" y="174.0">com/goo..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (385 samples, 5.74%)</title><rect x="119.4" y="147.0" width="67.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.4" y="158.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (216 samples, 3.22%)</title><rect x="119.4" y="131.0" width="38.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="122.4" y="142.0">jav..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (169 samples, 2.52%)</title><rect x="157.4" y="131.0" width="29.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.4" y="142.0">ja..</text>
</g>
<g>
<title>byte[] (169 samples, 2.52%)</title><rect x="157.4" y="115.0" width="29.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="160.4" y="126.0">by..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (194 samples, 2.89%)</title><rect x="187.1" y="211.0" width="34.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.1" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1254344205.invoke (194 samples, 2.89%)</title><rect x="187.1" y="195.0" width="34.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="190.1" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (194 samples, 2.89%)</title><rect x="187.1" y="179.0" width="34.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="190.1" y="190.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (194 samples, 2.89%)</title><rect x="187.1" y="163.0" width="34.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.1" y="174.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (194 samples, 2.89%)</title><rect x="187.1" y="147.0" width="34.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.1" y="158.0">jd..</text>
</g>
<g>
<title>byte[] (194 samples, 2.89%)</title><rect x="187.1" y="131.0" width="34.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="190.1" y="142.0">by..</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.get (1,303 samples, 19.42%)</title><rect x="221.2" y="243.0" width="229.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.2" y="254.0">ru/mail/polis/service/suhova/M..</text>
</g>
<g>
<title>one.nio.http.Response (33 samples, 0.49%)</title><rect x="221.2" y="227.0" width="5.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="224.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (118 samples, 1.76%)</title><rect x="227.0" y="227.0" width="20.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.0" y="238.0"></text>
</g>
<g>
<title>byte[] (42 samples, 0.63%)</title><rect x="227.0" y="211.0" width="7.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="230.0" y="222.0"></text>
</g>
<g>
<title>java.lang.String[] (43 samples, 0.64%)</title><rect x="234.4" y="211.0" width="7.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="237.4" y="222.0"></text>
</g>
<g>
<title>java.lang.String (33 samples, 0.49%)</title><rect x="242.0" y="211.0" width="5.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="245.0" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (1,027 samples, 15.31%)</title><rect x="247.8" y="227.0" width="180.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.8" y="238.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (180 samples, 2.68%)</title><rect x="247.8" y="211.0" width="31.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.8" y="222.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (180 samples, 2.68%)</title><rect x="247.8" y="195.0" width="31.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="250.8" y="206.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (180 samples, 2.68%)</title><rect x="247.8" y="179.0" width="31.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.8" y="190.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (180 samples, 2.68%)</title><rect x="247.8" y="163.0" width="31.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="250.8" y="174.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (180 samples, 2.68%)</title><rect x="247.8" y="147.0" width="31.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.8" y="158.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (56 samples, 0.83%)</title><rect x="247.8" y="131.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.8" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (56 samples, 0.83%)</title><rect x="247.8" y="115.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.8" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (56 samples, 0.83%)</title><rect x="247.8" y="99.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.8" y="110.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (33 samples, 0.49%)</title><rect x="247.8" y="83.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$75/1957106782.apply (33 samples, 0.49%)</title><rect x="247.8" y="67.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.8" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (33 samples, 0.49%)</title><rect x="247.8" y="51.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.8" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Cell (33 samples, 0.49%)</title><rect x="247.8" y="35.0" width="5.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="250.8" y="46.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (23 samples, 0.34%)</title><rect x="253.6" y="83.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.6" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (23 samples, 0.34%)</title><rect x="253.6" y="67.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.6" y="78.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (23 samples, 0.34%)</title><rect x="253.6" y="51.0" width="4.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="256.6" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$78/1897373853.apply (124 samples, 1.85%)</title><rect x="257.6" y="131.0" width="21.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.6" y="142.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (124 samples, 1.85%)</title><rect x="257.6" y="115.0" width="21.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="260.6" y="126.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (124 samples, 1.85%)</title><rect x="257.6" y="99.0" width="21.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.6" y="110.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (124 samples, 1.85%)</title><rect x="257.6" y="83.0" width="21.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="260.6" y="94.0">j..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (149 samples, 2.22%)</title><rect x="279.5" y="211.0" width="26.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.5" y="222.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (149 samples, 2.22%)</title><rect x="279.5" y="195.0" width="26.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.5" y="206.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$80/2032269307.apply (149 samples, 2.22%)</title><rect x="279.5" y="179.0" width="26.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.5" y="190.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.lambda$iterator$4 (149 samples, 2.22%)</title><rect x="279.5" y="163.0" width="26.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.5" y="174.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/Record.of (29 samples, 0.43%)</title><rect x="279.5" y="147.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.5" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Record (29 samples, 0.43%)</title><rect x="279.5" y="131.0" width="5.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="282.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (66 samples, 0.98%)</title><rect x="284.6" y="147.0" width="11.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.6" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (66 samples, 0.98%)</title><rect x="284.6" y="131.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.6" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (66 samples, 0.98%)</title><rect x="284.6" y="115.0" width="11.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="287.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.getData (54 samples, 0.80%)</title><rect x="296.2" y="147.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="299.2" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (54 samples, 0.80%)</title><rect x="296.2" y="131.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.2" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (54 samples, 0.80%)</title><rect x="296.2" y="115.0" width="9.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="299.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Record.getKey (69 samples, 1.03%)</title><rect x="305.7" y="211.0" width="12.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="308.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (69 samples, 1.03%)</title><rect x="305.7" y="195.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.7" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (69 samples, 1.03%)</title><rect x="305.7" y="179.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.7" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (69 samples, 1.03%)</title><rect x="305.7" y="163.0" width="12.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="308.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Record.getValue (61 samples, 0.91%)</title><rect x="317.8" y="211.0" width="10.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="320.8" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (61 samples, 0.91%)</title><rect x="317.8" y="195.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="320.8" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (61 samples, 0.91%)</title><rect x="317.8" y="179.0" width="10.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="320.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.iterator (568 samples, 8.47%)</title><rect x="328.5" y="211.0" width="99.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.5" y="222.0">ru/mail/poli..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (39 samples, 0.58%)</title><rect x="328.5" y="195.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.5" y="206.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (39 samples, 0.58%)</title><rect x="328.5" y="179.0" width="6.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="331.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock (2 samples, 0.03%)</title><rect x="335.4" y="195.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="335.4" y="179.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.03%)</title><rect x="335.4" y="163.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.4" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (2 samples, 0.03%)</title><rect x="335.4" y="147.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="338.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (527 samples, 7.86%)</title><rect x="335.7" y="195.0" width="92.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.7" y="206.0">ru/mail/pol..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (155 samples, 2.31%)</title><rect x="335.7" y="179.0" width="27.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.7" y="190.0">c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (18 samples, 0.27%)</title><rect x="335.7" y="163.0" width="3.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="338.7" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (137 samples, 2.04%)</title><rect x="338.9" y="163.0" width="24.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="341.9" y="174.0">c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (32 samples, 0.48%)</title><rect x="338.9" y="147.0" width="5.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="341.9" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (35 samples, 0.52%)</title><rect x="344.5" y="147.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="347.5" y="158.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (35 samples, 0.52%)</title><rect x="344.5" y="131.0" width="6.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="347.5" y="142.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (44 samples, 0.66%)</title><rect x="350.7" y="147.0" width="7.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="353.7" y="158.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (26 samples, 0.39%)</title><rect x="358.4" y="147.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.4" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (26 samples, 0.39%)</title><rect x="358.4" y="131.0" width="4.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="361.4" y="142.0"></text>
</g>
<g>
<title>java.util.ArrayList (31 samples, 0.46%)</title><rect x="363.0" y="179.0" width="5.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="366.0" y="190.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (88 samples, 1.31%)</title><rect x="368.4" y="179.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="371.4" y="190.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (48 samples, 0.72%)</title><rect x="368.4" y="163.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.4" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (48 samples, 0.72%)</title><rect x="368.4" y="147.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.4" y="158.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (48 samples, 0.72%)</title><rect x="368.4" y="131.0" width="8.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="371.4" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (40 samples, 0.60%)</title><rect x="376.9" y="163.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="379.9" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (40 samples, 0.60%)</title><rect x="376.9" y="147.0" width="7.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="379.9" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (22 samples, 0.33%)</title><rect x="383.9" y="179.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="386.9" y="190.0"></text>
</g>
<g>
<title>java.lang.Object[] (22 samples, 0.33%)</title><rect x="383.9" y="163.0" width="3.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="386.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (96 samples, 1.43%)</title><rect x="387.8" y="179.0" width="16.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.8" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (29 samples, 0.43%)</title><rect x="387.8" y="163.0" width="5.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="390.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (67 samples, 1.00%)</title><rect x="392.9" y="163.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.9" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (67 samples, 1.00%)</title><rect x="392.9" y="147.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.9" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (67 samples, 1.00%)</title><rect x="392.9" y="131.0" width="11.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="395.9" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (67 samples, 1.00%)</title><rect x="392.9" y="115.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.9" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (40 samples, 0.60%)</title><rect x="392.9" y="99.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$75/1957106782.apply (40 samples, 0.60%)</title><rect x="392.9" y="83.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.9" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (40 samples, 0.60%)</title><rect x="392.9" y="67.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.9" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Cell (40 samples, 0.60%)</title><rect x="392.9" y="51.0" width="7.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="395.9" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (27 samples, 0.40%)</title><rect x="399.9" y="99.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="402.9" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (27 samples, 0.40%)</title><rect x="399.9" y="83.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.9" y="94.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (27 samples, 0.40%)</title><rect x="399.9" y="67.0" width="4.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="402.9" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (135 samples, 2.01%)</title><rect x="404.7" y="179.0" width="23.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.7" y="190.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (16 samples, 0.24%)</title><rect x="404.7" y="163.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.7" y="174.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (16 samples, 0.24%)</title><rect x="404.7" y="147.0" width="2.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="407.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (42 samples, 0.63%)</title><rect x="407.5" y="163.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.5" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (42 samples, 0.63%)</title><rect x="407.5" y="147.0" width="7.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="410.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (13 samples, 0.19%)</title><rect x="414.9" y="163.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="417.9" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (13 samples, 0.19%)</title><rect x="414.9" y="147.0" width="2.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="417.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (64 samples, 0.95%)</title><rect x="417.2" y="163.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="420.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (64 samples, 0.95%)</title><rect x="417.2" y="147.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.2" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (64 samples, 0.95%)</title><rect x="417.2" y="131.0" width="11.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="420.2" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (64 samples, 0.95%)</title><rect x="417.2" y="115.0" width="11.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="420.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteArray (41 samples, 0.61%)</title><rect x="428.4" y="227.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="431.4" y="238.0"></text>
</g>
<g>
<title>byte[] (41 samples, 0.61%)</title><rect x="428.4" y="211.0" width="7.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="431.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteBuffer (84 samples, 1.25%)</title><rect x="435.6" y="227.0" width="14.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.6" y="238.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (24 samples, 0.36%)</title><rect x="435.6" y="211.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.6" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (24 samples, 0.36%)</title><rect x="435.6" y="195.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="438.6" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (24 samples, 0.36%)</title><rect x="435.6" y="179.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="438.6" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (24 samples, 0.36%)</title><rect x="435.6" y="163.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.6" y="174.0"></text>
</g>
<g>
<title>byte[] (24 samples, 0.36%)</title><rect x="435.6" y="147.0" width="4.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="438.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (60 samples, 0.89%)</title><rect x="439.9" y="211.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="442.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (60 samples, 0.89%)</title><rect x="439.9" y="195.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="442.9" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (60 samples, 0.89%)</title><rect x="439.9" y="179.0" width="10.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="442.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.proxy (1,592 samples, 23.73%)</title><rect x="450.4" y="243.0" width="280.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="453.4" y="254.0">ru/mail/polis/service/suhova/MoribundS..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,592 samples, 23.73%)</title><rect x="450.4" y="227.0" width="280.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="453.4" y="238.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,592 samples, 23.73%)</title><rect x="450.4" y="211.0" width="280.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="453.4" y="222.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (5 samples, 0.07%)</title><rect x="450.4" y="195.0" width="0.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="453.4" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (1,485 samples, 22.13%)</title><rect x="451.3" y="195.0" width="261.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.3" y="206.0">one/nio/http/HttpClient$ResponseRea..</text>
</g>
<g>
<title>byte[] (756 samples, 11.27%)</title><rect x="451.3" y="179.0" width="133.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="454.3" y="190.0">byte[]</text>
</g>
<g>
<title>byte[] (679 samples, 10.12%)</title><rect x="584.3" y="179.0" width="119.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="587.3" y="190.0">byte[]</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (50 samples, 0.75%)</title><rect x="703.7" y="179.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="706.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (50 samples, 0.75%)</title><rect x="703.7" y="163.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.7" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (50 samples, 0.75%)</title><rect x="703.7" y="147.0" width="8.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="706.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (73 samples, 1.09%)</title><rect x="712.5" y="195.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="715.5" y="206.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.03%)</title><rect x="712.5" y="179.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="715.5" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.09%)</title><rect x="712.8" y="179.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="715.8" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.09%)</title><rect x="712.8" y="163.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="715.8" y="174.0"></text>
</g>
<g>
<title>java.lang.String (4 samples, 0.06%)</title><rect x="712.8" y="147.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="715.8" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="713.5" y="147.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="716.5" y="158.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.03%)</title><rect x="713.5" y="131.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="716.5" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (54 samples, 0.80%)</title><rect x="714.1" y="179.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="717.1" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (54 samples, 0.80%)</title><rect x="714.1" y="163.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.1" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (54 samples, 0.80%)</title><rect x="714.1" y="147.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="717.1" y="158.0"></text>
</g>
<g>
<title>char[] (30 samples, 0.45%)</title><rect x="714.1" y="131.0" width="5.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="717.1" y="142.0"></text>
</g>
<g>
<title>java.lang.String (14 samples, 0.21%)</title><rect x="719.3" y="131.0" width="2.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="722.3" y="142.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.15%)</title><rect x="721.8" y="131.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="724.8" y="142.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.15%)</title><rect x="721.8" y="115.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="724.8" y="126.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (10 samples, 0.15%)</title><rect x="721.8" y="99.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="724.8" y="110.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.15%)</title><rect x="721.8" y="83.0" width="1.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="724.8" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.07%)</title><rect x="723.6" y="179.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="726.6" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (5 samples, 0.07%)</title><rect x="723.6" y="163.0" width="0.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="726.6" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (5 samples, 0.07%)</title><rect x="724.4" y="179.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="727.4" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.07%)</title><rect x="724.4" y="163.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="727.4" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.07%)</title><rect x="724.4" y="147.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="727.4" y="158.0"></text>
</g>
<g>
<title>java.lang.String (3 samples, 0.04%)</title><rect x="724.4" y="131.0" width="0.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="727.4" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="725.0" y="131.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="728.0" y="142.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.03%)</title><rect x="725.0" y="115.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="728.0" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (7 samples, 0.10%)</title><rect x="725.3" y="195.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="728.3" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (7 samples, 0.10%)</title><rect x="725.3" y="179.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="728.3" y="190.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.10%)</title><rect x="725.3" y="163.0" width="1.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="728.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (9 samples, 0.13%)</title><rect x="726.5" y="195.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.13%)</title><rect x="726.5" y="179.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.5" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.13%)</title><rect x="726.5" y="163.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="729.5" y="174.0"></text>
</g>
<g>
<title>java.lang.String (4 samples, 0.06%)</title><rect x="726.5" y="147.0" width="0.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="729.5" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.07%)</title><rect x="727.3" y="147.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.3" y="158.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.07%)</title><rect x="727.3" y="131.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="730.3" y="142.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (9 samples, 0.13%)</title><rect x="728.1" y="195.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.1" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (5 samples, 0.07%)</title><rect x="728.1" y="179.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="731.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.07%)</title><rect x="728.1" y="163.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="731.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.07%)</title><rect x="728.1" y="147.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="731.1" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5 samples, 0.07%)</title><rect x="728.1" y="131.0" width="0.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="731.1" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (4 samples, 0.06%)</title><rect x="729.0" y="179.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="732.0" y="190.0"></text>
</g>
<g>
<title>sun.nio.ch.SocketAdaptor$2 (3 samples, 0.04%)</title><rect x="729.2" y="163.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="732.2" y="174.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (4 samples, 0.06%)</title><rect x="729.7" y="195.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="732.7" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (4 samples, 0.06%)</title><rect x="729.7" y="179.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="732.7" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (4 samples, 0.06%)</title><rect x="729.7" y="163.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="732.7" y="174.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (4 samples, 0.06%)</title><rect x="729.7" y="147.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="732.7" y="158.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,613 samples, 38.95%)</title><rect x="730.4" y="323.0" width="459.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="733.4" y="334.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (405 samples, 6.04%)</title><rect x="730.4" y="307.0" width="71.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="733.4" y="318.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (186 samples, 2.77%)</title><rect x="730.4" y="291.0" width="32.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="733.4" y="302.0">on..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (80 samples, 1.19%)</title><rect x="730.4" y="275.0" width="14.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="733.4" y="286.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (106 samples, 1.58%)</title><rect x="744.5" y="275.0" width="18.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="747.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (219 samples, 3.26%)</title><rect x="763.1" y="291.0" width="38.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="766.1" y="302.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (219 samples, 3.26%)</title><rect x="763.1" y="275.0" width="38.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="766.1" y="286.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (219 samples, 3.26%)</title><rect x="763.1" y="259.0" width="38.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="766.1" y="270.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (219 samples, 3.26%)</title><rect x="763.1" y="243.0" width="38.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="766.1" y="254.0">sun..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (72 samples, 1.07%)</title><rect x="763.1" y="227.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="766.1" y="238.0"></text>
</g>
<g>
<title>java.lang.Integer (72 samples, 1.07%)</title><rect x="763.1" y="211.0" width="12.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="766.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (147 samples, 2.19%)</title><rect x="775.8" y="227.0" width="25.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="778.8" y="238.0">s..</text>
</g>
<g>
<title>java/util/HashSet.add (147 samples, 2.19%)</title><rect x="775.8" y="211.0" width="25.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="778.8" y="222.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (147 samples, 2.19%)</title><rect x="775.8" y="195.0" width="25.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="778.8" y="206.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (147 samples, 2.19%)</title><rect x="775.8" y="179.0" width="25.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="778.8" y="190.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (147 samples, 2.19%)</title><rect x="775.8" y="163.0" width="25.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.8" y="174.0">j..</text>
</g>
<g>
<title>java.util.HashMap$Node (147 samples, 2.19%)</title><rect x="775.8" y="147.0" width="25.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="778.8" y="158.0">j..</text>
</g>
<g>
<title>one/nio/net/Session.process (2,208 samples, 32.91%)</title><rect x="801.7" y="307.0" width="388.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="804.7" y="318.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,208 samples, 32.91%)</title><rect x="801.7" y="291.0" width="388.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="804.7" y="302.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,001 samples, 29.83%)</title><rect x="801.7" y="275.0" width="351.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="804.7" y="286.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (558 samples, 8.32%)</title><rect x="801.7" y="259.0" width="98.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="804.7" y="270.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (558 samples, 8.32%)</title><rect x="801.7" y="243.0" width="98.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="804.7" y="254.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (335 samples, 4.99%)</title><rect x="801.7" y="227.0" width="58.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="804.7" y="238.0">Reques..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (193 samples, 2.88%)</title><rect x="801.7" y="211.0" width="33.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="804.7" y="222.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (193 samples, 2.88%)</title><rect x="801.7" y="195.0" width="33.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.7" y="206.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (193 samples, 2.88%)</title><rect x="801.7" y="179.0" width="33.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="804.7" y="190.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (193 samples, 2.88%)</title><rect x="801.7" y="163.0" width="33.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="804.7" y="174.0">ja..</text>
</g>
<g>
<title>java.lang.String (125 samples, 1.86%)</title><rect x="801.7" y="147.0" width="21.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="804.7" y="158.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (68 samples, 1.01%)</title><rect x="823.6" y="147.0" width="12.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="826.6" y="158.0"></text>
</g>
<g>
<title>byte[] (68 samples, 1.01%)</title><rect x="823.6" y="131.0" width="12.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="826.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (142 samples, 2.12%)</title><rect x="835.6" y="211.0" width="25.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="838.6" y="222.0">r..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (140 samples, 2.09%)</title><rect x="835.6" y="195.0" width="24.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="838.6" y="206.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (140 samples, 2.09%)</title><rect x="835.6" y="179.0" width="24.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.6" y="190.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$73/1096742976.get$Lambda (140 samples, 2.09%)</title><rect x="835.6" y="163.0" width="24.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="838.6" y="174.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.suhova.MoribundService$$Lambda$73 (140 samples, 2.09%)</title><rect x="835.6" y="147.0" width="24.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="838.6" y="158.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.03%)</title><rect x="860.2" y="195.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="863.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.03%)</title><rect x="860.2" y="179.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="863.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="860.2" y="163.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="863.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="860.2" y="147.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="863.2" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.03%)</title><rect x="860.2" y="131.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="863.2" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (2 samples, 0.03%)</title><rect x="860.2" y="115.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="863.2" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (223 samples, 3.32%)</title><rect x="860.6" y="227.0" width="39.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="863.6" y="238.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (223 samples, 3.32%)</title><rect x="860.6" y="211.0" width="39.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="863.6" y="222.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (223 samples, 3.32%)</title><rect x="860.6" y="195.0" width="39.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="863.6" y="206.0">jav..</text>
</g>
<g>
<title>java.lang.String (84 samples, 1.25%)</title><rect x="860.6" y="179.0" width="14.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="863.6" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (139 samples, 2.07%)</title><rect x="875.3" y="179.0" width="24.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="878.3" y="190.0">j..</text>
</g>
<g>
<title>byte[] (139 samples, 2.07%)</title><rect x="875.3" y="163.0" width="24.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="878.3" y="174.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (969 samples, 14.44%)</title><rect x="899.8" y="259.0" width="170.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="902.8" y="270.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one.nio.http.Request (161 samples, 2.40%)</title><rect x="899.8" y="243.0" width="28.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="902.8" y="254.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (331 samples, 4.93%)</title><rect x="928.1" y="243.0" width="58.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="931.1" y="254.0">one/ni..</text>
</g>
<g>
<title>java.lang.String[] (331 samples, 4.93%)</title><rect x="928.1" y="227.0" width="58.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="931.1" y="238.0">java.l..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (477 samples, 7.11%)</title><rect x="986.3" y="243.0" width="83.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="989.3" y="254.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (477 samples, 7.11%)</title><rect x="986.3" y="227.0" width="83.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="989.3" y="238.0">one/nio/u..</text>
</g>
<g>
<title>char[] (259 samples, 3.86%)</title><rect x="986.3" y="211.0" width="45.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="989.3" y="222.0">char[]</text>
</g>
<g>
<title>java.lang.String (68 samples, 1.01%)</title><rect x="1031.9" y="211.0" width="11.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1034.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (150 samples, 2.24%)</title><rect x="1043.8" y="211.0" width="26.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1046.8" y="222.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (150 samples, 2.24%)</title><rect x="1043.8" y="195.0" width="26.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1046.8" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (150 samples, 2.24%)</title><rect x="1043.8" y="179.0" width="26.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.8" y="190.0">j..</text>
</g>
<g>
<title>byte[] (150 samples, 2.24%)</title><rect x="1043.8" y="163.0" width="26.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1046.8" y="174.0">b..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (474 samples, 7.07%)</title><rect x="1070.2" y="259.0" width="83.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1073.2" y="270.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (474 samples, 7.07%)</title><rect x="1070.2" y="243.0" width="83.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1073.2" y="254.0">one/nio/u..</text>
</g>
<g>
<title>char[] (238 samples, 3.55%)</title><rect x="1070.2" y="227.0" width="41.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1073.2" y="238.0">cha..</text>
</g>
<g>
<title>java.lang.String (93 samples, 1.39%)</title><rect x="1112.1" y="227.0" width="16.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1115.1" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (143 samples, 2.13%)</title><rect x="1128.4" y="227.0" width="25.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1131.4" y="238.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (143 samples, 2.13%)</title><rect x="1128.4" y="211.0" width="25.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1131.4" y="222.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (143 samples, 2.13%)</title><rect x="1128.4" y="195.0" width="25.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1131.4" y="206.0">j..</text>
</g>
<g>
<title>byte[] (143 samples, 2.13%)</title><rect x="1128.4" y="179.0" width="25.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1131.4" y="190.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.read (207 samples, 3.09%)</title><rect x="1153.6" y="275.0" width="36.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1156.6" y="286.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (207 samples, 3.09%)</title><rect x="1153.6" y="259.0" width="36.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1156.6" y="270.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (207 samples, 3.09%)</title><rect x="1153.6" y="243.0" width="36.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1156.6" y="254.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (207 samples, 3.09%)</title><rect x="1153.6" y="227.0" width="36.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1156.6" y="238.0">jav..</text>
</g>
</g>
</svg>
