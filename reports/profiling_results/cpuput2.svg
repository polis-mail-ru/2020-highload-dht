<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="437"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="437"> </text>
<g id="frames">
<g>
<title>all (1,162 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="414.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,154 samples, 99.31%)</title><rect x="10.0" y="387.0" width="1171.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="398.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (4 samples, 0.34%)</title><rect x="11.0" y="371.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.0" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (2 samples, 0.17%)</title><rect x="15.1" y="371.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.1" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (2 samples, 0.17%)</title><rect x="15.1" y="355.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.17%)</title><rect x="15.1" y="339.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.1" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (522 samples, 44.92%)</title><rect x="17.1" y="371.0" width="530.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.1" y="382.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.26%)</title><rect x="17.1" y="355.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (14 samples, 1.20%)</title><rect x="20.2" y="355.0" width="14.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.2" y="366.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.17%)</title><rect x="20.2" y="339.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="23.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (8 samples, 0.69%)</title><rect x="22.2" y="339.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (7 samples, 0.60%)</title><rect x="23.2" y="323.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.2" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (4 samples, 0.34%)</title><rect x="23.2" y="307.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.2" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.09%)</title><rect x="26.2" y="291.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.2" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (3 samples, 0.26%)</title><rect x="27.3" y="307.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.3" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (3 samples, 0.26%)</title><rect x="27.3" y="291.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.3" y="302.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.34%)</title><rect x="30.3" y="339.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="33.3" y="350.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.09%)</title><rect x="32.3" y="323.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="35.3" y="334.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.09%)</title><rect x="33.4" y="323.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="36.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (505 samples, 43.46%)</title><rect x="34.4" y="355.0" width="512.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="37.4" y="366.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (505 samples, 43.46%)</title><rect x="34.4" y="339.0" width="512.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.4" y="350.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (505 samples, 43.46%)</title><rect x="34.4" y="323.0" width="512.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.4" y="334.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (472 samples, 40.62%)</title><rect x="35.4" y="307.0" width="479.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.4" y="318.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.26%)</title><rect x="52.7" y="291.0" width="3.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="55.7" y="302.0"></text>
</g>
<g>
<title>kevent (452 samples, 38.90%)</title><rect x="55.7" y="291.0" width="459.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="58.7" y="302.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.09%)</title><rect x="514.7" y="307.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="517.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.09%)</title><rect x="514.7" y="291.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="517.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="514.7" y="275.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="517.7" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="514.7" y="259.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="517.7" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="514.7" y="243.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="517.7" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="514.7" y="227.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="517.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (6 samples, 0.52%)</title><rect x="515.7" y="307.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="518.7" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.09%)</title><rect x="518.8" y="291.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="521.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="518.8" y="275.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="521.8" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.17%)</title><rect x="519.8" y="291.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="522.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (25 samples, 2.15%)</title><rect x="521.8" y="307.0" width="25.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="524.8" y="318.0">s..</text>
</g>
<g>
<title>java/util/HashSet.iterator (20 samples, 1.72%)</title><rect x="526.9" y="291.0" width="20.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (11 samples, 0.95%)</title><rect x="527.9" y="275.0" width="11.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="530.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (11 samples, 0.95%)</title><rect x="527.9" y="259.0" width="11.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="530.9" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (11 samples, 0.95%)</title><rect x="527.9" y="243.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.9" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (8 samples, 0.69%)</title><rect x="539.1" y="275.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="542.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="546.2" y="259.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="549.2" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="546.2" y="243.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="549.2" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.09%)</title><rect x="546.2" y="227.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.2" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (625 samples, 53.79%)</title><rect x="547.2" y="371.0" width="634.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="550.2" y="382.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (625 samples, 53.79%)</title><rect x="547.2" y="355.0" width="634.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="550.2" y="366.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (501 samples, 43.12%)</title><rect x="547.2" y="339.0" width="508.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="550.2" y="350.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (449 samples, 38.64%)</title><rect x="548.2" y="323.0" width="456.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="551.2" y="334.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.09%)</title><rect x="548.2" y="307.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="551.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (448 samples, 38.55%)</title><rect x="549.2" y="307.0" width="455.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.2" y="318.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (427 samples, 36.75%)</title><rect x="549.2" y="291.0" width="433.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="552.2" y="302.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (302 samples, 25.99%)</title><rect x="549.2" y="275.0" width="306.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="552.2" y="286.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.34%)</title><rect x="551.3" y="259.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="554.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.34%)</title><rect x="551.3" y="243.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="554.3" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.34%)</title><rect x="551.3" y="227.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="554.3" y="238.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.34%)</title><rect x="551.3" y="211.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="554.3" y="222.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.34%)</title><rect x="551.3" y="195.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="554.3" y="206.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (4 samples, 0.34%)</title><rect x="551.3" y="179.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="554.3" y="190.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (4 samples, 0.34%)</title><rect x="551.3" y="163.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="554.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (286 samples, 24.61%)</title><rect x="555.3" y="259.0" width="290.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="558.3" y="270.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 1.20%)</title><rect x="555.3" y="243.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="558.3" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.26%)</title><rect x="566.5" y="227.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="569.5" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.26%)</title><rect x="566.5" y="211.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="569.5" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.26%)</title><rect x="566.5" y="195.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="569.5" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.26%)</title><rect x="566.5" y="179.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="569.5" y="190.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.26%)</title><rect x="566.5" y="163.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="569.5" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (272 samples, 23.41%)</title><rect x="569.5" y="243.0" width="276.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="572.5" y="254.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (272 samples, 23.41%)</title><rect x="569.5" y="227.0" width="276.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="572.5" y="238.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (271 samples, 23.32%)</title><rect x="570.6" y="211.0" width="275.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.6" y="222.0">one/nio/net/Session$ArrayQueueItem.wr..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (271 samples, 23.32%)</title><rect x="570.6" y="195.0" width="275.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="573.6" y="206.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.69%)</title><rect x="570.6" y="179.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="573.6" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.69%)</title><rect x="570.6" y="163.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="573.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.69%)</title><rect x="570.6" y="147.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="573.6" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.52%)</title><rect x="571.6" y="131.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="574.6" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.26%)</title><rect x="572.6" y="115.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="575.6" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.26%)</title><rect x="572.6" y="99.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.6" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.26%)</title><rect x="572.6" y="83.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="575.6" y="94.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.17%)</title><rect x="572.6" y="67.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="575.6" y="78.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="574.6" y="67.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="577.6" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.17%)</title><rect x="575.6" y="115.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="578.6" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.17%)</title><rect x="575.6" y="99.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="578.6" y="110.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.17%)</title><rect x="575.6" y="83.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="578.6" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.09%)</title><rect x="577.7" y="131.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="580.7" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (263 samples, 22.63%)</title><rect x="578.7" y="179.0" width="267.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="581.7" y="190.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.17%)</title><rect x="579.7" y="163.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.17%)</title><rect x="579.7" y="147.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="582.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.17%)</title><rect x="579.7" y="131.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.17%)</title><rect x="579.7" y="115.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="582.7" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="579.7" y="99.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="582.7" y="110.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="579.7" y="83.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="582.7" y="94.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="579.7" y="67.0" width="1.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="582.7" y="78.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.09%)</title><rect x="579.7" y="51.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="582.7" y="62.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.09%)</title><rect x="579.7" y="35.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="582.7" y="46.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="580.7" y="99.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="583.7" y="110.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.09%)</title><rect x="580.7" y="83.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="583.7" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (260 samples, 22.38%)</title><rect x="581.7" y="163.0" width="264.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.7" y="174.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (260 samples, 22.38%)</title><rect x="581.7" y="147.0" width="264.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.7" y="158.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (7 samples, 0.60%)</title><rect x="581.7" y="131.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="584.7" y="142.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (7 samples, 0.60%)</title><rect x="581.7" y="115.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.7" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (7 samples, 0.60%)</title><rect x="581.7" y="99.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.7" y="110.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (6 samples, 0.52%)</title><rect x="582.7" y="83.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="585.7" y="94.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (6 samples, 0.52%)</title><rect x="582.7" y="67.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="585.7" y="78.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (3 samples, 0.26%)</title><rect x="582.7" y="51.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="585.7" y="62.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.26%)</title><rect x="585.8" y="51.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.8" y="62.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.17%)</title><rect x="586.8" y="35.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="589.8" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (253 samples, 21.77%)</title><rect x="588.8" y="131.0" width="256.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.8" y="142.0">sun/nio/ch/IOUtil.writeFromNativeB..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (253 samples, 21.77%)</title><rect x="588.8" y="115.0" width="256.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="591.8" y="126.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (253 samples, 21.77%)</title><rect x="588.8" y="99.0" width="256.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="591.8" y="110.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.09%)</title><rect x="594.9" y="83.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="597.9" y="94.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.09%)</title><rect x="595.9" y="83.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="598.9" y="94.0"></text>
</g>
<g>
<title>write (245 samples, 21.08%)</title><rect x="597.0" y="83.0" width="248.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="600.0" y="94.0">write</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.86%)</title><rect x="845.7" y="259.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="848.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.69%)</title><rect x="845.7" y="243.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="848.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.09%)</title><rect x="847.8" y="227.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="850.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.43%)</title><rect x="848.8" y="227.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="851.8" y="238.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.17%)</title><rect x="848.8" y="211.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="851.8" y="222.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.17%)</title><rect x="848.8" y="195.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.8" y="206.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.17%)</title><rect x="848.8" y="179.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.8" y="190.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.26%)</title><rect x="850.8" y="211.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="853.8" y="222.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.09%)</title><rect x="852.9" y="195.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="855.9" y="206.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.09%)</title><rect x="852.9" y="179.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="855.9" y="190.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.09%)</title><rect x="852.9" y="163.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="855.9" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.09%)</title><rect x="852.9" y="147.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.9" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.17%)</title><rect x="853.9" y="243.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="856.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.09%)</title><rect x="854.9" y="227.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="857.9" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="854.9" y="211.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (8 samples, 0.69%)</title><rect x="855.9" y="275.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="858.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 0.69%)</title><rect x="855.9" y="259.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="858.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.26%)</title><rect x="856.9" y="243.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="859.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.09%)</title><rect x="859.0" y="227.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="862.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.09%)</title><rect x="860.0" y="243.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="863.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.09%)</title><rect x="861.0" y="243.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="864.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.09%)</title><rect x="861.0" y="227.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="864.0" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="861.0" y="211.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="864.0" y="222.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.17%)</title><rect x="862.0" y="243.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="865.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.17%)</title><rect x="862.0" y="227.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="865.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.17%)</title><rect x="862.0" y="211.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="865.0" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.17%)</title><rect x="862.0" y="195.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="865.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.put (117 samples, 10.07%)</title><rect x="864.0" y="275.0" width="118.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="867.0" y="286.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.17%)</title><rect x="866.1" y="259.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="869.1" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.17%)</title><rect x="866.1" y="243.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="869.1" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="866.1" y="227.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="869.1" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="866.1" y="211.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="869.1" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="866.1" y="195.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="869.1" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.17%)</title><rect x="866.1" y="179.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="869.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="867.1" y="163.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="870.1" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.09%)</title><rect x="867.1" y="147.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="870.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (110 samples, 9.47%)</title><rect x="868.1" y="259.0" width="111.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="871.1" y="270.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (10 samples, 0.86%)</title><rect x="872.2" y="243.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="875.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (10 samples, 0.86%)</title><rect x="872.2" y="227.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="875.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (10 samples, 0.86%)</title><rect x="872.2" y="211.0" width="10.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="875.2" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="876.2" y="195.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="879.2" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.17%)</title><rect x="876.2" y="179.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="879.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (2 samples, 0.17%)</title><rect x="876.2" y="163.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="879.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (2 samples, 0.17%)</title><rect x="876.2" y="147.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="879.2" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$HoldCounter.&lt;init&gt; (2 samples, 0.17%)</title><rect x="876.2" y="131.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="879.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (3 samples, 0.26%)</title><rect x="878.2" y="195.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="881.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (3 samples, 0.26%)</title><rect x="878.2" y="179.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="881.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (1 samples, 0.09%)</title><rect x="881.3" y="195.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="884.3" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="881.3" y="179.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="884.3" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.09%)</title><rect x="881.3" y="163.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="884.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.upsert (96 samples, 8.26%)</title><rect x="882.3" y="243.0" width="97.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="885.3" y="254.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (90 samples, 7.75%)</title><rect x="882.3" y="227.0" width="91.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="885.3" y="238.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (90 samples, 7.75%)</title><rect x="882.3" y="211.0" width="91.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="885.3" y="222.0">java/util/c..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (10 samples, 0.86%)</title><rect x="923.9" y="195.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="926.9" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (5 samples, 0.43%)</title><rect x="929.0" y="179.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="932.0" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.09%)</title><rect x="933.1" y="163.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="936.1" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.09%)</title><rect x="934.1" y="195.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="937.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.09%)</title><rect x="934.1" y="179.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="937.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (38 samples, 3.27%)</title><rect x="935.1" y="195.0" width="38.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.1" y="206.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (36 samples, 3.10%)</title><rect x="937.1" y="179.0" width="36.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="940.1" y="190.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (35 samples, 3.01%)</title><rect x="938.2" y="163.0" width="35.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="941.2" y="174.0">jav..</text>
</g>
<g>
<title>java/nio/Buffer.position (11 samples, 0.95%)</title><rect x="943.2" y="147.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="946.2" y="158.0"></text>
</g>
<g>
<title>vectorizedMismatch (10 samples, 0.86%)</title><rect x="944.3" y="131.0" width="10.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="947.3" y="142.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (18 samples, 1.55%)</title><rect x="954.4" y="147.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="957.4" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.86%)</title><rect x="962.5" y="131.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="965.5" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.17%)</title><rect x="965.6" y="115.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="968.6" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (5 samples, 0.43%)</title><rect x="967.6" y="115.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="970.6" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.09%)</title><rect x="972.7" y="147.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="975.7" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.09%)</title><rect x="972.7" y="131.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="975.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.&lt;init&gt; (6 samples, 0.52%)</title><rect x="973.7" y="227.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="976.7" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.43%)</title><rect x="974.7" y="211.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="977.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.43%)</title><rect x="974.7" y="195.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="977.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.43%)</title><rect x="974.7" y="179.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="977.7" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.34%)</title><rect x="975.7" y="163.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="978.7" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.09%)</title><rect x="975.7" y="147.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="978.7" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="976.7" y="147.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.7" y="158.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="977.8" y="147.0" width="2.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="980.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteBuffer (3 samples, 0.26%)</title><rect x="979.8" y="259.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="982.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.09%)</title><rect x="979.8" y="243.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="982.8" y="254.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.09%)</title><rect x="979.8" y="227.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="982.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.09%)</title><rect x="979.8" y="211.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="982.8" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="979.8" y="195.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="982.8" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.17%)</title><rect x="980.8" y="243.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="983.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.17%)</title><rect x="980.8" y="227.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="983.8" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="980.8" y="211.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="983.8" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="980.8" y="195.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="983.8" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="980.8" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="983.8" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="980.8" y="163.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="983.8" y="174.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="980.8" y="147.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="983.8" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="980.8" y="131.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="983.8" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.09%)</title><rect x="980.8" y="115.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.8" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.09%)</title><rect x="980.8" y="99.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="983.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="981.8" y="211.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="984.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="981.8" y="195.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="984.8" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="981.8" y="179.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="984.8" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.09%)</title><rect x="981.8" y="163.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="984.8" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (9 samples, 0.77%)</title><rect x="982.8" y="291.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="985.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (1 samples, 0.09%)</title><rect x="986.9" y="275.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="989.9" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="987.9" y="275.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="990.9" y="286.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="988.9" y="275.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="991.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.09%)</title><rect x="989.9" y="275.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="992.9" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="991.0" y="275.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.0" y="286.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="991.0" y="259.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="994.0" y="270.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.09%)</title><rect x="991.0" y="243.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="994.0" y="254.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.09%)</title><rect x="991.0" y="227.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="994.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.17%)</title><rect x="992.0" y="291.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="995.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="992.0" y="275.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="995.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="992.0" y="259.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="995.0" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="993.0" y="259.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="996.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="993.0" y="243.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="996.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.09%)</title><rect x="993.0" y="227.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="996.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (10 samples, 0.86%)</title><rect x="994.0" y="291.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="997.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.77%)</title><rect x="995.0" y="275.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="998.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (2 samples, 0.17%)</title><rect x="995.0" y="259.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="998.0" y="270.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.17%)</title><rect x="995.0" y="243.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="998.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.60%)</title><rect x="997.1" y="259.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1000.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.52%)</title><rect x="998.1" y="243.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1001.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.26%)</title><rect x="1001.1" y="227.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1004.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (15 samples, 1.29%)</title><rect x="1004.2" y="323.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1007.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.52%)</title><rect x="1008.2" y="307.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1011.2" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.52%)</title><rect x="1008.2" y="291.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1011.2" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (5 samples, 0.43%)</title><rect x="1014.3" y="307.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1017.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (11 samples, 0.95%)</title><rect x="1019.4" y="323.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1022.4" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (10 samples, 0.86%)</title><rect x="1020.4" y="307.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1023.4" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (9 samples, 0.77%)</title><rect x="1021.4" y="291.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1024.4" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.09%)</title><rect x="1021.4" y="275.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1024.4" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.09%)</title><rect x="1021.4" y="259.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1024.4" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.09%)</title><rect x="1021.4" y="243.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1024.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.52%)</title><rect x="1022.4" y="275.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.09%)</title><rect x="1023.5" y="259.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1026.5" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.34%)</title><rect x="1024.5" y="259.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1027.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.17%)</title><rect x="1028.5" y="275.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1031.5" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.26%)</title><rect x="1030.6" y="323.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1033.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.60%)</title><rect x="1033.6" y="323.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1036.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.34%)</title><rect x="1034.6" y="307.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1037.6" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.34%)</title><rect x="1034.6" y="291.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1037.6" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.09%)</title><rect x="1036.7" y="275.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1039.7" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.09%)</title><rect x="1036.7" y="259.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1039.7" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.09%)</title><rect x="1036.7" y="243.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1039.7" y="254.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="1037.7" y="275.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1040.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.17%)</title><rect x="1038.7" y="307.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1041.7" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.09%)</title><rect x="1039.7" y="291.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1042.7" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="1039.7" y="275.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.7" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 1.29%)</title><rect x="1040.7" y="323.0" width="15.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1043.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 1.29%)</title><rect x="1040.7" y="307.0" width="15.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1043.7" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="1047.8" y="291.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1050.8" y="302.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.09%)</title><rect x="1047.8" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1050.8" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="1048.8" y="291.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.8" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="1048.8" y="275.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.8" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="1048.8" y="259.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1051.8" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="1048.8" y="243.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1051.8" y="254.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="1048.8" y="227.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1051.8" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="1048.8" y="211.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.8" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.34%)</title><rect x="1049.9" y="291.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1052.9" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.34%)</title><rect x="1049.9" y="275.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1052.9" y="286.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.09%)</title><rect x="1052.9" y="259.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1055.9" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="1052.9" y="243.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.9" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="1052.9" y="227.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1055.9" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.09%)</title><rect x="1052.9" y="211.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.9" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="1052.9" y="195.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.9" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="1052.9" y="179.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.9" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="1052.9" y="163.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.9" y="174.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.09%)</title><rect x="1052.9" y="147.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.9" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.09%)</title><rect x="1052.9" y="131.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.9" y="142.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="1052.9" y="115.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.9" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="1052.9" y="99.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.9" y="110.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.09%)</title><rect x="1052.9" y="83.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1055.9" y="94.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.09%)</title><rect x="1052.9" y="67.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.9" y="78.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::num_par_ids() (1 samples, 0.09%)</title><rect x="1052.9" y="51.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.9" y="62.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.17%)</title><rect x="1053.9" y="291.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1056.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (124 samples, 10.67%)</title><rect x="1056.0" y="339.0" width="125.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1059.0" y="350.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (124 samples, 10.67%)</title><rect x="1056.0" y="323.0" width="125.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1059.0" y="334.0">one/nio/net/Jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.69%)</title><rect x="1056.0" y="307.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1059.0" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.69%)</title><rect x="1056.0" y="291.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1059.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.60%)</title><rect x="1057.0" y="275.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1060.0" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.60%)</title><rect x="1057.0" y="259.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1060.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.52%)</title><rect x="1057.0" y="243.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1060.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.52%)</title><rect x="1057.0" y="227.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1060.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (4 samples, 0.34%)</title><rect x="1059.0" y="211.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1062.0" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="1063.1" y="243.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1066.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="1063.1" y="227.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1066.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (116 samples, 9.98%)</title><rect x="1064.1" y="307.0" width="117.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.1" y="318.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.34%)</title><rect x="1064.1" y="291.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1067.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.26%)</title><rect x="1065.1" y="275.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1068.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.26%)</title><rect x="1065.1" y="259.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1068.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.26%)</title><rect x="1065.1" y="243.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1068.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.26%)</title><rect x="1065.1" y="227.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1068.1" y="238.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="1066.1" y="211.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1069.1" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="1067.1" y="211.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (112 samples, 9.64%)</title><rect x="1068.1" y="291.0" width="113.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1071.1" y="302.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (112 samples, 9.64%)</title><rect x="1068.1" y="275.0" width="113.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1071.1" y="286.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (11 samples, 0.95%)</title><rect x="1068.1" y="259.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1071.1" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (11 samples, 0.95%)</title><rect x="1068.1" y="243.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1071.1" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.09%)</title><rect x="1068.1" y="227.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.1" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (4 samples, 0.34%)</title><rect x="1069.2" y="227.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.34%)</title><rect x="1069.2" y="211.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1072.2" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.17%)</title><rect x="1069.2" y="195.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1072.2" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="1071.2" y="195.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1074.2" y="206.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.09%)</title><rect x="1072.2" y="195.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1075.2" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (6 samples, 0.52%)</title><rect x="1073.2" y="227.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1076.2" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (6 samples, 0.52%)</title><rect x="1073.2" y="211.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1076.2" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (6 samples, 0.52%)</title><rect x="1073.2" y="195.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1076.2" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (5 samples, 0.43%)</title><rect x="1074.2" y="179.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1077.2" y="190.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.09%)</title><rect x="1078.3" y="163.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1081.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (98 samples, 8.43%)</title><rect x="1079.3" y="259.0" width="99.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1082.3" y="270.0">sun/nio/ch/I..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (98 samples, 8.43%)</title><rect x="1079.3" y="243.0" width="99.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1082.3" y="254.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (98 samples, 8.43%)</title><rect x="1079.3" y="227.0" width="99.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1082.3" y="238.0">sun/nio/ch/F..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.26%)</title><rect x="1087.4" y="211.0" width="3.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1090.4" y="222.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.09%)</title><rect x="1090.5" y="211.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1093.5" y="222.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.09%)</title><rect x="1091.5" y="211.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1094.5" y="222.0"></text>
</g>
<g>
<title>rpc_errlist (85 samples, 7.31%)</title><rect x="1092.5" y="211.0" width="86.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1095.5" y="222.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.17%)</title><rect x="1178.8" y="259.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="1178.8" y="243.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="1178.8" y="227.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.17%)</title><rect x="1178.8" y="211.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1181.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="1180.9" y="259.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.isBufferTooLarge (1 samples, 0.09%)</title><rect x="1180.9" y="243.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>thread_start (8 samples, 0.69%)</title><rect x="1181.9" y="387.0" width="8.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1184.9" y="398.0"></text>
</g>
<g>
<title>_pthread_start (8 samples, 0.69%)</title><rect x="1181.9" y="371.0" width="8.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (8 samples, 0.69%)</title><rect x="1181.9" y="355.0" width="8.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>Thread::call_run() (8 samples, 0.69%)</title><rect x="1181.9" y="339.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.09%)</title><rect x="1181.9" y="323.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="334.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.09%)</title><rect x="1181.9" y="307.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.09%)</title><rect x="1181.9" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="302.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.09%)</title><rect x="1181.9" y="275.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="286.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.09%)</title><rect x="1181.9" y="259.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="270.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="1181.9" y="243.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.9" y="254.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.09%)</title><rect x="1181.9" y="227.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="238.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="1181.9" y="211.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="222.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="1181.9" y="195.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.9" y="206.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.09%)</title><rect x="1182.9" y="323.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.9" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.09%)</title><rect x="1182.9" y="307.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="318.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="1182.9" y="291.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1185.9" y="302.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.09%)</title><rect x="1182.9" y="275.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1185.9" y="286.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.09%)</title><rect x="1182.9" y="259.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="270.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.09%)</title><rect x="1182.9" y="243.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1185.9" y="254.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="227.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="238.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.09%)</title><rect x="1182.9" y="211.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1185.9" y="222.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1183.9" y="323.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.9" y="334.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1183.9" y="307.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.9" y="318.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="291.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="302.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1183.9" y="275.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.09%)</title><rect x="1183.9" y="259.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.09%)</title><rect x="1183.9" y="243.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1186.9" y="254.0"></text>
</g>
<g>
<title>WatcherThread::run() (5 samples, 0.43%)</title><rect x="1184.9" y="323.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="334.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (5 samples, 0.43%)</title><rect x="1184.9" y="307.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.9" y="318.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.43%)</title><rect x="1184.9" y="291.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="302.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.43%)</title><rect x="1184.9" y="275.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.43%)</title><rect x="1184.9" y="259.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.43%)</title><rect x="1184.9" y="243.0" width="5.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1187.9" y="254.0"></text>
</g>
</g>
</svg>
