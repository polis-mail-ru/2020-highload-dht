<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (36,908 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (27,102 samples, 73.43%)</title><rect x="10.0" y="307.0" width="866.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (27,102 samples, 73.43%)</title><rect x="10.0" y="291.0" width="866.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (27,102 samples, 73.43%)</title><rect x="10.0" y="275.0" width="866.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (283 samples, 0.77%)</title><rect x="10.0" y="259.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (283 samples, 0.77%)</title><rect x="10.0" y="243.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (271 samples, 0.73%)</title><rect x="10.0" y="227.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (271 samples, 0.73%)</title><rect x="10.0" y="211.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (271 samples, 0.73%)</title><rect x="10.0" y="195.0" width="8.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (12 samples, 0.03%)</title><rect x="18.7" y="227.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 0.03%)</title><rect x="18.7" y="211.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (12 samples, 0.03%)</title><rect x="18.7" y="195.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (12 samples, 0.03%)</title><rect x="18.7" y="179.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.7" y="190.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (12 samples, 0.03%)</title><rect x="18.7" y="163.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="21.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.run (26,819 samples, 72.66%)</title><rect x="19.0" y="259.0" width="857.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="270.0">ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.run</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (26,819 samples, 72.66%)</title><rect x="19.0" y="243.0" width="857.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.0" y="254.0">ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (391 samples, 1.06%)</title><rect x="19.0" y="227.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (391 samples, 1.06%)</title><rect x="19.0" y="211.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.0" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (391 samples, 1.06%)</title><rect x="19.0" y="195.0" width="12.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.0" y="206.0"></text>
</g>
<g>
<title>java.lang.String (298 samples, 0.81%)</title><rect x="19.0" y="179.0" width="9.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="22.0" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (93 samples, 0.25%)</title><rect x="28.6" y="179.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.6" y="190.0"></text>
</g>
<g>
<title>byte[] (93 samples, 0.25%)</title><rect x="28.6" y="163.0" width="2.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="31.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendProxyResponse (7,506 samples, 20.34%)</title><rect x="31.5" y="227.0" width="240.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.5" y="238.0">ru/mail/polis/service/suhova/Mor..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,411 samples, 3.82%)</title><rect x="31.5" y="211.0" width="45.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.5" y="222.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,411 samples, 3.82%)</title><rect x="31.5" y="195.0" width="45.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.5" y="206.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (794 samples, 2.15%)</title><rect x="31.5" y="179.0" width="25.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.5" y="190.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (794 samples, 2.15%)</title><rect x="31.5" y="163.0" width="25.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.5" y="174.0">o..</text>
</g>
<g>
<title>byte[] (794 samples, 2.15%)</title><rect x="31.5" y="147.0" width="25.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="34.5" y="158.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.write (617 samples, 1.67%)</title><rect x="56.9" y="179.0" width="19.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.9" y="190.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (288 samples, 0.78%)</title><rect x="56.9" y="163.0" width="9.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="59.9" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (329 samples, 0.89%)</title><rect x="66.1" y="163.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.1" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (329 samples, 0.89%)</title><rect x="66.1" y="147.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.1" y="158.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (329 samples, 0.89%)</title><rect x="66.1" y="131.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.1" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (329 samples, 0.89%)</title><rect x="66.1" y="115.0" width="10.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.1" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (329 samples, 0.89%)</title><rect x="66.1" y="99.0" width="10.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="69.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.get (6,095 samples, 16.51%)</title><rect x="76.7" y="211.0" width="194.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="79.7" y="222.0">ru/mail/polis/service/suh..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (389 samples, 1.05%)</title><rect x="76.7" y="195.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.7" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1191747167.invoke (389 samples, 1.05%)</title><rect x="76.7" y="179.0" width="12.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.7" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (389 samples, 1.05%)</title><rect x="76.7" y="163.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.7" y="174.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (154 samples, 0.42%)</title><rect x="76.7" y="147.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.7" y="158.0"></text>
</g>
<g>
<title>java.lang.String (154 samples, 0.42%)</title><rect x="76.7" y="131.0" width="4.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="79.7" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (235 samples, 0.64%)</title><rect x="81.6" y="147.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.6" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (235 samples, 0.64%)</title><rect x="81.6" y="131.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.6" y="142.0"></text>
</g>
<g>
<title>byte[] (235 samples, 0.64%)</title><rect x="81.6" y="115.0" width="7.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="84.6" y="126.0"></text>
</g>
<g>
<title>one.nio.http.Response (141 samples, 0.38%)</title><rect x="89.1" y="195.0" width="4.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="92.1" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (666 samples, 1.80%)</title><rect x="93.6" y="195.0" width="21.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.6" y="206.0">o..</text>
</g>
<g>
<title>byte[] (269 samples, 0.73%)</title><rect x="93.6" y="179.0" width="8.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="96.6" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (220 samples, 0.60%)</title><rect x="102.2" y="179.0" width="7.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="105.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String (177 samples, 0.48%)</title><rect x="109.2" y="179.0" width="5.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="112.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.getCell (4,149 samples, 11.24%)</title><rect x="114.9" y="195.0" width="132.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.9" y="206.0">ru/mail/polis/da..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (805 samples, 2.18%)</title><rect x="114.9" y="179.0" width="25.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.9" y="190.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (168 samples, 0.46%)</title><rect x="114.9" y="163.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.9" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (168 samples, 0.46%)</title><rect x="114.9" y="147.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="117.9" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (168 samples, 0.46%)</title><rect x="114.9" y="131.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.9" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (168 samples, 0.46%)</title><rect x="114.9" y="115.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$77/985518634.apply (168 samples, 0.46%)</title><rect x="114.9" y="99.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (168 samples, 0.46%)</title><rect x="114.9" y="83.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.9" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Cell (168 samples, 0.46%)</title><rect x="114.9" y="67.0" width="5.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="117.9" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$86/1234371573.apply (637 samples, 1.73%)</title><rect x="120.3" y="163.0" width="20.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (637 samples, 1.73%)</title><rect x="120.3" y="147.0" width="20.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.3" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (637 samples, 1.73%)</title><rect x="120.3" y="131.0" width="20.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.3" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (637 samples, 1.73%)</title><rect x="120.3" y="115.0" width="20.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="123.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (335 samples, 0.91%)</title><rect x="140.6" y="179.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="143.6" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (335 samples, 0.91%)</title><rect x="140.6" y="163.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.6" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (335 samples, 0.91%)</title><rect x="140.6" y="147.0" width="10.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="143.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (3,009 samples, 8.15%)</title><rect x="151.3" y="179.0" width="96.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.3" y="190.0">ru/mail/pol..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (822 samples, 2.23%)</title><rect x="151.3" y="163.0" width="26.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.3" y="174.0">c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (105 samples, 0.28%)</title><rect x="151.3" y="147.0" width="3.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="154.3" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (717 samples, 1.94%)</title><rect x="154.7" y="147.0" width="22.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="157.7" y="158.0">c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (168 samples, 0.46%)</title><rect x="154.7" y="131.0" width="5.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="157.7" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (167 samples, 0.45%)</title><rect x="160.1" y="131.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="163.1" y="142.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (167 samples, 0.45%)</title><rect x="160.1" y="115.0" width="5.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="163.1" y="126.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (224 samples, 0.61%)</title><rect x="165.4" y="131.0" width="7.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="168.4" y="142.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (158 samples, 0.43%)</title><rect x="172.6" y="131.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.6" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (158 samples, 0.43%)</title><rect x="172.6" y="115.0" width="5.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="175.6" y="126.0"></text>
</g>
<g>
<title>java.util.ArrayList (192 samples, 0.52%)</title><rect x="177.6" y="163.0" width="6.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="180.6" y="174.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (498 samples, 1.35%)</title><rect x="183.8" y="163.0" width="15.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="186.8" y="174.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (266 samples, 0.72%)</title><rect x="183.8" y="147.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.8" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (266 samples, 0.72%)</title><rect x="183.8" y="131.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.8" y="142.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (266 samples, 0.72%)</title><rect x="183.8" y="115.0" width="8.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="186.8" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (232 samples, 0.63%)</title><rect x="192.3" y="147.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="195.3" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (232 samples, 0.63%)</title><rect x="192.3" y="131.0" width="7.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="195.3" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (306 samples, 0.83%)</title><rect x="199.7" y="163.0" width="9.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.7" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (306 samples, 0.83%)</title><rect x="199.7" y="147.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="202.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$84/1926923257.get$Lambda (142 samples, 0.38%)</title><rect x="199.7" y="131.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.7" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.TurboDAO$$Lambda$84 (142 samples, 0.38%)</title><rect x="199.7" y="115.0" width="4.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="202.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$85/1594887529.get$Lambda (164 samples, 0.44%)</title><rect x="204.2" y="131.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.2" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.TurboDAO$$Lambda$85 (164 samples, 0.44%)</title><rect x="204.2" y="115.0" width="5.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="207.2" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (181 samples, 0.49%)</title><rect x="209.5" y="163.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.5" y="174.0"></text>
</g>
<g>
<title>java.lang.Object[] (181 samples, 0.49%)</title><rect x="209.5" y="147.0" width="5.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="212.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (38 samples, 0.10%)</title><rect x="215.3" y="163.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (38 samples, 0.10%)</title><rect x="215.3" y="147.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (38 samples, 0.10%)</title><rect x="215.3" y="131.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.3" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (36 samples, 0.10%)</title><rect x="215.3" y="115.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.3" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (36 samples, 0.10%)</title><rect x="215.3" y="99.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.3" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (25 samples, 0.07%)</title><rect x="215.3" y="83.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.3" y="94.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (25 samples, 0.07%)</title><rect x="215.3" y="67.0" width="0.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="218.3" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (11 samples, 0.03%)</title><rect x="216.1" y="83.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.1" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (11 samples, 0.03%)</title><rect x="216.1" y="67.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.1" y="78.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (11 samples, 0.03%)</title><rect x="216.1" y="51.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="219.1" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (165 samples, 0.45%)</title><rect x="216.5" y="163.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (165 samples, 0.45%)</title><rect x="216.5" y="147.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.5" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (165 samples, 0.45%)</title><rect x="216.5" y="131.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.5" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (165 samples, 0.45%)</title><rect x="216.5" y="115.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="219.5" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (165 samples, 0.45%)</title><rect x="216.5" y="99.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.5" y="110.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (165 samples, 0.45%)</title><rect x="216.5" y="83.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.5" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$77/985518634.apply (165 samples, 0.45%)</title><rect x="216.5" y="67.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.5" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (165 samples, 0.45%)</title><rect x="216.5" y="51.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="219.5" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Cell (165 samples, 0.45%)</title><rect x="216.5" y="35.0" width="5.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="219.5" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (807 samples, 2.19%)</title><rect x="221.7" y="163.0" width="25.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.7" y="174.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (177 samples, 0.48%)</title><rect x="221.7" y="147.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.7" y="158.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (177 samples, 0.48%)</title><rect x="221.7" y="131.0" width="5.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="224.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (197 samples, 0.53%)</title><rect x="227.4" y="147.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.4" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (197 samples, 0.53%)</title><rect x="227.4" y="131.0" width="6.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="230.4" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (106 samples, 0.29%)</title><rect x="233.7" y="147.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.7" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (106 samples, 0.29%)</title><rect x="233.7" y="131.0" width="3.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="236.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (327 samples, 0.89%)</title><rect x="237.1" y="147.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (327 samples, 0.89%)</title><rect x="237.1" y="131.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.1" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (327 samples, 0.89%)</title><rect x="237.1" y="115.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.1" y="126.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (327 samples, 0.89%)</title><rect x="237.1" y="99.0" width="10.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="240.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.toByteArray (237 samples, 0.64%)</title><rect x="247.5" y="195.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.5" y="206.0"></text>
</g>
<g>
<title>byte[] (237 samples, 0.64%)</title><rect x="247.5" y="179.0" width="7.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="250.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.toByteBuffer (513 samples, 1.39%)</title><rect x="255.1" y="195.0" width="16.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (170 samples, 0.46%)</title><rect x="255.1" y="179.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.1" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (170 samples, 0.46%)</title><rect x="255.1" y="163.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.1" y="174.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (170 samples, 0.46%)</title><rect x="255.1" y="147.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.1" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (170 samples, 0.46%)</title><rect x="255.1" y="131.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.1" y="142.0"></text>
</g>
<g>
<title>byte[] (170 samples, 0.46%)</title><rect x="255.1" y="115.0" width="5.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="258.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (343 samples, 0.93%)</title><rect x="260.6" y="179.0" width="10.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.6" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (343 samples, 0.93%)</title><rect x="260.6" y="163.0" width="10.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.6" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (343 samples, 0.93%)</title><rect x="260.6" y="147.0" width="10.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="263.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendReplicationResponse (18,922 samples, 51.27%)</title><rect x="271.5" y="227.0" width="605.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.5" y="238.0">ru/mail/polis/service/suhova/MoribundService.sendReplicationResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (156 samples, 0.42%)</title><rect x="271.5" y="211.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (156 samples, 0.42%)</title><rect x="271.5" y="195.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.5" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (77 samples, 0.21%)</title><rect x="271.5" y="179.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.5" y="190.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (77 samples, 0.21%)</title><rect x="271.5" y="163.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.5" y="174.0"></text>
</g>
<g>
<title>byte[] (77 samples, 0.21%)</title><rect x="271.5" y="147.0" width="2.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="274.5" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (79 samples, 0.21%)</title><rect x="274.0" y="179.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.0" y="190.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (42 samples, 0.11%)</title><rect x="274.0" y="163.0" width="1.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="277.0" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (37 samples, 0.10%)</title><rect x="275.3" y="163.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.3" y="174.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (37 samples, 0.10%)</title><rect x="275.3" y="147.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="278.3" y="158.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (37 samples, 0.10%)</title><rect x="275.3" y="131.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (37 samples, 0.10%)</title><rect x="275.3" y="115.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.3" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (37 samples, 0.10%)</title><rect x="275.3" y="99.0" width="1.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="278.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodesByKey (87 samples, 0.24%)</title><rect x="276.5" y="211.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodesByKey (87 samples, 0.24%)</title><rect x="276.5" y="195.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.5" y="206.0"></text>
</g>
<g>
<title>java.lang.String[] (87 samples, 0.24%)</title><rect x="276.5" y="179.0" width="2.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="279.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/Consensus.get (173 samples, 0.47%)</title><rect x="279.3" y="211.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.3" y="222.0"></text>
</g>
<g>
<title>one.nio.http.Response (9 samples, 0.02%)</title><rect x="279.5" y="195.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="282.5" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (25 samples, 0.07%)</title><rect x="279.8" y="195.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="282.8" y="206.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.02%)</title><rect x="279.8" y="179.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="282.8" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (10 samples, 0.03%)</title><rect x="280.1" y="179.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="283.1" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (100 samples, 0.27%)</title><rect x="280.6" y="195.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (100 samples, 0.27%)</title><rect x="280.6" y="179.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (100 samples, 0.27%)</title><rect x="280.6" y="163.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.6" y="174.0"></text>
</g>
<g>
<title>java.lang.String (43 samples, 0.12%)</title><rect x="280.6" y="147.0" width="1.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="283.6" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (57 samples, 0.15%)</title><rect x="282.0" y="147.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.0" y="158.0"></text>
</g>
<g>
<title>byte[] (57 samples, 0.15%)</title><rect x="282.0" y="131.0" width="1.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="285.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (32 samples, 0.09%)</title><rect x="283.8" y="195.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (25 samples, 0.07%)</title><rect x="284.0" y="179.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.0" y="190.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.03%)</title><rect x="284.0" y="163.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="287.0" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (8 samples, 0.02%)</title><rect x="284.3" y="163.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="287.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.get (1,302 samples, 3.53%)</title><rect x="284.8" y="211.0" width="41.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.8" y="222.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (31 samples, 0.08%)</title><rect x="284.8" y="195.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.8" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1191747167.invoke (31 samples, 0.08%)</title><rect x="284.8" y="179.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.8" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (31 samples, 0.08%)</title><rect x="284.8" y="163.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.8" y="174.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (14 samples, 0.04%)</title><rect x="284.8" y="147.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.8" y="158.0"></text>
</g>
<g>
<title>java.lang.String (14 samples, 0.04%)</title><rect x="284.8" y="131.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="287.8" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (17 samples, 0.05%)</title><rect x="285.3" y="147.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.3" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (17 samples, 0.05%)</title><rect x="285.3" y="131.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.3" y="142.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.05%)</title><rect x="285.3" y="115.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="288.3" y="126.0"></text>
</g>
<g>
<title>one.nio.http.Response (16 samples, 0.04%)</title><rect x="285.8" y="195.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="288.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (114 samples, 0.31%)</title><rect x="286.3" y="195.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.3" y="206.0"></text>
</g>
<g>
<title>byte[] (50 samples, 0.14%)</title><rect x="286.3" y="179.0" width="1.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="289.3" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (41 samples, 0.11%)</title><rect x="287.9" y="179.0" width="1.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="290.9" y="190.0"></text>
</g>
<g>
<title>java.lang.String (23 samples, 0.06%)</title><rect x="289.2" y="179.0" width="0.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="292.2" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.getCell (984 samples, 2.67%)</title><rect x="290.0" y="195.0" width="31.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.0" y="206.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (106 samples, 0.29%)</title><rect x="290.0" y="179.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="293.0" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (14 samples, 0.04%)</title><rect x="290.0" y="163.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.0" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (14 samples, 0.04%)</title><rect x="290.0" y="147.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.0" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (14 samples, 0.04%)</title><rect x="290.0" y="131.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.0" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (14 samples, 0.04%)</title><rect x="290.0" y="115.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$77/985518634.apply (14 samples, 0.04%)</title><rect x="290.0" y="99.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (14 samples, 0.04%)</title><rect x="290.0" y="83.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="293.0" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Cell (14 samples, 0.04%)</title><rect x="290.0" y="67.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="293.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$86/1234371573.apply (92 samples, 0.25%)</title><rect x="290.4" y="163.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (92 samples, 0.25%)</title><rect x="290.4" y="147.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.4" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (92 samples, 0.25%)</title><rect x="290.4" y="131.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.4" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (92 samples, 0.25%)</title><rect x="290.4" y="115.0" width="3.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="293.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (140 samples, 0.38%)</title><rect x="293.4" y="179.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.4" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (140 samples, 0.38%)</title><rect x="293.4" y="163.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.4" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (140 samples, 0.38%)</title><rect x="293.4" y="147.0" width="4.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="296.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (738 samples, 2.00%)</title><rect x="297.8" y="179.0" width="23.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.8" y="190.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (97 samples, 0.26%)</title><rect x="297.8" y="163.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.8" y="174.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (14 samples, 0.04%)</title><rect x="297.8" y="147.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="300.8" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (83 samples, 0.22%)</title><rect x="298.3" y="147.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="301.3" y="158.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (16 samples, 0.04%)</title><rect x="298.3" y="131.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="301.3" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (12 samples, 0.03%)</title><rect x="298.8" y="131.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="301.8" y="142.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (12 samples, 0.03%)</title><rect x="298.8" y="115.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="301.8" y="126.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (24 samples, 0.07%)</title><rect x="299.2" y="131.0" width="0.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="302.2" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (22 samples, 0.06%)</title><rect x="299.9" y="131.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.9" y="142.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (22 samples, 0.06%)</title><rect x="299.9" y="115.0" width="0.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="302.9" y="126.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (9 samples, 0.02%)</title><rect x="300.7" y="131.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.7" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (9 samples, 0.02%)</title><rect x="300.7" y="115.0" width="0.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="303.7" y="126.0"></text>
</g>
<g>
<title>java.util.ArrayList (38 samples, 0.10%)</title><rect x="300.9" y="163.0" width="1.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="303.9" y="174.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (61 samples, 0.17%)</title><rect x="302.2" y="163.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="305.2" y="174.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (31 samples, 0.08%)</title><rect x="302.2" y="147.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="305.2" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (31 samples, 0.08%)</title><rect x="302.2" y="131.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.2" y="142.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (31 samples, 0.08%)</title><rect x="302.2" y="115.0" width="0.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="305.2" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (30 samples, 0.08%)</title><rect x="303.1" y="147.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.1" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (30 samples, 0.08%)</title><rect x="303.1" y="131.0" width="1.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="306.1" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (71 samples, 0.19%)</title><rect x="304.1" y="163.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.1" y="174.0"></text>
</g>
<g>
<title>java.lang.Object[] (71 samples, 0.19%)</title><rect x="304.1" y="147.0" width="2.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="307.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (13 samples, 0.04%)</title><rect x="306.6" y="163.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (13 samples, 0.04%)</title><rect x="306.6" y="147.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="309.6" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (13 samples, 0.04%)</title><rect x="306.6" y="131.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="309.6" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (13 samples, 0.04%)</title><rect x="306.6" y="115.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.6" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (13 samples, 0.04%)</title><rect x="306.6" y="99.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.6" y="110.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (13 samples, 0.04%)</title><rect x="306.6" y="83.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="309.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$77/985518634.apply (13 samples, 0.04%)</title><rect x="306.6" y="67.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.6" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (13 samples, 0.04%)</title><rect x="306.6" y="51.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.6" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.suhova.Cell (13 samples, 0.04%)</title><rect x="306.6" y="35.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="309.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (451 samples, 1.22%)</title><rect x="307.0" y="163.0" width="14.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.0" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (85 samples, 0.23%)</title><rect x="307.0" y="147.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.0" y="158.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (85 samples, 0.23%)</title><rect x="307.0" y="131.0" width="2.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="310.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (141 samples, 0.38%)</title><rect x="309.7" y="147.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.7" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (141 samples, 0.38%)</title><rect x="309.7" y="131.0" width="4.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="312.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (114 samples, 0.31%)</title><rect x="314.2" y="147.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.2" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (114 samples, 0.31%)</title><rect x="314.2" y="131.0" width="3.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="317.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (111 samples, 0.30%)</title><rect x="317.9" y="147.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (111 samples, 0.30%)</title><rect x="317.9" y="131.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="320.9" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (111 samples, 0.30%)</title><rect x="317.9" y="115.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="320.9" y="126.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (111 samples, 0.30%)</title><rect x="317.9" y="99.0" width="3.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="320.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.getData (70 samples, 0.19%)</title><rect x="321.4" y="195.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.4" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (70 samples, 0.19%)</title><rect x="321.4" y="179.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="324.4" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (70 samples, 0.19%)</title><rect x="321.4" y="163.0" width="2.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="324.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.toByteArray (28 samples, 0.08%)</title><rect x="323.7" y="195.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.7" y="206.0"></text>
</g>
<g>
<title>byte[] (28 samples, 0.08%)</title><rect x="323.7" y="179.0" width="0.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="326.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.toByteBuffer (59 samples, 0.16%)</title><rect x="324.6" y="195.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (23 samples, 0.06%)</title><rect x="324.6" y="179.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="327.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (23 samples, 0.06%)</title><rect x="324.6" y="163.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.6" y="174.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (23 samples, 0.06%)</title><rect x="324.6" y="147.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="327.6" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 0.06%)</title><rect x="324.6" y="131.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="327.6" y="142.0"></text>
</g>
<g>
<title>byte[] (23 samples, 0.06%)</title><rect x="324.6" y="115.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="327.6" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (36 samples, 0.10%)</title><rect x="325.3" y="179.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (36 samples, 0.10%)</title><rect x="325.3" y="163.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.3" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (36 samples, 0.10%)</title><rect x="325.3" y="147.0" width="1.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="328.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.getAllResponses (17,204 samples, 46.61%)</title><rect x="326.5" y="211.0" width="550.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.5" y="222.0">ru/mail/polis/service/suhova/MoribundService.getAllResponses</text>
</g>
<g>
<title>java.util.ArrayList (20 samples, 0.05%)</title><rect x="326.5" y="195.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="329.5" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (46 samples, 0.12%)</title><rect x="327.1" y="195.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.1" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (46 samples, 0.12%)</title><rect x="327.1" y="179.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.1" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (46 samples, 0.12%)</title><rect x="327.1" y="163.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.1" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (46 samples, 0.12%)</title><rect x="327.1" y="147.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.1" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (46 samples, 0.12%)</title><rect x="327.1" y="131.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="330.1" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (46 samples, 0.12%)</title><rect x="327.1" y="115.0" width="1.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="330.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.proxy (17,138 samples, 46.43%)</title><rect x="328.6" y="195.0" width="547.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.6" y="206.0">ru/mail/polis/service/suhova/MoribundService.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (17,138 samples, 46.43%)</title><rect x="328.6" y="179.0" width="547.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="331.6" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (17,138 samples, 46.43%)</title><rect x="328.6" y="163.0" width="547.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.6" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (164 samples, 0.44%)</title><rect x="328.6" y="147.0" width="5.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="331.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (16,168 samples, 43.81%)</title><rect x="333.8" y="147.0" width="516.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.8" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (4,875 samples, 13.21%)</title><rect x="333.8" y="131.0" width="155.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="336.8" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (11,069 samples, 29.99%)</title><rect x="489.7" y="131.0" width="353.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="492.7" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (224 samples, 0.61%)</title><rect x="843.6" y="131.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="846.6" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (224 samples, 0.61%)</title><rect x="843.6" y="115.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.6" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (224 samples, 0.61%)</title><rect x="843.6" y="99.0" width="7.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="846.6" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (425 samples, 1.15%)</title><rect x="850.7" y="147.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="853.7" y="158.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.04%)</title><rect x="850.7" y="131.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="853.7" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (43 samples, 0.12%)</title><rect x="851.2" y="131.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="854.2" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (43 samples, 0.12%)</title><rect x="851.2" y="115.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="854.2" y="126.0"></text>
</g>
<g>
<title>java.lang.String (22 samples, 0.06%)</title><rect x="851.2" y="99.0" width="0.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="854.2" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (21 samples, 0.06%)</title><rect x="851.9" y="99.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.9" y="110.0"></text>
</g>
<g>
<title>byte[] (21 samples, 0.06%)</title><rect x="851.9" y="83.0" width="0.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="854.9" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (17 samples, 0.05%)</title><rect x="852.6" y="131.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="855.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (297 samples, 0.80%)</title><rect x="853.1" y="131.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="856.1" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (297 samples, 0.80%)</title><rect x="853.1" y="115.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="856.1" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (297 samples, 0.80%)</title><rect x="853.1" y="99.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="856.1" y="110.0"></text>
</g>
<g>
<title>char[] (154 samples, 0.42%)</title><rect x="853.1" y="83.0" width="4.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="856.1" y="94.0"></text>
</g>
<g>
<title>java.lang.String (57 samples, 0.15%)</title><rect x="858.0" y="83.0" width="1.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="861.0" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (86 samples, 0.23%)</title><rect x="859.9" y="83.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="862.9" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (86 samples, 0.23%)</title><rect x="859.9" y="67.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="862.9" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (86 samples, 0.23%)</title><rect x="859.9" y="51.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="862.9" y="62.0"></text>
</g>
<g>
<title>byte[] (86 samples, 0.23%)</title><rect x="859.9" y="35.0" width="2.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="862.9" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (29 samples, 0.08%)</title><rect x="862.6" y="131.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="865.6" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (29 samples, 0.08%)</title><rect x="862.6" y="115.0" width="0.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="865.6" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (24 samples, 0.07%)</title><rect x="863.5" y="131.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="866.5" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (24 samples, 0.07%)</title><rect x="863.5" y="115.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="866.5" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (24 samples, 0.07%)</title><rect x="863.5" y="99.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="866.5" y="110.0"></text>
</g>
<g>
<title>java.lang.String (8 samples, 0.02%)</title><rect x="863.5" y="83.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="866.5" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (16 samples, 0.04%)</title><rect x="863.8" y="83.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="866.8" y="94.0"></text>
</g>
<g>
<title>byte[] (16 samples, 0.04%)</title><rect x="863.8" y="67.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="866.8" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (102 samples, 0.28%)</title><rect x="864.3" y="147.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.3" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (102 samples, 0.28%)</title><rect x="864.3" y="131.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="867.3" y="142.0"></text>
</g>
<g>
<title>byte[] (102 samples, 0.28%)</title><rect x="864.3" y="115.0" width="3.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="867.3" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (24 samples, 0.07%)</title><rect x="867.6" y="147.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.6" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (24 samples, 0.07%)</title><rect x="867.6" y="131.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="870.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (24 samples, 0.07%)</title><rect x="867.6" y="115.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="870.6" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (17 samples, 0.05%)</title><rect x="867.8" y="99.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.8" y="110.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.05%)</title><rect x="867.8" y="83.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="870.8" y="94.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (242 samples, 0.66%)</title><rect x="868.3" y="147.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="871.3" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (174 samples, 0.47%)</title><rect x="868.3" y="131.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="871.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (174 samples, 0.47%)</title><rect x="868.3" y="115.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="871.3" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (174 samples, 0.47%)</title><rect x="868.3" y="99.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="871.3" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (174 samples, 0.47%)</title><rect x="868.3" y="83.0" width="5.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="871.3" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (68 samples, 0.18%)</title><rect x="873.9" y="131.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="876.9" y="142.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (48 samples, 0.13%)</title><rect x="873.9" y="115.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="876.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (48 samples, 0.13%)</title><rect x="873.9" y="99.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="876.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (48 samples, 0.13%)</title><rect x="873.9" y="83.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="876.9" y="94.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (48 samples, 0.13%)</title><rect x="873.9" y="67.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="876.9" y="78.0"></text>
</g>
<g>
<title>java.nio.channels.Channels$1 (48 samples, 0.13%)</title><rect x="873.9" y="51.0" width="1.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="876.9" y="62.0"></text>
</g>
<g>
<title>sun.nio.ch.SocketAdaptor$2 (20 samples, 0.05%)</title><rect x="875.4" y="115.0" width="0.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="878.4" y="126.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (13 samples, 0.04%)</title><rect x="876.1" y="147.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="879.1" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (13 samples, 0.04%)</title><rect x="876.1" y="131.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="879.1" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (13 samples, 0.04%)</title><rect x="876.1" y="115.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="879.1" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (13 samples, 0.04%)</title><rect x="876.1" y="99.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="879.1" y="110.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (9,806 samples, 26.57%)</title><rect x="876.5" y="307.0" width="313.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="879.5" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,429 samples, 3.87%)</title><rect x="876.5" y="291.0" width="45.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="879.5" y="302.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (664 samples, 1.80%)</title><rect x="876.5" y="275.0" width="21.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="879.5" y="286.0">o..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (325 samples, 0.88%)</title><rect x="876.5" y="259.0" width="10.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="879.5" y="270.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (339 samples, 0.92%)</title><rect x="886.9" y="259.0" width="10.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="889.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (765 samples, 2.07%)</title><rect x="897.7" y="275.0" width="24.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="900.7" y="286.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (765 samples, 2.07%)</title><rect x="897.7" y="259.0" width="24.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="900.7" y="270.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (765 samples, 2.07%)</title><rect x="897.7" y="243.0" width="24.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="900.7" y="254.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (765 samples, 2.07%)</title><rect x="897.7" y="227.0" width="24.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="900.7" y="238.0">s..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (319 samples, 0.86%)</title><rect x="897.7" y="211.0" width="10.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="900.7" y="222.0"></text>
</g>
<g>
<title>java.lang.Integer (319 samples, 0.86%)</title><rect x="897.7" y="195.0" width="10.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="900.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (446 samples, 1.21%)</title><rect x="907.9" y="211.0" width="14.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="910.9" y="222.0"></text>
</g>
<g>
<title>java/util/HashSet.add (446 samples, 1.21%)</title><rect x="907.9" y="195.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="910.9" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.put (446 samples, 1.21%)</title><rect x="907.9" y="179.0" width="14.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="910.9" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (446 samples, 1.21%)</title><rect x="907.9" y="163.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="910.9" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (446 samples, 1.21%)</title><rect x="907.9" y="147.0" width="14.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="910.9" y="158.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (446 samples, 1.21%)</title><rect x="907.9" y="131.0" width="14.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="910.9" y="142.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (8,377 samples, 22.70%)</title><rect x="922.2" y="291.0" width="267.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="925.2" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (8,377 samples, 22.70%)</title><rect x="922.2" y="275.0" width="267.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="925.2" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7,667 samples, 20.77%)</title><rect x="922.2" y="259.0" width="245.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="925.2" y="270.0">one/nio/http/HttpSession.processH..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,958 samples, 5.31%)</title><rect x="922.2" y="243.0" width="62.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="925.2" y="254.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,958 samples, 5.31%)</title><rect x="922.2" y="227.0" width="62.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="925.2" y="238.0">one/ni..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (1,195 samples, 3.24%)</title><rect x="922.2" y="211.0" width="38.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="925.2" y="222.0">Req..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (683 samples, 1.85%)</title><rect x="922.2" y="195.0" width="21.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="925.2" y="206.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (683 samples, 1.85%)</title><rect x="922.2" y="179.0" width="21.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="925.2" y="190.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (683 samples, 1.85%)</title><rect x="922.2" y="163.0" width="21.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="925.2" y="174.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (683 samples, 1.85%)</title><rect x="922.2" y="147.0" width="21.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="925.2" y="158.0">j..</text>
</g>
<g>
<title>java.lang.String (322 samples, 0.87%)</title><rect x="922.2" y="131.0" width="10.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="925.2" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (361 samples, 0.98%)</title><rect x="932.5" y="131.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.5" y="142.0"></text>
</g>
<g>
<title>byte[] (361 samples, 0.98%)</title><rect x="932.5" y="115.0" width="11.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="935.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (512 samples, 1.39%)</title><rect x="944.0" y="195.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="947.0" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/968868247.linkToTargetMethod (492 samples, 1.33%)</title><rect x="944.0" y="179.0" width="15.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="947.0" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (492 samples, 1.33%)</title><rect x="944.0" y="163.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="947.0" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.get$Lambda (492 samples, 1.33%)</title><rect x="944.0" y="147.0" width="15.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="947.0" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.suhova.MoribundService$$Lambda$72 (492 samples, 1.33%)</title><rect x="944.0" y="131.0" width="15.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="947.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (20 samples, 0.05%)</title><rect x="959.7" y="179.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="962.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (14 samples, 0.04%)</title><rect x="959.7" y="163.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="962.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 0.04%)</title><rect x="959.7" y="147.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="962.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (14 samples, 0.04%)</title><rect x="959.7" y="131.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="962.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (14 samples, 0.04%)</title><rect x="959.7" y="115.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="962.7" y="126.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (14 samples, 0.04%)</title><rect x="959.7" y="99.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="962.7" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (763 samples, 2.07%)</title><rect x="960.4" y="211.0" width="24.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="963.4" y="222.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (763 samples, 2.07%)</title><rect x="960.4" y="195.0" width="24.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="963.4" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (763 samples, 2.07%)</title><rect x="960.4" y="179.0" width="24.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="963.4" y="190.0">j..</text>
</g>
<g>
<title>java.lang.String (326 samples, 0.88%)</title><rect x="960.4" y="163.0" width="10.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="963.4" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (437 samples, 1.18%)</title><rect x="970.8" y="163.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="973.8" y="174.0"></text>
</g>
<g>
<title>byte[] (437 samples, 1.18%)</title><rect x="970.8" y="147.0" width="14.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="973.8" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3,486 samples, 9.45%)</title><rect x="984.8" y="243.0" width="111.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="987.8" y="254.0">one/nio/http/..</text>
</g>
<g>
<title>one.nio.http.Request (571 samples, 1.55%)</title><rect x="984.8" y="227.0" width="18.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="987.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,117 samples, 3.03%)</title><rect x="1003.0" y="227.0" width="35.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1006.0" y="238.0">one..</text>
</g>
<g>
<title>java.lang.String[] (1,117 samples, 3.03%)</title><rect x="1003.0" y="211.0" width="35.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1006.0" y="222.0">jav..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,798 samples, 4.87%)</title><rect x="1038.7" y="227.0" width="57.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1041.7" y="238.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,798 samples, 4.87%)</title><rect x="1038.7" y="211.0" width="57.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1041.7" y="222.0">one/ni..</text>
</g>
<g>
<title>char[] (927 samples, 2.51%)</title><rect x="1038.7" y="195.0" width="29.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1041.7" y="206.0">ch..</text>
</g>
<g>
<title>java.lang.String (321 samples, 0.87%)</title><rect x="1068.4" y="195.0" width="10.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1071.4" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (550 samples, 1.49%)</title><rect x="1078.6" y="195.0" width="17.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1081.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (550 samples, 1.49%)</title><rect x="1078.6" y="179.0" width="17.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1081.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (550 samples, 1.49%)</title><rect x="1078.6" y="163.0" width="17.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1081.6" y="174.0"></text>
</g>
<g>
<title>byte[] (550 samples, 1.49%)</title><rect x="1078.6" y="147.0" width="17.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1081.6" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,223 samples, 6.02%)</title><rect x="1096.2" y="243.0" width="71.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1099.2" y="254.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,223 samples, 6.02%)</title><rect x="1096.2" y="227.0" width="71.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1099.2" y="238.0">one/nio/..</text>
</g>
<g>
<title>char[] (994 samples, 2.69%)</title><rect x="1096.2" y="211.0" width="31.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1099.2" y="222.0">ch..</text>
</g>
<g>
<title>java.lang.String (517 samples, 1.40%)</title><rect x="1128.0" y="211.0" width="16.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1131.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (712 samples, 1.93%)</title><rect x="1144.5" y="211.0" width="22.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1147.5" y="222.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (712 samples, 1.93%)</title><rect x="1144.5" y="195.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1147.5" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (712 samples, 1.93%)</title><rect x="1144.5" y="179.0" width="22.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1147.5" y="190.0">j..</text>
</g>
<g>
<title>byte[] (712 samples, 1.93%)</title><rect x="1144.5" y="163.0" width="22.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="1147.5" y="174.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.read (710 samples, 1.92%)</title><rect x="1167.3" y="259.0" width="22.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1170.3" y="270.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (710 samples, 1.92%)</title><rect x="1167.3" y="243.0" width="22.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1170.3" y="254.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (710 samples, 1.92%)</title><rect x="1167.3" y="227.0" width="22.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1170.3" y="238.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (710 samples, 1.92%)</title><rect x="1167.3" y="211.0" width="22.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1170.3" y="222.0">j..</text>
</g>
</g>
</svg>
