<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="469"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="469"> </text>
<g id="frames">
<g>
<title>all (3,413 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="446.0">all</text>
</g>
<g>
<title>JVM_DoPrivileged (1 samples, 0.03%)</title><rect x="10.0" y="419.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="403.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>JavaCallWrapper::~JavaCallWrapper() (1 samples, 0.03%)</title><rect x="10.0" y="387.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.3" y="419.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.3" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="403.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.3" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="387.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.3" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="10.3" y="371.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.3" y="382.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="10.3" y="355.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.3" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="10.3" y="339.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.3" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="10.3" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.3" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="10.3" y="307.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.3" y="318.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.3" y="302.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="275.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.3" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="10.3" y="259.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.3" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="10.3" y="243.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.3" y="254.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.03%)</title><rect x="10.7" y="419.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.7" y="430.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.7" y="403.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.7" y="414.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.7" y="387.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.7" y="398.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="10.7" y="371.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.7" y="382.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.03%)</title><rect x="10.7" y="355.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.7" y="366.0"></text>
</g>
<g>
<title>bool TieredThresholdPolicy::loop_predicate_helper&lt;(CompLevel)3&gt;(int, int, double, Method*) (1 samples, 0.03%)</title><rect x="10.7" y="339.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.7" y="350.0"></text>
</g>
<g>
<title>bool CompilerOracle::has_option_value&lt;double&gt;(methodHandle const&amp;, char const*, double&amp;) (1 samples, 0.03%)</title><rect x="10.7" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.7" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.12%)</title><rect x="11.0" y="419.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.0" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.12%)</title><rect x="11.0" y="403.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.0" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.12%)</title><rect x="11.0" y="387.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.0" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.12%)</title><rect x="11.0" y="371.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.12%)</title><rect x="11.0" y="355.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="14.0" y="366.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.03%)</title><rect x="12.4" y="419.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="15.4" y="430.0"></text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.15%)</title><rect x="12.8" y="419.0" width="1.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="15.8" y="430.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.03%)</title><rect x="12.8" y="403.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.8" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.09%)</title><rect x="13.1" y="403.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="16.1" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.09%)</title><rect x="13.1" y="387.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="16.1" y="398.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.09%)</title><rect x="13.1" y="371.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.1" y="382.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.09%)</title><rect x="13.1" y="355.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.1" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.06%)</title><rect x="13.1" y="339.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.1" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.06%)</title><rect x="13.1" y="323.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.1" y="334.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.06%)</title><rect x="13.1" y="307.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.1" y="318.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="13.8" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.8" y="350.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.03%)</title><rect x="13.8" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.8" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="14.1" y="403.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.1" y="414.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.03%)</title><rect x="14.1" y="387.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="17.1" y="398.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.15%)</title><rect x="14.5" y="419.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="17.5" y="430.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.15%)</title><rect x="14.5" y="403.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="17.5" y="414.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.03%)</title><rect x="15.9" y="387.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.9" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,364 samples, 69.26%)</title><rect x="16.2" y="419.0" width="817.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.2" y="430.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,364 samples, 69.26%)</title><rect x="16.2" y="403.0" width="817.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.2" y="414.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,364 samples, 69.26%)</title><rect x="16.2" y="387.0" width="817.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.2" y="398.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (6 samples, 0.18%)</title><rect x="16.6" y="371.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.18%)</title><rect x="16.6" y="355.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (6 samples, 0.18%)</title><rect x="16.6" y="339.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.06%)</title><rect x="17.6" y="323.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.6" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.06%)</title><rect x="17.6" y="307.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.6" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.06%)</title><rect x="17.6" y="291.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.run (1 samples, 0.03%)</title><rect x="18.3" y="323.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.06%)</title><rect x="18.6" y="371.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="18.6" y="355.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.03%)</title><rect x="19.0" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.03%)</title><rect x="19.0" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,029 samples, 30.15%)</title><rect x="19.3" y="371.0" width="355.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.3" y="382.0">java/util/concurrent/ThreadPoolExecutor.getTask</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.poll (8 samples, 0.23%)</title><rect x="19.3" y="355.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (8 samples, 0.23%)</title><rect x="19.3" y="339.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 0.23%)</title><rect x="19.3" y="323.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="22.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (6 samples, 0.18%)</title><rect x="19.7" y="307.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.03%)</title><rect x="20.0" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.12%)</title><rect x="20.4" y="291.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.06%)</title><rect x="21.1" y="275.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.06%)</title><rect x="21.1" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.1" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.06%)</title><rect x="21.1" y="243.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.1" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (2 samples, 0.06%)</title><rect x="21.1" y="227.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.1" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="21.1" y="211.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="21.8" y="307.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="21.8" y="291.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="21.8" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,019 samples, 29.86%)</title><rect x="22.1" y="355.0" width="352.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="25.1" y="366.0">java/util/concurrent/ArrayBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (913 samples, 26.75%)</title><rect x="22.1" y="339.0" width="315.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.1" y="350.0">java/util/concurrent/locks/AbstractQueuedSy..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (14 samples, 0.41%)</title><rect x="22.1" y="323.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (9 samples, 0.26%)</title><rect x="23.8" y="307.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.8" y="318.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="24.2" y="291.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.2" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (2 samples, 0.06%)</title><rect x="24.5" y="291.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="24.9" y="275.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.9" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.15%)</title><rect x="25.2" y="291.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.2" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (4 samples, 0.12%)</title><rect x="25.6" y="275.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="26.9" y="323.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="26.9" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="26.9" y="291.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="26.9" y="275.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.9" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="26.9" y="259.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="29.9" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="26.9" y="243.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="29.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="26.9" y="227.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="29.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (48 samples, 1.41%)</title><rect x="27.3" y="323.0" width="16.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (46 samples, 1.35%)</title><rect x="28.0" y="307.0" width="15.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (46 samples, 1.35%)</title><rect x="28.0" y="291.0" width="15.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (43 samples, 1.26%)</title><rect x="29.0" y="275.0" width="14.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (43 samples, 1.26%)</title><rect x="29.0" y="259.0" width="14.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.0" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (42 samples, 1.23%)</title><rect x="29.4" y="243.0" width="14.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="32.4" y="254.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.06%)</title><rect x="29.7" y="227.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="32.7" y="238.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.06%)</title><rect x="29.7" y="211.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="32.7" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="30.1" y="195.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="33.1" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="30.1" y="179.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="33.1" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="30.1" y="163.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="33.1" y="174.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="30.4" y="227.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="33.4" y="238.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="30.4" y="211.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="33.4" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="30.7" y="227.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="33.7" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="30.7" y="211.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="33.7" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="30.7" y="195.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="33.7" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="30.7" y="179.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="33.7" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="30.7" y="163.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="33.7" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="30.7" y="147.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="33.7" y="158.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="31.1" y="227.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="34.1" y="238.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="31.1" y="211.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="34.1" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.06%)</title><rect x="31.4" y="227.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="34.4" y="238.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="31.8" y="211.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="34.8" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (29 samples, 0.85%)</title><rect x="32.1" y="227.0" width="10.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="35.1" y="238.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="42.2" y="227.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="45.2" y="238.0"></text>
</g>
<g>
<title>pthread_cond_signal (4 samples, 0.12%)</title><rect x="42.5" y="227.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="45.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.03%)</title><rect x="43.9" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (849 samples, 24.88%)</title><rect x="44.2" y="323.0" width="293.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.2" y="334.0">java/util/concurrent/locks/LockSupport...</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (849 samples, 24.88%)</title><rect x="44.2" y="307.0" width="293.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.2" y="318.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="56.3" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="59.3" y="302.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="56.7" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="59.7" y="302.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (2 samples, 0.06%)</title><rect x="57.0" y="291.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="60.0" y="302.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="57.7" y="291.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="60.7" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.03%)</title><rect x="58.1" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="61.1" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (807 samples, 23.64%)</title><rect x="58.4" y="291.0" width="279.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="61.4" y="302.0">Unsafe_Park(JNIEnv_*, _jobject*, unsi..</text>
</g>
<g>
<title>JavaThread::check_is_terminated(JavaThread::TerminatedTypes) const (1 samples, 0.03%)</title><rect x="59.4" y="275.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="62.4" y="286.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="59.8" y="275.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="62.8" y="286.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.12%)</title><rect x="60.1" y="275.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="63.1" y="286.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.09%)</title><rect x="60.5" y="259.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="63.5" y="270.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.09%)</title><rect x="60.5" y="243.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="63.5" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.06%)</title><rect x="60.5" y="227.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="63.5" y="238.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="60.5" y="211.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="63.5" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="60.8" y="211.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="63.8" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="61.2" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="64.2" y="238.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (12 samples, 0.35%)</title><rect x="61.5" y="275.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="64.5" y="286.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (5 samples, 0.15%)</title><rect x="61.9" y="259.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="64.9" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (2 samples, 0.06%)</title><rect x="61.9" y="243.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="64.9" y="254.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.03%)</title><rect x="62.2" y="227.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="65.2" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (3 samples, 0.09%)</title><rect x="62.6" y="243.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="65.6" y="254.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (2 samples, 0.06%)</title><rect x="63.6" y="259.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="66.6" y="270.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (3 samples, 0.09%)</title><rect x="64.3" y="259.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="67.3" y="270.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="65.3" y="259.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="68.3" y="270.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (1 samples, 0.03%)</title><rect x="65.7" y="275.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="68.7" y="286.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="66.0" y="275.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="69.0" y="286.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.03%)</title><rect x="66.0" y="259.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="69.0" y="270.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (3 samples, 0.09%)</title><rect x="66.4" y="275.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="69.4" y="286.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (3 samples, 0.09%)</title><rect x="66.4" y="259.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="69.4" y="270.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="67.0" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="70.0" y="254.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="67.4" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="70.4" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="67.7" y="275.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="70.7" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (761 samples, 22.30%)</title><rect x="68.1" y="275.0" width="263.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="71.1" y="286.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="69.8" y="259.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="72.8" y="270.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.15%)</title><rect x="70.2" y="259.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="73.2" y="270.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="70.8" y="243.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="73.8" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.06%)</title><rect x="71.2" y="243.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="74.2" y="254.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="71.9" y="259.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="74.9" y="270.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="71.9" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="74.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (735 samples, 21.54%)</title><rect x="72.2" y="259.0" width="254.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="75.2" y="270.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (12 samples, 0.35%)</title><rect x="326.3" y="259.0" width="4.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="329.3" y="270.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (3 samples, 0.09%)</title><rect x="329.5" y="243.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="332.5" y="254.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="330.5" y="259.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="333.5" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="330.8" y="259.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="333.8" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="331.2" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="334.2" y="286.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (2 samples, 0.06%)</title><rect x="331.5" y="275.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="334.5" y="286.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.03%)</title><rect x="332.2" y="275.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="335.2" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.06%)</title><rect x="332.6" y="275.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="335.6" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="332.6" y="259.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="335.6" y="270.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="332.9" y="259.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="335.9" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (5 samples, 0.15%)</title><rect x="333.3" y="275.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="336.3" y="286.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.06%)</title><rect x="333.6" y="259.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="336.6" y="270.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.06%)</title><rect x="333.6" y="243.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="336.6" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="334.3" y="259.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="337.3" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="334.6" y="259.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="337.6" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="334.6" y="243.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="337.6" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="334.6" y="227.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="337.6" y="238.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="334.6" y="211.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="337.6" y="222.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.03%)</title><rect x="335.0" y="275.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="338.0" y="286.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="335.3" y="275.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="338.3" y="286.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="335.7" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="338.7" y="286.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="336.0" y="275.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="339.0" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.06%)</title><rect x="336.4" y="275.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="339.4" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="337.1" y="275.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="340.1" y="286.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="337.4" y="291.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="340.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (24 samples, 0.70%)</title><rect x="337.8" y="339.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (24 samples, 0.70%)</title><rect x="337.8" y="323.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (24 samples, 0.70%)</title><rect x="337.8" y="307.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (22 samples, 0.64%)</title><rect x="338.1" y="291.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (22 samples, 0.64%)</title><rect x="338.1" y="275.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="341.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (22 samples, 0.64%)</title><rect x="338.1" y="259.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.1" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (20 samples, 0.59%)</title><rect x="338.8" y="243.0" width="6.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="341.8" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 0.59%)</title><rect x="338.8" y="227.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="341.8" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (20 samples, 0.59%)</title><rect x="338.8" y="211.0" width="6.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="341.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.03%)</title><rect x="345.7" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="348.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (82 samples, 2.40%)</title><rect x="346.1" y="339.0" width="28.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.1" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (82 samples, 2.40%)</title><rect x="346.1" y="323.0" width="28.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="349.1" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 2.40%)</title><rect x="346.1" y="307.0" width="28.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.1" y="318.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 2.40%)</title><rect x="346.1" y="291.0" width="28.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="349.1" y="302.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (82 samples, 2.40%)</title><rect x="346.1" y="275.0" width="28.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="349.1" y="286.0">jd..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="348.1" y="259.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="351.1" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (74 samples, 2.17%)</title><rect x="348.5" y="259.0" width="25.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="351.5" y="270.0">U..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="348.5" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="351.5" y="254.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="348.5" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="351.5" y="238.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="348.8" y="243.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="351.8" y="254.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="348.8" y="227.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="351.8" y="238.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.06%)</title><rect x="349.2" y="243.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="352.2" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.06%)</title><rect x="349.2" y="227.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="352.2" y="238.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="349.5" y="211.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="352.5" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="349.5" y="195.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="352.5" y="206.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="349.9" y="243.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="352.9" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="350.2" y="243.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="353.2" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="350.2" y="227.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="353.2" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="350.2" y="211.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="353.2" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="350.2" y="195.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="353.2" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="350.2" y="179.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="353.2" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="350.2" y="163.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="353.2" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.06%)</title><rect x="350.6" y="243.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="353.6" y="254.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="350.6" y="227.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="353.6" y="238.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="350.6" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="353.6" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="350.9" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="353.9" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="350.9" y="211.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="353.9" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="350.9" y="195.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="353.9" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="350.9" y="179.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="353.9" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="350.9" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="353.9" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="351.2" y="243.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="354.2" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.06%)</title><rect x="351.6" y="243.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="354.6" y="254.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.03%)</title><rect x="351.9" y="227.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="354.9" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (56 samples, 1.64%)</title><rect x="352.3" y="243.0" width="19.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="355.3" y="254.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (3 samples, 0.09%)</title><rect x="371.6" y="243.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="374.6" y="254.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.06%)</title><rect x="372.7" y="243.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="375.7" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.06%)</title><rect x="373.4" y="243.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="376.4" y="254.0"></text>
</g>
<g>
<title>os::verify_stack_alignment() (1 samples, 0.03%)</title><rect x="374.1" y="259.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="377.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (2 samples, 0.06%)</title><rect x="374.4" y="355.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.run (1,326 samples, 38.85%)</title><rect x="375.1" y="371.0" width="458.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.1" y="382.0">ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213..</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (1,326 samples, 38.85%)</title><rect x="375.1" y="355.0" width="458.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.1" y="366.0">ru/mail/polis/service/suhova/MoribundService.lambda$sendRespons..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.29%)</title><rect x="375.1" y="339.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.09%)</title><rect x="375.4" y="323.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.15%)</title><rect x="376.5" y="323.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="376.5" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="379.5" y="318.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="376.5" y="291.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="379.5" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.12%)</title><rect x="376.8" y="307.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.8" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.06%)</title><rect x="377.5" y="291.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="380.5" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.06%)</title><rect x="377.5" y="275.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.5" y="286.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.06%)</title><rect x="377.5" y="259.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="380.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="378.2" y="323.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.2" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="378.2" y="307.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.2" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="378.2" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendProxyResponse (529 samples, 15.50%)</title><rect x="378.6" y="339.0" width="182.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.6" y="350.0">ru/mail/polis/service/su..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (407 samples, 11.92%)</title><rect x="378.9" y="323.0" width="140.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.9" y="334.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="379.6" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="382.6" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (11 samples, 0.32%)</title><rect x="379.9" y="307.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="382.9" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (10 samples, 0.29%)</title><rect x="379.9" y="291.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="382.9" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="379.9" y="275.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="382.9" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (8 samples, 0.23%)</title><rect x="380.3" y="275.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="383.3" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (4 samples, 0.12%)</title><rect x="381.7" y="259.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="384.7" y="270.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="383.1" y="275.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="386.1" y="286.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.03%)</title><rect x="383.4" y="291.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="386.4" y="302.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="383.4" y="275.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="386.4" y="286.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="383.4" y="259.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="386.4" y="270.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.06%)</title><rect x="383.7" y="307.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.06%)</title><rect x="383.7" y="291.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.06%)</title><rect x="383.7" y="275.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="384.1" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.1" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.03%)</title><rect x="384.4" y="307.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (383 samples, 11.22%)</title><rect x="384.8" y="307.0" width="132.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.8" y="318.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (21 samples, 0.62%)</title><rect x="384.8" y="291.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="387.8" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="387.9" y="275.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="390.9" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="387.9" y="259.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="390.9" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="387.9" y="243.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="390.9" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="387.9" y="227.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="390.9" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="387.9" y="211.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="390.9" y="222.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="387.9" y="195.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="390.9" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="387.9" y="179.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="390.9" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="387.9" y="163.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="390.9" y="174.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (11 samples, 0.32%)</title><rect x="388.2" y="275.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.2" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (11 samples, 0.32%)</title><rect x="388.2" y="259.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="391.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (11 samples, 0.32%)</title><rect x="388.2" y="243.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.2" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="391.3" y="227.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="394.3" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (362 samples, 10.61%)</title><rect x="392.0" y="291.0" width="125.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.0" y="302.0">one/nio/net/Ses..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="392.4" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="395.4" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="392.4" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="395.4" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="392.4" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="395.4" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="392.4" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="395.4" y="238.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.03%)</title><rect x="392.4" y="211.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="395.4" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (360 samples, 10.55%)</title><rect x="392.7" y="275.0" width="124.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.7" y="286.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (349 samples, 10.23%)</title><rect x="394.1" y="259.0" width="120.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="397.1" y="270.0">one/nio/net/Ses..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (4 samples, 0.12%)</title><rect x="394.1" y="243.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="397.1" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="395.5" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="398.5" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.18%)</title><rect x="395.8" y="243.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="398.8" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="395.8" y="227.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="398.8" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.06%)</title><rect x="396.2" y="227.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="399.2" y="238.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (2 samples, 0.06%)</title><rect x="396.2" y="211.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="399.2" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.09%)</title><rect x="396.9" y="227.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="399.9" y="238.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (337 samples, 9.87%)</title><rect x="397.9" y="243.0" width="116.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.9" y="254.0">one/nio/net/Ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="397.9" y="227.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.9" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="397.9" y="211.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="400.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="397.9" y="195.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="400.9" y="206.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (1 samples, 0.03%)</title><rect x="398.3" y="179.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="401.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (335 samples, 9.82%)</title><rect x="398.6" y="227.0" width="115.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="401.6" y="238.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.29%)</title><rect x="398.6" y="211.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.29%)</title><rect x="398.6" y="195.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="401.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.09%)</title><rect x="398.6" y="179.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="401.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.06%)</title><rect x="399.0" y="163.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="402.0" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.06%)</title><rect x="399.0" y="147.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.0" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.21%)</title><rect x="399.6" y="179.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="402.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.21%)</title><rect x="399.6" y="163.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="402.6" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (5 samples, 0.15%)</title><rect x="400.0" y="147.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="403.0" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="401.7" y="147.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (324 samples, 9.49%)</title><rect x="402.1" y="211.0" width="112.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="405.1" y="222.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (324 samples, 9.49%)</title><rect x="402.1" y="195.0" width="112.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="405.1" y="206.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (306 samples, 8.97%)</title><rect x="402.1" y="179.0" width="105.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="405.1" y="190.0">sun/nio/ch/IO..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (306 samples, 8.97%)</title><rect x="402.1" y="163.0" width="105.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="405.1" y="174.0">sun/nio/ch/So..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (306 samples, 8.97%)</title><rect x="402.1" y="147.0" width="105.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="405.1" y="158.0">sun/nio/ch/Fi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.06%)</title><rect x="406.2" y="131.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="409.2" y="142.0"></text>
</g>
<g>
<title>write (292 samples, 8.56%)</title><rect x="406.9" y="131.0" width="101.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="409.9" y="142.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (18 samples, 0.53%)</title><rect x="507.9" y="179.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.9" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.18%)</title><rect x="507.9" y="163.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.9" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.06%)</title><rect x="509.2" y="147.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.2" y="158.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="509.6" y="131.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="512.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (12 samples, 0.35%)</title><rect x="509.9" y="163.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="513.7" y="147.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="516.7" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.03%)</title><rect x="514.1" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="517.1" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="514.1" y="195.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="517.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.03%)</title><rect x="514.4" y="243.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="517.4" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.21%)</title><rect x="514.8" y="259.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="517.8" y="270.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="514.8" y="243.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="517.8" y="254.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.18%)</title><rect x="515.1" y="243.0" width="2.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="518.1" y="254.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (6 samples, 0.18%)</title><rect x="515.1" y="227.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="518.1" y="238.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.06%)</title><rect x="515.8" y="211.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="518.8" y="222.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.06%)</title><rect x="516.5" y="211.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="519.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.18%)</title><rect x="517.2" y="307.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="520.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.18%)</title><rect x="517.2" y="291.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="520.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="517.2" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.2" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.15%)</title><rect x="517.5" y="275.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="520.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="518.6" y="259.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="521.6" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.03%)</title><rect x="518.9" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="521.9" y="270.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.03%)</title><rect x="518.9" y="243.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="521.9" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.03%)</title><rect x="518.9" y="227.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.03%)</title><rect x="519.3" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.put (121 samples, 3.55%)</title><rect x="519.6" y="323.0" width="41.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="522.6" y="334.0">ru/..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.18%)</title><rect x="519.6" y="307.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="522.6" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="520.7" y="291.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="523.7" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="521.0" y="291.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="524.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (1 samples, 0.03%)</title><rect x="521.3" y="291.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="524.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (113 samples, 3.31%)</title><rect x="521.7" y="307.0" width="39.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="524.7" y="318.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (5 samples, 0.15%)</title><rect x="522.4" y="291.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="525.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (5 samples, 0.15%)</title><rect x="522.4" y="275.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="525.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (5 samples, 0.15%)</title><rect x="522.4" y="259.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="525.4" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.06%)</title><rect x="522.7" y="243.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="525.7" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.03%)</title><rect x="522.7" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.7" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.03%)</title><rect x="523.1" y="227.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="526.1" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.03%)</title><rect x="523.1" y="211.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="526.1" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.03%)</title><rect x="523.4" y="243.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="526.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="523.8" y="243.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="526.8" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="523.8" y="227.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="526.8" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="523.8" y="211.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.06%)</title><rect x="524.1" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="527.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.03%)</title><rect x="524.5" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="527.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.03%)</title><rect x="524.5" y="259.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.5" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (1 samples, 0.03%)</title><rect x="524.5" y="243.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="527.5" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.remove (1 samples, 0.03%)</title><rect x="524.5" y="227.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="527.5" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.expungeStaleEntry (1 samples, 0.03%)</title><rect x="524.5" y="211.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="527.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.upsert (104 samples, 3.05%)</title><rect x="524.8" y="291.0" width="36.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="527.8" y="302.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (10 samples, 0.29%)</title><rect x="524.8" y="275.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="527.8" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="525.1" y="259.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="528.1" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="525.1" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="528.1" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="525.1" y="227.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="528.1" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="525.1" y="211.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="528.1" y="222.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="525.1" y="195.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="528.1" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="525.1" y="179.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="528.1" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="525.1" y="163.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="528.1" y="174.0"></text>
</g>
<g>
<title>G1Allocator::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="525.1" y="147.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="528.1" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="525.5" y="259.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="528.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="525.5" y="243.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="528.5" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.09%)</title><rect x="525.5" y="227.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="528.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="526.2" y="211.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="529.2" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="526.2" y="195.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="529.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.03%)</title><rect x="526.5" y="227.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="529.5" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.12%)</title><rect x="526.9" y="259.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="529.9" y="270.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.03%)</title><rect x="526.9" y="243.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="529.9" y="254.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.09%)</title><rect x="527.2" y="243.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="530.2" y="254.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="527.2" y="227.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="530.2" y="238.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.06%)</title><rect x="527.6" y="227.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="530.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (93 samples, 2.72%)</title><rect x="528.3" y="275.0" width="32.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="531.3" y="286.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (93 samples, 2.72%)</title><rect x="528.3" y="259.0" width="32.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.3" y="270.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (19 samples, 0.56%)</title><rect x="531.0" y="243.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="534.0" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (19 samples, 0.56%)</title><rect x="531.0" y="227.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="534.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (5 samples, 0.15%)</title><rect x="537.6" y="243.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="540.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (61 samples, 1.79%)</title><rect x="539.3" y="243.0" width="21.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="542.3" y="254.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (57 samples, 1.67%)</title><rect x="540.7" y="227.0" width="19.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="543.7" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (56 samples, 1.64%)</title><rect x="541.1" y="211.0" width="19.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="544.1" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.06%)</title><rect x="542.1" y="195.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="545.1" y="206.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (44 samples, 1.29%)</title><rect x="542.8" y="195.0" width="15.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="545.8" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (39 samples, 1.14%)</title><rect x="544.5" y="179.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="547.5" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.12%)</title><rect x="556.6" y="163.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="559.6" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compare (2 samples, 0.06%)</title><rect x="558.0" y="195.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="561.0" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (5 samples, 0.15%)</title><rect x="558.7" y="195.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="561.7" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.03%)</title><rect x="560.1" y="179.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="563.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.&lt;init&gt; (1 samples, 0.03%)</title><rect x="560.4" y="275.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="563.4" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.03%)</title><rect x="560.4" y="259.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="563.4" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="560.4" y="243.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="563.4" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="560.4" y="227.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="563.4" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="560.4" y="211.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="563.4" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="560.4" y="195.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="563.4" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="560.4" y="179.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="563.4" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="560.4" y="163.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="563.4" y="174.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="560.4" y="147.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="563.4" y="158.0"></text>
</g>
<g>
<title>G1Allocator::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="560.4" y="131.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="563.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.toByteBuffer (2 samples, 0.06%)</title><rect x="560.8" y="307.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="563.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.06%)</title><rect x="560.8" y="291.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="563.8" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.06%)</title><rect x="560.8" y="275.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="563.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.06%)</title><rect x="560.8" y="259.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="563.8" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="561.1" y="243.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="564.1" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="561.1" y="227.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="564.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendReplicationResponse (787 samples, 23.06%)</title><rect x="561.5" y="339.0" width="272.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="564.5" y="350.0">ru/mail/polis/service/suhova/Moribun..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (151 samples, 4.42%)</title><rect x="562.8" y="323.0" width="52.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="565.8" y="334.0">one/n..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.15%)</title><rect x="562.8" y="307.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="565.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.15%)</title><rect x="562.8" y="291.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="565.8" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.15%)</title><rect x="562.8" y="275.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="565.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="564.2" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.2" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (144 samples, 4.22%)</title><rect x="564.6" y="307.0" width="49.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="567.6" y="318.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 0.21%)</title><rect x="564.6" y="291.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="567.6" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.18%)</title><rect x="564.9" y="275.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="567.9" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.18%)</title><rect x="564.9" y="259.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="567.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.18%)</title><rect x="564.9" y="243.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.9" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="566.3" y="227.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="569.3" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (137 samples, 4.01%)</title><rect x="567.0" y="291.0" width="47.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="570.0" y="302.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (137 samples, 4.01%)</title><rect x="567.0" y="275.0" width="47.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="570.0" y="286.0">one/..</text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="567.0" y="259.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="570.0" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (134 samples, 3.93%)</title><rect x="567.3" y="259.0" width="46.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="570.3" y="270.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (134 samples, 3.93%)</title><rect x="567.3" y="243.0" width="46.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="570.3" y="254.0">one/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (134 samples, 3.93%)</title><rect x="567.3" y="227.0" width="46.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="570.3" y="238.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="567.3" y="211.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="567.3" y="195.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="570.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="567.3" y="179.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="570.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="567.3" y="163.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="570.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="567.3" y="147.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="570.3" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (132 samples, 3.87%)</title><rect x="567.7" y="211.0" width="45.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="570.7" y="222.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (132 samples, 3.87%)</title><rect x="567.7" y="195.0" width="45.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="570.7" y="206.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (130 samples, 3.81%)</title><rect x="567.7" y="179.0" width="44.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="570.7" y="190.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (130 samples, 3.81%)</title><rect x="567.7" y="163.0" width="44.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="570.7" y="174.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (130 samples, 3.81%)</title><rect x="567.7" y="147.0" width="44.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="570.7" y="158.0">sun/..</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.03%)</title><rect x="569.4" y="131.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="572.4" y="142.0"></text>
</g>
<g>
<title>write (124 samples, 3.63%)</title><rect x="569.7" y="131.0" width="42.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="572.7" y="142.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="612.6" y="179.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="615.6" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="612.6" y="163.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="615.6" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="612.6" y="147.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="615.6" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="612.6" y="131.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="615.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="613.0" y="163.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.03%)</title><rect x="613.3" y="211.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (1 samples, 0.03%)</title><rect x="613.3" y="195.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="616.3" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="613.7" y="259.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="616.7" y="270.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="613.7" y="243.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="616.7" y="254.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.06%)</title><rect x="613.7" y="227.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="616.7" y="238.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.06%)</title><rect x="613.7" y="211.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="616.7" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="614.3" y="307.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.3" y="318.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.03%)</title><rect x="614.7" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="617.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/Consensus.put (5 samples, 0.15%)</title><rect x="615.0" y="323.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="618.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/Consensus.simpleResponse (5 samples, 0.15%)</title><rect x="615.0" y="307.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.0" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.03%)</title><rect x="615.4" y="291.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="618.4" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.03%)</title><rect x="615.7" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="618.7" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.03%)</title><rect x="616.1" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="619.1" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (1 samples, 0.03%)</title><rect x="616.1" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="619.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (1 samples, 0.03%)</title><rect x="616.4" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="619.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.put (27 samples, 0.79%)</title><rect x="616.8" y="323.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="619.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="617.5" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="620.5" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="617.5" y="291.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="620.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (23 samples, 0.67%)</title><rect x="617.8" y="307.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="620.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.03%)</title><rect x="617.8" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="620.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.03%)</title><rect x="617.8" y="275.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="620.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.03%)</title><rect x="617.8" y="259.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="620.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.sizeInBytes (1 samples, 0.03%)</title><rect x="618.2" y="291.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="621.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.get (1 samples, 0.03%)</title><rect x="618.2" y="275.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="621.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.upsert (21 samples, 0.62%)</title><rect x="618.5" y="291.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="621.5" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.06%)</title><rect x="618.8" y="275.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.8" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="618.8" y="259.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="618.8" y="243.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="621.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.03%)</title><rect x="619.2" y="227.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="622.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (18 samples, 0.53%)</title><rect x="619.5" y="275.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="622.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (18 samples, 0.53%)</title><rect x="619.5" y="259.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="622.5" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.06%)</title><rect x="620.2" y="243.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="623.2" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.06%)</title><rect x="620.2" y="227.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (14 samples, 0.41%)</title><rect x="620.9" y="243.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="623.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.32%)</title><rect x="622.0" y="227.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="625.0" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (11 samples, 0.32%)</title><rect x="622.0" y="211.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="625.0" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="622.3" y="195.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="625.3" y="206.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.23%)</title><rect x="622.6" y="195.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="625.6" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.18%)</title><rect x="623.3" y="179.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compare (1 samples, 0.03%)</title><rect x="625.4" y="195.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="628.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.toByteBuffer (1 samples, 0.03%)</title><rect x="625.8" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="628.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="625.8" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="628.8" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="625.8" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="628.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.getAllResponses (600 samples, 17.58%)</title><rect x="626.1" y="323.0" width="207.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.1" y="334.0">ru/mail/polis/service/suhov..</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.03%)</title><rect x="626.4" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="629.4" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.18%)</title><rect x="626.8" y="307.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="629.8" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.18%)</title><rect x="626.8" y="291.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="629.8" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.15%)</title><rect x="627.1" y="275.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="630.1" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.15%)</title><rect x="627.1" y="259.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="630.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="627.8" y="243.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="630.8" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.06%)</title><rect x="628.2" y="243.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="631.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="628.5" y="227.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="631.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.proxy (591 samples, 17.32%)</title><rect x="628.9" y="307.0" width="204.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="631.9" y="318.0">ru/mail/polis/service/suhov..</text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.21%)</title><rect x="628.9" y="291.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="631.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.15%)</title><rect x="629.6" y="275.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="632.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.12%)</title><rect x="629.9" y="259.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.9" y="270.0"></text>
</g>
<g>
<title>_new_array_Java (2 samples, 0.06%)</title><rect x="630.6" y="243.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="633.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (584 samples, 17.11%)</title><rect x="631.3" y="291.0" width="201.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.3" y="302.0">one/nio/http/HttpClient.in..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (584 samples, 17.11%)</title><rect x="631.3" y="275.0" width="201.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.3" y="286.0">one/nio/http/HttpClient.in..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (368 samples, 10.78%)</title><rect x="632.0" y="259.0" width="127.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="635.0" y="270.0">one/nio/http/Htt..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.18%)</title><rect x="632.0" y="243.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="635.0" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.18%)</title><rect x="632.0" y="227.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="635.0" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.18%)</title><rect x="632.0" y="211.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="635.0" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.18%)</title><rect x="632.0" y="195.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="635.0" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="632.0" y="179.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="635.0" y="190.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.03%)</title><rect x="632.3" y="179.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="635.3" y="190.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="632.3" y="163.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="635.3" y="174.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="632.3" y="147.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="635.3" y="158.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.03%)</title><rect x="632.3" y="131.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="635.3" y="142.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="632.7" y="179.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="635.7" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="632.7" y="163.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="635.7" y="174.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="632.7" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="635.7" y="158.0"></text>
</g>
<g>
<title>G1Allocator::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="632.7" y="131.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="635.7" y="142.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="633.0" y="147.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="636.0" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.03%)</title><rect x="633.0" y="131.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="636.0" y="142.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="633.0" y="115.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="636.0" y="126.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.06%)</title><rect x="633.4" y="179.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="636.4" y="190.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.06%)</title><rect x="633.4" y="163.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="636.4" y="174.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (362 samples, 10.61%)</title><rect x="634.1" y="243.0" width="125.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="637.1" y="254.0">one/nio/net/Jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="634.1" y="227.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="637.1" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="634.1" y="211.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="634.1" y="195.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.1" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="634.1" y="179.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="637.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.06%)</title><rect x="634.1" y="163.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="637.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (360 samples, 10.55%)</title><rect x="634.7" y="227.0" width="124.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="637.7" y="238.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.23%)</title><rect x="634.7" y="211.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="637.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.23%)</title><rect x="634.7" y="195.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="637.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.09%)</title><rect x="635.1" y="179.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (2 samples, 0.06%)</title><rect x="635.4" y="163.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.4" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.06%)</title><rect x="635.4" y="147.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.4" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.06%)</title><rect x="635.4" y="131.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.4" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="636.1" y="179.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="639.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="636.1" y="163.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.1" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="636.1" y="147.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="639.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.09%)</title><rect x="636.5" y="179.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.09%)</title><rect x="636.5" y="163.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.06%)</title><rect x="636.5" y="147.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="636.8" y="131.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="637.2" y="147.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.2" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="637.2" y="131.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.2" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="637.2" y="115.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.2" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (1 samples, 0.03%)</title><rect x="637.2" y="99.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.2" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (351 samples, 10.28%)</title><rect x="637.5" y="211.0" width="121.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.5" y="222.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (351 samples, 10.28%)</title><rect x="637.5" y="195.0" width="121.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="640.5" y="206.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (342 samples, 10.02%)</title><rect x="637.5" y="179.0" width="118.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="640.5" y="190.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (342 samples, 10.02%)</title><rect x="637.5" y="163.0" width="118.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.5" y="174.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (342 samples, 10.02%)</title><rect x="637.5" y="147.0" width="118.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="640.5" y="158.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.06%)</title><rect x="645.8" y="131.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="648.8" y="142.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="646.2" y="115.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="649.2" y="126.0"></text>
</g>
<g>
<title>rpc_errlist (316 samples, 9.26%)</title><rect x="646.5" y="131.0" width="109.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="649.5" y="142.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (9 samples, 0.26%)</title><rect x="755.8" y="179.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="758.8" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.18%)</title><rect x="755.8" y="163.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.8" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.18%)</title><rect x="755.8" y="147.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="758.8" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.09%)</title><rect x="757.8" y="163.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="760.8" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="758.2" y="147.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="761.2" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="758.5" y="147.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="761.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (1 samples, 0.03%)</title><rect x="758.9" y="211.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="761.9" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="758.9" y="195.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="761.9" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="758.9" y="179.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="761.9" y="190.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="758.9" y="163.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="761.9" y="174.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="758.9" y="147.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.9" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (10 samples, 0.29%)</title><rect x="759.2" y="259.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="762.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.06%)</title><rect x="759.2" y="243.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="762.2" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="759.6" y="227.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="762.6" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="759.6" y="211.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.6" y="222.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="759.6" y="195.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="762.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (5 samples, 0.15%)</title><rect x="759.9" y="243.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="762.9" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.12%)</title><rect x="760.2" y="227.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="763.2" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.12%)</title><rect x="760.2" y="211.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="763.2" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.09%)</title><rect x="761.6" y="243.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="762.3" y="227.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="765.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (13 samples, 0.38%)</title><rect x="762.7" y="259.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="765.7" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="763.4" y="243.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="766.4" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.29%)</title><rect x="763.7" y="243.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="766.7" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.03%)</title><rect x="763.7" y="227.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="766.7" y="238.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="763.7" y="211.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="766.7" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="763.7" y="195.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="766.7" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.26%)</title><rect x="764.1" y="227.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="767.1" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.26%)</title><rect x="764.1" y="211.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="767.1" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.18%)</title><rect x="765.1" y="195.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="768.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="765.8" y="179.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="768.8" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.03%)</title><rect x="765.8" y="163.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="768.8" y="174.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.09%)</title><rect x="766.1" y="179.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="769.1" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.09%)</title><rect x="767.2" y="259.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="770.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.09%)</title><rect x="767.2" y="243.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="770.2" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.09%)</title><rect x="767.2" y="227.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="770.2" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="767.9" y="211.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="770.9" y="222.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (181 samples, 5.30%)</title><rect x="768.2" y="259.0" width="62.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="771.2" y="270.0">one/ni..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (135 samples, 3.96%)</title><rect x="768.9" y="243.0" width="46.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="771.9" y="254.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="768.9" y="227.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="771.9" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="768.9" y="211.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="771.9" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="768.9" y="195.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.09%)</title><rect x="769.2" y="227.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="772.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.09%)</title><rect x="769.2" y="211.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="772.2" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/DAOServiceMethods.put (1 samples, 0.03%)</title><rect x="769.9" y="195.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="772.9" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (130 samples, 3.81%)</title><rect x="770.3" y="227.0" width="44.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="773.3" y="238.0">java..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (129 samples, 3.78%)</title><rect x="770.6" y="211.0" width="44.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.6" y="222.0">java..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (127 samples, 3.72%)</title><rect x="771.3" y="195.0" width="43.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="774.3" y="206.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.09%)</title><rect x="771.3" y="179.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="774.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.09%)</title><rect x="771.3" y="163.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="771.3" y="147.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="774.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (1 samples, 0.03%)</title><rect x="771.3" y="131.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="774.3" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.06%)</title><rect x="771.7" y="147.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="774.7" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.06%)</title><rect x="771.7" y="131.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="774.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.06%)</title><rect x="771.7" y="115.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="774.7" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (120 samples, 3.52%)</title><rect x="772.3" y="179.0" width="41.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="775.3" y="190.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (120 samples, 3.52%)</title><rect x="772.3" y="163.0" width="41.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="775.3" y="174.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (115 samples, 3.37%)</title><rect x="772.3" y="147.0" width="39.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="775.3" y="158.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (115 samples, 3.37%)</title><rect x="772.3" y="131.0" width="39.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="775.3" y="142.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (115 samples, 3.37%)</title><rect x="772.3" y="115.0" width="39.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.3" y="126.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.06%)</title><rect x="774.1" y="99.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="777.1" y="110.0"></text>
</g>
<g>
<title>write (108 samples, 3.16%)</title><rect x="774.8" y="99.0" width="37.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="777.8" y="110.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (5 samples, 0.15%)</title><rect x="812.1" y="147.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="815.1" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.12%)</title><rect x="812.5" y="131.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="815.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (4 samples, 0.12%)</title><rect x="813.8" y="179.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.8" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="813.8" y="163.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.09%)</title><rect x="814.2" y="163.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.2" y="174.0"></text>
</g>
<g>
<title>pthread_self (2 samples, 0.06%)</title><rect x="814.5" y="147.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="817.5" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="815.2" y="227.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (37 samples, 1.08%)</title><rect x="815.6" y="243.0" width="12.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="818.6" y="254.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (35 samples, 1.03%)</title><rect x="816.3" y="227.0" width="12.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="819.3" y="238.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="816.6" y="211.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="819.6" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="816.9" y="211.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="819.9" y="222.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (19 samples, 0.56%)</title><rect x="817.3" y="211.0" width="6.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="820.3" y="222.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.03%)</title><rect x="818.0" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="821.0" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.06%)</title><rect x="818.3" y="195.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="821.3" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (2 samples, 0.06%)</title><rect x="818.3" y="179.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="821.3" y="190.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (2 samples, 0.06%)</title><rect x="818.3" y="163.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="821.3" y="174.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.03%)</title><rect x="819.0" y="195.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="822.0" y="206.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.06%)</title><rect x="819.4" y="195.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="822.4" y="206.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="819.7" y="179.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="822.7" y="190.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="820.1" y="195.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="823.1" y="206.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="820.1" y="179.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="823.1" y="190.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="820.1" y="163.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="823.1" y="174.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="820.1" y="147.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="823.1" y="158.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="820.4" y="195.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="823.4" y="206.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="820.8" y="195.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="823.8" y="206.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.06%)</title><rect x="821.1" y="195.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="824.1" y="206.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (6 samples, 0.18%)</title><rect x="821.8" y="195.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="824.8" y="206.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.06%)</title><rect x="822.1" y="179.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="825.1" y="190.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (3 samples, 0.09%)</title><rect x="822.8" y="179.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="825.8" y="190.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="822.8" y="163.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="825.8" y="174.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="822.8" y="147.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="825.8" y="158.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="822.8" y="131.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="825.8" y="142.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.03%)</title><rect x="822.8" y="115.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="825.8" y="126.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.06%)</title><rect x="823.2" y="163.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="826.2" y="174.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="823.2" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="826.2" y="158.0"></text>
</g>
<g>
<title>nmethod::scopes_data_end() const (1 samples, 0.03%)</title><rect x="823.5" y="147.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="826.5" y="158.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="823.9" y="211.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="826.9" y="222.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="824.2" y="211.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="827.2" y="222.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.06%)</title><rect x="824.6" y="211.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="827.6" y="222.0"></text>
</g>
<g>
<title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2 (1 samples, 0.03%)</title><rect x="825.2" y="211.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="828.2" y="222.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (1 samples, 0.03%)</title><rect x="825.6" y="211.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="828.6" y="222.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="825.9" y="211.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="828.9" y="222.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.03%)</title><rect x="826.3" y="211.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="829.3" y="222.0"></text>
</g>
<g>
<title>jsqrt (2 samples, 0.06%)</title><rect x="826.6" y="211.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="829.6" y="222.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="827.3" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="830.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (2 samples, 0.06%)</title><rect x="827.7" y="211.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="830.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (7 samples, 0.21%)</title><rect x="828.4" y="243.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="831.4" y="254.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (5 samples, 0.15%)</title><rect x="830.8" y="259.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="833.8" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.09%)</title><rect x="830.8" y="243.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="833.8" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.09%)</title><rect x="830.8" y="227.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="833.8" y="238.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.09%)</title><rect x="830.8" y="211.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.8" y="222.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (2 samples, 0.06%)</title><rect x="831.8" y="243.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="834.8" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (2 samples, 0.06%)</title><rect x="831.8" y="227.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="834.8" y="238.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (2 samples, 0.06%)</title><rect x="832.5" y="259.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="835.5" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (2 samples, 0.06%)</title><rect x="832.5" y="243.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="835.5" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (2 samples, 0.06%)</title><rect x="832.5" y="227.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="835.5" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedList$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="832.9" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="835.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.03%)</title><rect x="833.2" y="307.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.2" y="318.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,024 samples, 30.00%)</title><rect x="833.5" y="419.0" width="354.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.5" y="430.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (1 samples, 0.03%)</title><rect x="834.6" y="403.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="837.6" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.03%)</title><rect x="834.9" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="837.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.03%)</title><rect x="834.9" y="387.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.03%)</title><rect x="835.3" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="838.3" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.03%)</title><rect x="835.3" y="387.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="838.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.03%)</title><rect x="835.3" y="371.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="838.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (645 samples, 18.90%)</title><rect x="835.6" y="403.0" width="223.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="838.6" y="414.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.06%)</title><rect x="837.0" y="387.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="840.0" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.06%)</title><rect x="837.0" y="371.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="840.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="837.0" y="355.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="840.0" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.06%)</title><rect x="837.7" y="387.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="840.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.03%)</title><rect x="838.0" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="841.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.03%)</title><rect x="838.0" y="355.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.0" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.09%)</title><rect x="838.4" y="387.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="841.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.06%)</title><rect x="838.7" y="371.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="841.7" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.12%)</title><rect x="839.4" y="387.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="842.4" y="398.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="840.1" y="371.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="843.1" y="382.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="840.5" y="371.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="843.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (628 samples, 18.40%)</title><rect x="840.8" y="387.0" width="217.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="843.8" y="398.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (628 samples, 18.40%)</title><rect x="840.8" y="371.0" width="217.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="843.8" y="382.0">sun/nio/ch/SelectorImpl.lockA..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (628 samples, 18.40%)</title><rect x="840.8" y="355.0" width="217.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.8" y="366.0">sun/nio/ch/KQueueSelectorImpl..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (596 samples, 17.46%)</title><rect x="841.5" y="339.0" width="206.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="844.5" y="350.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.03%)</title><rect x="848.1" y="323.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="851.1" y="334.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="848.4" y="323.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="851.4" y="334.0"></text>
</g>
<g>
<title>kevent (575 samples, 16.85%)</title><rect x="848.8" y="323.0" width="198.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="851.8" y="334.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (7 samples, 0.21%)</title><rect x="1047.6" y="339.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1050.6" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.06%)</title><rect x="1047.6" y="323.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1050.6" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="1047.6" y="307.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1050.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.15%)</title><rect x="1048.2" y="323.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1051.2" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.12%)</title><rect x="1048.2" y="307.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1051.2" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.12%)</title><rect x="1048.2" y="291.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1051.2" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.12%)</title><rect x="1048.2" y="275.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1051.2" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.06%)</title><rect x="1048.9" y="259.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1051.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="1049.6" y="307.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1052.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="1049.6" y="291.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1052.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (1 samples, 0.03%)</title><rect x="1049.6" y="275.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1052.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.isConnected (1 samples, 0.03%)</title><rect x="1049.6" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1052.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (9 samples, 0.26%)</title><rect x="1050.0" y="339.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1053.0" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (5 samples, 0.15%)</title><rect x="1051.4" y="323.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1054.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (9 samples, 0.26%)</title><rect x="1053.1" y="339.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1056.1" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (9 samples, 0.26%)</title><rect x="1053.1" y="323.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1056.1" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.06%)</title><rect x="1053.1" y="307.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1056.1" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.21%)</title><rect x="1053.8" y="307.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1056.8" y="318.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (7 samples, 0.21%)</title><rect x="1053.8" y="291.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1056.8" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (7 samples, 0.21%)</title><rect x="1053.8" y="275.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1056.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (3 samples, 0.09%)</title><rect x="1056.2" y="339.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1059.2" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (3 samples, 0.09%)</title><rect x="1056.2" y="323.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1059.2" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.09%)</title><rect x="1056.2" y="307.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1059.2" y="318.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.09%)</title><rect x="1056.2" y="291.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1059.2" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.09%)</title><rect x="1056.2" y="275.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1059.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.06%)</title><rect x="1057.2" y="339.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1060.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="1057.6" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1060.6" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.03%)</title><rect x="1057.6" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1060.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.06%)</title><rect x="1057.9" y="387.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1060.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.06%)</title><rect x="1057.9" y="371.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1060.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.03%)</title><rect x="1058.3" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1061.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (373 samples, 10.93%)</title><rect x="1058.6" y="403.0" width="129.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1061.6" y="414.0">one/nio/net/Sess..</text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="1060.0" y="387.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1063.0" y="398.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.12%)</title><rect x="1060.3" y="387.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1063.3" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (359 samples, 10.52%)</title><rect x="1061.7" y="387.0" width="124.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1064.7" y="398.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.03%)</title><rect x="1061.7" y="371.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1064.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.03%)</title><rect x="1061.7" y="355.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1064.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1061.7" y="339.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1064.7" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1061.7" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1064.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1061.7" y="307.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1064.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (220 samples, 6.45%)</title><rect x="1062.1" y="371.0" width="76.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1065.1" y="382.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (162 samples, 4.75%)</title><rect x="1065.9" y="355.0" width="56.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1068.9" y="366.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (162 samples, 4.75%)</title><rect x="1065.9" y="339.0" width="56.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1068.9" y="350.0">one/ni..</text>
</g>
<g>
<title>RequestHandler0_sendResponse.handleRequest (148 samples, 4.34%)</title><rect x="1066.6" y="323.0" width="51.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1069.6" y="334.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.06%)</title><rect x="1067.3" y="307.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1070.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.06%)</title><rect x="1067.3" y="291.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1070.3" y="302.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.06%)</title><rect x="1067.3" y="275.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1070.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.06%)</title><rect x="1067.3" y="259.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1070.3" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (5 samples, 0.15%)</title><rect x="1068.0" y="307.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1071.0" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.15%)</title><rect x="1068.0" y="291.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1071.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1068.0" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1071.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="1068.0" y="259.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1071.0" y="270.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="1068.0" y="243.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1071.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.03%)</title><rect x="1068.3" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1071.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="1068.3" y="259.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1071.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="1068.3" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1071.3" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1068.6" y="275.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1071.6" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1068.6" y="259.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.6" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1068.6" y="243.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.06%)</title><rect x="1069.0" y="275.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1072.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="1069.0" y="259.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="1069.0" y="243.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1072.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.06%)</title><rect x="1069.0" y="227.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1072.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (139 samples, 4.07%)</title><rect x="1069.7" y="307.0" width="48.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1072.7" y="318.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/968868247.linkToTargetMethod (4 samples, 0.12%)</title><rect x="1070.0" y="291.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1073.0" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.12%)</title><rect x="1070.0" y="275.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1073.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.get$Lambda (4 samples, 0.12%)</title><rect x="1070.0" y="259.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1073.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/1392213251.&lt;init&gt; (3 samples, 0.09%)</title><rect x="1070.4" y="243.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1073.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.06%)</title><rect x="1070.7" y="227.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1073.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (134 samples, 3.93%)</title><rect x="1071.4" y="291.0" width="46.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1074.4" y="302.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (128 samples, 3.75%)</title><rect x="1072.1" y="275.0" width="44.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1075.1" y="286.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (9 samples, 0.26%)</title><rect x="1072.1" y="259.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1075.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.06%)</title><rect x="1074.5" y="243.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1077.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.06%)</title><rect x="1074.5" y="227.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1077.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.06%)</title><rect x="1074.5" y="211.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1077.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (1 samples, 0.03%)</title><rect x="1074.5" y="195.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1077.5" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="1074.5" y="179.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1077.5" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="1074.5" y="163.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1077.5" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="1074.9" y="195.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1077.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.03%)</title><rect x="1074.9" y="179.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1077.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="1074.9" y="163.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1077.9" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="1074.9" y="147.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1077.9" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (30 samples, 0.88%)</title><rect x="1075.2" y="259.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1078.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (30 samples, 0.88%)</title><rect x="1075.2" y="243.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1078.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (24 samples, 0.70%)</title><rect x="1075.2" y="227.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1078.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (24 samples, 0.70%)</title><rect x="1075.2" y="211.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1078.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (24 samples, 0.70%)</title><rect x="1075.2" y="195.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1078.2" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (24 samples, 0.70%)</title><rect x="1075.2" y="179.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1078.2" y="190.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (23 samples, 0.67%)</title><rect x="1075.6" y="163.0" width="7.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1078.6" y="174.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1075.6" y="147.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.6" y="158.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="1075.6" y="131.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.6" y="142.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="1075.6" y="115.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.6" y="126.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 0.62%)</title><rect x="1075.9" y="147.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1078.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (21 samples, 0.62%)</title><rect x="1075.9" y="131.0" width="7.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1078.9" y="142.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="1083.2" y="147.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1086.2" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.06%)</title><rect x="1083.5" y="227.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1086.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1083.5" y="211.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1086.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.03%)</title><rect x="1083.9" y="211.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1086.9" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="1083.9" y="195.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1086.9" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="1083.9" y="179.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1086.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.12%)</title><rect x="1084.2" y="227.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1087.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.12%)</title><rect x="1084.2" y="211.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1087.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.06%)</title><rect x="1084.9" y="195.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1087.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (89 samples, 2.61%)</title><rect x="1085.6" y="259.0" width="30.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1088.6" y="270.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (89 samples, 2.61%)</title><rect x="1085.6" y="243.0" width="30.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1088.6" y="254.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (89 samples, 2.61%)</title><rect x="1085.6" y="227.0" width="30.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1088.6" y="238.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (89 samples, 2.61%)</title><rect x="1085.6" y="211.0" width="30.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1088.6" y="222.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (89 samples, 2.61%)</title><rect x="1085.6" y="195.0" width="30.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1088.6" y="206.0">jd..</text>
</g>
<g>
<title>Thread::current() (2 samples, 0.06%)</title><rect x="1086.3" y="179.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.3" y="190.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (84 samples, 2.46%)</title><rect x="1087.0" y="179.0" width="29.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1090.0" y="190.0">Un..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="1087.0" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.0" y="174.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="1087.0" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.0" y="158.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.06%)</title><rect x="1087.3" y="163.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.3" y="174.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.06%)</title><rect x="1087.3" y="147.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.3" y="158.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1087.7" y="131.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.7" y="142.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="1087.7" y="115.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.7" y="126.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1087.7" y="99.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.7" y="110.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="1088.0" y="163.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.0" y="174.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1088.4" y="163.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1091.4" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1088.4" y="147.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1091.4" y="158.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="1088.7" y="163.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.7" y="174.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="1089.0" y="163.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.0" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.09%)</title><rect x="1089.4" y="163.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.4" y="174.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1089.4" y="147.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.4" y="158.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="1089.4" y="131.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.4" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.06%)</title><rect x="1089.7" y="147.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.7" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.06%)</title><rect x="1089.7" y="131.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.7" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.06%)</title><rect x="1089.7" y="115.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.7" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.06%)</title><rect x="1089.7" y="99.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.7" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.06%)</title><rect x="1089.7" y="83.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.7" y="94.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.06%)</title><rect x="1089.7" y="67.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1092.7" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1090.1" y="51.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.1" y="62.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1090.1" y="35.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.1" y="46.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.12%)</title><rect x="1090.4" y="163.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.4" y="174.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="1090.4" y="147.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.4" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.06%)</title><rect x="1090.8" y="147.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.8" y="158.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.03%)</title><rect x="1091.1" y="131.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.1" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="1091.5" y="147.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.5" y="158.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.12%)</title><rect x="1091.8" y="163.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.8" y="174.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="1092.5" y="147.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.5" y="158.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="1092.5" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.5" y="142.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="1092.8" y="147.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (60 samples, 1.76%)</title><rect x="1093.2" y="163.0" width="20.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1096.2" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="1113.9" y="163.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1116.9" y="174.0"></text>
</g>
<g>
<title>pthread_cond_signal (4 samples, 0.12%)</title><rect x="1114.3" y="163.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1117.3" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.06%)</title><rect x="1115.0" y="147.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1118.0" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1115.7" y="163.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1118.7" y="174.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.03%)</title><rect x="1116.0" y="179.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1119.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (4 samples, 0.12%)</title><rect x="1116.4" y="275.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1119.4" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.start (1 samples, 0.03%)</title><rect x="1116.4" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1119.4" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.start0 (1 samples, 0.03%)</title><rect x="1116.4" y="243.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1119.4" y="254.0"></text>
</g>
<g>
<title>JVM_StartThread (1 samples, 0.03%)</title><rect x="1116.4" y="227.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1119.4" y="238.0"></text>
</g>
<g>
<title>JavaThread::JavaThread(void (*)(JavaThread*, Thread*), unsigned long) (1 samples, 0.03%)</title><rect x="1116.4" y="211.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.4" y="222.0"></text>
</g>
<g>
<title>HandshakeState::HandshakeState() (1 samples, 0.03%)</title><rect x="1116.4" y="195.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.4" y="206.0"></text>
</g>
<g>
<title>OSXSemaphore::OSXSemaphore(unsigned int) (1 samples, 0.03%)</title><rect x="1116.4" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.4" y="190.0"></text>
</g>
<g>
<title>semaphore_create (1 samples, 0.03%)</title><rect x="1116.4" y="163.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1119.4" y="174.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.03%)</title><rect x="1116.4" y="147.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1119.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.&lt;init&gt; (3 samples, 0.09%)</title><rect x="1116.7" y="259.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1119.7" y="270.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder$1.newThread (3 samples, 0.09%)</title><rect x="1116.7" y="243.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1119.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DefaultThreadFactory.newThread (3 samples, 0.09%)</title><rect x="1116.7" y="227.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1119.7" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.03%)</title><rect x="1116.7" y="211.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1119.7" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1117.0" y="211.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1120.0" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1117.0" y="195.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1120.0" y="206.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (2 samples, 0.06%)</title><rect x="1117.0" y="179.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1120.0" y="190.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (2 samples, 0.06%)</title><rect x="1117.0" y="163.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1120.0" y="174.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (2 samples, 0.06%)</title><rect x="1117.0" y="147.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1120.0" y="158.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ull&gt;::oop_access_barrier(oopDesc*, long) (2 samples, 0.06%)</title><rect x="1117.0" y="131.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.0" y="142.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.18%)</title><rect x="1117.7" y="323.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1120.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.09%)</title><rect x="1119.8" y="323.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1122.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.09%)</title><rect x="1119.8" y="307.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1122.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="1119.8" y="291.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1122.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.03%)</title><rect x="1120.2" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1123.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="1120.2" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1123.2" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="1120.5" y="291.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1123.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="1120.5" y="275.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1123.5" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="1120.9" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1123.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.06%)</title><rect x="1121.2" y="323.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1124.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.06%)</title><rect x="1121.2" y="307.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1124.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.06%)</title><rect x="1121.2" y="291.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1124.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1121.5" y="275.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1124.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1121.5" y="259.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1124.5" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (19 samples, 0.56%)</title><rect x="1121.9" y="355.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1124.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1124.7" y="339.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1127.7" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1124.7" y="323.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.7" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="1124.7" y="307.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.7" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1124.7" y="291.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.7" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1124.7" y="275.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.7" y="286.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1124.7" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.7" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1124.7" y="243.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.7" y="254.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="1124.7" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.7" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.03%)</title><rect x="1124.7" y="211.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.7" y="222.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="1124.7" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.7" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.18%)</title><rect x="1125.0" y="339.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1128.0" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.18%)</title><rect x="1125.0" y="323.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1128.0" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1126.0" y="307.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.0" y="318.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1126.0" y="291.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1126.4" y="307.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1129.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1126.4" y="291.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1129.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.06%)</title><rect x="1126.4" y="275.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1129.4" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1126.7" y="259.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.7" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1126.7" y="243.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.7" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1126.7" y="227.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.7" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1126.7" y="211.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.7" y="222.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1126.7" y="195.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.7" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1126.7" y="179.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.7" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="1126.7" y="163.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.7" y="174.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="1126.7" y="147.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.7" y="158.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.03%)</title><rect x="1126.7" y="131.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.7" y="142.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.03%)</title><rect x="1126.7" y="115.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.7" y="126.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.03%)</title><rect x="1126.7" y="99.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.7" y="110.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="1126.7" y="83.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.7" y="94.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::num_par_ids() (1 samples, 0.03%)</title><rect x="1126.7" y="67.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.7" y="78.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.12%)</title><rect x="1127.1" y="339.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1130.1" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1128.1" y="323.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1131.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.18%)</title><rect x="1128.5" y="355.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1131.5" y="366.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="1130.2" y="339.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1133.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="1130.2" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1133.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="1130.5" y="355.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1133.5" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1130.5" y="339.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1133.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.23%)</title><rect x="1130.9" y="355.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1133.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.12%)</title><rect x="1131.6" y="339.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1134.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.12%)</title><rect x="1131.6" y="323.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1134.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.06%)</title><rect x="1133.0" y="339.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1136.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.06%)</title><rect x="1133.0" y="323.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1136.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.38%)</title><rect x="1133.6" y="355.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1136.6" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.38%)</title><rect x="1133.6" y="339.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1136.6" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="1135.0" y="323.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.0" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1135.0" y="307.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.0" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1135.0" y="291.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.0" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="1135.0" y="275.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.0" y="286.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1135.0" y="259.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.0" y="270.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1135.4" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.4" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1135.4" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.4" y="254.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="1135.4" y="227.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.4" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.03%)</title><rect x="1135.4" y="211.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.4" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="1135.7" y="323.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="1135.7" y="307.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.7" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.06%)</title><rect x="1135.7" y="291.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.7" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="1135.7" y="275.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.7" y="286.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="1135.7" y="259.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.7" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="1135.7" y="243.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.7" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.03%)</title><rect x="1135.7" y="227.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.7" y="238.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="1136.1" y="227.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.1" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.15%)</title><rect x="1136.4" y="323.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1139.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.15%)</title><rect x="1136.4" y="307.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1139.4" y="318.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (5 samples, 0.15%)</title><rect x="1136.4" y="291.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1139.4" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1137.8" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.8" y="286.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1137.8" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.8" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1137.8" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.8" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1137.8" y="227.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1140.8" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (138 samples, 4.04%)</title><rect x="1138.1" y="371.0" width="47.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1141.1" y="382.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (137 samples, 4.01%)</title><rect x="1138.1" y="355.0" width="47.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1141.1" y="366.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="1138.5" y="339.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1141.5" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1138.5" y="323.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1141.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1138.5" y="307.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1141.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (134 samples, 3.93%)</title><rect x="1139.2" y="339.0" width="46.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1142.2" y="350.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.12%)</title><rect x="1139.9" y="323.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1142.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.12%)</title><rect x="1139.9" y="307.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1142.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="1139.9" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1142.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1139.9" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1142.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.09%)</title><rect x="1140.2" y="291.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1143.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.09%)</title><rect x="1140.2" y="275.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1143.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="1140.2" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1143.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.06%)</title><rect x="1140.6" y="259.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1143.6" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.06%)</title><rect x="1140.6" y="243.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1143.6" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.06%)</title><rect x="1140.6" y="227.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1143.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (1 samples, 0.03%)</title><rect x="1140.9" y="211.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1143.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (128 samples, 3.75%)</title><rect x="1141.3" y="323.0" width="44.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1144.3" y="334.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (128 samples, 3.75%)</title><rect x="1141.3" y="307.0" width="44.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1144.3" y="318.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (116 samples, 3.40%)</title><rect x="1141.6" y="291.0" width="40.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1144.6" y="302.0">sun..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="1141.6" y="275.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1144.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (115 samples, 3.37%)</title><rect x="1141.9" y="275.0" width="39.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1144.9" y="286.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (115 samples, 3.37%)</title><rect x="1141.9" y="259.0" width="39.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1144.9" y="270.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.12%)</title><rect x="1146.1" y="243.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1149.1" y="254.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1147.1" y="227.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1150.1" y="238.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="1147.5" y="243.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1150.5" y="254.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1147.8" y="243.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1150.8" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (97 samples, 2.84%)</title><rect x="1148.2" y="243.0" width="33.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1151.2" y="254.0">rp..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.32%)</title><rect x="1181.7" y="291.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="1181.7" y="275.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="1181.7" y="259.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (10 samples, 0.29%)</title><rect x="1182.0" y="275.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1185.0" y="286.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="1183.8" y="259.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1186.8" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1184.1" y="259.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1187.1" y="270.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.09%)</title><rect x="1184.5" y="259.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1187.5" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.03%)</title><rect x="1185.5" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1188.5" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.15%)</title><rect x="1185.9" y="387.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.9" y="398.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.06%)</title><rect x="1185.9" y="371.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1188.9" y="382.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.09%)</title><rect x="1186.5" y="371.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1189.5" y="382.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.06%)</title><rect x="1186.9" y="355.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1189.9" y="366.0"></text>
</g>
<g>
<title>thread_start (7 samples, 0.21%)</title><rect x="1187.6" y="419.0" width="2.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1190.6" y="430.0"></text>
</g>
<g>
<title>_pthread_start (7 samples, 0.21%)</title><rect x="1187.6" y="403.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1190.6" y="414.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (7 samples, 0.21%)</title><rect x="1187.6" y="387.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1190.6" y="398.0"></text>
</g>
<g>
<title>Thread::call_run() (7 samples, 0.21%)</title><rect x="1187.6" y="371.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.6" y="382.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.03%)</title><rect x="1187.6" y="355.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.6" y="366.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.03%)</title><rect x="1187.6" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.6" y="350.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.03%)</title><rect x="1187.6" y="323.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.6" y="334.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1187.6" y="307.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.6" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1187.6" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.6" y="302.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1187.6" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.6" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1187.6" y="259.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1190.6" y="270.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.09%)</title><rect x="1187.9" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="366.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="1187.9" y="339.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.9" y="350.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.06%)</title><rect x="1187.9" y="323.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="334.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.06%)</title><rect x="1187.9" y="307.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.9" y="318.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.06%)</title><rect x="1187.9" y="291.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.9" y="302.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1187.9" y="275.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="286.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="1187.9" y="259.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="270.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.03%)</title><rect x="1187.9" y="243.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.9" y="254.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.03%)</title><rect x="1187.9" y="227.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="238.0"></text>
</g>
<g>
<title>frame::sender_for_interpreter_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1188.3" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="286.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="1188.6" y="339.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="350.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.03%)</title><rect x="1188.6" y="323.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1191.6" y="334.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.03%)</title><rect x="1189.0" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.0" y="366.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.03%)</title><rect x="1189.0" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="350.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="1189.0" y="323.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1192.0" y="334.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.03%)</title><rect x="1189.0" y="307.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1192.0" y="318.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.03%)</title><rect x="1189.0" y="291.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="302.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.03%)</title><rect x="1189.0" y="275.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1192.0" y="286.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.03%)</title><rect x="1189.0" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.0" y="270.0"></text>
</g>
<g>
<title>fclose (1 samples, 0.03%)</title><rect x="1189.0" y="243.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.0" y="254.0"></text>
</g>
<g>
<title>__sfprelease (1 samples, 0.03%)</title><rect x="1189.0" y="227.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.0" y="238.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="1189.3" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.3" y="366.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.03%)</title><rect x="1189.7" y="355.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.7" y="366.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.03%)</title><rect x="1189.7" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.7" y="350.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.03%)</title><rect x="1189.7" y="323.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.7" y="334.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1189.7" y="307.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.7" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1189.7" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.7" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1189.7" y="275.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1192.7" y="286.0"></text>
</g>
</g>
</svg>
