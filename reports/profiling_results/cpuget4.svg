<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="469"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="469"> </text>
<g id="frames">
<g>
<title>all (843 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="446.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.12%)</title><rect x="10.0" y="419.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.12%)</title><rect x="10.0" y="403.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.12%)</title><rect x="10.0" y="387.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.12%)</title><rect x="10.0" y="371.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.12%)</title><rect x="10.0" y="355.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.47%)</title><rect x="11.4" y="419.0" width="5.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="14.4" y="430.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.12%)</title><rect x="11.4" y="403.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.4" y="414.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.12%)</title><rect x="12.8" y="403.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="15.8" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (2 samples, 0.24%)</title><rect x="14.2" y="403.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.2" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.24%)</title><rect x="14.2" y="387.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.2" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.24%)</title><rect x="14.2" y="371.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.2" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.run (400 samples, 47.45%)</title><rect x="17.0" y="419.0" width="559.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.0" y="430.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (400 samples, 47.45%)</title><rect x="17.0" y="403.0" width="559.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="414.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (400 samples, 47.45%)</title><rect x="17.0" y="387.0" width="559.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.0" y="398.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.24%)</title><rect x="17.0" y="371.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.24%)</title><rect x="17.0" y="355.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.24%)</title><rect x="17.0" y="339.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.12%)</title><rect x="18.4" y="323.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (1 samples, 0.12%)</title><rect x="18.4" y="307.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (204 samples, 24.20%)</title><rect x="19.8" y="371.0" width="285.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.8" y="382.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.poll (2 samples, 0.24%)</title><rect x="22.6" y="355.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1 samples, 0.12%)</title><rect x="24.0" y="339.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (200 samples, 23.72%)</title><rect x="25.4" y="355.0" width="279.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.4" y="366.0">java/util/concurrent/ArrayBlockingQue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (185 samples, 21.95%)</title><rect x="26.8" y="339.0" width="259.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.8" y="350.0">java/util/concurrent/locks/Abstrac..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.12%)</title><rect x="26.8" y="323.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.12%)</title><rect x="28.2" y="323.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.24%)</title><rect x="29.6" y="323.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.24%)</title><rect x="29.6" y="307.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.24%)</title><rect x="29.6" y="291.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.12%)</title><rect x="31.0" y="275.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.0" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.12%)</title><rect x="31.0" y="259.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="34.0" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.12%)</title><rect x="31.0" y="243.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="34.0" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.12%)</title><rect x="31.0" y="227.0" width="1.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="34.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.83%)</title><rect x="32.4" y="323.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="35.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.83%)</title><rect x="32.4" y="307.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.83%)</title><rect x="32.4" y="291.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.83%)</title><rect x="32.4" y="275.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.4" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.83%)</title><rect x="32.4" y="259.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.4" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.83%)</title><rect x="32.4" y="243.0" width="9.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="35.4" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.12%)</title><rect x="32.4" y="227.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="35.4" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.71%)</title><rect x="33.8" y="227.0" width="8.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="36.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (174 samples, 20.64%)</title><rect x="42.2" y="323.0" width="243.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.2" y="334.0">java/util/concurrent/locks/LockS..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (174 samples, 20.64%)</title><rect x="42.2" y="307.0" width="243.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="45.2" y="318.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (170 samples, 20.17%)</title><rect x="47.8" y="291.0" width="238.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="50.8" y="302.0">Unsafe_Park(JNIEnv_*, _jobject*..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.12%)</title><rect x="47.8" y="275.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="50.8" y="286.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.24%)</title><rect x="49.2" y="275.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="52.2" y="286.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.24%)</title><rect x="49.2" y="259.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="52.2" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.12%)</title><rect x="49.2" y="243.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="52.2" y="254.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.12%)</title><rect x="50.6" y="243.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="53.6" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.12%)</title><rect x="50.6" y="227.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="53.6" y="238.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.12%)</title><rect x="50.6" y="211.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="53.6" y="222.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.12%)</title><rect x="50.6" y="195.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="53.6" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.12%)</title><rect x="50.6" y="179.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="53.6" y="190.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.12%)</title><rect x="50.6" y="163.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="53.6" y="174.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.36%)</title><rect x="52.0" y="275.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="55.0" y="286.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.12%)</title><rect x="52.0" y="259.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="55.0" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.12%)</title><rect x="52.0" y="243.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="55.0" y="254.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.12%)</title><rect x="53.4" y="259.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="56.4" y="270.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.12%)</title><rect x="53.4" y="243.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="56.4" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.12%)</title><rect x="54.8" y="259.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="57.8" y="270.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.12%)</title><rect x="56.2" y="275.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="59.2" y="286.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.24%)</title><rect x="57.6" y="275.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="60.6" y="286.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.12%)</title><rect x="59.0" y="259.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="62.0" y="270.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.12%)</title><rect x="60.4" y="275.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="63.4" y="286.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.12%)</title><rect x="60.4" y="259.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="63.4" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (157 samples, 18.62%)</title><rect x="61.8" y="275.0" width="219.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="64.8" y="286.0">Parker::park(bool, long)</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.12%)</title><rect x="63.2" y="259.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="66.2" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (152 samples, 18.03%)</title><rect x="64.6" y="259.0" width="212.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="67.6" y="270.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.24%)</title><rect x="277.4" y="259.0" width="2.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="280.4" y="270.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.12%)</title><rect x="278.8" y="243.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="281.8" y="254.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.12%)</title><rect x="280.2" y="259.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="283.2" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.24%)</title><rect x="281.6" y="275.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="284.6" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.12%)</title><rect x="281.6" y="259.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="284.6" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::poll(Thread*) (1 samples, 0.12%)</title><rect x="283.0" y="259.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="286.0" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.12%)</title><rect x="283.0" y="243.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="286.0" y="254.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.12%)</title><rect x="284.4" y="275.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="287.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.47%)</title><rect x="285.8" y="339.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.47%)</title><rect x="285.8" y="323.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.12%)</title><rect x="285.8" y="307.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.36%)</title><rect x="287.2" y="307.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.36%)</title><rect x="287.2" y="291.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.36%)</title><rect x="287.2" y="275.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.2" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.36%)</title><rect x="287.2" y="259.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.2" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.36%)</title><rect x="287.2" y="243.0" width="4.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="290.2" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.36%)</title><rect x="287.2" y="227.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="290.2" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.36%)</title><rect x="287.2" y="211.0" width="4.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="290.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 1.19%)</title><rect x="291.4" y="339.0" width="13.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 1.19%)</title><rect x="291.4" y="323.0" width="13.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 1.19%)</title><rect x="291.4" y="307.0" width="13.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 1.19%)</title><rect x="291.4" y="291.0" width="13.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.4" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 1.19%)</title><rect x="291.4" y="275.0" width="13.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.4" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (10 samples, 1.19%)</title><rect x="291.4" y="259.0" width="13.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="294.4" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.12%)</title><rect x="291.4" y="243.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="294.4" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.12%)</title><rect x="291.4" y="227.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="294.4" y="238.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.12%)</title><rect x="292.8" y="243.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="295.8" y="254.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.12%)</title><rect x="292.8" y="227.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="295.8" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.59%)</title><rect x="294.2" y="243.0" width="7.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="297.2" y="254.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.12%)</title><rect x="301.2" y="243.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="304.2" y="254.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np.cold.3 (1 samples, 0.12%)</title><rect x="302.6" y="243.0" width="1.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="305.6" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.12%)</title><rect x="304.0" y="243.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="307.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService$$Lambda$72/463011894.run (194 samples, 23.01%)</title><rect x="305.3" y="371.0" width="271.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.3" y="382.0">ru/mail/polis/service/suhova/Moribun..</text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.lambda$sendResponse$1 (194 samples, 23.01%)</title><rect x="305.3" y="355.0" width="271.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.3" y="366.0">ru/mail/polis/service/suhova/Moribun..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (85 samples, 10.08%)</title><rect x="306.7" y="339.0" width="119.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="309.7" y="350.0">one/nio/http/H..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.12%)</title><rect x="308.1" y="323.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="311.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (80 samples, 9.49%)</title><rect x="309.5" y="323.0" width="112.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="312.5" y="334.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.36%)</title><rect x="309.5" y="307.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.5" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (77 samples, 9.13%)</title><rect x="313.7" y="307.0" width="107.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="316.7" y="318.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session.write (75 samples, 8.90%)</title><rect x="316.5" y="291.0" width="105.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.5" y="302.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (74 samples, 8.78%)</title><rect x="317.9" y="275.0" width="103.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="320.9" y="286.0">one/nio/net/..</text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.12%)</title><rect x="319.3" y="259.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="322.3" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (72 samples, 8.54%)</title><rect x="320.7" y="259.0" width="100.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="323.7" y="270.0">one/nio/net/..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.12%)</title><rect x="320.7" y="243.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="323.7" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.24%)</title><rect x="322.1" y="243.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="325.1" y="254.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.12%)</title><rect x="323.5" y="227.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="326.5" y="238.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.12%)</title><rect x="323.5" y="211.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="326.5" y="222.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.12%)</title><rect x="323.5" y="195.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="326.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (69 samples, 8.19%)</title><rect x="324.9" y="243.0" width="96.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.9" y="254.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (69 samples, 8.19%)</title><rect x="324.9" y="227.0" width="96.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.9" y="238.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (68 samples, 8.07%)</title><rect x="326.3" y="211.0" width="95.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="329.3" y="222.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (64 samples, 7.59%)</title><rect x="326.3" y="195.0" width="89.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.3" y="206.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (64 samples, 7.59%)</title><rect x="326.3" y="179.0" width="89.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="329.3" y="190.0">sun/nio/ch..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="326.3" y="163.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="329.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (63 samples, 7.47%)</title><rect x="327.7" y="163.0" width="88.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.7" y="174.0">sun/nio/ch..</text>
</g>
<g>
<title>write (58 samples, 6.88%)</title><rect x="334.7" y="147.0" width="81.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="337.7" y="158.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.47%)</title><rect x="415.9" y="195.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.9" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.47%)</title><rect x="415.9" y="179.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="418.9" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.47%)</title><rect x="415.9" y="163.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="418.9" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.36%)</title><rect x="421.5" y="323.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="424.5" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.36%)</title><rect x="421.5" y="307.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.5" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.36%)</title><rect x="421.5" y="291.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (9 samples, 1.07%)</title><rect x="425.7" y="339.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/RendezvousTopology.getNodeByKey (9 samples, 1.07%)</title><rect x="425.7" y="323.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="428.7" y="334.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHasher.putUnencodedChars (3 samples, 0.36%)</title><rect x="425.7" y="307.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.7" y="318.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.putChar (3 samples, 0.36%)</title><rect x="425.7" y="291.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="428.7" y="302.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.munchIfFull (1 samples, 0.12%)</title><rect x="425.7" y="275.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.7" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putChar (2 samples, 0.24%)</title><rect x="427.1" y="275.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="430.1" y="286.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (4 samples, 0.47%)</title><rect x="429.9" y="307.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="432.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (4 samples, 0.47%)</title><rect x="429.9" y="291.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="432.9" y="302.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (4 samples, 0.47%)</title><rect x="429.9" y="275.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="432.9" y="286.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (4 samples, 0.47%)</title><rect x="429.9" y="259.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.36%)</title><rect x="429.9" y="243.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="432.9" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.36%)</title><rect x="429.9" y="227.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="432.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.36%)</title><rect x="429.9" y="211.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.9" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.36%)</title><rect x="429.9" y="195.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="432.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.24%)</title><rect x="431.3" y="179.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="434.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.24%)</title><rect x="431.3" y="163.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="434.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.order (1 samples, 0.12%)</title><rect x="434.1" y="243.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.1" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.24%)</title><rect x="435.5" y="307.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="438.5" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1254344205.invoke (2 samples, 0.24%)</title><rect x="435.5" y="291.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="438.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.24%)</title><rect x="435.5" y="275.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="438.5" y="286.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.processRemaining (1 samples, 0.12%)</title><rect x="435.5" y="259.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.5" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.12%)</title><rect x="436.9" y="259.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="439.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.12%)</title><rect x="436.9" y="243.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="439.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.get (44 samples, 5.22%)</title><rect x="438.3" y="339.0" width="61.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.3" y="350.0">ru/mai..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.36%)</title><rect x="438.3" y="323.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.3" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="441.1" y="307.0" width="1.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="444.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (40 samples, 4.74%)</title><rect x="442.5" y="323.0" width="56.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="445.5" y="334.0">ru/ma..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3 samples, 0.36%)</title><rect x="442.5" y="307.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.5" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 0.36%)</title><rect x="442.5" y="291.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.5" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.36%)</title><rect x="442.5" y="275.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.5" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.36%)</title><rect x="442.5" y="259.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 0.36%)</title><rect x="442.5" y="243.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="445.5" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1 samples, 0.12%)</title><rect x="442.5" y="227.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="445.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.12%)</title><rect x="442.5" y="211.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="445.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.12%)</title><rect x="442.5" y="195.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="445.5" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (1 samples, 0.12%)</title><rect x="442.5" y="179.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="445.5" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1 samples, 0.12%)</title><rect x="442.5" y="163.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.5" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1 samples, 0.12%)</title><rect x="442.5" y="147.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.5" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1 samples, 0.12%)</title><rect x="442.5" y="131.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1 samples, 0.12%)</title><rect x="442.5" y="115.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.5" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.12%)</title><rect x="443.9" y="227.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="446.9" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.12%)</title><rect x="443.9" y="211.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="446.9" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.12%)</title><rect x="443.9" y="195.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.9" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.12%)</title><rect x="443.9" y="179.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="446.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$80/157104760.apply (1 samples, 0.12%)</title><rect x="445.3" y="227.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (1 samples, 0.12%)</title><rect x="445.3" y="211.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="448.3" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.12%)</title><rect x="445.3" y="195.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.3" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.12%)</title><rect x="445.3" y="179.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.3" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="445.3" y="163.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="448.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="445.3" y="147.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.3" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="445.3" y="131.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.12%)</title><rect x="445.3" y="115.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="448.3" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (2 samples, 0.24%)</title><rect x="446.7" y="307.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="449.7" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (2 samples, 0.24%)</title><rect x="446.7" y="291.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$82/1511061693.apply (2 samples, 0.24%)</title><rect x="446.7" y="275.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.lambda$iterator$4 (2 samples, 0.24%)</title><rect x="446.7" y="259.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="449.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.getKey (1 samples, 0.12%)</title><rect x="446.7" y="243.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="449.7" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.12%)</title><rect x="446.7" y="227.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="449.7" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.12%)</title><rect x="446.7" y="211.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="449.7" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="446.7" y="195.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="446.7" y="179.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.7" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.12%)</title><rect x="446.7" y="163.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Value.getData (1 samples, 0.12%)</title><rect x="448.1" y="243.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.1" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.12%)</title><rect x="448.1" y="227.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.1" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.capacity (1 samples, 0.12%)</title><rect x="448.1" y="211.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="451.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.iterator (35 samples, 4.15%)</title><rect x="449.5" y="307.0" width="49.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.5" y="318.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock (13 samples, 1.54%)</title><rect x="449.5" y="291.0" width="18.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (13 samples, 1.54%)</title><rect x="449.5" y="275.0" width="18.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (12 samples, 1.42%)</title><rect x="449.5" y="259.0" width="16.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (12 samples, 1.42%)</title><rect x="449.5" y="243.0" width="16.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 1.42%)</title><rect x="449.5" y="227.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.5" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (12 samples, 1.42%)</title><rect x="449.5" y="211.0" width="16.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="452.5" y="222.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (12 samples, 1.42%)</title><rect x="449.5" y="195.0" width="16.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="452.5" y="206.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 1.30%)</title><rect x="450.9" y="179.0" width="15.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="453.9" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 1.30%)</title><rect x="450.9" y="163.0" width="15.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="453.9" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.12%)</title><rect x="466.3" y="259.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.12%)</title><rect x="466.3" y="243.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="469.3" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.12%)</title><rect x="466.3" y="227.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.3" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.12%)</title><rect x="466.3" y="211.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (1 samples, 0.12%)</title><rect x="466.3" y="195.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock (3 samples, 0.36%)</title><rect x="467.7" y="291.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.36%)</title><rect x="467.7" y="275.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="470.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.36%)</title><rect x="467.7" y="259.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="470.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.36%)</title><rect x="467.7" y="243.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="470.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.36%)</title><rect x="467.7" y="227.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="470.7" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.36%)</title><rect x="467.7" y="211.0" width="4.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="470.7" y="222.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.12%)</title><rect x="467.7" y="195.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="470.7" y="206.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.12%)</title><rect x="467.7" y="179.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="470.7" y="190.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.12%)</title><rect x="467.7" y="163.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="470.7" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.24%)</title><rect x="469.1" y="195.0" width="2.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="472.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.cellIterator (19 samples, 2.25%)</title><rect x="471.9" y="291.0" width="26.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="474.9" y="302.0">r..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.12%)</title><rect x="474.7" y="275.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="477.7" y="286.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.12%)</title><rect x="474.7" y="259.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="477.7" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.12%)</title><rect x="474.7" y="243.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="477.7" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="474.7" y="227.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="477.7" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="474.7" y="211.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="477.7" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="474.7" y="195.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="477.7" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="474.7" y="179.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="477.7" y="190.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="474.7" y="163.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="477.7" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="474.7" y="147.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="477.7" y="158.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.12%)</title><rect x="474.7" y="131.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="477.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.12%)</title><rect x="476.1" y="275.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.12%)</title><rect x="476.1" y="259.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.12%)</title><rect x="476.1" y="243.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="479.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.12%)</title><rect x="477.5" y="275.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="480.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (4 samples, 0.47%)</title><rect x="478.9" y="275.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="481.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (4 samples, 0.47%)</title><rect x="478.9" y="259.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="481.9" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.47%)</title><rect x="478.9" y="243.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="481.9" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.47%)</title><rect x="478.9" y="227.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.9" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (4 samples, 0.47%)</title><rect x="478.9" y="211.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.9" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (3 samples, 0.36%)</title><rect x="478.9" y="195.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.9" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 0.36%)</title><rect x="478.9" y="179.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.9" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.36%)</title><rect x="478.9" y="163.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.9" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.36%)</title><rect x="478.9" y="147.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="481.9" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 0.36%)</title><rect x="478.9" y="131.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO$$Lambda$80/157104760.apply (1 samples, 0.12%)</title><rect x="481.7" y="115.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="484.7" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.12%)</title><rect x="483.1" y="195.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="486.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable$$Lambda$77/203695767.apply (1 samples, 0.12%)</title><rect x="483.1" y="179.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.1" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.lambda$iterator$0 (1 samples, 0.12%)</title><rect x="483.1" y="163.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/Cell.&lt;init&gt; (1 samples, 0.12%)</title><rect x="483.1" y="147.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.iterator (10 samples, 1.19%)</title><rect x="484.5" y="275.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="487.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (10 samples, 1.19%)</title><rect x="484.5" y="259.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="487.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (10 samples, 1.19%)</title><rect x="484.5" y="243.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="487.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (10 samples, 1.19%)</title><rect x="484.5" y="227.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="487.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (1 samples, 0.12%)</title><rect x="484.5" y="211.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="487.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (1 samples, 0.12%)</title><rect x="484.5" y="195.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="487.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.12%)</title><rect x="484.5" y="179.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="487.5" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.12%)</title><rect x="484.5" y="163.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="487.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.12%)</title><rect x="484.5" y="147.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="487.5" y="158.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.12%)</title><rect x="484.5" y="131.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="487.5" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.12%)</title><rect x="484.5" y="115.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.5" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (9 samples, 1.07%)</title><rect x="485.9" y="211.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="488.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (9 samples, 1.07%)</title><rect x="485.9" y="195.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="488.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.36%)</title><rect x="485.9" y="179.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="488.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.36%)</title><rect x="485.9" y="163.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="488.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.36%)</title><rect x="485.9" y="147.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="488.9" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.12%)</title><rect x="485.9" y="131.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.9" y="142.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.12%)</title><rect x="485.9" y="115.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.9" y="126.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.24%)</title><rect x="487.3" y="131.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.3" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (6 samples, 0.71%)</title><rect x="490.1" y="179.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.12%)</title><rect x="497.1" y="163.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="500.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.12%)</title><rect x="497.1" y="147.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="500.1" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.12%)</title><rect x="497.1" y="131.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="500.1" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.12%)</title><rect x="497.1" y="115.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteArray (1 samples, 0.12%)</title><rect x="498.5" y="323.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.proxy (53 samples, 6.29%)</title><rect x="499.9" y="339.0" width="74.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="502.9" y="350.0">ru/mail/..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (53 samples, 6.29%)</title><rect x="499.9" y="323.0" width="74.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.9" y="334.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (53 samples, 6.29%)</title><rect x="499.9" y="307.0" width="74.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="502.9" y="318.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (27 samples, 3.20%)</title><rect x="501.3" y="291.0" width="37.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="504.3" y="302.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (25 samples, 2.97%)</title><rect x="504.1" y="275.0" width="35.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.1" y="286.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (25 samples, 2.97%)</title><rect x="504.1" y="259.0" width="35.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="507.1" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 2.85%)</title><rect x="504.1" y="243.0" width="33.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="507.1" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 2.85%)</title><rect x="504.1" y="227.0" width="33.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="507.1" y="238.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (24 samples, 2.85%)</title><rect x="504.1" y="211.0" width="33.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="507.1" y="222.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (24 samples, 2.85%)</title><rect x="504.1" y="195.0" width="33.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="507.1" y="206.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (24 samples, 2.85%)</title><rect x="504.1" y="179.0" width="33.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.1" y="190.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.12%)</title><rect x="504.1" y="163.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="507.1" y="174.0"></text>
</g>
<g>
<title>rpc_errlist (23 samples, 2.73%)</title><rect x="505.5" y="163.0" width="32.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="508.5" y="174.0">rp..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (1 samples, 0.12%)</title><rect x="537.7" y="243.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="540.7" y="254.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.12%)</title><rect x="537.7" y="227.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="540.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (3 samples, 0.36%)</title><rect x="539.1" y="291.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="542.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.12%)</title><rect x="539.1" y="275.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="542.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.12%)</title><rect x="539.1" y="259.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.12%)</title><rect x="539.1" y="243.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.1" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.12%)</title><rect x="539.1" y="227.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="542.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1 samples, 0.12%)</title><rect x="540.5" y="275.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.5" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.12%)</title><rect x="540.5" y="259.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="543.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.12%)</title><rect x="540.5" y="243.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="543.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.12%)</title><rect x="541.9" y="275.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.12%)</title><rect x="543.3" y="291.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="546.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.12%)</title><rect x="544.7" y="291.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="547.7" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (20 samples, 2.37%)</title><rect x="546.1" y="291.0" width="28.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="549.1" y="302.0">o..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (17 samples, 2.02%)</title><rect x="546.1" y="275.0" width="23.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="549.1" y="286.0">j..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (17 samples, 2.02%)</title><rect x="546.1" y="259.0" width="23.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.1" y="270.0">j..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (17 samples, 2.02%)</title><rect x="546.1" y="243.0" width="23.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="549.1" y="254.0">j..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (16 samples, 1.90%)</title><rect x="547.5" y="227.0" width="22.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="550.5" y="238.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (15 samples, 1.78%)</title><rect x="547.5" y="211.0" width="21.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="550.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (15 samples, 1.78%)</title><rect x="547.5" y="195.0" width="21.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="550.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (15 samples, 1.78%)</title><rect x="547.5" y="179.0" width="21.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="550.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (15 samples, 1.78%)</title><rect x="547.5" y="163.0" width="21.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="550.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (15 samples, 1.78%)</title><rect x="547.5" y="147.0" width="21.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="550.5" y="158.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.12%)</title><rect x="548.9" y="131.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="551.9" y="142.0"></text>
</g>
<g>
<title>write (13 samples, 1.54%)</title><rect x="550.3" y="131.0" width="18.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="553.3" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.12%)</title><rect x="568.5" y="211.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="571.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.12%)</title><rect x="568.5" y="195.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="571.5" y="206.0"></text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.12%)</title><rect x="568.5" y="179.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="571.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (3 samples, 0.36%)</title><rect x="569.9" y="275.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="572.9" y="286.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3 samples, 0.36%)</title><rect x="569.9" y="259.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.9" y="270.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (3 samples, 0.36%)</title><rect x="569.9" y="243.0" width="4.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="572.9" y="254.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.12%)</title><rect x="569.9" y="227.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="572.9" y="238.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.12%)</title><rect x="571.3" y="227.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="574.3" y="238.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.12%)</title><rect x="572.7" y="227.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="575.7" y="238.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.12%)</title><rect x="572.7" y="211.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="575.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.put (2 samples, 0.24%)</title><rect x="574.1" y="339.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="577.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (1 samples, 0.12%)</title><rect x="574.1" y="323.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="577.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.12%)</title><rect x="574.1" y="307.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="577.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.12%)</title><rect x="574.1" y="291.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="577.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.12%)</title><rect x="574.1" y="275.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.1" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="574.1" y="259.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="577.1" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.12%)</title><rect x="574.1" y="243.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="577.1" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.createMap (1 samples, 0.12%)</title><rect x="574.1" y="227.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="577.1" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.&lt;init&gt; (1 samples, 0.12%)</title><rect x="574.1" y="211.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="577.1" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.12%)</title><rect x="574.1" y="195.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="577.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.toByteBuffer (1 samples, 0.12%)</title><rect x="575.5" y="323.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="578.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.12%)</title><rect x="575.5" y="307.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="578.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.12%)</title><rect x="575.5" y="291.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="578.5" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="575.5" y="275.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="578.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="575.5" y="259.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="578.5" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="575.5" y="243.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="578.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.12%)</title><rect x="575.5" y="227.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="578.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.12%)</title><rect x="575.5" y="211.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.5" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.12%)</title><rect x="575.5" y="195.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.5" y="206.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (432 samples, 51.25%)</title><rect x="576.9" y="419.0" width="604.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="579.9" y="430.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.12%)</title><rect x="581.1" y="403.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="584.1" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (1 samples, 0.12%)</title><rect x="582.5" y="403.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="585.5" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.12%)</title><rect x="582.5" y="387.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="585.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.12%)</title><rect x="582.5" y="371.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="585.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (273 samples, 32.38%)</title><rect x="583.9" y="403.0" width="382.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="586.9" y="414.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.36%)</title><rect x="585.3" y="387.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.3" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (4 samples, 0.47%)</title><rect x="589.5" y="387.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="592.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.24%)</title><rect x="592.3" y="371.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="595.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (2 samples, 0.24%)</title><rect x="592.3" y="355.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="595.3" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.24%)</title><rect x="592.3" y="339.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="595.3" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (2 samples, 0.24%)</title><rect x="592.3" y="323.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="595.3" y="334.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.24%)</title><rect x="592.3" y="307.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="595.3" y="318.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.12%)</title><rect x="593.7" y="291.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="596.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (265 samples, 31.44%)</title><rect x="595.1" y="387.0" width="370.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="598.1" y="398.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (265 samples, 31.44%)</title><rect x="595.1" y="371.0" width="370.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="598.1" y="382.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (265 samples, 31.44%)</title><rect x="595.1" y="355.0" width="370.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="598.1" y="366.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (249 samples, 29.54%)</title><rect x="595.1" y="339.0" width="348.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="598.1" y="350.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.12%)</title><rect x="607.7" y="323.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="610.7" y="334.0"></text>
</g>
<g>
<title>kevent (239 samples, 28.35%)</title><rect x="609.1" y="323.0" width="334.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="612.1" y="334.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (10 samples, 1.19%)</title><rect x="943.6" y="339.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="946.6" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.12%)</title><rect x="949.2" y="323.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="952.2" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="949.2" y="307.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="952.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getDescriptor (1 samples, 0.12%)</title><rect x="950.6" y="323.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="953.6" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getInt (1 samples, 0.12%)</title><rect x="950.6" y="307.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="953.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.47%)</title><rect x="952.0" y="323.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="955.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.47%)</title><rect x="952.0" y="307.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="955.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.47%)</title><rect x="952.0" y="291.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="955.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.47%)</title><rect x="952.0" y="275.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.36%)</title><rect x="953.4" y="259.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="956.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.36%)</title><rect x="957.6" y="339.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="960.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.12%)</title><rect x="961.8" y="339.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="964.8" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.12%)</title><rect x="961.8" y="323.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="964.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.12%)</title><rect x="961.8" y="307.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="964.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.24%)</title><rect x="963.2" y="339.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="966.2" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.24%)</title><rect x="963.2" y="323.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="966.2" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.24%)</title><rect x="963.2" y="307.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="966.2" y="318.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.24%)</title><rect x="963.2" y="291.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="966.2" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.24%)</title><rect x="963.2" y="275.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="966.2" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (154 samples, 18.27%)</title><rect x="966.0" y="403.0" width="215.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="969.0" y="414.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (148 samples, 17.56%)</title><rect x="966.0" y="387.0" width="207.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="969.0" y="398.0">one/nio/http/HttpSession.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (100 samples, 11.86%)</title><rect x="967.4" y="371.0" width="140.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="970.4" y="382.0">one/nio/http/Http..</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (3 samples, 0.36%)</title><rect x="985.6" y="355.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.6" y="366.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (2 samples, 0.24%)</title><rect x="985.6" y="339.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.6" y="350.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.24%)</title><rect x="985.6" y="323.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.6" y="334.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.24%)</title><rect x="985.6" y="307.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.6" y="318.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.12%)</title><rect x="987.0" y="291.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="990.0" y="302.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.12%)</title><rect x="988.4" y="339.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.12%)</title><rect x="989.8" y="355.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="992.8" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (72 samples, 8.54%)</title><rect x="991.2" y="355.0" width="100.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="994.2" y="366.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (72 samples, 8.54%)</title><rect x="991.2" y="339.0" width="100.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="994.2" y="350.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler1_sendResponse.handleRequest (67 samples, 7.95%)</title><rect x="991.2" y="323.0" width="93.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="994.2" y="334.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (5 samples, 0.59%)</title><rect x="991.2" y="307.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="994.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.59%)</title><rect x="991.2" y="291.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="994.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.12%)</title><rect x="994.0" y="275.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="997.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.12%)</title><rect x="994.0" y="259.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="997.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.12%)</title><rect x="995.4" y="275.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="998.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.12%)</title><rect x="995.4" y="259.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="998.4" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="995.4" y="243.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.4" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="995.4" y="227.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="998.4" y="238.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.12%)</title><rect x="996.8" y="275.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="999.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.sendResponse (62 samples, 7.35%)</title><rect x="998.2" y="307.0" width="86.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1001.2" y="318.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (61 samples, 7.24%)</title><rect x="999.6" y="291.0" width="85.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1002.6" y="302.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (61 samples, 7.24%)</title><rect x="999.6" y="275.0" width="85.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1002.6" y="286.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.12%)</title><rect x="1001.0" y="259.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1004.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.12%)</title><rect x="1001.0" y="243.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1004.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.12%)</title><rect x="1001.0" y="227.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1004.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.12%)</title><rect x="1001.0" y="211.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1004.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 1.54%)</title><rect x="1002.4" y="259.0" width="18.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1005.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (13 samples, 1.54%)</title><rect x="1002.4" y="243.0" width="18.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1005.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (13 samples, 1.54%)</title><rect x="1002.4" y="227.0" width="18.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1005.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (13 samples, 1.54%)</title><rect x="1002.4" y="211.0" width="18.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1005.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 1.54%)</title><rect x="1002.4" y="195.0" width="18.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1005.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 1.54%)</title><rect x="1002.4" y="179.0" width="18.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1005.4" y="190.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (12 samples, 1.42%)</title><rect x="1003.8" y="163.0" width="16.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1006.8" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 1.42%)</title><rect x="1003.8" y="147.0" width="16.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1006.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 1.30%)</title><rect x="1003.8" y="131.0" width="15.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1006.8" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.12%)</title><rect x="1019.2" y="131.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1022.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (46 samples, 5.46%)</title><rect x="1020.6" y="259.0" width="64.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1023.6" y="270.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (46 samples, 5.46%)</title><rect x="1020.6" y="243.0" width="64.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1023.6" y="254.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (46 samples, 5.46%)</title><rect x="1020.6" y="227.0" width="64.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1023.6" y="238.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (46 samples, 5.46%)</title><rect x="1020.6" y="211.0" width="64.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1023.6" y="222.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.12%)</title><rect x="1020.6" y="195.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1023.6" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (45 samples, 5.34%)</title><rect x="1022.0" y="195.0" width="63.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1025.0" y="206.0">jdk/in..</text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (42 samples, 4.98%)</title><rect x="1026.2" y="179.0" width="58.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1029.2" y="190.0">Unsafe..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.12%)</title><rect x="1027.6" y="163.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1030.6" y="174.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.12%)</title><rect x="1027.6" y="147.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1030.6" y="158.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.12%)</title><rect x="1029.0" y="163.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1032.0" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.12%)</title><rect x="1029.0" y="147.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1032.0" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.12%)</title><rect x="1029.0" y="131.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1032.0" y="142.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.24%)</title><rect x="1030.4" y="163.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1033.4" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.24%)</title><rect x="1030.4" y="147.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1033.4" y="158.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.12%)</title><rect x="1033.2" y="163.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.2" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.12%)</title><rect x="1034.6" y="163.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.6" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.12%)</title><rect x="1034.6" y="147.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1037.6" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.12%)</title><rect x="1034.6" y="131.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.6" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.12%)</title><rect x="1034.6" y="115.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.6" y="126.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.12%)</title><rect x="1034.6" y="99.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.6" y="110.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.12%)</title><rect x="1034.6" y="83.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1037.6" y="94.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.12%)</title><rect x="1034.6" y="67.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1037.6" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.12%)</title><rect x="1034.6" y="51.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.6" y="62.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.12%)</title><rect x="1034.6" y="35.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1037.6" y="46.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.47%)</title><rect x="1036.0" y="163.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1039.0" y="174.0"></text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (1 samples, 0.12%)</title><rect x="1037.4" y="147.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.4" y="158.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.12%)</title><rect x="1038.8" y="147.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.8" y="158.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.12%)</title><rect x="1040.2" y="147.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.2" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (28 samples, 3.32%)</title><rect x="1041.6" y="163.0" width="39.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1044.6" y="174.0">__p..</text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.24%)</title><rect x="1080.8" y="163.0" width="2.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1083.8" y="174.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.12%)</title><rect x="1083.6" y="163.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1086.6" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.12%)</title><rect x="1083.6" y="147.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1086.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.36%)</title><rect x="1085.0" y="323.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1088.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.36%)</title><rect x="1085.0" y="307.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1088.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.36%)</title><rect x="1085.0" y="291.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1088.0" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.24%)</title><rect x="1089.2" y="323.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1092.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.24%)</title><rect x="1089.2" y="307.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1092.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.24%)</title><rect x="1089.2" y="291.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1092.2" y="302.0"></text>
</g>
<g>
<title>RequestHandler1_sendResponse.handleRequest (1 samples, 0.12%)</title><rect x="1089.2" y="275.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1092.2" y="286.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="1090.6" y="275.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1093.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8 samples, 0.95%)</title><rect x="1092.0" y="355.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1095.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.36%)</title><rect x="1092.0" y="339.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1095.0" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="1093.4" y="323.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.4" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.12%)</title><rect x="1093.4" y="307.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.4" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="1093.4" y="291.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.4" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="1093.4" y="275.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.4" y="286.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="1093.4" y="259.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.4" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="1093.4" y="243.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.4" y="254.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.12%)</title><rect x="1093.4" y="227.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.4" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.12%)</title><rect x="1093.4" y="211.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.4" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.12%)</title><rect x="1094.8" y="323.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1097.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.12%)</title><rect x="1094.8" y="307.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1097.8" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.12%)</title><rect x="1094.8" y="291.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1097.8" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.59%)</title><rect x="1096.2" y="339.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1099.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.59%)</title><rect x="1096.2" y="323.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1099.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.12%)</title><rect x="1103.2" y="355.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1106.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.12%)</title><rect x="1103.2" y="339.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1106.2" y="350.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.12%)</title><rect x="1103.2" y="323.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1106.2" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.12%)</title><rect x="1103.2" y="307.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1106.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.digit (1 samples, 0.12%)</title><rect x="1103.2" y="291.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1106.2" y="302.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (1 samples, 0.12%)</title><rect x="1103.2" y="275.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1106.2" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.12%)</title><rect x="1104.6" y="355.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1107.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.12%)</title><rect x="1104.6" y="339.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1107.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.12%)</title><rect x="1104.6" y="323.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1107.6" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.12%)</title><rect x="1104.6" y="307.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1107.6" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.12%)</title><rect x="1104.6" y="291.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1107.6" y="302.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.12%)</title><rect x="1104.6" y="275.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1107.6" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.12%)</title><rect x="1106.0" y="355.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1109.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.12%)</title><rect x="1106.0" y="339.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1109.0" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (47 samples, 5.58%)</title><rect x="1107.4" y="371.0" width="65.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1110.4" y="382.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (47 samples, 5.58%)</title><rect x="1107.4" y="355.0" width="65.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1110.4" y="366.0">one/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.24%)</title><rect x="1108.8" y="339.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1111.8" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="1108.8" y="323.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.8" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="1108.8" y="307.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.8" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="1108.8" y="291.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.8" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="1108.8" y="275.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.8" y="286.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="1108.8" y="259.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.8" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="1108.8" y="243.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.8" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="1108.8" y="227.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.8" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.12%)</title><rect x="1108.8" y="211.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.8" y="222.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.12%)</title><rect x="1108.8" y="195.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.8" y="206.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.12%)</title><rect x="1108.8" y="179.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.8" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.12%)</title><rect x="1108.8" y="163.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.8" y="174.0"></text>
</g>
<g>
<title>G1CollectionSet::add_young_region_common(HeapRegion*) (1 samples, 0.12%)</title><rect x="1108.8" y="147.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.8" y="158.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.12%)</title><rect x="1108.8" y="131.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.8" y="142.0"></text>
</g>
<g>
<title>G1Analytics::predict_object_copy_time_ms(unsigned long, bool) const (1 samples, 0.12%)</title><rect x="1108.8" y="115.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.8" y="126.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.12%)</title><rect x="1108.8" y="99.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1110.2" y="323.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1113.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1110.2" y="307.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1113.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (44 samples, 5.22%)</title><rect x="1111.6" y="339.0" width="61.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1114.6" y="350.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 5.22%)</title><rect x="1111.6" y="323.0" width="61.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1114.6" y="334.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 5.22%)</title><rect x="1111.6" y="307.0" width="61.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1114.6" y="318.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (37 samples, 4.39%)</title><rect x="1111.6" y="291.0" width="51.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1114.6" y="302.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.12%)</title><rect x="1111.6" y="275.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1114.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (36 samples, 4.27%)</title><rect x="1113.0" y="275.0" width="50.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1116.0" y="286.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (36 samples, 4.27%)</title><rect x="1113.0" y="259.0" width="50.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1116.0" y="270.0">sun/n..</text>
</g>
<g>
<title>rpc_errlist (33 samples, 3.91%)</title><rect x="1117.2" y="243.0" width="46.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1120.2" y="254.0">rpc_..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.83%)</title><rect x="1163.4" y="291.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1166.4" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.71%)</title><rect x="1163.4" y="275.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1166.4" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (6 samples, 0.71%)</title><rect x="1163.4" y="259.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1166.4" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.12%)</title><rect x="1163.4" y="243.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1166.4" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1163.4" y="227.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1166.4" y="238.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1163.4" y="211.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1166.4" y="222.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1163.4" y="195.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1166.4" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.createMap (4 samples, 0.47%)</title><rect x="1164.8" y="243.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1167.8" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.&lt;init&gt; (3 samples, 0.36%)</title><rect x="1166.2" y="227.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1169.2" y="238.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1169.0" y="211.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1172.0" y="222.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="1169.0" y="195.0" width="1.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1172.0" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/TerminatingThreadLocal.register (1 samples, 0.12%)</title><rect x="1170.4" y="243.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1173.4" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="1170.4" y="227.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1173.4" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.12%)</title><rect x="1170.4" y="211.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1173.4" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/TerminatingThreadLocal$1.initialValue (1 samples, 0.12%)</title><rect x="1170.4" y="195.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1173.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/TerminatingThreadLocal$1.initialValue (1 samples, 0.12%)</title><rect x="1170.4" y="179.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1173.4" y="190.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1170.4" y="163.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1173.4" y="174.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.init (1 samples, 0.12%)</title><rect x="1170.4" y="147.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1173.4" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocateDirect (1 samples, 0.12%)</title><rect x="1171.8" y="275.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1174.8" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1171.8" y="259.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1174.8" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1171.8" y="243.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1174.8" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.71%)</title><rect x="1173.2" y="387.0" width="8.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.2" y="398.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (2 samples, 0.24%)</title><rect x="1176.0" y="371.0" width="2.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1179.0" y="382.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.12%)</title><rect x="1178.8" y="371.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.12%)</title><rect x="1180.2" y="371.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1183.2" y="382.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.12%)</title><rect x="1180.2" y="355.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1183.2" y="366.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.12%)</title><rect x="1180.2" y="339.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1183.2" y="350.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.71%)</title><rect x="1181.6" y="419.0" width="8.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1184.6" y="430.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.71%)</title><rect x="1181.6" y="403.0" width="8.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1184.6" y="414.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.71%)</title><rect x="1181.6" y="387.0" width="8.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1184.6" y="398.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.71%)</title><rect x="1181.6" y="371.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.6" y="382.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.12%)</title><rect x="1181.6" y="355.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="366.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.12%)</title><rect x="1181.6" y="339.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="350.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.12%)</title><rect x="1181.6" y="323.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="334.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.12%)</title><rect x="1181.6" y="307.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.6" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.12%)</title><rect x="1181.6" y="291.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="302.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.12%)</title><rect x="1181.6" y="275.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.6" y="286.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.12%)</title><rect x="1181.6" y="259.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="270.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.12%)</title><rect x="1181.6" y="243.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="254.0"></text>
</g>
<g>
<title>JavaThread::run() (4 samples, 0.47%)</title><rect x="1183.0" y="355.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="366.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.47%)</title><rect x="1183.0" y="339.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="350.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (3 samples, 0.36%)</title><rect x="1183.0" y="323.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="334.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.36%)</title><rect x="1183.0" y="307.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="318.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.36%)</title><rect x="1183.0" y="291.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="302.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples, 0.36%)</title><rect x="1183.0" y="275.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="286.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (1 samples, 0.12%)</title><rect x="1183.0" y="259.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="270.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (1 samples, 0.12%)</title><rect x="1183.0" y="243.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.12%)</title><rect x="1183.0" y="227.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="238.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (1 samples, 0.12%)</title><rect x="1183.0" y="211.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="222.0"></text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 0.24%)</title><rect x="1184.4" y="259.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="270.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.12%)</title><rect x="1184.4" y="243.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.12%)</title><rect x="1184.4" y="227.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="238.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1184.4" y="211.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.4" y="222.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.12%)</title><rect x="1184.4" y="195.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="206.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.12%)</title><rect x="1185.8" y="243.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1185.8" y="227.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.8" y="238.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.12%)</title><rect x="1185.8" y="211.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.8" y="222.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.12%)</title><rect x="1185.8" y="195.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.8" y="206.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.12%)</title><rect x="1185.8" y="179.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.8" y="190.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.12%)</title><rect x="1187.2" y="323.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.2" y="334.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.12%)</title><rect x="1187.2" y="307.0" width="1.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1190.2" y="318.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.12%)</title><rect x="1188.6" y="355.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.6" y="366.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.12%)</title><rect x="1188.6" y="339.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.6" y="350.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.12%)</title><rect x="1188.6" y="323.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.6" y="334.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.12%)</title><rect x="1188.6" y="307.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.6" y="318.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.12%)</title><rect x="1188.6" y="291.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.6" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.12%)</title><rect x="1188.6" y="275.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1191.6" y="286.0"></text>
</g>
</g>
</svg>
