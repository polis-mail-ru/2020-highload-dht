<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (224 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.45%)</title><rect x="10.0" y="1027.0" width="5.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.45%)</title><rect x="10.0" y="1011.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (205 samples, 91.52%)</title><rect x="15.3" y="1027.0" width="1079.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.3" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (100 samples, 44.64%)</title><rect x="15.3" y="1011.0" width="526.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.3" y="1022.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.45%)</title><rect x="15.3" y="995.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.45%)</title><rect x="15.3" y="979.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.45%)</title><rect x="15.3" y="963.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.45%)</title><rect x="15.3" y="947.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.45%)</title><rect x="15.3" y="931.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.45%)</title><rect x="15.3" y="915.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.3" y="926.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 1.34%)</title><rect x="20.5" y="995.0" width="15.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.5" y="1006.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.89%)</title><rect x="25.8" y="979.0" width="10.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="28.8" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (96 samples, 42.86%)</title><rect x="36.3" y="995.0" width="505.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.3" y="1006.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (96 samples, 42.86%)</title><rect x="36.3" y="979.0" width="505.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.3" y="990.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.45%)</title><rect x="46.9" y="963.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="49.9" y="974.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.45%)</title><rect x="46.9" y="947.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="49.9" y="958.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.45%)</title><rect x="46.9" y="931.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="49.9" y="942.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.45%)</title><rect x="46.9" y="915.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="49.9" y="926.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.45%)</title><rect x="52.1" y="963.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="55.1" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (92 samples, 41.07%)</title><rect x="57.4" y="963.0" width="484.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.4" y="974.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (90 samples, 40.18%)</title><rect x="57.4" y="947.0" width="474.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.4" y="958.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>kevent (88 samples, 39.29%)</title><rect x="67.9" y="931.0" width="463.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="70.9" y="942.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.45%)</title><rect x="531.5" y="947.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="534.5" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.45%)</title><rect x="536.8" y="947.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="539.8" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.45%)</title><rect x="536.8" y="931.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="539.8" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.45%)</title><rect x="536.8" y="915.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="539.8" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (105 samples, 46.88%)</title><rect x="542.1" y="1011.0" width="553.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.1" y="1022.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (105 samples, 46.88%)</title><rect x="542.1" y="995.0" width="553.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="545.1" y="1006.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (89 samples, 39.73%)</title><rect x="542.1" y="979.0" width="468.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="545.1" y="990.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (80 samples, 35.71%)</title><rect x="552.6" y="963.0" width="421.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="555.6" y="974.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (80 samples, 35.71%)</title><rect x="552.6" y="947.0" width="421.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="555.6" y="958.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (79 samples, 35.27%)</title><rect x="552.6" y="931.0" width="416.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="555.6" y="942.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (60 samples, 26.79%)</title><rect x="552.6" y="915.0" width="316.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="555.6" y="926.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.45%)</title><rect x="563.1" y="899.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="566.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.45%)</title><rect x="563.1" y="883.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.1" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.45%)</title><rect x="563.1" y="867.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="566.1" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (56 samples, 25.00%)</title><rect x="568.4" y="899.0" width="295.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="571.4" y="910.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 1.34%)</title><rect x="568.4" y="883.0" width="15.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="571.4" y="894.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.45%)</title><rect x="578.9" y="867.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="581.9" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.45%)</title><rect x="578.9" y="851.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.9" y="862.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.45%)</title><rect x="578.9" y="835.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="581.9" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (53 samples, 23.66%)</title><rect x="584.2" y="883.0" width="279.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="587.2" y="894.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (53 samples, 23.66%)</title><rect x="584.2" y="867.0" width="279.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="587.2" y="878.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (53 samples, 23.66%)</title><rect x="584.2" y="851.0" width="279.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="587.2" y="862.0">one/nio/net/Session$ArrayQueueItem.wr..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (53 samples, 23.66%)</title><rect x="584.2" y="835.0" width="279.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="587.2" y="846.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (53 samples, 23.66%)</title><rect x="584.2" y="819.0" width="279.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.2" y="830.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (53 samples, 23.66%)</title><rect x="584.2" y="803.0" width="279.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="587.2" y="814.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (53 samples, 23.66%)</title><rect x="584.2" y="787.0" width="279.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="587.2" y="798.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.45%)</title><rect x="589.5" y="771.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="592.5" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.89%)</title><rect x="594.7" y="771.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="597.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (48 samples, 21.43%)</title><rect x="605.3" y="771.0" width="252.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="608.3" y="782.0">sun/nio/ch/IOUtil.writeFromNativeB..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.45%)</title><rect x="610.5" y="755.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="613.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (46 samples, 20.54%)</title><rect x="615.8" y="755.0" width="242.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="618.8" y="766.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (46 samples, 20.54%)</title><rect x="615.8" y="739.0" width="242.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="618.8" y="750.0">sun/nio/ch/FileDispatcherImpl.wr..</text>
</g>
<g>
<title>write (43 samples, 19.20%)</title><rect x="631.6" y="723.0" width="226.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="634.6" y="734.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.45%)</title><rect x="858.1" y="771.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.45%)</title><rect x="858.1" y="755.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="861.1" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.45%)</title><rect x="858.1" y="739.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="861.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.45%)</title><rect x="863.4" y="899.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="866.4" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/suhova/MoribundService.put (19 samples, 8.48%)</title><rect x="868.7" y="915.0" width="100.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="871.7" y="926.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/TurboDAO.upsert (19 samples, 8.48%)</title><rect x="868.7" y="899.0" width="100.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.7" y="910.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/suhova/MemTable.upsert (19 samples, 8.48%)</title><rect x="868.7" y="883.0" width="100.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.7" y="894.0">ru/mail/poli..</text>
</g>
<g>
<title>java/util/TreeMap.put (16 samples, 7.14%)</title><rect x="868.7" y="867.0" width="84.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="871.7" y="878.0">java/util/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (8 samples, 3.57%)</title><rect x="905.5" y="851.0" width="42.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="908.5" y="862.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 2.23%)</title><rect x="921.3" y="835.0" width="26.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="924.3" y="846.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 1.79%)</title><rect x="921.3" y="819.0" width="21.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="924.3" y="830.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 1.34%)</title><rect x="926.6" y="803.0" width="15.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="929.6" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 1.34%)</title><rect x="926.6" y="787.0" width="15.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="929.6" y="798.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.45%)</title><rect x="937.1" y="771.0" width="5.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="940.1" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.45%)</title><rect x="942.4" y="819.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="945.4" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.45%)</title><rect x="942.4" y="803.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="945.4" y="814.0"></text>
</g>
<g>
<title>vectorizedMismatch (1 samples, 0.45%)</title><rect x="942.4" y="787.0" width="5.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="945.4" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.45%)</title><rect x="947.7" y="851.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.7" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 1.34%)</title><rect x="952.9" y="867.0" width="15.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="955.9" y="878.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.45%)</title><rect x="952.9" y="851.0" width="5.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="955.9" y="862.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.89%)</title><rect x="958.2" y="851.0" width="10.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="961.2" y="862.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.45%)</title><rect x="968.8" y="931.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="971.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.45%)</title><rect x="968.8" y="915.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="971.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.45%)</title><rect x="968.8" y="899.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="971.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.45%)</title><rect x="968.8" y="883.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="971.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.45%)</title><rect x="968.8" y="867.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="971.8" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.89%)</title><rect x="974.0" y="963.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="977.0" y="974.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 2.23%)</title><rect x="984.6" y="963.0" width="26.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.6" y="974.0">o..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 2.23%)</title><rect x="984.6" y="947.0" width="26.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="987.6" y="958.0">j..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.45%)</title><rect x="995.1" y="931.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="998.1" y="942.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.45%)</title><rect x="995.1" y="915.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="998.1" y="926.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.89%)</title><rect x="1000.4" y="931.0" width="10.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1003.4" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (16 samples, 7.14%)</title><rect x="1010.9" y="979.0" width="84.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1013.9" y="990.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (16 samples, 7.14%)</title><rect x="1010.9" y="963.0" width="84.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1013.9" y="974.0">one/nio/ne..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.45%)</title><rect x="1010.9" y="947.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1013.9" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.45%)</title><rect x="1010.9" y="931.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.9" y="942.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.45%)</title><rect x="1010.9" y="915.0" width="5.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1013.9" y="926.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.45%)</title><rect x="1010.9" y="899.0" width="5.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1013.9" y="910.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.45%)</title><rect x="1010.9" y="883.0" width="5.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1013.9" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (15 samples, 6.70%)</title><rect x="1016.2" y="947.0" width="79.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1019.2" y="958.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 6.70%)</title><rect x="1016.2" y="931.0" width="79.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1019.2" y="942.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (14 samples, 6.25%)</title><rect x="1021.4" y="915.0" width="73.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1024.4" y="926.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (14 samples, 6.25%)</title><rect x="1021.4" y="899.0" width="73.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1024.4" y="910.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (14 samples, 6.25%)</title><rect x="1021.4" y="883.0" width="73.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1024.4" y="894.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (14 samples, 6.25%)</title><rect x="1021.4" y="867.0" width="73.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1024.4" y="878.0">sun/nio/..</text>
</g>
<g>
<title>rpc_errlist (14 samples, 6.25%)</title><rect x="1021.4" y="851.0" width="73.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1024.4" y="862.0">rpc_errl..</text>
</g>
<g>
<title>thread_start (18 samples, 8.04%)</title><rect x="1095.2" y="1027.0" width="94.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1098.2" y="1038.0">thread_start</text>
</g>
<g>
<title>_pthread_start (18 samples, 8.04%)</title><rect x="1095.2" y="1011.0" width="94.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1098.2" y="1022.0">_pthread_st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (18 samples, 8.04%)</title><rect x="1095.2" y="995.0" width="94.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1098.2" y="1006.0">thread_nati..</text>
</g>
<g>
<title>Thread::call_run() (18 samples, 8.04%)</title><rect x="1095.2" y="979.0" width="94.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.2" y="990.0">Thread::cal..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (3 samples, 1.34%)</title><rect x="1095.2" y="963.0" width="15.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.2" y="974.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (3 samples, 1.34%)</title><rect x="1095.2" y="947.0" width="15.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.2" y="958.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.89%)</title><rect x="1095.2" y="931.0" width="10.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1098.2" y="942.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.89%)</title><rect x="1095.2" y="915.0" width="10.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.2" y="926.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.45%)</title><rect x="1095.2" y="899.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.2" y="910.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.45%)</title><rect x="1095.2" y="883.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.2" y="894.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.45%)</title><rect x="1100.4" y="899.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.4" y="910.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.45%)</title><rect x="1105.7" y="931.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.7" y="942.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.45%)</title><rect x="1105.7" y="915.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="926.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.45%)</title><rect x="1105.7" y="899.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.7" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.45%)</title><rect x="1105.7" y="883.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.7" y="894.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.45%)</title><rect x="1105.7" y="867.0" width="5.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1108.7" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 3.57%)</title><rect x="1111.0" y="963.0" width="42.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.0" y="974.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 3.57%)</title><rect x="1111.0" y="947.0" width="42.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.0" y="958.0">G1Pa..</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (8 samples, 3.57%)</title><rect x="1111.0" y="931.0" width="42.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.0" y="942.0">G1Re..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (8 samples, 3.57%)</title><rect x="1111.0" y="915.0" width="42.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.0" y="926.0">G1Re..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (8 samples, 3.57%)</title><rect x="1111.0" y="899.0" width="42.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.0" y="910.0">G1Co..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (8 samples, 3.57%)</title><rect x="1111.0" y="883.0" width="42.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.0" y="894.0">Dirt..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 3.57%)</title><rect x="1111.0" y="867.0" width="42.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.0" y="878.0">G1Re..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (7 samples, 3.12%)</title><rect x="1111.0" y="851.0" width="36.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.0" y="862.0">G1P..</text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (5 samples, 2.23%)</title><rect x="1121.5" y="835.0" width="26.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.5" y="846.0">v..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 2.23%)</title><rect x="1121.5" y="819.0" width="26.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.5" y="830.0">G..</text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (2 samples, 0.89%)</title><rect x="1126.8" y="803.0" width="10.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.8" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.89%)</title><rect x="1137.3" y="803.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.3" y="814.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.45%)</title><rect x="1142.6" y="787.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.6" y="798.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.45%)</title><rect x="1147.9" y="851.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="862.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.45%)</title><rect x="1147.9" y="835.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.9" y="846.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.45%)</title><rect x="1147.9" y="819.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.9" y="830.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.45%)</title><rect x="1147.9" y="803.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.9" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (7 samples, 3.12%)</title><rect x="1153.1" y="963.0" width="36.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.1" y="974.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (7 samples, 3.12%)</title><rect x="1153.1" y="947.0" width="36.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.1" y="958.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (6 samples, 2.68%)</title><rect x="1153.1" y="931.0" width="31.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.1" y="942.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (6 samples, 2.68%)</title><rect x="1153.1" y="915.0" width="31.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.1" y="926.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 2.68%)</title><rect x="1153.1" y="899.0" width="31.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.1" y="910.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (6 samples, 2.68%)</title><rect x="1153.1" y="883.0" width="31.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.1" y="894.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 1.34%)</title><rect x="1153.1" y="867.0" width="15.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 1.34%)</title><rect x="1153.1" y="851.0" width="15.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.1" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.45%)</title><rect x="1153.1" y="835.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.45%)</title><rect x="1153.1" y="819.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.45%)</title><rect x="1153.1" y="803.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.1" y="814.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.45%)</title><rect x="1153.1" y="787.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.45%)</title><rect x="1158.4" y="835.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (1 samples, 0.45%)</title><rect x="1158.4" y="819.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.45%)</title><rect x="1158.4" y="803.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.4" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.45%)</title><rect x="1163.7" y="835.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 0.89%)</title><rect x="1168.9" y="867.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="878.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.45%)</title><rect x="1168.9" y="851.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.45%)</title><rect x="1168.9" y="835.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.45%)</title><rect x="1168.9" y="819.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.45%)</title><rect x="1174.2" y="851.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.2" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.45%)</title><rect x="1174.2" y="835.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.2" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.45%)</title><rect x="1174.2" y="819.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1179.5" y="867.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1179.5" y="851.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1179.5" y="835.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1179.5" y="819.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1179.5" y="803.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1179.5" y="787.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1179.5" y="771.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1179.5" y="755.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1179.5" y="739.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1179.5" y="723.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1179.5" y="707.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1179.5" y="691.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1179.5" y="675.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1179.5" y="659.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1179.5" y="643.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1179.5" y="627.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1179.5" y="611.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1179.5" y="595.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1179.5" y="579.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1179.5" y="563.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1179.5" y="547.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.5" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1179.5" y="531.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1179.5" y="515.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1179.5" y="499.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1179.5" y="483.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1179.5" y="467.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1179.5" y="451.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1179.5" y="435.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1179.5" y="419.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1179.5" y="403.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1179.5" y="387.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1179.5" y="371.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1179.5" y="355.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1179.5" y="339.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1179.5" y="323.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1179.5" y="307.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1179.5" y="291.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1179.5" y="275.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1179.5" y="259.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1179.5" y="243.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.45%)</title><rect x="1179.5" y="227.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.45%)</title><rect x="1179.5" y="211.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="222.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.45%)</title><rect x="1179.5" y="195.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="206.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.45%)</title><rect x="1179.5" y="179.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="190.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.45%)</title><rect x="1179.5" y="163.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.5" y="174.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.45%)</title><rect x="1179.5" y="147.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="158.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.45%)</title><rect x="1179.5" y="131.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="142.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.45%)</title><rect x="1179.5" y="115.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="126.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.45%)</title><rect x="1179.5" y="99.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.5" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.45%)</title><rect x="1179.5" y="83.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.45%)</title><rect x="1179.5" y="67.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="78.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.45%)</title><rect x="1179.5" y="51.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.45%)</title><rect x="1179.5" y="35.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="46.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.45%)</title><rect x="1184.7" y="931.0" width="5.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1187.7" y="942.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.45%)</title><rect x="1184.7" y="915.0" width="5.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1187.7" y="926.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.45%)</title><rect x="1184.7" y="899.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="910.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.45%)</title><rect x="1184.7" y="883.0" width="5.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1187.7" y="894.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.45%)</title><rect x="1184.7" y="867.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="878.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.45%)</title><rect x="1184.7" y="851.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.7" y="862.0"></text>
</g>
<g>
<title>Profiler::start(Arguments&amp;, bool) (1 samples, 0.45%)</title><rect x="1184.7" y="835.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="846.0"></text>
</g>
<g>
<title>Profiler::bindNativeLibraryLoad(JNIEnv_*, unsigned char (*)(JNIEnv_*, _jobject*, _jstring*, unsigned char)) (1 samples, 0.45%)</title><rect x="1184.7" y="819.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.7" y="830.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.45%)</title><rect x="1184.7" y="803.0" width="5.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1187.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.45%)</title><rect x="1184.7" y="787.0" width="5.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1187.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.45%)</title><rect x="1184.7" y="771.0" width="5.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1187.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.45%)</title><rect x="1184.7" y="755.0" width="5.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1187.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.45%)</title><rect x="1184.7" y="739.0" width="5.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1187.7" y="750.0"></text>
</g>
</g>
</svg>
